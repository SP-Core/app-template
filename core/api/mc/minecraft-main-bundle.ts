// @ts-nocheck
//net.minecraft.command.argument.serialize.StringArgumentSerializer$Properties
class StringArgumentSerializer_Properties extends JObject, ArgumentSerializer_ArgumentTypeProperties{
 createType(commandRegistryAccess: CommandRegistryAccess): ArgumentType;
 createType(commandRegistryAccess: CommandRegistryAccess): StringArgumentType;
 getSerializer(): ArgumentSerializer;
}

//net.minecraft.server.command.DebugPathCommand
class DebugPathCommand extends JObject{
}
class Static_DebugPathCommand {
static register(dispatcher: CommandDispatcher): void;
static execute(source: ServerCommandSource,pos: BlockPos): number;
static method_51953(): Text;
static method_36189(source: ServerCommandSource): boolean;
static method_36188(context: CommandContext): number;
static SOURCE_NOT_MOB_EXCEPTION: SimpleCommandExceptionType;
static PATH_NOT_FOUND_EXCEPTION: SimpleCommandExceptionType;
static TARGET_NOT_REACHED_EXCEPTION: SimpleCommandExceptionType;
}

//net.minecraft.util.math.intprovider.IntProvider
class IntProvider extends JObject{
 get(random: Random): number;
 getType(): IntProviderType;
 getMin(): number;
 getMax(): number;
}
class Static_IntProvider {
static createValidatingCodec(min: number,max: number): Codec;
static createValidatingCodec(min: number,max: number,providerCodec: Codec): Codec;
static method_35005(i: number,j: number,provider: IntProvider): DataResult;
static method_49471(i: number,intProvider: IntProvider): string;
static method_35006(provider: IntProvider): Either;
static method_49470(i: number,intProvider: IntProvider): string;
static method_35007(either: Either): IntProvider;
static method_35010(provider: IntProvider): IntProvider;
static INT_CODEC: Codec;
static VALUE_CODEC: Codec;
static NON_NEGATIVE_CODEC: Codec;
static POSITIVE_CODEC: Codec;
}

//net.minecraft.client.font.BuiltinEmptyGlyph$ColorSupplier
interface BuiltinEmptyGlyph_ColorSupplier extends JObject{
 getColor(x: number,y: number): number;
}

//net.minecraft.structure.rule.RuleTestType
interface RuleTestType extends JObject{
 codec(): Codec;
}
class Static_RuleTestType {
static register(id: string,codec: Codec): RuleTestType;
static method_28997(codec: Codec): Codec;
static ALWAYS_TRUE: RuleTestType;
static BLOCK_MATCH: RuleTestType;
static BLOCKSTATE_MATCH: RuleTestType;
static TAG_MATCH: RuleTestType;
static RANDOM_BLOCK_MATCH: RuleTestType;
static RANDOM_BLOCKSTATE_MATCH: RuleTestType;
}

//net.minecraft.data.client.VariantSetting$Value
class VariantSetting_Value extends JObject{
 toString(): string;
 getParent(): VariantSetting;
 writeTo(json: JsonObject): void;
}

//net.minecraft.block.LichenGrower$LichenGrowChecker
class LichenGrower_LichenGrowChecker extends JObject, LichenGrower_GrowChecker{
 getStateWithDirection(state: BlockState,world: BlockView,pos: BlockPos,direction: Direction): BlockState;
 canGrow(world: BlockView,pos: BlockPos,growPos: LichenGrower_GrowPos): boolean;
}

//net.minecraft.world.gen.feature.OreFeatureConfig
class OreFeatureConfig extends JObject, FeatureConfig{
 targets: List;
 size: number;
 discardOnAirChance: number;
}
class Static_OreFeatureConfig {
static createTarget(test: RuleTest,state: BlockState): OreFeatureConfig_Target;
static method_33992(instance: RecordCodecBuilder_Instance): App;
static method_28745(config: OreFeatureConfig): List;
static method_33995(config: OreFeatureConfig): Integer;
static method_33993(config: OreFeatureConfig): Float;
static CODEC: Codec;
}

//net.minecraft.world.chunk.ChunkStatus$GenerationTask
interface ChunkStatus_GenerationTask extends JObject{
 doWork(targetStatus: ChunkStatus,executor: Executor,world: ServerWorld,generator: ChunkGenerator,structureTemplateManager: StructureTemplateManager,lightingProvider: ServerLightingProvider,fullChunkConverter: Function,chunks: List,chunk: Chunk): CompletableFuture;
}

//net.minecraft.client.util.telemetry.GameLoadTimeEvent
class GameLoadTimeEvent extends JObject{
 send(sender: TelemetrySender): void;
 addTimer(property: TelemetryEventProperty,stopwatch: Stopwatch): void;
 startTimer(property: TelemetryEventProperty): void;
 setBootstrapTime(bootstrapTime: long): void;
 stopTimer(property: TelemetryEventProperty): void;
}
class Static_GameLoadTimeEvent {
static method_51811(builder: PropertyMap_Builder,property: TelemetryEventProperty,stopwatch: Stopwatch): void;
static method_51804(stopwatch: Stopwatch,property: TelemetryEventProperty): Stopwatch;
static method_51810(builder: PropertyMap_Builder,bootstrapTime: long): void;
static INSTANCE: GameLoadTimeEvent;
static LOGGER: Logger;
}

//net.minecraft.class_6148
class class_6148 extends JObject{
}
class Static_class_6148 {
static field_31827: number;
static field_31828: number;
static field_31829: number;
}

//net.minecraft.screen.ScreenHandler
class ScreenHandler extends JObject{
 setProperty(id: number,value: number): void;
 canUse(player: PlayerEntity): boolean;
 getType(): ScreenHandlerType;
 getSlot(index: number): Slot;
 isValid(slot: number): boolean;
 removeListener(listener: ScreenHandlerListener): void;
 addListener(listener: ScreenHandlerListener): void;
 setPreviousTrackedSlot(slot: number,stack: ItemStack): void;
 setPreviousTrackedSlotMutable(slot: number,stack: ItemStack): void;
 setPreviousCursorStack(stack: ItemStack): void;
 getCursorStack(): ItemStack;
 updateSyncHandler(handler: ScreenHandlerSyncHandler): void;
 getStacks(): DefaultedList;
 sendContentUpdates(): void;
 syncState(): void;
 onSlotClick(slotIndex: number,button: number,actionType: SlotActionType,player: PlayerEntity): void;
 quickMove(player: PlayerEntity,slot: number): ItemStack;
 updateToClient(): void;
 onButtonClick(player: PlayerEntity,id: number): boolean;
 canInsertIntoSlot(stack: ItemStack,slot: Slot): boolean;
 canInsertIntoSlot(slot: Slot): boolean;
 setCursorStack(stack: ItemStack): void;
 updateSlotStacks(revision: number,stacks: List,cursorStack: ItemStack): void;
 onClosed(player: PlayerEntity): void;
 onContentChanged(inventory: Inventory): void;
 setStackInSlot(slot: number,revision: number,stack: ItemStack): void;
 getSlotIndex(inventory: Inventory,index: number): OptionalInt;
 getRevision(): number;
 copySharedSlots(handler: ScreenHandler): void;
 disableSyncing(): void;
 enableSyncing(): void;
 nextRevision(): number;
 slots: DefaultedList;
 syncId: number;
}
class Static_ScreenHandler {
static canUse(context: ScreenHandlerContext,player: PlayerEntity,block: Block): boolean;
static checkSize(inventory: Inventory,expectedSize: number): void;
static unpackQuickCraftStage(quickCraftData: number): number;
static unpackQuickCraftButton(quickCraftData: number): number;
static canInsertItemIntoSlot(slot: Slot,stack: ItemStack,allowOverflow: boolean): boolean;
static shouldQuickCraftContinue(stage: number,player: PlayerEntity): boolean;
static calculateComparatorOutput(inventory: Inventory): number;
static calculateComparatorOutput(entity: BlockEntity): number;
static method_17696(block: Block,playerEntity: PlayerEntity,world: World,pos: BlockPos): Boolean;
static checkDataCount(data: PropertyDelegate,expectedCount: number): void;
static calculateStackSize(slots: Set,mode: number,stack: ItemStack): number;
static method_34251(itemStack: ItemStack,slot: Slot,playerEntity: PlayerEntity,stack: ItemStack): void;
static packQuickCraftData(quickCraftStage: number,buttonId: number): number;
static LOGGER: Logger;
static EMPTY_SPACE_SLOT_INDEX: number;
static field_30731: number;
static field_30732: number;
static field_30733: number;
static field_30734: number;
static field_30735: number;
static field_30736: number;
static field_30737: number;
}

//net.minecraft.network.packet.s2c.play.SetCameraEntityS2CPacket
class SetCameraEntityS2CPacket extends JObject, Packet{
 apply(clientPlayPacketListener: ClientPlayPacketListener): void;
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
 getEntity(world: World): Entity;
}

//net.minecraft.client.particle.AshParticle$Factory
class AshParticle_Factory extends JObject, ParticleFactory{
 createParticle(defaultParticleType: DefaultParticleType,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
 createParticle(particleEffect: ParticleEffect,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
}

//net.minecraft.util.shape.VoxelShape
class VoxelShape extends JObject{
 toString(): string;
 isEmpty(): boolean;
 offset(x: number,y: number,z: number): VoxelShape;
 getMin(axis: Direction_Axis): number;
 getMax(axis: Direction_Axis): number;
 calculateMaxDistance(axis: Direction_Axis,box: Box,maxDist: number): number;
 forEachEdge(consumer: VoxelShapes_BoxConsumer): void;
 getBoundingBox(): Box;
 simplify(): VoxelShape;
 forEachBox(consumer: VoxelShapes_BoxConsumer): void;
 getBoundingBoxes(): List;
 raycast(start: Vec3d,end: Vec3d,pos: BlockPos): BlockHitResult;
 getEndingCoord(axis: Direction_Axis,from: number,to: number): number;
 getStartingCoord(axis: Direction_Axis,from: number,to: number): number;
 getClosestPointTo(target: Vec3d): Optional;
 getFace(facing: Direction): VoxelShape;
}
class Static_VoxelShape {
static method_1094(voxelShapes: VoxelShape[],minX: number,minY: number,minZ: number,maxX: number,maxY: number,maxZ: number): void;
static method_1112(boxConsumer: VoxelShapes_BoxConsumer,doubleList: DoubleList,doubleList2: DoubleList,doubleList3: DoubleList,minX: number,minY: number,minZ: number,maxX: number,maxY: number,maxZ: number): void;
static method_1111(list: List,x1: number,y1: number,z1: number,x2: number,y2: number,z2: number): void;
static method_33662(vec3d: Vec3d,vec3ds: Vec3d[],minX: number,minY: number,minZ: number,maxX: number,maxY: number,maxZ: number): void;
}

//net.minecraft.block.VineBlock$1


//net.minecraft.client.render.BufferBuilder$1


//net.minecraft.village.VillagerType
class VillagerType extends JObject{
 toString(): string;
}
class Static_VillagerType {
static create(id: string): VillagerType;
static forBiome(biomeEntry: RegistryEntry): VillagerType;
static method_16932(map: HashMap): void;
static DESERT: VillagerType;
static JUNGLE: VillagerType;
static PLAINS: VillagerType;
static SAVANNA: VillagerType;
static SNOW: VillagerType;
static SWAMP: VillagerType;
static TAIGA: VillagerType;
static BIOME_TO_TYPE: Map;
}

//net.minecraft.world.border.WorldBorder$MovingArea
class WorldBorder_MovingArea extends JObject, WorldBorder_Area{
 getSize(): number;
 getBoundNorth(): number;
 onMaxRadiusChanged(): void;
 getAreaInstance(): WorldBorder_Area;
 onCenterChanged(): void;
 getBoundWest(): number;
 getBoundEast(): number;
 getSizeLerpTime(): long;
 getStage(): WorldBorderStage;
 getBoundSouth(): number;
 getSizeLerpTarget(): number;
 getShrinkingSpeed(): number;
 asVoxelShape(): VoxelShape;
}

//net.minecraft.advancement.criterion.ImpossibleCriterion$Conditions
class ImpossibleCriterion_Conditions extends JObject, CriterionConditions{
 getId(): Identifier;
 toJson(predicateSerializer: AdvancementEntityPredicateSerializer): JsonObject;
}

//net.minecraft.entity.damage.DamageTypes
interface DamageTypes extends JObject{
}
class Static_DamageTypes {
static bootstrap(damageTypeRegisterable: Registerable): void;
static IN_FIRE: RegistryKey;
static LIGHTNING_BOLT: RegistryKey;
static ON_FIRE: RegistryKey;
static LAVA: RegistryKey;
static HOT_FLOOR: RegistryKey;
static IN_WALL: RegistryKey;
static CRAMMING: RegistryKey;
static DROWN: RegistryKey;
static STARVE: RegistryKey;
static CACTUS: RegistryKey;
static FALL: RegistryKey;
static FLY_INTO_WALL: RegistryKey;
static OUT_OF_WORLD: RegistryKey;
static GENERIC: RegistryKey;
static MAGIC: RegistryKey;
static WITHER: RegistryKey;
static DRAGON_BREATH: RegistryKey;
static DRY_OUT: RegistryKey;
static SWEET_BERRY_BUSH: RegistryKey;
static FREEZE: RegistryKey;
static STALAGMITE: RegistryKey;
static FALLING_BLOCK: RegistryKey;
static FALLING_ANVIL: RegistryKey;
static FALLING_STALACTITE: RegistryKey;
static STING: RegistryKey;
static MOB_ATTACK: RegistryKey;
static MOB_ATTACK_NO_AGGRO: RegistryKey;
static PLAYER_ATTACK: RegistryKey;
static ARROW: RegistryKey;
static TRIDENT: RegistryKey;
static MOB_PROJECTILE: RegistryKey;
static FIREWORKS: RegistryKey;
static FIREBALL: RegistryKey;
static UNATTRIBUTED_FIREBALL: RegistryKey;
static WITHER_SKULL: RegistryKey;
static THROWN: RegistryKey;
static INDIRECT_MAGIC: RegistryKey;
static THORNS: RegistryKey;
static EXPLOSION: RegistryKey;
static PLAYER_EXPLOSION: RegistryKey;
static SONIC_BOOM: RegistryKey;
static BAD_RESPAWN_POINT: RegistryKey;
static OUTSIDE_BORDER: RegistryKey;
static GENERIC_KILL: RegistryKey;
}

//net.minecraft.server.command.DataCommand
class DataCommand extends JObject{
}
class Static_DataCommand {
static substring(string: string,startIndex: number,endIndex: number): string;
static substring(string: string,startIndex: number): string;
static register(dispatcher: CommandDispatcher): void;
static asString(nbt: NbtElement): string;
static method_13895(builder: ArgumentBuilder,modifier: DataCommand_ModifyArgumentCreator): void;
static method_13896(objectType: DataCommand_ObjectType,builder: ArgumentBuilder): ArgumentBuilder;
static method_13923(objectType: DataCommand_ObjectType,builder: ArgumentBuilder): ArgumentBuilder;
static method_13890(source: ServerCommandSource): boolean;
static addModifyArgument(subArgumentAdder: BiConsumer): ArgumentBuilder;
static method_13889(objectType: DataCommand_ObjectType,builder: ArgumentBuilder): ArgumentBuilder;
static executeModify(context: CommandContext,objectType: DataCommand_ObjectType,modifier: DataCommand_ModifyOperation,elements: List): number;
static method_13922(biConsumer: BiConsumer,objectType: DataCommand_ObjectType,builder: ArgumentBuilder): ArgumentBuilder;
static getSubstringIndex(index: number,length: number): number;
static getValuesByPath(context: CommandContext,objectType: DataCommand_ObjectType): List;
static mapValues(list: List,processor: DataCommand_Processor): List;
static getNbt(path: NbtPathArgumentType_NbtPath,object: DataCommandObject): NbtElement;
static substringInternal(string: string,startIndex: number,endIndex: number): string;
static method_52167(dataCommandObject: DataCommandObject): Text;
static getValues(context: CommandContext,objectType: DataCommand_ObjectType): List;
static method_48090(objectType: DataCommand_ObjectType,objectType2: DataCommand_ObjectType,operation: DataCommand_ModifyOperation): ArgumentBuilder;
static executeMerge(source: ServerCommandSource,object: DataCommandObject,nbt: NbtCompound): number;
static method_13899(objectType: DataCommand_ObjectType,modifier: DataCommand_ModifyOperation): ArgumentBuilder;
static method_52160(dataCommandObject: DataCommandObject): Text;
static method_13911(objectType: DataCommand_ObjectType,objectType2: DataCommand_ObjectType,operation: DataCommand_ModifyOperation): ArgumentBuilder;
static executeGet(source: ServerCommandSource,object: DataCommandObject,path: NbtPathArgumentType_NbtPath): number;
static executeGet(source: ServerCommandSource,object: DataCommandObject,path: NbtPathArgumentType_NbtPath,scale: number): number;
static executeGet(source: ServerCommandSource,object: DataCommandObject): number;
static method_52166(dataCommandObject: DataCommandObject): Text;
static executeRemove(source: ServerCommandSource,object: DataCommandObject,path: NbtPathArgumentType_NbtPath): number;
static method_52162(dataCommandObject: DataCommandObject,nbtCompound: NbtCompound): Text;
static method_52163(dataCommandObject: DataCommandObject,nbtElement: NbtElement): Text;
static method_52161(dataCommandObject: DataCommandObject,nbtPath: NbtPathArgumentType_NbtPath,d: number,i: number): Text;
static method_13893(objectType: DataCommand_ObjectType,modifyOperation: DataCommand_ModifyOperation,objectType2: DataCommand_ObjectType,builderx: ArgumentBuilder): ArgumentBuilder;
static method_48104(objectType: DataCommand_ObjectType,modifyOperation: DataCommand_ModifyOperation,objectType2: DataCommand_ObjectType,context: CommandContext): number;
static method_48103(objectType: DataCommand_ObjectType,modifyOperation: DataCommand_ModifyOperation,objectType2: DataCommand_ObjectType,context: CommandContext): number;
static method_13891(context: CommandContext,sourceNbt: NbtCompound,path: NbtPathArgumentType_NbtPath,elements: List): number;
static method_48101(objectType: DataCommand_ObjectType,modifyOperation: DataCommand_ModifyOperation,objectType2: DataCommand_ObjectType,context: CommandContext): number;
static method_48094(value: string): string;
static method_48097(objectType: DataCommand_ObjectType,modifyOperation: DataCommand_ModifyOperation,objectType2: DataCommand_ObjectType,context: CommandContext): number;
static method_48100(value: string): string;
static method_47954(context: CommandContext,sourceNbt: NbtCompound,path: NbtPathArgumentType_NbtPath,elements: List): number;
static method_48088(objectType: DataCommand_ObjectType,modifyOperation: DataCommand_ModifyOperation,objectType2: DataCommand_ObjectType,builderx: ArgumentBuilder): ArgumentBuilder;
static method_48099(commandContext: CommandContext,value: string): string;
static method_13900(objectType: DataCommand_ObjectType,modifyOperation: DataCommand_ModifyOperation,context: CommandContext): number;
static method_48102(objectType: DataCommand_ObjectType,modifyOperation: DataCommand_ModifyOperation,objectType2: DataCommand_ObjectType,context: CommandContext): number;
static method_48089(objectType: DataCommand_ObjectType,modifyOperation: DataCommand_ModifyOperation,objectType2: DataCommand_ObjectType,context: CommandContext): number;
static method_48092(commandContext: CommandContext,value: string): string;
static method_48093(nbt: Object): Message;
static method_47953(context: CommandContext,sourceNbt: NbtCompound,path: NbtPathArgumentType_NbtPath,elements: List): number;
static method_13907(nbt: Object): Message;
static method_47952(context: CommandContext,element: NbtCompound,path: NbtPathArgumentType_NbtPath,elements: List): number;
static method_13904(objectType: DataCommand_ObjectType,context: CommandContext): number;
static method_13906(factory: Function): DataCommand_ObjectType;
static method_13888(context: CommandContext,sourceNbt: NbtCompound,path: NbtPathArgumentType_NbtPath,elements: List): number;
static method_13909(objectType: DataCommand_ObjectType,context: CommandContext): number;
static method_13887(objectType: DataCommand_ObjectType,context: CommandContext): number;
static method_52164(startIndex: Object,endIndex: Object): Message;
static method_13912(objectType: DataCommand_ObjectType,context: CommandContext): number;
static method_13886(objectType: DataCommand_ObjectType,context: CommandContext): number;
static method_13919(factory: Function): DataCommand_ObjectType;
static method_13902(path: Object): Message;
static method_13892(path: Object): Message;
static MERGE_FAILED_EXCEPTION: SimpleCommandExceptionType;
static GET_INVALID_EXCEPTION: DynamicCommandExceptionType;
static GET_UNKNOWN_EXCEPTION: DynamicCommandExceptionType;
static GET_MULTIPLE_EXCEPTION: SimpleCommandExceptionType;
static MODIFY_EXPECTED_OBJECT_EXCEPTION: DynamicCommandExceptionType;
static MODIFY_EXPECTED_VALUE_EXCEPTION: DynamicCommandExceptionType;
static MODIFY_INVALID_SUBSTRING_EXCEPTION: Dynamic2CommandExceptionType;
static OBJECT_TYPE_FACTORIES: List;
static TARGET_OBJECT_TYPES: List;
static SOURCE_OBJECT_TYPES: List;
}

//net.minecraft.entity.ai.brain.task.ForgetTask
class ForgetTask extends JObject{
}
class Static_ForgetTask {
static create(condition: Predicate,memory: MemoryModuleType): Task;
static method_46919(memoryModuleType: MemoryModuleType,predicate: Predicate,context: TaskTriggerer_TaskContext): App;
static method_46921(predicate: Predicate,memoryQueryResult: MemoryQueryResult,world: ServerWorld,entity: LivingEntity,time: long): boolean;
static method_46920(predicate: Predicate,queryResult: MemoryQueryResult): TaskRunnable;
}

//net.minecraft.client.option.SimpleOption$IntSliderCallbacks$1


//net.minecraft.client.particle.SuspendParticle$HappyVillagerFactory
class SuspendParticle_HappyVillagerFactory extends JObject, ParticleFactory{
 createParticle(defaultParticleType: DefaultParticleType,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
 createParticle(particleEffect: ParticleEffect,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
}

//net.minecraft.unused.packageinfo.PackageInfo7912
interface PackageInfo7912 extends JObject{
}

//net.minecraft.registry.RegistryWrapper$Impl
interface RegistryWrapper_Impl extends JObject, RegistryWrapper, RegistryEntryOwner{
 getRegistryKey(): RegistryKey;
 getLifecycle(): Lifecycle;
 withFeatureFilter(enabledFeatures: FeatureSet): RegistryWrapper;
}
class Static_RegistryWrapper_Impl {
static method_45920(featureSet: FeatureSet,feature: Object): boolean;
}

//net.minecraft.advancement.criterion.AbstractCriterionConditions
class AbstractCriterionConditions extends JObject, CriterionConditions{
 toString(): string;
 getId(): Identifier;
 toJson(predicateSerializer: AdvancementEntityPredicateSerializer): JsonObject;
}

//net.minecraft.world.chunk.ChunkStatusChangeListener
interface ChunkStatusChangeListener extends JObject{
 onChunkStatusChange(pos: ChunkPos,levelType: ChunkLevelType): void;
}

//net.minecraft.world.chunk.ChunkCache
class ChunkCache extends JObject, BlockView, CollisionView{
 getHeight(): number;
 getEntityCollisions(entity: Entity,box: Box): List;
 getBlockEntity(pos: BlockPos): BlockEntity;
 getFluidState(pos: BlockPos): FluidState;
 getBlockState(pos: BlockPos): BlockState;
 getBottomY(): number;
 getChunkAsView(chunkX: number,chunkZ: number): BlockView;
 getWorldBorder(): WorldBorder;
 getProfiler(): Profiler;
}
class Static_ChunkCache {
static method_40135(world: World): RegistryEntry;
}

//net.minecraft.entity.ai.brain.Activity
class Activity extends JObject{
 equals(o: Object): boolean;
 toString(): string;
 hashCode(): number;
 getId(): string;
}
class Static_Activity {
static register(id: string): Activity;
static CORE: Activity;
static IDLE: Activity;
static WORK: Activity;
static PLAY: Activity;
static REST: Activity;
static MEET: Activity;
static PANIC: Activity;
static RAID: Activity;
static PRE_RAID: Activity;
static HIDE: Activity;
static FIGHT: Activity;
static CELEBRATE: Activity;
static ADMIRE_ITEM: Activity;
static AVOID: Activity;
static RIDE: Activity;
static PLAY_DEAD: Activity;
static LONG_JUMP: Activity;
static RAM: Activity;
static TONGUE: Activity;
static SWIM: Activity;
static LAY_SPAWN: Activity;
static SNIFF: Activity;
static INVESTIGATE: Activity;
static ROAR: Activity;
static EMERGE: Activity;
static DIG: Activity;
}

//net.minecraft.client.render.model.BakedModel
interface BakedModel extends JObject, FabricBakedModel{
 isBuiltin(): boolean;
 useAmbientOcclusion(): boolean;
 hasDepth(): boolean;
 isSideLit(): boolean;
 getParticleSprite(): Sprite;
 getTransformation(): ModelTransformation;
 getOverrides(): ModelOverrideList;
 getQuads(state: BlockState,face: Direction,random: Random): List;
}

//net.minecraft.loot.condition.WeatherCheckLootCondition
class WeatherCheckLootCondition extends JObject, LootCondition{
 test(context: Object): boolean;
 test(lootContext: LootContext): boolean;
 getType(): LootConditionType;
}
class Static_WeatherCheckLootCondition {
static create(): WeatherCheckLootCondition_Builder;
}

//net.minecraft.entity.Targeter
interface Targeter extends JObject{
 getTarget(): LivingEntity;
}

//net.minecraft.util.math.random.Xoroshiro128PlusPlusRandom
class Xoroshiro128PlusPlusRandom extends JObject, Random{
 split(): Random;
 skip(count: number): void;
 nextDouble(): number;
 nextInt(bound: number): number;
 nextInt(): number;
 nextLong(): long;
 nextBoolean(): boolean;
 nextFloat(): number;
 nextGaussian(): number;
 setSeed(seed: long): void;
 nextSplitter(): RandomSplitter;
}
class Static_Xoroshiro128PlusPlusRandom {
static method_51860(implementation: Xoroshiro128PlusPlusRandomImpl): Xoroshiro128PlusPlusRandom;
static method_51861(random: Xoroshiro128PlusPlusRandom): Xoroshiro128PlusPlusRandomImpl;
static FLOAT_MULTIPLIER: number;
static DOUBLE_MULTIPLIER: number;
static CODEC: Codec;
}

//net.minecraft.util.shape.VoxelSet$PositionConsumer
interface VoxelSet_PositionConsumer extends JObject{
 consume(direction: Direction,x: number,y: number,z: number): void;
}

//net.minecraft.command.argument.SignedArgumentType
interface SignedArgumentType extends JObject, ArgumentType{
}

//net.minecraft.text.SelectorTextContent
class SelectorTextContent extends JObject, TextContent{
 equals(o: Object): boolean;
 toString(): string;
 hashCode(): number;
 parse(source: ServerCommandSource,sender: Entity,depth: number): MutableText;
 getSeparator(): Optional;
 visit(visitor: StringVisitable_StyledVisitor,style: Style): Optional;
 visit(visitor: StringVisitable_Visitor): Optional;
 getSelector(): EntitySelector;
 getPattern(): string;
}
class Static_SelectorTextContent {
static readSelector(pattern: string): EntitySelector;
static LOGGER: Logger;
}

//net.minecraft.util.dynamic.Codecs$Xor
class Codecs_Xor extends JObject, Codec{
 equals(o: Object): boolean;
 toString(): string;
 hashCode(): number;
 decode(ops: DynamicOps,input: Object): DataResult;
 encode(input: Object,ops: DynamicOps,prefix: Object): DataResult;
 encode(either: Either,dynamicOps: DynamicOps,object: Object): DataResult;
}
class Static_Codecs_Xor {
static method_33823(pair: Pair): Pair;
static method_33821(pair: Pair): Pair;
static method_49446(optional: Optional,optional2: Optional): string;
}

//net.minecraft.stat.StatFormatter
interface StatFormatter extends JObject{
 format(value: number): string;
}
class Static_StatFormatter {
static method_16819(ticks: number): string;
static method_16817(decimalFormat: DecimalFormat): void;
static method_16816(cm: number): string;
static method_16818(i: number): string;
static DECIMAL_FORMAT: DecimalFormat;
static DEFAULT: StatFormatter;
static DIVIDE_BY_TEN: StatFormatter;
static DISTANCE: StatFormatter;
static TIME: StatFormatter;
}

//net.minecraft.client.gui.tab.TabManager
class TabManager extends JObject{
 tick(): void;
 getCurrentTab(): Tab;
 setCurrentTab(tab: Tab,clickSound: boolean): void;
 setTabArea(tabArea: ScreenRect): void;
}

//net.minecraft.resource.NamespaceResourceManager
class NamespaceResourceManager extends JObject, ResourceManager{
 getResource(identifier: Identifier): Optional;
 findResources(startingPath: string,allowedPathPredicate: Predicate): Map;
 streamResourcePacks(): Stream;
 addPack(pack: ResourcePack): void;
 addPack(pack: ResourcePack,filter: Predicate): void;
 addPack(name: string,filter: Predicate): void;
 getAllNamespaces(): Set;
 getAllResources(id: Identifier): List;
 findAllResources(startingPath: string,allowedPathPredicate: Predicate): Map;
}
class Static_NamespaceResourceManager {
static getMetadataSupplier(supplier: InputSupplier): InputSupplier;
static getMetadataFileName(id: Identifier): Identifier;
static createResource(pack: ResourcePack,id: Identifier,supplier: InputSupplier,metadataSupplier: InputSupplier): Resource;
static method_45294(predicate: Predicate,map: Map,resourcePack: ResourcePack,i: number,map2: Map,id: Identifier,supplier: InputSupplier): void;
static wrapForDebug(id: Identifier,pack: ResourcePack,supplier: InputSupplier): InputSupplier;
static isMcmeta(id: Identifier): boolean;
static method_45292(inputSupplier: InputSupplier,identifier: Identifier,resourcePack: ResourcePack): InputStream;
static getMetadataPath(id: Identifier): Identifier;
static method_45299(inputSupplier: InputSupplier): ResourceMetadata;
static applyFilter(pack: NamespaceResourceManager_FilterablePack,idToEntryList: Map): void;
static method_45293(map: Map,map2: Map,id: Identifier,result: NamespaceResourceManager_Result): void;
static loadMetadata(supplier: InputSupplier): ResourceMetadata;
static method_45295(predicate: Predicate,map: Map,resourcePack: ResourcePack,id: Identifier,supplier: InputSupplier): void;
static method_41257(pack: NamespaceResourceManager_FilterablePack): ResourcePack;
static LOGGER: Logger;
}

//net.minecraft.world.entity.EntityChangeListener$1


//net.minecraft.world.dimension.YLevels
class YLevels extends JObject{
}
class Static_YLevels {
static OVERWORLD_MIN_Y: number;
static OVERWORLD_HEIGHT: number;
static OVERWORLD_GENERATION_HEIGHT: number;
static OVERWORLD_LOGICAL_HEIGHT: number;
static NETHER_MIN_Y: number;
static NETHER_HEIGHT: number;
static NETHER_GENERATION_HEIGHT: number;
static NETHER_LOGICAL_HEIGHT: number;
static END_MIN_Y: number;
static END_HEIGHT: number;
static END_GENERATION_HEIGHT: number;
static END_LOGICAL_HEIGHT: number;
}

//net.minecraft.block.BlockEntityProvider
interface BlockEntityProvider extends JObject{
 getGameEventListener(world: ServerWorld,blockEntity: BlockEntity): GameEventListener;
 getTicker(world: World,state: BlockState,type: BlockEntityType): BlockEntityTicker;
 createBlockEntity(pos: BlockPos,state: BlockState): BlockEntity;
}

//net.minecraft.world.gen.blockpredicate.InsideWorldBoundsBlockPredicate
class InsideWorldBoundsBlockPredicate extends JObject, BlockPredicate{
 test(world: Object,pos: Object): boolean;
 test(structureWorldAccess: StructureWorldAccess,blockPos: BlockPos): boolean;
 getType(): BlockPredicateType;
}
class Static_InsideWorldBoundsBlockPredicate {
static method_39588(instance: RecordCodecBuilder_Instance): App;
static method_39589(predicate: InsideWorldBoundsBlockPredicate): Vec3i;
static CODEC: Codec;
}

//net.minecraft.loot.LootTables
class LootTables extends JObject{
}
class Static_LootTables {
static register(id: string): Identifier;
static getAll(): Set;
static registerLootTable(id: Identifier): Identifier;
static LOOT_TABLES: Set;
static LOOT_TABLES_READ_ONLY: Set;
static EMPTY: Identifier;
static SPAWN_BONUS_CHEST: Identifier;
static END_CITY_TREASURE_CHEST: Identifier;
static SIMPLE_DUNGEON_CHEST: Identifier;
static VILLAGE_WEAPONSMITH_CHEST: Identifier;
static VILLAGE_TOOLSMITH_CHEST: Identifier;
static VILLAGE_ARMORER_CHEST: Identifier;
static VILLAGE_CARTOGRAPHER_CHEST: Identifier;
static VILLAGE_MASON_CHEST: Identifier;
static VILLAGE_SHEPARD_CHEST: Identifier;
static VILLAGE_BUTCHER_CHEST: Identifier;
static VILLAGE_FLETCHER_CHEST: Identifier;
static VILLAGE_FISHER_CHEST: Identifier;
static VILLAGE_TANNERY_CHEST: Identifier;
static VILLAGE_TEMPLE_CHEST: Identifier;
static VILLAGE_DESERT_HOUSE_CHEST: Identifier;
static VILLAGE_PLAINS_CHEST: Identifier;
static VILLAGE_TAIGA_HOUSE_CHEST: Identifier;
static VILLAGE_SNOWY_HOUSE_CHEST: Identifier;
static VILLAGE_SAVANNA_HOUSE_CHEST: Identifier;
static ABANDONED_MINESHAFT_CHEST: Identifier;
static NETHER_BRIDGE_CHEST: Identifier;
static STRONGHOLD_LIBRARY_CHEST: Identifier;
static STRONGHOLD_CROSSING_CHEST: Identifier;
static STRONGHOLD_CORRIDOR_CHEST: Identifier;
static DESERT_PYRAMID_CHEST: Identifier;
static JUNGLE_TEMPLE_CHEST: Identifier;
static JUNGLE_TEMPLE_DISPENSER_CHEST: Identifier;
static IGLOO_CHEST_CHEST: Identifier;
static WOODLAND_MANSION_CHEST: Identifier;
static UNDERWATER_RUIN_SMALL_CHEST: Identifier;
static UNDERWATER_RUIN_BIG_CHEST: Identifier;
static BURIED_TREASURE_CHEST: Identifier;
static SHIPWRECK_MAP_CHEST: Identifier;
static SHIPWRECK_SUPPLY_CHEST: Identifier;
static SHIPWRECK_TREASURE_CHEST: Identifier;
static PILLAGER_OUTPOST_CHEST: Identifier;
static BASTION_TREASURE_CHEST: Identifier;
static BASTION_OTHER_CHEST: Identifier;
static BASTION_BRIDGE_CHEST: Identifier;
static BASTION_HOGLIN_STABLE_CHEST: Identifier;
static ANCIENT_CITY_CHEST: Identifier;
static ANCIENT_CITY_ICE_BOX_CHEST: Identifier;
static RUINED_PORTAL_CHEST: Identifier;
static WHITE_SHEEP_ENTITY: Identifier;
static ORANGE_SHEEP_ENTITY: Identifier;
static MAGENTA_SHEEP_ENTITY: Identifier;
static LIGHT_BLUE_SHEEP_ENTITY: Identifier;
static YELLOW_SHEEP_ENTITY: Identifier;
static LIME_SHEEP_ENTITY: Identifier;
static PINK_SHEEP_ENTITY: Identifier;
static GRAY_SHEEP_ENTITY: Identifier;
static LIGHT_GRAY_SHEEP_ENTITY: Identifier;
static CYAN_SHEEP_ENTITY: Identifier;
static PURPLE_SHEEP_ENTITY: Identifier;
static BLUE_SHEEP_ENTITY: Identifier;
static BROWN_SHEEP_ENTITY: Identifier;
static GREEN_SHEEP_ENTITY: Identifier;
static RED_SHEEP_ENTITY: Identifier;
static BLACK_SHEEP_ENTITY: Identifier;
static FISHING_GAMEPLAY: Identifier;
static FISHING_JUNK_GAMEPLAY: Identifier;
static FISHING_TREASURE_GAMEPLAY: Identifier;
static FISHING_FISH_GAMEPLAY: Identifier;
static CAT_MORNING_GIFT_GAMEPLAY: Identifier;
static HERO_OF_THE_VILLAGE_ARMORER_GIFT_GAMEPLAY: Identifier;
static HERO_OF_THE_VILLAGE_BUTCHER_GIFT_GAMEPLAY: Identifier;
static HERO_OF_THE_VILLAGE_CARTOGRAPHER_GIFT_GAMEPLAY: Identifier;
static HERO_OF_THE_VILLAGE_CLERIC_GIFT_GAMEPLAY: Identifier;
static HERO_OF_THE_VILLAGE_FARMER_GIFT_GAMEPLAY: Identifier;
static HERO_OF_THE_VILLAGE_FISHERMAN_GIFT_GAMEPLAY: Identifier;
static HERO_OF_THE_VILLAGE_FLETCHER_GIFT_GAMEPLAY: Identifier;
static HERO_OF_THE_VILLAGE_LEATHERWORKER_GIFT_GAMEPLAY: Identifier;
static HERO_OF_THE_VILLAGE_LIBRARIAN_GIFT_GAMEPLAY: Identifier;
static HERO_OF_THE_VILLAGE_MASON_GIFT_GAMEPLAY: Identifier;
static HERO_OF_THE_VILLAGE_SHEPHERD_GIFT_GAMEPLAY: Identifier;
static HERO_OF_THE_VILLAGE_TOOLSMITH_GIFT_GAMEPLAY: Identifier;
static HERO_OF_THE_VILLAGE_WEAPONSMITH_GIFT_GAMEPLAY: Identifier;
static SNIFFER_DIGGING_GAMEPLAY: Identifier;
static PIGLIN_BARTERING_GAMEPLAY: Identifier;
static DESERT_WELL_ARCHAEOLOGY: Identifier;
static DESERT_PYRAMID_ARCHAEOLOGY: Identifier;
static TRAIL_RUINS_COMMON_ARCHAEOLOGY: Identifier;
static TRAIL_RUINS_RARE_ARCHAEOLOGY: Identifier;
static OCEAN_RUIN_WARM_ARCHAEOLOGY: Identifier;
static OCEAN_RUIN_COLD_ARCHAEOLOGY: Identifier;
}

//net.minecraft.server.world.ChunkHolder$Unloaded$1


//net.minecraft.client.particle.EmotionParticle$HeartFactory
class EmotionParticle_HeartFactory extends JObject, ParticleFactory{
 createParticle(defaultParticleType: DefaultParticleType,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
 createParticle(particleEffect: ParticleEffect,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
}

//net.minecraft.entity.EntityInteraction
interface EntityInteraction extends JObject{
}
class Static_EntityInteraction {
static create(key: string): EntityInteraction;
static ZOMBIE_VILLAGER_CURED: EntityInteraction;
static GOLEM_KILLED: EntityInteraction;
static VILLAGER_HURT: EntityInteraction;
static VILLAGER_KILLED: EntityInteraction;
static TRADE: EntityInteraction;
}

//net.minecraft.entity.ai.brain.ScheduleRule
class ScheduleRule extends JObject{
 add(entries: Collection): ScheduleRule;
 add(startTime: number,priority: number): ScheduleRule;
 getPriority(time: number): number;
 getEntries(): ImmutableList;
}
class Static_ScheduleRule {
static method_19228(entry: Int2ObjectSortedMap,scheduleRuleEntry: ScheduleRuleEntry): void;
}

//net.minecraft.server.command.DebugMobSpawningCommand
class DebugMobSpawningCommand extends JObject{
}
class Static_DebugMobSpawningCommand {
static register(dispatcher: CommandDispatcher): void;
static execute(source: ServerCommandSource,group: SpawnGroup,pos: BlockPos): number;
static method_36183(spawnGroup: SpawnGroup,context: CommandContext): number;
static method_36185(source: ServerCommandSource): boolean;
}

//net.minecraft.block.dispenser.ItemDispenserBehavior
class ItemDispenserBehavior extends JObject, DispenserBehavior{
 dispense(blockPointer: BlockPointer,itemStack: ItemStack): ItemStack;
}
class Static_ItemDispenserBehavior {
static spawnItem(world: World,stack: ItemStack,speed: number,side: Direction,pos: Position): void;
}

//net.minecraft.server.filter.TextFilterer$HashIgnorer
interface TextFilterer_HashIgnorer extends JObject{
 shouldIgnore(hashes: string,hashesSize: number): boolean;
}
class Static_TextFilterer_HashIgnorer {
static method_31312(hashes: string,hashesSize: number): boolean;
static internalDropHashes(hashesToDrop: number): TextFilterer_HashIgnorer;
static method_31310(hashes: string,hashesSize: number): boolean;
static dropHashes(hashesToDrop: number): TextFilterer_HashIgnorer;
static method_33807(i: number,hashes: string,hashesSize: number): boolean;
static NEVER_IGNORE: TextFilterer_HashIgnorer;
static IGNORE_IF_MATCHES_ALL: TextFilterer_HashIgnorer;
}

//net.minecraft.client.gui.WorldGenerationProgressTracker
class WorldGenerationProgressTracker extends JObject, WorldGenerationProgressListener{
 start(): void;
 start(spawnPos: ChunkPos): void;
 stop(): void;
 getSize(): number;
 getProgressPercentage(): number;
 setChunkStatus(pos: ChunkPos,status: ChunkStatus): void;
 getChunkStatus(x: number,z: number): ChunkStatus;
 getCenterSize(): number;
}

//net.minecraft.client.render.VertexConsumers
class VertexConsumers extends JObject{
}
class Static_VertexConsumers {
static union(delegates: VertexConsumer[]): VertexConsumer;
static union(first: VertexConsumer,second: VertexConsumer): VertexConsumer;
static union(first: VertexConsumer): VertexConsumer;
static union(): VertexConsumer;
}

//net.minecraft.client.render.block.entity.StructureBlockBlockEntityRenderer
class StructureBlockBlockEntityRenderer extends JObject, BlockEntityRenderer{
 render(entity: BlockEntity,tickDelta: number,matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,light: number,overlay: number): void;
 render(structureBlockBlockEntity: StructureBlockBlockEntity,f: number,matrixStack: MatrixStack,vertexConsumerProvider: VertexConsumerProvider,i: number,j: number): void;
 rendersOutsideBoundingBox(structureBlockBlockEntity: StructureBlockBlockEntity): boolean;
 rendersOutsideBoundingBox(blockEntity: BlockEntity): boolean;
 getRenderDistance(): number;
}

//net.minecraft.client.toast.TutorialToast
class TutorialToast extends JObject, Toast{
 hide(): void;
 draw(context: DrawContext,manager: ToastManager,startTime: long): Toast_Visibility;
 setProgress(progress: number): void;
}
class Static_TutorialToast {
static PROGRESS_BAR_WIDTH: number;
static PROGRESS_BAR_HEIGHT: number;
static PROGRESS_BAR_X: number;
static PROGRESS_BAR_Y: number;
}

//net.minecraft.loot.condition.WeatherCheckLootCondition$Builder
class WeatherCheckLootCondition_Builder extends JObject, LootCondition_Builder{
 build(): WeatherCheckLootCondition;
 build(): LootCondition;
 raining(raining: Boolean): WeatherCheckLootCondition_Builder;
 thundering(thundering: Boolean): WeatherCheckLootCondition_Builder;
}

//net.minecraft.network.packet.s2c.play.BlockEntityUpdateS2CPacket
class BlockEntityUpdateS2CPacket extends JObject, Packet{
 apply(listener: PacketListener): void;
 apply(clientPlayPacketListener: ClientPlayPacketListener): void;
 write(buf: PacketByteBuf): void;
 getNbt(): NbtCompound;
 getPos(): BlockPos;
 getBlockEntityType(): BlockEntityType;
}
class Static_BlockEntityUpdateS2CPacket {
static create(blockEntity: BlockEntity,nbtGetter: Function): BlockEntityUpdateS2CPacket;
static create(blockEntity: BlockEntity): BlockEntityUpdateS2CPacket;
}

//net.minecraft.client.render.WorldRenderer$ChunkInfoList
class WorldRenderer_ChunkInfoList extends JObject{
 getInfo(chunk: ChunkBuilder_BuiltChunk): WorldRenderer_ChunkInfo;
 setInfo(chunk: ChunkBuilder_BuiltChunk,info: WorldRenderer_ChunkInfo): void;
}

//net.minecraft.item.ItemGroup$1


//net.minecraft.util.math.Divider
class Divider extends JObject, IntIterator{
 hasNext(): boolean;
 nextInt(): number;
}
class Static_Divider {
static asIterable(dividend: number,divisor: number): Iterable;
static method_46403(i: number,j: number): Iterator;
}

//net.minecraft.registry.MutableRegistry
interface MutableRegistry extends JObject, Registry{
 add(key: RegistryKey,entry: Object,lifecycle: Lifecycle): RegistryEntry_Reference;
 isEmpty(): boolean;
 set(rawId: number,key: RegistryKey,value: Object,lifecycle: Lifecycle): RegistryEntry;
 createMutableEntryLookup(): RegistryEntryLookup;
}

//net.minecraft.network.packet.s2c.play.TitleFadeS2CPacket
class TitleFadeS2CPacket extends JObject, Packet{
 apply(clientPlayPacketListener: ClientPlayPacketListener): void;
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
 getFadeInTicks(): number;
 getFadeOutTicks(): number;
 getStayTicks(): number;
}

//net.minecraft.world.chunk.UpgradeData$Logic
interface UpgradeData_Logic extends JObject{
 postUpdate(world: WorldAccess): void;
 getUpdatedState(oldState: BlockState,direction: Direction,otherState: BlockState,world: WorldAccess,currentPos: BlockPos,otherPos: BlockPos): BlockState;
}

//net.minecraft.command.argument.TimeArgumentType$Serializer
class TimeArgumentType_Serializer extends JObject, ArgumentSerializer{
 getArgumentTypeProperties(argumentType: ArgumentType): ArgumentSerializer_ArgumentTypeProperties;
 getArgumentTypeProperties(timeArgumentType: TimeArgumentType): TimeArgumentType_Serializer_Properties;
 fromPacket(buf: PacketByteBuf): ArgumentSerializer_ArgumentTypeProperties;
 fromPacket(packetByteBuf: PacketByteBuf): TimeArgumentType_Serializer_Properties;
 writePacket(properties: ArgumentSerializer_ArgumentTypeProperties,buf: PacketByteBuf): void;
 writePacket(properties: TimeArgumentType_Serializer_Properties,packetByteBuf: PacketByteBuf): void;
 writeJson(properties: TimeArgumentType_Serializer_Properties,jsonObject: JsonObject): void;
 writeJson(properties: ArgumentSerializer_ArgumentTypeProperties,json: JsonObject): void;
}

//net.minecraft.client.gui.hud.InGameOverlayRenderer
class InGameOverlayRenderer extends JObject{
}
class Static_InGameOverlayRenderer {
static getInWallBlockState(player: PlayerEntity): BlockState;
static renderInWallOverlay(sprite: Sprite,matrices: MatrixStack): void;
static renderUnderwaterOverlay(client: MinecraftClient,matrices: MatrixStack): void;
static renderOverlays(client: MinecraftClient,matrices: MatrixStack): void;
static renderFireOverlay(client: MinecraftClient,matrices: MatrixStack): void;
static UNDERWATER_TEXTURE: Identifier;
}

//net.minecraft.block.RodBlock$1


//net.minecraft.recipe.RecipeManager$1


//net.minecraft.client.util.WindowProvider
class WindowProvider extends JObject, AutoCloseable{
 close(): void;
 createWindow(settings: WindowSettings,videoMode: string,title: string): Window;
}

//net.minecraft.client.util.Window
class Window extends JObject, AutoCloseable{
 close(): void;
 getHandle(): long;
 getWidth(): number;
 getHeight(): number;
 getFramebufferWidth(): number;
 calculateScaleFactor(guiScale: number,forceUnicodeFont: boolean): number;
 setFramebufferHeight(framebufferHeight: number): void;
 setFramebufferWidth(framebufferWidth: number): void;
 getFramebufferHeight(): number;
 getX(): number;
 getY(): number;
 setPhase(phase: string): void;
 getMonitor(): Monitor;
 logGlError(error: number,description: long): void;
 shouldClose(): boolean;
 getRefreshRate(): number;
 setIcon(resourcePack: ResourcePack,icons: Icons): void;
 getVideoMode(): Optional;
 setVsync(vsync: boolean): void;
 setFramerateLimit(framerateLimit: number): void;
 swapBuffers(): void;
 logOnGlError(): void;
 getFramerateLimit(): number;
 getScaledHeight(): number;
 getScaledWidth(): number;
 setVideoMode(videoMode: Optional): void;
 isFullscreen(): boolean;
 getScaleFactor(): number;
 toggleFullscreen(): void;
 setWindowedSize(width: number,height: number): void;
 setScaleFactor(scaleFactor: number): void;
 setTitle(title: string): void;
 setRawMouseMotion(rawMouseMotion: boolean): void;
 applyVideoMode(): void;
}
class Static_Window {
static acceptError(consumer: BiConsumer): void;
static throwGlError(error: number,description: long): void;
static LOGGER: Logger;
}

//net.minecraft.world.storage.ChunkStreamVersion
class ChunkStreamVersion extends JObject{
 wrap(outputStream: OutputStream): OutputStream;
 wrap(inputStream: InputStream): InputStream;
 getId(): number;
}
class Static_ChunkStreamVersion {
static add(version: ChunkStreamVersion): ChunkStreamVersion;
static get(id: number): ChunkStreamVersion;
static exists(id: number): boolean;
static method_21888(stream: InputStream): InputStream;
static method_21889(stream: OutputStream): OutputStream;
static method_39803(stream: InputStream): InputStream;
static method_39805(stream: InputStream): InputStream;
static method_39806(stream: OutputStream): OutputStream;
static method_39804(stream: OutputStream): OutputStream;
static VERSIONS: Int2ObjectMap;
static GZIP: ChunkStreamVersion;
static DEFLATE: ChunkStreamVersion;
static UNCOMPRESSED: ChunkStreamVersion;
}

//net.minecraft.client.render.entity.feature.TropicalFishColorFeatureRenderer$1


//net.minecraft.entity.player.ItemCooldownManager$Entry
class ItemCooldownManager_Entry extends JObject{
}

//net.minecraft.util.math.random.GaussianGenerator
class GaussianGenerator extends JObject{
 next(): number;
 reset(): void;
 baseRandom: Random;
}

//net.minecraft.particle.ParticleEffect$Factory
interface ParticleEffect_Factory extends JObject{
 read(type: ParticleType,reader: StringReader): ParticleEffect;
 read(type: ParticleType,buf: PacketByteBuf): ParticleEffect;
}

//net.minecraft.client.report.AbuseReportContext
class AbuseReportContext extends JObject{
 draftPlayerUuidEquals(uuid: UUID): boolean;
 tryShowDraftScreen(client: MinecraftClient,parent: Screen,callback: Runnable,quit: boolean): void;
 hasDraft(): boolean;
 getSender(): AbuseReportSender;
 getChatLog(): ChatLog;
 setDraft(draft: ChatAbuseReport_Draft): void;
 environmentEquals(environment: ReporterEnvironment): boolean;
}
class Static_AbuseReportContext {
static create(environment: ReporterEnvironment,userApiService: UserApiService): AbuseReportContext;
static MAX_LOGS: number;
}

//net.minecraft.server.world.ChunkLevels
class ChunkLevels extends JObject{
}
class Static_ChunkLevels {
static isAccessible(level: number): boolean;
static getType(level: number): ChunkLevelType;
static getStatus(level: number): ChunkStatus;
static getLevelFromStatus(status: ChunkStatus): number;
static shouldTickEntities(level: number): boolean;
static shouldTickBlocks(level: number): boolean;
static getLevelFromType(type: ChunkLevelType): number;
static FULL: number;
static BLOCK_TICKING: number;
static ENTITY_TICKING: number;
static INACCESSIBLE: number;
}

//net.minecraft.world.chunk.PaletteResizeListener
interface PaletteResizeListener extends JObject{
 onResize(newBits: number,object: Object): number;
}

//net.minecraft.data.server.recipe.CookingRecipeJsonBuilder
class CookingRecipeJsonBuilder extends JObject, CraftingRecipeJsonBuilder{
 group(string: string): CookingRecipeJsonBuilder;
 group(group: string): CraftingRecipeJsonBuilder;
 getOutputItem(): Item;
 criterion(name: string,conditions: CriterionConditions): CraftingRecipeJsonBuilder;
 criterion(string: string,criterionConditions: CriterionConditions): CookingRecipeJsonBuilder;
 offerTo(exporter: Consumer,recipeId: Identifier): void;
}
class Static_CookingRecipeJsonBuilder {
static create(input: Ingredient,category: RecipeCategory,output: ItemConvertible,experience: number,cookingTime: number,serializer: RecipeSerializer): CookingRecipeJsonBuilder;
static getCookingRecipeCategory(serializer: RecipeSerializer,output: ItemConvertible): CookingRecipeCategory;
static createCampfireCooking(input: Ingredient,category: RecipeCategory,output: ItemConvertible,experience: number,cookingTime: number): CookingRecipeJsonBuilder;
static getBlastingRecipeCategory(output: ItemConvertible): CookingRecipeCategory;
static getSmeltingRecipeCategory(output: ItemConvertible): CookingRecipeCategory;
static createBlasting(input: Ingredient,category: RecipeCategory,output: ItemConvertible,experience: number,cookingTime: number): CookingRecipeJsonBuilder;
static createSmelting(input: Ingredient,category: RecipeCategory,output: ItemConvertible,experience: number,cookingTime: number): CookingRecipeJsonBuilder;
static createSmoking(input: Ingredient,category: RecipeCategory,output: ItemConvertible,experience: number,cookingTime: number): CookingRecipeJsonBuilder;
}

//net.minecraft.client.render.debug.CollisionDebugRenderer
class CollisionDebugRenderer extends JObject, DebugRenderer_Renderer{
 render(matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,cameraX: number,cameraY: number,cameraZ: number): void;
}

//net.minecraft.block.WallHangingSignBlock$1


//net.minecraft.test.BeforeBatch
interface BeforeBatch extends JObject, Annotation{
 batchId(): string;
}

//net.minecraft.world.chunk.ChunkStatus$LoadTask
interface ChunkStatus_LoadTask extends JObject{
 doWork(targetStatus: ChunkStatus,world: ServerWorld,structureTemplateManager: StructureTemplateManager,lightingProvider: ServerLightingProvider,fullChunkConverter: Function,chunk: Chunk): CompletableFuture;
}

//net.minecraft.network.packet.s2c.play.PlayerListS2CPacket
class PlayerListS2CPacket extends JObject, Packet{
 toString(): string;
 apply(clientPlayPacketListener: ClientPlayPacketListener): void;
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
 getActions(): EnumSet;
 getEntries(): List;
 getPlayerAdditionEntries(): List;
}
class Static_PlayerListS2CPacket {
static entryFromPlayer(players: Collection): PlayerListS2CPacket;
}

//net.minecraft.client.gui.screen.ingame.BookScreen$Contents
interface BookScreen_Contents extends JObject{
 getPageCount(): number;
 getPage(index: number): StringVisitable;
 getPageUnchecked(index: number): StringVisitable;
}
class Static_BookScreen_Contents {
static create(stack: ItemStack): BookScreen_Contents;
}

//net.minecraft.block.RailBlock$1


//net.minecraft.client.render.entity.model.EntityModelPartNames
class EntityModelPartNames extends JObject{
}
class Static_EntityModelPartNames {
static LEFT_FIN: string;
static RIGHT_FIN: string;
static TOP_FIN: string;
static BOTTOM_FIN: string;
static TAIL_FIN: string;
static LEFT_BLUE_FIN: string;
static RIGHT_BLUE_FIN: string;
static LEFT_ARM: string;
static RIGHT_ARM: string;
static LEFT_WING: string;
static RIGHT_WING: string;
static LEFT_WING_BASE: string;
static RIGHT_WING_BASE: string;
static LEFT_WING_TIP: string;
static RIGHT_WING_TIP: string;
static LEFT_EAR: string;
static RIGHT_EAR: string;
static LEFT_LEG: string;
static RIGHT_LEG: string;
static LEFT_HIND_LEG: string;
static RIGHT_HIND_LEG: string;
static LEFT_MID_LEG: string;
static RIGHT_MID_LEG: string;
static LEFT_FRONT_LEG: string;
static RIGHT_FRONT_LEG: string;
static LEFT_HIND_FOOT: string;
static RIGHT_HIND_FOOT: string;
static LEFT_FRONT_FOOT: string;
static RIGHT_FRONT_FOOT: string;
static LEFT_HIND_LEG_TIP: string;
static RIGHT_HIND_LEG_TIP: string;
static LEFT_FRONT_LEG_TIP: string;
static RIGHT_FRONT_LEG_TIP: string;
static LEFT_LID: string;
static RIGHT_LID: string;
static LEFT_CHEST: string;
static RIGHT_CHEST: string;
static LEFT_HORN: string;
static RIGHT_HORN: string;
static LEFT_EYE: string;
static RIGHT_EYE: string;
static JAW: string;
static NOSE: string;
static ARMS: string;
static TAIL: string;
static CUBE: string;
static BEAK: string;
static BACK_FIN: string;
static MANE: string;
static NECK: string;
static MOUTH: string;
static HEAD: string;
static HAT: string;
static BODY: string;
static HAT_RIM: string;
static JACKET: string;
static TOP_GILLS: string;
static LEFT_GILLS: string;
static RIGHT_GILLS: string;
static ROOT: string;
static CROAKING_BODY: string;
static TONGUE: string;
static TONGUE_RL: string;
static LEFT_HAND: string;
static RIGHT_HAND: string;
static LEFT_FOOT: string;
static RIGHT_FOOT: string;
static EYES: string;
static RIGHT_TENDRIL: string;
static LEFT_TENDRIL: string;
static RIGHT_RIBCAGE: string;
static LEFT_RIBCAGE: string;
static BONE: string;
}

//net.minecraft.client.particle.LavaEmberParticle$Factory
class LavaEmberParticle_Factory extends JObject, ParticleFactory{
 createParticle(defaultParticleType: DefaultParticleType,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
 createParticle(particleEffect: ParticleEffect,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
}

//net.minecraft.predicate.BlockPredicate$Builder
class BlockPredicate_Builder extends JObject{
 state(state: StatePredicate): BlockPredicate_Builder;
 build(): BlockPredicate;
 tag(tag: TagKey): BlockPredicate_Builder;
 blocks(blocks: Iterable): BlockPredicate_Builder;
 blocks(blocks: Block[]): BlockPredicate_Builder;
 nbt(nbt: NbtCompound): BlockPredicate_Builder;
}
class Static_BlockPredicate_Builder {
static create(): BlockPredicate_Builder;
}

//net.minecraft.command.EntitySelector$1


//net.minecraft.world.gen.densityfunction.DensityFunctions
class DensityFunctions extends JObject{
}
class Static_DensityFunctions {
static of(id: string): RegistryKey;
static bootstrap(densityFunctionRegisterable: Registerable): RegistryEntry;
static createCavesNoiseRouter(densityFunctionLookup: RegistryEntryLookup,noiseParametersLookup: RegistryEntryLookup): NoiseRouter;
static createFloatingIslandsNoiseRouter(densityFunctionLookup: RegistryEntryLookup,noiseParametersLookup: RegistryEntryLookup): NoiseRouter;
static createEndNoiseRouter(densityFunctionLookup: RegistryEntryLookup): NoiseRouter;
static createMissingNoiseRouter(): NoiseRouter;
static verticalRangeChoice(y: DensityFunction,whenInRange: DensityFunction,minInclusive: number,maxInclusive: number,whenOutOfRange: number): DensityFunction;
static createCavesFunction(densityFunctionLookup: RegistryEntryLookup,noiseParametersLookup: RegistryEntryLookup,slopedCheese: DensityFunction): DensityFunction;
static createSurfaceNoiseRouter(densityFunctionLookup: RegistryEntryLookup,noiseParametersLookup: RegistryEntryLookup,largeBiomes: boolean,amplified: boolean): NoiseRouter;
static createNetherNoiseRouter(densityFunctionLookup: RegistryEntryLookup,noiseParametersLookup: RegistryEntryLookup): NoiseRouter;
static applyFloatingIslandsSlides(fun: DensityFunction,minY: number,maxY: number): DensityFunction;
static createInitialDensityFunction(factor: DensityFunction,depth: DensityFunction): DensityFunction;
static getPeaksValleysNoise(weirdness: number): number;
static registerSlopedCheeseFunction(densityFunctionRegisterable: Registerable,densityFunctionLookup: RegistryEntryLookup,jaggedNoise: DensityFunction,continents: RegistryEntry,erosion: RegistryEntry,offsetKey: RegistryKey,factorKey: RegistryKey,jaggednessKey: RegistryKey,depthKey: RegistryKey,slopedCheeseKey: RegistryKey,amplified: boolean): void;
static createCavePillarsOverworldFunction(noiseParametersLookup: RegistryEntryLookup): DensityFunction;
static registerAndGetHolder(densityFunctionRegisterable: Registerable,key: RegistryKey,densityFunction: DensityFunction): DensityFunction;
static createCavesNoodleOverworldFunction(densityFunctionLookup: RegistryEntryLookup,noiseParametersLookup: RegistryEntryLookup): DensityFunction;
static createRidgesFoldedOverworldFunction(input: DensityFunction): DensityFunction;
static createCavesSpaghetti2dOverworldFunction(densityFunctionLookup: RegistryEntryLookup,noiseParametersLookup: RegistryEntryLookup): DensityFunction;
static createCavesSpaghettiRoughnessOverworldFunction(noiseParametersLookup: RegistryEntryLookup): DensityFunction;
static createCavesEntrancesOverworldFunction(densityFunctionLookup: RegistryEntryLookup,noiseParametersLookup: RegistryEntryLookup): DensityFunction;
static createMultiNoiseDependentNoiseRouter(densityFunctionLookup: RegistryEntryLookup,noiseParametersLookup: RegistryEntryLookup,density: DensityFunction): NoiseRouter;
static entryHolder(densityFunctionRegisterable: RegistryEntryLookup,key: RegistryKey): DensityFunction;
static applyBlending(fun: DensityFunction,blendOffset: DensityFunction): DensityFunction;
static applySurfaceSlides(amplified: boolean,density: DensityFunction): DensityFunction;
static applyBlendDensity(density: DensityFunction): DensityFunction;
static method_41553(veinType: OreVeinSampler_VeinType): number;
static method_41550(veinType: OreVeinSampler_VeinType): number;
static applySlides(density: DensityFunction,minY: number,maxY: number,topRelativeMinY: number,topRelativeMaxY: number,topDensity: number,bottomRelativeMinY: number,bottomRelativeMaxY: number,bottomDensity: number): DensityFunction;
static applyCavesSlides(densityFunctionLookup: RegistryEntryLookup,minY: number,maxY: number): DensityFunction;
static applyEndSlides(slopedCheese: DensityFunction): DensityFunction;
static field_37690: number;
static field_36614: number;
static field_36615: number;
static field_36616: number;
static field_36617: number;
static field_38250: number;
static field_37691: number;
static field_37692: long;
static TEN_FUNCTION: DensityFunction;
static ZERO_FUNCTION: DensityFunction;
static ZERO: RegistryKey;
static Y: RegistryKey;
static SHIFT_X: RegistryKey;
static SHIFT_Z: RegistryKey;
static BASE_3D_NOISE_OVERWORLD: RegistryKey;
static BASE_3D_NOISE_NETHER: RegistryKey;
static BASE_3D_NOISE_END: RegistryKey;
static CONTINENTS_OVERWORLD: RegistryKey;
static EROSION_OVERWORLD: RegistryKey;
static RIDGES_OVERWORLD: RegistryKey;
static RIDGES_FOLDED_OVERWORLD: RegistryKey;
static OFFSET_OVERWORLD: RegistryKey;
static FACTOR_OVERWORLD: RegistryKey;
static JAGGEDNESS_OVERWORLD: RegistryKey;
static DEPTH_OVERWORLD: RegistryKey;
static SLOPED_CHEESE_OVERWORLD: RegistryKey;
static CONTINENTS_OVERWORLD_LARGE_BIOME: RegistryKey;
static EROSION_OVERWORLD_LARGE_BIOME: RegistryKey;
static OFFSET_OVERWORLD_LARGE_BIOME: RegistryKey;
static FACTOR_OVERWORLD_LARGE_BIOME: RegistryKey;
static JAGGEDNESS_OVERWORLD_LARGE_BIOME: RegistryKey;
static DEPTH_OVERWORLD_LARGE_BIOME: RegistryKey;
static SLOPED_CHEESE_OVERWORLD_LARGE_BIOME: RegistryKey;
static OFFSET_OVERWORLD_AMPLIFIED: RegistryKey;
static FACTOR_OVERWORLD_AMPLIFIED: RegistryKey;
static JAGGEDNESS_OVERWORLD_AMPLIFIED: RegistryKey;
static DEPTH_OVERWORLD_AMPLIFIED: RegistryKey;
static SLOPED_CHEESE_OVERWORLD_AMPLIFIED: RegistryKey;
static SLOPED_CHEESE_END: RegistryKey;
static CAVES_SPAGHETTI_ROUGHNESS_FUNCTION_OVERWORLD: RegistryKey;
static CAVES_ENTRANCES_OVERWORLD: RegistryKey;
static CAVES_NOODLE_OVERWORLD: RegistryKey;
static CAVES_PILLARS_OVERWORLD: RegistryKey;
static CAVES_SPAGHETTI_2D_THICKNESS_MODULATOR_OVERWORLD: RegistryKey;
static CAVES_SPAGHETTI_2D_OVERWORLD: RegistryKey;
}

//net.minecraft.client.render.entity.animation.Animation$Builder
class Animation_Builder extends JObject{
 build(): Animation;
 looping(): Animation_Builder;
 addBoneAnimation(name: string,transformation: Transformation): Animation_Builder;
}
class Static_Animation_Builder {
static create(lengthInSeconds: number): Animation_Builder;
static method_41819(name: string): List;
}

//net.minecraft.data.server.advancement.vanilla.VanillaHusbandryTabAdvancementGenerator
class VanillaHusbandryTabAdvancementGenerator extends JObject, AdvancementTabGenerator{
 accept(lookup: RegistryWrapper_WrapperLookup,exporter: Consumer): void;
}
class Static_VanillaHusbandryTabAdvancementGenerator {
static requireListedAnimalsBred(advancementBuilder: Advancement_Builder,breedableAnimals: Stream,eggLayingAnimals: Stream): Advancement_Builder;
static requireAllFrogsOnLeads(builder: Advancement_Builder): Advancement_Builder;
static createBreedAllAnimalsAdvancement(parent: Advancement,exporter: Consumer,breedableAnimals: Stream,eggLayingAnimals: Stream): Advancement;
static requireAllCatsTamed(builder: Advancement_Builder): Advancement_Builder;
static requireListedFishCaught(builder: Advancement_Builder): Advancement_Builder;
static requireFoodItemsEaten(builder: Advancement_Builder): Advancement_Builder;
static requireListedFishBucketsFilled(builder: Advancement_Builder): Advancement_Builder;
static method_48498(builder: Advancement_Builder,type: EntityType): void;
static method_16117(builder: Advancement_Builder,entry: Map_Entry): void;
static method_48497(builder: Advancement_Builder,type: EntityType): void;
static method_43363(builder: Advancement_Builder,variant: RegistryEntry_Reference): void;
static BREEDABLE_ANIMALS: List;
static EGG_LAYING_ANIMALS: List;
static FISH_ITEMS: Item[];
static FISH_BUCKET_ITEMS: Item[];
static FOOD_ITEMS: Item[];
static AXE_ITEMS: Item[];
}

//net.minecraft.test.TestSet$1


//net.minecraft.datafixer.mapping.LegacyCoralBlockMapping
class LegacyCoralBlockMapping extends JObject{
}
class Static_LegacyCoralBlockMapping {
static MAP: Map;
}

//net.minecraft.item.Item$1


//net.minecraft.util.TimeHelper
class TimeHelper extends JObject{
}
class Static_TimeHelper {
static betweenSeconds(min: number,max: number): UniformIntProvider;
static SECOND_IN_NANOS: long;
static MILLI_IN_NANOS: long;
}

//net.minecraft.server.ServerConfigHandler
class ServerConfigHandler extends JObject{
}
class Static_ServerConfigHandler {
static createDirectory(directory: File): void;
static processSimpleListFile(file: File,valueMap: Map): List;
static convertBannedPlayers(server: MinecraftServer): boolean;
static checkListConversionSuccess(): boolean;
static checkPlayerConversionSuccess(server: MinecraftServer): boolean;
static getPlayerUuidByName(server: MinecraftServer,name: string): UUID;
static getLevelPlayersFolder(server: MinecraftServer): File;
static lookupProfile(server: MinecraftServer,bannedPlayers: Collection,callback: ProfileLookupCallback): void;
static method_14551(i: number): String[];
static markFileConverted(file: File): void;
static parseDate(dateString: string,fallback: Date): Date;
static method_14552(playerName: string): boolean;
static convertBannedIps(server: MinecraftServer): boolean;
static checkSuccess(server: MinecraftServer): boolean;
static convertOperators(server: MinecraftServer): boolean;
static convertWhitelist(server: MinecraftServer): boolean;
static convertPlayerFiles(minecraftServer: MinecraftDedicatedServer): boolean;
static LOGGER: Logger;
static BANNED_IPS_FILE: File;
static BANNED_PLAYERS_FILE: File;
static OPERATORS_FILE: File;
static WHITE_LIST_FILE: File;
}

//net.minecraft.util.annotation.ClientMethodsReturnNonnullByDefault
interface ClientMethodsReturnNonnullByDefault extends JObject, Annotation{
}

//net.minecraft.world.gen.chunk.AquiferSampler$1


//net.minecraft.server.world.ChunkHolder
class ChunkHolder extends JObject{
 isAccessible(): boolean;
 getLevel(): number;
 setLevel(level: number): void;
 collectFuturesByStatus(): List;
 getEntityTickingFuture(): CompletableFuture;
 updateAccessibleStatus(): void;
 getAccessibleFuture(): CompletableFuture;
 getWorldChunk(): WorldChunk;
 getPos(): ChunkPos;
 method_41205(): WorldChunk;
 getCurrentChunk(): Chunk;
 getCurrentStatus(): ChunkStatus;
 getTickingFuture(): CompletableFuture;
 getFutureFor(leastStatus: ChunkStatus): CompletableFuture;
 getValidFutureFor(leastStatus: ChunkStatus): CompletableFuture;
 markForBlockUpdate(pos: BlockPos): void;
 getSavingFuture(): CompletableFuture;
 markForLightUpdate(lightType: LightType,y: number): void;
 flushUpdates(chunk: WorldChunk): void;
 getChunkAt(targetStatus: ChunkStatus,chunkStorage: ThreadedAnvilChunkStorage): CompletableFuture;
 setCompletedChunk(chunk: WrapperProtoChunk): void;
 getCompletedLevel(): number;
 getLevelType(): ChunkLevelType;
}
class Static_ChunkHolder {
static method_13996(packet: Packet,player: ServerPlayerEntity): void;
static method_39966(chunk: Chunk,object: Object): Chunk;
static method_31411(completableFuture: CompletableFuture,either: Either): void;
static method_16147(chunk: Chunk,either: Either): Chunk;
static method_16142(chunk: Chunk): Chunk;
static method_16148(chunk: Chunk,unloaded: ChunkHolder_Unloaded): Chunk;
static method_31410(completableFuture: CompletableFuture,worldChunk: WorldChunk): void;
static UNLOADED_CHUNK: Either;
static UNLOADED_CHUNK_FUTURE: CompletableFuture;
static UNLOADED_WORLD_CHUNK: Either;
static field_36388: Either;
static UNLOADED_WORLD_CHUNK_FUTURE: CompletableFuture;
static CHUNK_STATUSES: List;
}

//net.minecraft.client.render.debug.LightDebugRenderer$Data
class LightDebugRenderer_Data extends JObject{
}

//net.minecraft.command.argument.NbtPathArgumentType$FilteredRootNode
class NbtPathArgumentType_FilteredRootNode extends JObject, NbtPathArgumentType_PathNode{
 get(current: NbtElement,results: List): void;
 clear(current: NbtElement): number;
 set(current: NbtElement,source: Supplier): number;
 init(): NbtElement;
 getOrInit(current: NbtElement,source: Supplier,results: List): void;
}

//net.minecraft.loot.function.ApplyBonusLootFunction$UniformBonusCount
class ApplyBonusLootFunction_UniformBonusCount extends JObject, ApplyBonusLootFunction_Formula{
 getValue(random: Random,initialCount: number,enchantmentLevel: number): number;
 getId(): Identifier;
 toJson(json: JsonObject,context: JsonSerializationContext): void;
}
class Static_ApplyBonusLootFunction_UniformBonusCount {
static fromJson(json: JsonObject,context: JsonDeserializationContext): ApplyBonusLootFunction_Formula;
static ID: Identifier;
}

//net.minecraft.world.gen.StructureWeightSampler
class StructureWeightSampler extends JObject, DensityFunctionTypes_Beardifying{
 maxValue(): number;
 sample(pos: DensityFunction_NoisePos): number;
 minValue(): number;
}
class Static_StructureWeightSampler {
static calculateStructureWeight(x: number,y: number,z: number): number;
static createStructureWeightSampler(world: StructureAccessor,pos: ChunkPos): StructureWeightSampler;
static method_42696(structure: Structure): boolean;
static method_42694(pos: ChunkPos,piecesOut: ObjectList,startX: number,startZ: number,jigsawJunctionsOut: ObjectList,start: StructureStart): void;
static getStructureWeight(x: number,y: number,z: number,yy: number): number;
static indexInBounds(i: number): boolean;
static getMagnitudeWeight(x: number,y: number,z: number): number;
static structureWeight(x: number,y: number,z: number): number;
static method_33640(array: number[]): void;
static INDEX_OFFSET: number;
static EDGE_LENGTH: number;
static STRUCTURE_WEIGHT_TABLE: number[];
}

//net.minecraft.structure.BastionData
class BastionData extends JObject{
}
class Static_BastionData {
static bootstrap(poolRegisterable: Registerable): void;
}

//net.minecraft.util.crash.CrashReportSection$Element
class CrashReportSection_Element extends JObject{
 getName(): string;
 getDetail(): string;
}

//net.minecraft.server.command.MeCommand
class MeCommand extends JObject{
}
class Static_MeCommand {
static register(dispatcher: CommandDispatcher): void;
static method_43645(commandContext: CommandContext,message: SignedMessage): void;
static method_13238(context: CommandContext): number;
}

//net.minecraft.command.argument.MessageArgumentType$MessageSelector
class MessageArgumentType_MessageSelector extends JObject{
 format(source: ServerCommandSource): Text;
 getSelector(): EntitySelector;
 getStart(): number;
 getEnd(): number;
}

//net.minecraft.client.render.entity.animation.Transformation$Targets
class Transformation_Targets extends JObject{
}
class Static_Transformation_Targets {
static TRANSLATE: Transformation_Target;
static ROTATE: Transformation_Target;
static SCALE: Transformation_Target;
}

//net.minecraft.entity.vehicle.VehicleInventory
interface VehicleInventory extends JObject, Inventory, NamedScreenHandlerFactory{
 isEmpty(): boolean;
 open(player: PlayerEntity): ActionResult;
 readInventoryFromNbt(nbt: NbtCompound): void;
 generateInventoryLoot(player: PlayerEntity): void;
 getInventoryStackReference(slot: number): StackReference;
 removeInventoryStack(slot: number,amount: number): ItemStack;
 removeInventoryStack(slot: number): ItemStack;
 writeInventoryToNbt(nbt: NbtCompound): void;
 isRemoved(): boolean;
 getWorld(): World;
 getInventory(): DefaultedList;
 getPos(): Vec3d;
 getLootTableId(): Identifier;
 getLootTableSeed(): long;
 setLootTableId(lootTableId: Identifier): void;
 resetInventory(): void;
 setLootTableSeed(lootTableSeed: long): void;
 isInventoryEmpty(): boolean;
 onBroken(source: DamageSource,world: World,vehicle: Entity): void;
 getInventoryStack(slot: number): ItemStack;
 clearInventory(): void;
 setInventoryStack(slot: number,stack: ItemStack): void;
 canPlayerAccess(player: PlayerEntity): boolean;
}

//net.minecraft.world.dimension.DimensionTypes
class DimensionTypes extends JObject{
}
class Static_DimensionTypes {
static of(id: string): RegistryKey;
static OVERWORLD: RegistryKey;
static THE_NETHER: RegistryKey;
static THE_END: RegistryKey;
static OVERWORLD_CAVES: RegistryKey;
static OVERWORLD_ID: Identifier;
static THE_NETHER_ID: Identifier;
static THE_END_ID: Identifier;
}

//net.minecraft.server.command.SpectateCommand
class SpectateCommand extends JObject{
}
class Static_SpectateCommand {
static register(dispatcher: CommandDispatcher): void;
static execute(source: ServerCommandSource,entity: Entity,player: ServerPlayerEntity): number;
static method_23655(playerName: Object): Message;
static method_23651(source: ServerCommandSource): boolean;
static method_52083(entity: Entity): Text;
static method_52082(): Text;
static method_23657(context: CommandContext): number;
static method_23654(context: CommandContext): number;
static method_23656(context: CommandContext): number;
static SPECTATE_SELF_EXCEPTION: SimpleCommandExceptionType;
static NOT_SPECTATOR_EXCEPTION: DynamicCommandExceptionType;
}

//net.minecraft.client.realms.dto.RealmsServer$McoServerComparator
class RealmsServer_McoServerComparator extends JObject, Comparator{
 compare(realmsServer: RealmsServer,realmsServer2: RealmsServer): number;
 compare(one: Object,two: Object): number;
}

//net.minecraft.client.render.debug.VillageDebugRenderer$Brain
class VillageDebugRenderer_Brain extends JObject{
 getUuid(): UUID;
 uuid: UUID;
 entityId: number;
 name: string;
 profession: string;
 xp: number;
 health: number;
 maxHealth: number;
 pos: Position;
 inventory: string;
 path: Path;
 wantsGolem: boolean;
 angerLevel: number;
 possibleActivities: List;
 runningTasks: List;
 memories: List;
 gossips: List;
 pointsOfInterest: Set;
 potentialJobSites: Set;
}

//net.minecraft.unused.packageinfo.PackageInfo6653
interface PackageInfo6653 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo7984
interface PackageInfo7984 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo7983
interface PackageInfo7983 extends JObject{
}

//net.minecraft.structure.WoodlandMansionGenerator$FlagMatrix
class WoodlandMansionGenerator_FlagMatrix extends JObject{
 get(i: number,j: number): number;
 update(i: number,j: number,expected: number,newValue: number): void;
 fill(i0: number,j0: number,i1: number,j1: number,value: number): void;
 set(i: number,j: number,value: number): void;
 anyMatchAround(i: number,j: number,value: number): boolean;
}

//net.minecraft.client.particle.CampfireSmokeParticle$SignalSmokeFactory
class CampfireSmokeParticle_SignalSmokeFactory extends JObject, ParticleFactory{
 createParticle(defaultParticleType: DefaultParticleType,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
 createParticle(particleEffect: ParticleEffect,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
}

//net.minecraft.unused.packageinfo.PackageInfo6657
interface PackageInfo6657 extends JObject{
}

//net.minecraft.client.render.entity.animation.CamelAnimations
class CamelAnimations extends JObject{
}
class Static_CamelAnimations {
static WALKING: Animation;
static SITTING_TRANSITION: Animation;
static SITTING: Animation;
static STANDING_TRANSITION: Animation;
static DASHING: Animation;
static IDLING: Animation;
}

//net.minecraft.block.entity.BlockEntityType
class BlockEntityType extends JObject{
 get(world: BlockView,pos: BlockPos): BlockEntity;
 instantiate(pos: BlockPos,state: BlockState): BlockEntity;
 supports(state: BlockState): boolean;
}
class Static_BlockEntityType {
static getId(type: BlockEntityType): Identifier;
static create(id: string,builder: BlockEntityType_Builder): BlockEntityType;
static LOGGER: Logger;
static FURNACE: BlockEntityType;
static CHEST: BlockEntityType;
static TRAPPED_CHEST: BlockEntityType;
static ENDER_CHEST: BlockEntityType;
static JUKEBOX: BlockEntityType;
static DISPENSER: BlockEntityType;
static DROPPER: BlockEntityType;
static SIGN: BlockEntityType;
static HANGING_SIGN: BlockEntityType;
static MOB_SPAWNER: BlockEntityType;
static PISTON: BlockEntityType;
static BREWING_STAND: BlockEntityType;
static ENCHANTING_TABLE: BlockEntityType;
static END_PORTAL: BlockEntityType;
static BEACON: BlockEntityType;
static SKULL: BlockEntityType;
static DAYLIGHT_DETECTOR: BlockEntityType;
static HOPPER: BlockEntityType;
static COMPARATOR: BlockEntityType;
static BANNER: BlockEntityType;
static STRUCTURE_BLOCK: BlockEntityType;
static END_GATEWAY: BlockEntityType;
static COMMAND_BLOCK: BlockEntityType;
static SHULKER_BOX: BlockEntityType;
static BED: BlockEntityType;
static CONDUIT: BlockEntityType;
static BARREL: BlockEntityType;
static SMOKER: BlockEntityType;
static BLAST_FURNACE: BlockEntityType;
static LECTERN: BlockEntityType;
static BELL: BlockEntityType;
static JIGSAW: BlockEntityType;
static CAMPFIRE: BlockEntityType;
static BEEHIVE: BlockEntityType;
static SCULK_SENSOR: BlockEntityType;
static CALIBRATED_SCULK_SENSOR: BlockEntityType;
static SCULK_CATALYST: BlockEntityType;
static SCULK_SHRIEKER: BlockEntityType;
static CHISELED_BOOKSHELF: BlockEntityType;
static BRUSHABLE_BLOCK: BlockEntityType;
static DECORATED_POT: BlockEntityType;
}

//net.minecraft.text.NbtDataSource
interface NbtDataSource extends JObject{
 get(source: ServerCommandSource): Stream;
}

//net.minecraft.client.gui.screen.ingame.CyclingSlotIcon
class CyclingSlotIcon extends JObject{
 render(screenHandler: ScreenHandler,context: DrawContext,delta: number,x: number,y: number): void;
 updateTexture(textures: List): void;
}
class Static_CyclingSlotIcon {
static field_42039: number;
static field_42040: number;
static field_42041: number;
}

//net.minecraft.state.State
class State extends JObject{
 get(property: Property): Comparable;
 toString(): string;
 contains(property: Property): boolean;
 getProperties(): Collection;
 getEntries(): ImmutableMap;
 with(property: Property,value: Comparable): Object;
 createWithTable(states: Map): void;
 withIfExists(property: Property,value: Comparable): Object;
 cycle(property: Property): Object;
 getOrEmpty(property: Property): Optional;
}
class Static_State {
static getNext(values: Collection,value: Object): Object;
static method_28497(fun: Function,object: Object): Codec;
static method_38860(state: State,optional: Optional): State;
static method_28492(state: State): Object;
static createCodec(codec: Codec,ownerToStateFunction: Function): Codec;
static NAME: string;
static PROPERTIES: string;
static PROPERTY_MAP_PRINTER: Function;
}

//net.minecraft.client.render.BufferBuilder$TransparentSortingData
class BufferBuilder_TransparentSortingData extends JObject{
}

//net.minecraft.client.QuickPlayLogger
class QuickPlayLogger extends JObject{
 save(client: MinecraftClient): void;
 setWorld(worldType: QuickPlayLogger_WorldType,id: string,name: string): void;
}
class Static_QuickPlayLogger {
static create(relativePath: string): QuickPlayLogger;
static NOOP: QuickPlayLogger;
static LOGGER: Logger;
static GSON: Gson;
}

//net.minecraft.client.sound.OggAudioStream
class OggAudioStream extends JObject, AudioStream{
 close(): void;
 getBuffer(): ByteBuffer;
 getBuffer(size: number): ByteBuffer;
 getFormat(): AudioFormat;
}
class Static_OggAudioStream {
static BUFFER_SIZE: number;
}

//net.minecraft.unused.packageinfo.PackageInfo6664
interface PackageInfo6664 extends JObject{
}

//net.minecraft.client.render.OutlineVertexConsumerProvider
class OutlineVertexConsumerProvider extends JObject, VertexConsumerProvider{
 getBuffer(renderLayer: RenderLayer): VertexConsumer;
 setColor(red: number,green: number,blue: number,alpha: number): void;
 draw(): void;
}

//net.minecraft.client.render.item.HeldItemRenderer
class HeldItemRenderer extends JObject{
 renderItem(tickDelta: number,matrices: MatrixStack,vertexConsumers: VertexConsumerProvider_Immediate,player: ClientPlayerEntity,light: number): void;
 renderItem(entity: LivingEntity,stack: ItemStack,renderMode: ModelTransformationMode,leftHanded: boolean,matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,light: number): void;
 updateHeldItems(): void;
 resetEquipProgress(hand: Hand): void;
}
class Static_HeldItemRenderer {
static getHandRenderType(player: ClientPlayerEntity): HeldItemRenderer_HandRenderType;
static isChargedCrossbow(stack: ItemStack): boolean;
static getUsingItemHandRenderType(player: ClientPlayerEntity): HeldItemRenderer_HandRenderType;
static MAP_BACKGROUND: RenderLayer;
static MAP_BACKGROUND_CHECKERBOARD: RenderLayer;
static field_32735: number;
static field_32736: number;
static field_32737: number;
static field_32738: number;
static EQUIP_OFFSET_TRANSLATE_X: number;
static EQUIP_OFFSET_TRANSLATE_Y: number;
static EQUIP_OFFSET_TRANSLATE_Z: number;
static field_32742: number;
static field_32743: number;
static field_32744: number;
static field_32745: number;
static EAT_OR_DRINK_X_ANGLE_MULTIPLIER: number;
static EAT_OR_DRINK_Y_ANGLE_MULTIPLIER: number;
static EAT_OR_DRINK_Z_ANGLE_MULTIPLIER: number;
static field_32749: number;
static field_32750: number;
static field_32751: number;
static field_32752: number;
static field_32753: number;
static field_32754: number;
static field_32755: number;
static field_32756: number;
static field_32757: number;
static ARM_HOLDING_ITEM_SECOND_Y_ANGLE_MULTIPLIER: number;
static ARM_HOLDING_ITEM_FIRST_Z_ANGLE_MULTIPLIER: number;
static field_32690: number;
static field_32691: number;
static field_32692: number;
static field_32693: number;
static field_32694: number;
static field_32695: number;
static field_32696: number;
static field_32697: number;
static field_32698: number;
static ARM_HOLDING_ITEM_TRANSLATE_X: number;
static ARM_HOLDING_ITEM_X_ANGLE_MULTIPLIER: number;
static ARM_HOLDING_ITEM_THIRD_Y_ANGLE_MULTIPLIER: number;
static ARM_HOLDING_ITEM_SECOND_Z_ANGLE_MULTIPLIER: number;
static field_32703: number;
static field_32704: number;
static field_32705: number;
static field_32706: number;
static field_32707: number;
static field_32708: number;
static field_32709: number;
static field_32710: number;
static field_32711: number;
static ARM_X_ANGLE_MULTIPLIER: number;
static ARM_Y_ANGLE_MULTIPLIER: number;
static ARM_Z_ANGLE_MULTIPLIER: number;
static ARM_TRANSLATE_X: number;
static ARM_TRANSLATE_Y: number;
static ARM_TRANSLATE_Z: number;
static field_32718: number;
static FIRST_PERSON_MAP_FIRST_SCALE: number;
static FIRST_PERSON_MAP_TRANSLATE_X: number;
static FIRST_PERSON_MAP_TRANSLATE_Y: number;
static FIRST_PERSON_MAP_TRANSLATE_Z: number;
static FIRST_PERSON_MAP_SECOND_SCALE: number;
static field_32724: number;
static field_32725: number;
static field_32726: number;
static field_32727: number;
static field_32728: number;
static field_32729: number;
static field_32730: number;
static field_32731: number;
static field_32732: number;
static field_32733: number;
static field_32734: number;
}

//net.minecraft.unused.packageinfo.PackageInfo6667
interface PackageInfo6667 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6666
interface PackageInfo6666 extends JObject{
}

//net.minecraft.world.level.storage.LevelStorage$Session
class LevelStorage_Session extends JObject, AutoCloseable{
 close(): void;
 save(name: string): void;
 getDirectoryName(): string;
 createSaveHandler(): WorldSaveHandler;
 getLevelSummary(): LevelSummary;
 getDirectory(savePath: WorldSavePath): Path;
 getWorldDirectory(key: RegistryKey): Path;
 deleteSessionLock(): void;
 createBackup(): long;
 getIconFile(): Optional;
 getDataPackSettings(): DataConfiguration;
 backupLevelDataFile(registryManager: DynamicRegistryManager,saveProperties: SaveProperties): void;
 backupLevelDataFile(registryManager: DynamicRegistryManager,saveProperties: SaveProperties,nbt: NbtCompound): void;
 readLevelProperties(ops: DynamicOps,dataConfiguration: DataConfiguration,dimensionOptionsRegistry: Registry,lifecycle: Lifecycle): Pair;
}

//net.minecraft.block.entity.Hopper
interface Hopper extends JObject, Inventory{
 getHopperY(): number;
 getInputAreaShape(): VoxelShape;
 getHopperX(): number;
 getHopperZ(): number;
}
class Static_Hopper {
static INSIDE_SHAPE: VoxelShape;
static ABOVE_SHAPE: VoxelShape;
static INPUT_AREA_SHAPE: VoxelShape;
}

//net.minecraft.client.render.block.entity.SkullBlockEntityRenderer
class SkullBlockEntityRenderer extends JObject, BlockEntityRenderer{
 render(entity: BlockEntity,tickDelta: number,matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,light: number,overlay: number): void;
 render(skullBlockEntity: SkullBlockEntity,f: number,matrixStack: MatrixStack,vertexConsumerProvider: VertexConsumerProvider,i: number,j: number): void;
}
class Static_SkullBlockEntityRenderer {
static getRenderLayer(type: SkullBlock_SkullType,profile: GameProfile): RenderLayer;
static method_3580(map: HashMap): void;
static renderSkull(direction: Direction,yaw: number,animationProgress: number,matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,light: number,model: SkullBlockEntityModel,renderLayer: RenderLayer): void;
static getModels(modelLoader: EntityModelLoader): Map;
static TEXTURES: Map;
}

//net.minecraft.client.gui.screen.ingame.HandledScreens$Provider
interface HandledScreens_Provider extends JObject{
 open(name: Text,type: ScreenHandlerType,client: MinecraftClient,id: number): void;
 create(handler: ScreenHandler,playerInventory: PlayerInventory,title: Text): Screen;
}

//net.minecraft.command.argument.EnumArgumentType
class EnumArgumentType extends JObject, ArgumentType{
 parse(reader: StringReader): Object;
 parse(stringReader: StringReader): Enum;
 getExamples(): Collection;
 listSuggestions(context: CommandContext,builder: SuggestionsBuilder): CompletableFuture;
}
class Static_EnumArgumentType {
static method_44095(value: Object): Message;
static method_44092(enum_: Object): string;
static method_44093(string: string): CommandSyntaxException;
static method_44094(enum_: Object): string;
static INVALID_ENUM_EXCEPTION: DynamicCommandExceptionType;
}

//net.minecraft.structure.processor.StructureProcessorList
class StructureProcessorList extends JObject{
 toString(): string;
 getList(): List;
}

//net.minecraft.client.render.model.json.MultipartModelSelector
interface MultipartModelSelector extends JObject{
 getPredicate(stateFactory: StateManager): Predicate;
}
class Static_MultipartModelSelector {
static method_16810(stateFactory: StateManager): Predicate;
static method_16808(stateFactory: StateManager): Predicate;
static method_16811(state: BlockState): boolean;
static method_16809(state: BlockState): boolean;
static TRUE: MultipartModelSelector;
static FALSE: MultipartModelSelector;
}

//net.minecraft.world.HeightLimitView$1


//net.minecraft.village.Merchant
interface Merchant extends JObject{
 isLeveledMerchant(): boolean;
 getYesSound(): SoundEvent;
 getCustomer(): PlayerEntity;
 setCustomer(customer: PlayerEntity): void;
 getOffers(): TradeOfferList;
 onSellingItem(stack: ItemStack): void;
 getExperience(): number;
 canRefreshTrades(): boolean;
 sendOffers(player: PlayerEntity,test: Text,levelProgress: number): void;
 setOffersFromServer(offers: TradeOfferList): void;
 setExperienceFromServer(experience: number): void;
 trade(offer: TradeOffer): void;
 isClient(): boolean;
}

//net.minecraft.unused.packageinfo.PackageInfo7961
interface PackageInfo7961 extends JObject{
}

//net.minecraft.command.argument.ArgumentTypes
class ArgumentTypes extends JObject{
}
class Static_ArgumentTypes {
static get(argumentType: ArgumentType): ArgumentSerializer;
static register(registry: Registry): ArgumentSerializer;
static register(registry: Registry,id: string,clazz: Class,serializer: ArgumentSerializer): ArgumentSerializer;
static has(clazz: Class): boolean;
static upcast(clazz: Class): Class;
static getArgumentTypeProperties(argumentType: ArgumentType): ArgumentSerializer_ArgumentTypeProperties;
static CLASS_MAP: Map;
}

//net.minecraft.util.math.Position
interface Position extends JObject{
 getX(): number;
 getY(): number;
 getZ(): number;
}

//net.minecraft.network.packet.s2c.play.CommandTreeS2CPacket$CommandTree
class CommandTreeS2CPacket_CommandTree extends JObject{
 getNode(index: number): CommandNode;
}
class Static_CommandTreeS2CPacket_CommandTree {
static method_42078(context: CommandContext): number;
}

//net.minecraft.network.packet.c2s.play.PlayerInteractEntityC2SPacket$InteractTypeHandler
interface PlayerInteractEntityC2SPacket_InteractTypeHandler extends JObject{
 write(buf: PacketByteBuf): void;
 getType(): PlayerInteractEntityC2SPacket_InteractType;
 handle(handler: PlayerInteractEntityC2SPacket_Handler): void;
}

//net.minecraft.server.function.CommandFunction$Element
interface CommandFunction_Element extends JObject{
 execute(manager: CommandFunctionManager,source: ServerCommandSource,entries: Deque,maxChainLength: number,depth: number,tracer: CommandFunctionManager_Tracer): void;
}

//net.minecraft.unused.packageinfo.PackageInfo6633
interface PackageInfo6633 extends JObject{
}

//net.minecraft.recipe.CuttingRecipe$Serializer
class CuttingRecipe_Serializer extends JObject, RecipeSerializer{
 write(buf: PacketByteBuf,recipe: Recipe): void;
 write(packetByteBuf: PacketByteBuf,cuttingRecipe: CuttingRecipe): void;
 read(id: Identifier,json: JsonObject): Recipe;
 read(id: Identifier,buf: PacketByteBuf): Recipe;
 read(identifier: Identifier,jsonObject: JsonObject): CuttingRecipe;
 read(identifier: Identifier,packetByteBuf: PacketByteBuf): CuttingRecipe;
}

//net.minecraft.structure.WoodlandMansionGenerator$GenerationPiece
class WoodlandMansionGenerator_GenerationPiece extends JObject{
 rotation: BlockRotation;
 position: BlockPos;
 template: string;
}

//net.minecraft.client.particle.WaterSuspendParticle$CrimsonSporeFactory
class WaterSuspendParticle_CrimsonSporeFactory extends JObject, ParticleFactory{
 createParticle(defaultParticleType: DefaultParticleType,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
 createParticle(particleEffect: ParticleEffect,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
}

//net.minecraft.client.realms.RealmsSerializable
interface RealmsSerializable extends JObject{
}

//net.minecraft.client.render.model.json.SimpleMultipartModelSelector
class SimpleMultipartModelSelector extends JObject, MultipartModelSelector{
 toString(): string;
 getPredicate(stateManager: StateManager): Predicate;
}
class Static_SimpleMultipartModelSelector {
static method_3528(property: Property,optional: Optional,state: BlockState): boolean;
static method_3527(blockState: BlockState,predicate: Predicate): boolean;
static method_3524(list: List,state: BlockState): boolean;
static VALUE_SPLITTER: Splitter;
}

//net.minecraft.village.VillagerGossips
class VillagerGossips extends JObject{
 remove(target: UUID,type: VillageGossipType): void;
 remove(type: VillageGossipType): void;
 deserialize(dynamic: Dynamic): void;
 decay(): void;
 getReputationCount(type: VillageGossipType,predicate: DoublePredicate): long;
 getReputationFor(target: UUID,gossipTypeFilter: Predicate): number;
 removeGossip(target: UUID,type: VillageGossipType,value: number): void;
 startGossip(target: UUID,type: VillageGossipType,value: number): void;
 shareGossipFrom(from: VillagerGossips,random: Random,count: number): void;
 serialize(ops: DynamicOps): Object;
 getEntityReputationAssociatedGossips(): Map;
}
class Static_VillagerGossips {
static max(left: number,right: number): number;
static method_19069(entry: Map_Entry): Stream;
static method_19076(uuid: UUID): VillagerGossips_Reputation;
static method_35125(doublePredicate: DoublePredicate,villageGossipType: VillageGossipType,reputation: VillagerGossips_Reputation): boolean;
static method_47924(pair: Pair): Stream;
static method_47925(error: string): void;
static method_47926(error: string): void;
static LOGGER: Logger;
static field_30236: number;
}

//net.minecraft.entity.player.ItemCooldownManager
class ItemCooldownManager extends JObject{
 remove(item: Item): void;
 update(): void;
 set(item: Item,duration: number): void;
 isCoolingDown(item: Item): boolean;
 getCooldownProgress(item: Item,tickDelta: number): number;
}

//net.minecraft.predicate.entity.AdvancementEntityPredicateSerializer
class AdvancementEntityPredicateSerializer extends JObject{
 conditionsToJson(conditions: LootCondition[]): JsonElement;
}
class Static_AdvancementEntityPredicateSerializer {
static INSTANCE: AdvancementEntityPredicateSerializer;
}

//net.minecraft.world.event.PositionSourceType
interface PositionSourceType extends JObject{
 readFromBuf(buf: PacketByteBuf): PositionSource;
 writeToBuf(buf: PacketByteBuf,positionSource: PositionSource): void;
 getCodec(): Codec;
}
class Static_PositionSourceType {
static register(id: string,positionSourceType: PositionSourceType): PositionSourceType;
static write(positionSource: PositionSource,buf: PacketByteBuf): void;
static read(buf: PacketByteBuf): PositionSource;
static method_32961(identifier: Identifier): IllegalArgumentException;
static BLOCK: PositionSourceType;
static ENTITY: PositionSourceType;
}

//net.minecraft.world.gen.foliage.FoliagePlacer$TreeNode
class FoliagePlacer_TreeNode extends JObject{
 getCenter(): BlockPos;
 getFoliageRadius(): number;
 isGiantTrunk(): boolean;
}

//net.minecraft.client.gui.screen.recipebook.RecipeBookGhostSlots$GhostInputSlot
class RecipeBookGhostSlots_GhostInputSlot extends JObject{
 getCurrentItemStack(): ItemStack;
 getX(): number;
 getY(): number;
}

//net.minecraft.network.packet.s2c.play.UnlockRecipesS2CPacket
class UnlockRecipesS2CPacket extends JObject, Packet{
 apply(clientPlayPacketListener: ClientPlayPacketListener): void;
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
 getAction(): UnlockRecipesS2CPacket_Action;
 getRecipeIdsToInit(): List;
 getRecipeIdsToChange(): List;
 getOptions(): RecipeBookOptions;
}

//net.minecraft.loot.function.ConditionalLootFunction
class ConditionalLootFunction extends JObject, LootFunction{
 apply(itemStack: Object,context: Object): Object;
 apply(itemStack: ItemStack,lootContext: LootContext): ItemStack;
 validate(reporter: LootTableReporter): void;
}
class Static_ConditionalLootFunction {
static builder(joiner: Function): ConditionalLootFunction_Builder;
}

//net.minecraft.unused.packageinfo.PackageInfo6641
interface PackageInfo6641 extends JObject{
}

//net.minecraft.command.argument.MessageArgumentType
class MessageArgumentType extends JObject, SignedArgumentType{
 parse(reader: StringReader): Object;
 parse(stringReader: StringReader): MessageArgumentType_MessageFormat;
 getExamples(): Collection;
}
class Static_MessageArgumentType {
static getMessage(context: CommandContext,name: string): Text;
static message(): MessageArgumentType;
static chain(callback: Consumer,source: ServerCommandSource,message: SignedMessage): void;
static filterText(source: ServerCommandSource,message: SignedMessage): CompletableFuture;
static method_45564(completableFuture: CompletableFuture,completableFuture2: CompletableFuture,signedMessage: SignedMessage,consumer: Consumer,executor: Executor): CompletableFuture;
static method_45565(completableFuture: CompletableFuture,consumer: Consumer,signedMessage: SignedMessage,executor: Executor): CompletableFuture;
static method_45567(consumer: Consumer,signedMessage: SignedMessage,content: Text): void;
static method_45568(signedMessage: SignedMessage,completableFuture: CompletableFuture,completableFuture2: CompletableFuture,consumer: Consumer,void_: Void): void;
static chainUnsigned(callback: Consumer,source: ServerCommandSource,message: SignedMessage): void;
static getSignedMessage(context: CommandContext,name: string,callback: Consumer): void;
static EXAMPLES: Collection;
}

//net.minecraft.structure.StructureSetKeys
interface StructureSetKeys extends JObject{
}
class Static_StructureSetKeys {
static of(id: string): RegistryKey;
static VILLAGES: RegistryKey;
static DESERT_PYRAMIDS: RegistryKey;
static IGLOOS: RegistryKey;
static JUNGLE_TEMPLES: RegistryKey;
static SWAMP_HUTS: RegistryKey;
static PILLAGER_OUTPOSTS: RegistryKey;
static OCEAN_MONUMENTS: RegistryKey;
static WOODLAND_MANSIONS: RegistryKey;
static BURIED_TREASURES: RegistryKey;
static MINESHAFTS: RegistryKey;
static RUINED_PORTALS: RegistryKey;
static SHIPWRECKS: RegistryKey;
static OCEAN_RUINS: RegistryKey;
static NETHER_COMPLEXES: RegistryKey;
static NETHER_FOSSILS: RegistryKey;
static END_CITIES: RegistryKey;
static ANCIENT_CITIES: RegistryKey;
static STRONGHOLDS: RegistryKey;
static TRAIL_RUINS: RegistryKey;
}

//net.minecraft.client.font.GlyphRenderer$Rectangle
class GlyphRenderer_Rectangle extends JObject{
}

//net.minecraft.command.argument.serialize.DoubleArgumentSerializer$Properties
class DoubleArgumentSerializer_Properties extends JObject, ArgumentSerializer_ArgumentTypeProperties{
 createType(commandRegistryAccess: CommandRegistryAccess): ArgumentType;
 createType(commandRegistryAccess: CommandRegistryAccess): DoubleArgumentType;
 getSerializer(): ArgumentSerializer;
}

//net.minecraft.util.dynamic.Codecs$1


//net.minecraft.world.level.LevelInfo
class LevelInfo extends JObject{
 getLevelName(): string;
 getDataConfiguration(): DataConfiguration;
 withDataConfiguration(dataConfiguration: DataConfiguration): LevelInfo;
 withCopiedGameRules(): LevelInfo;
 areCommandsAllowed(): boolean;
 isHardcore(): boolean;
 getDifficulty(): Difficulty;
 withDifficulty(difficulty: Difficulty): LevelInfo;
 withGameMode(mode: GameMode): LevelInfo;
 getGameRules(): GameRules;
 getGameMode(): GameMode;
}
class Static_LevelInfo {
static method_28384(difficulty: Number): Difficulty;
static fromDynamic(dynamic: Dynamic,dataConfiguration: DataConfiguration): LevelInfo;
}

//net.minecraft.network.packet.s2c.play.EnterCombatS2CPacket
class EnterCombatS2CPacket extends JObject, Packet{
 apply(clientPlayPacketListener: ClientPlayPacketListener): void;
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
}

//net.minecraft.client.gui.hud.spectator.SpectatorMenuCommand
interface SpectatorMenuCommand extends JObject{
 getName(): Text;
 use(menu: SpectatorMenu): void;
 isEnabled(): boolean;
 renderIcon(context: DrawContext,brightness: number,alpha: number): void;
}

//net.minecraft.client.option.SimpleOption$SliderCallbacks
interface SimpleOption_SliderCallbacks extends JObject, SimpleOption_Callbacks{
 getWidgetCreator(tooltipFactory: SimpleOption_TooltipFactory,gameOptions: GameOptions,x: number,y: number,width: number,changeCallback: Consumer): Function;
 toSliderProgress(value: Object): number;
 toValue(sliderProgress: number): Object;
}

//net.minecraft.util.JsonSerializing
class JsonSerializing extends JObject{
}
class Static_JsonSerializing {
static createSerializerBuilder(registry: Registry,rootFieldName: string,idFieldName: string,typeGetter: Function): JsonSerializing_SerializerBuilder;
}

//net.minecraft.util.dynamic.Codecs$4


//net.minecraft.client.network.PlayerListEntry
class PlayerListEntry extends JObject{
 getDisplayName(): Text;
 getModel(): string;
 getLatency(): number;
 getSkinTexture(): Identifier;
 getSession(): PublicPlayerSession;
 setDisplayName(displayName: Text): void;
 hasPublicKey(): boolean;
 hasCape(): boolean;
 getElytraTexture(): Identifier;
 getScoreboardTeam(): Team;
 getCapeTexture(): Identifier;
 hasSkinTexture(): boolean;
 getProfile(): GameProfile;
 getMessageVerifier(): MessageVerifier;
 getGameMode(): GameMode;
}
class Static_PlayerListEntry {
static getInitialVerifier(secureChatEnforced: boolean): MessageVerifier;
}

//net.minecraft.util.dynamic.Codecs$3


//net.minecraft.client.render.entity.feature.WardenFeatureRenderer$ModelPartVisibility
interface WardenFeatureRenderer_ModelPartVisibility extends JObject{
 getPartsToDraw(model: EntityModel): List;
}

//net.minecraft.util.dynamic.Codecs$2


//net.minecraft.village.TradeOffers$ProcessItemFactory
class TradeOffers_ProcessItemFactory extends JObject, TradeOffers_Factory{
 create(entity: Entity,random: Random): TradeOffer;
}

//net.minecraft.predicate.entity.DamageSourcePredicate$Builder
class DamageSourcePredicate_Builder extends JObject{
 build(): DamageSourcePredicate;
 tag(tagPredicate: TagPredicate): DamageSourcePredicate_Builder;
 sourceEntity(entity: EntityPredicate_Builder): DamageSourcePredicate_Builder;
 sourceEntity(entity: EntityPredicate): DamageSourcePredicate_Builder;
 directEntity(entity: EntityPredicate_Builder): DamageSourcePredicate_Builder;
 directEntity(entity: EntityPredicate): DamageSourcePredicate_Builder;
}
class Static_DamageSourcePredicate_Builder {
static create(): DamageSourcePredicate_Builder;
}

//net.minecraft.util.profiler.DummyProfiler
class DummyProfiler extends JObject, ReadableProfiler{
 swap(location: string): void;
 swap(locationGetter: Supplier): void;
 push(location: string): void;
 push(locationGetter: Supplier): void;
 pop(): void;
 getResult(): ProfileResult;
 visit(markerGetter: Supplier,num: number): void;
 visit(marker: string,num: number): void;
 getInfo(name: string): ProfilerSystem_LocatedInfo;
 markSampleType(type: SampleType): void;
 getSampleTargets(): Set;
 endTick(): void;
 startTick(): void;
}
class Static_DummyProfiler {
static INSTANCE: DummyProfiler;
}

//net.minecraft.item.trim.ArmorTrimMaterials
class ArmorTrimMaterials extends JObject{
}
class Static_ArmorTrimMaterials {
static get(registryManager: DynamicRegistryManager,stack: ItemStack): Optional;
static of(id: string): RegistryKey;
static register(registry: Registerable,key: RegistryKey,ingredient: Item,style: Style,itemModelIndex: number,overrideArmorMaterials: Map): void;
static register(registry: Registerable,key: RegistryKey,ingredient: Item,style: Style,itemModelIndex: number): void;
static bootstrap(registry: Registerable): void;
static method_48439(itemStack: ItemStack,recipe: RegistryEntry_Reference): boolean;
static QUARTZ: RegistryKey;
static IRON: RegistryKey;
static NETHERITE: RegistryKey;
static REDSTONE: RegistryKey;
static COPPER: RegistryKey;
static GOLD: RegistryKey;
static EMERALD: RegistryKey;
static DIAMOND: RegistryKey;
static LAPIS: RegistryKey;
static AMETHYST: RegistryKey;
}

//net.minecraft.unused.packageinfo.PackageInfo7945
interface PackageInfo7945 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6614
interface PackageInfo6614 extends JObject{
}

//net.minecraft.world.chunk.light.ChunkLightProvider
class ChunkLightProvider extends JObject, ChunkLightingView{
 getStatus(sectionPos: long): LightStorage_Status;
 displaySectionLevel(sectionPos: long): string;
 checkBlock(pos: BlockPos): void;
 setSectionStatus(pos: ChunkSectionPos,notReady: boolean): void;
 setRetainColumn(pos: ChunkPos,retainData: boolean): void;
 enqueueSectionData(sectionPos: long,lightArray: ChunkNibbleArray): void;
 getLightSection(pos: ChunkSectionPos): ChunkNibbleArray;
 hasUpdates(): boolean;
 setColumnEnabled(pos: ChunkPos,retainData: boolean): void;
 doLightUpdates(): number;
 getLightLevel(pos: BlockPos): number;
}
class Static_ChunkLightProvider {
static getRealisticOpacity(world: BlockView,state1: BlockState,pos1: BlockPos,state2: BlockState,pos2: BlockPos,direction: Direction,opacity2: number): number;
static isTrivialForLighting(blockState: BlockState): boolean;
static getOpaqueShape(blockView: BlockView,pos: BlockPos,blockState: BlockState,direction: Direction): VoxelShape;
static needsLightUpdate(blockView: BlockView,pos: BlockPos,oldState: BlockState,newState: BlockState): boolean;
static field_44729: number;
static field_44730: number;
static field_44731: long;
static field_44732: number;
static DIRECTIONS: Direction[];
static field_31709: number;
}

//net.minecraft.client.util.math.MatrixStack
class MatrixStack extends JObject{
 scale(x: number,y: number,z: number): void;
 isEmpty(): boolean;
 peek(): MatrixStack_Entry;
 multiply(quaternion: Quaternionf,originX: number,originY: number,originZ: number): void;
 multiply(quaternion: Quaternionf): void;
 push(): void;
 pop(): void;
 translate(x: number,y: number,z: number): void;
 translate(x: number,y: number,z: number): void;
 multiplyPositionMatrix(matrix: Matrix4f): void;
 loadIdentity(): void;
}
class Static_MatrixStack {
static method_22908(stack: ArrayDeque): void;
}

//net.minecraft.network.packet.c2s.play.JigsawGeneratingC2SPacket
class JigsawGeneratingC2SPacket extends JObject, Packet{
 apply(serverPlayPacketListener: ServerPlayPacketListener): void;
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
 getMaxDepth(): number;
 shouldKeepJigsaws(): boolean;
 getPos(): BlockPos;
}

//net.minecraft.unused.packageinfo.PackageInfo6627
interface PackageInfo6627 extends JObject{
}

//net.minecraft.registry.tag.InstrumentTags
interface InstrumentTags extends JObject{
}
class Static_InstrumentTags {
static of(id: string): TagKey;
static REGULAR_GOAT_HORNS: TagKey;
static SCREAMING_GOAT_HORNS: TagKey;
static GOAT_HORNS: TagKey;
}

//net.minecraft.client.texture.atlas.AtlasSource$SpriteRegions
interface AtlasSource_SpriteRegions extends JObject{
 add(id: Identifier,resource: Resource): void;
 add(arg: Identifier,region: AtlasSource_SpriteRegion): void;
 removeIf(predicate: Predicate): void;
}
class Static_AtlasSource_SpriteRegions {
static method_47675(identifier: Identifier,resource: Resource): SpriteContents;
}

//net.minecraft.server.network.ServerPlayNetworkHandler
class ServerPlayNetworkHandler extends JObject, EntityTrackingListener, TickablePacketListener, ServerPlayPacketListener{
 tick(): void;
 disconnect(reason: Text): void;
 onUpdateDifficulty(packet: UpdateDifficultyC2SPacket): void;
 onUpdateCommandBlockMinecart(packet: UpdateCommandBlockMinecartC2SPacket): void;
 onSelectMerchantTrade(packet: SelectMerchantTradeC2SPacket): void;
 syncWithPlayerPosition(): void;
 onRecipeCategoryOptions(packet: RecipeCategoryOptionsC2SPacket): void;
 onPickFromInventory(packet: PickFromInventoryC2SPacket): void;
 onUpdateStructureBlock(packet: UpdateStructureBlockC2SPacket): void;
 onRequestCommandCompletions(packet: RequestCommandCompletionsC2SPacket): void;
 onUpdateCommandBlock(packet: UpdateCommandBlockC2SPacket): void;
 onSpectatorTeleport(packet: SpectatorTeleportC2SPacket): void;
 onUpdatePlayerAbilities(packet: UpdatePlayerAbilitiesC2SPacket): void;
 onUpdateDifficultyLock(packet: UpdateDifficultyLockC2SPacket): void;
 onResourcePackStatus(packet: ResourcePackStatusC2SPacket): void;
 onUpdateSelectedSlot(packet: UpdateSelectedSlotC2SPacket): void;
 addPendingAcknowledgment(message: SignedMessage): void;
 sendProfilelessChatMessage(message: Text,params: MessageType_Parameters): void;
 onPlayerInteractBlock(packet: PlayerInteractBlockC2SPacket): void;
 onMessageAcknowledgment(packet: MessageAcknowledgmentC2SPacket): void;
 getConnectionAddress(): SocketAddress;
 onCreativeInventoryAction(packet: CreativeInventoryActionC2SPacket): void;
 onCloseHandledScreen(packet: CloseHandledScreenC2SPacket): void;
 onPlayerInteractItem(packet: PlayerInteractItemC2SPacket): void;
 onPlayerInteractEntity(packet: PlayerInteractEntityC2SPacket): void;
 onUpdateSign(packet: UpdateSignC2SPacket): void;
 onClientSettings(packet: ClientSettingsC2SPacket): void;
 onKeepAlive(packet: KeepAliveC2SPacket): void;
 onJigsawGenerating(packet: JigsawGeneratingC2SPacket): void;
 isConnectionOpen(): boolean;
 onPlayerInput(packet: PlayerInputC2SPacket): void;
 onVehicleMove(packet: VehicleMoveC2SPacket): void;
 onTeleportConfirm(packet: TeleportConfirmC2SPacket): void;
 onRecipeBookData(packet: RecipeBookDataC2SPacket): void;
 onAdvancementTab(packet: AdvancementTabC2SPacket): void;
 onUpdateBeacon(packet: UpdateBeaconC2SPacket): void;
 onRenameItem(packet: RenameItemC2SPacket): void;
 onUpdateJigsaw(packet: UpdateJigsawC2SPacket): void;
 onBookUpdate(packet: BookUpdateC2SPacket): void;
 onPlayerMove(packet: PlayerMoveC2SPacket): void;
 onQueryEntityNbt(packet: QueryEntityNbtC2SPacket): void;
 requestTeleport(x: number,y: number,z: number,yaw: number,pitch: number,flags: Set): void;
 requestTeleport(x: number,y: number,z: number,yaw: number,pitch: number): void;
 onQueryBlockNbt(packet: QueryBlockNbtC2SPacket): void;
 onPlayerAction(packet: PlayerActionC2SPacket): void;
 updateSequence(sequence: number): void;
 onBoatPaddleState(packet: BoatPaddleStateC2SPacket): void;
 onPong(packet: PlayPongC2SPacket): void;
 onDisconnected(reason: Text): void;
 onCommandExecution(packet: CommandExecutionC2SPacket): void;
 onChatMessage(packet: ChatMessageC2SPacket): void;
 onHandSwing(packet: HandSwingC2SPacket): void;
 onClientCommand(packet: ClientCommandC2SPacket): void;
 sendChatMessage(message: SignedMessage,params: MessageType_Parameters): void;
 onClickSlot(packet: ClickSlotC2SPacket): void;
 onClientStatus(packet: ClientStatusC2SPacket): void;
 onCraftRequest(packet: CraftRequestC2SPacket): void;
 onPlayerSession(packet: PlayerSessionC2SPacket): void;
 onCustomPayload(packet: CustomPayloadC2SPacket): void;
 onButtonClick(packet: ButtonClickC2SPacket): void;
 sendPacket(packet: Packet): void;
 sendPacket(packet: Packet,callbacks: PacketCallbacks): void;
 getPlayer(): ServerPlayerEntity;
 player: ServerPlayerEntity;
}
class Static_ServerPlayNetworkHandler {
static hasIllegalCharacter(message: string): boolean;
static clampVertical(d: number): number;
static clampHorizontal(d: number): number;
static isMovementInvalid(x: number,y: number,z: number,yaw: number,pitch: number): boolean;
static method_33797(unaryOperator: UnaryOperator,message: FilteredMessage): NbtString;
static method_33799(text: string): string;
static method_14361(packet: Packet): string;
static method_45002(signedCommandArguments: SignedCommandArguments,source: ServerCommandSource): ServerCommandSource;
static canPlace(player: ServerPlayerEntity,stack: ItemStack): boolean;
static LOGGER: Logger;
static KEEP_ALIVE_INTERVAL: number;
static MAX_BREAK_SQUARED_DISTANCE: number;
static DEFAULT_SEQUENCE: number;
static MAX_PENDING_ACKNOWLEDGMENTS: number;
static CHAT_VALIDATION_FAILED_TEXT: Text;
}

//net.minecraft.unused.packageinfo.PackageInfo7953
interface PackageInfo7953 extends JObject{
}

//net.minecraft.client.font.TextHandler$WidthRetriever
interface TextHandler_WidthRetriever extends JObject{
 getWidth(codePoint: number,style: Style): number;
}

//net.minecraft.resource.metadata.BlockEntry
class BlockEntry extends JObject{
 getNamespacePredicate(): Predicate;
 getIdentifierPredicate(): Predicate;
 getPathPredicate(): Predicate;
}
class Static_BlockEntry {
static method_41289(namespace_: string): boolean;
static method_41286(path_: string): boolean;
static method_41284(entry: BlockEntry): Optional;
static method_41288(entry: BlockEntry): Optional;
static method_41285(instance: RecordCodecBuilder_Instance): App;
static CODEC: Codec;
}

//net.minecraft.scoreboard.ScoreboardObjective
class ScoreboardObjective extends JObject{
 getName(): string;
 getDisplayName(): Text;
 getScoreboard(): Scoreboard;
 setDisplayName(name: Text): void;
 getCriterion(): ScoreboardCriterion;
 toHoverableText(): Text;
 setRenderType(renderType: ScoreboardCriterion_RenderType): void;
 getRenderType(): ScoreboardCriterion_RenderType;
}

//net.minecraft.entity.ai.brain.task.ScheduleActivityTask
class ScheduleActivityTask extends JObject{
}
class Static_ScheduleActivityTask {
static create(): Task;
static method_47186(context: TaskTriggerer_TaskContext): App;
static method_47185(world: ServerWorld,entity: LivingEntity,time: long): boolean;
}

//net.minecraft.client.realms.gui.screen.UploadResult
class UploadResult extends JObject{
 statusCode: number;
 errorMessage: string;
}

//net.minecraft.network.packet.s2c.play.ChunkRenderDistanceCenterS2CPacket
class ChunkRenderDistanceCenterS2CPacket extends JObject, Packet{
 apply(clientPlayPacketListener: ClientPlayPacketListener): void;
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
 getChunkX(): number;
 getChunkZ(): number;
}

//net.minecraft.entity.Dismounting
class Dismounting extends JObject{
}
class Static_Dismounting {
static getDismountOffsets(movementDirection: Direction): number[][];
static method_30770(collisionView: CollisionView,blockPos: BlockPos): VoxelShape;
static canPlaceEntityAt(world: CollisionView,offset: Vec3d,entity: LivingEntity,pose: EntityPose): boolean;
static canPlaceEntityAt(world: CollisionView,entity: LivingEntity,targetBox: Box): boolean;
static findRespawnPos(entityType: EntityType,world: CollisionView,pos: BlockPos,ignoreInvalidPos: boolean): Vec3d;
static canDismountInBlock(height: number): boolean;
static getCeilingHeight(pos: BlockPos,maxDistance: number,collisionShapeGetter: Function): number;
static getCollisionShape(world: BlockView,pos: BlockPos): VoxelShape;
}

//net.minecraft.test.TestManager
class TestManager extends JObject{
 clear(): void;
 start(test: GameTestState): void;
 tick(): void;
}
class Static_TestManager {
static INSTANCE: TestManager;
}

//net.minecraft.server.command.ClearCommand
class ClearCommand extends JObject{
}
class Static_ClearCommand {
static register(dispatcher: CommandDispatcher,commandRegistryAccess: CommandRegistryAccess): void;
static execute(source: ServerCommandSource,targets: Collection,item: Predicate,maxCount: number): number;
static method_13078(context: CommandContext): number;
static method_13073(context: CommandContext): number;
static method_13075(playerName: Object): Message;
static method_13082(source: ServerCommandSource): boolean;
static method_51937(i: number,collection: Collection): Text;
static method_13074(context: CommandContext): number;
static method_13083(stack: ItemStack): boolean;
static method_13081(stack: ItemStack): boolean;
static method_13080(context: CommandContext): number;
static method_13079(playerCount: Object): Message;
static method_51938(i: number,collection: Collection): Text;
static method_51939(i: number,collection: Collection): Text;
static method_51936(i: number,collection: Collection): Text;
static FAILED_SINGLE_EXCEPTION: DynamicCommandExceptionType;
static FAILED_MULTIPLE_EXCEPTION: DynamicCommandExceptionType;
}

//net.minecraft.client.resource.metadata.TextureResourceMetadataReader
class TextureResourceMetadataReader extends JObject, ResourceMetadataReader{
 getKey(): string;
 fromJson(jsonObject: JsonObject): TextureResourceMetadata;
 fromJson(json: JsonObject): Object;
}

//net.minecraft.datafixer.mapping.FlatteningRecipeMapping
class FlatteningRecipeMapping extends JObject{
}
class Static_FlatteningRecipeMapping {
static RECIPES: Map;
}

//net.minecraft.client.realms.RealmsLabel
class RealmsLabel extends JObject, Drawable{
 getText(): Text;
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
}

//net.minecraft.unused.packageinfo.PackageInfo7925
interface PackageInfo7925 extends JObject{
}

//net.minecraft.recipe.CuttingRecipe
class CuttingRecipe extends JObject, Recipe{
 getId(): Identifier;
 getType(): RecipeType;
 getOutput(registryManager: DynamicRegistryManager): ItemStack;
 getGroup(): string;
 craft(inventory: Inventory,registryManager: DynamicRegistryManager): ItemStack;
 getIngredients(): DefaultedList;
 fits(width: number,height: number): boolean;
 getSerializer(): RecipeSerializer;
}

//net.minecraft.nbt.NbtInt$1


//net.minecraft.client.render.model.CubeFace$DirectionIds
class CubeFace_DirectionIds extends JObject{
}
class Static_CubeFace_DirectionIds {
static SOUTH: number;
static UP: number;
static EAST: number;
static NORTH: number;
static DOWN: number;
static WEST: number;
}

//net.minecraft.data.server.recipe.SingleItemRecipeJsonBuilder$SingleItemRecipeJsonProvider
class SingleItemRecipeJsonBuilder_SingleItemRecipeJsonProvider extends JObject, RecipeJsonProvider{
 serialize(json: JsonObject): void;
 getRecipeId(): Identifier;
 getAdvancementId(): Identifier;
 toAdvancementJson(): JsonObject;
 getSerializer(): RecipeSerializer;
}

//net.minecraft.world.event.GameEvent
class GameEvent extends JObject{
 toString(): string;
 getId(): string;
 getRange(): number;
 isIn(tag: TagKey): boolean;
 getRegistryEntry(): RegistryEntry_Reference;
}
class Static_GameEvent {
static register(id: string,range: number): GameEvent;
static register(id: string): GameEvent;
static BLOCK_ACTIVATE: GameEvent;
static BLOCK_ATTACH: GameEvent;
static BLOCK_CHANGE: GameEvent;
static BLOCK_CLOSE: GameEvent;
static BLOCK_DEACTIVATE: GameEvent;
static BLOCK_DESTROY: GameEvent;
static BLOCK_DETACH: GameEvent;
static BLOCK_OPEN: GameEvent;
static BLOCK_PLACE: GameEvent;
static CONTAINER_CLOSE: GameEvent;
static CONTAINER_OPEN: GameEvent;
static DRINK: GameEvent;
static EAT: GameEvent;
static ELYTRA_GLIDE: GameEvent;
static ENTITY_DAMAGE: GameEvent;
static ENTITY_DIE: GameEvent;
static ENTITY_DISMOUNT: GameEvent;
static ENTITY_INTERACT: GameEvent;
static ENTITY_MOUNT: GameEvent;
static ENTITY_PLACE: GameEvent;
static ENTITY_ROAR: GameEvent;
static ENTITY_SHAKE: GameEvent;
static EQUIP: GameEvent;
static EXPLODE: GameEvent;
static FLAP: GameEvent;
static FLUID_PICKUP: GameEvent;
static FLUID_PLACE: GameEvent;
static HIT_GROUND: GameEvent;
static INSTRUMENT_PLAY: GameEvent;
static ITEM_INTERACT_FINISH: GameEvent;
static ITEM_INTERACT_START: GameEvent;
static JUKEBOX_PLAY: GameEvent;
static JUKEBOX_STOP_PLAY: GameEvent;
static LIGHTNING_STRIKE: GameEvent;
static NOTE_BLOCK_PLAY: GameEvent;
static PRIME_FUSE: GameEvent;
static PROJECTILE_LAND: GameEvent;
static PROJECTILE_SHOOT: GameEvent;
static SCULK_SENSOR_TENDRILS_CLICKING: GameEvent;
static SHEAR: GameEvent;
static SHRIEK: GameEvent;
static SPLASH: GameEvent;
static STEP: GameEvent;
static SWIM: GameEvent;
static TELEPORT: GameEvent;
static RESONATE_1: GameEvent;
static RESONATE_2: GameEvent;
static RESONATE_3: GameEvent;
static RESONATE_4: GameEvent;
static RESONATE_5: GameEvent;
static RESONATE_6: GameEvent;
static RESONATE_7: GameEvent;
static RESONATE_8: GameEvent;
static RESONATE_9: GameEvent;
static RESONATE_10: GameEvent;
static RESONATE_11: GameEvent;
static RESONATE_12: GameEvent;
static RESONATE_13: GameEvent;
static RESONATE_14: GameEvent;
static RESONATE_15: GameEvent;
static DEFAULT_RANGE: number;
}

//net.minecraft.world.gen.feature.util.FeatureContext
class FeatureContext extends JObject{
 getFeature(): Optional;
 getOrigin(): BlockPos;
 getConfig(): FeatureConfig;
 getGenerator(): ChunkGenerator;
 getWorld(): StructureWorldAccess;
 getRandom(): Random;
}

//net.minecraft.entity.data.TrackedDataHandlerRegistry$2


//net.minecraft.entity.data.TrackedDataHandlerRegistry$3


//net.minecraft.entity.data.TrackedDataHandlerRegistry$4


//net.minecraft.entity.data.TrackedDataHandlerRegistry$5


//net.minecraft.client.particle.GlowParticle$WaxOnFactory
class GlowParticle_WaxOnFactory extends JObject, ParticleFactory{
 createParticle(defaultParticleType: DefaultParticleType,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
 createParticle(particleEffect: ParticleEffect,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
}

//net.minecraft.entity.data.TrackedDataHandlerRegistry$1


//net.minecraft.world.border.WorldBorder$StaticArea
class WorldBorder_StaticArea extends JObject, WorldBorder_Area{
 getSize(): number;
 getBoundNorth(): number;
 onMaxRadiusChanged(): void;
 getAreaInstance(): WorldBorder_Area;
 onCenterChanged(): void;
 getBoundWest(): number;
 getBoundEast(): number;
 getSizeLerpTime(): long;
 getStage(): WorldBorderStage;
 getBoundSouth(): number;
 getSizeLerpTarget(): number;
 getShrinkingSpeed(): number;
 asVoxelShape(): VoxelShape;
}

//net.minecraft.network.packet.s2c.play.SubtitleS2CPacket
class SubtitleS2CPacket extends JObject, Packet{
 apply(clientPlayPacketListener: ClientPlayPacketListener): void;
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
 getSubtitle(): Text;
}

//net.minecraft.client.world.ClientWorld$ClientEntityHandler
class ClientWorld_ClientEntityHandler extends JObject, EntityHandler{
 destroy(entity: Entity): void;
 destroy(entity: Object): void;
 create(entity: Object): void;
 create(entity: Entity): void;
 startTicking(entity: Entity): void;
 startTicking(entity: Object): void;
 updateLoadStatus(entity: Object): void;
 updateLoadStatus(entity: Entity): void;
 startTracking(entity: Object): void;
 startTracking(entity: Entity): void;
 stopTicking(entity: Object): void;
 stopTicking(entity: Entity): void;
 stopTracking(entity: Entity): void;
 stopTracking(entity: Object): void;
}

//net.minecraft.world.block.ChainRestrictedNeighborUpdater$SixWayEntry
class ChainRestrictedNeighborUpdater_SixWayEntry extends JObject, ChainRestrictedNeighborUpdater_Entry{
 update(world: World): boolean;
}

//net.minecraft.world.storage.ChunkDataList
class ChunkDataList extends JObject{
 isEmpty(): boolean;
 stream(): Stream;
 getChunkPos(): ChunkPos;
}

//net.minecraft.client.sound.SoundEngine$SourceSet
interface SoundEngine_SourceSet extends JObject{
 close(): void;
 release(source: Source): boolean;
 createSource(): Source;
 getMaxSourceCount(): number;
 getSourceCount(): number;
}

//net.minecraft.unused.packageinfo.PackageInfo7937
interface PackageInfo7937 extends JObject{
}

//net.minecraft.block.Degradable
interface Degradable extends JObject{
 getDegradationLevel(): Enum;
 getDegradationChanceMultiplier(): number;
 getDegradationResult(state: BlockState): Optional;
 tickDegradation(state: BlockState,world: ServerWorld,pos: BlockPos,random: Random): void;
 tryDegrade(state: BlockState,world: ServerWorld,pos: BlockPos,random: Random): void;
}
class Static_Degradable {
static method_34726(serverWorld: ServerWorld,blockPos: BlockPos,statex: BlockState): void;
static DEGRADING_RANGE: number;
}

//net.minecraft.nbt.NbtList$2


//net.minecraft.entity.data.TrackedDataHandlerRegistry$6


//net.minecraft.entity.data.TrackedDataHandlerRegistry$7


//net.minecraft.client.util.telemetry.TelemetryEventProperty$PropertyExporter
interface TelemetryEventProperty_PropertyExporter extends JObject{
 apply(container: TelemetryPropertyContainer,key: string,value: Object): void;
}

//net.minecraft.nbt.NbtList$1


//net.minecraft.world.biome.source.MultiNoiseBiomeSourceParameterList$Preset$BiomeSourceFunction
interface MultiNoiseBiomeSourceParameterList_Preset_BiomeSourceFunction extends JObject{
 apply(biomeEntryGetter: Function): MultiNoiseUtil_Entries;
}

//net.minecraft.village.TradeOffers$SellDyedArmorFactory
class TradeOffers_SellDyedArmorFactory extends JObject, TradeOffers_Factory{
 create(entity: Entity,random: Random): TradeOffer;
}
class Static_TradeOffers_SellDyedArmorFactory {
static getDye(random: Random): DyeItem;
}

//net.minecraft.entity.JumpingMount
interface JumpingMount extends JObject, Mount{
 stopJumping(): void;
 startJumping(height: number): void;
 canJump(): boolean;
 setJumpStrength(strength: number): void;
 getJumpCooldown(): number;
}

//net.minecraft.resource.ResourcePack$ResultConsumer
interface ResourcePack_ResultConsumer extends JObject, BiConsumer{
}

//net.minecraft.block.AmethystClusterBlock$1


//net.minecraft.loot.condition.RandomChanceWithLootingLootCondition
class RandomChanceWithLootingLootCondition extends JObject, LootCondition{
 test(context: Object): boolean;
 test(lootContext: LootContext): boolean;
 getType(): LootConditionType;
 getRequiredParameters(): Set;
}
class Static_RandomChanceWithLootingLootCondition {
static builder(chance: number,lootingMultiplier: number): LootCondition_Builder;
static method_952(f: number,g: number): LootCondition;
}

//net.minecraft.client.realms.gui.screen.ResetWorldInfo
class ResetWorldInfo extends JObject{
 getSeed(): string;
 shouldGenerateStructures(): boolean;
 getLevelType(): RealmsWorldGeneratorType;
}

//net.minecraft.entity.data.TrackedDataHandler$ImmutableHandler
interface TrackedDataHandler_ImmutableHandler extends JObject, TrackedDataHandler{
 copy(value: Object): Object;
}

//net.minecraft.server.network.ServerQueryNetworkHandler
class ServerQueryNetworkHandler extends JObject, ServerQueryPacketListener{
 isConnectionOpen(): boolean;
 onDisconnected(reason: Text): void;
 onRequest(packet: QueryRequestC2SPacket): void;
 onPing(packet: QueryPingC2SPacket): void;
}
class Static_ServerQueryNetworkHandler {
static REQUEST_HANDLED: Text;
}

//net.minecraft.world.event.listener.GameEventDispatchManager
class GameEventDispatchManager extends JObject{
 dispatch(event: GameEvent,emitterPos: Vec3d,emitter: GameEvent_Emitter): void;
}

//net.minecraft.world.gen.structure.JigsawStructure$1


//net.minecraft.server.command.DebugCommand$Tracer
class DebugCommand_Tracer extends JObject, CommandFunctionManager_Tracer, CommandOutput{
 shouldBroadcastConsoleToOps(): boolean;
 shouldReceiveFeedback(): boolean;
 sendMessage(message: Text): void;
 shouldTrackOutput(): boolean;
 traceFunctionCall(depth: number,fun: Identifier,size: number): void;
 traceError(depth: number,message: string): void;
 traceCommandEnd(depth: number,command: string,result: number): void;
 traceCommandStart(depth: number,command: string): void;
 cannotBeSilenced(): boolean;
}
class Static_DebugCommand_Tracer {
static MARGIN: number;
}

//net.minecraft.world.chunk.PalettedContainer$Counter
interface PalettedContainer_Counter extends JObject{
 accept(object: Object,count: number): void;
}

//net.minecraft.unused.packageinfo.PackageInfo7112
interface PackageInfo7112 extends JObject{
}

//net.minecraft.util.WinNativeModuleUtil$NativeModuleInfo
class WinNativeModuleUtil_NativeModuleInfo extends JObject{
 toString(): string;
 fileDescription: string;
 fileVersion: string;
 companyName: string;
}

//net.minecraft.command.argument.GameProfileArgumentType$SelectorBacked
class GameProfileArgumentType_SelectorBacked extends JObject, GameProfileArgumentType_GameProfileArgument{
 getNames(serverCommandSource: ServerCommandSource): Collection;
}

//net.minecraft.network.listener.ClientQueryPacketListener
interface ClientQueryPacketListener extends JObject, PacketListener{
 onPong(packet: QueryPongS2CPacket): void;
 onResponse(packet: QueryResponseS2CPacket): void;
}

//net.minecraft.client.render.chunk.ChunkOcclusionData
class ChunkOcclusionData extends JObject{
 toString(): string;
 fill(visible: boolean): void;
 isVisibleThrough(from: Direction,to: Direction): boolean;
 addOpenEdgeFaces(faces: Set): void;
 setVisibleThrough(from: Direction,to: Direction,visible: boolean): void;
}
class Static_ChunkOcclusionData {
static DIRECTION_COUNT: number;
}

//net.minecraft.entity.Attackable
interface Attackable extends JObject{
 getLastAttacker(): LivingEntity;
}

//net.minecraft.client.particle.RedDustParticle$Factory
class RedDustParticle_Factory extends JObject, ParticleFactory{
 createParticle(dustParticleEffect: DustParticleEffect,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
 createParticle(particleEffect: ParticleEffect,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
}

//net.minecraft.loot.condition.SurvivesExplosionLootCondition$Serializer
class SurvivesExplosionLootCondition_Serializer extends JObject, JsonSerializer{
 fromJson(json: JsonObject,context: JsonDeserializationContext): Object;
 fromJson(jsonObject: JsonObject,jsonDeserializationContext: JsonDeserializationContext): SurvivesExplosionLootCondition;
 toJson(jsonObject: JsonObject,survivesExplosionLootCondition: SurvivesExplosionLootCondition,jsonSerializationContext: JsonSerializationContext): void;
 toJson(json: JsonObject,object: Object,context: JsonSerializationContext): void;
}

//net.minecraft.server.dedicated.DedicatedServerWatchdog
class DedicatedServerWatchdog extends JObject, Runnable{
 run(): void;
}
class Static_DedicatedServerWatchdog {
static method_31376(world: ServerWorld): string;
static LOGGER: Logger;
static field_29664: long;
static field_29665: number;
}

//net.minecraft.test.XmlReportingTestCompletionListener
class XmlReportingTestCompletionListener extends JObject, TestCompletionListener{
 onTestPassed(test: GameTestState): void;
 onTestFailed(test: GameTestState): void;
 onStopped(): void;
 saveReport(file: File): void;
}

//net.minecraft.world.GameRules$Type
class GameRules_Type extends JObject{
 accept(consumer: GameRules_Visitor,key: GameRules_Key): void;
 argument(name: string): RequiredArgumentBuilder;
 createRule(): GameRules_Rule;
}

//net.minecraft.server.QueueingWorldGenerationProgressListener
class QueueingWorldGenerationProgressListener extends JObject, WorldGenerationProgressListener{
 start(): void;
 start(spawnPos: ChunkPos): void;
 stop(): void;
 setChunkStatus(pos: ChunkPos,status: ChunkStatus): void;
}
class Static_QueueingWorldGenerationProgressListener {
static create(progressListener: WorldGenerationProgressListener,executor: Executor): QueueingWorldGenerationProgressListener;
}

//net.minecraft.structure.MineshaftGenerator$1


//net.minecraft.predicate.entity.LocationPredicate
class LocationPredicate extends JObject{
 test(world: ServerWorld,x: number,y: number,z: number): boolean;
 toJson(): JsonElement;
}
class Static_LocationPredicate {
static y(y: NumberRange_FloatRange): LocationPredicate;
static feature(feature: RegistryKey): LocationPredicate;
static dimension(dimension: RegistryKey): LocationPredicate;
static method_28481(identifier: Identifier): RegistryKey;
static method_28480(jsonObject: JsonObject,json: JsonElement): void;
static method_41038(identifier: Identifier): RegistryKey;
static biome(biome: RegistryKey): LocationPredicate;
static fromJson(json: JsonElement): LocationPredicate;
static LOGGER: Logger;
static ANY: LocationPredicate;
}

//net.minecraft.world.gen.feature.UnderwaterMagmaFeatureConfig
class UnderwaterMagmaFeatureConfig extends JObject, FeatureConfig{
 floorSearchRange: number;
 placementRadiusAroundFloor: number;
 placementProbabilityPerValidPosition: number;
}
class Static_UnderwaterMagmaFeatureConfig {
static method_33772(config: UnderwaterMagmaFeatureConfig): Float;
static method_33773(config: UnderwaterMagmaFeatureConfig): Integer;
static method_33771(instance: RecordCodecBuilder_Instance): App;
static method_33774(config: UnderwaterMagmaFeatureConfig): Integer;
static CODEC: Codec;
}

//net.minecraft.client.particle.BlockDustParticle$Factory
class BlockDustParticle_Factory extends JObject, ParticleFactory{
 createParticle(blockStateParticleEffect: BlockStateParticleEffect,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
 createParticle(particleEffect: ParticleEffect,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
}

//net.minecraft.world.chunk.ChunkToNibbleArrayMap
class ChunkToNibbleArrayMap extends JObject{
 get(chunkPos: long): ChunkNibbleArray;
 put(pos: long,data: ChunkNibbleArray): void;
 containsKey(chunkPos: long): boolean;
 copy(): ChunkToNibbleArrayMap;
 clearCache(): void;
 disableCache(): void;
 removeChunk(chunkPos: long): ChunkNibbleArray;
 replaceWithCopy(pos: long): ChunkNibbleArray;
}
class Static_ChunkToNibbleArrayMap {
static field_31705: number;
}

//net.minecraft.client.gui.screen.BackupPromptScreen$Callback
interface BackupPromptScreen_Callback extends JObject{
 proceed(backup: boolean,eraseCache: boolean): void;
}

//net.minecraft.command.argument.ScoreboardCriterionArgumentType
class ScoreboardCriterionArgumentType extends JObject, ArgumentType{
 parse(reader: StringReader): Object;
 parse(stringReader: StringReader): ScoreboardCriterion;
 getExamples(): Collection;
 listSuggestions(context: CommandContext,builder: SuggestionsBuilder): CompletableFuture;
 getStatName(stat: StatType,value: Object): string;
}
class Static_ScoreboardCriterionArgumentType {
static scoreboardCriterion(): ScoreboardCriterionArgumentType;
static getCriterion(context: CommandContext,name: string): ScoreboardCriterion;
static method_17949(stringReader: StringReader,i: number,string: string): CommandSyntaxException;
static method_9401(name: Object): Message;
static EXAMPLES: Collection;
static INVALID_CRITERION_EXCEPTION: DynamicCommandExceptionType;
}

//net.minecraft.structure.StructureTemplate
class StructureTemplate extends JObject{
 getSize(): Vec3i;
 place(world: ServerWorldAccess,pos: BlockPos,pivot: BlockPos,placementData: StructurePlacementData,random: Random,flags: number): boolean;
 offsetByTransformedSize(pos: BlockPos,mirror: BlockMirror,rotation: BlockRotation): BlockPos;
 calculateBoundingBox(placementData: StructurePlacementData,pos: BlockPos): BlockBox;
 calculateBoundingBox(pos: BlockPos,rotation: BlockRotation,pivot: BlockPos,mirror: BlockMirror): BlockBox;
 setAuthor(author: string): void;
 saveFromWorld(world: World,start: BlockPos,dimensions: Vec3i,includeEntities: boolean,ignoredBlock: Block): void;
 getAuthor(): string;
 getInfosForBlock(pos: BlockPos,placementData: StructurePlacementData,block: Block,transformed: boolean): ObjectArrayList;
 getInfosForBlock(pos: BlockPos,placementData: StructurePlacementData,block: Block): List;
 transformBox(placementData1: StructurePlacementData,pos1: BlockPos,placementData2: StructurePlacementData,pos2: BlockPos): BlockPos;
 getRotatedSize(rotation: BlockRotation): Vec3i;
 readNbt(blockLookup: RegistryEntryLookup,nbt: NbtCompound): void;
 writeNbt(nbt: NbtCompound): NbtCompound;
}
class Static_StructureTemplate {
static transform(placementData: StructurePlacementData,pos: BlockPos): BlockPos;
static process(world: ServerWorldAccess,pos: BlockPos,pivot: BlockPos,placementData: StructurePlacementData,infos: List): List;
static getEntity(world: ServerWorldAccess,nbt: NbtCompound): Optional;
static applyTransformedOffset(pos: BlockPos,mirror: BlockMirror,rotation: BlockRotation,offsetX: number,offsetZ: number): BlockPos;
static combineSorted(fullBlocks: List,blocksWithNbt: List,otherBlocks: List): List;
static categorize(blockInfo: StructureTemplate_StructureBlockInfo,fullBlocks: List,blocksWithNbt: List,otherBlocks: List): void;
static method_16185(blockInfo: StructureTemplate_StructureBlockInfo): number;
static method_28056(blockInfo: StructureTemplate_StructureBlockInfo): number;
static method_28053(blockInfo: StructureTemplate_StructureBlockInfo): number;
static method_15163(entity: Entity): boolean;
static transformAround(pos: BlockPos,mirror: BlockMirror,rotation: BlockRotation,pivot: BlockPos): BlockPos;
static transformAround(point: Vec3d,mirror: BlockMirror,rotation: BlockRotation,pivot: BlockPos): Vec3d;
static updateCorner(world: WorldAccess,flags: number,set: VoxelSet,startX: number,startY: number,startZ: number): void;
static method_17917(blockRotation: BlockRotation,blockMirror: BlockMirror,vec3d: Vec3d,bl: boolean,serverWorldAccess: ServerWorldAccess,nbtCompound: NbtCompound,entity: Entity): void;
static method_15173(i: number,j: number,k: number,worldAccess: WorldAccess,l: number,direction: Direction,x: number,y: number,z: number): void;
static createBox(pos: BlockPos,rotation: BlockRotation,pivot: BlockPos,mirror: BlockMirror,dimensions: Vec3i): BlockBox;
static PALETTE_KEY: string;
static PALETTES_KEY: string;
static ENTITIES_KEY: string;
static BLOCKS_KEY: string;
static BLOCKS_POS_KEY: string;
static BLOCKS_STATE_KEY: string;
static BLOCKS_NBT_KEY: string;
static ENTITIES_POS_KEY: string;
static ENTITIES_BLOCK_POS_KEY: string;
static ENTITIES_NBT_KEY: string;
static SIZE_KEY: string;
}

//net.minecraft.util.thread.TaskQueue$Prioritized
class TaskQueue_Prioritized extends JObject, TaskQueue{
 add(prioritizedTask: TaskQueue_PrioritizedTask): boolean;
 add(message: Object): boolean;
 isEmpty(): boolean;
 poll(): Runnable;
 poll(): Object;
 getSize(): number;
}

//net.minecraft.client.item.TooltipData
interface TooltipData extends JObject{
}

//net.minecraft.command.argument.DefaultPosArgument
class DefaultPosArgument extends JObject, PosArgument{
 equals(o: Object): boolean;
 hashCode(): number;
 toAbsolutePos(source: ServerCommandSource): Vec3d;
 isZRelative(): boolean;
 isXRelative(): boolean;
 isYRelative(): boolean;
 toAbsoluteRotation(source: ServerCommandSource): Vec2f;
}
class Static_DefaultPosArgument {
static zero(): DefaultPosArgument;
static parse(reader: StringReader): DefaultPosArgument;
static parse(reader: StringReader,centerIntegers: boolean): DefaultPosArgument;
static absolute(x: number,y: number,z: number): DefaultPosArgument;
static absolute(vec: Vec2f): DefaultPosArgument;
}

//net.minecraft.world.gen.feature.HugeFungusFeatureConfig
class HugeFungusFeatureConfig extends JObject, FeatureConfig{
 validBaseBlock: BlockState;
 stemState: BlockState;
 hatState: BlockState;
 decorationState: BlockState;
 replaceableBlocks: BlockPredicate;
 planted: boolean;
}
class Static_HugeFungusFeatureConfig {
static method_28631(instance: RecordCodecBuilder_Instance): App;
static method_28632(config: HugeFungusFeatureConfig): BlockState;
static method_28635(config: HugeFungusFeatureConfig): BlockState;
static method_28630(config: HugeFungusFeatureConfig): Boolean;
static method_28634(config: HugeFungusFeatureConfig): BlockState;
static method_28633(config: HugeFungusFeatureConfig): BlockState;
static method_51528(config: HugeFungusFeatureConfig): BlockPredicate;
static CODEC: Codec;
}

//net.minecraft.client.report.log.ReceivedMessage
interface ReceivedMessage extends JObject, ChatLogEntry{
 getContent(): Text;
 getNarration(): Text;
 isSentFrom(uuid: UUID): boolean;
}
class Static_ReceivedMessage {
static of(gameProfile: GameProfile,message: SignedMessage,trustStatus: MessageTrustStatus): ReceivedMessage_ChatMessage;
static of(message: Text,timestamp: Instant): ReceivedMessage_GameMessage;
}

//net.minecraft.client.render.debug.GameTestDebugRenderer
class GameTestDebugRenderer extends JObject, DebugRenderer_Renderer{
 clear(): void;
 render(matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,cameraX: number,cameraY: number,cameraZ: number): void;
 addMarker(pos: BlockPos,color: number,message: string,duration: number): void;
}
class Static_GameTestDebugRenderer {
static method_23110(l: long,entry: Map_Entry): boolean;
static MARKER_BOX_SIZE: number;
}

//net.minecraft.command.argument.RegistryEntryArgumentType$Serializer$Properties
class RegistryEntryArgumentType_Serializer_Properties extends JObject, ArgumentSerializer_ArgumentTypeProperties{
 createType(commandRegistryAccess: CommandRegistryAccess): ArgumentType;
 createType(commandRegistryAccess: CommandRegistryAccess): RegistryEntryArgumentType;
 getSerializer(): ArgumentSerializer;
}

//net.minecraft.util.profiler.SamplerFactory
class SamplerFactory extends JObject{
 createSamplers(profilerSupplier: Supplier): Set;
}
class Static_SamplerFactory {
static createSampler(profilerSupplier: Supplier,id: string,type: SampleType): Sampler;
static method_37197(supplier: Supplier,target: Pair): Sampler;
static method_37195(supplier: Supplier,string: string): number;
}

//net.minecraft.structure.RuinedPortalStructurePiece$Properties
class RuinedPortalStructurePiece_Properties extends JObject{
 cold: boolean;
 mossiness: number;
 airPocket: boolean;
 overgrown: boolean;
 vines: boolean;
 replaceWithBlackstone: boolean;
}
class Static_RuinedPortalStructurePiece_Properties {
static method_28957(properties: RuinedPortalStructurePiece_Properties): Boolean;
static method_28955(properties: RuinedPortalStructurePiece_Properties): Boolean;
static method_28954(properties: RuinedPortalStructurePiece_Properties): Boolean;
static method_28951(instance: RecordCodecBuilder_Instance): App;
static method_28952(properties: RuinedPortalStructurePiece_Properties): Boolean;
static method_28956(properties: RuinedPortalStructurePiece_Properties): Float;
static method_28953(properties: RuinedPortalStructurePiece_Properties): Boolean;
static CODEC: Codec;
}

//net.minecraft.command.argument.CommandFunctionArgumentType
class CommandFunctionArgumentType extends JObject, ArgumentType{
 parse(reader: StringReader): Object;
 parse(stringReader: StringReader): CommandFunctionArgumentType_FunctionArgument;
 getExamples(): Collection;
}
class Static_CommandFunctionArgumentType {
static getFunction(context: CommandContext,id: Identifier): CommandFunction;
static commandFunction(): CommandFunctionArgumentType;
static method_17959(identifier: Identifier): CommandSyntaxException;
static getFunctionOrTag(context: CommandContext,name: string): Pair;
static method_9765(id: Object): Message;
static getFunctionTag(context: CommandContext,id: Identifier): Collection;
static getFunctions(context: CommandContext,name: string): Collection;
static method_9762(id: Object): Message;
static EXAMPLES: Collection;
static UNKNOWN_FUNCTION_TAG_EXCEPTION: DynamicCommandExceptionType;
static UNKNOWN_FUNCTION_EXCEPTION: DynamicCommandExceptionType;
}

//net.minecraft.command.StorageDataObject
class StorageDataObject extends JObject, DataCommandObject{
 setNbt(nbt: NbtCompound): void;
 getNbt(): NbtCompound;
 feedbackModify(): Text;
 feedbackGet(path: NbtPathArgumentType_NbtPath,scale: number,result: number): Text;
 feedbackQuery(element: NbtElement): Text;
}
class Static_StorageDataObject {
static of(context: CommandContext): DataCommandStorage;
static method_22841(argumentName: string): DataCommand_ObjectType;
static method_22840(context: CommandContext,builder: SuggestionsBuilder): CompletableFuture;
static SUGGESTION_PROVIDER: SuggestionProvider;
static TYPE_FACTORY: Function;
}

//net.minecraft.client.resource.language.I18n
class I18n extends JObject{
}
class Static_I18n {
static setLanguage(language: Language): void;
static translate(key: string,args: Object[]): string;
static hasTranslation(key: string): boolean;
static language: Language;
}

//net.minecraft.MinecraftVersion
class MinecraftVersion extends JObject, GameVersion{
 getName(): string;
 getId(): string;
 getProtocolVersion(): number;
 isStable(): boolean;
 getResourceVersion(type: ResourceType): number;
 getBuildTime(): Date;
 getSaveVersion(): SaveVersion;
}
class Static_MinecraftVersion {
static create(): GameVersion;
static LOGGER: Logger;
static CURRENT: GameVersion;
}

//net.minecraft.entity.ai.brain.task.LoseJobOnSiteLossTask
class LoseJobOnSiteLossTask extends JObject{
}
class Static_LoseJobOnSiteLossTask {
static create(): Task;
static method_47038(world: ServerWorld,entity: VillagerEntity,time: long): boolean;
static method_47040(jobSite: MemoryQueryResult): TaskRunnable;
static method_47039(context: TaskTriggerer_TaskContext): App;
}

//net.minecraft.client.render.entity.feature.VillagerResourceMetadata
class VillagerResourceMetadata extends JObject{
 getHatType(): VillagerResourceMetadata_HatType;
}
class Static_VillagerResourceMetadata {
static READER: VillagerResourceMetadataReader;
static KEY: string;
}

//net.minecraft.block.CocoaBlock$1


//net.minecraft.util.crash.CrashReport
class CrashReport extends JObject{
 getStackTrace(): string;
 getCause(): Throwable;
 getMessage(): string;
 getFile(): File;
 addElement(name: string): CrashReportSection;
 addElement(name: string,ignoredStackTraceCallCount: number): CrashReportSection;
 getSystemDetailsSection(): SystemDetails;
 asString(): string;
 getCauseAsString(): string;
 addStackTrace(crashReportBuilder: StringBuilder): void;
 writeToFile(file: File): boolean;
}
class Static_CrashReport {
static create(cause: Throwable,title: string): CrashReport;
static generateWittyComment(): string;
static initCrashReport(): void;
static LOGGER: Logger;
static DATE_TIME_FORMATTER: DateTimeFormatter;
}

//net.minecraft.world.CommandBlockExecutor
class CommandBlockExecutor extends JObject, CommandOutput{
 execute(world: World): boolean;
 getSource(): ServerCommandSource;
 shouldBroadcastConsoleToOps(): boolean;
 shouldReceiveFeedback(): boolean;
 sendMessage(message: Text): void;
 getCommand(): string;
 shouldTrackOutput(): boolean;
 setTrackOutput(trackOutput: boolean): void;
 setLastOutput(lastOutput: Text): void;
 setCommand(command: string): void;
 getCustomName(): Text;
 isTrackingOutput(): boolean;
 setCustomName(name: Text): void;
 interact(player: PlayerEntity): ActionResult;
 getLastOutput(): Text;
 setSuccessCount(successCount: number): void;
 getSuccessCount(): number;
 isEditable(): boolean;
 getWorld(): ServerWorld;
 markDirty(): void;
 getPos(): Vec3d;
 readNbt(nbt: NbtCompound): void;
 writeNbt(nbt: NbtCompound): NbtCompound;
}
class Static_CommandBlockExecutor {
static DATE_FORMAT: SimpleDateFormat;
static DEFAULT_NAME: Text;
}

//net.minecraft.util.profiler.Profiler
interface Profiler extends JObject{
 swap(locationGetter: Supplier): void;
 swap(location: string): void;
 push(locationGetter: Supplier): void;
 push(location: string): void;
 pop(): void;
 visit(marker: string): void;
 visit(marker: string,num: number): void;
 visit(markerGetter: Supplier): void;
 visit(markerGetter: Supplier,num: number): void;
 markSampleType(type: SampleType): void;
 endTick(): void;
 startTick(): void;
}
class Static_Profiler {
static union(a: Profiler,b: Profiler): Profiler;
static ROOT_NAME: string;
}

//net.minecraft.data.report.RegistryDumpProvider
class RegistryDumpProvider extends JObject, DataProvider{
 getName(): string;
 run(writer: DataWriter): CompletableFuture;
}
class Static_RegistryDumpProvider {
static method_40564(registry: Registry,jsonObject: JsonObject,entry: RegistryEntry_Reference): void;
static method_17174(jsonObject: JsonObject,entry: RegistryEntry_Reference): void;
static toJson(registry: Registry): JsonElement;
}

//net.minecraft.entity.ai.brain.task.GoTowardsLookTargetTask
class GoTowardsLookTargetTask extends JObject{
}
class Static_GoTowardsLookTargetTask {
static create(predicate: Predicate,speed: Function,completionRange: number): SingleTickTask;
static create(speed: number,completionRange: number): SingleTickTask;
static method_47110(predicate: Predicate,fun: Function,i: number,context: TaskTriggerer_TaskContext): App;
static method_47105(f: number,entity: LivingEntity): Float;
static method_47106(entity: LivingEntity): boolean;
static method_47107(predicate: Predicate,taskContext: TaskTriggerer_TaskContext,fun: Function,i: number,walkTarget: MemoryQueryResult,lookTarget: MemoryQueryResult): TaskRunnable;
static method_47108(predicate: Predicate,memoryQueryResult: MemoryQueryResult,taskContext: TaskTriggerer_TaskContext,memoryQueryResult2: MemoryQueryResult,fun: Function,i: number,world: ServerWorld,entity: LivingEntity,time: long): boolean;
}

//net.minecraft.data.client.ModelIds
class ModelIds extends JObject{
}
class Static_ModelIds {
static getMinecraftNamespacedBlock(name: string): Identifier;
static getMinecraftNamespacedItem(name: string): Identifier;
static getBlockModelId(block: Block): Identifier;
static getBlockSubModelId(block: Block,suffix: string): Identifier;
static getItemModelId(item: Item): Identifier;
static method_46197(string: string,path: string): string;
static getItemSubModelId(item: Item,suffix: string): Identifier;
static method_46196(string: string,path: string): string;
}

//net.minecraft.registry.RegistryBuilder
class RegistryBuilder extends JObject{
 createWrapperLookup(baseRegistryManager: DynamicRegistryManager): RegistryWrapper_WrapperLookup;
 createWrapperLookup(baseRegistryManager: DynamicRegistryManager,wrapperLookup: RegistryWrapper_WrapperLookup): RegistryWrapper_WrapperLookup;
 addRegistry(registryRef: RegistryKey,bootstrapFunction: RegistryBuilder_BootstrapFunction): RegistryBuilder;
 addRegistry(registryRef: RegistryKey,lifecycle: Lifecycle,bootstrapFunction: RegistryBuilder_BootstrapFunction): RegistryBuilder;
}
class Static_RegistryBuilder {
static method_46785(registries: RegistryBuilder_Registries,info: RegistryBuilder_RegistryInfo): RegistryWrapper_Impl;
static method_46786(registries: RegistryBuilder_Registries,registry: RegistryBuilder_RegistryInfo): void;
static toLookup(wrapper: RegistryWrapper_Impl): RegistryEntryLookup;
static method_46783(entry: DynamicRegistryManager_Entry): RegistryWrapper_Impl;
static method_49353(map: Map,registry: RegistryBuilder_InitializedRegistry): void;
static method_46779(entry: DynamicRegistryManager_Entry): RegistryWrapper_Impl;
static method_49352(map: Map,registry: RegistryBuilder_InitializedRegistry): void;
static method_46782(registries: RegistryBuilder_Registries,info: RegistryBuilder_RegistryInfo): RegistryBuilder_InitializedRegistry;
}

//net.minecraft.util.ZipCompressor
class ZipCompressor extends JObject, Closeable{
 write(target: Path,content: string): void;
 close(): void;
 copy(target: Path,source: File): void;
 copyAll(source: Path): void;
}
class Static_ZipCompressor {
static method_37164(path: Path,attributes: BasicFileAttributes): boolean;
static LOGGER: Logger;
}

//net.minecraft.entity.ai.pathing.EntityNavigation
class EntityNavigation extends JObject{
 stop(): void;
 tick(): void;
 getNodeReachProximity(): number;
 setRangeMultiplier(rangeMultiplier: number): void;
 setSpeed(speed: number): void;
 getTargetPos(): BlockPos;
 recalculatePath(): void;
 getCurrentPath(): Path;
 startMovingTo(x: number,y: number,z: number,speed: number): boolean;
 startMovingTo(entity: Entity,speed: number): boolean;
 isIdle(): boolean;
 findPathToAny(positions: Stream,distance: number): Path;
 startMovingAlong(path: Path,speed: number): boolean;
 isFollowingPath(): boolean;
 canJumpToNext(nodeType: PathNodeType): boolean;
 getNodeMaker(): PathNodeMaker;
 isNearPathStartPos(): boolean;
 canSwim(): boolean;
 setCanSwim(canSwim: boolean): void;
 isValidPosition(pos: BlockPos): boolean;
 findPathTo(x: number,y: number,z: number,distance: number): Path;
 findPathTo(positions: Set,distance: number): Path;
 findPathTo(target: BlockPos,distance: number): Path;
 findPathTo(target: BlockPos,minDistance: number,maxDistance: number): Path;
 findPathTo(entity: Entity,distance: number): Path;
 shouldRecalculatePath(pos: BlockPos): boolean;
 resetRangeMultiplier(): void;
}
class Static_EntityNavigation {
static doesNotCollide(entity: MobEntity,startPos: Vec3d,entityPos: Vec3d,includeFluids: boolean): boolean;
static RECALCULATE_COOLDOWN: number;
static field_41545: number;
static field_41546: number;
}

//net.minecraft.command.argument.NumberRangeArgumentType
interface NumberRangeArgumentType extends JObject, ArgumentType{
}
class Static_NumberRangeArgumentType {
static intRange(): NumberRangeArgumentType_IntRangeArgumentType;
static floatRange(): NumberRangeArgumentType_FloatRangeArgumentType;
}

//net.minecraft.util.math.random.Random
interface Random extends JObject{
 split(): Random;
 skip(count: number): void;
 nextDouble(): number;
 nextInt(bound: number): number;
 nextInt(): number;
 nextLong(): long;
 nextBoolean(): boolean;
 nextFloat(): number;
 nextGaussian(): number;
 setSeed(seed: long): void;
 nextBetweenExclusive(min: number,max: number): number;
 nextBetween(min: number,max: number): number;
 nextTriangular(mode: number,deviation: number): number;
 nextSplitter(): RandomSplitter;
}
class Static_Random {
static create(): Random;
static create(seed: long): Random;
static createThreadSafe(): Random;
static createLocal(): Random;
static field_38930: number;
}

//net.minecraft.client.item.ModelPredicateProviderRegistry
class ModelPredicateProviderRegistry extends JObject{
}
class Static_ModelPredicateProviderRegistry {
static get(item: Item,id: Identifier): ModelPredicateProvider;
static register(item: Item,id: Identifier,provider: ClampedModelPredicateProvider): void;
static register(id: Identifier,provider: ClampedModelPredicateProvider): ClampedModelPredicateProvider;
static method_27885(stack: ItemStack,world: ClientWorld,entity: LivingEntity,seed: number): number;
static method_27886(stack: ItemStack,world: ClientWorld,entity: LivingEntity,seed: number): number;
static method_27887(stack: ItemStack,world: ClientWorld,entity: LivingEntity,seed: number): number;
static method_43219(world: ClientWorld,stack: ItemStack,entity: Entity): GlobalPos;
static method_43220(world: ClientWorld,stack: ItemStack,entity: Entity): GlobalPos;
static method_27884(stack: ItemStack,world: ClientWorld,entity: LivingEntity,seed: number): number;
static method_27877(key: Item): Map;
static method_35803(stack: ItemStack,world: ClientWorld,entity: LivingEntity,seed: number): number;
static method_27888(stack: ItemStack,world: ClientWorld,entity: LivingEntity,seed: number): number;
static method_27883(stack: ItemStack,world: ClientWorld,entity: LivingEntity,seed: number): number;
static method_43611(stack: ItemStack,world: ClientWorld,entity: LivingEntity,seed: number): number;
static method_27880(stack: ItemStack,world: ClientWorld,entity: LivingEntity,seed: number): number;
static method_27882(stack: ItemStack,world: ClientWorld,entity: LivingEntity,seed: number): number;
static method_27891(stack: ItemStack,world: ClientWorld,entity: LivingEntity,seed: number): number;
static method_48484(stack: ItemStack,world: ClientWorld,entity: LivingEntity,seed: number): number;
static method_27890(stack: ItemStack,world: ClientWorld,entity: LivingEntity,seed: number): number;
static method_27892(stack: ItemStack,world: ClientWorld,entity: LivingEntity,seed: number): number;
static method_27889(stack: ItemStack,world: ClientWorld,entity: LivingEntity,seed: number): number;
static method_27893(stack: ItemStack,world: ClientWorld,entity: LivingEntity,seed: number): number;
static method_27894(stack: ItemStack,world: ClientWorld,entity: LivingEntity,seed: number): number;
static method_49351(stack: ItemStack,world: ClientWorld,entity: LivingEntity,seed: number): number;
static method_27895(stack: ItemStack,world: ClientWorld,entity: LivingEntity,seed: number): number;
static method_32202(stack: ItemStack,world: ClientWorld,entity: LivingEntity,seed: number): number;
static registerCustomModelData(provider: ModelPredicateProvider): void;
static GLOBAL: Map;
static CUSTOM_MODEL_DATA_KEY: string;
static DAMAGED_ID: Identifier;
static DAMAGE_ID: Identifier;
static DAMAGED_PROVIDER: ClampedModelPredicateProvider;
static DAMAGE_PROVIDER: ClampedModelPredicateProvider;
static ITEM_SPECIFIC: Map;
}

//net.minecraft.client.gui.hud.InGameHud
class InGameHud extends JObject{
 clear(): void;
 tick(paused: boolean): void;
 render(context: DrawContext,tickDelta: number): void;
 getTextRenderer(): TextRenderer;
 renderDemoTimer(context: DrawContext): void;
 renderMountJumpBar(mount: JumpingMount,context: DrawContext,x: number): void;
 setDefaultTitleFade(): void;
 renderExperienceBar(context: DrawContext,x: number): void;
 renderHeldItemTooltip(context: DrawContext): void;
 setRecordPlayingOverlay(description: Text): void;
 setCanShowChatDisabledScreen(canShowChatDisabledScreen: boolean): void;
 shouldShowChatDisabledScreen(): boolean;
 getTicks(): number;
 setOverlayMessage(message: Text,tinted: boolean): void;
 getChatHud(): ChatHud;
 setSubtitle(subtitle: Text): void;
 clearTitle(): void;
 resetDebugHudChunk(): void;
 setTitleTicks(fadeInTicks: number,stayTicks: number,fadeOutTicks: number): void;
 getBossBarHud(): BossBarHud;
 getSpectatorHud(): SpectatorHud;
 getPlayerListHud(): PlayerListHud;
 setTitle(title: Text): void;
 vignetteDarkness: number;
}
class Static_InGameHud {
static method_1751(score: ScoreboardPlayerScore): boolean;
static method_18620(drawContext: DrawContext,f: number,i: number,j: number,sprite: Sprite): void;
static VIGNETTE_TEXTURE: Identifier;
static WIDGETS_TEXTURE: Identifier;
static PUMPKIN_BLUR: Identifier;
static SPYGLASS_SCOPE: Identifier;
static POWDER_SNOW_OUTLINE: Identifier;
static ICONS: Identifier;
static DEMO_EXPIRED_MESSAGE: Text;
static SAVING_LEVEL_TEXT: Text;
static WHITE: number;
static field_32168: number;
static field_32169: number;
static field_32170: number;
static SCOREBOARD_JOINER: string;
static field_32172: number;
static field_33942: number;
static field_33943: number;
static field_35431: number;
}

//net.minecraft.client.render.block.entity.BannerBlockEntityRenderer
class BannerBlockEntityRenderer extends JObject, BlockEntityRenderer{
 render(entity: BlockEntity,tickDelta: number,matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,light: number,overlay: number): void;
 render(bannerBlockEntity: BannerBlockEntity,f: number,matrixStack: MatrixStack,vertexConsumerProvider: VertexConsumerProvider,i: number,j: number): void;
}
class Static_BannerBlockEntityRenderer {
static getTexturedModelData(): TexturedModelData;
static method_43789(modelPart: ModelPart,matrixStack: MatrixStack,vertexConsumerProvider: VertexConsumerProvider,i: number,j: number,fs: number[],sprite: SpriteIdentifier): void;
static method_43790(bl: boolean,key: RegistryKey): SpriteIdentifier;
static renderCanvas(matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,light: number,overlay: number,canvas: ModelPart,baseSprite: SpriteIdentifier,isBanner: boolean,patterns: List): void;
static renderCanvas(matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,light: number,overlay: number,canvas: ModelPart,baseSprite: SpriteIdentifier,isBanner: boolean,patterns: List,glint: boolean): void;
static WIDTH: number;
static HEIGHT: number;
static ROTATIONS: number;
static BANNER: string;
static PILLAR: string;
static CROSSBAR: string;
}

//net.minecraft.loot.condition.ReferenceLootCondition$Serializer
class ReferenceLootCondition_Serializer extends JObject, JsonSerializer{
 fromJson(json: JsonObject,context: JsonDeserializationContext): Object;
 fromJson(jsonObject: JsonObject,jsonDeserializationContext: JsonDeserializationContext): ReferenceLootCondition;
 toJson(jsonObject: JsonObject,referenceLootCondition: ReferenceLootCondition,jsonSerializationContext: JsonSerializationContext): void;
 toJson(json: JsonObject,object: Object,context: JsonSerializationContext): void;
}

//net.minecraft.client.texture.DynamicTexture
interface DynamicTexture extends JObject{
 save(id: Identifier,path: Path): void;
}

//net.minecraft.client.particle.SoulParticle$SculkSoulFactory
class SoulParticle_SculkSoulFactory extends JObject, ParticleFactory{
 createParticle(defaultParticleType: DefaultParticleType,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
 createParticle(particleEffect: ParticleEffect,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
}

//net.minecraft.util.logging.UncaughtExceptionHandler
class UncaughtExceptionHandler extends JObject, Thread_UncaughtExceptionHandler{
 uncaughtException(thread: Thread,throwable: Throwable): void;
}

//net.minecraft.client.gui.screen.advancement.AdvancementWidget
class AdvancementWidget extends JObject{
 getWidth(): number;
 addChild(widget: AdvancementWidget): void;
 getX(): number;
 getY(): number;
 renderWidgets(context: DrawContext,x: number,y: number): void;
 renderLines(context: DrawContext,x: number,y: number,border: boolean): void;
 addToTree(): void;
 shouldRender(originX: number,originY: number,mouseX: number,mouseY: number): boolean;
 drawTooltip(context: DrawContext,originX: number,originY: number,alpha: number,x: number,y: number): void;
 setProgress(progress: AdvancementProgress): void;
}
class Static_AdvancementWidget {
static getMaxWidth(textHandler: TextHandler,lines: List): number;
static WIDGETS_TEXTURE: Identifier;
static field_32286: number;
static field_32287: number;
static field_32288: number;
static field_32289: number;
static ICON_OFFSET_X: number;
static ICON_OFFSET_Y: number;
static ICON_SIZE: number;
static field_32293: number;
static field_32294: number;
static TITLE_OFFSET_X: number;
static TITLE_OFFSET_Y: number;
static TITLE_MAX_WIDTH: number;
static SPLIT_OFFSET_CANDIDATES: number[];
}

//net.minecraft.network.listener.PacketListener
interface PacketListener extends JObject{
 shouldCrashOnException(): boolean;
 isConnectionOpen(): boolean;
 onDisconnected(reason: Text): void;
}

//net.minecraft.util.function.ToFloatFunction$1


//net.minecraft.client.gui.screen.CreditsScreen$CreditsReader
interface CreditsScreen_CreditsReader extends JObject{
 read(reader: Reader): void;
}

//net.minecraft.util.function.ToFloatFunction$2


//net.minecraft.datafixer.mapping.WoodRecipeMapping
class WoodRecipeMapping extends JObject{
}
class Static_WoodRecipeMapping {
static RECIPES: Map;
}

//net.minecraft.data.client.VariantSetting
class VariantSetting extends JObject{
 toString(): string;
 evaluate(value: Object): VariantSetting_Value;
}

//net.minecraft.world.chunk.light.ChunkSkyLightProvider$1


//net.minecraft.world.gen.feature.VillagePlacedFeatures
class VillagePlacedFeatures extends JObject{
}
class Static_VillagePlacedFeatures {
static bootstrap(featureRegisterable: Registerable): void;
static PILE_HAY: RegistryKey;
static PILE_MELON: RegistryKey;
static PILE_SNOW: RegistryKey;
static PILE_ICE: RegistryKey;
static PILE_PUMPKIN: RegistryKey;
static OAK: RegistryKey;
static ACACIA: RegistryKey;
static SPRUCE: RegistryKey;
static PINE: RegistryKey;
static PATCH_CACTUS: RegistryKey;
static FLOWER_PLAIN: RegistryKey;
static PATCH_TAIGA_GRASS: RegistryKey;
static PATCH_BERRY_BUSH: RegistryKey;
}

//net.minecraft.server.command.LootCommand$FeedbackMessage
interface LootCommand_FeedbackMessage extends JObject{
 accept(items: List): void;
}

//net.minecraft.network.packet.c2s.play.PlayerInteractEntityC2SPacket$InteractHandler
class PlayerInteractEntityC2SPacket_InteractHandler extends JObject, PlayerInteractEntityC2SPacket_InteractTypeHandler{
 write(buf: PacketByteBuf): void;
 getType(): PlayerInteractEntityC2SPacket_InteractType;
 handle(handler: PlayerInteractEntityC2SPacket_Handler): void;
}

//net.minecraft.world.event.Vibrations$Ticker
interface Vibrations_Ticker extends JObject{
}
class Static_Vibrations_Ticker {
static accept(world: ServerWorld,listenerData: Vibrations_ListenerData,callback: Vibrations_Callback,vibration: Vibration): boolean;
static tick(world: World,listenerData: Vibrations_ListenerData,callback: Vibrations_Callback): void;
static areChunksTickingAround(world: World,pos: BlockPos): boolean;
static spawnVibrationParticle(world: ServerWorld,listenerData: Vibrations_ListenerData,callback: Vibrations_Callback): void;
static tryListen(world: ServerWorld,listenerData: Vibrations_ListenerData,callback: Vibrations_Callback): void;
static method_51408(listenerData: Vibrations_ListenerData,callback: Vibrations_Callback,serverWorld: ServerWorld,vibration: Vibration): void;
}

//net.minecraft.world.GameRules$Visitor
interface GameRules_Visitor extends JObject{
 visit(key: GameRules_Key,type: GameRules_Type): void;
 visitInt(key: GameRules_Key,type: GameRules_Type): void;
 visitBoolean(key: GameRules_Key,type: GameRules_Type): void;
}

//net.minecraft.world.gen.chunk.ChunkNoiseSampler$BlockStateSampler
interface ChunkNoiseSampler_BlockStateSampler extends JObject{
 sample(pos: DensityFunction_NoisePos): BlockState;
}

//net.minecraft.util.math.floatprovider.FloatProvider
class FloatProvider extends JObject, FloatSupplier{
 getType(): FloatProviderType;
 getMin(): number;
 getMax(): number;
}
class Static_FloatProvider {
static createValidatedCodec(min: number,max: number): Codec;
static method_49469(f: number,floatProvider: FloatProvider): string;
static method_49468(f: number,floatProvider: FloatProvider): string;
static method_33922(provider: FloatProvider): FloatProvider;
static method_33917(f: number,g: number,provider: FloatProvider): DataResult;
static method_33919(either: Either): FloatProvider;
static method_33918(provider: FloatProvider): Either;
static FLOAT_CODEC: Codec;
static VALUE_CODEC: Codec;
}

//net.minecraft.client.main.Main
class Main extends JObject{
}
class Static_Main {
static main(args: String[]): void;
static getOption(optionSet: OptionSet,optionSpec: OptionSpec): Object;
static toOptional(i: Integer): OptionalInt;
static toOptional(string: string): Optional;
static isNotNullOrEmpty(s: string): boolean;
static LOGGER: Logger;
}

//net.minecraft.client.gui.LogoDrawer
class LogoDrawer extends JObject{
 draw(context: DrawContext,screenWidth: number,alpha: number): void;
 draw(context: DrawContext,screenWidth: number,alpha: number,y: number): void;
}
class Static_LogoDrawer {
static LOGO_TEXTURE: Identifier;
static MINCERAFT_TEXTURE: Identifier;
static EDITION_TEXTURE: Identifier;
static LOGO_REGION_WIDTH: number;
static LOGO_REGION_HEIGHT: number;
static LOGO_TEXTURE_WIDTH: number;
static LOGO_TEXTURE_HEIGHT: number;
static EDITION_REGION_WIDTH: number;
static EDITION_REGION_HEIGHT: number;
static EDITION_TEXTURE_WIDTH: number;
static EDITION_TEXTURE_HEIGHT: number;
static LOGO_BASE_Y: number;
static LOGO_AND_EDITION_OVERLAP: number;
}

//net.minecraft.registry.tag.DamageTypeTags
interface DamageTypeTags extends JObject{
}
class Static_DamageTypeTags {
static of(id: string): TagKey;
static DAMAGES_HELMET: TagKey;
static BYPASSES_ARMOR: TagKey;
static BYPASSES_SHIELD: TagKey;
static BYPASSES_INVULNERABILITY: TagKey;
static BYPASSES_COOLDOWN: TagKey;
static BYPASSES_EFFECTS: TagKey;
static BYPASSES_RESISTANCE: TagKey;
static BYPASSES_ENCHANTMENTS: TagKey;
static IS_FIRE: TagKey;
static IS_PROJECTILE: TagKey;
static WITCH_RESISTANT_TO: TagKey;
static IS_EXPLOSION: TagKey;
static IS_FALL: TagKey;
static IS_DROWNING: TagKey;
static IS_FREEZING: TagKey;
static IS_LIGHTNING: TagKey;
static NO_ANGER: TagKey;
static NO_IMPACT: TagKey;
static ALWAYS_MOST_SIGNIFICANT_FALL: TagKey;
static WITHER_IMMUNE_TO: TagKey;
static IGNITES_ARMOR_STANDS: TagKey;
static BURNS_ARMOR_STANDS: TagKey;
static AVOIDS_GUARDIAN_THORNS: TagKey;
static ALWAYS_TRIGGERS_SILVERFISH: TagKey;
static ALWAYS_HURTS_ENDER_DRAGONS: TagKey;
}

//net.minecraft.advancement.PlayerAdvancementTracker
class PlayerAdvancementTracker extends JObject{
 save(): void;
 setOwner(owner: ServerPlayerEntity): void;
 reload(advancementLoader: ServerAdvancementLoader): void;
 setDisplayTab(advancement: Advancement): void;
 clearCriteria(): void;
 grantCriterion(advancement: Advancement,criterionName: string): boolean;
 sendUpdate(player: ServerPlayerEntity): void;
 revokeCriterion(advancement: Advancement,criterionName: string): boolean;
 getProgress(advancement: Advancement): AdvancementProgress;
}
class Static_PlayerAdvancementTracker {
static LOGGER: Logger;
static GSON: Gson;
static JSON_TYPE: TypeToken;
}

//net.minecraft.client.particle.BubbleColumnUpParticle$Factory
class BubbleColumnUpParticle_Factory extends JObject, ParticleFactory{
 createParticle(defaultParticleType: DefaultParticleType,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
 createParticle(particleEffect: ParticleEffect,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
}

//net.minecraft.data.server.advancement.vanilla.VanillaAdventureTabAdvancementGenerator
class VanillaAdventureTabAdvancementGenerator extends JObject, AdvancementTabGenerator{
 accept(lookup: RegistryWrapper_WrapperLookup,exporter: Consumer): void;
}
class Static_VanillaAdventureTabAdvancementGenerator {
static requirePlacedComparatorReadingBlock(block: Block): CriterionConditions;
static requireListedMobsKilled(builder: Advancement_Builder): Advancement_Builder;
static createLightningStrike(range: NumberRange_IntRange,entity: EntityPredicate): LightningStrikeCriterion_Conditions;
static createLookingAtEntityUsing(entity: EntityType,item: Item): UsingItemCriterion_Conditions;
static buildAdventuringTime(exporter: Consumer,parent: Advancement,preset: MultiNoiseBiomeSourceParameterList_Preset): void;
static requireTrimmedArmor(builder: Advancement_Builder): Advancement_Builder;
static requirePlacedBlockReadByComparator(block: Block): CriterionConditions;
static requireAllExclusiveTrimmedArmor(builder: Advancement_Builder): Advancement_Builder;
static requireSalvagedSherd(builder: Advancement_Builder): Advancement_Builder;
static requireListedBiomesVisited(builder: Advancement_Builder,biomes: List): Advancement_Builder;
static method_51816(block: Block,facing: Direction): AllOfLootCondition_Builder;
static method_51820(i: number): LootCondition_Builder;
static method_51818(i: number): LootCondition_Builder;
static method_51817(facing: Direction): LootCondition_Builder;
static method_51690(map: Map,builder: Advancement_Builder,template: Item): void;
static method_51688(i: number): String[];
static OVERWORLD_HEIGHT: number;
static OVERWORLD_MAX_Y: number;
static OVERWORLD_MIN_Y: number;
static OVERWORLD_BEDROCK_LAYER_HEIGHT: number;
static MONSTERS: EntityType[];
}

//net.minecraft.server.dedicated.command.SaveAllCommand
class SaveAllCommand extends JObject{
}
class Static_SaveAllCommand {
static register(dispatcher: CommandDispatcher): void;
static method_13554(source: ServerCommandSource): boolean;
static method_13549(context: CommandContext): number;
static method_13553(context: CommandContext): number;
static saveAll(source: ServerCommandSource,flush: boolean): number;
static method_52041(): Text;
static method_52040(): Text;
static FAILED_EXCEPTION: SimpleCommandExceptionType;
}

//net.minecraft.command.EntitySelectorOptions$SelectorHandler
interface EntitySelectorOptions_SelectorHandler extends JObject{
 handle(reader: EntitySelectorReader): void;
}

//net.minecraft.server.ServerNetworkIo
class ServerNetworkIo extends JObject{
 stop(): void;
 bind(address: InetAddress,port: number): void;
 tick(): void;
 bindLocal(): SocketAddress;
 getConnections(): List;
 getServer(): MinecraftServer;
 active: boolean;
}
class Static_ServerNetworkIo {
static method_14352(clientConnection: ClientConnection,text: Text): void;
static method_14349(): EpollEventLoopGroup;
static method_14348(): NioEventLoopGroup;
static LOGGER: Logger;
static DEFAULT_CHANNEL: Lazy;
static EPOLL_CHANNEL: Lazy;
}

//net.minecraft.loot.provider.number.ConstantLootNumberProvider
class ConstantLootNumberProvider extends JObject, LootNumberProvider{
 equals(o: Object): boolean;
 hashCode(): number;
 getType(): LootNumberProviderType;
 nextFloat(context: LootContext): number;
}
class Static_ConstantLootNumberProvider {
static create(value: number): ConstantLootNumberProvider;
}

//net.minecraft.entity.decoration.DisplayEntity$FloatLerper
interface DisplayEntity_FloatLerper extends JObject{
 lerp(delta: number): number;
}
class Static_DisplayEntity_FloatLerper {
static constant(value: number): DisplayEntity_FloatLerper;
static method_49779(f: number,delta: number): number;
}

//net.minecraft.loot.function.LootFunctionConsumingBuilder
interface LootFunctionConsumingBuilder extends JObject{
 apply(functions: Object[],toBuilderFunction: Function): LootFunctionConsumingBuilder;
 apply(functions: Iterable,toBuilderFunction: Function): LootFunctionConsumingBuilder;
 apply(fun: LootFunction_Builder): LootFunctionConsumingBuilder;
 getThisFunctionConsumingBuilder(): LootFunctionConsumingBuilder;
}

//net.minecraft.entity.ai.brain.MemoryQueryResult
class MemoryQueryResult extends JObject{
 getValue(): App;
 remember(value: Optional): void;
 remember(value: Object,expiry: long): void;
 remember(value: Object): void;
 forget(): void;
}

//net.minecraft.network.packet.s2c.play.CommandTreeS2CPacket$SuggestableNode
interface CommandTreeS2CPacket_SuggestableNode extends JObject{
 write(buf: PacketByteBuf): void;
 createArgumentBuilder(commandRegistryAccess: CommandRegistryAccess): ArgumentBuilder;
}

//net.minecraft.network.packet.s2c.play.BossBarS2CPacket
class BossBarS2CPacket extends JObject, Packet{
 apply(listener: PacketListener): void;
 apply(clientPlayPacketListener: ClientPlayPacketListener): void;
 write(buf: PacketByteBuf): void;
 accept(consumer: BossBarS2CPacket_Consumer): void;
}
class Static_BossBarS2CPacket {
static add(bar: BossBar): BossBarS2CPacket;
static remove(uuid: UUID): BossBarS2CPacket;
static maskProperties(darkenSky: boolean,dragonMusic: boolean,thickenFog: boolean): number;
static updateStyle(bar: BossBar): BossBarS2CPacket;
static updateProperties(bar: BossBar): BossBarS2CPacket;
static updateProgress(bar: BossBar): BossBarS2CPacket;
static updateName(bar: BossBar): BossBarS2CPacket;
static DARKEN_SKY_MASK: number;
static DRAGON_MUSIC_MASK: number;
static THICKEN_FOG_MASK: number;
static REMOVE_ACTION: BossBarS2CPacket_Action;
}

//net.minecraft.data.DataProvider
interface DataProvider extends JObject{
 getName(): string;
 run(writer: DataWriter): CompletableFuture;
}
class Static_DataProvider {
static writeToPath(writer: DataWriter,json: JsonElement,path: Path): CompletableFuture;
static method_46567(jsonElement: JsonElement,dataWriter: DataWriter,path: Path): void;
static method_43809(key: string): string;
static method_43808(map: Object2IntOpenHashMap): void;
static JSON_KEY_SORT_ORDER: ToIntFunction;
static JSON_KEY_SORTING_COMPARATOR: Comparator;
static LOGGER: Logger;
}

//net.minecraft.client.util.telemetry.ThreadedLogWriter
class ThreadedLogWriter extends JObject, AutoCloseable{
 getLogger(): TelemetryLogger;
 close(): void;
}
class Static_ThreadedLogWriter {
static LOGGER: Logger;
}

//net.minecraft.client.gui.ParentElement
interface ParentElement extends JObject, Element{
 children(): List;
 hoveredElement(mouseX: number,mouseY: number): Optional;
 setFocused(focused: Element): void;
 setFocused(focused: boolean): void;
 setDragging(dragging: boolean): void;
 getFocusedPath(): GuiNavigationPath;
 isFocused(): boolean;
 getNavigationPath(navigation: GuiNavigation): GuiNavigationPath;
 getFocused(): Element;
 isDragging(): boolean;
 charTyped(chr: char,modifiers: number): boolean;
 mouseScrolled(mouseX: number,mouseY: number,amount: number): boolean;
 focusOn(element: Element): void;
 keyPressed(keyCode: number,scanCode: number,modifiers: number): boolean;
 keyReleased(keyCode: number,scanCode: number,modifiers: number): boolean;
 mouseReleased(mouseX: number,mouseY: number,button: number): boolean;
 mouseClicked(mouseX: number,mouseY: number,button: number): boolean;
 mouseDragged(mouseX: number,mouseY: number,button: number,deltaX: number,deltaY: number): boolean;
}
class Static_ParentElement {
static method_20083(d: number,e: number,i: number,element: Element): boolean;
static method_20082(d: number,e: number,f: number,element: Element): boolean;
static method_48609(element: Element): number;
static method_48219(navigationDirection: NavigationDirection,element: Element): Integer;
static method_48216(navigationDirection: NavigationDirection,element: Element): Integer;
}

//net.minecraft.loot.condition.LocationCheckLootCondition
class LocationCheckLootCondition extends JObject, LootCondition{
 test(lootContext: LootContext): boolean;
 test(context: Object): boolean;
 getType(): LootConditionType;
}
class Static_LocationCheckLootCondition {
static builder(predicateBuilder: LocationPredicate_Builder,pos: BlockPos): LootCondition_Builder;
static builder(predicateBuilder: LocationPredicate_Builder): LootCondition_Builder;
static method_30152(builder: LocationPredicate_Builder,blockPos: BlockPos): LootCondition;
static method_882(builder: LocationPredicate_Builder): LootCondition;
}

//net.minecraft.unused.packageinfo.PackageInfo7189
interface PackageInfo7189 extends JObject{
}

//net.minecraft.client.render.entity.model.ModelWithArms
interface ModelWithArms extends JObject{
 setArmAngle(arm: Arm,matrices: MatrixStack): void;
}

//net.minecraft.entity.Entity$1


//net.minecraft.client.gl.ShaderStage
class ShaderStage extends JObject{
 getName(): string;
 release(): void;
 attachTo(program: ShaderProgramSetupView): void;
}
class Static_ShaderStage {
static load(type: ShaderStage_Type,name: string,stream: InputStream,domain: string,loader: GlImportProcessor): number;
static createFromResource(type: ShaderStage_Type,name: string,stream: InputStream,domain: string,loader: GlImportProcessor): ShaderStage;
static MAX_INFO_LOG_LENGTH: number;
}

//net.minecraft.network.packet.s2c.play.ChunkData$BlockEntityVisitor
interface ChunkData_BlockEntityVisitor extends JObject{
 accept(pos: BlockPos,type: BlockEntityType,nbt: NbtCompound): void;
}

//net.minecraft.client.network.ClientPlayNetworkHandler
class ClientPlayNetworkHandler extends JObject, TickablePacketListener, ClientPlayPacketListener{
 tick(): void;
 getConnection(): ClientConnection;
 hasFeature(feature: FeatureSet): boolean;
 getSessionId(): UUID;
 getWorldKeys(): Set;
 getPlayerList(): Collection;
 acknowledge(message: SignedMessage,displayed: boolean): void;
 sendChatCommand(command: string): void;
 updateKeyPair(keyPair: PlayerKeyPair): void;
 getPlayerUuids(): Collection;
 sendCommand(command: string): boolean;
 getServerInfo(): ServerInfo;
 onCooldownUpdate(packet: CooldownUpdateS2CPacket): void;
 onUnlockRecipes(packet: UnlockRecipesS2CPacket): void;
 onUpdateSelectedSlot(packet: UpdateSelectedSlotS2CPacket): void;
 onChunkRenderDistanceCenter(packet: ChunkRenderDistanceCenterS2CPacket): void;
 onBossBar(packet: BossBarS2CPacket): void;
 clearWorld(): void;
 onGameJoin(packet: GameJoinS2CPacket): void;
 onEntitySpawn(packet: EntitySpawnS2CPacket): void;
 getPlayerListEntry(uuid: UUID): PlayerListEntry;
 getPlayerListEntry(profileName: string): PlayerListEntry;
 onPlayerSpawn(packet: PlayerSpawnS2CPacket): void;
 onEntitySetHeadYaw(packet: EntitySetHeadYawS2CPacket): void;
 onEntityPosition(packet: EntityPositionS2CPacket): void;
 onEntitiesDestroy(packet: EntitiesDestroyS2CPacket): void;
 onEntity(packet: EntityS2CPacket): void;
 onChunkBiomeData(packet: ChunkBiomeDataS2CPacket): void;
 onChunkDeltaUpdate(packet: ChunkDeltaUpdateS2CPacket): void;
 onChunkData(packet: ChunkDataS2CPacket): void;
 onUnloadChunk(packet: UnloadChunkS2CPacket): void;
 onBlockUpdate(packet: BlockUpdateS2CPacket): void;
 onGameMessage(packet: GameMessageS2CPacket): void;
 onRemoveMessage(packet: RemoveMessageS2CPacket): void;
 onDamageTilt(packet: DamageTiltS2CPacket): void;
 onWorldTimeUpdate(packet: WorldTimeUpdateS2CPacket): void;
 onEntityAnimation(packet: EntityAnimationS2CPacket): void;
 onHealthUpdate(packet: HealthUpdateS2CPacket): void;
 onEntityAttach(packet: EntityAttachS2CPacket): void;
 onEntityDamage(packet: EntityDamageS2CPacket): void;
 onEntityStatus(packet: EntityStatusS2CPacket): void;
 onPlayerRespawn(packet: PlayerRespawnS2CPacket): void;
 onExplosion(packet: ExplosionS2CPacket): void;
 onOpenHorseScreen(packet: OpenHorseScreenS2CPacket): void;
 onOpenScreen(packet: OpenScreenS2CPacket): void;
 onSignEditorOpen(packet: SignEditorOpenS2CPacket): void;
 onInventory(packet: InventoryS2CPacket): void;
 onCloseScreen(packet: CloseScreenS2CPacket): void;
 onGameStateChange(packet: GameStateChangeS2CPacket): void;
 onBlockEvent(packet: BlockEventS2CPacket): void;
 onWorldEvent(packet: WorldEventS2CPacket): void;
 onStopSound(packet: StopSoundS2CPacket): void;
 onMapUpdate(packet: MapUpdateS2CPacket): void;
 onAdvancements(packet: AdvancementUpdateS2CPacket): void;
 onCommandTree(packet: CommandTreeS2CPacket): void;
 onLookAt(packet: LookAtS2CPacket): void;
 onNbtQueryResponse(packet: NbtQueryResponseS2CPacket): void;
 onStatistics(packet: StatisticsS2CPacket): void;
 onEndCombat(packet: EndCombatS2CPacket): void;
 onSynchronizeTags(packet: SynchronizeTagsS2CPacket): void;
 onFeatures(packet: FeaturesS2CPacket): void;
 onTitleClear(packet: ClearTitleS2CPacket): void;
 onServerMetadata(packet: ServerMetadataS2CPacket): void;
 onDeathMessage(packet: DeathMessageS2CPacket): void;
 onDifficulty(packet: DifficultyS2CPacket): void;
 onOverlayMessage(packet: OverlayMessageS2CPacket): void;
 onPlayerListHeader(packet: PlayerListHeaderS2CPacket): void;
 onPlayerRemove(packet: PlayerRemoveS2CPacket): void;
 onTitle(packet: TitleS2CPacket): void;
 onChatSuggestions(packet: ChatSuggestionsS2CPacket): void;
 onPlayerAbilities(packet: PlayerAbilitiesS2CPacket): void;
 onPlaySound(packet: PlaySoundS2CPacket): void;
 onResourcePackSend(packet: ResourcePackSendS2CPacket): void;
 onOpenWrittenBook(packet: OpenWrittenBookS2CPacket): void;
 onTeam(packet: TeamS2CPacket): void;
 onParticle(packet: ParticleS2CPacket): void;
 onEntityAttributes(packet: EntityAttributesS2CPacket): void;
 onSetTradeOffers(packet: SetTradeOffersS2CPacket): void;
 onLightUpdate(packet: LightUpdateS2CPacket): void;
 onBundle(packet: BundleS2CPacket): void;
 onBlockEntityUpdate(packet: BlockEntityUpdateS2CPacket): void;
 onKeepAlive(packet: KeepAliveS2CPacket): void;
 onEnterCombat(packet: EnterCombatS2CPacket): void;
 getProfile(): GameProfile;
 isConnectionOpen(): boolean;
 onVehicleMove(packet: VehicleMoveS2CPacket): void;
 getCommandSource(): ClientCommandSource;
 onDisconnect(packet: DisconnectS2CPacket): void;
 onDisconnected(reason: Text): void;
 onChatMessage(packet: ChatMessageS2CPacket): void;
 sendChatMessage(content: string): void;
 onSubtitle(packet: SubtitleS2CPacket): void;
 onPing(packet: PlayPingS2CPacket): void;
 onCustomPayload(packet: CustomPayloadS2CPacket): void;
 getWorld(): ClientWorld;
 getListedPlayerListEntries(): Collection;
 onPlayerSpawnPosition(packet: PlayerSpawnPositionS2CPacket): void;
 onScreenHandlerPropertyUpdate(packet: ScreenHandlerPropertyUpdateS2CPacket): void;
 onEntityEquipmentUpdate(packet: EntityEquipmentUpdateS2CPacket): void;
 onBlockBreakingProgress(packet: BlockBreakingProgressS2CPacket): void;
 onScreenHandlerSlotUpdate(packet: ScreenHandlerSlotUpdateS2CPacket): void;
 onEntityVelocityUpdate(packet: EntityVelocityUpdateS2CPacket): void;
 onPlayerPositionLook(packet: PlayerPositionLookS2CPacket): void;
 onProfilelessChatMessage(packet: ProfilelessChatMessageS2CPacket): void;
 onEntityTrackerUpdate(packet: EntityTrackerUpdateS2CPacket): void;
 onExperienceBarUpdate(packet: ExperienceBarUpdateS2CPacket): void;
 onExperienceOrbSpawn(packet: ExperienceOrbSpawnS2CPacket): void;
 onEntityPassengersSet(packet: EntityPassengersSetS2CPacket): void;
 onItemPickupAnimation(packet: ItemPickupAnimationS2CPacket): void;
 onWorldBorderCenterChanged(packet: WorldBorderCenterChangedS2CPacket): void;
 onCommandSuggestions(packet: CommandSuggestionsS2CPacket): void;
 onEntityStatusEffect(packet: EntityStatusEffectS2CPacket): void;
 onSynchronizeRecipes(packet: SynchronizeRecipesS2CPacket): void;
 onWorldBorderWarningTimeChanged(packet: WorldBorderWarningTimeChangedS2CPacket): void;
 onRemoveEntityStatusEffect(packet: RemoveEntityStatusEffectS2CPacket): void;
 onWorldBorderSizeChanged(packet: WorldBorderSizeChangedS2CPacket): void;
 onWorldBorderInterpolateSize(packet: WorldBorderInterpolateSizeS2CPacket): void;
 onPlaySoundFromEntity(packet: PlaySoundFromEntityS2CPacket): void;
 onWorldBorderInitialize(packet: WorldBorderInitializeS2CPacket): void;
 onWorldBorderWarningBlocksChanged(packet: WorldBorderWarningBlocksChangedS2CPacket): void;
 onSelectAdvancementTab(packet: SelectAdvancementTabS2CPacket): void;
 onChunkLoadDistance(packet: ChunkLoadDistanceS2CPacket): void;
 onCraftFailedResponse(packet: CraftFailedResponseS2CPacket): void;
 getDataQueryHandler(): DataQueryHandler;
 getAdvancementHandler(): ClientAdvancementManager;
 getCommandDispatcher(): CommandDispatcher;
 onSimulationDistance(packet: SimulationDistanceS2CPacket): void;
 onScoreboardPlayerUpdate(packet: ScoreboardPlayerUpdateS2CPacket): void;
 onScoreboardObjectiveUpdate(packet: ScoreboardObjectiveUpdateS2CPacket): void;
 onScoreboardDisplay(packet: ScoreboardDisplayS2CPacket): void;
 onPlayerActionResponse(packet: PlayerActionResponseS2CPacket): void;
 getEnabledFeatures(): FeatureSet;
 onSetCameraEntity(packet: SetCameraEntityS2CPacket): void;
 getRegistryManager(): DynamicRegistryManager;
 onTitleFade(packet: TitleFadeS2CPacket): void;
 getRecipeManager(): RecipeManager;
 sendPacket(packet: Packet): void;
 onPlayerList(packet: PlayerListS2CPacket): void;
}
class Static_ClientPlayNetworkHandler {
static method_40215(entry: DynamicRegistryManager_Entry): void;
static method_34008(entity: Entity,pair: Pair): void;
static method_40216(registryKey: RegistryKey): IllegalStateException;
static method_34012(clientRecipeBook: ClientRecipeBook,recipeResultCollection: RecipeResultCollection): void;
static method_49036(): boolean;
static resolveUrl(url: string): URL;
static method_34016(identifier: Identifier): IllegalArgumentException;
static method_34010(team2: Team,team: TeamS2CPacket_SerializableTeam): void;
static getActiveTotemOfUndying(player: PlayerEntity): ItemStack;
static getServerResourcePackPrompt(defaultPrompt: Text,customPrompt: Text): Text;
static LOGGER: Logger;
static DISCONNECT_LOST_TEXT: Text;
static UNSECURE_SERVER_TOAST_TITLE: Text;
static UNSECURE_SERVER_TOAST_TEXT: Text;
static INVALID_PACKET_TEXT: Text;
static CHAT_VALIDATION_FAILED_TEXT: Text;
static ACKNOWLEDGMENT_BATCH_SIZE: number;
}

//net.minecraft.server.SaveLoading$LoadContextSupplier
interface SaveLoading_LoadContextSupplier extends JObject{
 get(context: SaveLoading_LoadContextSupplierContext): SaveLoading_LoadContext;
}

//net.minecraft.registry.DynamicRegistryManager
interface DynamicRegistryManager extends JObject, RegistryWrapper_WrapperLookup{
 get(key: RegistryKey): Registry;
 streamAllRegistries(): Stream;
 toImmutable(): DynamicRegistryManager_Immutable;
 getOptionalWrapper(registryRef: RegistryKey): Optional;
 getRegistryLifecycle(): Lifecycle;
 getOptional(key: RegistryKey): Optional;
}
class Static_DynamicRegistryManager {
static of(registries: Registry): DynamicRegistryManager_Immutable;
static method_30534(registryKey: RegistryKey): IllegalStateException;
static method_41200(entry: DynamicRegistryManager_Entry): Lifecycle;
static LOGGER: Logger;
static EMPTY: DynamicRegistryManager_Immutable;
}

//net.minecraft.network.packet.c2s.play.UpdateCommandBlockC2SPacket
class UpdateCommandBlockC2SPacket extends JObject, Packet{
 apply(serverPlayPacketListener: ServerPlayPacketListener): void;
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
 getType(): CommandBlockBlockEntity_Type;
 getBlockPos(): BlockPos;
 getCommand(): string;
 shouldTrackOutput(): boolean;
 isConditional(): boolean;
 isAlwaysActive(): boolean;
}
class Static_UpdateCommandBlockC2SPacket {
static TRACK_OUTPUT_MASK: number;
static CONDITIONAL_MASK: number;
static ALWAYS_ACTIVE_MASK: number;
}

//net.minecraft.util.TimeSupplier
interface TimeSupplier extends JObject{
 get(timeUnit: TimeUnit): long;
}

//net.minecraft.client.resource.metadata.TextureResourceMetadata
class TextureResourceMetadata extends JObject{
 shouldBlur(): boolean;
 shouldClamp(): boolean;
}
class Static_TextureResourceMetadata {
static READER: TextureResourceMetadataReader;
static field_32980: boolean;
static field_32981: boolean;
}

//net.minecraft.entity.decoration.ArmorStandEntity$1


//net.minecraft.loot.condition.RandomChanceWithLootingLootCondition$Serializer
class RandomChanceWithLootingLootCondition_Serializer extends JObject, JsonSerializer{
 fromJson(json: JsonObject,context: JsonDeserializationContext): Object;
 fromJson(jsonObject: JsonObject,jsonDeserializationContext: JsonDeserializationContext): RandomChanceWithLootingLootCondition;
 toJson(jsonObject: JsonObject,randomChanceWithLootingLootCondition: RandomChanceWithLootingLootCondition,jsonSerializationContext: JsonSerializationContext): void;
 toJson(json: JsonObject,object: Object,context: JsonSerializationContext): void;
}

//net.minecraft.world.gen.feature.TreeFeature$1


//net.minecraft.unused.packageinfo.PackageInfo7190
interface PackageInfo7190 extends JObject{
}

//net.minecraft.client.particle.FireworksSparkParticle$FlashFactory
class FireworksSparkParticle_FlashFactory extends JObject, ParticleFactory{
 createParticle(defaultParticleType: DefaultParticleType,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
 createParticle(particleEffect: ParticleEffect,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
}

//net.minecraft.network.packet.c2s.play.SpectatorTeleportC2SPacket
class SpectatorTeleportC2SPacket extends JObject, Packet{
 apply(serverPlayPacketListener: ServerPlayPacketListener): void;
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
 getTarget(world: ServerWorld): Entity;
}

//net.minecraft.util.thread.MessageListener
interface MessageListener extends JObject, AutoCloseable{
 getName(): string;
 close(): void;
 ask(messageProvider: Function): CompletableFuture;
 askFallible(messageProvider: Function): CompletableFuture;
 send(message: Object): void;
}
class Static_MessageListener {
static create(name: string,action: Consumer): MessageListener;
static method_27917(completableFuture: CompletableFuture,either: Either): void;
}

//net.minecraft.client.render.block.entity.LightmapCoordinatesRetriever
class LightmapCoordinatesRetriever extends JObject, DoubleBlockProperties_PropertyRetriever{
 getFrom(single: Object): Object;
 getFrom(blockEntity: BlockEntity): Int2IntFunction;
 getFromBoth(first: Object,second: Object): Object;
 getFromBoth(blockEntity: BlockEntity,blockEntity2: BlockEntity): Int2IntFunction;
 getFallback(): Int2IntFunction;
 getFallback(): Object;
}
class Static_LightmapCoordinatesRetriever {
static method_24193(blockEntity: BlockEntity,blockEntity2: BlockEntity,i: number): number;
static method_24194(i: number): number;
static method_24190(i: number): number;
}

//net.minecraft.server.dedicated.ServerPropertiesLoader
class ServerPropertiesLoader extends JObject{
 store(): void;
 apply(applier: UnaryOperator): ServerPropertiesLoader;
 getPropertiesHandler(): ServerPropertiesHandler;
}

//net.minecraft.world.chunk.ChunkStatus$SimpleGenerationTask
interface ChunkStatus_SimpleGenerationTask extends JObject, ChunkStatus_GenerationTask{
 doWork(chunkStatus: ChunkStatus,executor: Executor,serverWorld: ServerWorld,chunkGenerator: ChunkGenerator,structureTemplateManager: StructureTemplateManager,serverLightingProvider: ServerLightingProvider,fun: Function,list: List,chunk: Chunk): CompletableFuture;
 doWork(targetStatus: ChunkStatus,world: ServerWorld,chunkGenerator: ChunkGenerator,chunks: List,chunk: Chunk): void;
}

//net.minecraft.block.PistonHeadBlock$1


//net.minecraft.item.trim.ArmorTrim
class ArmorTrim extends JObject{
 equals(pattern: RegistryEntry,material: RegistryEntry): boolean;
 equals(o: Object): boolean;
 getLeggingsModelId(armorMaterial: ArmorMaterial): Identifier;
 getGenericModelId(armorMaterial: ArmorMaterial): Identifier;
 getPattern(): RegistryEntry;
 getMaterial(): RegistryEntry;
}
class Static_ArmorTrim {
static apply(registryManager: DynamicRegistryManager,stack: ItemStack,trim: ArmorTrim): boolean;
static appendTooltip(stack: ItemStack,registryManager: DynamicRegistryManager,tooltip: List): void;
static method_48426(instance: RecordCodecBuilder_Instance): App;
static method_48430(string: string,path: string): string;
static method_48433(string: string,path: string): string;
static getTrim(registryManager: DynamicRegistryManager,stack: ItemStack): Optional;
static CODEC: Codec;
static LOGGER: Logger;
static NBT_KEY: string;
static UPGRADE_TEXT: Text;
}

//net.minecraft.data.client.BlockStateModelGenerator$BuiltinModelPool
class BlockStateModelGenerator_BuiltinModelPool extends JObject{
 includeWithoutItem(blocks: Block[]): BlockStateModelGenerator_BuiltinModelPool;
 includeWithItem(blocks: Block[]): BlockStateModelGenerator_BuiltinModelPool;
 includeWithItem(model: Model,blocks: Block[]): BlockStateModelGenerator_BuiltinModelPool;
}

//net.minecraft.client.render.model.BasicBakedModel$Builder
class BasicBakedModel_Builder extends JObject{
 build(): BakedModel;
 addQuad(quad: BakedQuad): BasicBakedModel_Builder;
 addQuad(side: Direction,quad: BakedQuad): BasicBakedModel_Builder;
 method_35809(): BasicBakedModel_Builder;
 setParticle(sprite: Sprite): BasicBakedModel_Builder;
}

//net.minecraft.entity.decoration.painting.PaintingVariants
class PaintingVariants extends JObject{
}
class Static_PaintingVariants {
static of(id: string): RegistryKey;
static registerAndGetDefault(registry: Registry): PaintingVariant;
static KEBAB: RegistryKey;
static AZTEC: RegistryKey;
static ALBAN: RegistryKey;
static AZTEC2: RegistryKey;
static BOMB: RegistryKey;
static PLANT: RegistryKey;
static WASTELAND: RegistryKey;
static POOL: RegistryKey;
static COURBET: RegistryKey;
static SEA: RegistryKey;
static SUNSET: RegistryKey;
static CREEBET: RegistryKey;
static WANDERER: RegistryKey;
static GRAHAM: RegistryKey;
static MATCH: RegistryKey;
static BUST: RegistryKey;
static STAGE: RegistryKey;
static VOID: RegistryKey;
static SKULL_AND_ROSES: RegistryKey;
static WITHER: RegistryKey;
static FIGHTERS: RegistryKey;
static POINTER: RegistryKey;
static PIGSCENE: RegistryKey;
static BURNING_SKULL: RegistryKey;
static SKELETON: RegistryKey;
static DONKEY_KONG: RegistryKey;
static EARTH: RegistryKey;
static WIND: RegistryKey;
static WATER: RegistryKey;
static FIRE: RegistryKey;
}

//net.minecraft.client.gui.widget.EntryListWidget$1


//net.minecraft.entity.attribute.EntityAttributes
class EntityAttributes extends JObject{
}
class Static_EntityAttributes {
static register(id: string,attribute: EntityAttribute): EntityAttribute;
static GENERIC_MAX_HEALTH: EntityAttribute;
static GENERIC_FOLLOW_RANGE: EntityAttribute;
static GENERIC_KNOCKBACK_RESISTANCE: EntityAttribute;
static GENERIC_MOVEMENT_SPEED: EntityAttribute;
static GENERIC_FLYING_SPEED: EntityAttribute;
static GENERIC_ATTACK_DAMAGE: EntityAttribute;
static GENERIC_ATTACK_KNOCKBACK: EntityAttribute;
static GENERIC_ATTACK_SPEED: EntityAttribute;
static GENERIC_ARMOR: EntityAttribute;
static GENERIC_ARMOR_TOUGHNESS: EntityAttribute;
static GENERIC_LUCK: EntityAttribute;
static ZOMBIE_SPAWN_REINFORCEMENTS: EntityAttribute;
static HORSE_JUMP_STRENGTH: EntityAttribute;
}

//net.minecraft.world.storage.NbtScannable
interface NbtScannable extends JObject{
 scanChunk(pos: ChunkPos,scanner: NbtScanner): CompletableFuture;
}

//net.minecraft.network.packet.s2c.play.PlayerPositionLookS2CPacket
class PlayerPositionLookS2CPacket extends JObject, Packet{
 apply(clientPlayPacketListener: ClientPlayPacketListener): void;
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
 getFlags(): Set;
 getX(): number;
 getY(): number;
 getTeleportId(): number;
 getZ(): number;
 getPitch(): number;
 getYaw(): number;
}

//net.minecraft.particle.ParticleTypes
class ParticleTypes extends JObject{
}
class Static_ParticleTypes {
static register(name: string,alwaysShow: boolean,factory: ParticleEffect_Factory,codecGetter: Function): ParticleType;
static register(name: string,alwaysShow: boolean): DefaultParticleType;
static method_33121(particleType: ParticleType): Codec;
static method_29139(particleType: ParticleType): Codec;
static method_42616(type: ParticleType): Codec;
static method_42023(particleType: ParticleType): Codec;
static method_33122(particleType: ParticleType): Codec;
static AMBIENT_ENTITY_EFFECT: DefaultParticleType;
static ANGRY_VILLAGER: DefaultParticleType;
static BLOCK: ParticleType;
static BLOCK_MARKER: ParticleType;
static BUBBLE: DefaultParticleType;
static CLOUD: DefaultParticleType;
static CRIT: DefaultParticleType;
static DAMAGE_INDICATOR: DefaultParticleType;
static DRAGON_BREATH: DefaultParticleType;
static DRIPPING_LAVA: DefaultParticleType;
static FALLING_LAVA: DefaultParticleType;
static LANDING_LAVA: DefaultParticleType;
static DRIPPING_WATER: DefaultParticleType;
static FALLING_WATER: DefaultParticleType;
static DUST: ParticleType;
static DUST_COLOR_TRANSITION: ParticleType;
static EFFECT: DefaultParticleType;
static ELDER_GUARDIAN: DefaultParticleType;
static ENCHANTED_HIT: DefaultParticleType;
static ENCHANT: DefaultParticleType;
static END_ROD: DefaultParticleType;
static ENTITY_EFFECT: DefaultParticleType;
static EXPLOSION_EMITTER: DefaultParticleType;
static EXPLOSION: DefaultParticleType;
static SONIC_BOOM: DefaultParticleType;
static FALLING_DUST: ParticleType;
static FIREWORK: DefaultParticleType;
static FISHING: DefaultParticleType;
static FLAME: DefaultParticleType;
static CHERRY_LEAVES: DefaultParticleType;
static SCULK_SOUL: DefaultParticleType;
static SCULK_CHARGE: ParticleType;
static SCULK_CHARGE_POP: DefaultParticleType;
static SOUL_FIRE_FLAME: DefaultParticleType;
static SOUL: DefaultParticleType;
static FLASH: DefaultParticleType;
static HAPPY_VILLAGER: DefaultParticleType;
static COMPOSTER: DefaultParticleType;
static HEART: DefaultParticleType;
static INSTANT_EFFECT: DefaultParticleType;
static ITEM: ParticleType;
static VIBRATION: ParticleType;
static ITEM_SLIME: DefaultParticleType;
static ITEM_SNOWBALL: DefaultParticleType;
static LARGE_SMOKE: DefaultParticleType;
static LAVA: DefaultParticleType;
static MYCELIUM: DefaultParticleType;
static NOTE: DefaultParticleType;
static POOF: DefaultParticleType;
static PORTAL: DefaultParticleType;
static RAIN: DefaultParticleType;
static SMOKE: DefaultParticleType;
static SNEEZE: DefaultParticleType;
static SPIT: DefaultParticleType;
static SQUID_INK: DefaultParticleType;
static SWEEP_ATTACK: DefaultParticleType;
static TOTEM_OF_UNDYING: DefaultParticleType;
static UNDERWATER: DefaultParticleType;
static SPLASH: DefaultParticleType;
static WITCH: DefaultParticleType;
static BUBBLE_POP: DefaultParticleType;
static CURRENT_DOWN: DefaultParticleType;
static BUBBLE_COLUMN_UP: DefaultParticleType;
static NAUTILUS: DefaultParticleType;
static DOLPHIN: DefaultParticleType;
static CAMPFIRE_COSY_SMOKE: DefaultParticleType;
static CAMPFIRE_SIGNAL_SMOKE: DefaultParticleType;
static DRIPPING_HONEY: DefaultParticleType;
static FALLING_HONEY: DefaultParticleType;
static LANDING_HONEY: DefaultParticleType;
static FALLING_NECTAR: DefaultParticleType;
static FALLING_SPORE_BLOSSOM: DefaultParticleType;
static ASH: DefaultParticleType;
static CRIMSON_SPORE: DefaultParticleType;
static WARPED_SPORE: DefaultParticleType;
static SPORE_BLOSSOM_AIR: DefaultParticleType;
static DRIPPING_OBSIDIAN_TEAR: DefaultParticleType;
static FALLING_OBSIDIAN_TEAR: DefaultParticleType;
static LANDING_OBSIDIAN_TEAR: DefaultParticleType;
static REVERSE_PORTAL: DefaultParticleType;
static WHITE_ASH: DefaultParticleType;
static SMALL_FLAME: DefaultParticleType;
static SNOWFLAKE: DefaultParticleType;
static DRIPPING_DRIPSTONE_LAVA: DefaultParticleType;
static FALLING_DRIPSTONE_LAVA: DefaultParticleType;
static DRIPPING_DRIPSTONE_WATER: DefaultParticleType;
static FALLING_DRIPSTONE_WATER: DefaultParticleType;
static GLOW_SQUID_INK: DefaultParticleType;
static GLOW: DefaultParticleType;
static WAX_ON: DefaultParticleType;
static WAX_OFF: DefaultParticleType;
static ELECTRIC_SPARK: DefaultParticleType;
static SCRAPE: DefaultParticleType;
static SHRIEK: ParticleType;
static EGG_CRACK: DefaultParticleType;
static TYPE_CODEC: Codec;
}

//net.minecraft.command.argument.ScoreboardSlotArgumentType
class ScoreboardSlotArgumentType extends JObject, ArgumentType{
 parse(reader: StringReader): Object;
 parse(stringReader: StringReader): Integer;
 getExamples(): Collection;
 listSuggestions(context: CommandContext,builder: SuggestionsBuilder): CompletableFuture;
}
class Static_ScoreboardSlotArgumentType {
static getScoreboardSlot(context: CommandContext,name: string): number;
static method_9467(name: Object): Message;
static scoreboardSlot(): ScoreboardSlotArgumentType;
static EXAMPLES: Collection;
static INVALID_SLOT_EXCEPTION: DynamicCommandExceptionType;
}

//net.minecraft.world.gen.trunk.TrunkPlacerType
class TrunkPlacerType extends JObject{
 getCodec(): Codec;
}
class Static_TrunkPlacerType {
static register(id: string,codec: Codec): TrunkPlacerType;
static STRAIGHT_TRUNK_PLACER: TrunkPlacerType;
static FORKING_TRUNK_PLACER: TrunkPlacerType;
static GIANT_TRUNK_PLACER: TrunkPlacerType;
static MEGA_JUNGLE_TRUNK_PLACER: TrunkPlacerType;
static DARK_OAK_TRUNK_PLACER: TrunkPlacerType;
static FANCY_TRUNK_PLACER: TrunkPlacerType;
static BENDING_TRUNK_PLACER: TrunkPlacerType;
static UPWARDS_BRANCHING_TRUNK_PLACER: TrunkPlacerType;
static CHERRY_TRUNK_PLACER: TrunkPlacerType;
}

//net.minecraft.registry.tag.TagPacketSerializer$Loader
interface TagPacketSerializer_Loader extends JObject{
 accept(tag: TagKey,entries: List): void;
}

//net.minecraft.predicate.TagPredicate
class TagPredicate extends JObject{
 test(registryEntry: RegistryEntry): boolean;
 toJson(): JsonElement;
}
class Static_TagPredicate {
static expected(tag: TagKey): TagPredicate;
static unexpected(tag: TagKey): TagPredicate;
static fromJson(json: JsonElement,registry: RegistryKey): TagPredicate;
}

//net.minecraft.client.model.ModelPart$Vertex
class ModelPart_Vertex extends JObject{
 remap(u: number,v: number): ModelPart_Vertex;
 pos: Vector3f;
 u: number;
 v: number;
}

//net.minecraft.client.render.chunk.ChunkOcclusionDataBuilder
class ChunkOcclusionDataBuilder extends JObject{
 build(): ChunkOcclusionData;
 markClosed(pos: BlockPos): void;
}
class Static_ChunkOcclusionDataBuilder {
static method_3680(edgePoints: number[]): void;
static pack(x: number,y: number,z: number): number;
static pack(pos: BlockPos): number;
static field_32833: number;
static field_32834: number;
static field_32835: number;
static field_32836: number;
static field_32837: number;
static field_32838: number;
static field_32839: number;
static STEP_X: number;
static STEP_Z: number;
static STEP_Y: number;
static field_32840: number;
static DIRECTIONS: Direction[];
static EDGE_POINTS: number[];
}

//net.minecraft.server.command.KickCommand
class KickCommand extends JObject{
}
class Static_KickCommand {
static register(dispatcher: CommandDispatcher): void;
static execute(source: ServerCommandSource,targets: Collection,reason: Text): number;
static method_13409(context: CommandContext): number;
static method_13412(context: CommandContext): number;
static method_13413(source: ServerCommandSource): boolean;
static method_52003(serverPlayerEntity: ServerPlayerEntity,text: Text): Text;
}

//net.minecraft.block.Blocks
class Blocks extends JObject{
}
class Static_Blocks {
static register(id: string,block: Block): Block;
static always(state: BlockState,world: BlockView,pos: BlockPos): boolean;
static always(state: BlockState,world: BlockView,pos: BlockPos,type: EntityType): Boolean;
static refreshShapeCache(): void;
static never(state: BlockState,world: BlockView,pos: BlockPos,type: EntityType): Boolean;
static never(state: BlockState,world: BlockView,pos: BlockPos): boolean;
static canSpawnOnLeaves(state: BlockState,world: BlockView,pos: BlockPos,type: EntityType): Boolean;
static method_26108(i: number,state: BlockState): number;
static createLogBlock(topMapColor: MapColor,sideMapColor: MapColor): PillarBlock;
static method_26118(mapColor: MapColor,mapColor2: MapColor,state: BlockState): MapColor;
static method_26116(mapColor: MapColor,state: BlockState): MapColor;
static createBedBlock(color: DyeColor): BedBlock;
static createBambooBlock(topMapColor: MapColor,sideMapColor: MapColor,soundGroup: BlockSoundGroup): PillarBlock;
static method_47376(mapColor: MapColor,mapColor2: MapColor,state: BlockState): MapColor;
static method_26111(dyeColor: DyeColor,state: BlockState): MapColor;
static method_26125(state: BlockState,world: BlockView,pos: BlockPos): boolean;
static method_27091(state: BlockState,world: BlockView,pos: BlockPos): boolean;
static createPistonBlock(sticky: boolean): PistonBlock;
static createLeavesBlock(soundGroup: BlockSoundGroup): LeavesBlock;
static method_41423(state: BlockState): number;
static method_32895(state: BlockState,world: BlockView,pos: BlockPos): boolean;
static method_38230(state: BlockState): number;
static method_36461(state: BlockState): number;
static method_32894(state: BlockState): number;
static method_41421(state: BlockState): number;
static method_36460(state: BlockState): number;
static createCandleBlock(color: MapColor): CandleBlock;
static method_41424(state: BlockState): number;
static method_26112(state: BlockState): number;
static method_26121(state: BlockState): number;
static method_41422(state: BlockState): number;
static method_26124(state: BlockState): number;
static method_26127(state: BlockState): number;
static method_24419(state: BlockState): number;
static method_26135(state: BlockState): number;
static method_26139(state: BlockState): number;
static method_26137(state: BlockState): number;
static method_26143(state: BlockState): number;
static method_31620(): Item;
static method_26129(state: BlockState): number;
static method_26104(state: BlockState): number;
static method_26138(state: BlockState): number;
static method_31619(): Item;
static method_26145(state: BlockState): number;
static method_31625(state: BlockState): number;
static method_26146(state: BlockState): number;
static method_26148(state: BlockState): number;
static method_26142(state: BlockState): number;
static method_31622(): Item;
static method_26134(state: BlockState): number;
static method_26140(state: BlockState): number;
static method_31621(): Item;
static method_26131(state: BlockState): number;
static method_26128(state: BlockState,world: BlockView,pos: BlockPos,entityType: EntityType): boolean;
static method_36458(state: BlockState): number;
static method_26141(state: BlockState): number;
static method_33357(state: BlockState): number;
static method_26130(state: BlockState,world: BlockView,pos: BlockPos,entityType: EntityType): boolean;
static method_26147(state: BlockState): number;
static method_24165(): BlockEntityType;
static method_26150(state: BlockState): number;
static method_26105(state: BlockState): number;
static method_26152(state: BlockState): number;
static method_26144(state: BlockState): number;
static method_26149(state: BlockState): number;
static method_26151(state: BlockState): number;
static method_26136(state: BlockState): number;
static method_39537(state: BlockState,world: BlockView,pos: BlockPos): boolean;
static method_26132(state: BlockState,world: BlockView,pos: BlockPos,entityType: EntityType): boolean;
static createFlowerPotBlock(flower: Block,requiredFeatures: FeatureFlag[]): FlowerPotBlock;
static createWoodenButtonBlock(blockSetType: BlockSetType,requiredFeatures: FeatureFlag[]): ButtonBlock;
static createStainedGlassBlock(color: DyeColor): StainedGlassBlock;
static createNetherStemBlock(mapColor: MapColor): Block;
static createLightLevelFromLitBlockState(litLevel: number): ToIntFunction;
static createStoneButtonBlock(): ButtonBlock;
static createShulkerBoxBlock(color: DyeColor,settings: AbstractBlock_Settings): ShulkerBoxBlock;
static AIR: Block;
static STONE: Block;
static GRANITE: Block;
static POLISHED_GRANITE: Block;
static DIORITE: Block;
static POLISHED_DIORITE: Block;
static ANDESITE: Block;
static POLISHED_ANDESITE: Block;
static GRASS_BLOCK: Block;
static DIRT: Block;
static COARSE_DIRT: Block;
static PODZOL: Block;
static COBBLESTONE: Block;
static OAK_PLANKS: Block;
static SPRUCE_PLANKS: Block;
static BIRCH_PLANKS: Block;
static JUNGLE_PLANKS: Block;
static ACACIA_PLANKS: Block;
static CHERRY_PLANKS: Block;
static DARK_OAK_PLANKS: Block;
static MANGROVE_PLANKS: Block;
static BAMBOO_PLANKS: Block;
static BAMBOO_MOSAIC: Block;
static OAK_SAPLING: Block;
static SPRUCE_SAPLING: Block;
static BIRCH_SAPLING: Block;
static JUNGLE_SAPLING: Block;
static ACACIA_SAPLING: Block;
static CHERRY_SAPLING: Block;
static DARK_OAK_SAPLING: Block;
static MANGROVE_PROPAGULE: Block;
static BEDROCK: Block;
static WATER: Block;
static LAVA: Block;
static SAND: Block;
static SUSPICIOUS_SAND: Block;
static RED_SAND: Block;
static GRAVEL: Block;
static SUSPICIOUS_GRAVEL: Block;
static GOLD_ORE: Block;
static DEEPSLATE_GOLD_ORE: Block;
static IRON_ORE: Block;
static DEEPSLATE_IRON_ORE: Block;
static COAL_ORE: Block;
static DEEPSLATE_COAL_ORE: Block;
static NETHER_GOLD_ORE: Block;
static OAK_LOG: Block;
static SPRUCE_LOG: Block;
static BIRCH_LOG: Block;
static JUNGLE_LOG: Block;
static ACACIA_LOG: Block;
static CHERRY_LOG: Block;
static DARK_OAK_LOG: Block;
static MANGROVE_LOG: Block;
static MANGROVE_ROOTS: Block;
static MUDDY_MANGROVE_ROOTS: Block;
static BAMBOO_BLOCK: Block;
static STRIPPED_SPRUCE_LOG: Block;
static STRIPPED_BIRCH_LOG: Block;
static STRIPPED_JUNGLE_LOG: Block;
static STRIPPED_ACACIA_LOG: Block;
static STRIPPED_CHERRY_LOG: Block;
static STRIPPED_DARK_OAK_LOG: Block;
static STRIPPED_OAK_LOG: Block;
static STRIPPED_MANGROVE_LOG: Block;
static STRIPPED_BAMBOO_BLOCK: Block;
static OAK_WOOD: Block;
static SPRUCE_WOOD: Block;
static BIRCH_WOOD: Block;
static JUNGLE_WOOD: Block;
static ACACIA_WOOD: Block;
static CHERRY_WOOD: Block;
static DARK_OAK_WOOD: Block;
static MANGROVE_WOOD: Block;
static STRIPPED_OAK_WOOD: Block;
static STRIPPED_SPRUCE_WOOD: Block;
static STRIPPED_BIRCH_WOOD: Block;
static STRIPPED_JUNGLE_WOOD: Block;
static STRIPPED_ACACIA_WOOD: Block;
static STRIPPED_CHERRY_WOOD: Block;
static STRIPPED_DARK_OAK_WOOD: Block;
static STRIPPED_MANGROVE_WOOD: Block;
static OAK_LEAVES: Block;
static SPRUCE_LEAVES: Block;
static BIRCH_LEAVES: Block;
static JUNGLE_LEAVES: Block;
static ACACIA_LEAVES: Block;
static CHERRY_LEAVES: Block;
static DARK_OAK_LEAVES: Block;
static MANGROVE_LEAVES: Block;
static AZALEA_LEAVES: Block;
static FLOWERING_AZALEA_LEAVES: Block;
static SPONGE: Block;
static WET_SPONGE: Block;
static GLASS: Block;
static LAPIS_ORE: Block;
static DEEPSLATE_LAPIS_ORE: Block;
static LAPIS_BLOCK: Block;
static DISPENSER: Block;
static SANDSTONE: Block;
static CHISELED_SANDSTONE: Block;
static CUT_SANDSTONE: Block;
static NOTE_BLOCK: Block;
static WHITE_BED: Block;
static ORANGE_BED: Block;
static MAGENTA_BED: Block;
static LIGHT_BLUE_BED: Block;
static YELLOW_BED: Block;
static LIME_BED: Block;
static PINK_BED: Block;
static GRAY_BED: Block;
static LIGHT_GRAY_BED: Block;
static CYAN_BED: Block;
static PURPLE_BED: Block;
static BLUE_BED: Block;
static BROWN_BED: Block;
static GREEN_BED: Block;
static RED_BED: Block;
static BLACK_BED: Block;
static POWERED_RAIL: Block;
static DETECTOR_RAIL: Block;
static STICKY_PISTON: Block;
static COBWEB: Block;
static GRASS: Block;
static FERN: Block;
static DEAD_BUSH: Block;
static SEAGRASS: Block;
static TALL_SEAGRASS: Block;
static PISTON: Block;
static PISTON_HEAD: Block;
static WHITE_WOOL: Block;
static ORANGE_WOOL: Block;
static MAGENTA_WOOL: Block;
static LIGHT_BLUE_WOOL: Block;
static YELLOW_WOOL: Block;
static LIME_WOOL: Block;
static PINK_WOOL: Block;
static GRAY_WOOL: Block;
static LIGHT_GRAY_WOOL: Block;
static CYAN_WOOL: Block;
static PURPLE_WOOL: Block;
static BLUE_WOOL: Block;
static BROWN_WOOL: Block;
static GREEN_WOOL: Block;
static RED_WOOL: Block;
static BLACK_WOOL: Block;
static MOVING_PISTON: Block;
static DANDELION: Block;
static TORCHFLOWER: Block;
static POPPY: Block;
static BLUE_ORCHID: Block;
static ALLIUM: Block;
static AZURE_BLUET: Block;
static RED_TULIP: Block;
static ORANGE_TULIP: Block;
static WHITE_TULIP: Block;
static PINK_TULIP: Block;
static OXEYE_DAISY: Block;
static CORNFLOWER: Block;
static WITHER_ROSE: Block;
static LILY_OF_THE_VALLEY: Block;
static BROWN_MUSHROOM: Block;
static RED_MUSHROOM: Block;
static GOLD_BLOCK: Block;
static IRON_BLOCK: Block;
static BRICKS: Block;
static TNT: Block;
static BOOKSHELF: Block;
static CHISELED_BOOKSHELF: Block;
static MOSSY_COBBLESTONE: Block;
static OBSIDIAN: Block;
static TORCH: Block;
static WALL_TORCH: Block;
static FIRE: Block;
static SOUL_FIRE: Block;
static SPAWNER: Block;
static OAK_STAIRS: Block;
static CHEST: Block;
static REDSTONE_WIRE: Block;
static DIAMOND_ORE: Block;
static DEEPSLATE_DIAMOND_ORE: Block;
static DIAMOND_BLOCK: Block;
static CRAFTING_TABLE: Block;
static WHEAT: Block;
static FARMLAND: Block;
static FURNACE: Block;
static OAK_SIGN: Block;
static SPRUCE_SIGN: Block;
static BIRCH_SIGN: Block;
static ACACIA_SIGN: Block;
static CHERRY_SIGN: Block;
static JUNGLE_SIGN: Block;
static DARK_OAK_SIGN: Block;
static MANGROVE_SIGN: Block;
static BAMBOO_SIGN: Block;
static OAK_DOOR: Block;
static LADDER: Block;
static RAIL: Block;
static COBBLESTONE_STAIRS: Block;
static OAK_WALL_SIGN: Block;
static SPRUCE_WALL_SIGN: Block;
static BIRCH_WALL_SIGN: Block;
static ACACIA_WALL_SIGN: Block;
static CHERRY_WALL_SIGN: Block;
static JUNGLE_WALL_SIGN: Block;
static DARK_OAK_WALL_SIGN: Block;
static MANGROVE_WALL_SIGN: Block;
static BAMBOO_WALL_SIGN: Block;
static OAK_HANGING_SIGN: Block;
static SPRUCE_HANGING_SIGN: Block;
static BIRCH_HANGING_SIGN: Block;
static ACACIA_HANGING_SIGN: Block;
static CHERRY_HANGING_SIGN: Block;
static JUNGLE_HANGING_SIGN: Block;
static DARK_OAK_HANGING_SIGN: Block;
static CRIMSON_HANGING_SIGN: Block;
static WARPED_HANGING_SIGN: Block;
static MANGROVE_HANGING_SIGN: Block;
static BAMBOO_HANGING_SIGN: Block;
static OAK_WALL_HANGING_SIGN: Block;
static SPRUCE_WALL_HANGING_SIGN: Block;
static BIRCH_WALL_HANGING_SIGN: Block;
static ACACIA_WALL_HANGING_SIGN: Block;
static CHERRY_WALL_HANGING_SIGN: Block;
static JUNGLE_WALL_HANGING_SIGN: Block;
static DARK_OAK_WALL_HANGING_SIGN: Block;
static MANGROVE_WALL_HANGING_SIGN: Block;
static CRIMSON_WALL_HANGING_SIGN: Block;
static WARPED_WALL_HANGING_SIGN: Block;
static BAMBOO_WALL_HANGING_SIGN: Block;
static LEVER: Block;
static STONE_PRESSURE_PLATE: Block;
static IRON_DOOR: Block;
static OAK_PRESSURE_PLATE: Block;
static SPRUCE_PRESSURE_PLATE: Block;
static BIRCH_PRESSURE_PLATE: Block;
static JUNGLE_PRESSURE_PLATE: Block;
static ACACIA_PRESSURE_PLATE: Block;
static CHERRY_PRESSURE_PLATE: Block;
static DARK_OAK_PRESSURE_PLATE: Block;
static MANGROVE_PRESSURE_PLATE: Block;
static BAMBOO_PRESSURE_PLATE: Block;
static REDSTONE_ORE: Block;
static DEEPSLATE_REDSTONE_ORE: Block;
static REDSTONE_TORCH: Block;
static REDSTONE_WALL_TORCH: Block;
static STONE_BUTTON: Block;
static SNOW: Block;
static ICE: Block;
static SNOW_BLOCK: Block;
static CACTUS: Block;
static CLAY: Block;
static SUGAR_CANE: Block;
static JUKEBOX: Block;
static OAK_FENCE: Block;
static PUMPKIN: Block;
static NETHERRACK: Block;
static SOUL_SAND: Block;
static SOUL_SOIL: Block;
static BASALT: Block;
static POLISHED_BASALT: Block;
static SOUL_TORCH: Block;
static SOUL_WALL_TORCH: Block;
static GLOWSTONE: Block;
static NETHER_PORTAL: Block;
static CARVED_PUMPKIN: Block;
static JACK_O_LANTERN: Block;
static CAKE: Block;
static REPEATER: Block;
static WHITE_STAINED_GLASS: Block;
static ORANGE_STAINED_GLASS: Block;
static MAGENTA_STAINED_GLASS: Block;
static LIGHT_BLUE_STAINED_GLASS: Block;
static YELLOW_STAINED_GLASS: Block;
static LIME_STAINED_GLASS: Block;
static PINK_STAINED_GLASS: Block;
static GRAY_STAINED_GLASS: Block;
static LIGHT_GRAY_STAINED_GLASS: Block;
static CYAN_STAINED_GLASS: Block;
static PURPLE_STAINED_GLASS: Block;
static BLUE_STAINED_GLASS: Block;
static BROWN_STAINED_GLASS: Block;
static GREEN_STAINED_GLASS: Block;
static RED_STAINED_GLASS: Block;
static BLACK_STAINED_GLASS: Block;
static OAK_TRAPDOOR: Block;
static SPRUCE_TRAPDOOR: Block;
static BIRCH_TRAPDOOR: Block;
static JUNGLE_TRAPDOOR: Block;
static ACACIA_TRAPDOOR: Block;
static CHERRY_TRAPDOOR: Block;
static DARK_OAK_TRAPDOOR: Block;
static MANGROVE_TRAPDOOR: Block;
static BAMBOO_TRAPDOOR: Block;
static STONE_BRICKS: Block;
static MOSSY_STONE_BRICKS: Block;
static CRACKED_STONE_BRICKS: Block;
static CHISELED_STONE_BRICKS: Block;
static PACKED_MUD: Block;
static MUD_BRICKS: Block;
static INFESTED_STONE: Block;
static INFESTED_COBBLESTONE: Block;
static INFESTED_STONE_BRICKS: Block;
static INFESTED_MOSSY_STONE_BRICKS: Block;
static INFESTED_CRACKED_STONE_BRICKS: Block;
static INFESTED_CHISELED_STONE_BRICKS: Block;
static BROWN_MUSHROOM_BLOCK: Block;
static RED_MUSHROOM_BLOCK: Block;
static MUSHROOM_STEM: Block;
static IRON_BARS: Block;
static CHAIN: Block;
static GLASS_PANE: Block;
static MELON: Block;
static ATTACHED_PUMPKIN_STEM: Block;
static ATTACHED_MELON_STEM: Block;
static PUMPKIN_STEM: Block;
static MELON_STEM: Block;
static VINE: Block;
static GLOW_LICHEN: Block;
static OAK_FENCE_GATE: Block;
static BRICK_STAIRS: Block;
static STONE_BRICK_STAIRS: Block;
static MUD_BRICK_STAIRS: Block;
static MYCELIUM: Block;
static LILY_PAD: Block;
static NETHER_BRICKS: Block;
static NETHER_BRICK_FENCE: Block;
static NETHER_BRICK_STAIRS: Block;
static NETHER_WART: Block;
static ENCHANTING_TABLE: Block;
static BREWING_STAND: Block;
static CAULDRON: Block;
static WATER_CAULDRON: Block;
static LAVA_CAULDRON: Block;
static POWDER_SNOW_CAULDRON: Block;
static END_PORTAL: Block;
static END_PORTAL_FRAME: Block;
static END_STONE: Block;
static DRAGON_EGG: Block;
static REDSTONE_LAMP: Block;
static COCOA: Block;
static SANDSTONE_STAIRS: Block;
static EMERALD_ORE: Block;
static DEEPSLATE_EMERALD_ORE: Block;
static ENDER_CHEST: Block;
static TRIPWIRE_HOOK: Block;
static TRIPWIRE: Block;
static EMERALD_BLOCK: Block;
static SPRUCE_STAIRS: Block;
static BIRCH_STAIRS: Block;
static JUNGLE_STAIRS: Block;
static COMMAND_BLOCK: Block;
static BEACON: Block;
static COBBLESTONE_WALL: Block;
static MOSSY_COBBLESTONE_WALL: Block;
static FLOWER_POT: Block;
static POTTED_TORCHFLOWER: Block;
static POTTED_OAK_SAPLING: Block;
static POTTED_SPRUCE_SAPLING: Block;
static POTTED_BIRCH_SAPLING: Block;
static POTTED_JUNGLE_SAPLING: Block;
static POTTED_ACACIA_SAPLING: Block;
static POTTED_CHERRY_SAPLING: Block;
static POTTED_DARK_OAK_SAPLING: Block;
static POTTED_MANGROVE_PROPAGULE: Block;
static POTTED_FERN: Block;
static POTTED_DANDELION: Block;
static POTTED_POPPY: Block;
static POTTED_BLUE_ORCHID: Block;
static POTTED_ALLIUM: Block;
static POTTED_AZURE_BLUET: Block;
static POTTED_RED_TULIP: Block;
static POTTED_ORANGE_TULIP: Block;
static POTTED_WHITE_TULIP: Block;
static POTTED_PINK_TULIP: Block;
static POTTED_OXEYE_DAISY: Block;
static POTTED_CORNFLOWER: Block;
static POTTED_LILY_OF_THE_VALLEY: Block;
static POTTED_WITHER_ROSE: Block;
static POTTED_RED_MUSHROOM: Block;
static POTTED_BROWN_MUSHROOM: Block;
static POTTED_DEAD_BUSH: Block;
static POTTED_CACTUS: Block;
static CARROTS: Block;
static POTATOES: Block;
static OAK_BUTTON: Block;
static SPRUCE_BUTTON: Block;
static BIRCH_BUTTON: Block;
static JUNGLE_BUTTON: Block;
static ACACIA_BUTTON: Block;
static CHERRY_BUTTON: Block;
static DARK_OAK_BUTTON: Block;
static MANGROVE_BUTTON: Block;
static BAMBOO_BUTTON: Block;
static SKELETON_SKULL: Block;
static SKELETON_WALL_SKULL: Block;
static WITHER_SKELETON_SKULL: Block;
static WITHER_SKELETON_WALL_SKULL: Block;
static ZOMBIE_HEAD: Block;
static ZOMBIE_WALL_HEAD: Block;
static PLAYER_HEAD: Block;
static PLAYER_WALL_HEAD: Block;
static CREEPER_HEAD: Block;
static CREEPER_WALL_HEAD: Block;
static DRAGON_HEAD: Block;
static DRAGON_WALL_HEAD: Block;
static PIGLIN_HEAD: Block;
static PIGLIN_WALL_HEAD: Block;
static ANVIL: Block;
static CHIPPED_ANVIL: Block;
static DAMAGED_ANVIL: Block;
static TRAPPED_CHEST: Block;
static LIGHT_WEIGHTED_PRESSURE_PLATE: Block;
static HEAVY_WEIGHTED_PRESSURE_PLATE: Block;
static COMPARATOR: Block;
static DAYLIGHT_DETECTOR: Block;
static REDSTONE_BLOCK: Block;
static NETHER_QUARTZ_ORE: Block;
static HOPPER: Block;
static QUARTZ_BLOCK: Block;
static CHISELED_QUARTZ_BLOCK: Block;
static QUARTZ_PILLAR: Block;
static QUARTZ_STAIRS: Block;
static ACTIVATOR_RAIL: Block;
static DROPPER: Block;
static WHITE_TERRACOTTA: Block;
static ORANGE_TERRACOTTA: Block;
static MAGENTA_TERRACOTTA: Block;
static LIGHT_BLUE_TERRACOTTA: Block;
static YELLOW_TERRACOTTA: Block;
static LIME_TERRACOTTA: Block;
static PINK_TERRACOTTA: Block;
static GRAY_TERRACOTTA: Block;
static LIGHT_GRAY_TERRACOTTA: Block;
static CYAN_TERRACOTTA: Block;
static PURPLE_TERRACOTTA: Block;
static BLUE_TERRACOTTA: Block;
static BROWN_TERRACOTTA: Block;
static GREEN_TERRACOTTA: Block;
static RED_TERRACOTTA: Block;
static BLACK_TERRACOTTA: Block;
static WHITE_STAINED_GLASS_PANE: Block;
static ORANGE_STAINED_GLASS_PANE: Block;
static MAGENTA_STAINED_GLASS_PANE: Block;
static LIGHT_BLUE_STAINED_GLASS_PANE: Block;
static YELLOW_STAINED_GLASS_PANE: Block;
static LIME_STAINED_GLASS_PANE: Block;
static PINK_STAINED_GLASS_PANE: Block;
static GRAY_STAINED_GLASS_PANE: Block;
static LIGHT_GRAY_STAINED_GLASS_PANE: Block;
static CYAN_STAINED_GLASS_PANE: Block;
static PURPLE_STAINED_GLASS_PANE: Block;
static BLUE_STAINED_GLASS_PANE: Block;
static BROWN_STAINED_GLASS_PANE: Block;
static GREEN_STAINED_GLASS_PANE: Block;
static RED_STAINED_GLASS_PANE: Block;
static BLACK_STAINED_GLASS_PANE: Block;
static ACACIA_STAIRS: Block;
static CHERRY_STAIRS: Block;
static DARK_OAK_STAIRS: Block;
static MANGROVE_STAIRS: Block;
static BAMBOO_STAIRS: Block;
static BAMBOO_MOSAIC_STAIRS: Block;
static SLIME_BLOCK: Block;
static BARRIER: Block;
static LIGHT: Block;
static IRON_TRAPDOOR: Block;
static PRISMARINE: Block;
static PRISMARINE_BRICKS: Block;
static DARK_PRISMARINE: Block;
static PRISMARINE_STAIRS: Block;
static PRISMARINE_BRICK_STAIRS: Block;
static DARK_PRISMARINE_STAIRS: Block;
static PRISMARINE_SLAB: Block;
static PRISMARINE_BRICK_SLAB: Block;
static DARK_PRISMARINE_SLAB: Block;
static SEA_LANTERN: Block;
static HAY_BLOCK: Block;
static WHITE_CARPET: Block;
static ORANGE_CARPET: Block;
static MAGENTA_CARPET: Block;
static LIGHT_BLUE_CARPET: Block;
static YELLOW_CARPET: Block;
static LIME_CARPET: Block;
static PINK_CARPET: Block;
static GRAY_CARPET: Block;
static LIGHT_GRAY_CARPET: Block;
static CYAN_CARPET: Block;
static PURPLE_CARPET: Block;
static BLUE_CARPET: Block;
static BROWN_CARPET: Block;
static GREEN_CARPET: Block;
static RED_CARPET: Block;
static BLACK_CARPET: Block;
static TERRACOTTA: Block;
static COAL_BLOCK: Block;
static PACKED_ICE: Block;
static SUNFLOWER: Block;
static LILAC: Block;
static ROSE_BUSH: Block;
static PEONY: Block;
static TALL_GRASS: Block;
static LARGE_FERN: Block;
static WHITE_BANNER: Block;
static ORANGE_BANNER: Block;
static MAGENTA_BANNER: Block;
static LIGHT_BLUE_BANNER: Block;
static YELLOW_BANNER: Block;
static LIME_BANNER: Block;
static PINK_BANNER: Block;
static GRAY_BANNER: Block;
static LIGHT_GRAY_BANNER: Block;
static CYAN_BANNER: Block;
static PURPLE_BANNER: Block;
static BLUE_BANNER: Block;
static BROWN_BANNER: Block;
static GREEN_BANNER: Block;
static RED_BANNER: Block;
static BLACK_BANNER: Block;
static WHITE_WALL_BANNER: Block;
static ORANGE_WALL_BANNER: Block;
static MAGENTA_WALL_BANNER: Block;
static LIGHT_BLUE_WALL_BANNER: Block;
static YELLOW_WALL_BANNER: Block;
static LIME_WALL_BANNER: Block;
static PINK_WALL_BANNER: Block;
static GRAY_WALL_BANNER: Block;
static LIGHT_GRAY_WALL_BANNER: Block;
static CYAN_WALL_BANNER: Block;
static PURPLE_WALL_BANNER: Block;
static BLUE_WALL_BANNER: Block;
static BROWN_WALL_BANNER: Block;
static GREEN_WALL_BANNER: Block;
static RED_WALL_BANNER: Block;
static BLACK_WALL_BANNER: Block;
static RED_SANDSTONE: Block;
static CHISELED_RED_SANDSTONE: Block;
static CUT_RED_SANDSTONE: Block;
static RED_SANDSTONE_STAIRS: Block;
static OAK_SLAB: Block;
static SPRUCE_SLAB: Block;
static BIRCH_SLAB: Block;
static JUNGLE_SLAB: Block;
static ACACIA_SLAB: Block;
static CHERRY_SLAB: Block;
static DARK_OAK_SLAB: Block;
static MANGROVE_SLAB: Block;
static BAMBOO_SLAB: Block;
static BAMBOO_MOSAIC_SLAB: Block;
static STONE_SLAB: Block;
static SMOOTH_STONE_SLAB: Block;
static SANDSTONE_SLAB: Block;
static CUT_SANDSTONE_SLAB: Block;
static PETRIFIED_OAK_SLAB: Block;
static COBBLESTONE_SLAB: Block;
static BRICK_SLAB: Block;
static STONE_BRICK_SLAB: Block;
static MUD_BRICK_SLAB: Block;
static NETHER_BRICK_SLAB: Block;
static QUARTZ_SLAB: Block;
static RED_SANDSTONE_SLAB: Block;
static CUT_RED_SANDSTONE_SLAB: Block;
static PURPUR_SLAB: Block;
static SMOOTH_STONE: Block;
static SMOOTH_SANDSTONE: Block;
static SMOOTH_QUARTZ: Block;
static SMOOTH_RED_SANDSTONE: Block;
static SPRUCE_FENCE_GATE: Block;
static BIRCH_FENCE_GATE: Block;
static JUNGLE_FENCE_GATE: Block;
static ACACIA_FENCE_GATE: Block;
static CHERRY_FENCE_GATE: Block;
static DARK_OAK_FENCE_GATE: Block;
static MANGROVE_FENCE_GATE: Block;
static BAMBOO_FENCE_GATE: Block;
static SPRUCE_FENCE: Block;
static BIRCH_FENCE: Block;
static JUNGLE_FENCE: Block;
static ACACIA_FENCE: Block;
static CHERRY_FENCE: Block;
static DARK_OAK_FENCE: Block;
static MANGROVE_FENCE: Block;
static BAMBOO_FENCE: Block;
static SPRUCE_DOOR: Block;
static BIRCH_DOOR: Block;
static JUNGLE_DOOR: Block;
static ACACIA_DOOR: Block;
static CHERRY_DOOR: Block;
static DARK_OAK_DOOR: Block;
static MANGROVE_DOOR: Block;
static BAMBOO_DOOR: Block;
static END_ROD: Block;
static CHORUS_PLANT: Block;
static CHORUS_FLOWER: Block;
static PURPUR_BLOCK: Block;
static PURPUR_PILLAR: Block;
static PURPUR_STAIRS: Block;
static END_STONE_BRICKS: Block;
static TORCHFLOWER_CROP: Block;
static PITCHER_CROP: Block;
static PITCHER_PLANT: Block;
static BEETROOTS: Block;
static DIRT_PATH: Block;
static END_GATEWAY: Block;
static REPEATING_COMMAND_BLOCK: Block;
static CHAIN_COMMAND_BLOCK: Block;
static FROSTED_ICE: Block;
static MAGMA_BLOCK: Block;
static NETHER_WART_BLOCK: Block;
static RED_NETHER_BRICKS: Block;
static BONE_BLOCK: Block;
static STRUCTURE_VOID: Block;
static OBSERVER: Block;
static SHULKER_BOX: Block;
static WHITE_SHULKER_BOX: Block;
static ORANGE_SHULKER_BOX: Block;
static MAGENTA_SHULKER_BOX: Block;
static LIGHT_BLUE_SHULKER_BOX: Block;
static YELLOW_SHULKER_BOX: Block;
static LIME_SHULKER_BOX: Block;
static PINK_SHULKER_BOX: Block;
static GRAY_SHULKER_BOX: Block;
static LIGHT_GRAY_SHULKER_BOX: Block;
static CYAN_SHULKER_BOX: Block;
static PURPLE_SHULKER_BOX: Block;
static BLUE_SHULKER_BOX: Block;
static BROWN_SHULKER_BOX: Block;
static GREEN_SHULKER_BOX: Block;
static RED_SHULKER_BOX: Block;
static BLACK_SHULKER_BOX: Block;
static WHITE_GLAZED_TERRACOTTA: Block;
static ORANGE_GLAZED_TERRACOTTA: Block;
static MAGENTA_GLAZED_TERRACOTTA: Block;
static LIGHT_BLUE_GLAZED_TERRACOTTA: Block;
static YELLOW_GLAZED_TERRACOTTA: Block;
static LIME_GLAZED_TERRACOTTA: Block;
static PINK_GLAZED_TERRACOTTA: Block;
static GRAY_GLAZED_TERRACOTTA: Block;
static LIGHT_GRAY_GLAZED_TERRACOTTA: Block;
static CYAN_GLAZED_TERRACOTTA: Block;
static PURPLE_GLAZED_TERRACOTTA: Block;
static BLUE_GLAZED_TERRACOTTA: Block;
static BROWN_GLAZED_TERRACOTTA: Block;
static GREEN_GLAZED_TERRACOTTA: Block;
static RED_GLAZED_TERRACOTTA: Block;
static BLACK_GLAZED_TERRACOTTA: Block;
static WHITE_CONCRETE: Block;
static ORANGE_CONCRETE: Block;
static MAGENTA_CONCRETE: Block;
static LIGHT_BLUE_CONCRETE: Block;
static YELLOW_CONCRETE: Block;
static LIME_CONCRETE: Block;
static PINK_CONCRETE: Block;
static GRAY_CONCRETE: Block;
static LIGHT_GRAY_CONCRETE: Block;
static CYAN_CONCRETE: Block;
static PURPLE_CONCRETE: Block;
static BLUE_CONCRETE: Block;
static BROWN_CONCRETE: Block;
static GREEN_CONCRETE: Block;
static RED_CONCRETE: Block;
static BLACK_CONCRETE: Block;
static WHITE_CONCRETE_POWDER: Block;
static ORANGE_CONCRETE_POWDER: Block;
static MAGENTA_CONCRETE_POWDER: Block;
static LIGHT_BLUE_CONCRETE_POWDER: Block;
static YELLOW_CONCRETE_POWDER: Block;
static LIME_CONCRETE_POWDER: Block;
static PINK_CONCRETE_POWDER: Block;
static GRAY_CONCRETE_POWDER: Block;
static LIGHT_GRAY_CONCRETE_POWDER: Block;
static CYAN_CONCRETE_POWDER: Block;
static PURPLE_CONCRETE_POWDER: Block;
static BLUE_CONCRETE_POWDER: Block;
static BROWN_CONCRETE_POWDER: Block;
static GREEN_CONCRETE_POWDER: Block;
static RED_CONCRETE_POWDER: Block;
static BLACK_CONCRETE_POWDER: Block;
static KELP: Block;
static KELP_PLANT: Block;
static DRIED_KELP_BLOCK: Block;
static TURTLE_EGG: Block;
static SNIFFER_EGG: Block;
static DEAD_TUBE_CORAL_BLOCK: Block;
static DEAD_BRAIN_CORAL_BLOCK: Block;
static DEAD_BUBBLE_CORAL_BLOCK: Block;
static DEAD_FIRE_CORAL_BLOCK: Block;
static DEAD_HORN_CORAL_BLOCK: Block;
static TUBE_CORAL_BLOCK: Block;
static BRAIN_CORAL_BLOCK: Block;
static BUBBLE_CORAL_BLOCK: Block;
static FIRE_CORAL_BLOCK: Block;
static HORN_CORAL_BLOCK: Block;
static DEAD_TUBE_CORAL: Block;
static DEAD_BRAIN_CORAL: Block;
static DEAD_BUBBLE_CORAL: Block;
static DEAD_FIRE_CORAL: Block;
static DEAD_HORN_CORAL: Block;
static TUBE_CORAL: Block;
static BRAIN_CORAL: Block;
static BUBBLE_CORAL: Block;
static FIRE_CORAL: Block;
static HORN_CORAL: Block;
static DEAD_TUBE_CORAL_FAN: Block;
static DEAD_BRAIN_CORAL_FAN: Block;
static DEAD_BUBBLE_CORAL_FAN: Block;
static DEAD_FIRE_CORAL_FAN: Block;
static DEAD_HORN_CORAL_FAN: Block;
static TUBE_CORAL_FAN: Block;
static BRAIN_CORAL_FAN: Block;
static BUBBLE_CORAL_FAN: Block;
static FIRE_CORAL_FAN: Block;
static HORN_CORAL_FAN: Block;
static DEAD_TUBE_CORAL_WALL_FAN: Block;
static DEAD_BRAIN_CORAL_WALL_FAN: Block;
static DEAD_BUBBLE_CORAL_WALL_FAN: Block;
static DEAD_FIRE_CORAL_WALL_FAN: Block;
static DEAD_HORN_CORAL_WALL_FAN: Block;
static TUBE_CORAL_WALL_FAN: Block;
static BRAIN_CORAL_WALL_FAN: Block;
static BUBBLE_CORAL_WALL_FAN: Block;
static FIRE_CORAL_WALL_FAN: Block;
static HORN_CORAL_WALL_FAN: Block;
static SEA_PICKLE: Block;
static BLUE_ICE: Block;
static CONDUIT: Block;
static BAMBOO_SAPLING: Block;
static BAMBOO: Block;
static POTTED_BAMBOO: Block;
static VOID_AIR: Block;
static CAVE_AIR: Block;
static BUBBLE_COLUMN: Block;
static POLISHED_GRANITE_STAIRS: Block;
static SMOOTH_RED_SANDSTONE_STAIRS: Block;
static MOSSY_STONE_BRICK_STAIRS: Block;
static POLISHED_DIORITE_STAIRS: Block;
static MOSSY_COBBLESTONE_STAIRS: Block;
static END_STONE_BRICK_STAIRS: Block;
static STONE_STAIRS: Block;
static SMOOTH_SANDSTONE_STAIRS: Block;
static SMOOTH_QUARTZ_STAIRS: Block;
static GRANITE_STAIRS: Block;
static ANDESITE_STAIRS: Block;
static RED_NETHER_BRICK_STAIRS: Block;
static POLISHED_ANDESITE_STAIRS: Block;
static DIORITE_STAIRS: Block;
static POLISHED_GRANITE_SLAB: Block;
static SMOOTH_RED_SANDSTONE_SLAB: Block;
static MOSSY_STONE_BRICK_SLAB: Block;
static POLISHED_DIORITE_SLAB: Block;
static MOSSY_COBBLESTONE_SLAB: Block;
static END_STONE_BRICK_SLAB: Block;
static SMOOTH_SANDSTONE_SLAB: Block;
static SMOOTH_QUARTZ_SLAB: Block;
static GRANITE_SLAB: Block;
static ANDESITE_SLAB: Block;
static RED_NETHER_BRICK_SLAB: Block;
static POLISHED_ANDESITE_SLAB: Block;
static DIORITE_SLAB: Block;
static BRICK_WALL: Block;
static PRISMARINE_WALL: Block;
static RED_SANDSTONE_WALL: Block;
static MOSSY_STONE_BRICK_WALL: Block;
static GRANITE_WALL: Block;
static STONE_BRICK_WALL: Block;
static MUD_BRICK_WALL: Block;
static NETHER_BRICK_WALL: Block;
static ANDESITE_WALL: Block;
static RED_NETHER_BRICK_WALL: Block;
static SANDSTONE_WALL: Block;
static END_STONE_BRICK_WALL: Block;
static DIORITE_WALL: Block;
static SCAFFOLDING: Block;
static LOOM: Block;
static BARREL: Block;
static SMOKER: Block;
static BLAST_FURNACE: Block;
static CARTOGRAPHY_TABLE: Block;
static FLETCHING_TABLE: Block;
static GRINDSTONE: Block;
static LECTERN: Block;
static SMITHING_TABLE: Block;
static STONECUTTER: Block;
static BELL: Block;
static LANTERN: Block;
static SOUL_LANTERN: Block;
static CAMPFIRE: Block;
static SOUL_CAMPFIRE: Block;
static SWEET_BERRY_BUSH: Block;
static WARPED_STEM: Block;
static STRIPPED_WARPED_STEM: Block;
static WARPED_HYPHAE: Block;
static STRIPPED_WARPED_HYPHAE: Block;
static WARPED_NYLIUM: Block;
static WARPED_FUNGUS: Block;
static WARPED_WART_BLOCK: Block;
static WARPED_ROOTS: Block;
static NETHER_SPROUTS: Block;
static CRIMSON_STEM: Block;
static STRIPPED_CRIMSON_STEM: Block;
static CRIMSON_HYPHAE: Block;
static STRIPPED_CRIMSON_HYPHAE: Block;
static CRIMSON_NYLIUM: Block;
static CRIMSON_FUNGUS: Block;
static SHROOMLIGHT: Block;
static WEEPING_VINES: Block;
static WEEPING_VINES_PLANT: Block;
static TWISTING_VINES: Block;
static TWISTING_VINES_PLANT: Block;
static CRIMSON_ROOTS: Block;
static CRIMSON_PLANKS: Block;
static WARPED_PLANKS: Block;
static CRIMSON_SLAB: Block;
static WARPED_SLAB: Block;
static CRIMSON_PRESSURE_PLATE: Block;
static WARPED_PRESSURE_PLATE: Block;
static CRIMSON_FENCE: Block;
static WARPED_FENCE: Block;
static CRIMSON_TRAPDOOR: Block;
static WARPED_TRAPDOOR: Block;
static CRIMSON_FENCE_GATE: Block;
static WARPED_FENCE_GATE: Block;
static CRIMSON_STAIRS: Block;
static WARPED_STAIRS: Block;
static CRIMSON_BUTTON: Block;
static WARPED_BUTTON: Block;
static CRIMSON_DOOR: Block;
static WARPED_DOOR: Block;
static CRIMSON_SIGN: Block;
static WARPED_SIGN: Block;
static CRIMSON_WALL_SIGN: Block;
static WARPED_WALL_SIGN: Block;
static STRUCTURE_BLOCK: Block;
static JIGSAW: Block;
static COMPOSTER: Block;
static TARGET: Block;
static BEE_NEST: Block;
static BEEHIVE: Block;
static HONEY_BLOCK: Block;
static HONEYCOMB_BLOCK: Block;
static NETHERITE_BLOCK: Block;
static ANCIENT_DEBRIS: Block;
static CRYING_OBSIDIAN: Block;
static RESPAWN_ANCHOR: Block;
static POTTED_CRIMSON_FUNGUS: Block;
static POTTED_WARPED_FUNGUS: Block;
static POTTED_CRIMSON_ROOTS: Block;
static POTTED_WARPED_ROOTS: Block;
static LODESTONE: Block;
static BLACKSTONE: Block;
static BLACKSTONE_STAIRS: Block;
static BLACKSTONE_WALL: Block;
static BLACKSTONE_SLAB: Block;
static POLISHED_BLACKSTONE: Block;
static POLISHED_BLACKSTONE_BRICKS: Block;
static CRACKED_POLISHED_BLACKSTONE_BRICKS: Block;
static CHISELED_POLISHED_BLACKSTONE: Block;
static POLISHED_BLACKSTONE_BRICK_SLAB: Block;
static POLISHED_BLACKSTONE_BRICK_STAIRS: Block;
static POLISHED_BLACKSTONE_BRICK_WALL: Block;
static GILDED_BLACKSTONE: Block;
static POLISHED_BLACKSTONE_STAIRS: Block;
static POLISHED_BLACKSTONE_SLAB: Block;
static POLISHED_BLACKSTONE_PRESSURE_PLATE: Block;
static POLISHED_BLACKSTONE_BUTTON: Block;
static POLISHED_BLACKSTONE_WALL: Block;
static CHISELED_NETHER_BRICKS: Block;
static CRACKED_NETHER_BRICKS: Block;
static QUARTZ_BRICKS: Block;
static CANDLE: Block;
static WHITE_CANDLE: Block;
static ORANGE_CANDLE: Block;
static MAGENTA_CANDLE: Block;
static LIGHT_BLUE_CANDLE: Block;
static YELLOW_CANDLE: Block;
static LIME_CANDLE: Block;
static PINK_CANDLE: Block;
static GRAY_CANDLE: Block;
static LIGHT_GRAY_CANDLE: Block;
static CYAN_CANDLE: Block;
static PURPLE_CANDLE: Block;
static BLUE_CANDLE: Block;
static BROWN_CANDLE: Block;
static GREEN_CANDLE: Block;
static RED_CANDLE: Block;
static BLACK_CANDLE: Block;
static CANDLE_CAKE: Block;
static WHITE_CANDLE_CAKE: Block;
static ORANGE_CANDLE_CAKE: Block;
static MAGENTA_CANDLE_CAKE: Block;
static LIGHT_BLUE_CANDLE_CAKE: Block;
static YELLOW_CANDLE_CAKE: Block;
static LIME_CANDLE_CAKE: Block;
static PINK_CANDLE_CAKE: Block;
static GRAY_CANDLE_CAKE: Block;
static LIGHT_GRAY_CANDLE_CAKE: Block;
static CYAN_CANDLE_CAKE: Block;
static PURPLE_CANDLE_CAKE: Block;
static BLUE_CANDLE_CAKE: Block;
static BROWN_CANDLE_CAKE: Block;
static GREEN_CANDLE_CAKE: Block;
static RED_CANDLE_CAKE: Block;
static BLACK_CANDLE_CAKE: Block;
static AMETHYST_BLOCK: Block;
static BUDDING_AMETHYST: Block;
static AMETHYST_CLUSTER: Block;
static LARGE_AMETHYST_BUD: Block;
static MEDIUM_AMETHYST_BUD: Block;
static SMALL_AMETHYST_BUD: Block;
static TUFF: Block;
static CALCITE: Block;
static TINTED_GLASS: Block;
static POWDER_SNOW: Block;
static SCULK_SENSOR: Block;
static CALIBRATED_SCULK_SENSOR: Block;
static SCULK: Block;
static SCULK_VEIN: Block;
static SCULK_CATALYST: Block;
static SCULK_SHRIEKER: Block;
static OXIDIZED_COPPER: Block;
static WEATHERED_COPPER: Block;
static EXPOSED_COPPER: Block;
static COPPER_BLOCK: Block;
static COPPER_ORE: Block;
static DEEPSLATE_COPPER_ORE: Block;
static OXIDIZED_CUT_COPPER: Block;
static WEATHERED_CUT_COPPER: Block;
static EXPOSED_CUT_COPPER: Block;
static CUT_COPPER: Block;
static OXIDIZED_CUT_COPPER_STAIRS: Block;
static WEATHERED_CUT_COPPER_STAIRS: Block;
static EXPOSED_CUT_COPPER_STAIRS: Block;
static CUT_COPPER_STAIRS: Block;
static OXIDIZED_CUT_COPPER_SLAB: Block;
static WEATHERED_CUT_COPPER_SLAB: Block;
static EXPOSED_CUT_COPPER_SLAB: Block;
static CUT_COPPER_SLAB: Block;
static WAXED_COPPER_BLOCK: Block;
static WAXED_WEATHERED_COPPER: Block;
static WAXED_EXPOSED_COPPER: Block;
static WAXED_OXIDIZED_COPPER: Block;
static WAXED_OXIDIZED_CUT_COPPER: Block;
static WAXED_WEATHERED_CUT_COPPER: Block;
static WAXED_EXPOSED_CUT_COPPER: Block;
static WAXED_CUT_COPPER: Block;
static WAXED_OXIDIZED_CUT_COPPER_STAIRS: Block;
static WAXED_WEATHERED_CUT_COPPER_STAIRS: Block;
static WAXED_EXPOSED_CUT_COPPER_STAIRS: Block;
static WAXED_CUT_COPPER_STAIRS: Block;
static WAXED_OXIDIZED_CUT_COPPER_SLAB: Block;
static WAXED_WEATHERED_CUT_COPPER_SLAB: Block;
static WAXED_EXPOSED_CUT_COPPER_SLAB: Block;
static WAXED_CUT_COPPER_SLAB: Block;
static LIGHTNING_ROD: Block;
static POINTED_DRIPSTONE: Block;
static DRIPSTONE_BLOCK: Block;
static CAVE_VINES: Block;
static CAVE_VINES_PLANT: Block;
static SPORE_BLOSSOM: Block;
static AZALEA: Block;
static FLOWERING_AZALEA: Block;
static MOSS_CARPET: Block;
static PINK_PETALS: Block;
static MOSS_BLOCK: Block;
static BIG_DRIPLEAF: Block;
static BIG_DRIPLEAF_STEM: Block;
static SMALL_DRIPLEAF: Block;
static HANGING_ROOTS: Block;
static ROOTED_DIRT: Block;
static MUD: Block;
static DEEPSLATE: Block;
static COBBLED_DEEPSLATE: Block;
static COBBLED_DEEPSLATE_STAIRS: Block;
static COBBLED_DEEPSLATE_SLAB: Block;
static COBBLED_DEEPSLATE_WALL: Block;
static POLISHED_DEEPSLATE: Block;
static POLISHED_DEEPSLATE_STAIRS: Block;
static POLISHED_DEEPSLATE_SLAB: Block;
static POLISHED_DEEPSLATE_WALL: Block;
static DEEPSLATE_TILES: Block;
static DEEPSLATE_TILE_STAIRS: Block;
static DEEPSLATE_TILE_SLAB: Block;
static DEEPSLATE_TILE_WALL: Block;
static DEEPSLATE_BRICKS: Block;
static DEEPSLATE_BRICK_STAIRS: Block;
static DEEPSLATE_BRICK_SLAB: Block;
static DEEPSLATE_BRICK_WALL: Block;
static CHISELED_DEEPSLATE: Block;
static CRACKED_DEEPSLATE_BRICKS: Block;
static CRACKED_DEEPSLATE_TILES: Block;
static INFESTED_DEEPSLATE: Block;
static SMOOTH_BASALT: Block;
static RAW_IRON_BLOCK: Block;
static RAW_COPPER_BLOCK: Block;
static RAW_GOLD_BLOCK: Block;
static POTTED_AZALEA_BUSH: Block;
static POTTED_FLOWERING_AZALEA_BUSH: Block;
static OCHRE_FROGLIGHT: Block;
static VERDANT_FROGLIGHT: Block;
static PEARLESCENT_FROGLIGHT: Block;
static FROGSPAWN: Block;
static REINFORCED_DEEPSLATE: Block;
static DECORATED_POT: Block;
}

//net.minecraft.network.packet.c2s.play.BookUpdateC2SPacket
class BookUpdateC2SPacket extends JObject, Packet{
 apply(serverPlayPacketListener: ServerPlayPacketListener): void;
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
 getSlot(): number;
 getTitle(): Optional;
 getPages(): List;
}
class Static_BookUpdateC2SPacket {
static method_37443(buf2: PacketByteBuf): string;
static method_37441(buf2: PacketByteBuf,title: string): void;
static method_37446(buf2: PacketByteBuf): string;
static method_37444(buf2: PacketByteBuf,page: string): void;
static field_34038: number;
static MAX_TITLE_LENGTH: number;
static MAX_PAGE_LENGTH: number;
static MAX_PAGES: number;
}

//net.minecraft.client.sound.Source
class Source extends JObject{
 resume(): void;
 stop(): void;
 close(): void;
 tick(): void;
 setStream(stream: AudioStream): void;
 isStopped(): boolean;
 setBuffer(sound: StaticSound): void;
 setPitch(pitch: number): void;
 play(): void;
 setPosition(pos: Vec3d): void;
 isPlaying(): boolean;
 setLooping(looping: boolean): void;
 setRelative(relative: boolean): void;
 setAttenuation(attenuation: number): void;
 pause(): void;
 disableAttenuation(): void;
 setVolume(volume: number): void;
}
class Static_Source {
static create(): Source;
static getBufferSize(format: AudioFormat,time: number): number;
static LOGGER: Logger;
static field_31895: number;
static field_31894: number;
}

//net.minecraft.command.argument.UuidArgumentType
class UuidArgumentType extends JObject, ArgumentType{
 parse(stringReader: StringReader): UUID;
 parse(reader: StringReader): Object;
 getExamples(): Collection;
}
class Static_UuidArgumentType {
static uuid(): UuidArgumentType;
static getUuid(context: CommandContext,name: string): UUID;
static INVALID_UUID: SimpleCommandExceptionType;
static EXAMPLES: Collection;
static VALID_CHARACTERS: Pattern;
}

//net.minecraft.server.command.CommandManager$1


//net.minecraft.world.tick.SerializableTickScheduler
interface SerializableTickScheduler extends JObject{
 toNbt(time: long,typeToNameFunction: Function): NbtElement;
}

//net.minecraft.world.gen.densityfunction.DensityFunction$NoisePos
interface DensityFunction_NoisePos extends JObject{
 blockX(): number;
 blockY(): number;
 blockZ(): number;
 getBlender(): Blender;
}

//net.minecraft.client.render.Frustum
class Frustum extends JObject{
 isVisible(box: Box): boolean;
 setPosition(cameraX: number,cameraY: number,cameraZ: number): void;
 coverBoxAroundSetPosition(boxSize: number): Frustum;
}
class Static_Frustum {
static RECESSION_SCALE: number;
}

//net.minecraft.server.world.ChunkTaskPrioritySystem
class ChunkTaskPrioritySystem extends JObject, ChunkHolder_LevelUpdateListener, AutoCloseable{
 close(): void;
 createExecutor(executor: MessageListener,addBlocker: boolean): MessageListener;
 getDebugString(): string;
 updateLevel(pos: ChunkPos,levelGetter: IntSupplier,targetLevel: number,levelSetter: IntConsumer): void;
 createUnblockingExecutor(executor: MessageListener): MessageListener;
 shouldDelayShutdown(): boolean;
}
class Static_ChunkTaskPrioritySystem {
static createTask(taskFunction: Function,pos: long,lastLevelUpdatedToProvider: IntSupplier): ChunkTaskPrioritySystem_Task;
static createTask(holder: ChunkHolder,taskFunction: Function): ChunkTaskPrioritySystem_Task;
static method_17613(i: number,actor: MessageListener): LevelPrioritizedQueue;
static method_17628(runnable: Runnable,yield: MessageListener): Runnable;
static createMessage(holder: ChunkHolder,task: Runnable): ChunkTaskPrioritySystem_Task;
static createMessage(task: Runnable,pos: long,lastLevelUpdatedToProvider: IntSupplier): ChunkTaskPrioritySystem_Task;
static method_21681(pos: Long): string;
static method_21682(entry: Map_Entry): string;
static method_17634(runnable: Runnable,messageListener: MessageListener): void;
static method_17619(messageListener: MessageListener,executeOrAddBlocking: Either): CompletableFuture;
static method_17280(i: number,chunkPos: ChunkPos,j: number,queue: LevelPrioritizedQueue): void;
static method_41236(i: number): CompletableFuture[];
static method_17625(addBlocking: Runnable): CompletableFuture;
static createUnblockingMessage(task: Runnable,pos: long,removeTask: boolean): ChunkTaskPrioritySystem_UnblockingMessage;
static LOGGER: Logger;
}

//net.minecraft.util.logging.UncaughtExceptionLogger
class UncaughtExceptionLogger extends JObject, Thread_UncaughtExceptionHandler{
 uncaughtException(thread: Thread,throwable: Throwable): void;
}

//net.minecraft.world.gen.feature.BasaltColumnsFeatureConfig
class BasaltColumnsFeatureConfig extends JObject, FeatureConfig{
 getHeight(): IntProvider;
 getReach(): IntProvider;
}
class Static_BasaltColumnsFeatureConfig {
static method_30392(config: BasaltColumnsFeatureConfig): IntProvider;
static method_30393(instance: RecordCodecBuilder_Instance): App;
static method_30395(config: BasaltColumnsFeatureConfig): IntProvider;
static CODEC: Codec;
}

//net.minecraft.server.command.TimeCommand
class TimeCommand extends JObject{
}
class Static_TimeCommand {
static register(dispatcher: CommandDispatcher): void;
static executeQuery(source: ServerCommandSource,time: number): number;
static method_13783(context: CommandContext): number;
static method_13794(context: CommandContext): number;
static method_13791(source: ServerCommandSource): boolean;
static method_52125(i: number): Text;
static method_13792(context: CommandContext): number;
static method_13797(context: CommandContext): number;
static method_13789(context: CommandContext): number;
static getDayTime(world: ServerWorld): number;
static method_13785(context: CommandContext): number;
static method_13795(context: CommandContext): number;
static method_13790(context: CommandContext): number;
static method_13793(context: CommandContext): number;
static executeAdd(source: ServerCommandSource,time: number): number;
static executeSet(source: ServerCommandSource,time: number): number;
static method_52123(i: number): Text;
static method_52124(i: number): Text;
}

//net.minecraft.network.packet.c2s.play.UpdateDifficultyC2SPacket
class UpdateDifficultyC2SPacket extends JObject, Packet{
 apply(listener: PacketListener): void;
 apply(serverPlayPacketListener: ServerPlayPacketListener): void;
 write(buf: PacketByteBuf): void;
 getDifficulty(): Difficulty;
}

//net.minecraft.server.dedicated.command.OpCommand
class OpCommand extends JObject{
}
class Static_OpCommand {
static register(dispatcher: CommandDispatcher): void;
static op(source: ServerCommandSource,targets: Collection): number;
static method_13470(source: ServerCommandSource): boolean;
static method_13467(context: CommandContext,builder: SuggestionsBuilder): CompletableFuture;
static method_13468(context: CommandContext): number;
static method_13469(player: ServerPlayerEntity): string;
static method_13466(playerManager: PlayerManager,player: ServerPlayerEntity): boolean;
static method_52012(collection: Collection): Text;
static ALREADY_OPPED_EXCEPTION: SimpleCommandExceptionType;
}

//net.minecraft.command.CommandSource$RelativePosition
class CommandSource_RelativePosition extends JObject{
 x: string;
 y: string;
 z: string;
}
class Static_CommandSource_RelativePosition {
static ZERO_LOCAL: CommandSource_RelativePosition;
static ZERO_WORLD: CommandSource_RelativePosition;
}

//net.minecraft.command.argument.RegistryEntryPredicateArgumentType
class RegistryEntryPredicateArgumentType extends JObject, ArgumentType{
 parse(reader: StringReader): Object;
 parse(stringReader: StringReader): RegistryEntryPredicateArgumentType_EntryPredicate;
 getExamples(): Collection;
 listSuggestions(context: CommandContext,builder: SuggestionsBuilder): CompletableFuture;
}
class Static_RegistryEntryPredicateArgumentType {
static method_45638(entryPredicate: RegistryEntryPredicateArgumentType_EntryPredicate,registryKey: RegistryKey): CommandSyntaxException;
static method_45633(registryKey: RegistryKey,entryList: RegistryEntryList_Named): CommandSyntaxException;
static method_45640(tag: Object,type: Object,expectedType: Object): Message;
static method_45639(tag: Object,type: Object): Message;
static method_45632(registryKey: RegistryKey,entry: RegistryEntry_Reference): CommandSyntaxException;
static registryEntryPredicate(registryRef: CommandRegistryAccess,registryAccess: RegistryKey): RegistryEntryPredicateArgumentType;
static getRegistryEntryPredicate(context: CommandContext,name: string,registryRef: RegistryKey): RegistryEntryPredicateArgumentType_EntryPredicate;
static EXAMPLES: Collection;
static NOT_FOUND_EXCEPTION: Dynamic2CommandExceptionType;
static WRONG_TYPE_EXCEPTION: Dynamic3CommandExceptionType;
}

//net.minecraft.server.network.DebugInfoSender
class DebugInfoSender extends JObject{
}
class Static_DebugInfoSender {
static format(world: ServerWorld,object: Object): string;
static sendPathfindingData(world: World,mob: MobEntity,path: Path,nodeReachProximity: number): void;
static sendToAll(world: ServerWorld,buf: PacketByteBuf,channel: Identifier): void;
static sendGameEvent(world: World,event: GameEvent,pos: Vec3d): void;
static sendPoi(world: ServerWorld,pos: BlockPos): void;
static sendPoiRemoval(world: ServerWorld,pos: BlockPos): void;
static sendNeighborUpdate(world: World,pos: BlockPos): void;
static addGameTestMarker(world: ServerWorld,pos: BlockPos,message: string,color: number,duration: number): void;
static sendStructureStart(world: StructureWorldAccess,structureStart: StructureStart): void;
static sendGoalSelector(world: World,mob: MobEntity,goalSelector: GoalSelector): void;
static sendPoiAddition(world: ServerWorld,pos: BlockPos): void;
static sendRaids(server: ServerWorld,raids: Collection): void;
static sendBeeDebugData(bee: BeeEntity): void;
static writeBrain(entity: LivingEntity,buf: PacketByteBuf): void;
static method_36164(buf2: PacketByteBuf,activity: Activity): void;
static sendBrainDebugData(living: LivingEntity): void;
static method_43893(buf2: PacketByteBuf,path: Path): void;
static listMemories(entity: LivingEntity,currentTime: long): List;
static method_36165(buf2: PacketByteBuf,memory: string): void;
static method_36160(list: List,string: string,type: VillageGossipType,value: Integer): void;
static method_43894(packetByteBuf: PacketByteBuf,path: Path): void;
static method_36163(buf: PacketByteBuf,raid: Raid): void;
static method_36162(buf: PacketByteBuf,goal: PrioritizedGoal): void;
static method_36161(list: List,uuid: UUID,gossips: Object2IntMap): void;
static method_36159(registryEntry: RegistryEntry): boolean;
static method_36155(world: ServerWorld,poi: PointOfInterest): void;
static method_44135(registryKey: RegistryKey): string;
static sendChunkWatchingChange(world: ServerWorld,pos: ChunkPos): void;
static sendBeehiveDebugData(world: World,pos: BlockPos,state: BlockState,blockEntity: BeehiveBlockEntity): void;
static sendPointOfInterest(world: ServerWorld,pos: BlockPos): void;
static sendGameEventListener(world: World,eventListener: GameEventListener): void;
static clearGameTestMarkers(world: ServerWorld): void;
static LOGGER: Logger;
}

//net.minecraft.resource.featuretoggle.FeatureManager
class FeatureManager extends JObject{
 contains(features: FeatureSet): boolean;
 featureSetOf(features: Iterable,unknownFlagConsumer: Consumer): FeatureSet;
 featureSetOf(features: FeatureFlag[]): FeatureSet;
 featureSetOf(features: Iterable): FeatureSet;
 getCodec(): Codec;
 toId(features: FeatureSet): Set;
 getFeatureSet(): FeatureSet;
}
class Static_FeatureManager {
static method_45384(feature: Identifier): void;
static method_45386(featureSet: FeatureSet,set: Set,identifier: Identifier,featureFlag: FeatureFlag): void;
static method_49492(set: Set): string;
static LOGGER: Logger;
}

//net.minecraft.client.texture.TextureStitcher$Stitchable
interface TextureStitcher_Stitchable extends JObject{
 getId(): Identifier;
 getWidth(): number;
 getHeight(): number;
}

//net.minecraft.stat.StatType
class StatType extends JObject, Iterable{
 getName(): Text;
 iterator(): Iterator;
 getRegistry(): Registry;
 hasStat(key: Object): boolean;
 getTranslationKey(): string;
 getOrCreateStat(key: Object,formatter: StatFormatter): Stat;
 getOrCreateStat(key: Object): Stat;
}

//net.minecraft.client.render.entity.model.ModelWithHat
interface ModelWithHat extends JObject{
 setHatVisible(visible: boolean): void;
}

//net.minecraft.command.argument.serialize.FloatArgumentSerializer
class FloatArgumentSerializer extends JObject, ArgumentSerializer{
 getArgumentTypeProperties(argumentType: ArgumentType): ArgumentSerializer_ArgumentTypeProperties;
 getArgumentTypeProperties(floatArgumentType: FloatArgumentType): FloatArgumentSerializer_Properties;
 fromPacket(buf: PacketByteBuf): ArgumentSerializer_ArgumentTypeProperties;
 fromPacket(packetByteBuf: PacketByteBuf): FloatArgumentSerializer_Properties;
 writePacket(properties: ArgumentSerializer_ArgumentTypeProperties,buf: PacketByteBuf): void;
 writePacket(properties: FloatArgumentSerializer_Properties,packetByteBuf: PacketByteBuf): void;
 writeJson(properties: FloatArgumentSerializer_Properties,jsonObject: JsonObject): void;
 writeJson(properties: ArgumentSerializer_ArgumentTypeProperties,json: JsonObject): void;
}

//net.minecraft.util.profiling.jfr.sample.NetworkIoStatistics
class NetworkIoStatistics extends JObject{
 getTotalSize(): long;
 getCountPerSecond(): number;
 getBytesPerSecond(): number;
 getTopContributors(): List;
 getTotalCount(): long;
}
class Static_NetworkIoStatistics {
static method_39443(): NetworkIoStatistics_PacketStatistics;
}

//net.minecraft.network.packet.s2c.play.MapUpdateS2CPacket
class MapUpdateS2CPacket extends JObject, Packet{
 apply(listener: PacketListener): void;
 apply(mapState: MapState): void;
 apply(clientPlayPacketListener: ClientPlayPacketListener): void;
 write(buf: PacketByteBuf): void;
 getId(): number;
 isLocked(): boolean;
 getScale(): byte;
}
class Static_MapUpdateS2CPacket {
static method_43882(buf2: PacketByteBuf): List;
static method_43881(buf2: PacketByteBuf,icons: List): void;
static method_43883(buf3: PacketByteBuf): MapIcon;
static method_34136(b: PacketByteBuf,icon: MapIcon): void;
}

//net.minecraft.client.color.item.ItemColorProvider
interface ItemColorProvider extends JObject{
 getColor(stack: ItemStack,tintIndex: number): number;
}

//net.minecraft.sound.SoundEvents
class SoundEvents extends JObject{
}
class Static_SoundEvents {
static register(id: Identifier,soundId: Identifier): SoundEvent;
static register(id: Identifier,soundId: Identifier,distanceToTravel: number): RegistryEntry;
static register(id: string): SoundEvent;
static register(id: Identifier): SoundEvent;
static registerReference(id: Identifier,soundId: Identifier): RegistryEntry_Reference;
static registerReference(id: Identifier): RegistryEntry_Reference;
static registerReference(id: string): RegistryEntry_Reference;
static registerGoatHornSounds(): ImmutableList;
static method_43517(variant: number): RegistryEntry_Reference;
static ENTITY_ALLAY_AMBIENT_WITH_ITEM: SoundEvent;
static ENTITY_ALLAY_AMBIENT_WITHOUT_ITEM: SoundEvent;
static ENTITY_ALLAY_DEATH: SoundEvent;
static ENTITY_ALLAY_HURT: SoundEvent;
static ENTITY_ALLAY_ITEM_GIVEN: SoundEvent;
static ENTITY_ALLAY_ITEM_TAKEN: SoundEvent;
static ENTITY_ALLAY_ITEM_THROWN: SoundEvent;
static AMBIENT_CAVE: RegistryEntry_Reference;
static AMBIENT_BASALT_DELTAS_ADDITIONS: RegistryEntry_Reference;
static AMBIENT_BASALT_DELTAS_LOOP: RegistryEntry_Reference;
static AMBIENT_BASALT_DELTAS_MOOD: RegistryEntry_Reference;
static AMBIENT_CRIMSON_FOREST_ADDITIONS: RegistryEntry_Reference;
static AMBIENT_CRIMSON_FOREST_LOOP: RegistryEntry_Reference;
static AMBIENT_CRIMSON_FOREST_MOOD: RegistryEntry_Reference;
static AMBIENT_NETHER_WASTES_ADDITIONS: RegistryEntry_Reference;
static AMBIENT_NETHER_WASTES_LOOP: RegistryEntry_Reference;
static AMBIENT_NETHER_WASTES_MOOD: RegistryEntry_Reference;
static AMBIENT_SOUL_SAND_VALLEY_ADDITIONS: RegistryEntry_Reference;
static AMBIENT_SOUL_SAND_VALLEY_LOOP: RegistryEntry_Reference;
static AMBIENT_SOUL_SAND_VALLEY_MOOD: RegistryEntry_Reference;
static AMBIENT_WARPED_FOREST_ADDITIONS: RegistryEntry_Reference;
static AMBIENT_WARPED_FOREST_LOOP: RegistryEntry_Reference;
static AMBIENT_WARPED_FOREST_MOOD: RegistryEntry_Reference;
static AMBIENT_UNDERWATER_ENTER: SoundEvent;
static AMBIENT_UNDERWATER_EXIT: SoundEvent;
static AMBIENT_UNDERWATER_LOOP: SoundEvent;
static AMBIENT_UNDERWATER_LOOP_ADDITIONS: SoundEvent;
static AMBIENT_UNDERWATER_LOOP_ADDITIONS_RARE: SoundEvent;
static AMBIENT_UNDERWATER_LOOP_ADDITIONS_ULTRA_RARE: SoundEvent;
static BLOCK_AMETHYST_BLOCK_BREAK: SoundEvent;
static BLOCK_AMETHYST_BLOCK_CHIME: SoundEvent;
static BLOCK_AMETHYST_BLOCK_FALL: SoundEvent;
static BLOCK_AMETHYST_BLOCK_HIT: SoundEvent;
static BLOCK_AMETHYST_BLOCK_PLACE: SoundEvent;
static BLOCK_AMETHYST_BLOCK_RESONATE: SoundEvent;
static BLOCK_AMETHYST_BLOCK_STEP: SoundEvent;
static BLOCK_AMETHYST_CLUSTER_BREAK: SoundEvent;
static BLOCK_AMETHYST_CLUSTER_FALL: SoundEvent;
static BLOCK_AMETHYST_CLUSTER_HIT: SoundEvent;
static BLOCK_AMETHYST_CLUSTER_PLACE: SoundEvent;
static BLOCK_AMETHYST_CLUSTER_STEP: SoundEvent;
static BLOCK_ANCIENT_DEBRIS_BREAK: SoundEvent;
static BLOCK_ANCIENT_DEBRIS_STEP: SoundEvent;
static BLOCK_ANCIENT_DEBRIS_PLACE: SoundEvent;
static BLOCK_ANCIENT_DEBRIS_HIT: SoundEvent;
static BLOCK_ANCIENT_DEBRIS_FALL: SoundEvent;
static BLOCK_ANVIL_BREAK: SoundEvent;
static BLOCK_ANVIL_DESTROY: SoundEvent;
static BLOCK_ANVIL_FALL: SoundEvent;
static BLOCK_ANVIL_HIT: SoundEvent;
static BLOCK_ANVIL_LAND: SoundEvent;
static BLOCK_ANVIL_PLACE: SoundEvent;
static BLOCK_ANVIL_STEP: SoundEvent;
static BLOCK_ANVIL_USE: SoundEvent;
static ITEM_ARMOR_EQUIP_CHAIN: SoundEvent;
static ITEM_ARMOR_EQUIP_DIAMOND: SoundEvent;
static ITEM_ARMOR_EQUIP_ELYTRA: SoundEvent;
static ITEM_ARMOR_EQUIP_GENERIC: SoundEvent;
static ITEM_ARMOR_EQUIP_GOLD: SoundEvent;
static ITEM_ARMOR_EQUIP_IRON: SoundEvent;
static ITEM_ARMOR_EQUIP_LEATHER: SoundEvent;
static ITEM_ARMOR_EQUIP_NETHERITE: SoundEvent;
static ITEM_ARMOR_EQUIP_TURTLE: SoundEvent;
static ENTITY_ARMOR_STAND_BREAK: SoundEvent;
static ENTITY_ARMOR_STAND_FALL: SoundEvent;
static ENTITY_ARMOR_STAND_HIT: SoundEvent;
static ENTITY_ARMOR_STAND_PLACE: SoundEvent;
static ENTITY_ARROW_HIT: SoundEvent;
static ENTITY_ARROW_HIT_PLAYER: SoundEvent;
static ENTITY_ARROW_SHOOT: SoundEvent;
static ITEM_AXE_STRIP: SoundEvent;
static ITEM_AXE_SCRAPE: SoundEvent;
static ITEM_AXE_WAX_OFF: SoundEvent;
static ENTITY_AXOLOTL_ATTACK: SoundEvent;
static ENTITY_AXOLOTL_DEATH: SoundEvent;
static ENTITY_AXOLOTL_HURT: SoundEvent;
static ENTITY_AXOLOTL_IDLE_AIR: SoundEvent;
static ENTITY_AXOLOTL_IDLE_WATER: SoundEvent;
static ENTITY_AXOLOTL_SPLASH: SoundEvent;
static ENTITY_AXOLOTL_SWIM: SoundEvent;
static BLOCK_AZALEA_BREAK: SoundEvent;
static BLOCK_AZALEA_FALL: SoundEvent;
static BLOCK_AZALEA_HIT: SoundEvent;
static BLOCK_AZALEA_PLACE: SoundEvent;
static BLOCK_AZALEA_STEP: SoundEvent;
static BLOCK_AZALEA_LEAVES_BREAK: SoundEvent;
static BLOCK_AZALEA_LEAVES_FALL: SoundEvent;
static BLOCK_AZALEA_LEAVES_HIT: SoundEvent;
static BLOCK_AZALEA_LEAVES_PLACE: SoundEvent;
static BLOCK_AZALEA_LEAVES_STEP: SoundEvent;
static BLOCK_BAMBOO_BREAK: SoundEvent;
static BLOCK_BAMBOO_FALL: SoundEvent;
static BLOCK_BAMBOO_HIT: SoundEvent;
static BLOCK_BAMBOO_PLACE: SoundEvent;
static BLOCK_BAMBOO_STEP: SoundEvent;
static BLOCK_BAMBOO_SAPLING_BREAK: SoundEvent;
static BLOCK_BAMBOO_SAPLING_HIT: SoundEvent;
static BLOCK_BAMBOO_SAPLING_PLACE: SoundEvent;
static BLOCK_BAMBOO_WOOD_BREAK: SoundEvent;
static BLOCK_BAMBOO_WOOD_FALL: SoundEvent;
static BLOCK_BAMBOO_WOOD_HIT: SoundEvent;
static BLOCK_BAMBOO_WOOD_PLACE: SoundEvent;
static BLOCK_BAMBOO_WOOD_STEP: SoundEvent;
static BLOCK_BAMBOO_WOOD_DOOR_CLOSE: SoundEvent;
static BLOCK_BAMBOO_WOOD_DOOR_OPEN: SoundEvent;
static BLOCK_BAMBOO_WOOD_TRAPDOOR_CLOSE: SoundEvent;
static BLOCK_BAMBOO_WOOD_TRAPDOOR_OPEN: SoundEvent;
static BLOCK_BAMBOO_WOOD_BUTTON_CLICK_OFF: SoundEvent;
static BLOCK_BAMBOO_WOOD_BUTTON_CLICK_ON: SoundEvent;
static BLOCK_BAMBOO_WOOD_PRESSURE_PLATE_CLICK_OFF: SoundEvent;
static BLOCK_BAMBOO_WOOD_PRESSURE_PLATE_CLICK_ON: SoundEvent;
static BLOCK_BAMBOO_WOOD_FENCE_GATE_CLOSE: SoundEvent;
static BLOCK_BAMBOO_WOOD_FENCE_GATE_OPEN: SoundEvent;
static BLOCK_BARREL_CLOSE: SoundEvent;
static BLOCK_BARREL_OPEN: SoundEvent;
static BLOCK_BASALT_BREAK: SoundEvent;
static BLOCK_BASALT_STEP: SoundEvent;
static BLOCK_BASALT_PLACE: SoundEvent;
static BLOCK_BASALT_HIT: SoundEvent;
static BLOCK_BASALT_FALL: SoundEvent;
static ENTITY_BAT_AMBIENT: SoundEvent;
static ENTITY_BAT_DEATH: SoundEvent;
static ENTITY_BAT_HURT: SoundEvent;
static ENTITY_BAT_LOOP: SoundEvent;
static ENTITY_BAT_TAKEOFF: SoundEvent;
static BLOCK_BEACON_ACTIVATE: SoundEvent;
static BLOCK_BEACON_AMBIENT: SoundEvent;
static BLOCK_BEACON_DEACTIVATE: SoundEvent;
static BLOCK_BEACON_POWER_SELECT: SoundEvent;
static ENTITY_BEE_DEATH: SoundEvent;
static ENTITY_BEE_HURT: SoundEvent;
static ENTITY_BEE_LOOP_AGGRESSIVE: SoundEvent;
static ENTITY_BEE_LOOP: SoundEvent;
static ENTITY_BEE_STING: SoundEvent;
static ENTITY_BEE_POLLINATE: SoundEvent;
static BLOCK_BEEHIVE_DRIP: SoundEvent;
static BLOCK_BEEHIVE_ENTER: SoundEvent;
static BLOCK_BEEHIVE_EXIT: SoundEvent;
static BLOCK_BEEHIVE_SHEAR: SoundEvent;
static BLOCK_BEEHIVE_WORK: SoundEvent;
static BLOCK_BELL_USE: SoundEvent;
static BLOCK_BELL_RESONATE: SoundEvent;
static BLOCK_BIG_DRIPLEAF_BREAK: SoundEvent;
static BLOCK_BIG_DRIPLEAF_FALL: SoundEvent;
static BLOCK_BIG_DRIPLEAF_HIT: SoundEvent;
static BLOCK_BIG_DRIPLEAF_PLACE: SoundEvent;
static BLOCK_BIG_DRIPLEAF_STEP: SoundEvent;
static ENTITY_BLAZE_AMBIENT: SoundEvent;
static ENTITY_BLAZE_BURN: SoundEvent;
static ENTITY_BLAZE_DEATH: SoundEvent;
static ENTITY_BLAZE_HURT: SoundEvent;
static ENTITY_BLAZE_SHOOT: SoundEvent;
static ENTITY_BOAT_PADDLE_LAND: SoundEvent;
static ENTITY_BOAT_PADDLE_WATER: SoundEvent;
static BLOCK_BONE_BLOCK_BREAK: SoundEvent;
static BLOCK_BONE_BLOCK_FALL: SoundEvent;
static BLOCK_BONE_BLOCK_HIT: SoundEvent;
static BLOCK_BONE_BLOCK_PLACE: SoundEvent;
static BLOCK_BONE_BLOCK_STEP: SoundEvent;
static ITEM_BONE_MEAL_USE: SoundEvent;
static ITEM_BOOK_PAGE_TURN: SoundEvent;
static ITEM_BOOK_PUT: SoundEvent;
static BLOCK_BLASTFURNACE_FIRE_CRACKLE: SoundEvent;
static ITEM_BOTTLE_EMPTY: SoundEvent;
static ITEM_BOTTLE_FILL: SoundEvent;
static ITEM_BOTTLE_FILL_DRAGONBREATH: SoundEvent;
static BLOCK_BREWING_STAND_BREW: SoundEvent;
static ITEM_BRUSH_BRUSHING_GENERIC: SoundEvent;
static ITEM_BRUSH_BRUSHING_SAND: SoundEvent;
static ITEM_BRUSH_BRUSHING_GRAVEL: SoundEvent;
static ITEM_BRUSH_BRUSHING_SAND_COMPLETE: SoundEvent;
static ITEM_BRUSH_BRUSHING_GRAVEL_COMPLETE: SoundEvent;
static BLOCK_BUBBLE_COLUMN_BUBBLE_POP: SoundEvent;
static BLOCK_BUBBLE_COLUMN_UPWARDS_AMBIENT: SoundEvent;
static BLOCK_BUBBLE_COLUMN_UPWARDS_INSIDE: SoundEvent;
static BLOCK_BUBBLE_COLUMN_WHIRLPOOL_AMBIENT: SoundEvent;
static BLOCK_BUBBLE_COLUMN_WHIRLPOOL_INSIDE: SoundEvent;
static ITEM_BUCKET_EMPTY: SoundEvent;
static ITEM_BUCKET_EMPTY_AXOLOTL: SoundEvent;
static ITEM_BUCKET_EMPTY_FISH: SoundEvent;
static ITEM_BUCKET_EMPTY_LAVA: SoundEvent;
static ITEM_BUCKET_EMPTY_POWDER_SNOW: SoundEvent;
static ITEM_BUCKET_EMPTY_TADPOLE: SoundEvent;
static ITEM_BUCKET_FILL: SoundEvent;
static ITEM_BUCKET_FILL_AXOLOTL: SoundEvent;
static ITEM_BUCKET_FILL_FISH: SoundEvent;
static ITEM_BUCKET_FILL_LAVA: SoundEvent;
static ITEM_BUCKET_FILL_POWDER_SNOW: SoundEvent;
static ITEM_BUCKET_FILL_TADPOLE: SoundEvent;
static ITEM_BUNDLE_DROP_CONTENTS: SoundEvent;
static ITEM_BUNDLE_INSERT: SoundEvent;
static ITEM_BUNDLE_REMOVE_ONE: SoundEvent;
static BLOCK_CAKE_ADD_CANDLE: SoundEvent;
static BLOCK_CALCITE_BREAK: SoundEvent;
static BLOCK_CALCITE_STEP: SoundEvent;
static BLOCK_CALCITE_PLACE: SoundEvent;
static BLOCK_CALCITE_HIT: SoundEvent;
static BLOCK_CALCITE_FALL: SoundEvent;
static ENTITY_CAMEL_AMBIENT: SoundEvent;
static ENTITY_CAMEL_DASH: SoundEvent;
static ENTITY_CAMEL_DASH_READY: SoundEvent;
static ENTITY_CAMEL_DEATH: SoundEvent;
static ENTITY_CAMEL_EAT: SoundEvent;
static ENTITY_CAMEL_HURT: SoundEvent;
static ENTITY_CAMEL_SADDLE: SoundEvent;
static ENTITY_CAMEL_SIT: SoundEvent;
static ENTITY_CAMEL_STAND: SoundEvent;
static ENTITY_CAMEL_STEP: SoundEvent;
static ENTITY_CAMEL_STEP_SAND: SoundEvent;
static BLOCK_CAMPFIRE_CRACKLE: SoundEvent;
static BLOCK_CANDLE_AMBIENT: SoundEvent;
static BLOCK_CANDLE_BREAK: SoundEvent;
static BLOCK_CANDLE_EXTINGUISH: SoundEvent;
static BLOCK_CANDLE_FALL: SoundEvent;
static BLOCK_CANDLE_HIT: SoundEvent;
static BLOCK_CANDLE_PLACE: SoundEvent;
static BLOCK_CANDLE_STEP: SoundEvent;
static ENTITY_CAT_AMBIENT: SoundEvent;
static ENTITY_CAT_STRAY_AMBIENT: SoundEvent;
static ENTITY_CAT_DEATH: SoundEvent;
static ENTITY_CAT_EAT: SoundEvent;
static ENTITY_CAT_HISS: SoundEvent;
static ENTITY_CAT_BEG_FOR_FOOD: SoundEvent;
static ENTITY_CAT_HURT: SoundEvent;
static ENTITY_CAT_PURR: SoundEvent;
static ENTITY_CAT_PURREOW: SoundEvent;
static BLOCK_CAVE_VINES_BREAK: SoundEvent;
static BLOCK_CAVE_VINES_FALL: SoundEvent;
static BLOCK_CAVE_VINES_HIT: SoundEvent;
static BLOCK_CAVE_VINES_PLACE: SoundEvent;
static BLOCK_CAVE_VINES_STEP: SoundEvent;
static BLOCK_CAVE_VINES_PICK_BERRIES: SoundEvent;
static BLOCK_CHAIN_BREAK: SoundEvent;
static BLOCK_CHAIN_FALL: SoundEvent;
static BLOCK_CHAIN_HIT: SoundEvent;
static BLOCK_CHAIN_PLACE: SoundEvent;
static BLOCK_CHAIN_STEP: SoundEvent;
static BLOCK_CHERRY_WOOD_BREAK: SoundEvent;
static BLOCK_CHERRY_WOOD_FALL: SoundEvent;
static BLOCK_CHERRY_WOOD_HIT: SoundEvent;
static BLOCK_CHERRY_WOOD_PLACE: SoundEvent;
static BLOCK_CHERRY_WOOD_STEP: SoundEvent;
static BLOCK_CHERRY_SAPLING_BREAK: SoundEvent;
static BLOCK_CHERRY_SAPLING_FALL: SoundEvent;
static BLOCK_CHERRY_SAPLING_HIT: SoundEvent;
static BLOCK_CHERRY_SAPLING_PLACE: SoundEvent;
static BLOCK_CHERRY_SAPLING_STEP: SoundEvent;
static BLOCK_CHERRY_LEAVES_BREAK: SoundEvent;
static BLOCK_CHERRY_LEAVES_FALL: SoundEvent;
static BLOCK_CHERRY_LEAVES_HIT: SoundEvent;
static BLOCK_CHERRY_LEAVES_PLACE: SoundEvent;
static BLOCK_CHERRY_LEAVES_STEP: SoundEvent;
static BLOCK_CHERRY_WOOD_HANGING_SIGN_STEP: SoundEvent;
static BLOCK_CHERRY_WOOD_HANGING_SIGN_BREAK: SoundEvent;
static BLOCK_CHERRY_WOOD_HANGING_SIGN_FALL: SoundEvent;
static BLOCK_CHERRY_WOOD_HANGING_SIGN_HIT: SoundEvent;
static BLOCK_CHERRY_WOOD_HANGING_SIGN_PLACE: SoundEvent;
static BLOCK_CHERRY_WOOD_DOOR_CLOSE: SoundEvent;
static BLOCK_CHERRY_WOOD_DOOR_OPEN: SoundEvent;
static BLOCK_CHERRY_WOOD_TRAPDOOR_CLOSE: SoundEvent;
static BLOCK_CHERRY_WOOD_TRAPDOOR_OPEN: SoundEvent;
static BLOCK_CHERRY_WOOD_BUTTON_CLICK_OFF: SoundEvent;
static BLOCK_CHERRY_WOOD_BUTTON_CLICK_ON: SoundEvent;
static BLOCK_CHERRY_WOOD_PRESSURE_PLATE_CLICK_OFF: SoundEvent;
static BLOCK_CHERRY_WOOD_PRESSURE_PLATE_CLICK_ON: SoundEvent;
static BLOCK_CHERRY_WOOD_FENCE_GATE_CLOSE: SoundEvent;
static BLOCK_CHERRY_WOOD_FENCE_GATE_OPEN: SoundEvent;
static BLOCK_CHEST_CLOSE: SoundEvent;
static BLOCK_CHEST_LOCKED: SoundEvent;
static BLOCK_CHEST_OPEN: SoundEvent;
static ENTITY_CHICKEN_AMBIENT: SoundEvent;
static ENTITY_CHICKEN_DEATH: SoundEvent;
static ENTITY_CHICKEN_EGG: SoundEvent;
static ENTITY_CHICKEN_HURT: SoundEvent;
static ENTITY_CHICKEN_STEP: SoundEvent;
static BLOCK_CHISELED_BOOKSHELF_BREAK: SoundEvent;
static BLOCK_CHISELED_BOOKSHELF_FALL: SoundEvent;
static BLOCK_CHISELED_BOOKSHELF_HIT: SoundEvent;
static BLOCK_CHISELED_BOOKSHELF_INSERT: SoundEvent;
static BLOCK_CHISELED_BOOKSHELF_INSERT_ENCHANTED: SoundEvent;
static BLOCK_CHISELED_BOOKSHELF_STEP: SoundEvent;
static BLOCK_CHISELED_BOOKSHELF_PICKUP: SoundEvent;
static BLOCK_CHISELED_BOOKSHELF_PICKUP_ENCHANTED: SoundEvent;
static BLOCK_CHISELED_BOOKSHELF_PLACE: SoundEvent;
static BLOCK_CHORUS_FLOWER_DEATH: SoundEvent;
static BLOCK_CHORUS_FLOWER_GROW: SoundEvent;
static ITEM_CHORUS_FRUIT_TELEPORT: SoundEvent;
static ENTITY_COD_AMBIENT: SoundEvent;
static ENTITY_COD_DEATH: SoundEvent;
static ENTITY_COD_FLOP: SoundEvent;
static ENTITY_COD_HURT: SoundEvent;
static BLOCK_COMPARATOR_CLICK: SoundEvent;
static BLOCK_COMPOSTER_EMPTY: SoundEvent;
static BLOCK_COMPOSTER_FILL: SoundEvent;
static BLOCK_COMPOSTER_FILL_SUCCESS: SoundEvent;
static BLOCK_COMPOSTER_READY: SoundEvent;
static BLOCK_CONDUIT_ACTIVATE: SoundEvent;
static BLOCK_CONDUIT_AMBIENT: SoundEvent;
static BLOCK_CONDUIT_AMBIENT_SHORT: SoundEvent;
static BLOCK_CONDUIT_ATTACK_TARGET: SoundEvent;
static BLOCK_CONDUIT_DEACTIVATE: SoundEvent;
static BLOCK_COPPER_BREAK: SoundEvent;
static BLOCK_COPPER_STEP: SoundEvent;
static BLOCK_COPPER_PLACE: SoundEvent;
static BLOCK_COPPER_HIT: SoundEvent;
static BLOCK_COPPER_FALL: SoundEvent;
static BLOCK_CORAL_BLOCK_BREAK: SoundEvent;
static BLOCK_CORAL_BLOCK_FALL: SoundEvent;
static BLOCK_CORAL_BLOCK_HIT: SoundEvent;
static BLOCK_CORAL_BLOCK_PLACE: SoundEvent;
static BLOCK_CORAL_BLOCK_STEP: SoundEvent;
static ENTITY_COW_AMBIENT: SoundEvent;
static ENTITY_COW_DEATH: SoundEvent;
static ENTITY_COW_HURT: SoundEvent;
static ENTITY_COW_MILK: SoundEvent;
static ENTITY_COW_STEP: SoundEvent;
static ENTITY_CREEPER_DEATH: SoundEvent;
static ENTITY_CREEPER_HURT: SoundEvent;
static ENTITY_CREEPER_PRIMED: SoundEvent;
static BLOCK_CROP_BREAK: SoundEvent;
static ITEM_CROP_PLANT: SoundEvent;
static ITEM_CROSSBOW_HIT: SoundEvent;
static ITEM_CROSSBOW_LOADING_END: SoundEvent;
static ITEM_CROSSBOW_LOADING_MIDDLE: SoundEvent;
static ITEM_CROSSBOW_LOADING_START: SoundEvent;
static ITEM_CROSSBOW_QUICK_CHARGE_1: SoundEvent;
static ITEM_CROSSBOW_QUICK_CHARGE_2: SoundEvent;
static ITEM_CROSSBOW_QUICK_CHARGE_3: SoundEvent;
static ITEM_CROSSBOW_SHOOT: SoundEvent;
static BLOCK_DECORATED_POT_BREAK: SoundEvent;
static BLOCK_DECORATED_POT_FALL: SoundEvent;
static BLOCK_DECORATED_POT_HIT: SoundEvent;
static BLOCK_DECORATED_POT_STEP: SoundEvent;
static BLOCK_DECORATED_POT_PLACE: SoundEvent;
static BLOCK_DECORATED_POT_SHATTER: SoundEvent;
static BLOCK_DEEPSLATE_BRICKS_BREAK: SoundEvent;
static BLOCK_DEEPSLATE_BRICKS_FALL: SoundEvent;
static BLOCK_DEEPSLATE_BRICKS_HIT: SoundEvent;
static BLOCK_DEEPSLATE_BRICKS_PLACE: SoundEvent;
static BLOCK_DEEPSLATE_BRICKS_STEP: SoundEvent;
static BLOCK_DEEPSLATE_BREAK: SoundEvent;
static BLOCK_DEEPSLATE_FALL: SoundEvent;
static BLOCK_DEEPSLATE_HIT: SoundEvent;
static BLOCK_DEEPSLATE_PLACE: SoundEvent;
static BLOCK_DEEPSLATE_STEP: SoundEvent;
static BLOCK_DEEPSLATE_TILES_BREAK: SoundEvent;
static BLOCK_DEEPSLATE_TILES_FALL: SoundEvent;
static BLOCK_DEEPSLATE_TILES_HIT: SoundEvent;
static BLOCK_DEEPSLATE_TILES_PLACE: SoundEvent;
static BLOCK_DEEPSLATE_TILES_STEP: SoundEvent;
static BLOCK_DISPENSER_DISPENSE: SoundEvent;
static BLOCK_DISPENSER_FAIL: SoundEvent;
static BLOCK_DISPENSER_LAUNCH: SoundEvent;
static ENTITY_DOLPHIN_AMBIENT: SoundEvent;
static ENTITY_DOLPHIN_AMBIENT_WATER: SoundEvent;
static ENTITY_DOLPHIN_ATTACK: SoundEvent;
static ENTITY_DOLPHIN_DEATH: SoundEvent;
static ENTITY_DOLPHIN_EAT: SoundEvent;
static ENTITY_DOLPHIN_HURT: SoundEvent;
static ENTITY_DOLPHIN_JUMP: SoundEvent;
static ENTITY_DOLPHIN_PLAY: SoundEvent;
static ENTITY_DOLPHIN_SPLASH: SoundEvent;
static ENTITY_DOLPHIN_SWIM: SoundEvent;
static ENTITY_DONKEY_AMBIENT: SoundEvent;
static ENTITY_DONKEY_ANGRY: SoundEvent;
static ENTITY_DONKEY_CHEST: SoundEvent;
static ENTITY_DONKEY_DEATH: SoundEvent;
static ENTITY_DONKEY_EAT: SoundEvent;
static ENTITY_DONKEY_HURT: SoundEvent;
static BLOCK_DRIPSTONE_BLOCK_BREAK: SoundEvent;
static BLOCK_DRIPSTONE_BLOCK_STEP: SoundEvent;
static BLOCK_DRIPSTONE_BLOCK_PLACE: SoundEvent;
static BLOCK_DRIPSTONE_BLOCK_HIT: SoundEvent;
static BLOCK_DRIPSTONE_BLOCK_FALL: SoundEvent;
static BLOCK_POINTED_DRIPSTONE_BREAK: SoundEvent;
static BLOCK_POINTED_DRIPSTONE_STEP: SoundEvent;
static BLOCK_POINTED_DRIPSTONE_PLACE: SoundEvent;
static BLOCK_POINTED_DRIPSTONE_HIT: SoundEvent;
static BLOCK_POINTED_DRIPSTONE_FALL: SoundEvent;
static BLOCK_POINTED_DRIPSTONE_LAND: SoundEvent;
static BLOCK_POINTED_DRIPSTONE_DRIP_LAVA: SoundEvent;
static BLOCK_POINTED_DRIPSTONE_DRIP_WATER: SoundEvent;
static BLOCK_POINTED_DRIPSTONE_DRIP_LAVA_INTO_CAULDRON: SoundEvent;
static BLOCK_POINTED_DRIPSTONE_DRIP_WATER_INTO_CAULDRON: SoundEvent;
static BLOCK_BIG_DRIPLEAF_TILT_DOWN: SoundEvent;
static BLOCK_BIG_DRIPLEAF_TILT_UP: SoundEvent;
static ENTITY_DROWNED_AMBIENT: SoundEvent;
static ENTITY_DROWNED_AMBIENT_WATER: SoundEvent;
static ENTITY_DROWNED_DEATH: SoundEvent;
static ENTITY_DROWNED_DEATH_WATER: SoundEvent;
static ENTITY_DROWNED_HURT: SoundEvent;
static ENTITY_DROWNED_HURT_WATER: SoundEvent;
static ENTITY_DROWNED_SHOOT: SoundEvent;
static ENTITY_DROWNED_STEP: SoundEvent;
static ENTITY_DROWNED_SWIM: SoundEvent;
static ITEM_DYE_USE: SoundEvent;
static ENTITY_EGG_THROW: SoundEvent;
static ENTITY_ELDER_GUARDIAN_AMBIENT: SoundEvent;
static ENTITY_ELDER_GUARDIAN_AMBIENT_LAND: SoundEvent;
static ENTITY_ELDER_GUARDIAN_CURSE: SoundEvent;
static ENTITY_ELDER_GUARDIAN_DEATH: SoundEvent;
static ENTITY_ELDER_GUARDIAN_DEATH_LAND: SoundEvent;
static ENTITY_ELDER_GUARDIAN_FLOP: SoundEvent;
static ENTITY_ELDER_GUARDIAN_HURT: SoundEvent;
static ENTITY_ELDER_GUARDIAN_HURT_LAND: SoundEvent;
static ITEM_ELYTRA_FLYING: SoundEvent;
static BLOCK_ENCHANTMENT_TABLE_USE: SoundEvent;
static BLOCK_ENDER_CHEST_CLOSE: SoundEvent;
static BLOCK_ENDER_CHEST_OPEN: SoundEvent;
static ENTITY_ENDER_DRAGON_AMBIENT: SoundEvent;
static ENTITY_ENDER_DRAGON_DEATH: SoundEvent;
static ENTITY_DRAGON_FIREBALL_EXPLODE: SoundEvent;
static ENTITY_ENDER_DRAGON_FLAP: SoundEvent;
static ENTITY_ENDER_DRAGON_GROWL: SoundEvent;
static ENTITY_ENDER_DRAGON_HURT: SoundEvent;
static ENTITY_ENDER_DRAGON_SHOOT: SoundEvent;
static ENTITY_ENDER_EYE_DEATH: SoundEvent;
static ENTITY_ENDER_EYE_LAUNCH: SoundEvent;
static ENTITY_ENDERMAN_AMBIENT: SoundEvent;
static ENTITY_ENDERMAN_DEATH: SoundEvent;
static ENTITY_ENDERMAN_HURT: SoundEvent;
static ENTITY_ENDERMAN_SCREAM: SoundEvent;
static ENTITY_ENDERMAN_STARE: SoundEvent;
static ENTITY_ENDERMAN_TELEPORT: SoundEvent;
static ENTITY_ENDERMITE_AMBIENT: SoundEvent;
static ENTITY_ENDERMITE_DEATH: SoundEvent;
static ENTITY_ENDERMITE_HURT: SoundEvent;
static ENTITY_ENDERMITE_STEP: SoundEvent;
static ENTITY_ENDER_PEARL_THROW: SoundEvent;
static BLOCK_END_GATEWAY_SPAWN: SoundEvent;
static BLOCK_END_PORTAL_FRAME_FILL: SoundEvent;
static BLOCK_END_PORTAL_SPAWN: SoundEvent;
static ENTITY_EVOKER_AMBIENT: SoundEvent;
static ENTITY_EVOKER_CAST_SPELL: SoundEvent;
static ENTITY_EVOKER_CELEBRATE: SoundEvent;
static ENTITY_EVOKER_DEATH: SoundEvent;
static ENTITY_EVOKER_FANGS_ATTACK: SoundEvent;
static ENTITY_EVOKER_HURT: SoundEvent;
static ENTITY_EVOKER_PREPARE_ATTACK: SoundEvent;
static ENTITY_EVOKER_PREPARE_SUMMON: SoundEvent;
static ENTITY_EVOKER_PREPARE_WOLOLO: SoundEvent;
static ENTITY_EXPERIENCE_BOTTLE_THROW: SoundEvent;
static ENTITY_EXPERIENCE_ORB_PICKUP: SoundEvent;
static BLOCK_FENCE_GATE_CLOSE: SoundEvent;
static BLOCK_FENCE_GATE_OPEN: SoundEvent;
static ITEM_FIRECHARGE_USE: SoundEvent;
static ENTITY_FIREWORK_ROCKET_BLAST: SoundEvent;
static ENTITY_FIREWORK_ROCKET_BLAST_FAR: SoundEvent;
static ENTITY_FIREWORK_ROCKET_LARGE_BLAST: SoundEvent;
static ENTITY_FIREWORK_ROCKET_LARGE_BLAST_FAR: SoundEvent;
static ENTITY_FIREWORK_ROCKET_LAUNCH: SoundEvent;
static ENTITY_FIREWORK_ROCKET_SHOOT: SoundEvent;
static ENTITY_FIREWORK_ROCKET_TWINKLE: SoundEvent;
static ENTITY_FIREWORK_ROCKET_TWINKLE_FAR: SoundEvent;
static BLOCK_FIRE_AMBIENT: SoundEvent;
static BLOCK_FIRE_EXTINGUISH: SoundEvent;
static ENTITY_FISH_SWIM: SoundEvent;
static ENTITY_FISHING_BOBBER_RETRIEVE: SoundEvent;
static ENTITY_FISHING_BOBBER_SPLASH: SoundEvent;
static ENTITY_FISHING_BOBBER_THROW: SoundEvent;
static ITEM_FLINTANDSTEEL_USE: SoundEvent;
static BLOCK_FLOWERING_AZALEA_BREAK: SoundEvent;
static BLOCK_FLOWERING_AZALEA_FALL: SoundEvent;
static BLOCK_FLOWERING_AZALEA_HIT: SoundEvent;
static BLOCK_FLOWERING_AZALEA_PLACE: SoundEvent;
static BLOCK_FLOWERING_AZALEA_STEP: SoundEvent;
static ENTITY_FOX_AGGRO: SoundEvent;
static ENTITY_FOX_AMBIENT: SoundEvent;
static ENTITY_FOX_BITE: SoundEvent;
static ENTITY_FOX_DEATH: SoundEvent;
static ENTITY_FOX_EAT: SoundEvent;
static ENTITY_FOX_HURT: SoundEvent;
static ENTITY_FOX_SCREECH: SoundEvent;
static ENTITY_FOX_SLEEP: SoundEvent;
static ENTITY_FOX_SNIFF: SoundEvent;
static ENTITY_FOX_SPIT: SoundEvent;
static ENTITY_FOX_TELEPORT: SoundEvent;
static BLOCK_SUSPICIOUS_SAND_BREAK: SoundEvent;
static BLOCK_SUSPICIOUS_SAND_STEP: SoundEvent;
static BLOCK_SUSPICIOUS_SAND_PLACE: SoundEvent;
static BLOCK_SUSPICIOUS_SAND_HIT: SoundEvent;
static BLOCK_SUSPICIOUS_SAND_FALL: SoundEvent;
static BLOCK_SUSPICIOUS_GRAVEL_BREAK: SoundEvent;
static BLOCK_SUSPICIOUS_GRAVEL_STEP: SoundEvent;
static BLOCK_SUSPICIOUS_GRAVEL_PLACE: SoundEvent;
static BLOCK_SUSPICIOUS_GRAVEL_HIT: SoundEvent;
static BLOCK_SUSPICIOUS_GRAVEL_FALL: SoundEvent;
static BLOCK_FROGLIGHT_BREAK: SoundEvent;
static BLOCK_FROGLIGHT_FALL: SoundEvent;
static BLOCK_FROGLIGHT_HIT: SoundEvent;
static BLOCK_FROGLIGHT_PLACE: SoundEvent;
static BLOCK_FROGLIGHT_STEP: SoundEvent;
static BLOCK_FROGSPAWN_STEP: SoundEvent;
static BLOCK_FROGSPAWN_BREAK: SoundEvent;
static BLOCK_FROGSPAWN_FALL: SoundEvent;
static BLOCK_FROGSPAWN_HATCH: SoundEvent;
static BLOCK_FROGSPAWN_HIT: SoundEvent;
static BLOCK_FROGSPAWN_PLACE: SoundEvent;
static ENTITY_FROG_AMBIENT: SoundEvent;
static ENTITY_FROG_DEATH: SoundEvent;
static ENTITY_FROG_EAT: SoundEvent;
static ENTITY_FROG_HURT: SoundEvent;
static ENTITY_FROG_LAY_SPAWN: SoundEvent;
static ENTITY_FROG_LONG_JUMP: SoundEvent;
static ENTITY_FROG_STEP: SoundEvent;
static ENTITY_FROG_TONGUE: SoundEvent;
static BLOCK_ROOTS_BREAK: SoundEvent;
static BLOCK_ROOTS_STEP: SoundEvent;
static BLOCK_ROOTS_PLACE: SoundEvent;
static BLOCK_ROOTS_HIT: SoundEvent;
static BLOCK_ROOTS_FALL: SoundEvent;
static BLOCK_FURNACE_FIRE_CRACKLE: SoundEvent;
static ENTITY_GENERIC_BIG_FALL: SoundEvent;
static ENTITY_GENERIC_BURN: SoundEvent;
static ENTITY_GENERIC_DEATH: SoundEvent;
static ENTITY_GENERIC_DRINK: SoundEvent;
static ENTITY_GENERIC_EAT: SoundEvent;
static ENTITY_GENERIC_EXPLODE: SoundEvent;
static ENTITY_GENERIC_EXTINGUISH_FIRE: SoundEvent;
static ENTITY_GENERIC_HURT: SoundEvent;
static ENTITY_GENERIC_SMALL_FALL: SoundEvent;
static ENTITY_GENERIC_SPLASH: SoundEvent;
static ENTITY_GENERIC_SWIM: SoundEvent;
static ENTITY_GHAST_AMBIENT: SoundEvent;
static ENTITY_GHAST_DEATH: SoundEvent;
static ENTITY_GHAST_HURT: SoundEvent;
static ENTITY_GHAST_SCREAM: SoundEvent;
static ENTITY_GHAST_SHOOT: SoundEvent;
static ENTITY_GHAST_WARN: SoundEvent;
static BLOCK_GILDED_BLACKSTONE_BREAK: SoundEvent;
static BLOCK_GILDED_BLACKSTONE_FALL: SoundEvent;
static BLOCK_GILDED_BLACKSTONE_HIT: SoundEvent;
static BLOCK_GILDED_BLACKSTONE_PLACE: SoundEvent;
static BLOCK_GILDED_BLACKSTONE_STEP: SoundEvent;
static BLOCK_GLASS_BREAK: SoundEvent;
static BLOCK_GLASS_FALL: SoundEvent;
static BLOCK_GLASS_HIT: SoundEvent;
static BLOCK_GLASS_PLACE: SoundEvent;
static BLOCK_GLASS_STEP: SoundEvent;
static ITEM_GLOW_INK_SAC_USE: SoundEvent;
static ENTITY_GLOW_ITEM_FRAME_ADD_ITEM: SoundEvent;
static ENTITY_GLOW_ITEM_FRAME_BREAK: SoundEvent;
static ENTITY_GLOW_ITEM_FRAME_PLACE: SoundEvent;
static ENTITY_GLOW_ITEM_FRAME_REMOVE_ITEM: SoundEvent;
static ENTITY_GLOW_ITEM_FRAME_ROTATE_ITEM: SoundEvent;
static ENTITY_GLOW_SQUID_AMBIENT: SoundEvent;
static ENTITY_GLOW_SQUID_DEATH: SoundEvent;
static ENTITY_GLOW_SQUID_HURT: SoundEvent;
static ENTITY_GLOW_SQUID_SQUIRT: SoundEvent;
static ENTITY_GOAT_AMBIENT: SoundEvent;
static ENTITY_GOAT_DEATH: SoundEvent;
static ENTITY_GOAT_EAT: SoundEvent;
static ENTITY_GOAT_HURT: SoundEvent;
static ENTITY_GOAT_LONG_JUMP: SoundEvent;
static ENTITY_GOAT_MILK: SoundEvent;
static ENTITY_GOAT_PREPARE_RAM: SoundEvent;
static ENTITY_GOAT_RAM_IMPACT: SoundEvent;
static ENTITY_GOAT_HORN_BREAK: SoundEvent;
static ITEM_GOAT_HORN_PLAY: SoundEvent;
static ENTITY_GOAT_SCREAMING_AMBIENT: SoundEvent;
static ENTITY_GOAT_SCREAMING_DEATH: SoundEvent;
static ENTITY_GOAT_SCREAMING_EAT: SoundEvent;
static ENTITY_GOAT_SCREAMING_HURT: SoundEvent;
static ENTITY_GOAT_SCREAMING_LONG_JUMP: SoundEvent;
static ENTITY_GOAT_SCREAMING_MILK: SoundEvent;
static ENTITY_GOAT_SCREAMING_PREPARE_RAM: SoundEvent;
static ENTITY_GOAT_SCREAMING_RAM_IMPACT: SoundEvent;
static ENTITY_GOAT_SCREAMING_HORN_BREAK: SoundEvent;
static ENTITY_GOAT_STEP: SoundEvent;
static BLOCK_GRASS_BREAK: SoundEvent;
static BLOCK_GRASS_FALL: SoundEvent;
static BLOCK_GRASS_HIT: SoundEvent;
static BLOCK_GRASS_PLACE: SoundEvent;
static BLOCK_GRASS_STEP: SoundEvent;
static BLOCK_GRAVEL_BREAK: SoundEvent;
static BLOCK_GRAVEL_FALL: SoundEvent;
static BLOCK_GRAVEL_HIT: SoundEvent;
static BLOCK_GRAVEL_PLACE: SoundEvent;
static BLOCK_GRAVEL_STEP: SoundEvent;
static BLOCK_GRINDSTONE_USE: SoundEvent;
static BLOCK_GROWING_PLANT_CROP: SoundEvent;
static ENTITY_GUARDIAN_AMBIENT: SoundEvent;
static ENTITY_GUARDIAN_AMBIENT_LAND: SoundEvent;
static ENTITY_GUARDIAN_ATTACK: SoundEvent;
static ENTITY_GUARDIAN_DEATH: SoundEvent;
static ENTITY_GUARDIAN_DEATH_LAND: SoundEvent;
static ENTITY_GUARDIAN_FLOP: SoundEvent;
static ENTITY_GUARDIAN_HURT: SoundEvent;
static ENTITY_GUARDIAN_HURT_LAND: SoundEvent;
static BLOCK_HANGING_ROOTS_BREAK: SoundEvent;
static BLOCK_HANGING_ROOTS_FALL: SoundEvent;
static BLOCK_HANGING_ROOTS_HIT: SoundEvent;
static BLOCK_HANGING_ROOTS_PLACE: SoundEvent;
static BLOCK_HANGING_ROOTS_STEP: SoundEvent;
static BLOCK_HANGING_SIGN_STEP: SoundEvent;
static BLOCK_HANGING_SIGN_BREAK: SoundEvent;
static BLOCK_HANGING_SIGN_FALL: SoundEvent;
static BLOCK_HANGING_SIGN_HIT: SoundEvent;
static BLOCK_HANGING_SIGN_PLACE: SoundEvent;
static BLOCK_NETHER_WOOD_HANGING_SIGN_STEP: SoundEvent;
static BLOCK_NETHER_WOOD_HANGING_SIGN_BREAK: SoundEvent;
static BLOCK_NETHER_WOOD_HANGING_SIGN_FALL: SoundEvent;
static BLOCK_NETHER_WOOD_HANGING_SIGN_HIT: SoundEvent;
static BLOCK_NETHER_WOOD_HANGING_SIGN_PLACE: SoundEvent;
static BLOCK_BAMBOO_WOOD_HANGING_SIGN_STEP: SoundEvent;
static BLOCK_BAMBOO_WOOD_HANGING_SIGN_BREAK: SoundEvent;
static BLOCK_BAMBOO_WOOD_HANGING_SIGN_FALL: SoundEvent;
static BLOCK_BAMBOO_WOOD_HANGING_SIGN_HIT: SoundEvent;
static BLOCK_BAMBOO_WOOD_HANGING_SIGN_PLACE: SoundEvent;
static ITEM_HOE_TILL: SoundEvent;
static ENTITY_HOGLIN_AMBIENT: SoundEvent;
static ENTITY_HOGLIN_ANGRY: SoundEvent;
static ENTITY_HOGLIN_ATTACK: SoundEvent;
static ENTITY_HOGLIN_CONVERTED_TO_ZOMBIFIED: SoundEvent;
static ENTITY_HOGLIN_DEATH: SoundEvent;
static ENTITY_HOGLIN_HURT: SoundEvent;
static ENTITY_HOGLIN_RETREAT: SoundEvent;
static ENTITY_HOGLIN_STEP: SoundEvent;
static BLOCK_HONEY_BLOCK_BREAK: SoundEvent;
static BLOCK_HONEY_BLOCK_FALL: SoundEvent;
static BLOCK_HONEY_BLOCK_HIT: SoundEvent;
static BLOCK_HONEY_BLOCK_PLACE: SoundEvent;
static BLOCK_HONEY_BLOCK_SLIDE: SoundEvent;
static BLOCK_HONEY_BLOCK_STEP: SoundEvent;
static ITEM_HONEYCOMB_WAX_ON: SoundEvent;
static ITEM_HONEY_BOTTLE_DRINK: SoundEvent;
static GOAT_HORN_SOUND_COUNT: number;
static GOAT_HORN_SOUNDS: ImmutableList;
static ENTITY_HORSE_AMBIENT: SoundEvent;
static ENTITY_HORSE_ANGRY: SoundEvent;
static ENTITY_HORSE_ARMOR: SoundEvent;
static ENTITY_HORSE_BREATHE: SoundEvent;
static ENTITY_HORSE_DEATH: SoundEvent;
static ENTITY_HORSE_EAT: SoundEvent;
static ENTITY_HORSE_GALLOP: SoundEvent;
static ENTITY_HORSE_HURT: SoundEvent;
static ENTITY_HORSE_JUMP: SoundEvent;
static ENTITY_HORSE_LAND: SoundEvent;
static ENTITY_HORSE_SADDLE: SoundEvent;
static ENTITY_HORSE_STEP: SoundEvent;
static ENTITY_HORSE_STEP_WOOD: SoundEvent;
static ENTITY_HOSTILE_BIG_FALL: SoundEvent;
static ENTITY_HOSTILE_DEATH: SoundEvent;
static ENTITY_HOSTILE_HURT: SoundEvent;
static ENTITY_HOSTILE_SMALL_FALL: SoundEvent;
static ENTITY_HOSTILE_SPLASH: SoundEvent;
static ENTITY_HOSTILE_SWIM: SoundEvent;
static ENTITY_HUSK_AMBIENT: SoundEvent;
static ENTITY_HUSK_CONVERTED_TO_ZOMBIE: SoundEvent;
static ENTITY_HUSK_DEATH: SoundEvent;
static ENTITY_HUSK_HURT: SoundEvent;
static ENTITY_HUSK_STEP: SoundEvent;
static ENTITY_ILLUSIONER_AMBIENT: SoundEvent;
static ENTITY_ILLUSIONER_CAST_SPELL: SoundEvent;
static ENTITY_ILLUSIONER_DEATH: SoundEvent;
static ENTITY_ILLUSIONER_HURT: SoundEvent;
static ENTITY_ILLUSIONER_MIRROR_MOVE: SoundEvent;
static ENTITY_ILLUSIONER_PREPARE_BLINDNESS: SoundEvent;
static ENTITY_ILLUSIONER_PREPARE_MIRROR: SoundEvent;
static ITEM_INK_SAC_USE: SoundEvent;
static BLOCK_IRON_DOOR_CLOSE: SoundEvent;
static BLOCK_IRON_DOOR_OPEN: SoundEvent;
static ENTITY_IRON_GOLEM_ATTACK: SoundEvent;
static ENTITY_IRON_GOLEM_DAMAGE: SoundEvent;
static ENTITY_IRON_GOLEM_DEATH: SoundEvent;
static ENTITY_IRON_GOLEM_HURT: SoundEvent;
static ENTITY_IRON_GOLEM_REPAIR: SoundEvent;
static ENTITY_IRON_GOLEM_STEP: SoundEvent;
static BLOCK_IRON_TRAPDOOR_CLOSE: SoundEvent;
static BLOCK_IRON_TRAPDOOR_OPEN: SoundEvent;
static ENTITY_ITEM_FRAME_ADD_ITEM: SoundEvent;
static ENTITY_ITEM_FRAME_BREAK: SoundEvent;
static ENTITY_ITEM_FRAME_PLACE: SoundEvent;
static ENTITY_ITEM_FRAME_REMOVE_ITEM: SoundEvent;
static ENTITY_ITEM_FRAME_ROTATE_ITEM: SoundEvent;
static ENTITY_ITEM_BREAK: SoundEvent;
static ENTITY_ITEM_PICKUP: SoundEvent;
static BLOCK_LADDER_BREAK: SoundEvent;
static BLOCK_LADDER_FALL: SoundEvent;
static BLOCK_LADDER_HIT: SoundEvent;
static BLOCK_LADDER_PLACE: SoundEvent;
static BLOCK_LADDER_STEP: SoundEvent;
static BLOCK_LANTERN_BREAK: SoundEvent;
static BLOCK_LANTERN_FALL: SoundEvent;
static BLOCK_LANTERN_HIT: SoundEvent;
static BLOCK_LANTERN_PLACE: SoundEvent;
static BLOCK_LANTERN_STEP: SoundEvent;
static BLOCK_LARGE_AMETHYST_BUD_BREAK: SoundEvent;
static BLOCK_LARGE_AMETHYST_BUD_PLACE: SoundEvent;
static BLOCK_LAVA_AMBIENT: SoundEvent;
static BLOCK_LAVA_EXTINGUISH: SoundEvent;
static BLOCK_LAVA_POP: SoundEvent;
static ENTITY_LEASH_KNOT_BREAK: SoundEvent;
static ENTITY_LEASH_KNOT_PLACE: SoundEvent;
static BLOCK_LEVER_CLICK: SoundEvent;
static ENTITY_LIGHTNING_BOLT_IMPACT: SoundEvent;
static ENTITY_LIGHTNING_BOLT_THUNDER: SoundEvent;
static ENTITY_LINGERING_POTION_THROW: SoundEvent;
static ENTITY_LLAMA_AMBIENT: SoundEvent;
static ENTITY_LLAMA_ANGRY: SoundEvent;
static ENTITY_LLAMA_CHEST: SoundEvent;
static ENTITY_LLAMA_DEATH: SoundEvent;
static ENTITY_LLAMA_EAT: SoundEvent;
static ENTITY_LLAMA_HURT: SoundEvent;
static ENTITY_LLAMA_SPIT: SoundEvent;
static ENTITY_LLAMA_STEP: SoundEvent;
static ENTITY_LLAMA_SWAG: SoundEvent;
static ENTITY_MAGMA_CUBE_DEATH_SMALL: SoundEvent;
static BLOCK_LODESTONE_BREAK: SoundEvent;
static BLOCK_LODESTONE_STEP: SoundEvent;
static BLOCK_LODESTONE_PLACE: SoundEvent;
static BLOCK_LODESTONE_HIT: SoundEvent;
static BLOCK_LODESTONE_FALL: SoundEvent;
static ITEM_LODESTONE_COMPASS_LOCK: SoundEvent;
static ENTITY_MAGMA_CUBE_DEATH: SoundEvent;
static ENTITY_MAGMA_CUBE_HURT: SoundEvent;
static ENTITY_MAGMA_CUBE_HURT_SMALL: SoundEvent;
static ENTITY_MAGMA_CUBE_JUMP: SoundEvent;
static ENTITY_MAGMA_CUBE_SQUISH: SoundEvent;
static ENTITY_MAGMA_CUBE_SQUISH_SMALL: SoundEvent;
static BLOCK_MANGROVE_ROOTS_BREAK: SoundEvent;
static BLOCK_MANGROVE_ROOTS_FALL: SoundEvent;
static BLOCK_MANGROVE_ROOTS_HIT: SoundEvent;
static BLOCK_MANGROVE_ROOTS_PLACE: SoundEvent;
static BLOCK_MANGROVE_ROOTS_STEP: SoundEvent;
static BLOCK_MEDIUM_AMETHYST_BUD_BREAK: SoundEvent;
static BLOCK_MEDIUM_AMETHYST_BUD_PLACE: SoundEvent;
static BLOCK_METAL_BREAK: SoundEvent;
static BLOCK_METAL_FALL: SoundEvent;
static BLOCK_METAL_HIT: SoundEvent;
static BLOCK_METAL_PLACE: SoundEvent;
static BLOCK_METAL_PRESSURE_PLATE_CLICK_OFF: SoundEvent;
static BLOCK_METAL_PRESSURE_PLATE_CLICK_ON: SoundEvent;
static BLOCK_METAL_STEP: SoundEvent;
static ENTITY_MINECART_INSIDE_UNDERWATER: SoundEvent;
static ENTITY_MINECART_INSIDE: SoundEvent;
static ENTITY_MINECART_RIDING: SoundEvent;
static ENTITY_MOOSHROOM_CONVERT: SoundEvent;
static ENTITY_MOOSHROOM_EAT: SoundEvent;
static ENTITY_MOOSHROOM_MILK: SoundEvent;
static ENTITY_MOOSHROOM_SUSPICIOUS_MILK: SoundEvent;
static ENTITY_MOOSHROOM_SHEAR: SoundEvent;
static BLOCK_MOSS_CARPET_BREAK: SoundEvent;
static BLOCK_MOSS_CARPET_FALL: SoundEvent;
static BLOCK_MOSS_CARPET_HIT: SoundEvent;
static BLOCK_MOSS_CARPET_PLACE: SoundEvent;
static BLOCK_MOSS_CARPET_STEP: SoundEvent;
static BLOCK_PINK_PETALS_BREAK: SoundEvent;
static BLOCK_PINK_PETALS_FALL: SoundEvent;
static BLOCK_PINK_PETALS_HIT: SoundEvent;
static BLOCK_PINK_PETALS_PLACE: SoundEvent;
static BLOCK_PINK_PETALS_STEP: SoundEvent;
static BLOCK_MOSS_BREAK: SoundEvent;
static BLOCK_MOSS_FALL: SoundEvent;
static BLOCK_MOSS_HIT: SoundEvent;
static BLOCK_MOSS_PLACE: SoundEvent;
static BLOCK_MOSS_STEP: SoundEvent;
static BLOCK_MUD_BREAK: SoundEvent;
static BLOCK_MUD_FALL: SoundEvent;
static BLOCK_MUD_HIT: SoundEvent;
static BLOCK_MUD_PLACE: SoundEvent;
static BLOCK_MUD_STEP: SoundEvent;
static BLOCK_MUD_BRICKS_BREAK: SoundEvent;
static BLOCK_MUD_BRICKS_FALL: SoundEvent;
static BLOCK_MUD_BRICKS_HIT: SoundEvent;
static BLOCK_MUD_BRICKS_PLACE: SoundEvent;
static BLOCK_MUD_BRICKS_STEP: SoundEvent;
static BLOCK_MUDDY_MANGROVE_ROOTS_BREAK: SoundEvent;
static BLOCK_MUDDY_MANGROVE_ROOTS_FALL: SoundEvent;
static BLOCK_MUDDY_MANGROVE_ROOTS_HIT: SoundEvent;
static BLOCK_MUDDY_MANGROVE_ROOTS_PLACE: SoundEvent;
static BLOCK_MUDDY_MANGROVE_ROOTS_STEP: SoundEvent;
static ENTITY_MULE_AMBIENT: SoundEvent;
static ENTITY_MULE_ANGRY: SoundEvent;
static ENTITY_MULE_CHEST: SoundEvent;
static ENTITY_MULE_DEATH: SoundEvent;
static ENTITY_MULE_EAT: SoundEvent;
static ENTITY_MULE_HURT: SoundEvent;
static MUSIC_CREATIVE: RegistryEntry_Reference;
static MUSIC_CREDITS: RegistryEntry_Reference;
static MUSIC_DISC_5: SoundEvent;
static MUSIC_DISC_11: SoundEvent;
static MUSIC_DISC_13: SoundEvent;
static MUSIC_DISC_BLOCKS: SoundEvent;
static MUSIC_DISC_CAT: SoundEvent;
static MUSIC_DISC_CHIRP: SoundEvent;
static MUSIC_DISC_FAR: SoundEvent;
static MUSIC_DISC_MALL: SoundEvent;
static MUSIC_DISC_MELLOHI: SoundEvent;
static MUSIC_DISC_PIGSTEP: SoundEvent;
static MUSIC_DISC_STAL: SoundEvent;
static MUSIC_DISC_STRAD: SoundEvent;
static MUSIC_DISC_WAIT: SoundEvent;
static MUSIC_DISC_WARD: SoundEvent;
static MUSIC_DISC_OTHERSIDE: SoundEvent;
static MUSIC_DISC_RELIC: SoundEvent;
static MUSIC_DRAGON: RegistryEntry_Reference;
static MUSIC_END: RegistryEntry_Reference;
static MUSIC_GAME: RegistryEntry_Reference;
static MUSIC_MENU: RegistryEntry_Reference;
static MUSIC_NETHER_BASALT_DELTAS: RegistryEntry_Reference;
static MUSIC_NETHER_CRIMSON_FOREST: RegistryEntry_Reference;
static MUSIC_OVERWORLD_DEEP_DARK: RegistryEntry_Reference;
static MUSIC_OVERWORLD_DRIPSTONE_CAVES: RegistryEntry_Reference;
static MUSIC_OVERWORLD_GROVE: RegistryEntry_Reference;
static MUSIC_OVERWORLD_JAGGED_PEAKS: RegistryEntry_Reference;
static MUSIC_OVERWORLD_LUSH_CAVES: RegistryEntry_Reference;
static MUSIC_OVERWORLD_SWAMP: RegistryEntry_Reference;
static MUSIC_OVERWORLD_FOREST: RegistryEntry_Reference;
static MUSIC_OVERWORLD_OLD_GROWTH_TAIGA: RegistryEntry_Reference;
static MUSIC_OVERWORLD_MEADOW: RegistryEntry_Reference;
static MUSIC_OVERWORLD_CHERRY_GROVE: RegistryEntry_Reference;
static MUSIC_NETHER_NETHER_WASTES: RegistryEntry_Reference;
static MUSIC_OVERWORLD_FROZEN_PEAKS: RegistryEntry_Reference;
static MUSIC_OVERWORLD_SNOWY_SLOPES: RegistryEntry_Reference;
static MUSIC_NETHER_SOUL_SAND_VALLEY: RegistryEntry_Reference;
static MUSIC_OVERWORLD_STONY_PEAKS: RegistryEntry_Reference;
static MUSIC_NETHER_WARPED_FOREST: RegistryEntry_Reference;
static MUSIC_OVERWORLD_FLOWER_FOREST: RegistryEntry_Reference;
static MUSIC_OVERWORLD_DESERT: RegistryEntry_Reference;
static MUSIC_OVERWORLD_BADLANDS: RegistryEntry_Reference;
static MUSIC_OVERWORLD_JUNGLE: RegistryEntry_Reference;
static MUSIC_OVERWORLD_SPARSE_JUNGLE: RegistryEntry_Reference;
static MUSIC_OVERWORLD_BAMBOO_JUNGLE: RegistryEntry_Reference;
static MUSIC_UNDER_WATER: RegistryEntry_Reference;
static BLOCK_NETHER_BRICKS_BREAK: SoundEvent;
static BLOCK_NETHER_BRICKS_STEP: SoundEvent;
static BLOCK_NETHER_BRICKS_PLACE: SoundEvent;
static BLOCK_NETHER_BRICKS_HIT: SoundEvent;
static BLOCK_NETHER_BRICKS_FALL: SoundEvent;
static BLOCK_NETHER_WART_BREAK: SoundEvent;
static ITEM_NETHER_WART_PLANT: SoundEvent;
static BLOCK_NETHER_WOOD_BREAK: SoundEvent;
static BLOCK_NETHER_WOOD_FALL: SoundEvent;
static BLOCK_NETHER_WOOD_HIT: SoundEvent;
static BLOCK_NETHER_WOOD_PLACE: SoundEvent;
static BLOCK_NETHER_WOOD_STEP: SoundEvent;
static BLOCK_NETHER_WOOD_DOOR_CLOSE: SoundEvent;
static BLOCK_NETHER_WOOD_DOOR_OPEN: SoundEvent;
static BLOCK_NETHER_WOOD_TRAPDOOR_CLOSE: SoundEvent;
static BLOCK_NETHER_WOOD_TRAPDOOR_OPEN: SoundEvent;
static BLOCK_NETHER_WOOD_BUTTON_CLICK_OFF: SoundEvent;
static BLOCK_NETHER_WOOD_BUTTON_CLICK_ON: SoundEvent;
static BLOCK_NETHER_WOOD_PRESSURE_PLATE_CLICK_OFF: SoundEvent;
static BLOCK_NETHER_WOOD_PRESSURE_PLATE_CLICK_ON: SoundEvent;
static BLOCK_NETHER_WOOD_FENCE_GATE_CLOSE: SoundEvent;
static BLOCK_NETHER_WOOD_FENCE_GATE_OPEN: SoundEvent;
static INTENTIONALLY_EMPTY: SoundEvent;
static BLOCK_PACKED_MUD_BREAK: SoundEvent;
static BLOCK_PACKED_MUD_FALL: SoundEvent;
static BLOCK_PACKED_MUD_HIT: SoundEvent;
static BLOCK_PACKED_MUD_PLACE: SoundEvent;
static BLOCK_PACKED_MUD_STEP: SoundEvent;
static BLOCK_STEM_BREAK: SoundEvent;
static BLOCK_STEM_STEP: SoundEvent;
static BLOCK_STEM_PLACE: SoundEvent;
static BLOCK_STEM_HIT: SoundEvent;
static BLOCK_STEM_FALL: SoundEvent;
static BLOCK_NYLIUM_BREAK: SoundEvent;
static BLOCK_NYLIUM_STEP: SoundEvent;
static BLOCK_NYLIUM_PLACE: SoundEvent;
static BLOCK_NYLIUM_HIT: SoundEvent;
static BLOCK_NYLIUM_FALL: SoundEvent;
static BLOCK_NETHER_SPROUTS_BREAK: SoundEvent;
static BLOCK_NETHER_SPROUTS_STEP: SoundEvent;
static BLOCK_NETHER_SPROUTS_PLACE: SoundEvent;
static BLOCK_NETHER_SPROUTS_HIT: SoundEvent;
static BLOCK_NETHER_SPROUTS_FALL: SoundEvent;
static BLOCK_FUNGUS_BREAK: SoundEvent;
static BLOCK_FUNGUS_STEP: SoundEvent;
static BLOCK_FUNGUS_PLACE: SoundEvent;
static BLOCK_FUNGUS_HIT: SoundEvent;
static BLOCK_FUNGUS_FALL: SoundEvent;
static BLOCK_WEEPING_VINES_BREAK: SoundEvent;
static BLOCK_WEEPING_VINES_STEP: SoundEvent;
static BLOCK_WEEPING_VINES_PLACE: SoundEvent;
static BLOCK_WEEPING_VINES_HIT: SoundEvent;
static BLOCK_WEEPING_VINES_FALL: SoundEvent;
static BLOCK_WART_BLOCK_BREAK: SoundEvent;
static BLOCK_WART_BLOCK_STEP: SoundEvent;
static BLOCK_WART_BLOCK_PLACE: SoundEvent;
static BLOCK_WART_BLOCK_HIT: SoundEvent;
static BLOCK_WART_BLOCK_FALL: SoundEvent;
static BLOCK_NETHERITE_BLOCK_BREAK: SoundEvent;
static BLOCK_NETHERITE_BLOCK_STEP: SoundEvent;
static BLOCK_NETHERITE_BLOCK_PLACE: SoundEvent;
static BLOCK_NETHERITE_BLOCK_HIT: SoundEvent;
static BLOCK_NETHERITE_BLOCK_FALL: SoundEvent;
static BLOCK_NETHERRACK_BREAK: SoundEvent;
static BLOCK_NETHERRACK_STEP: SoundEvent;
static BLOCK_NETHERRACK_PLACE: SoundEvent;
static BLOCK_NETHERRACK_HIT: SoundEvent;
static BLOCK_NETHERRACK_FALL: SoundEvent;
static BLOCK_NOTE_BLOCK_BASEDRUM: RegistryEntry_Reference;
static BLOCK_NOTE_BLOCK_BASS: RegistryEntry_Reference;
static BLOCK_NOTE_BLOCK_BELL: RegistryEntry_Reference<SoundEvent>;
static BLOCK_NOTE_BLOCK_CHIME: RegistryEntry_Reference;
static BLOCK_NOTE_BLOCK_FLUTE: RegistryEntry_Reference;
static BLOCK_NOTE_BLOCK_GUITAR: RegistryEntry_Reference;
static BLOCK_NOTE_BLOCK_HARP: RegistryEntry_Reference;
static BLOCK_NOTE_BLOCK_HAT: RegistryEntry_Reference;
static BLOCK_NOTE_BLOCK_PLING: RegistryEntry_Reference;
static BLOCK_NOTE_BLOCK_SNARE: RegistryEntry_Reference;
static BLOCK_NOTE_BLOCK_XYLOPHONE: RegistryEntry_Reference;
static BLOCK_NOTE_BLOCK_IRON_XYLOPHONE: RegistryEntry_Reference;
static BLOCK_NOTE_BLOCK_COW_BELL: RegistryEntry_Reference;
static BLOCK_NOTE_BLOCK_DIDGERIDOO: RegistryEntry_Reference;
static BLOCK_NOTE_BLOCK_BIT: RegistryEntry_Reference;
static BLOCK_NOTE_BLOCK_BANJO: RegistryEntry_Reference;
static BLOCK_NOTE_BLOCK_IMITATE_ZOMBIE: RegistryEntry_Reference;
static BLOCK_NOTE_BLOCK_IMITATE_SKELETON: RegistryEntry_Reference;
static BLOCK_NOTE_BLOCK_IMITATE_CREEPER: RegistryEntry_Reference;
static BLOCK_NOTE_BLOCK_IMITATE_ENDER_DRAGON: RegistryEntry_Reference;
static BLOCK_NOTE_BLOCK_IMITATE_WITHER_SKELETON: RegistryEntry_Reference;
static BLOCK_NOTE_BLOCK_IMITATE_PIGLIN: RegistryEntry_Reference;
static ENTITY_OCELOT_HURT: SoundEvent;
static ENTITY_OCELOT_AMBIENT: SoundEvent;
static ENTITY_OCELOT_DEATH: SoundEvent;
static ENTITY_PAINTING_BREAK: SoundEvent;
static ENTITY_PAINTING_PLACE: SoundEvent;
static ENTITY_PANDA_PRE_SNEEZE: SoundEvent;
static ENTITY_PANDA_SNEEZE: SoundEvent;
static ENTITY_PANDA_AMBIENT: SoundEvent;
static ENTITY_PANDA_DEATH: SoundEvent;
static ENTITY_PANDA_EAT: SoundEvent;
static ENTITY_PANDA_STEP: SoundEvent;
static ENTITY_PANDA_CANT_BREED: SoundEvent;
static ENTITY_PANDA_AGGRESSIVE_AMBIENT: SoundEvent;
static ENTITY_PANDA_WORRIED_AMBIENT: SoundEvent;
static ENTITY_PANDA_HURT: SoundEvent;
static ENTITY_PANDA_BITE: SoundEvent;
static ENTITY_PARROT_AMBIENT: SoundEvent;
static ENTITY_PARROT_DEATH: SoundEvent;
static ENTITY_PARROT_EAT: SoundEvent;
static ENTITY_PARROT_FLY: SoundEvent;
static ENTITY_PARROT_HURT: SoundEvent;
static ENTITY_PARROT_IMITATE_BLAZE: SoundEvent;
static ENTITY_PARROT_IMITATE_CREEPER: SoundEvent;
static ENTITY_PARROT_IMITATE_DROWNED: SoundEvent;
static ENTITY_PARROT_IMITATE_ELDER_GUARDIAN: SoundEvent;
static ENTITY_PARROT_IMITATE_ENDER_DRAGON: SoundEvent;
static ENTITY_PARROT_IMITATE_ENDERMITE: SoundEvent;
static ENTITY_PARROT_IMITATE_EVOKER: SoundEvent;
static ENTITY_PARROT_IMITATE_GHAST: SoundEvent;
static ENTITY_PARROT_IMITATE_GUARDIAN: SoundEvent;
static ENTITY_PARROT_IMITATE_HOGLIN: SoundEvent;
static ENTITY_PARROT_IMITATE_HUSK: SoundEvent;
static ENTITY_PARROT_IMITATE_ILLUSIONER: SoundEvent;
static ENTITY_PARROT_IMITATE_MAGMA_CUBE: SoundEvent;
static ENTITY_PARROT_IMITATE_PHANTOM: SoundEvent;
static ENTITY_PARROT_IMITATE_PIGLIN: SoundEvent;
static ENTITY_PARROT_IMITATE_PIGLIN_BRUTE: SoundEvent;
static ENTITY_PARROT_IMITATE_PILLAGER: SoundEvent;
static ENTITY_PARROT_IMITATE_RAVAGER: SoundEvent;
static ENTITY_PARROT_IMITATE_SHULKER: SoundEvent;
static ENTITY_PARROT_IMITATE_SILVERFISH: SoundEvent;
static ENTITY_PARROT_IMITATE_SKELETON: SoundEvent;
static ENTITY_PARROT_IMITATE_SLIME: SoundEvent;
static ENTITY_PARROT_IMITATE_SPIDER: SoundEvent;
static ENTITY_PARROT_IMITATE_STRAY: SoundEvent;
static ENTITY_PARROT_IMITATE_VEX: SoundEvent;
static ENTITY_PARROT_IMITATE_VINDICATOR: SoundEvent;
static ENTITY_PARROT_IMITATE_WARDEN: SoundEvent;
static ENTITY_PARROT_IMITATE_WITCH: SoundEvent;
static ENTITY_PARROT_IMITATE_WITHER: SoundEvent;
static ENTITY_PARROT_IMITATE_WITHER_SKELETON: SoundEvent;
static ENTITY_PARROT_IMITATE_ZOGLIN: SoundEvent;
static ENTITY_PARROT_IMITATE_ZOMBIE: SoundEvent;
static ENTITY_PARROT_IMITATE_ZOMBIE_VILLAGER: SoundEvent;
static ENTITY_PARROT_STEP: SoundEvent;
static ENTITY_PHANTOM_AMBIENT: SoundEvent;
static ENTITY_PHANTOM_BITE: SoundEvent;
static ENTITY_PHANTOM_DEATH: SoundEvent;
static ENTITY_PHANTOM_FLAP: SoundEvent;
static ENTITY_PHANTOM_HURT: SoundEvent;
static ENTITY_PHANTOM_SWOOP: SoundEvent;
static ENTITY_PIG_AMBIENT: SoundEvent;
static ENTITY_PIG_DEATH: SoundEvent;
static ENTITY_PIG_HURT: SoundEvent;
static ENTITY_PIG_SADDLE: SoundEvent;
static ENTITY_PIG_STEP: SoundEvent;
static ENTITY_PIGLIN_ADMIRING_ITEM: SoundEvent;
static ENTITY_PIGLIN_AMBIENT: SoundEvent;
static ENTITY_PIGLIN_ANGRY: SoundEvent;
static ENTITY_PIGLIN_CELEBRATE: SoundEvent;
static ENTITY_PIGLIN_DEATH: SoundEvent;
static ENTITY_PIGLIN_JEALOUS: SoundEvent;
static ENTITY_PIGLIN_HURT: SoundEvent;
static ENTITY_PIGLIN_RETREAT: SoundEvent;
static ENTITY_PIGLIN_STEP: SoundEvent;
static ENTITY_PIGLIN_CONVERTED_TO_ZOMBIFIED: SoundEvent;
static ENTITY_PIGLIN_BRUTE_AMBIENT: SoundEvent;
static ENTITY_PIGLIN_BRUTE_ANGRY: SoundEvent;
static ENTITY_PIGLIN_BRUTE_DEATH: SoundEvent;
static ENTITY_PIGLIN_BRUTE_HURT: SoundEvent;
static ENTITY_PIGLIN_BRUTE_STEP: SoundEvent;
static ENTITY_PIGLIN_BRUTE_CONVERTED_TO_ZOMBIFIED: SoundEvent;
static ENTITY_PILLAGER_AMBIENT: SoundEvent;
static ENTITY_PILLAGER_CELEBRATE: SoundEvent;
static ENTITY_PILLAGER_DEATH: SoundEvent;
static ENTITY_PILLAGER_HURT: SoundEvent;
static BLOCK_PISTON_CONTRACT: SoundEvent;
static BLOCK_PISTON_EXTEND: SoundEvent;
static ENTITY_PLAYER_ATTACK_CRIT: SoundEvent;
static ENTITY_PLAYER_ATTACK_KNOCKBACK: SoundEvent;
static ENTITY_PLAYER_ATTACK_NODAMAGE: SoundEvent;
static ENTITY_PLAYER_ATTACK_STRONG: SoundEvent;
static ENTITY_PLAYER_ATTACK_SWEEP: SoundEvent;
static ENTITY_PLAYER_ATTACK_WEAK: SoundEvent;
static ENTITY_PLAYER_BIG_FALL: SoundEvent;
static ENTITY_PLAYER_BREATH: SoundEvent;
static ENTITY_PLAYER_BURP: SoundEvent;
static ENTITY_PLAYER_DEATH: SoundEvent;
static ENTITY_PLAYER_HURT: SoundEvent;
static ENTITY_PLAYER_HURT_DROWN: SoundEvent;
static ENTITY_PLAYER_HURT_FREEZE: SoundEvent;
static ENTITY_PLAYER_HURT_ON_FIRE: SoundEvent;
static ENTITY_PLAYER_HURT_SWEET_BERRY_BUSH: SoundEvent;
static ENTITY_PLAYER_LEVELUP: SoundEvent;
static ENTITY_PLAYER_SMALL_FALL: SoundEvent;
static ENTITY_PLAYER_SPLASH: SoundEvent;
static ENTITY_PLAYER_SPLASH_HIGH_SPEED: SoundEvent;
static ENTITY_PLAYER_SWIM: SoundEvent;
static ENTITY_POLAR_BEAR_AMBIENT: SoundEvent;
static ENTITY_POLAR_BEAR_AMBIENT_BABY: SoundEvent;
static ENTITY_POLAR_BEAR_DEATH: SoundEvent;
static ENTITY_POLAR_BEAR_HURT: SoundEvent;
static ENTITY_POLAR_BEAR_STEP: SoundEvent;
static ENTITY_POLAR_BEAR_WARNING: SoundEvent;
static BLOCK_POLISHED_DEEPSLATE_BREAK: SoundEvent;
static BLOCK_POLISHED_DEEPSLATE_FALL: SoundEvent;
static BLOCK_POLISHED_DEEPSLATE_HIT: SoundEvent;
static BLOCK_POLISHED_DEEPSLATE_PLACE: SoundEvent;
static BLOCK_POLISHED_DEEPSLATE_STEP: SoundEvent;
static BLOCK_PORTAL_AMBIENT: SoundEvent;
static BLOCK_PORTAL_TRAVEL: SoundEvent;
static BLOCK_PORTAL_TRIGGER: SoundEvent;
static BLOCK_POWDER_SNOW_BREAK: SoundEvent;
static BLOCK_POWDER_SNOW_FALL: SoundEvent;
static BLOCK_POWDER_SNOW_HIT: SoundEvent;
static BLOCK_POWDER_SNOW_PLACE: SoundEvent;
static BLOCK_POWDER_SNOW_STEP: SoundEvent;
static ENTITY_PUFFER_FISH_AMBIENT: SoundEvent;
static ENTITY_PUFFER_FISH_BLOW_OUT: SoundEvent;
static ENTITY_PUFFER_FISH_BLOW_UP: SoundEvent;
static ENTITY_PUFFER_FISH_DEATH: SoundEvent;
static ENTITY_PUFFER_FISH_FLOP: SoundEvent;
static ENTITY_PUFFER_FISH_HURT: SoundEvent;
static ENTITY_PUFFER_FISH_STING: SoundEvent;
static BLOCK_PUMPKIN_CARVE: SoundEvent;
static ENTITY_RABBIT_AMBIENT: SoundEvent;
static ENTITY_RABBIT_ATTACK: SoundEvent;
static ENTITY_RABBIT_DEATH: SoundEvent;
static ENTITY_RABBIT_HURT: SoundEvent;
static ENTITY_RABBIT_JUMP: SoundEvent;
static EVENT_RAID_HORN: RegistryEntry_Reference;
static ENTITY_RAVAGER_AMBIENT: SoundEvent;
static ENTITY_RAVAGER_ATTACK: SoundEvent;
static ENTITY_RAVAGER_CELEBRATE: SoundEvent;
static ENTITY_RAVAGER_DEATH: SoundEvent;
static ENTITY_RAVAGER_HURT: SoundEvent;
static ENTITY_RAVAGER_STEP: SoundEvent;
static ENTITY_RAVAGER_STUNNED: SoundEvent;
static ENTITY_RAVAGER_ROAR: SoundEvent;
static BLOCK_NETHER_GOLD_ORE_BREAK: SoundEvent;
static BLOCK_NETHER_GOLD_ORE_FALL: SoundEvent;
static BLOCK_NETHER_GOLD_ORE_HIT: SoundEvent;
static BLOCK_NETHER_GOLD_ORE_PLACE: SoundEvent;
static BLOCK_NETHER_GOLD_ORE_STEP: SoundEvent;
static BLOCK_NETHER_ORE_BREAK: SoundEvent;
static BLOCK_NETHER_ORE_FALL: SoundEvent;
static BLOCK_NETHER_ORE_HIT: SoundEvent;
static BLOCK_NETHER_ORE_PLACE: SoundEvent;
static BLOCK_NETHER_ORE_STEP: SoundEvent;
static BLOCK_REDSTONE_TORCH_BURNOUT: SoundEvent;
static BLOCK_RESPAWN_ANCHOR_AMBIENT: SoundEvent;
static BLOCK_RESPAWN_ANCHOR_CHARGE: SoundEvent;
static BLOCK_RESPAWN_ANCHOR_DEPLETE: RegistryEntry_Reference;
static BLOCK_RESPAWN_ANCHOR_SET_SPAWN: SoundEvent;
static BLOCK_ROOTED_DIRT_BREAK: SoundEvent;
static BLOCK_ROOTED_DIRT_FALL: SoundEvent;
static BLOCK_ROOTED_DIRT_HIT: SoundEvent;
static BLOCK_ROOTED_DIRT_PLACE: SoundEvent;
static BLOCK_ROOTED_DIRT_STEP: SoundEvent;
static ENTITY_SALMON_AMBIENT: SoundEvent;
static ENTITY_SALMON_DEATH: SoundEvent;
static ENTITY_SALMON_FLOP: SoundEvent;
static ENTITY_SALMON_HURT: SoundEvent;
static BLOCK_SAND_BREAK: SoundEvent;
static BLOCK_SAND_FALL: SoundEvent;
static BLOCK_SAND_HIT: SoundEvent;
static BLOCK_SAND_PLACE: SoundEvent;
static BLOCK_SAND_STEP: SoundEvent;
static BLOCK_SCAFFOLDING_BREAK: SoundEvent;
static BLOCK_SCAFFOLDING_FALL: SoundEvent;
static BLOCK_SCAFFOLDING_HIT: SoundEvent;
static BLOCK_SCAFFOLDING_PLACE: SoundEvent;
static BLOCK_SCAFFOLDING_STEP: SoundEvent;
static BLOCK_SCULK_SPREAD: SoundEvent;
static BLOCK_SCULK_CHARGE: SoundEvent;
static BLOCK_SCULK_BREAK: SoundEvent;
static BLOCK_SCULK_FALL: SoundEvent;
static BLOCK_SCULK_HIT: SoundEvent;
static BLOCK_SCULK_PLACE: SoundEvent;
static BLOCK_SCULK_STEP: SoundEvent;
static BLOCK_SCULK_CATALYST_BLOOM: SoundEvent;
static BLOCK_SCULK_CATALYST_BREAK: SoundEvent;
static BLOCK_SCULK_CATALYST_FALL: SoundEvent;
static BLOCK_SCULK_CATALYST_HIT: SoundEvent;
static BLOCK_SCULK_CATALYST_PLACE: SoundEvent;
static BLOCK_SCULK_CATALYST_STEP: SoundEvent;
static BLOCK_SCULK_SENSOR_CLICKING: SoundEvent;
static BLOCK_SCULK_SENSOR_CLICKING_STOP: SoundEvent;
static BLOCK_SCULK_SENSOR_BREAK: SoundEvent;
static BLOCK_SCULK_SENSOR_FALL: SoundEvent;
static BLOCK_SCULK_SENSOR_HIT: SoundEvent;
static BLOCK_SCULK_SENSOR_PLACE: SoundEvent;
static BLOCK_SCULK_SENSOR_STEP: SoundEvent;
static BLOCK_SCULK_SHRIEKER_BREAK: SoundEvent;
static BLOCK_SCULK_SHRIEKER_FALL: SoundEvent;
static BLOCK_SCULK_SHRIEKER_HIT: SoundEvent;
static BLOCK_SCULK_SHRIEKER_PLACE: SoundEvent;
static BLOCK_SCULK_SHRIEKER_SHRIEK: SoundEvent;
static BLOCK_SCULK_SHRIEKER_STEP: SoundEvent;
static BLOCK_SCULK_VEIN_BREAK: SoundEvent;
static BLOCK_SCULK_VEIN_FALL: SoundEvent;
static BLOCK_SCULK_VEIN_HIT: SoundEvent;
static BLOCK_SCULK_VEIN_PLACE: SoundEvent;
static BLOCK_SCULK_VEIN_STEP: SoundEvent;
static ENTITY_SHEEP_AMBIENT: SoundEvent;
static ENTITY_SHEEP_DEATH: SoundEvent;
static ENTITY_SHEEP_HURT: SoundEvent;
static ENTITY_SHEEP_SHEAR: SoundEvent;
static ENTITY_SHEEP_STEP: SoundEvent;
static ITEM_SHIELD_BLOCK: SoundEvent;
static ITEM_SHIELD_BREAK: SoundEvent;
static BLOCK_SHROOMLIGHT_BREAK: SoundEvent;
static BLOCK_SHROOMLIGHT_STEP: SoundEvent;
static BLOCK_SHROOMLIGHT_PLACE: SoundEvent;
static BLOCK_SHROOMLIGHT_HIT: SoundEvent;
static BLOCK_SHROOMLIGHT_FALL: SoundEvent;
static ITEM_SHOVEL_FLATTEN: SoundEvent;
static ENTITY_SHULKER_AMBIENT: SoundEvent;
static BLOCK_SHULKER_BOX_CLOSE: SoundEvent;
static BLOCK_SHULKER_BOX_OPEN: SoundEvent;
static ENTITY_SHULKER_BULLET_HIT: SoundEvent;
static ENTITY_SHULKER_BULLET_HURT: SoundEvent;
static ENTITY_SHULKER_CLOSE: SoundEvent;
static ENTITY_SHULKER_DEATH: SoundEvent;
static ENTITY_SHULKER_HURT: SoundEvent;
static ENTITY_SHULKER_HURT_CLOSED: SoundEvent;
static ENTITY_SHULKER_OPEN: SoundEvent;
static ENTITY_SHULKER_SHOOT: SoundEvent;
static ENTITY_SHULKER_TELEPORT: SoundEvent;
static ENTITY_SILVERFISH_AMBIENT: SoundEvent;
static ENTITY_SILVERFISH_DEATH: SoundEvent;
static ENTITY_SILVERFISH_HURT: SoundEvent;
static ENTITY_SILVERFISH_STEP: SoundEvent;
static ENTITY_SKELETON_AMBIENT: SoundEvent;
static ENTITY_SKELETON_CONVERTED_TO_STRAY: SoundEvent;
static ENTITY_SKELETON_DEATH: SoundEvent;
static ENTITY_SKELETON_HORSE_AMBIENT: SoundEvent;
static ENTITY_SKELETON_HORSE_DEATH: SoundEvent;
static ENTITY_SKELETON_HORSE_HURT: SoundEvent;
static ENTITY_SKELETON_HORSE_SWIM: SoundEvent;
static ENTITY_SKELETON_HORSE_AMBIENT_WATER: SoundEvent;
static ENTITY_SKELETON_HORSE_GALLOP_WATER: SoundEvent;
static ENTITY_SKELETON_HORSE_JUMP_WATER: SoundEvent;
static ENTITY_SKELETON_HORSE_STEP_WATER: SoundEvent;
static ENTITY_SKELETON_HURT: SoundEvent;
static ENTITY_SKELETON_SHOOT: SoundEvent;
static ENTITY_SKELETON_STEP: SoundEvent;
static ENTITY_SLIME_ATTACK: SoundEvent;
static ENTITY_SLIME_DEATH: SoundEvent;
static ENTITY_SLIME_HURT: SoundEvent;
static ENTITY_SLIME_JUMP: SoundEvent;
static ENTITY_SLIME_SQUISH: SoundEvent;
static BLOCK_SLIME_BLOCK_BREAK: SoundEvent;
static BLOCK_SLIME_BLOCK_FALL: SoundEvent;
static BLOCK_SLIME_BLOCK_HIT: SoundEvent;
static BLOCK_SLIME_BLOCK_PLACE: SoundEvent;
static BLOCK_SLIME_BLOCK_STEP: SoundEvent;
static BLOCK_SMALL_AMETHYST_BUD_BREAK: SoundEvent;
static BLOCK_SMALL_AMETHYST_BUD_PLACE: SoundEvent;
static BLOCK_SMALL_DRIPLEAF_BREAK: SoundEvent;
static BLOCK_SMALL_DRIPLEAF_FALL: SoundEvent;
static BLOCK_SMALL_DRIPLEAF_HIT: SoundEvent;
static BLOCK_SMALL_DRIPLEAF_PLACE: SoundEvent;
static BLOCK_SMALL_DRIPLEAF_STEP: SoundEvent;
static BLOCK_SOUL_SAND_BREAK: SoundEvent;
static BLOCK_SOUL_SAND_STEP: SoundEvent;
static BLOCK_SOUL_SAND_PLACE: SoundEvent;
static BLOCK_SOUL_SAND_HIT: SoundEvent;
static BLOCK_SOUL_SAND_FALL: SoundEvent;
static BLOCK_SOUL_SOIL_BREAK: SoundEvent;
static BLOCK_SOUL_SOIL_STEP: SoundEvent;
static BLOCK_SOUL_SOIL_PLACE: SoundEvent;
static BLOCK_SOUL_SOIL_HIT: SoundEvent;
static BLOCK_SOUL_SOIL_FALL: SoundEvent;
static PARTICLE_SOUL_ESCAPE: SoundEvent;
static BLOCK_SPORE_BLOSSOM_BREAK: SoundEvent;
static BLOCK_SPORE_BLOSSOM_FALL: SoundEvent;
static BLOCK_SPORE_BLOSSOM_HIT: SoundEvent;
static BLOCK_SPORE_BLOSSOM_PLACE: SoundEvent;
static BLOCK_SPORE_BLOSSOM_STEP: SoundEvent;
static ENTITY_STRIDER_AMBIENT: SoundEvent;
static ENTITY_STRIDER_HAPPY: SoundEvent;
static ENTITY_STRIDER_RETREAT: SoundEvent;
static ENTITY_STRIDER_DEATH: SoundEvent;
static ENTITY_STRIDER_HURT: SoundEvent;
static ENTITY_STRIDER_STEP: SoundEvent;
static ENTITY_STRIDER_STEP_LAVA: SoundEvent;
static ENTITY_STRIDER_EAT: SoundEvent;
static ENTITY_STRIDER_SADDLE: SoundEvent;
static ENTITY_SLIME_DEATH_SMALL: SoundEvent;
static ENTITY_SLIME_HURT_SMALL: SoundEvent;
static ENTITY_SLIME_JUMP_SMALL: SoundEvent;
static ENTITY_SLIME_SQUISH_SMALL: SoundEvent;
static BLOCK_SMITHING_TABLE_USE: SoundEvent;
static BLOCK_SMOKER_SMOKE: SoundEvent;
static ENTITY_SNIFFER_STEP: SoundEvent;
static ENTITY_SNIFFER_EAT: SoundEvent;
static ENTITY_SNIFFER_IDLE: SoundEvent;
static ENTITY_SNIFFER_HURT: SoundEvent;
static ENTITY_SNIFFER_DEATH: SoundEvent;
static ENTITY_SNIFFER_DROP_SEED: SoundEvent;
static ENTITY_SNIFFER_SCENTING: SoundEvent;
static ENTITY_SNIFFER_SNIFFING: SoundEvent;
static ENTITY_SNIFFER_SEARCHING: SoundEvent;
static ENTITY_SNIFFER_DIGGING: SoundEvent;
static ENTITY_SNIFFER_DIGGING_STOP: SoundEvent;
static ENTITY_SNIFFER_HAPPY: SoundEvent;
static BLOCK_SNIFFER_EGG_PLOP: SoundEvent;
static BLOCK_SNIFFER_EGG_CRACK: SoundEvent;
static BLOCK_SNIFFER_EGG_HATCH: SoundEvent;
static ENTITY_SNOWBALL_THROW: SoundEvent;
static BLOCK_SNOW_BREAK: SoundEvent;
static BLOCK_SNOW_FALL: SoundEvent;
static ENTITY_SNOW_GOLEM_AMBIENT: SoundEvent;
static ENTITY_SNOW_GOLEM_DEATH: SoundEvent;
static ENTITY_SNOW_GOLEM_HURT: SoundEvent;
static ENTITY_SNOW_GOLEM_SHOOT: SoundEvent;
static ENTITY_SNOW_GOLEM_SHEAR: SoundEvent;
static BLOCK_SNOW_HIT: SoundEvent;
static BLOCK_SNOW_PLACE: SoundEvent;
static BLOCK_SNOW_STEP: SoundEvent;
static ENTITY_SPIDER_AMBIENT: SoundEvent;
static ENTITY_SPIDER_DEATH: SoundEvent;
static ENTITY_SPIDER_HURT: SoundEvent;
static ENTITY_SPIDER_STEP: SoundEvent;
static ENTITY_SPLASH_POTION_BREAK: SoundEvent;
static ENTITY_SPLASH_POTION_THROW: SoundEvent;
static ITEM_SPYGLASS_USE: SoundEvent;
static ITEM_SPYGLASS_STOP_USING: SoundEvent;
static ENTITY_SQUID_AMBIENT: SoundEvent;
static ENTITY_SQUID_DEATH: SoundEvent;
static ENTITY_SQUID_HURT: SoundEvent;
static ENTITY_SQUID_SQUIRT: SoundEvent;
static BLOCK_STONE_BREAK: SoundEvent;
static BLOCK_STONE_BUTTON_CLICK_OFF: SoundEvent;
static BLOCK_STONE_BUTTON_CLICK_ON: SoundEvent;
static BLOCK_STONE_FALL: SoundEvent;
static BLOCK_STONE_HIT: SoundEvent;
static BLOCK_STONE_PLACE: SoundEvent;
static BLOCK_STONE_PRESSURE_PLATE_CLICK_OFF: SoundEvent;
static BLOCK_STONE_PRESSURE_PLATE_CLICK_ON: SoundEvent;
static BLOCK_STONE_STEP: SoundEvent;
static ENTITY_STRAY_AMBIENT: SoundEvent;
static ENTITY_STRAY_DEATH: SoundEvent;
static ENTITY_STRAY_HURT: SoundEvent;
static ENTITY_STRAY_STEP: SoundEvent;
static BLOCK_SWEET_BERRY_BUSH_BREAK: SoundEvent;
static BLOCK_SWEET_BERRY_BUSH_PLACE: SoundEvent;
static BLOCK_SWEET_BERRY_BUSH_PICK_BERRIES: SoundEvent;
static ENTITY_TADPOLE_DEATH: SoundEvent;
static ENTITY_TADPOLE_FLOP: SoundEvent;
static ENTITY_TADPOLE_GROW_UP: SoundEvent;
static ENTITY_TADPOLE_HURT: SoundEvent;
static ENCHANT_THORNS_HIT: SoundEvent;
static ENTITY_TNT_PRIMED: SoundEvent;
static ITEM_TOTEM_USE: SoundEvent;
static ITEM_TRIDENT_HIT: SoundEvent;
static ITEM_TRIDENT_HIT_GROUND: SoundEvent;
static ITEM_TRIDENT_RETURN: SoundEvent;
static ITEM_TRIDENT_RIPTIDE_1: SoundEvent;
static ITEM_TRIDENT_RIPTIDE_2: SoundEvent;
static ITEM_TRIDENT_RIPTIDE_3: SoundEvent;
static ITEM_TRIDENT_THROW: SoundEvent;
static ITEM_TRIDENT_THUNDER: SoundEvent;
static BLOCK_TRIPWIRE_ATTACH: SoundEvent;
static BLOCK_TRIPWIRE_CLICK_OFF: SoundEvent;
static BLOCK_TRIPWIRE_CLICK_ON: SoundEvent;
static BLOCK_TRIPWIRE_DETACH: SoundEvent;
static ENTITY_TROPICAL_FISH_AMBIENT: SoundEvent;
static ENTITY_TROPICAL_FISH_DEATH: SoundEvent;
static ENTITY_TROPICAL_FISH_FLOP: SoundEvent;
static ENTITY_TROPICAL_FISH_HURT: SoundEvent;
static BLOCK_TUFF_BREAK: SoundEvent;
static BLOCK_TUFF_STEP: SoundEvent;
static BLOCK_TUFF_PLACE: SoundEvent;
static BLOCK_TUFF_HIT: SoundEvent;
static BLOCK_TUFF_FALL: SoundEvent;
static ENTITY_TURTLE_AMBIENT_LAND: SoundEvent;
static ENTITY_TURTLE_DEATH: SoundEvent;
static ENTITY_TURTLE_DEATH_BABY: SoundEvent;
static ENTITY_TURTLE_EGG_BREAK: SoundEvent;
static ENTITY_TURTLE_EGG_CRACK: SoundEvent;
static ENTITY_TURTLE_EGG_HATCH: SoundEvent;
static ENTITY_TURTLE_HURT: SoundEvent;
static ENTITY_TURTLE_HURT_BABY: SoundEvent;
static ENTITY_TURTLE_LAY_EGG: SoundEvent;
static ENTITY_TURTLE_SHAMBLE: SoundEvent;
static ENTITY_TURTLE_SHAMBLE_BABY: SoundEvent;
static ENTITY_TURTLE_SWIM: SoundEvent;
static UI_BUTTON_CLICK: RegistryEntry_Reference;
static UI_LOOM_SELECT_PATTERN: SoundEvent;
static UI_LOOM_TAKE_RESULT: SoundEvent;
static UI_CARTOGRAPHY_TABLE_TAKE_RESULT: SoundEvent;
static UI_STONECUTTER_TAKE_RESULT: SoundEvent;
static UI_STONECUTTER_SELECT_RECIPE: SoundEvent;
static UI_TOAST_CHALLENGE_COMPLETE: SoundEvent;
static UI_TOAST_IN: SoundEvent;
static UI_TOAST_OUT: SoundEvent;
static ENTITY_VEX_AMBIENT: SoundEvent;
static ENTITY_VEX_CHARGE: SoundEvent;
static ENTITY_VEX_DEATH: SoundEvent;
static ENTITY_VEX_HURT: SoundEvent;
static ENTITY_VILLAGER_AMBIENT: SoundEvent;
static ENTITY_VILLAGER_CELEBRATE: SoundEvent;
static ENTITY_VILLAGER_DEATH: SoundEvent;
static ENTITY_VILLAGER_HURT: SoundEvent;
static ENTITY_VILLAGER_NO: SoundEvent;
static ENTITY_VILLAGER_TRADE: SoundEvent;
static ENTITY_VILLAGER_YES: SoundEvent;
static ENTITY_VILLAGER_WORK_ARMORER: SoundEvent;
static ENTITY_VILLAGER_WORK_BUTCHER: SoundEvent;
static ENTITY_VILLAGER_WORK_CARTOGRAPHER: SoundEvent;
static ENTITY_VILLAGER_WORK_CLERIC: SoundEvent;
static ENTITY_VILLAGER_WORK_FARMER: SoundEvent;
static ENTITY_VILLAGER_WORK_FISHERMAN: SoundEvent;
static ENTITY_VILLAGER_WORK_FLETCHER: SoundEvent;
static ENTITY_VILLAGER_WORK_LEATHERWORKER: SoundEvent;
static ENTITY_VILLAGER_WORK_LIBRARIAN: SoundEvent;
static ENTITY_VILLAGER_WORK_MASON: SoundEvent;
static ENTITY_VILLAGER_WORK_SHEPHERD: SoundEvent;
static ENTITY_VILLAGER_WORK_TOOLSMITH: SoundEvent;
static ENTITY_VILLAGER_WORK_WEAPONSMITH: SoundEvent;
static ENTITY_VINDICATOR_AMBIENT: SoundEvent;
static ENTITY_VINDICATOR_CELEBRATE: SoundEvent;
static ENTITY_VINDICATOR_DEATH: SoundEvent;
static ENTITY_VINDICATOR_HURT: SoundEvent;
static BLOCK_VINE_BREAK: SoundEvent;
static BLOCK_VINE_FALL: SoundEvent;
static BLOCK_VINE_HIT: SoundEvent;
static BLOCK_VINE_PLACE: SoundEvent;
static BLOCK_VINE_STEP: SoundEvent;
static BLOCK_LILY_PAD_PLACE: SoundEvent;
static ENTITY_WANDERING_TRADER_AMBIENT: SoundEvent;
static ENTITY_WANDERING_TRADER_DEATH: SoundEvent;
static ENTITY_WANDERING_TRADER_DISAPPEARED: SoundEvent;
static ENTITY_WANDERING_TRADER_DRINK_MILK: SoundEvent;
static ENTITY_WANDERING_TRADER_DRINK_POTION: SoundEvent;
static ENTITY_WANDERING_TRADER_HURT: SoundEvent;
static ENTITY_WANDERING_TRADER_NO: SoundEvent;
static ENTITY_WANDERING_TRADER_REAPPEARED: SoundEvent;
static ENTITY_WANDERING_TRADER_TRADE: SoundEvent;
static ENTITY_WANDERING_TRADER_YES: SoundEvent;
static ENTITY_WARDEN_AGITATED: SoundEvent;
static ENTITY_WARDEN_AMBIENT: SoundEvent;
static ENTITY_WARDEN_ANGRY: SoundEvent;
static ENTITY_WARDEN_ATTACK_IMPACT: SoundEvent;
static ENTITY_WARDEN_DEATH: SoundEvent;
static ENTITY_WARDEN_DIG: SoundEvent;
static ENTITY_WARDEN_EMERGE: SoundEvent;
static ENTITY_WARDEN_HEARTBEAT: SoundEvent;
static ENTITY_WARDEN_HURT: SoundEvent;
static ENTITY_WARDEN_LISTENING: SoundEvent;
static ENTITY_WARDEN_LISTENING_ANGRY: SoundEvent;
static ENTITY_WARDEN_NEARBY_CLOSE: SoundEvent;
static ENTITY_WARDEN_NEARBY_CLOSER: SoundEvent;
static ENTITY_WARDEN_NEARBY_CLOSEST: SoundEvent;
static ENTITY_WARDEN_ROAR: SoundEvent;
static ENTITY_WARDEN_SNIFF: SoundEvent;
static ENTITY_WARDEN_SONIC_BOOM: SoundEvent;
static ENTITY_WARDEN_SONIC_CHARGE: SoundEvent;
static ENTITY_WARDEN_STEP: SoundEvent;
static ENTITY_WARDEN_TENDRIL_CLICKS: SoundEvent;
static BLOCK_SIGN_WAXED_INTERACT_FAIL: SoundEvent;
static BLOCK_WATER_AMBIENT: SoundEvent;
static WEATHER_RAIN: SoundEvent;
static WEATHER_RAIN_ABOVE: SoundEvent;
static BLOCK_WET_GRASS_BREAK: SoundEvent;
static BLOCK_WET_GRASS_FALL: SoundEvent;
static BLOCK_WET_GRASS_HIT: SoundEvent;
static BLOCK_WET_GRASS_PLACE: SoundEvent;
static BLOCK_WET_GRASS_STEP: SoundEvent;
static ENTITY_WITCH_AMBIENT: SoundEvent;
static ENTITY_WITCH_CELEBRATE: SoundEvent;
static ENTITY_WITCH_DEATH: SoundEvent;
static ENTITY_WITCH_DRINK: SoundEvent;
static ENTITY_WITCH_HURT: SoundEvent;
static ENTITY_WITCH_THROW: SoundEvent;
static ENTITY_WITHER_AMBIENT: SoundEvent;
static ENTITY_WITHER_BREAK_BLOCK: SoundEvent;
static ENTITY_WITHER_DEATH: SoundEvent;
static ENTITY_WITHER_HURT: SoundEvent;
static ENTITY_WITHER_SHOOT: SoundEvent;
static ENTITY_WITHER_SKELETON_AMBIENT: SoundEvent;
static ENTITY_WITHER_SKELETON_DEATH: SoundEvent;
static ENTITY_WITHER_SKELETON_HURT: SoundEvent;
static ENTITY_WITHER_SKELETON_STEP: SoundEvent;
static ENTITY_WITHER_SPAWN: SoundEvent;
static ENTITY_WOLF_AMBIENT: SoundEvent;
static ENTITY_WOLF_DEATH: SoundEvent;
static ENTITY_WOLF_GROWL: SoundEvent;
static ENTITY_WOLF_HOWL: SoundEvent;
static ENTITY_WOLF_HURT: SoundEvent;
static ENTITY_WOLF_PANT: SoundEvent;
static ENTITY_WOLF_SHAKE: SoundEvent;
static ENTITY_WOLF_STEP: SoundEvent;
static ENTITY_WOLF_WHINE: SoundEvent;
static BLOCK_WOODEN_DOOR_CLOSE: SoundEvent;
static BLOCK_WOODEN_DOOR_OPEN: SoundEvent;
static BLOCK_WOODEN_TRAPDOOR_CLOSE: SoundEvent;
static BLOCK_WOODEN_TRAPDOOR_OPEN: SoundEvent;
static BLOCK_WOODEN_BUTTON_CLICK_OFF: SoundEvent;
static BLOCK_WOODEN_BUTTON_CLICK_ON: SoundEvent;
static BLOCK_WOODEN_PRESSURE_PLATE_CLICK_OFF: SoundEvent;
static BLOCK_WOODEN_PRESSURE_PLATE_CLICK_ON: SoundEvent;
static BLOCK_WOOD_BREAK: SoundEvent;
static BLOCK_WOOD_FALL: SoundEvent;
static BLOCK_WOOD_HIT: SoundEvent;
static BLOCK_WOOD_PLACE: SoundEvent;
static BLOCK_WOOD_STEP: SoundEvent;
static BLOCK_WOOL_BREAK: SoundEvent;
static BLOCK_WOOL_FALL: SoundEvent;
static BLOCK_WOOL_HIT: SoundEvent;
static BLOCK_WOOL_PLACE: SoundEvent;
static BLOCK_WOOL_STEP: SoundEvent;
static ENTITY_ZOGLIN_AMBIENT: SoundEvent;
static ENTITY_ZOGLIN_ANGRY: SoundEvent;
static ENTITY_ZOGLIN_ATTACK: SoundEvent;
static ENTITY_ZOGLIN_DEATH: SoundEvent;
static ENTITY_ZOGLIN_HURT: SoundEvent;
static ENTITY_ZOGLIN_STEP: SoundEvent;
static ENTITY_ZOMBIE_AMBIENT: SoundEvent;
static ENTITY_ZOMBIE_ATTACK_WOODEN_DOOR: SoundEvent;
static ENTITY_ZOMBIE_ATTACK_IRON_DOOR: SoundEvent;
static ENTITY_ZOMBIE_BREAK_WOODEN_DOOR: SoundEvent;
static ENTITY_ZOMBIE_CONVERTED_TO_DROWNED: SoundEvent;
static ENTITY_ZOMBIE_DEATH: SoundEvent;
static ENTITY_ZOMBIE_DESTROY_EGG: SoundEvent;
static ENTITY_ZOMBIE_HORSE_AMBIENT: SoundEvent;
static ENTITY_ZOMBIE_HORSE_DEATH: SoundEvent;
static ENTITY_ZOMBIE_HORSE_HURT: SoundEvent;
static ENTITY_ZOMBIE_HURT: SoundEvent;
static ENTITY_ZOMBIE_INFECT: SoundEvent;
static ENTITY_ZOMBIFIED_PIGLIN_AMBIENT: SoundEvent;
static ENTITY_ZOMBIFIED_PIGLIN_ANGRY: SoundEvent;
static ENTITY_ZOMBIFIED_PIGLIN_DEATH: SoundEvent;
static ENTITY_ZOMBIFIED_PIGLIN_HURT: SoundEvent;
static ENTITY_ZOMBIE_STEP: SoundEvent;
static ENTITY_ZOMBIE_VILLAGER_AMBIENT: SoundEvent;
static ENTITY_ZOMBIE_VILLAGER_CONVERTED: SoundEvent;
static ENTITY_ZOMBIE_VILLAGER_CURE: SoundEvent;
static ENTITY_ZOMBIE_VILLAGER_DEATH: SoundEvent;
static ENTITY_ZOMBIE_VILLAGER_HURT: SoundEvent;
static ENTITY_ZOMBIE_VILLAGER_STEP: SoundEvent;
}

//net.minecraft.block.entity.ChestLidAnimator
class ChestLidAnimator extends JObject{
 step(): void;
 getProgress(delta: number): number;
 setOpen(open: boolean): void;
}

//net.minecraft.structure.OceanRuinGenerator$1


//net.minecraft.screen.ArrayPropertyDelegate
class ArrayPropertyDelegate extends JObject, PropertyDelegate{
 get(index: number): number;
 size(): number;
 set(index: number,value: number): void;
}

//net.minecraft.entity.LivingEntity$1


//net.minecraft.unused.packageinfo.PackageInfo7156
interface PackageInfo7156 extends JObject{
}

//net.minecraft.resource.FileResourcePackProvider
class FileResourcePackProvider extends JObject, ResourcePackProvider{
 register(profileAdder: Consumer): void;
}
class Static_FileResourcePackProvider {
static getFactory(path: Path,alwaysStable: boolean): ResourcePackProfile_PackFactory;
static getFileName(path: Path): string;
static forEachProfile(packsDir: Path,alwaysStable: boolean,consumer: BiConsumer): void;
static method_45268(file: File,bl: boolean,name: string): ResourcePack;
static method_45270(path: Path,bl: boolean,name: string): ResourcePack;
static LOGGER: Logger;
}

//net.minecraft.command.argument.ParticleEffectArgumentType
class ParticleEffectArgumentType extends JObject, ArgumentType{
 parse(reader: StringReader): Object;
 parse(stringReader: StringReader): ParticleEffect;
 getExamples(): Collection;
 listSuggestions(context: CommandContext,builder: SuggestionsBuilder): CompletableFuture;
}
class Static_ParticleEffectArgumentType {
static getType(reader: StringReader,registryWrapper: RegistryWrapper): ParticleType;
static particleEffect(registryAccess: CommandRegistryAccess): ParticleEffectArgumentType;
static getParticle(context: CommandContext,name: string): ParticleEffect;
static readParameters(reader: StringReader,type: ParticleType): ParticleEffect;
static readParameters(reader: StringReader,registryWrapper: RegistryWrapper): ParticleEffect;
static method_45582(identifier: Identifier): CommandSyntaxException;
static method_9419(id: Object): Message;
static EXAMPLES: Collection;
static UNKNOWN_PARTICLE_EXCEPTION: DynamicCommandExceptionType;
}

//net.minecraft.world.timer.TimerCallback$Serializer
class TimerCallback_Serializer extends JObject{
 getId(): Identifier;
 deserialize(nbt: NbtCompound): TimerCallback;
 serialize(nbt: NbtCompound,callback: TimerCallback): void;
 getCallbackClass(): Class;
}

//net.minecraft.command.argument.RotationArgumentType
class RotationArgumentType extends JObject, ArgumentType{
 parse(stringReader: StringReader): PosArgument;
 parse(reader: StringReader): Object;
 getExamples(): Collection;
}
class Static_RotationArgumentType {
static rotation(): RotationArgumentType;
static getRotation(context: CommandContext,name: string): PosArgument;
static EXAMPLES: Collection;
static INCOMPLETE_ROTATION_EXCEPTION: SimpleCommandExceptionType;
}

//net.minecraft.resource.ResourcePackProfile
class ResourcePackProfile extends JObject{
 getName(): string;
 equals(o: Object): boolean;
 hashCode(): number;
 getSource(): ResourcePackSource;
 getDisplayName(): Text;
 getDescription(): Text;
 isAlwaysEnabled(): boolean;
 isPinned(): boolean;
 createResourcePack(): ResourcePack;
 getInitialPosition(): ResourcePackProfile_InsertionPosition;
 getCompatibility(): ResourcePackCompatibility;
 getInformationText(enabled: boolean): Text;
 getRequestedFeatures(): FeatureSet;
}
class Static_ResourcePackProfile {
static of(name: string,displayName: Text,alwaysEnabled: boolean,packFactory: ResourcePackProfile_PackFactory,metadata: ResourcePackProfile_Metadata,type: ResourceType,position: ResourcePackProfile_InsertionPosition,pinned: boolean,source: ResourcePackSource): ResourcePackProfile;
static create(name: string,displayName: Text,alwaysEnabled: boolean,packFactory: ResourcePackProfile_PackFactory,type: ResourceType,position: ResourcePackProfile_InsertionPosition,source: ResourcePackSource): ResourcePackProfile;
static loadMetadata(name: string,packFactory: ResourcePackProfile_PackFactory): ResourcePackProfile_Metadata;
static LOGGER: Logger;
}

//net.minecraft.world.event.listener.GameEventDispatcher$1


//net.minecraft.client.render.model.json.ModelOverrideList$InlinedCondition
class ModelOverrideList_InlinedCondition extends JObject{
 index: number;
 threshold: number;
}

//net.minecraft.world.gen.surfacebuilder.VanillaSurfaceRules
class VanillaSurfaceRules extends JObject{
}
class Static_VanillaSurfaceRules {
static block(block: Block): MaterialRules_MaterialRule;
static createDefaultRule(surface: boolean,bedrockRoof: boolean,bedrockFloor: boolean): MaterialRules_MaterialRule;
static method_39921(i: number): MaterialRules_MaterialRule;
static getAirRule(): MaterialRules_MaterialRule;
static getEndStoneRule(): MaterialRules_MaterialRule;
static createNetherSurfaceRule(): MaterialRules_MaterialRule;
static createOverworldSurfaceRule(): MaterialRules_MaterialRule;
static surfaceNoiseThreshold(min: number): MaterialRules_MaterialCondition;
static AIR: MaterialRules_MaterialRule;
static BEDROCK: MaterialRules_MaterialRule;
static WHITE_TERRACOTTA: MaterialRules_MaterialRule;
static ORANGE_TERRACOTTA: MaterialRules_MaterialRule;
static TERRACOTTA: MaterialRules_MaterialRule;
static RED_SAND: MaterialRules_MaterialRule;
static RED_SANDSTONE: MaterialRules_MaterialRule;
static STONE: MaterialRules_MaterialRule;
static DEEPSLATE: MaterialRules_MaterialRule;
static DIRT: MaterialRules_MaterialRule;
static PODZOL: MaterialRules_MaterialRule;
static COARSE_DIRT: MaterialRules_MaterialRule;
static MYCELIUM: MaterialRules_MaterialRule;
static GRASS_BLOCK: MaterialRules_MaterialRule;
static CALCITE: MaterialRules_MaterialRule;
static GRAVEL: MaterialRules_MaterialRule;
static SAND: MaterialRules_MaterialRule;
static SANDSTONE: MaterialRules_MaterialRule;
static PACKED_ICE: MaterialRules_MaterialRule;
static SNOW_BLOCK: MaterialRules_MaterialRule;
static MUD: MaterialRules_MaterialRule;
static POWDER_SNOW: MaterialRules_MaterialRule;
static ICE: MaterialRules_MaterialRule;
static WATER: MaterialRules_MaterialRule;
static LAVA: MaterialRules_MaterialRule;
static NETHERRACK: MaterialRules_MaterialRule;
static SOUL_SAND: MaterialRules_MaterialRule;
static SOUL_SOIL: MaterialRules_MaterialRule;
static BASALT: MaterialRules_MaterialRule;
static BLACKSTONE: MaterialRules_MaterialRule;
static WARPED_WART_BLOCK: MaterialRules_MaterialRule;
static WARPED_NYLIUM: MaterialRules_MaterialRule;
static NETHER_WART_BLOCK: MaterialRules_MaterialRule;
static CRIMSON_NYLIUM: MaterialRules_MaterialRule;
static END_STONE: MaterialRules_MaterialRule;
}

//net.minecraft.block.GrindstoneBlock$1


//net.minecraft.loot.operator.BoundedIntUnaryOperator$Serializer
class BoundedIntUnaryOperator_Serializer extends JObject, JsonDeserializer, JsonSerializer{
 deserialize(json: JsonElement,unused: Type,context: JsonDeserializationContext): Object;
 deserialize(jsonElement: JsonElement,type: Type,jsonDeserializationContext: JsonDeserializationContext): BoundedIntUnaryOperator;
 serialize(entry: Object,unused: Type,context: JsonSerializationContext): JsonElement;
 serialize(boundedIntUnaryOperator: BoundedIntUnaryOperator,type: Type,jsonSerializationContext: JsonSerializationContext): JsonElement;
}

//net.minecraft.structure.BuriedTreasureGenerator
class BuriedTreasureGenerator extends JObject{
}

//net.minecraft.network.PacketBundleHandler
interface PacketBundleHandler extends JObject{
 forEachPacket(packet: Packet,consumer: Consumer): void;
 createBundler(splitter: Packet): PacketBundleHandler_Bundler;
}
class Static_PacketBundleHandler {
static create(bundlePacketType: Class,bundleFunction: Function,splitter: BundleSplitterPacket): PacketBundleHandler;
static KEY: AttributeKey;
static MAX_PACKETS: number;
static NOOP: PacketBundleHandler;
}

//net.minecraft.nbt.visitor.NbtTextFormatter
class NbtTextFormatter extends JObject, NbtElementVisitor{
 apply(element: NbtElement): Text;
 visitEnd(element: NbtEnd): void;
 visitInt(element: NbtInt): void;
 visitLong(element: NbtLong): void;
 visitString(element: NbtString): void;
 visitDouble(element: NbtDouble): void;
 visitShort(element: NbtShort): void;
 visitFloat(element: NbtFloat): void;
 visitByte(element: NbtByte): void;
 visitByteArray(element: NbtByteArray): void;
 visitLongArray(element: NbtLongArray): void;
 visitCompound(compound: NbtCompound): void;
 visitIntArray(element: NbtIntArray): void;
 visitList(element: NbtList): void;
}
class Static_NbtTextFormatter {
static escapeName(name: string): Text;
static LOGGER: Logger;
static field_33271: number;
static SINGLE_LINE_ELEMENT_TYPES: ByteCollection;
static NAME_COLOR: Formatting;
static STRING_COLOR: Formatting;
static NUMBER_COLOR: Formatting;
static TYPE_SUFFIX_COLOR: Formatting;
static SIMPLE_NAME: Pattern;
static KEY_VALUE_SEPARATOR: string;
static ENTRY_SEPARATOR: string;
static SQUARE_OPEN_BRACKET: string;
static SQUARE_CLOSE_BRACKET: string;
static SEMICOLON: string;
static SPACE: string;
static CURLY_OPEN_BRACKET: string;
static CURLY_CLOSE_BRACKET: string;
static NEW_LINE: string;
}

//net.minecraft.world.PersistentState
class PersistentState extends JObject{
 save(file: File): void;
 isDirty(): boolean;
 markDirty(): void;
 writeNbt(nbt: NbtCompound): NbtCompound;
 setDirty(dirty: boolean): void;
}
class Static_PersistentState {
static LOGGER: Logger;
}

//net.minecraft.util.profiler.Deviation
class Deviation extends JObject{
 instant: Instant;
 ticks: number;
 result: ProfileResult;
}

//net.minecraft.world.gen.foliage.FoliagePlacer$BlockPlacer
interface FoliagePlacer_BlockPlacer extends JObject{
 placeBlock(pos: BlockPos,state: BlockState): void;
 hasPlacedBlock(pos: BlockPos): boolean;
}

//net.minecraft.server.world.ChunkTaskPrioritySystem$Task
class ChunkTaskPrioritySystem_Task extends JObject{
}

//net.minecraft.server.command.HelpCommand
class HelpCommand extends JObject{
}
class Static_HelpCommand {
static register(dispatcher: CommandDispatcher): void;
static method_51994(string: string): Text;
static method_13407(commandDispatcher: CommandDispatcher,context: CommandContext): number;
static method_13406(commandDispatcher: CommandDispatcher,context: CommandContext): number;
static method_51993(parseResults: ParseResults,string: string): Text;
static FAILED_EXCEPTION: SimpleCommandExceptionType;
}

//net.minecraft.client.render.RenderLayers
class RenderLayers extends JObject{
}
class Static_RenderLayers {
static getBlockLayer(state: BlockState): RenderLayer;
static getEntityBlockLayer(state: BlockState,direct: boolean): RenderLayer;
static setFancyGraphicsOrBetter(fancyGraphicsOrBetter: boolean): void;
static getMovingBlockLayer(state: BlockState): RenderLayer;
static getFluidLayer(state: FluidState): RenderLayer;
static method_23685(map: HashMap): void;
static method_23681(map: HashMap): void;
static getItemLayer(stack: ItemStack,direct: boolean): RenderLayer;
static BLOCKS: Map;
static FLUIDS: Map;
static fancyGraphicsOrBetter: boolean;
}

//net.minecraft.util.math.ColorHelper$Argb
class ColorHelper_Argb extends JObject{
}
class Static_ColorHelper_Argb {
static getBlue(argb: number): number;
static getGreen(argb: number): number;
static getRed(argb: number): number;
static getAlpha(argb: number): number;
static mixColor(first: number,second: number): number;
static lerp(delta: number,start: number,end: number): number;
static getArgb(alpha: number,red: number,green: number,blue: number): number;
}

//net.minecraft.util.math.Boxes
class Boxes extends JObject{
}
class Static_Boxes {
static stretch(box: Box,direction: Direction,length: number): Box;
}

//net.minecraft.block.entity.SculkSpreadManager
class SculkSpreadManager extends JObject{
 spread(pos: BlockPos,charge: number): void;
 tick(world: WorldAccess,pos: BlockPos,random: Random,shouldConvertToBlock: boolean): void;
 readNbt(nbt: NbtCompound): void;
 writeNbt(nbt: NbtCompound): void;
 getExtraBlockChance(): number;
 isWorldGen(): boolean;
 getCursors(): List;
 getMaxDistance(): number;
 getReplaceableTag(): TagKey;
 clearCursors(): void;
 getSpreadChance(): number;
 getDecayChance(): number;
}
class Static_SculkSpreadManager {
static create(): SculkSpreadManager;
static method_41484(nbtCompound: NbtCompound,cursorsNbt: NbtElement): void;
static createWorldGen(): SculkSpreadManager;
static method_41481(cursor: SculkSpreadManager_Cursor,posx: BlockPos,charge: Integer): Integer;
static method_51355(cursor: SculkSpreadManager_Cursor): Integer;
static field_37609: number;
static MAX_CHARGE: number;
static field_37611: number;
static MAX_CURSORS: number;
static field_37612: number;
static LOGGER: Logger;
}

//net.minecraft.client.render.model.MultipartUnbakedModel$Deserializer
class MultipartUnbakedModel_Deserializer extends JObject, JsonDeserializer{
 deserialize(json: JsonElement,type: Type,context: JsonDeserializationContext): Object;
 deserialize(jsonElement: JsonElement,type: Type,jsonDeserializationContext: JsonDeserializationContext): MultipartUnbakedModel;
}

//net.minecraft.registry.entry.RegistryEntryOwner
interface RegistryEntryOwner extends JObject{
 ownerEquals(other: RegistryEntryOwner): boolean;
}

//net.minecraft.world.PortalForcer
class PortalForcer extends JObject{
 getPortalRect(pos: BlockPos,destIsNether: boolean,worldBorder: WorldBorder): Optional;
 createPortal(pos: BlockPos,axis: Direction_Axis): Optional;
}
class Static_PortalForcer {
static method_22390(blockPos: BlockPos,poi: PointOfInterest): number;
static method_22389(poiType: RegistryEntry): boolean;
static method_22388(poi: PointOfInterest): number;
static method_39663(worldBorder: WorldBorder,poi: PointOfInterest): boolean;
static field_31810: number;
static field_31811: number;
static field_31812: number;
static field_31813: number;
static field_31814: number;
static field_31815: number;
static field_31816: number;
static field_31817: number;
static field_31818: number;
static field_31819: number;
static field_31820: number;
static field_31821: number;
static field_31822: number;
}

//net.minecraft.entity.EntityType$Builder
class EntityType_Builder extends JObject{
 build(id: string): EntityType;
 requires(features: FeatureFlag[]): EntityType_Builder;
 spawnableFarFromPlayer(): EntityType_Builder;
 trackingTickInterval(trackingTickInterval: number): EntityType_Builder;
 allowSpawningInside(blocks: Block[]): EntityType_Builder;
 setDimensions(width: number,height: number): EntityType_Builder;
 maxTrackingRange(maxTrackingRange: number): EntityType_Builder;
 disableSaving(): EntityType_Builder;
 makeFireImmune(): EntityType_Builder;
 disableSummon(): EntityType_Builder;
}
class Static_EntityType_Builder {
static create(spawnGroup: SpawnGroup): EntityType_Builder;
static create(factory: EntityType_EntityFactory,spawnGroup: SpawnGroup): EntityType_Builder;
static method_5900(type: EntityType,world: World): Entity;
}

//net.minecraft.network.packet.s2c.play.EntityStatusS2CPacket
class EntityStatusS2CPacket extends JObject, Packet{
 apply(clientPlayPacketListener: ClientPlayPacketListener): void;
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
 getEntity(world: World): Entity;
 getStatus(): byte;
}

//net.minecraft.client.gl.GlImportProcessor$Context
class GlImportProcessor_Context extends JObject{
}

//net.minecraft.predicate.NbtPredicate
class NbtPredicate extends JObject{
 test(stack: ItemStack): boolean;
 test(element: NbtElement): boolean;
 test(entity: Entity): boolean;
 toJson(): JsonElement;
}
class Static_NbtPredicate {
static fromJson(json: JsonElement): NbtPredicate;
static entityToNbt(entity: Entity): NbtCompound;
static ANY: NbtPredicate;
}

//net.minecraft.client.render.VertexConsumers$Dual
class VertexConsumers_Dual extends JObject, VertexConsumer{
 next(): void;
 color(red: number,green: number,blue: number,alpha: number): VertexConsumer;
 normal(x: number,y: number,z: number): VertexConsumer;
 light(u: number,v: number): VertexConsumer;
 overlay(u: number,v: number): VertexConsumer;
 vertex(x: number,y: number,z: number): VertexConsumer;
 vertex(x: number,y: number,z: number,red: number,green: number,blue: number,alpha: number,u: number,v: number,overlay: number,light: number,normalX: number,normalY: number,normalZ: number): void;
 texture(u: number,v: number): VertexConsumer;
 unfixColor(): void;
 fixedColor(red: number,green: number,blue: number,alpha: number): void;
}

//net.minecraft.client.render.block.entity.MobSpawnerBlockEntityRenderer
class MobSpawnerBlockEntityRenderer extends JObject, BlockEntityRenderer{
 render(mobSpawnerBlockEntity: MobSpawnerBlockEntity,f: number,matrixStack: MatrixStack,vertexConsumerProvider: VertexConsumerProvider,i: number,j: number): void;
 render(entity: BlockEntity,tickDelta: number,matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,light: number,overlay: number): void;
}

//net.minecraft.structure.processor.StructureProcessorType
interface StructureProcessorType extends JObject{
 codec(): Codec;
}
class Static_StructureProcessorType {
static register(id: string,codec: Codec): StructureProcessorType;
static method_31029(structureProcessorList: StructureProcessorList): StructureProcessorList;
static method_31028(either: Either): StructureProcessorList;
static method_28998(codec: Codec): Codec;
static method_31030(structureProcessorList: StructureProcessorList): StructureProcessorList;
static CODEC: Codec;
static LIST_CODEC: Codec;
static PROCESSORS_CODEC: Codec;
static REGISTRY_CODEC: Codec;
static BLOCK_IGNORE: StructureProcessorType;
static BLOCK_ROT: StructureProcessorType;
static GRAVITY: StructureProcessorType;
static JIGSAW_REPLACEMENT: StructureProcessorType;
static RULE: StructureProcessorType;
static NOP: StructureProcessorType;
static BLOCK_AGE: StructureProcessorType;
static BLACKSTONE_REPLACE: StructureProcessorType;
static LAVA_SUBMERGED_BLOCK: StructureProcessorType;
static PROTECTED_BLOCKS: StructureProcessorType;
static CAPPED: StructureProcessorType;
}

//net.minecraft.structure.pool.StructurePool
class StructurePool extends JObject{
 getFallback(): RegistryEntry;
 getElementIndicesInRandomOrder(random: Random): List;
 getRandomElement(random: Random): StructurePoolElement;
 getElementCount(): number;
 getHighestY(structureTemplateManager: StructureTemplateManager): number;
}
class Static_StructurePool {
static method_19310(structureTemplateManager: StructureTemplateManager,element: StructurePoolElement): number;
static method_35372(element: StructurePoolElement): boolean;
static method_28888(pool: StructurePool): List;
static method_28886(instance: RecordCodecBuilder_Instance): App;
static DEFAULT_Y: number;
static FALLBACK: MutableObject;
static CODEC: Codec;
static REGISTRY_CODEC: Codec;
}

//net.minecraft.network.packet.s2c.play.EntityPositionS2CPacket
class EntityPositionS2CPacket extends JObject, Packet{
 apply(clientPlayPacketListener: ClientPlayPacketListener): void;
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
 getId(): number;
 getX(): number;
 getY(): number;
 isOnGround(): boolean;
 getZ(): number;
 getPitch(): byte;
 getYaw(): byte;
}

//net.minecraft.network.packet.s2c.play.ChunkDataS2CPacket
class ChunkDataS2CPacket extends JObject, Packet{
 apply(clientPlayPacketListener: ClientPlayPacketListener): void;
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
 getChunkData(): ChunkData;
 getLightData(): LightData;
 getX(): number;
 getZ(): number;
}

//net.minecraft.particle.SculkChargeParticleEffect$1


//net.minecraft.world.event.listener.SimpleGameEventDispatcher$DisposalCallback
interface SimpleGameEventDispatcher_DisposalCallback extends JObject{
 apply(ySectionCoord: number): void;
}

//net.minecraft.client.render.entity.animation.WardenAnimations
class WardenAnimations extends JObject{
}
class Static_WardenAnimations {
static EMERGING: Animation;
static DIGGING: Animation;
static ROARING: Animation;
static SNIFFING: Animation;
static ATTACKING: Animation;
static CHARGING_SONIC_BOOM: Animation;
}

//net.minecraft.world.chunk.light.ChunkLightProvider$class_8531
class ChunkLightProvider_class_8531 extends JObject{
}
class Static_ChunkLightProvider_class_8531 {
static packWithAllDirectionsSet(lightLevel: number): long;
static method_51582(packed: long): boolean;
static getLightLevel(packed: long): number;
static packWithOneDirectionCleared(lightLevel: number,direction: Direction): long;
static setDirectionBit(packed: long,direction: Direction): long;
static isDirectionBitSet(packed: long,direction: Direction): boolean;
static clearDirectionBit(packed: long,direction: Direction): long;
static withLightLevel(packed: long,lightLevel: number): long;
static method_51573(lightLevel: number,trivial: boolean): long;
static isTrivial(packed: long): boolean;
static method_51574(lightLevel: number,trivial: boolean,direction: Direction): long;
static method_51579(lightLevel: number,trivial: boolean,direction: Direction): long;
static method_51578(down: boolean,north: boolean,south: boolean,west: boolean,east: boolean): long;
static DIRECTION_BIT_OFFSET: number;
static field_44738: number;
static field_44739: long;
static DIRECTION_BIT_MASK: long;
static field_44741: long;
static field_44742: long;
}

//net.minecraft.client.gui.screen.ChatInputSuggestor$SuggestionWindow
class ChatInputSuggestor_SuggestionWindow extends JObject{
 complete(): void;
 select(index: number): void;
 render(context: DrawContext,mouseX: number,mouseY: number): void;
 mouseScrolled(amount: number): boolean;
 scroll(offset: number): void;
 keyPressed(keyCode: number,scanCode: number,modifiers: number): boolean;
 mouseClicked(x: number,y: number,button: number): boolean;
}

//net.minecraft.entity.decoration.DisplayEntity$AbstractInterpolator
interface DisplayEntity_AbstractInterpolator extends JObject{
 interpolate(delta: number): Object;
}
class Static_DisplayEntity_AbstractInterpolator {
static constant(value: Object): DisplayEntity_AbstractInterpolator;
static method_49780(object: Object,delta: number): Object;
}

//net.minecraft.server.command.ItemCommand
class ItemCommand extends JObject{
}
class Static_ItemCommand {
static register(dispatcher: CommandDispatcher,commandRegistryAccess: CommandRegistryAccess): void;
static getStackWithModifier(source: ServerCommandSource,modifier: LootFunction,stack: ItemStack): ItemStack;
static executeEntityModify(source: ServerCommandSource,targets: Collection,slot: number,modifier: LootFunction): number;
static executeEntityCopyEntity(source: ServerCommandSource,sourceEntity: Entity,sourceSlot: number,targets: Collection,slot: number): number;
static executeEntityCopyEntity(source: ServerCommandSource,sourceEntity: Entity,sourceSlot: number,targets: Collection,slot: number,modifier: LootFunction): number;
static executeEntityReplace(source: ServerCommandSource,targets: Collection,slot: number,stack: ItemStack): number;
static executeBlockCopyEntity(source: ServerCommandSource,sourceEntity: Entity,sourceSlot: number,pos: BlockPos,slot: number,modifier: LootFunction): number;
static executeBlockCopyEntity(source: ServerCommandSource,sourceEntity: Entity,sourceSlot: number,pos: BlockPos,slot: number): number;
static executeEntityCopyBlock(source: ServerCommandSource,sourcePos: BlockPos,sourceSlot: number,targets: Collection,slot: number): number;
static executeEntityCopyBlock(source: ServerCommandSource,sourcePos: BlockPos,sourceSlot: number,targets: Collection,slot: number,modifier: LootFunction): number;
static getStackInSlotFromInventoryAt(source: ServerCommandSource,pos: BlockPos,slotId: number): ItemStack;
static executeBlockCopyBlock(source: ServerCommandSource,sourcePos: BlockPos,sourceSlot: number,pos: BlockPos,slot: number,modifier: LootFunction): number;
static executeBlockCopyBlock(source: ServerCommandSource,sourcePos: BlockPos,sourceSlot: number,pos: BlockPos,slot: number): number;
static executeBlockReplace(source: ServerCommandSource,pos: BlockPos,slot: number,stack: ItemStack): number;
static method_32738(context: CommandContext): number;
static method_32734(context: CommandContext): number;
static method_32729(context: CommandContext): number;
static method_32742(context: CommandContext): number;
static method_32740(context: CommandContext): number;
static method_32732(context: CommandContext): number;
static executeBlockModify(source: ServerCommandSource,pos: BlockPos,slot: number,modifier: LootFunction): number;
static method_32710(source: ServerCommandSource): boolean;
static method_32741(context: CommandContext): number;
static method_32744(context: CommandContext): number;
static method_32737(context: CommandContext): number;
static method_51999(blockPos: BlockPos,itemStack: ItemStack): Text;
static method_51997(entry: Map_Entry): Text;
static method_32736(context: CommandContext): number;
static method_32708(context: CommandContext): number;
static getInventoryAtPos(source: ServerCommandSource,pos: BlockPos,exception: Dynamic3CommandExceptionType): Inventory;
static method_32735(context: CommandContext): number;
static method_32743(context: CommandContext): number;
static method_32739(context: CommandContext): number;
static method_51998(map: Map): Text;
static method_51995(blockPos: BlockPos,itemStack: ItemStack): Text;
static getStackInSlot(entity: Entity,slotId: number): ItemStack;
static method_51996(list: List,itemStack: ItemStack): Text;
static method_52000(list: List,itemStack: ItemStack): Text;
static method_32726(slot: Object): Message;
static method_32727(itemName: Object,slot: Object): Message;
static method_32733(slot: Object): Message;
static method_32709(context: CommandContext,builder: SuggestionsBuilder): CompletableFuture;
static method_32730(slot: Object): Message;
static method_32731(x: Object,y: Object,z: Object): Message;
static method_32728(x: Object,y: Object,z: Object): Message;
static NOT_A_CONTAINER_TARGET_EXCEPTION: Dynamic3CommandExceptionType;
static NOT_A_CONTAINER_SOURCE_EXCEPTION: Dynamic3CommandExceptionType;
static NO_SUCH_SLOT_TARGET_EXCEPTION: DynamicCommandExceptionType;
static NO_SUCH_SLOT_SOURCE_EXCEPTION: DynamicCommandExceptionType;
static NO_CHANGES_EXCEPTION: DynamicCommandExceptionType;
static KNOWN_ITEM_EXCEPTION: Dynamic2CommandExceptionType;
static MODIFIER_SUGGESTION_PROVIDER: SuggestionProvider;
}

//net.minecraft.nbt.visitor.NbtElementVisitor
interface NbtElementVisitor extends JObject{
 visitEnd(element: NbtEnd): void;
 visitInt(element: NbtInt): void;
 visitLong(element: NbtLong): void;
 visitString(element: NbtString): void;
 visitDouble(element: NbtDouble): void;
 visitShort(element: NbtShort): void;
 visitFloat(element: NbtFloat): void;
 visitByte(element: NbtByte): void;
 visitByteArray(element: NbtByteArray): void;
 visitLongArray(element: NbtLongArray): void;
 visitCompound(compound: NbtCompound): void;
 visitIntArray(element: NbtIntArray): void;
 visitList(element: NbtList): void;
}

//net.minecraft.test.StructureTestListener
class StructureTestListener extends JObject, TestListener{
 onFailed(test: GameTestState): void;
 onPassed(test: GameTestState): void;
 onStarted(test: GameTestState): void;
}
class Static_StructureTestListener {
static sendMessageToAllPlayers(world: ServerWorld,formatting: Formatting,message: string): void;
static createTestOutputLectern(test: GameTestState,output: string): void;
static passTest(test: GameTestState,output: string): void;
static visualizeTest(test: GameTestState,block: Block): void;
static failTest(test: GameTestState,output: Throwable): void;
static method_32249(player: ServerPlayerEntity): boolean;
static method_32250(string: string,formatting: Formatting,player: ServerPlayerEntity): void;
static finishFailedTest(test: GameTestState,output: Throwable): void;
static finishPassedTest(test: GameTestState,output: string): void;
static createBookWithText(text: string,required: boolean,output: string): ItemStack;
static method_32252(stringBuffer: StringBuffer,line: string): void;
static addGameTestMarker(world: ServerWorld,pos: BlockPos,message: string): void;
}

//net.minecraft.util.shape.FractionalPairList
class FractionalPairList extends JObject, PairList{
 size(): number;
 getPairs(): DoubleList;
 forEachPair(predicate: PairList_Consumer): boolean;
}

//net.minecraft.command.argument.EntityArgumentType$Serializer$Properties
class EntityArgumentType_Serializer_Properties extends JObject, ArgumentSerializer_ArgumentTypeProperties{
 createType(commandRegistryAccess: CommandRegistryAccess): ArgumentType;
 createType(commandRegistryAccess: CommandRegistryAccess): EntityArgumentType;
 getSerializer(): ArgumentSerializer;
}

//net.minecraft.GameVersion
interface GameVersion extends JObject{
 getName(): string;
 getId(): string;
 getProtocolVersion(): number;
 isStable(): boolean;
 getResourceVersion(type: ResourceType): number;
 getBuildTime(): Date;
 getSaveVersion(): SaveVersion;
}

//net.minecraft.server.rcon.QueryResponseHandler$Query
class QueryResponseHandler_Query extends JObject{
 getMessage(): string;
 getId(): number;
 startedBefore(lastQueryTime: long): Boolean;
 getMessageBytes(): byte[];
 getReplyBuf(): byte[];
}

//net.minecraft.network.packet.s2c.play.ChunkLoadDistanceS2CPacket
class ChunkLoadDistanceS2CPacket extends JObject, Packet{
 apply(clientPlayPacketListener: ClientPlayPacketListener): void;
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
 getDistance(): number;
}

//net.minecraft.inventory.CraftingInventory
class CraftingInventory extends JObject, RecipeInputInventory{
 clear(): void;
 isEmpty(): boolean;
 size(): number;
 getStack(slot: number): ItemStack;
 getWidth(): number;
 getHeight(): number;
 setStack(slot: number,stack: ItemStack): void;
 removeStack(slot: number,amount: number): ItemStack;
 removeStack(slot: number): ItemStack;
 markDirty(): void;
 canPlayerUse(player: PlayerEntity): boolean;
 provideRecipeInputs(finder: RecipeMatcher): void;
 getInputStacks(): List;
}

//net.minecraft.world.gen.YOffset
interface YOffset extends JObject{
 getY(context: HeightContext): number;
}
class Static_YOffset {
static map(yOffset: YOffset): Either;
static fixed(offset: number): YOffset;
static belowTop(offset: number): YOffset;
static aboveBottom(offset: number): YOffset;
static getBottom(): YOffset;
static getTop(): YOffset;
static method_33847(either: Either): Record;
static fromEither(either: Either): YOffset;
static OFFSET_CODEC: Codec;
static BOTTOM: YOffset;
static TOP: YOffset;
}

//net.minecraft.command.argument.NumberRangeArgumentType$IntRangeArgumentType
class NumberRangeArgumentType_IntRangeArgumentType extends JObject, NumberRangeArgumentType{
 parse(reader: StringReader): Object;
 parse(stringReader: StringReader): NumberRange_IntRange;
 getExamples(): Collection;
}
class Static_NumberRangeArgumentType_IntRangeArgumentType {
static getRangeArgument(context: CommandContext,name: string): NumberRange_IntRange;
static EXAMPLES: Collection;
}

//net.minecraft.datafixer.fix.ProtoChunkTickListFix$class_6741
class ProtoChunkTickListFix_class_6741 extends JObject{
 method_39265(i: number,j: number,k: number): Dynamic;
 method_39266(): long[];
 method_39264(): List;
}
class Static_ProtoChunkTickListFix_class_6741 {
static field_35448: long;
}

//net.minecraft.util.logging.LogWriter$1


//net.minecraft.data.DataOutput$PathResolver
class DataOutput_PathResolver extends JObject{
 resolve(id: Identifier,fileExtension: string): Path;
 resolveJson(id: Identifier): Path;
}

//net.minecraft.datafixer.fix.LeavesFix$ListFixer
class LeavesFix_ListFixer extends JObject{
 isFixed(): boolean;
 needsFix(index: number): number;
 method_5083(typed: Typed): Typed;
}
class Static_LeavesFix_ListFixer {
static method_5078(dynamic: Dynamic): Pair;
static method_5081(list: List): List;
static BLOCK_STATES_KEY: string;
static NAME_KEY: string;
static PROPERTIES_KEY: string;
}

//net.minecraft.network.packet.s2c.play.CraftFailedResponseS2CPacket
class CraftFailedResponseS2CPacket extends JObject, Packet{
 apply(clientPlayPacketListener: ClientPlayPacketListener): void;
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
 getRecipeId(): Identifier;
 getSyncId(): number;
}

//net.minecraft.world.chunk.WorldChunk$WrappedBlockEntityTickInvoker
class WorldChunk_WrappedBlockEntityTickInvoker extends JObject, BlockEntityTickInvoker{
 getName(): string;
 toString(): string;
 tick(): void;
 isRemoved(): boolean;
 getPos(): BlockPos;
}

//net.minecraft.server.command.SpawnPointCommand
class SpawnPointCommand extends JObject{
}
class Static_SpawnPointCommand {
static register(dispatcher: CommandDispatcher): void;
static execute(source: ServerCommandSource,targets: Collection,pos: BlockPos,angle: number): number;
static method_13640(context: CommandContext): number;
static method_13642(context: CommandContext): number;
static method_52078(blockPos: BlockPos,f: number,string: string,collection: Collection): Text;
static method_13643(context: CommandContext): number;
static method_13644(source: ServerCommandSource): boolean;
static method_30733(context: CommandContext): number;
static method_52079(blockPos: BlockPos,f: number,string: string,collection: Collection): Text;
}

//net.minecraft.entity.ai.brain.task.ForgetBellRingTask
class ForgetBellRingTask extends JObject{
}
class Static_ForgetBellRingTask {
static create(maxHiddenSeconds: number,distance: number): Task;
static method_47080(mutableInt: MutableInt,i: number,j: number,context: TaskTriggerer_TaskContext): App;
static method_47079(taskContext: TaskTriggerer_TaskContext,mutableInt: MutableInt,i: number,j: number,hidingPlace: MemoryQueryResult,heardBellTime: MemoryQueryResult): TaskRunnable;
static method_47078(taskContext: TaskTriggerer_TaskContext,memoryQueryResult: MemoryQueryResult,mutableInt: MutableInt,i: number,memoryQueryResult2: MemoryQueryResult,j: number,world: ServerWorld,entity: LivingEntity,time: long): boolean;
static MIN_HEARD_BELL_TIME: number;
}

//net.minecraft.server.function.CommandFunctionManager$Tracer
interface CommandFunctionManager_Tracer extends JObject{
 traceFunctionCall(depth: number,fun: Identifier,size: number): void;
 traceError(depth: number,message: string): void;
 traceCommandEnd(depth: number,command: string,result: number): void;
 traceCommandStart(depth: number,command: string): void;
}

//net.minecraft.registry.DynamicRegistryManager$ImmutableImpl
class DynamicRegistryManager_ImmutableImpl extends JObject, DynamicRegistryManager{
 streamAllRegistries(): Stream;
 getOptional(key: RegistryKey): Optional;
}
class Static_DynamicRegistryManager_ImmutableImpl {
static method_45943(registry: Registry): Registry;
static method_45942(registry: Registry): Registry;
}

//net.minecraft.block.ButtonBlock$1


//net.minecraft.data.client.When$PropertyCondition
class When_PropertyCondition extends JObject, When{
 get(): Object;
 get(): JsonElement;
 validate(stateManager: StateManager): void;
 set(property: Property,value: Comparable,otherValues: Comparable[]): When_PropertyCondition;
 set(property: Property,value: Comparable): When_PropertyCondition;
 setNegated(property: Property,value: Comparable,otherValues: Comparable[]): When_PropertyCondition;
 setNegated(property: Property,value: Comparable): When_PropertyCondition;
}
class Static_When_PropertyCondition {
static name(property: Property,value: Comparable,otherValues: Comparable[]): string;
static name(property: Property,valueStream: Stream): string;
static method_25750(stateManager: StateManager,property: Property): boolean;
static method_25755(jsonObject: JsonObject,property: Property,value: string): void;
}

//net.minecraft.block.OperatorBlock
interface OperatorBlock extends JObject{
}

//net.minecraft.client.particle.CrackParticle$ItemFactory
class CrackParticle_ItemFactory extends JObject, ParticleFactory{
 createParticle(itemStackParticleEffect: ItemStackParticleEffect,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
 createParticle(particleEffect: ParticleEffect,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
}

//net.minecraft.server.command.LootCommand
class LootCommand extends JObject{
}
class Static_LootCommand {
static insert(inventory: Inventory,stack: ItemStack): boolean;
static replace(entity: Entity,stacks: List,slot: number,stackCount: number,addedStacks: List): void;
static register(dispatcher: CommandDispatcher,commandRegistryAccess: CommandRegistryAccess): void;
static sendDroppedFeedback(source: ServerCommandSource,stacks: List): void;
static sendDroppedFeedback(source: ServerCommandSource,stacks: List,lootTable: Identifier): void;
static getFeedbackMessageSingle(context: CommandContext,lootTable: Identifier,lootContextParameters: LootContextParameterSet,constructor: LootCommand_Target): number;
static method_13203(commandRegistryAccess: CommandRegistryAccess,builder: ArgumentBuilder,constructor: LootCommand_Target): ArgumentBuilder;
static method_13181(source: ServerCommandSource): boolean;
static method_13202(context: CommandContext,stacks: List,messageSender: LootCommand_FeedbackMessage): number;
static executeSpawn(source: ServerCommandSource,pos: Vec3d,stacks: List,messageSender: LootCommand_FeedbackMessage): number;
static executeGive(players: Collection,stacks: List,messageSender: LootCommand_FeedbackMessage): number;
static executeInsert(source: ServerCommandSource,targetPos: BlockPos,stacks: List,messageSender: LootCommand_FeedbackMessage): number;
static itemsMatch(first: ItemStack,second: ItemStack): boolean;
static method_16339(context: CommandContext,stacks: List,messageSender: LootCommand_FeedbackMessage): number;
static method_13221(context: CommandContext,stacks: List,messageSender: LootCommand_FeedbackMessage): number;
static method_13182(context: CommandContext,stacks: List,messageSender: LootCommand_FeedbackMessage): number;
static method_13214(context: CommandContext,stacks: List,messageSender: LootCommand_FeedbackMessage): number;
static method_13220(context: CommandContext,stacks: List,messageSender: LootCommand_FeedbackMessage): number;
static getBlockInventory(source: ServerCommandSource,pos: BlockPos): Inventory;
static addTargetArguments(rootArgument: ArgumentBuilder,sourceConstructor: LootCommand_SourceConstructor): ArgumentBuilder;
static method_13191(context: CommandContext,stacks: List,messageSender: LootCommand_FeedbackMessage): number;
static executeBlock(source: ServerCommandSource,targetPos: BlockPos,slot: number,stackCount: number,stacks: List,messageSender: LootCommand_FeedbackMessage): number;
static executeReplace(targets: Collection,slot: number,stackCount: number,stacks: List,messageSender: LootCommand_FeedbackMessage): number;
static method_13179(serverWorld: ServerWorld,vec3d: Vec3d,stack: ItemStack): void;
static getHeldItem(source: ServerCommandSource,slot: EquipmentSlot): ItemStack;
static method_52011(list: List,identifier: Identifier): Text;
static method_52009(itemStack: ItemStack,identifier: Identifier): Text;
static method_52008(itemStack: ItemStack): Text;
static method_13185(serverCommandSource: ServerCommandSource,identifier: Identifier,stacks: List): void;
static method_13224(serverCommandSource: ServerCommandSource,blockState: BlockState,stacks: List): void;
static executeMine(context: CommandContext,pos: BlockPos,stack: ItemStack,constructor: LootCommand_Target): number;
static executeKill(context: CommandContext,entity: Entity,constructor: LootCommand_Target): number;
static method_52010(list: List): Text;
static executeFish(context: CommandContext,lootTable: Identifier,pos: BlockPos,stack: ItemStack,constructor: LootCommand_Target): number;
static method_13205(target: LootCommand_Target,context: CommandContext): number;
static method_13204(target: LootCommand_Target,context: CommandContext): number;
static method_13222(target: LootCommand_Target,context: CommandContext): number;
static method_13215(target: LootCommand_Target,context: CommandContext): number;
static method_13184(serverCommandSource: ServerCommandSource,stacks: List): void;
static method_13216(target: LootCommand_Target,context: CommandContext): number;
static method_13188(target: LootCommand_Target,context: CommandContext): number;
static executeLoot(context: CommandContext,lootTable: Identifier,constructor: LootCommand_Target): number;
static method_13208(target: LootCommand_Target,context: CommandContext): number;
static method_13177(target: LootCommand_Target,context: CommandContext): number;
static method_13211(target: LootCommand_Target,context: CommandContext): number;
static method_13217(entityName: Object): Message;
static method_13198(target: LootCommand_Target,context: CommandContext): number;
static method_13195(entityName: Object): Message;
static method_13210(context: CommandContext,builder: SuggestionsBuilder): CompletableFuture;
static SUGGESTION_PROVIDER: SuggestionProvider;
static NO_HELD_ITEMS_EXCEPTION: DynamicCommandExceptionType;
static NO_LOOT_TABLE_EXCEPTION: DynamicCommandExceptionType;
}

//net.minecraft.client.search.IdentifierSearcher
interface IdentifierSearcher extends JObject{
 searchPath(path: string): List;
 searchNamespace(namespace: string): List;
}
class Static_IdentifierSearcher {
static of(): IdentifierSearcher;
static of(values: List,identifiersGetter: Function): IdentifierSearcher;
static method_43800(suffixArray: SuffixArray,object: Object,suffixArray2: SuffixArray,id: Identifier): void;
}

//net.minecraft.data.server.advancement.AdvancementProvider
class AdvancementProvider extends JObject, DataProvider{
 getName(): string;
 run(writer: DataWriter): CompletableFuture;
}
class Static_AdvancementProvider {
static method_46575(i: number): CompletableFuture[];
}

//net.minecraft.entity.attribute.AttributeContainer
class AttributeContainer extends JObject{
 getValue(attribute: EntityAttribute): number;
 hasAttribute(attribute: RegistryEntry): boolean;
 hasAttribute(attribute: EntityAttribute): boolean;
 setFrom(other: AttributeContainer): void;
 getCustomInstance(attribute: RegistryEntry): EntityAttributeInstance;
 getCustomInstance(attribute: EntityAttribute): EntityAttributeInstance;
 getBaseValue(attribute: EntityAttribute): number;
 toNbt(): NbtList;
 readNbt(nbt: NbtList): void;
 getAttributesToSend(): Collection;
 hasModifierForAttribute(attribute: EntityAttribute,uuid: UUID): boolean;
 hasModifierForAttribute(attribute: RegistryEntry,uuid: UUID): boolean;
 addTemporaryModifiers(attributeModifiers: Multimap): void;
 removeModifiers(attributeModifiers: Multimap): void;
 getModifierValue(attribute: RegistryEntry,uuid: UUID): number;
 getModifierValue(attribute: EntityAttribute,uuid: UUID): number;
 getTracked(): Set;
}
class Static_AttributeContainer {
static method_26857(attribute: EntityAttributeInstance): boolean;
static method_26848(string: string): void;
static LOGGER: Logger;
}

//net.minecraft.client.world.ClientWorld$1


//net.minecraft.loot.context.LootContextParameters
class LootContextParameters extends JObject{
}
class Static_LootContextParameters {
static register(name: string): LootContextParameter;
static THIS_ENTITY: LootContextParameter;
static LAST_DAMAGE_PLAYER: LootContextParameter;
static DAMAGE_SOURCE: LootContextParameter;
static KILLER_ENTITY: LootContextParameter;
static DIRECT_KILLER_ENTITY: LootContextParameter;
static ORIGIN: LootContextParameter;
static BLOCK_STATE: LootContextParameter;
static BLOCK_ENTITY: LootContextParameter;
static TOOL: LootContextParameter;
static EXPLOSION_RADIUS: LootContextParameter;
}

//net.minecraft.world.SpawnDensityCapper
class SpawnDensityCapper extends JObject{
 canSpawn(spawnGroup: SpawnGroup,chunkPos: ChunkPos): boolean;
 increaseDensity(chunkPos: ChunkPos,spawnGroup: SpawnGroup): void;
}
class Static_SpawnDensityCapper {
static method_38083(player: ServerPlayerEntity): SpawnDensityCapper_DensityCap;
}

//net.minecraft.client.gui.screen.LoadingDisplay
class LoadingDisplay extends JObject{
}
class Static_LoadingDisplay {
static get(tick: long): string;
static TEXTS: String[];
static INTERVAL: long;
}

//net.minecraft.network.packet.s2c.play.BlockEventS2CPacket
class BlockEventS2CPacket extends JObject, Packet{
 apply(clientPlayPacketListener: ClientPlayPacketListener): void;
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
 getType(): number;
 getData(): number;
 getBlock(): Block;
 getPos(): BlockPos;
}

//net.minecraft.entity.ai.brain.task.TaskTriggerer$TaskContext$Mu
class TaskTriggerer_TaskContext_Mu extends JObject, Applicative_Mu{
}

//net.minecraft.server.MinecraftServer$DebugStart
class MinecraftServer_DebugStart extends JObject{
}

//net.minecraft.client.render.model.ModelLoader$BakerImpl
class ModelLoader_BakerImpl extends JObject, Baker{
 bake(id: Identifier,settings: ModelBakeSettings): BakedModel;
 getOrLoadModel(id: Identifier): UnbakedModel;
}
class Static_ModelLoader_BakerImpl {
static method_45878(biFunction: BiFunction,identifier: Identifier,spriteId: SpriteIdentifier): Sprite;
}

//net.minecraft.client.gui.screen.SplashTextRenderer
class SplashTextRenderer extends JObject{
 render(context: DrawContext,screenWidth: number,textRenderer: TextRenderer,alpha: number): void;
}
class Static_SplashTextRenderer {
static MERRY_X_MAS_: SplashTextRenderer;
static HAPPY_NEW_YEAR_: SplashTextRenderer;
static OOOOO_O_O_OOOOO__SPOOKY_: SplashTextRenderer;
static TEXT_X: number;
static TEXT_Y: number;
}

//net.minecraft.client.render.model.json.ModelVariant
class ModelVariant extends JObject, ModelBakeSettings{
 equals(o: Object): boolean;
 toString(): string;
 hashCode(): number;
 getLocation(): Identifier;
 getWeight(): number;
 getRotation(): AffineTransformation;
 isUvLocked(): boolean;
}

//net.minecraft.client.realms.RepeatedNarrator$Parameters
class RepeatedNarrator_Parameters extends JObject{
}

//net.minecraft.network.packet.s2c.play.PlayerAbilitiesS2CPacket
class PlayerAbilitiesS2CPacket extends JObject, Packet{
 apply(clientPlayPacketListener: ClientPlayPacketListener): void;
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
 isInvulnerable(): boolean;
 getFlySpeed(): number;
 getWalkSpeed(): number;
 isCreativeMode(): boolean;
 isFlying(): boolean;
 allowFlying(): boolean;
}
class Static_PlayerAbilitiesS2CPacket {
static INVULNERABLE_MASK: number;
static FLYING_MASK: number;
static ALLOW_FLYING_MASK: number;
static CREATIVE_MODE_MASK: number;
}

//net.minecraft.network.message.MessageChain
class MessageChain extends JObject{
 getUnpacker(playerPublicKey: PlayerPublicKey): MessageChain_Unpacker;
 getPacker(signer: Signer): MessageChain_Packer;
}
class Static_MessageChain {
static method_46313(messageLink: MessageLink,messageBody: MessageBody,updatable: SignatureUpdatable_SignatureUpdater): void;
static LOGGER: Logger;
}

//net.minecraft.loot.condition.SurvivesExplosionLootCondition
class SurvivesExplosionLootCondition extends JObject, LootCondition{
 test(context: Object): boolean;
 test(lootContext: LootContext): boolean;
 getType(): LootConditionType;
 getRequiredParameters(): Set;
}
class Static_SurvivesExplosionLootCondition {
static builder(): LootCondition_Builder;
static method_872(): LootCondition;
static INSTANCE: SurvivesExplosionLootCondition;
}

//net.minecraft.world.gen.chunk.BlendingData$HeightConsumer
interface BlendingData_HeightConsumer extends JObject{
 consume(biomeX: number,biomeZ: number,height: number): void;
}

//net.minecraft.predicate.item.ItemPredicate$Builder
class ItemPredicate_Builder extends JObject{
 count(count: NumberRange_IntRange): ItemPredicate_Builder;
 build(): ItemPredicate;
 tag(tag: TagKey): ItemPredicate_Builder;
 items(items: ItemConvertible[]): ItemPredicate_Builder;
 storedEnchantment(enchantment: EnchantmentPredicate): ItemPredicate_Builder;
 potion(potion: Potion): ItemPredicate_Builder;
 durability(durability: NumberRange_IntRange): ItemPredicate_Builder;
 nbt(nbt: NbtCompound): ItemPredicate_Builder;
 enchantment(enchantment: EnchantmentPredicate): ItemPredicate_Builder;
}
class Static_ItemPredicate_Builder {
static create(): ItemPredicate_Builder;
}

//net.minecraft.client.render.RenderLayer$MultiPhaseParameters$Builder
class RenderLayer_MultiPhaseParameters_Builder extends JObject{
 target(target: RenderPhase_Target): RenderLayer_MultiPhaseParameters_Builder;
 build(affectsOutline: boolean): RenderLayer_MultiPhaseParameters;
 build(outlineMode: RenderLayer_OutlineMode): RenderLayer_MultiPhaseParameters;
 program(program: RenderPhase_ShaderProgram): RenderLayer_MultiPhaseParameters_Builder;
 layering(layering: RenderPhase_Layering): RenderLayer_MultiPhaseParameters_Builder;
 depthTest(depthTest: RenderPhase_DepthTest): RenderLayer_MultiPhaseParameters_Builder;
 texturing(texturing: RenderPhase_Texturing): RenderLayer_MultiPhaseParameters_Builder;
 transparency(transparency: RenderPhase_Transparency): RenderLayer_MultiPhaseParameters_Builder;
 cull(cull: RenderPhase_Cull): RenderLayer_MultiPhaseParameters_Builder;
 lightmap(lightmap: RenderPhase_Lightmap): RenderLayer_MultiPhaseParameters_Builder;
 writeMaskState(writeMaskState: RenderPhase_WriteMaskState): RenderLayer_MultiPhaseParameters_Builder;
 colorLogic(colorLogic: RenderPhase_ColorLogic): RenderLayer_MultiPhaseParameters_Builder;
 lineWidth(lineWidth: RenderPhase_LineWidth): RenderLayer_MultiPhaseParameters_Builder;
 overlay(overlay: RenderPhase_Overlay): RenderLayer_MultiPhaseParameters_Builder;
 texture(texture: RenderPhase_TextureBase): RenderLayer_MultiPhaseParameters_Builder;
}

//net.minecraft.world.gen.chunk.placement.StructurePlacement$GenerationPredicate
interface StructurePlacement_GenerationPredicate extends JObject{
 shouldGenerate(seed: long,salt: number,chunkX: number,chunkZ: number,chance: number): boolean;
}

//net.minecraft.client.render.model.MultipartUnbakedModel
class MultipartUnbakedModel extends JObject, UnbakedModel{
 equals(o: Object): boolean;
 hashCode(): number;
 setParents(modelLoader: Function): void;
 getComponents(): List;
 getModels(): Set;
 getModelDependencies(): Collection;
 bake(baker: Baker,textureGetter: Function,rotationContainer: ModelBakeSettings,modelId: Identifier): BakedModel;
}
class Static_MultipartUnbakedModel {
static method_45789(fun: Function,component: MultipartModelComponent): void;
static method_3518(component: MultipartModelComponent): Stream;
}

//net.minecraft.network.packet.c2s.play.PlayerInteractItemC2SPacket
class PlayerInteractItemC2SPacket extends JObject, Packet{
 apply(serverPlayPacketListener: ServerPlayPacketListener): void;
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
 getHand(): Hand;
 getSequence(): number;
}

//net.minecraft.entity.decoration.DisplayEntity$TextDisplayEntity$LineSplitter
interface DisplayEntity_TextDisplayEntity_LineSplitter extends JObject{
 split(text: Text,lineWidth: number): DisplayEntity_TextDisplayEntity_TextLines;
}

//net.minecraft.util.math.DirectionTransformation$1


//net.minecraft.client.gui.EditBox
class EditBox extends JObject{
 delete(offset: number): void;
 getText(): string;
 setText(text: string): void;
 getLines(): Iterable;
 getMaxLength(): number;
 setChangeListener(changeListener: Consumer): void;
 getSelection(): EditBox_Substring;
 setSelecting(selecting: boolean): void;
 moveCursor(movement: CursorMovement,amount: number): void;
 moveCursor(x: number,y: number): void;
 getLineCount(): number;
 hasMaxLength(): boolean;
 setMaxLength(maxLength: number): void;
 replaceSelection(string: string): void;
 hasSelection(): boolean;
 getLine(index: number): EditBox_Substring;
 moveCursorLine(offset: number): void;
 handleSpecialKey(keyCode: number): boolean;
 getSelectedText(): string;
 setCursorChangeListener(cursorChangeListener: Runnable): void;
 getNextWordAtCursor(): EditBox_Substring;
 getCurrentLineIndex(): number;
 getPreviousWordAtCursor(): EditBox_Substring;
 getCursor(): number;
}
class Static_EditBox {
static method_44442(): void;
static method_44429(text: string): void;
static UNLIMITED_LENGTH: number;
static CURSOR_WIDTH: number;
}

//net.minecraft.data.server.recipe.CookingRecipeJsonBuilder$CookingRecipeJsonProvider
class CookingRecipeJsonBuilder_CookingRecipeJsonProvider extends JObject, RecipeJsonProvider{
 serialize(json: JsonObject): void;
 getRecipeId(): Identifier;
 getAdvancementId(): Identifier;
 toAdvancementJson(): JsonObject;
 getSerializer(): RecipeSerializer;
}

//net.minecraft.command.argument.ItemSlotArgumentType
class ItemSlotArgumentType extends JObject, ArgumentType{
 parse(reader: StringReader): Object;
 parse(stringReader: StringReader): Integer;
 getExamples(): Collection;
 listSuggestions(context: CommandContext,builder: SuggestionsBuilder): CompletableFuture;
}
class Static_ItemSlotArgumentType {
static itemSlot(): ItemSlotArgumentType;
static method_9472(map: HashMap): void;
static method_9471(name: Object): Message;
static getItemSlot(context: CommandContext,name: string): number;
static EXAMPLES: Collection;
static UNKNOWN_SLOT_EXCEPTION: DynamicCommandExceptionType;
static SLOT_NAMES_TO_SLOT_COMMAND_ID: Map;
}

//net.minecraft.client.gui.widget.EntryListWidget$Entry
class EntryListWidget_Entry extends JObject, Element{
 render(context: DrawContext,index: number,y: number,x: number,entryWidth: number,entryHeight: number,mouseX: number,mouseY: number,hovered: boolean,tickDelta: number): void;
 setFocused(focused: boolean): void;
 isMouseOver(mouseX: number,mouseY: number): boolean;
 isFocused(): boolean;
 drawBorder(context: DrawContext,index: number,y: number,x: number,entryWidth: number,entryHeight: number,mouseX: number,mouseY: number,hovered: boolean,tickDelta: number): void;
}

//net.minecraft.network.packet.s2c.play.DeathMessageS2CPacket
class DeathMessageS2CPacket extends JObject, Packet{
 apply(clientPlayPacketListener: ClientPlayPacketListener): void;
 apply(listener: PacketListener): void;
 getMessage(): Text;
 write(buf: PacketByteBuf): void;
 isWritingErrorSkippable(): boolean;
 getEntityId(): number;
}

//net.minecraft.server.command.GameModeCommand
class GameModeCommand extends JObject{
}
class Static_GameModeCommand {
static register(dispatcher: CommandDispatcher): void;
static execute(context: CommandContext,targets: Collection,gameMode: GameMode): number;
static method_13389(source: ServerCommandSource): boolean;
static method_13391(commandContext: CommandContext): number;
static method_13386(commandContext: CommandContext): number;
static method_51988(text: Text): Text;
static method_51987(serverPlayerEntity: ServerPlayerEntity,text: Text): Text;
static sendFeedback(source: ServerCommandSource,player: ServerPlayerEntity,gameMode: GameMode): void;
static REQUIRED_PERMISSION_LEVEL: number;
}

//net.minecraft.data.client.BlockStateModelGenerator$1


//net.minecraft.client.tutorial.CraftPlanksTutorialStepHandler
class CraftPlanksTutorialStepHandler extends JObject, TutorialStepHandler{
 destroy(): void;
 tick(): void;
 onSlotUpdate(stack: ItemStack): void;
}
class Static_CraftPlanksTutorialStepHandler {
static hasCrafted(player: ClientPlayerEntity,tag: TagKey): boolean;
static DELAY: number;
static TITLE: Text;
static DESCRIPTION: Text;
}

//net.minecraft.server.command.FillCommand
class FillCommand extends JObject{
}
class Static_FillCommand {
static register(dispatcher: CommandDispatcher,commandRegistryAccess: CommandRegistryAccess): void;
static execute(source: ServerCommandSource,range: BlockBox,block: BlockStateArgument,mode: FillCommand_Mode,filter: Predicate): number;
static method_13351(source: ServerCommandSource): boolean;
static method_13356(context: CommandContext): number;
static method_13346(context: CommandContext): number;
static method_13349(context: CommandContext): number;
static method_13353(context: CommandContext): number;
static method_13355(context: CommandContext): number;
static method_13345(context: CommandContext): number;
static method_13352(maxCount: Object,count: Object): Message;
static method_51976(i: number): Text;
static method_13350(context: CommandContext): number;
static method_13348(pos: CachedBlockPosition): boolean;
static TOO_BIG_EXCEPTION: Dynamic2CommandExceptionType;
static AIR_BLOCK_ARGUMENT: BlockStateArgument;
static FAILED_EXCEPTION: SimpleCommandExceptionType;
}

//net.minecraft.server.command.RecipeCommand
class RecipeCommand extends JObject{
}
class Static_RecipeCommand {
static register(dispatcher: CommandDispatcher): void;
static method_13522(source: ServerCommandSource): boolean;
static method_13519(context: CommandContext): number;
static method_52032(collection: Collection,collection2: Collection): Text;
static method_13521(context: CommandContext): number;
static method_52033(collection: Collection,collection2: Collection): Text;
static method_52034(collection: Collection,collection2: Collection): Text;
static method_13516(context: CommandContext): number;
static method_13515(context: CommandContext): number;
static executeTake(source: ServerCommandSource,targets: Collection,recipes: Collection): number;
static method_52035(collection: Collection,collection2: Collection): Text;
static executeGive(source: ServerCommandSource,targets: Collection,recipes: Collection): number;
static GIVE_FAILED_EXCEPTION: SimpleCommandExceptionType;
static TAKE_FAILED_EXCEPTION: SimpleCommandExceptionType;
}

//net.minecraft.client.gui.screen.ingame.StructureBlockScreen$2


//net.minecraft.client.render.chunk.ChunkRendererRegionBuilder$ClientChunk
class ChunkRendererRegionBuilder_ClientChunk extends JObject{
 getRenderedChunk(): RenderedChunk;
 getChunk(): WorldChunk;
}

//net.minecraft.client.render.entity.LivingEntityRenderer$1


//net.minecraft.client.render.GameRenderer
class GameRenderer extends JObject, AutoCloseable{
 close(): void;
 reset(): void;
 tick(): void;
 render(tickDelta: number,startTime: long,tick: boolean): void;
 getMapRenderer(): MapRenderer;
 showFloatingItem(floatingItem: ItemStack): void;
 setRenderHand(renderHand: boolean): void;
 onCameraEntitySet(entity: Entity): void;
 preloadPrograms(factory: ResourceFactory): void;
 getProgram(name: string): ShaderProgram;
 onResized(width: number,height: number): void;
 getPostProcessor(): PostEffectProcessor;
 renderWithZoom(zoom: number,zoomX: number,zoomY: number): void;
 renderWorld(tickDelta: number,limitTime: long,matrices: MatrixStack): void;
 getSkyDarkness(tickDelta: number): number;
 getViewDistance(): number;
 getOverlayTexture(): OverlayTexture;
 getClient(): MinecraftClient;
 disablePostProcessor(): void;
 isRenderingPanorama(): boolean;
 setRenderingPanorama(renderingPanorama: boolean): void;
 setBlockOutlineEnabled(blockOutlineEnabled: boolean): void;
 cycleSuperSecretSetting(): void;
 togglePostProcessorEnabled(): void;
 createProgramReloader(): ResourceReloader;
 updateTargetedEntity(tickDelta: number): void;
 getBasicProjectionMatrix(fov: number): Matrix4f;
 loadProjectionMatrix(projectionMatrix: Matrix4f): void;
 getFarPlaneDistance(): number;
 getLightmapTextureManager(): LightmapTextureManager;
 getCamera(): Camera;
 firstPersonRenderer: HeldItemRenderer;
 blitScreenProgram: ShaderProgram;
}
class Static_GameRenderer {
static getRenderTypeArmorEntityGlintProgram(): ShaderProgram;
static getRenderTypeEntityGlintDirectProgram(): ShaderProgram;
static getRenderTypeGuiTextHighlightProgram(): ShaderProgram;
static getRenderTypeTextBackgroundSeeThroughProgram(): ShaderProgram;
static getRenderTypeGuiGhostRecipeOverlayProgram(): ShaderProgram;
static getRenderTypeEntityCutoutNoNullZOffsetProgram(): ShaderProgram;
static getRenderTypeEntityNoOutlineProgram(): ShaderProgram;
static getRenderTypeGlintTranslucentProgram(): ShaderProgram;
static getRenderTypeTranslucentNoCrumblingProgram(): ShaderProgram;
static getRenderTypeArmorCutoutNoCullProgram(): ShaderProgram;
static getRenderTypeItemEntityTranslucentCullProgram(): ShaderProgram;
static getRenderTypeEntitySmoothCutoutProgram(): ShaderProgram;
static getRenderTypeEntityCutoutNoNullProgram(): ShaderProgram;
static getRenderTypeTranslucentMovingBlockProgram(): ShaderProgram;
static getRenderTypeEntityTranslucentProgram(): ShaderProgram;
static getRenderTypeEntityTranslucentEmissiveProgram(): ShaderProgram;
static getRenderTypeTextIntensitySeeThroughProgram(): ShaderProgram;
static getRenderTypeEntityTranslucentCullProgram(): ShaderProgram;
static getPositionColorTexProgram(): ShaderProgram;
static getPositionTexProgram(): ShaderProgram;
static method_36509(program: ShaderProgram): void;
static method_36507(program: ShaderProgram): void;
static method_36506(program: ShaderProgram): void;
static method_36508(program: ShaderProgram): void;
static method_36505(program: ShaderProgram): void;
static method_36504(program: ShaderProgram): void;
static method_36511(program: ShaderProgram): void;
static method_36510(program: ShaderProgram): void;
static method_36490(program: ShaderProgram): void;
static method_36488(program: ShaderProgram): void;
static method_36489(program: ShaderProgram): void;
static method_42594(program: ShaderProgram): void;
static method_36493(program: ShaderProgram): void;
static method_36487(program: ShaderProgram): void;
static method_36496(program: ShaderProgram): void;
static method_36502(program: ShaderProgram): void;
static method_36503(program: ShaderProgram): void;
static method_36492(program: ShaderProgram): void;
static method_36486(program: ShaderProgram): void;
static method_36541(program: ShaderProgram): void;
static method_36498(program: ShaderProgram): void;
static method_36499(program: ShaderProgram): void;
static method_36495(program: ShaderProgram): void;
static method_36500(program: ShaderProgram): void;
static method_36497(program: ShaderProgram): void;
static method_36491(program: ShaderProgram): void;
static method_36501(program: ShaderProgram): void;
static method_36494(program: ShaderProgram): void;
static method_49039(program: ShaderProgram): void;
static method_36539(program: ShaderProgram): void;
static method_36531(program: ShaderProgram): void;
static method_36530(program: ShaderProgram): void;
static method_36526(program: ShaderProgram): void;
static method_36540(program: ShaderProgram): void;
static method_36523(program: ShaderProgram): void;
static method_36538(program: ShaderProgram): void;
static method_36537(program: ShaderProgram): void;
static method_36534(program: ShaderProgram): void;
static method_36536(program: ShaderProgram): void;
static method_36532(program: ShaderProgram): void;
static method_36529(program: ShaderProgram): void;
static method_36535(program: ShaderProgram): void;
static method_36528(program: ShaderProgram): void;
static method_36527(program: ShaderProgram): void;
static method_36533(program: ShaderProgram): void;
static method_36525(program: ShaderProgram): void;
static method_49040(program: ShaderProgram): void;
static method_36524(program: ShaderProgram): void;
static method_36516(pair: Pair): void;
static method_36519(program: ShaderProgram): void;
static method_36522(program: ShaderProgram): void;
static method_51776(program: ShaderProgram): void;
static method_36517(program: ShaderProgram): void;
static method_36513(program: ShaderProgram): void;
static method_36518(program: ShaderProgram): void;
static method_51777(program: ShaderProgram): void;
static method_51775(program: ShaderProgram): void;
static method_51770(program: ShaderProgram): void;
static method_36521(program: ShaderProgram): void;
static method_36520(program: ShaderProgram): void;
static method_18144(entity: Entity): boolean;
static method_3181(nativeImage: NativeImage,path: Path): void;
static getPositionProgram(): ShaderProgram;
static getParticleProgram(): ShaderProgram;
static getRenderTypeGuiOverlayProgram(): ShaderProgram;
static getRenderTypeEndGatewayProgram(): ShaderProgram;
static getRenderTypeLinesProgram(): ShaderProgram;
static getRenderTypeGuiProgram(): ShaderProgram;
static getRenderTypeCrumblingProgram(): ShaderProgram;
static getNightVisionStrength(entity: LivingEntity,tickDelta: number): number;
static getRenderTypeSolidProgram(): ShaderProgram;
static getRenderTypeArmorGlintProgram(): ShaderProgram;
static getRenderTypeTextBackgroundProgram(): ShaderProgram;
static getPositionTexColorNormalProgram(): ShaderProgram;
static getRenderTypeEntityCutoutProgram(): ShaderProgram;
static getRenderTypeGlintDirectProgram(): ShaderProgram;
static getRenderTypeTextSeeThroughProgram(): ShaderProgram;
static getRenderTypeTextIntensityProgram(): ShaderProgram;
static getRenderTypeGlintProgram(): ShaderProgram;
static getRenderTypeLightningProgram(): ShaderProgram;
static getPositionTexLightmapColorProgram(): ShaderProgram;
static getRenderTypeEntitySolidProgram(): ShaderProgram;
static getRenderTypeEyesProgram(): ShaderProgram;
static getRenderTypeEnergySwirlProgram(): ShaderProgram;
static getRenderTypeEntityDecalProgram(): ShaderProgram;
static getPositionTexColorProgram(): ShaderProgram;
static getRenderTypeWaterMaskProgram(): ShaderProgram;
static getRenderTypeEntityGlintProgram(): ShaderProgram;
static getRenderTypeTripwireProgram(): ShaderProgram;
static getRenderTypeBeaconBeamProgram(): ShaderProgram;
static getRenderTypeTextProgram(): ShaderProgram;
static getRenderTypeLeashProgram(): ShaderProgram;
static getRenderTypeOutlineProgram(): ShaderProgram;
static getRenderTypeEndPortalProgram(): ShaderProgram;
static getPositionColorProgram(): ShaderProgram;
static getRenderTypeCutoutProgram(): ShaderProgram;
static getRenderTypeCutoutMippedProgram(): ShaderProgram;
static getPositionColorLightmapProgram(): ShaderProgram;
static getPositionColorTexLightmapProgram(): ShaderProgram;
static getRenderTypeTranslucentProgram(): ShaderProgram;
static getRenderTypeEntityShadowProgram(): ShaderProgram;
static getRenderTypeEntityAlphaProgram(): ShaderProgram;
static NAUSEA_OVERLAY: Identifier;
static LOGGER: Logger;
static field_32688: boolean;
static CAMERA_DEPTH: number;
static field_44940: number;
static field_32687: number;
static SUPER_SECRET_SETTING_PROGRAMS: Identifier[];
static SUPER_SECRET_SETTING_COUNT: number;
static positionProgram: ShaderProgram;
static positionColorProgram: ShaderProgram;
static positionColorTexProgram: ShaderProgram;
static positionTexProgram: ShaderProgram;
static positionTexColorProgram: ShaderProgram;
static particleProgram: ShaderProgram;
static positionColorLightmapProgram: ShaderProgram;
static positionColorTexLightmapProgram: ShaderProgram;
static positionTexColorNormalProgram: ShaderProgram;
static positionTexLightmapColorProgram: ShaderProgram;
static renderTypeSolidProgram: ShaderProgram;
static renderTypeCutoutMippedProgram: ShaderProgram;
static renderTypeCutoutProgram: ShaderProgram;
static renderTypeTranslucentProgram: ShaderProgram;
static renderTypeTranslucentMovingBlockProgram: ShaderProgram;
static renderTypeTranslucentNoCrumblingProgram: ShaderProgram;
static renderTypeArmorCutoutNoCullProgram: ShaderProgram;
static renderTypeEntitySolidProgram: ShaderProgram;
static renderTypeEntityCutoutProgram: ShaderProgram;
static renderTypeEntityCutoutNoNullProgram: ShaderProgram;
static renderTypeEntityCutoutNoNullZOffsetProgram: ShaderProgram;
static renderTypeItemEntityTranslucentCullProgram: ShaderProgram;
static renderTypeEntityTranslucentCullProgram: ShaderProgram;
static renderTypeEntityTranslucentProgram: ShaderProgram;
static renderTypeEntityTranslucentEmissiveProgram: ShaderProgram;
static renderTypeEntitySmoothCutoutProgram: ShaderProgram;
static renderTypeBeaconBeamProgram: ShaderProgram;
static renderTypeEntityDecalProgram: ShaderProgram;
static renderTypeEntityNoOutlineProgram: ShaderProgram;
static renderTypeEntityShadowProgram: ShaderProgram;
static renderTypeEntityAlphaProgram: ShaderProgram;
static renderTypeEyesProgram: ShaderProgram;
static renderTypeEnergySwirlProgram: ShaderProgram;
static renderTypeLeashProgram: ShaderProgram;
static renderTypeWaterMaskProgram: ShaderProgram;
static renderTypeOutlineProgram: ShaderProgram;
static renderTypeArmorGlintProgram: ShaderProgram;
static renderTypeArmorEntityGlintProgram: ShaderProgram;
static renderTypeGlintTranslucentProgram: ShaderProgram;
static renderTypeGlintProgram: ShaderProgram;
static renderTypeGlintDirectProgram: ShaderProgram;
static renderTypeEntityGlintProgram: ShaderProgram;
static renderTypeEntityGlintDirectProgram: ShaderProgram;
static renderTypeTextProgram: ShaderProgram;
static renderTypeTextBackgroundProgram: ShaderProgram;
static renderTypeTextIntensityProgram: ShaderProgram;
static renderTypeTextSeeThroughProgram: ShaderProgram;
static renderTypeTextBackgroundSeeThroughProgram: ShaderProgram;
static renderTypeTextIntensitySeeThroughProgram: ShaderProgram;
static renderTypeLightningProgram: ShaderProgram;
static renderTypeTripwireProgram: ShaderProgram;
static renderTypeEndPortalProgram: ShaderProgram;
static renderTypeEndGatewayProgram: ShaderProgram;
static renderTypeLinesProgram: ShaderProgram;
static renderTypeCrumblingProgram: ShaderProgram;
static renderTypeGuiProgram: ShaderProgram;
static renderTypeGuiOverlayProgram: ShaderProgram;
static renderTypeGuiTextHighlightProgram: ShaderProgram;
static renderTypeGuiGhostRecipeOverlayProgram: ShaderProgram;
}

//net.minecraft.command.argument.TestFunctionArgumentType
class TestFunctionArgumentType extends JObject, ArgumentType{
 parse(reader: StringReader): Object;
 parse(stringReader: StringReader): TestFunction;
 getExamples(): Collection;
 listSuggestions(context: CommandContext,builder: SuggestionsBuilder): CompletableFuture;
}
class Static_TestFunctionArgumentType {
static getFunction(context: CommandContext,name: string): TestFunction;
static testFunction(): TestFunctionArgumentType;
static EXAMPLES: Collection;
}

//net.minecraft.entity.ai.brain.task.GoToSecondaryPositionTask
class GoToSecondaryPositionTask extends JObject{
}
class Static_GoToSecondaryPositionTask {
static create(secondaryPositions: MemoryModuleType,speed: number,completionRange: number,primaryPositionActivationDistance: number,primaryPosition: MemoryModuleType): Task;
static method_47160(taskContext: TaskTriggerer_TaskContext,memoryQueryResult: MemoryQueryResult,memoryQueryResult2: MemoryQueryResult,i: number,mutableLong: MutableLong,memoryQueryResult3: MemoryQueryResult,f: number,j: number,world: ServerWorld,entity: VillagerEntity,time: long): boolean;
static method_47162(memoryModuleType: MemoryModuleType,memoryModuleType2: MemoryModuleType,i: number,mutableLong: MutableLong,f: number,j: number,context: TaskTriggerer_TaskContext): App;
static method_47159(taskContext: TaskTriggerer_TaskContext,i: number,mutableLong: MutableLong,f: number,j: number,walkTarget: MemoryQueryResult,secondary: MemoryQueryResult,primary: MemoryQueryResult): TaskRunnable;
}

//net.minecraft.util.math.RotationCalculator
class RotationCalculator extends JObject{
 toDegrees(rotation: number): number;
 getMax(): number;
 toRotation(degrees: number): number;
 toRotation(direction: Direction): number;
 toWrappedDegrees(rotation: number): number;
 toClampedRotation(degrees: number): number;
 clamp(rotationBits: number): number;
 areRotationsParallel(alpha: number,beta: number): boolean;
}

//net.minecraft.scoreboard.Scoreboard
class Scoreboard extends JObject{
 updateExistingObjective(objective: ScoreboardObjective): void;
 getPlayerScore(playerName: string,objective: ScoreboardObjective): ScoreboardPlayerScore;
 setObjectiveSlot(slot: number,objective: ScoreboardObjective): void;
 addObjective(name: string,criterion: ScoreboardCriterion,displayName: Text,renderType: ScoreboardCriterion_RenderType): ScoreboardObjective;
 removeObjective(objective: ScoreboardObjective): void;
 getObjective(name: string): ScoreboardObjective;
 containsObjective(name: string): boolean;
 resetPlayerScore(playerName: string,objective: ScoreboardObjective): void;
 addPlayerToTeam(playerName: string,team: Team): boolean;
 addTeam(name: string): Team;
 removeTeam(team: Team): void;
 getTeam(name: string): Team;
 getPlayerTeam(playerName: string): Team;
 getAllPlayerScores(objective: ScoreboardObjective): Collection;
 playerHasObjective(playerName: string,objective: ScoreboardObjective): boolean;
 updateObjective(objective: ScoreboardObjective): void;
 forEachScore(criterion: ScoreboardCriterion,player: string,action: Consumer): void;
 getTeamNames(): Collection;
 getObjectiveNames(): Collection;
 updatePlayerScore(playerName: string,objective: ScoreboardObjective): void;
 updatePlayerScore(playerName: string): void;
 getTeams(): Collection;
 clearPlayerTeam(playerName: string): boolean;
 updateRemovedTeam(team: Team): void;
 getObjectives(): Collection;
 getKnownPlayers(): Collection;
 updateScore(score: ScoreboardPlayerScore): void;
 resetEntityScore(entity: Entity): void;
 getObjectiveForSlot(slot: number): ScoreboardObjective;
 getNullableObjective(name: string): ScoreboardObjective;
 removePlayerFromTeam(playerName: string,team: Team): void;
 updateScoreboardTeam(team: Team): void;
 getPlayerObjectives(playerName: string): Map;
 updateScoreboardTeamAndPlayers(team: Team): void;
 updateRemovedObjective(objective: ScoreboardObjective): void;
}
class Static_Scoreboard {
static getDisplaySlotId(slotName: string): number;
static method_1174(name: string): Map;
static method_1179(criterionx: ScoreboardCriterion): List;
static method_1156(nbtList: NbtList,scores: Collection): void;
static getDisplaySlotName(slotId: number): string;
static method_1161(nbtList: NbtList,score: ScoreboardPlayerScore): void;
static method_1177(score: ScoreboardPlayerScore): boolean;
static getDisplaySlotNames(): String[];
static LOGGER: Logger;
static LIST_DISPLAY_SLOT_ID: number;
static SIDEBAR_DISPLAY_SLOT_ID: number;
static BELOW_NAME_DISPLAY_SLOT_ID: number;
static MIN_SIDEBAR_TEAM_DISPLAY_SLOT_ID: number;
static MAX_SIDEBAR_TEAM_DISPLAY_SLOT_ID: number;
static DISPLAY_SLOT_COUNT: number;
static displaySlotNames: String[];
}

//net.minecraft.command.argument.NbtCompoundArgumentType
class NbtCompoundArgumentType extends JObject, ArgumentType{
 parse(stringReader: StringReader): NbtCompound;
 parse(reader: StringReader): Object;
 getExamples(): Collection;
}
class Static_NbtCompoundArgumentType {
static nbtCompound(): NbtCompoundArgumentType;
static getNbtCompound(context: CommandContext,name: string): NbtCompound;
static EXAMPLES: Collection;
}

//net.minecraft.client.render.item.BuiltinModelItemRenderer
class BuiltinModelItemRenderer extends JObject, SynchronousResourceReloader{
 reload(manager: ResourceManager): void;
 render(stack: ItemStack,mode: ModelTransformationMode,matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,light: number,overlay: number): void;
}
class Static_BuiltinModelItemRenderer {
static method_37310(nbtCompound: NbtCompound,profile: GameProfile): void;
static method_32132(color: DyeColor): ShulkerBoxBlockEntity;
static method_3165(i: number): ShulkerBoxBlockEntity[];
static RENDER_SHULKER_BOX_DYED: ShulkerBoxBlockEntity[];
static RENDER_SHULKER_BOX: ShulkerBoxBlockEntity;
}

//net.minecraft.client.render.debug.NeighborUpdateDebugRenderer
class NeighborUpdateDebugRenderer extends JObject, DebugRenderer_Renderer{
 render(matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,cameraX: number,cameraY: number,cameraZ: number): void;
 addNeighborUpdate(time: long,pos: BlockPos): void;
}
class Static_NeighborUpdateDebugRenderer {
static method_30113(time2: Long): Map;
}

//net.minecraft.command.argument.serialize.FloatArgumentSerializer$Properties
class FloatArgumentSerializer_Properties extends JObject, ArgumentSerializer_ArgumentTypeProperties{
 createType(commandRegistryAccess: CommandRegistryAccess): ArgumentType;
 createType(commandRegistryAccess: CommandRegistryAccess): FloatArgumentType;
 getSerializer(): ArgumentSerializer;
}

//net.minecraft.SharedConstants
class SharedConstants extends JObject{
}
class Static_SharedConstants {
static setGameVersion(gameVersion: GameVersion): void;
static isValidChar(chr: char): boolean;
static getProtocolVersion(): number;
static stripInvalidChars(s: string): string;
static stripInvalidChars(s: string,allowLinebreaks: boolean): string;
static enableDataFixerOptimization(): void;
static isOutsideGenerationArea(pos: ChunkPos): boolean;
static createGameVersion(): void;
static getGameVersion(): GameVersion;
static IS_DEVELOPMENT_VERSION: boolean;
static WORLD_VERSION: number;
static CURRENT_SERIES: string;
static VERSION_NAME: string;
static RELEASE_TARGET_PROTOCOL_VERSION: number;
static field_29736: number;
static SNBT_TOO_OLD_THRESHOLD: number;
static field_29708: number;
static CRASH_ON_UNCAUGHT_THREAD_EXCEPTION: boolean;
static RESOURCE_PACK_VERSION: number;
static DATA_PACK_VERSION: number;
static field_39963: number;
static field_39964: number;
static DATA_VERSION_KEY: string;
static field_29743: boolean;
static field_29744: boolean;
static field_29745: boolean;
static field_33851: boolean;
static field_29747: boolean;
static field_35006: boolean;
static field_35563: boolean;
static field_29748: boolean;
static field_33753: boolean;
static field_29749: boolean;
static field_29750: boolean;
static field_29751: boolean;
static field_29752: boolean;
static field_29753: boolean;
static field_44779: boolean;
static field_29754: boolean;
static field_29755: boolean;
static field_29756: boolean;
static field_29676: boolean;
static field_44582: boolean;
static field_29677: boolean;
static field_29678: boolean;
static field_29679: boolean;
static field_29680: boolean;
static field_29681: boolean;
static field_29682: boolean;
static field_29683: boolean;
static field_29684: boolean;
static field_29685: boolean;
static field_29686: boolean;
static field_29687: boolean;
static field_29688: boolean;
static field_29689: boolean;
static field_29690: boolean;
static field_29691: boolean;
static field_29692: boolean;
static field_29693: boolean;
static field_29694: boolean;
static field_29695: boolean;
static field_29696: boolean;
static field_29697: boolean;
static field_29698: boolean;
static field_29699: boolean;
static field_29700: boolean;
static field_33554: boolean;
static field_37273: boolean;
static field_39090: boolean;
static field_39460: boolean;
static field_39962: boolean;
static field_34368: boolean;
static field_29701: boolean;
static field_29710: boolean;
static field_34369: boolean;
static field_34370: boolean;
static DEBUG_BIOME_SOURCE: boolean;
static DEBUG_NOISE: boolean;
static field_29711: boolean;
static field_29712: boolean;
static field_29713: boolean;
static field_29715: boolean;
static field_29716: boolean;
static field_29717: boolean;
static field_29718: boolean;
static field_33555: boolean;
static field_35438: boolean;
static field_35439: boolean;
static DEFAULT_PORT: number;
static field_29720: boolean;
static field_29721: boolean;
static field_29722: number;
static field_29723: number;
static RESOURCE_LEAK_DETECTOR_DISABLED: ResourceLeakDetector_Level;
static field_29724: boolean;
static field_29725: boolean;
static field_29726: boolean;
static field_29727: boolean;
static field_35652: boolean;
static field_39961: boolean;
static field_41533: boolean;
static field_44780: boolean;
static field_22251: long;
static field_44583: boolean;
static useChoiceTypeRegistrations: boolean;
static isDevelopment: boolean;
static requiredDataFixTypes: Set;
static CHUNK_WIDTH: number;
static DEFAULT_WORLD_HEIGHT: number;
static COMMAND_MAX_LENGTH: number;
static field_38052: number;
static field_39898: number;
static INVALID_CHARS_LEVEL_NAME: char[];
static TICKS_PER_SECOND: number;
static TICKS_PER_MINUTE: number;
static TICKS_PER_IN_GAME_DAY: number;
static field_29705: number;
static field_29706: number;
static field_29707: number;
static field_44922: number;
static gameVersion: GameVersion;
}

//net.minecraft.server.command.PlaceCommand
class PlaceCommand extends JObject{
}
class Static_PlaceCommand {
static register(dispatcher: CommandDispatcher): void;
static method_43923(context: CommandContext): number;
static method_43921(context: CommandContext): number;
static method_43918(context: CommandContext): number;
static method_43925(context: CommandContext): number;
static method_43924(context: CommandContext): number;
static throwOnUnloadedPos(world: ServerWorld,pos1: ChunkPos,pos2: ChunkPos): void;
static method_43656(context: CommandContext): number;
static method_43922(context: CommandContext): number;
static method_43655(context: CommandContext): number;
static method_52022(string: string,blockPos: BlockPos): Text;
static method_39987(context: CommandContext): number;
static method_39990(context: CommandContext): number;
static method_43653(context: CommandContext): number;
static method_43648(context: CommandContext): number;
static method_39988(source: ServerCommandSource): boolean;
static method_52020(blockPos: BlockPos): Text;
static method_43651(biome: RegistryEntry): boolean;
static method_43649(structureStart: StructureStart,serverWorld: ServerWorld,chunkGenerator: ChunkGenerator,chunkPos: ChunkPos): void;
static method_52021(string: string,blockPos: BlockPos): Text;
static executePlaceJigsaw(source: ServerCommandSource,structurePool: RegistryEntry,id: Identifier,maxDepth: number,pos: BlockPos): number;
static method_52019(identifier: Identifier,blockPos: BlockPos): Text;
static method_44145(context: CommandContext,builder: SuggestionsBuilder): CompletableFuture;
static method_43920(id: Object): Message;
static method_43646(serverWorld: ServerWorld,pos: ChunkPos): boolean;
static executePlaceTemplate(source: ServerCommandSource,id: Identifier,pos: BlockPos,rotation: BlockRotation,mirror: BlockMirror,integrity: number,seed: number): number;
static executePlaceFeature(source: ServerCommandSource,feature: RegistryEntry_Reference,pos: BlockPos): number;
static executePlaceStructure(source: ServerCommandSource,structure: RegistryEntry_Reference,pos: BlockPos): number;
static FEATURE_FAILED_EXCEPTION: SimpleCommandExceptionType;
static JIGSAW_FAILED_EXCEPTION: SimpleCommandExceptionType;
static STRUCTURE_FAILED_EXCEPTION: SimpleCommandExceptionType;
static TEMPLATE_INVALID_EXCEPTION: DynamicCommandExceptionType;
static TEMPLATE_FAILED_EXCEPTION: SimpleCommandExceptionType;
static SUGGESTION_PROVIDER: SuggestionProvider;
}

//net.minecraft.world.gen.StructureWeightSampler$1


//net.minecraft.block.entity.ViewerCountManager
class ViewerCountManager extends JObject{
 updateViewerCount(world: World,pos: BlockPos,state: BlockState): void;
 openContainer(player: PlayerEntity,world: World,pos: BlockPos,state: BlockState): void;
 getViewerCount(): number;
 closeContainer(player: PlayerEntity,world: World,pos: BlockPos,state: BlockState): void;
}
class Static_ViewerCountManager {
static scheduleBlockTick(world: World,pos: BlockPos,state: BlockState): void;
static SCHEDULE_TICK_DELAY: number;
}

//net.minecraft.client.render.RenderLayer$MultiPhaseParameters
class RenderLayer_MultiPhaseParameters extends JObject{
 toString(): string;
}
class Static_RenderLayer_MultiPhaseParameters {
static builder(): RenderLayer_MultiPhaseParameters_Builder;
}

//net.minecraft.client.particle.SuspendParticle$DolphinFactory
class SuspendParticle_DolphinFactory extends JObject, ParticleFactory{
 createParticle(defaultParticleType: DefaultParticleType,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
 createParticle(particleEffect: ParticleEffect,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
}

//net.minecraft.loot.LootChoice
interface LootChoice extends JObject{
 getWeight(luck: number): number;
 generateLoot(lootConsumer: Consumer,context: LootContext): void;
}

//net.minecraft.fluid.Fluid
class Fluid extends JObject{
 getLevel(state: FluidState): number;
 getHeight(state: FluidState): number;
 getHeight(state: FluidState,world: BlockView,pos: BlockPos): number;
 getShape(state: FluidState,world: BlockView,pos: BlockPos): VoxelShape;
 matchesType(fluid: Fluid): boolean;
 getTickRate(world: WorldView): number;
 getBucketFillSound(): Optional;
 getBucketItem(): Item;
 isIn(tag: TagKey): boolean;
 isStill(state: FluidState): boolean;
 getDefaultState(): FluidState;
 getRegistryEntry(): RegistryEntry_Reference;
 getStateManager(): StateManager;
}
class Static_Fluid {
static STATE_IDS: IdList;
}

//net.minecraft.entity.Flutterer
interface Flutterer extends JObject{
 isInAir(): boolean;
}

//net.minecraft.structure.AncientCityOutskirtsGenerator
class AncientCityOutskirtsGenerator extends JObject{
}
class Static_AncientCityOutskirtsGenerator {
static bootstrap(poolRegisterable: Registerable): void;
}

//net.minecraft.client.realms.gui.screen.RealmsDownloadLatestWorldScreen$DownloadStatus
class RealmsDownloadLatestWorldScreen_DownloadStatus extends JObject{
 bytesWritten: long;
 totalBytes: long;
}

//net.minecraft.client.gl.GlTimer$InstanceHolder
class GlTimer_InstanceHolder extends JObject{
}
class Static_GlTimer_InstanceHolder {
static create(): GlTimer;
static INSTANCE: Optional;
}

//net.minecraft.data.client.TextureKey
class TextureKey extends JObject{
 getName(): string;
 toString(): string;
 getParent(): TextureKey;
}
class Static_TextureKey {
static of(name: string): TextureKey;
static of(name: string,parent: TextureKey): TextureKey;
static ALL: TextureKey;
static TEXTURE: TextureKey;
static PARTICLE: TextureKey;
static END: TextureKey;
static BOTTOM: TextureKey;
static TOP: TextureKey;
static FRONT: TextureKey;
static BACK: TextureKey;
static SIDE: TextureKey;
static NORTH: TextureKey;
static SOUTH: TextureKey;
static EAST: TextureKey;
static WEST: TextureKey;
static UP: TextureKey;
static DOWN: TextureKey;
static CROSS: TextureKey;
static PLANT: TextureKey;
static WALL: TextureKey;
static RAIL: TextureKey;
static WOOL: TextureKey;
static PATTERN: TextureKey;
static PANE: TextureKey;
static EDGE: TextureKey;
static FAN: TextureKey;
static STEM: TextureKey;
static UPPERSTEM: TextureKey;
static CROP: TextureKey;
static DIRT: TextureKey;
static FIRE: TextureKey;
static LANTERN: TextureKey;
static PLATFORM: TextureKey;
static UNSTICKY: TextureKey;
static TORCH: TextureKey;
static LAYER0: TextureKey;
static LAYER1: TextureKey;
static LAYER2: TextureKey;
static LIT_LOG: TextureKey;
static CANDLE: TextureKey;
static INSIDE: TextureKey;
static CONTENT: TextureKey;
static INNER_TOP: TextureKey;
static FLOWERBED: TextureKey;
}

//net.minecraft.util.TopologicalSorts
class TopologicalSorts extends JObject{
}
class Static_TopologicalSorts {
static sort(successors: Map,visited: Set,visiting: Set,reversedOrderConsumer: Consumer,now: Object): boolean;
}

//net.minecraft.world.biome.source.BiomeCoords
class BiomeCoords extends JObject{
}
class Static_BiomeCoords {
static fromBlock(blockCoord: number): number;
static method_39920(i: number): number;
static fromChunk(chunkCoord: number): number;
static toChunk(biomeCoord: number): number;
static toBlock(biomeCoord: number): number;
static field_33089: number;
static field_33090: number;
static field_34830: number;
static field_33091: number;
}

//net.minecraft.recipe.CraftingRecipe
interface CraftingRecipe extends JObject, Recipe{
 getType(): RecipeType;
 getCategory(): CraftingRecipeCategory;
}

//net.minecraft.world.gen.chunk.ChunkGenerators
class ChunkGenerators extends JObject{
}
class Static_ChunkGenerators {
static registerAndGetDefault(registry: Registry): Codec;
}

//net.minecraft.server.command.DataCommand$Processor
interface DataCommand_Processor extends JObject{
 process(string: string): string;
}

//net.minecraft.data.DataProvider$Factory
interface DataProvider_Factory extends JObject{
 create(output: DataOutput): DataProvider;
}

//net.minecraft.entity.ai.brain.task.GoToNearbyPositionTask
class GoToNearbyPositionTask extends JObject{
}
class Static_GoToNearbyPositionTask {
static create(posModule: MemoryModuleType,walkSpeed: number,completionRange: number,maxDistance: number): Task;
static method_47158(memoryModuleType: MemoryModuleType,i: number,mutableLong: MutableLong,f: number,j: number,context: TaskTriggerer_TaskContext): App;
static method_47156(taskContext: TaskTriggerer_TaskContext,memoryQueryResult: MemoryQueryResult,i: number,mutableLong: MutableLong,memoryQueryResult2: MemoryQueryResult,f: number,j: number,world: ServerWorld,entity: PathAwareEntity,time: long): boolean;
static method_47155(taskContext: TaskTriggerer_TaskContext,i: number,mutableLong: MutableLong,f: number,j: number,walkTarget: MemoryQueryResult,pos: MemoryQueryResult): TaskRunnable;
}

//net.minecraft.data.server.recipe.RecipeProvider
class RecipeProvider extends JObject, DataProvider{
 getName(): string;
 run(writer: DataWriter): CompletableFuture;
 generate(exporter: Consumer): void;
 saveRecipeAdvancement(cache: DataWriter,advancementId: Identifier,advancementBuilder: Advancement_Builder): CompletableFuture;
}
class Static_RecipeProvider {
static hasItem(item: ItemConvertible): string;
static generateFamilies(exporter: Consumer,enabledFeatures: FeatureSet): void;
static method_46210(consumer: Consumer,family: BlockFamily): void;
static method_46579(i: number): CompletableFuture[];
static method_46205(featureSet: FeatureSet,family: BlockFamily): boolean;
static conditionsFromItem(count: NumberRange_IntRange,item: ItemConvertible): InventoryChangedCriterion_Conditions;
static conditionsFromItem(item: ItemConvertible): InventoryChangedCriterion_Conditions;
static getItemPath(item: ItemConvertible): string;
static offerBlasting(exporter: Consumer,inputs: List,category: RecipeCategory,output: ItemConvertible,experience: number,cookingTime: number,group: string): void;
static convertBetween(to: ItemConvertible,from: ItemConvertible): string;
static offerSmelting(exporter: Consumer,inputs: List,category: RecipeCategory,output: ItemConvertible,experience: number,cookingTime: number,group: string): void;
static createFenceRecipe(output: ItemConvertible,input: Ingredient): CraftingRecipeJsonBuilder;
static offerPlanksRecipe2(exporter: Consumer,output: ItemConvertible,input: TagKey,count: number): void;
static conditionsFromTag(tag: TagKey): InventoryChangedCriterion_Conditions;
static offerPlanksRecipe(exporter: Consumer,output: ItemConvertible,input: TagKey,count: number): void;
static offerBoatRecipe(exporter: Consumer,output: ItemConvertible,input: ItemConvertible): void;
static createDoorRecipe(output: ItemConvertible,input: Ingredient): CraftingRecipeJsonBuilder;
static createStairsRecipe(output: ItemConvertible,input: Ingredient): CraftingRecipeJsonBuilder;
static createSignRecipe(output: ItemConvertible,input: Ingredient): CraftingRecipeJsonBuilder;
static createSlabRecipe(category: RecipeCategory,output: ItemConvertible,input: Ingredient): CraftingRecipeJsonBuilder;
static offerCarpetRecipe(exporter: Consumer,output: ItemConvertible,input: ItemConvertible): void;
static offerBedRecipe(exporter: Consumer,output: ItemConvertible,input: ItemConvertible): void;
static offerSlabRecipe(exporter: Consumer,category: RecipeCategory,output: ItemConvertible,input: ItemConvertible): void;
static method_52186(item: Item,dyeable: Item): boolean;
static offerBannerRecipe(exporter: Consumer,output: ItemConvertible,input: ItemConvertible): void;
static offerMosaicRecipe(exporter: Consumer,category: RecipeCategory,output: ItemConvertible,input: ItemConvertible): void;
static getRecipeName(item: ItemConvertible): string;
static offerWallRecipe(exporter: Consumer,category: RecipeCategory,output: ItemConvertible,input: ItemConvertible): void;
static getWallRecipe(category: RecipeCategory,output: ItemConvertible,input: Ingredient): CraftingRecipeJsonBuilder;
static generateFamily(exporter: Consumer,family: BlockFamily): void;
static method_33534(blockFamily: BlockFamily,consumer: Consumer,variant: BlockFamily_Variant,block: Block): void;
static offerWaxingRecipes(exporter: Consumer): void;
static method_34853(consumer: Consumer,input: Block,output: Block): void;
static method_33543(output: ItemConvertible,input: ItemConvertible): CraftingRecipeJsonBuilder;
static method_33538(output: ItemConvertible,input: ItemConvertible): CraftingRecipeJsonBuilder;
static method_36546(output: ItemConvertible,input: ItemConvertible): CraftingRecipeJsonBuilder;
static method_33556(output: ItemConvertible,input: ItemConvertible): CraftingRecipeJsonBuilder;
static method_33541(output: ItemConvertible,input: ItemConvertible): CraftingRecipeJsonBuilder;
static method_33547(output: ItemConvertible,input: ItemConvertible): CraftingRecipeJsonBuilder;
static method_33549(output: ItemConvertible,input: ItemConvertible): CraftingRecipeJsonBuilder;
static method_33551(output: ItemConvertible,input: ItemConvertible): CraftingRecipeJsonBuilder;
static method_33552(output: ItemConvertible,input: ItemConvertible): CraftingRecipeJsonBuilder;
static method_33550(output: ItemConvertible,input: ItemConvertible): CraftingRecipeJsonBuilder;
static method_33532(output: ItemConvertible,input: ItemConvertible): CraftingRecipeJsonBuilder;
static method_33554(output: ItemConvertible,input: ItemConvertible): CraftingRecipeJsonBuilder;
static method_33536(craftingRecipeJsonBuilder: CraftingRecipeJsonBuilder,variant: BlockFamily_Variant,group: string): void;
static method_46214(itemConvertible: ItemConvertible,itemConvertible2: ItemConvertible): CraftingRecipeJsonBuilder;
static method_33545(output: ItemConvertible,input: ItemConvertible): CraftingRecipeJsonBuilder;
static method_33540(itemConvertible: ItemConvertible): string;
static method_46213(itemConvertible: ItemConvertible,itemConvertible2: ItemConvertible): CraftingRecipeJsonBuilder;
static offerReversibleCompactingRecipesWithCompactingRecipeGroup(exporter: Consumer,reverseCategory: RecipeCategory,baseItem: ItemConvertible,compactingCategory: RecipeCategory,compactItem: ItemConvertible,compactingId: string,compactingGroup: string): void;
static offerReversibleCompactingRecipesWithReverseRecipeGroup(exporter: Consumer,reverseCategory: RecipeCategory,baseItem: ItemConvertible,compactingCategory: RecipeCategory,compactItem: ItemConvertible,reverseId: string,reverseGroup: string): void;
static offerConcretePowderDyeingRecipe(exporter: Consumer,output: ItemConvertible,input: ItemConvertible): void;
static offerShapelessRecipe(exporter: Consumer,output: ItemConvertible,input: ItemConvertible,group: string,outputCount: number): void;
static offerCandleDyeingRecipe(exporter: Consumer,output: ItemConvertible,input: ItemConvertible): void;
static offerPolishedStoneRecipe(exporter: Consumer,category: RecipeCategory,output: ItemConvertible,input: ItemConvertible): void;
static createCondensingRecipe(category: RecipeCategory,output: ItemConvertible,input: Ingredient): CraftingRecipeJsonBuilder;
static offerCutCopperRecipe(exporter: Consumer,category: RecipeCategory,output: ItemConvertible,input: ItemConvertible): void;
static offerMultipleOptions(exporter: Consumer,serializer: RecipeSerializer,inputs: List,category: RecipeCategory,output: ItemConvertible,experience: number,cookingTime: number,group: string,method: string): void;
static offerSingleOutputShapelessRecipe(exporter: Consumer,output: ItemConvertible,input: ItemConvertible,group: string): void;
static offerSmithingTrimRecipe(exporter: Consumer,template: Item,recipeId: Identifier): void;
static offer2x2CompactingRecipe(exporter: Consumer,category: RecipeCategory,output: ItemConvertible,input: ItemConvertible): void;
static offerBarkBlockRecipe(exporter: Consumer,output: ItemConvertible,input: ItemConvertible): void;
static offerChestBoatRecipe(exporter: Consumer,output: ItemConvertible,input: ItemConvertible): void;
static requireEnteringFluid(block: Block): EnterBlockCriterion_Conditions;
static createTransmutationRecipe(output: ItemConvertible,input: Ingredient): CraftingRecipeJsonBuilder;
static offerPressurePlateRecipe(exporter: Consumer,output: ItemConvertible,input: ItemConvertible): void;
static createFenceGateRecipe(output: ItemConvertible,input: Ingredient): CraftingRecipeJsonBuilder;
static createPressurePlateRecipe(category: RecipeCategory,output: ItemConvertible,input: Ingredient): CraftingRecipeJsonBuilder;
static offerCompactingRecipe(exporter: Consumer,category: RecipeCategory,output: ItemConvertible,input: ItemConvertible): void;
static offerCompactingRecipe(exporter: Consumer,category: RecipeCategory,output: ItemConvertible,input: ItemConvertible,criterionName: string): void;
static createTrapdoorRecipe(output: ItemConvertible,input: Ingredient): CraftingRecipeJsonBuilder;
static offerHangingSignRecipe(exporter: Consumer,output: ItemConvertible,input: ItemConvertible): void;
static offerDyeableRecipes(exporter: Consumer,dyes: List,dyeables: List,group: string): void;
static offerStainedGlassDyeingRecipe(exporter: Consumer,output: ItemConvertible,input: ItemConvertible): void;
static offerStainedGlassPaneRecipe(exporter: Consumer,output: ItemConvertible,input: ItemConvertible): void;
static offerStainedGlassPaneDyeingRecipe(exporter: Consumer,output: ItemConvertible,input: ItemConvertible): void;
static offerTerracottaDyeingRecipe(exporter: Consumer,output: ItemConvertible,input: ItemConvertible): void;
static offerNetheriteUpgradeRecipe(exporter: Consumer,input: Item,category: RecipeCategory,result: Item): void;
static getBlastingItemPath(item: ItemConvertible): string;
static offerChiseledBlockRecipe(exporter: Consumer,category: RecipeCategory,output: ItemConvertible,input: ItemConvertible): void;
static offerFoodCookingRecipe(exporter: Consumer,cooker: string,serializer: RecipeSerializer,cookingTime: number,input: ItemConvertible,output: ItemConvertible,experience: number): void;
static offerCrackingRecipe(exporter: Consumer,output: ItemConvertible,input: ItemConvertible): void;
static offerReversibleCompactingRecipes(exporter: Consumer,reverseCategory: RecipeCategory,baseItem: ItemConvertible,compactingCategory: RecipeCategory,compactItem: ItemConvertible,compactingId: string,compactingGroup: string,reverseId: string,reverseGroup: string): void;
static offerReversibleCompactingRecipes(exporter: Consumer,reverseCategory: RecipeCategory,baseItem: ItemConvertible,compactingCategory: RecipeCategory,compactItem: ItemConvertible): void;
static offerSmithingTemplateCopyingRecipe(exporter: Consumer,template: ItemConvertible,resource: TagKey): void;
static offerSmithingTemplateCopyingRecipe(exporter: Consumer,template: ItemConvertible,resource: ItemConvertible): void;
static createCutCopperRecipe(category: RecipeCategory,output: ItemConvertible,input: Ingredient): ShapedRecipeJsonBuilder;
static getSmeltingItemPath(item: ItemConvertible): string;
static createChiseledBlockRecipe(category: RecipeCategory,output: ItemConvertible,input: Ingredient): ShapedRecipeJsonBuilder;
static getVariantRecipeInput(family: BlockFamily,variant: BlockFamily_Variant): Block;
static generateCookingRecipes(exporter: Consumer,cooker: string,serializer: RecipeSerializer,cookingTime: number): void;
static conditionsFromItemPredicates(predicates: ItemPredicate[]): InventoryChangedCriterion_Conditions;
static offerStonecuttingRecipe(exporter: Consumer,category: RecipeCategory,output: ItemConvertible,input: ItemConvertible): void;
static offerStonecuttingRecipe(exporter: Consumer,category: RecipeCategory,output: ItemConvertible,input: ItemConvertible,count: number): void;
static VARIANT_FACTORIES: Map;
}

//net.minecraft.resource.metadata.ResourceMetadataSerializer$1


//net.minecraft.client.sound.AbstractSoundInstance
class AbstractSoundInstance extends JObject, SoundInstance{
 toString(): string;
 getId(): Identifier;
 isRelative(): boolean;
 getCategory(): SoundCategory;
 getVolume(): number;
 getSound(): Sound;
 getSoundSet(soundManager: SoundManager): WeightedSoundSet;
 getAttenuationType(): SoundInstance_AttenuationType;
 getRepeatDelay(): number;
 getX(): number;
 getY(): number;
 isRepeatable(): boolean;
 getZ(): number;
 getPitch(): number;
}

//net.minecraft.client.util.math.Vector2f
class Vector2f extends JObject{
 toString(): string;
 getX(): number;
 getY(): number;
}

//net.minecraft.network.packet.s2c.play.PlayerListS2CPacket$Serialized
class PlayerListS2CPacket_Serialized extends JObject{
}

//net.minecraft.entity.ai.brain.Memory
class Memory extends JObject{
 toString(): string;
 getValue(): Object;
 tick(): void;
 isExpired(): boolean;
 isTimed(): boolean;
 getExpiry(): long;
}
class Static_Memory {
static timed(value: Object,expiry: long): Memory;
static createCodec(codec: Codec): Codec;
static method_28354(codec: Codec,instance: RecordCodecBuilder_Instance): App;
static permanent(value: Object): Memory;
static method_28352(memory: Memory): Optional;
static method_28356(value: Object,expiry: Optional): Memory;
static method_28357(memory: Memory): Object;
}

//net.minecraft.predicate.entity.EntityEquipmentPredicate$Builder
class EntityEquipmentPredicate_Builder extends JObject{
 build(): EntityEquipmentPredicate;
 head(head: ItemPredicate): EntityEquipmentPredicate_Builder;
 legs(legs: ItemPredicate): EntityEquipmentPredicate_Builder;
 feet(feet: ItemPredicate): EntityEquipmentPredicate_Builder;
 chest(chest: ItemPredicate): EntityEquipmentPredicate_Builder;
 mainhand(mainhand: ItemPredicate): EntityEquipmentPredicate_Builder;
 offhand(offhand: ItemPredicate): EntityEquipmentPredicate_Builder;
}
class Static_EntityEquipmentPredicate_Builder {
static create(): EntityEquipmentPredicate_Builder;
}

//net.minecraft.test.AfterBatch
interface AfterBatch extends JObject, Annotation{
 batchId(): string;
}

//net.minecraft.world.gen.feature.SingleStateFeatureConfig
class SingleStateFeatureConfig extends JObject, FeatureConfig{
 state: BlockState;
}
class Static_SingleStateFeatureConfig {
static method_28684(config: SingleStateFeatureConfig): BlockState;
static CODEC: Codec;
}

//net.minecraft.client.gui.hud.SubtitlesHud
class SubtitlesHud extends JObject, SoundInstanceListener{
 render(context: DrawContext): void;
 onSoundPlayed(sound: SoundInstance,soundSet: WeightedSoundSet): void;
}
class Static_SubtitlesHud {
static REMOVE_DELAY: long;
}

//net.minecraft.unused.packageinfo.PackageInfo6536
interface PackageInfo6536 extends JObject{
}

//net.minecraft.client.network.message.MessageHandler
class MessageHandler extends JObject{
 process(): void;
 onGameMessage(message: Text,overlay: boolean): void;
 setChatDelay(chatDelay: number): void;
 processAll(): void;
 onChatMessage(message: SignedMessage,sender: GameProfile,params: MessageType_Parameters): void;
 removeDelayedMessage(signature: MessageSignatureData): boolean;
 onProfilelessMessage(content: Text,params: MessageType_Parameters): void;
 processDelayedMessages(): void;
 getUnprocessedMessageCount(): long;
}
class Static_MessageHandler {
static method_45747(messageSignatureData: MessageSignatureData,message: MessageHandler_ProcessableMessage): boolean;
}

//net.minecraft.structure.StrongholdGenerator
class StrongholdGenerator extends JObject{
}
class Static_StrongholdGenerator {
static init(): void;
static createPiece(pieceType: Class,holder: StructurePiecesHolder,random: Random,x: number,y: number,z: number,orientation: Direction,chainLength: number): StrongholdGenerator_Piece;
static pieceGenerator(start: StrongholdGenerator_Start,holder: StructurePiecesHolder,random: Random,x: number,y: number,z: number,orientation: Direction,chainLength: number): StructurePiece;
static pickPiece(start: StrongholdGenerator_Start,holder: StructurePiecesHolder,random: Random,x: number,y: number,z: number,orientation: Direction,chainLength: number): StrongholdGenerator_Piece;
static checkRemainingPieces(): boolean;
static field_31624: number;
static field_31625: number;
static field_31626: number;
static field_31627: number;
static field_31628: boolean;
static field_36417: number;
static ALL_PIECES: StrongholdGenerator_PieceData;
static possiblePieces: List;
static activePieceType: Class;
static totalWeight: number;
static STONE_BRICK_RANDOMIZER: StrongholdGenerator_StoneBrickRandomizer;
}

//net.minecraft.loot.provider.number.BinomialLootNumberProvider$Serializer
class BinomialLootNumberProvider_Serializer extends JObject, JsonSerializer{
 fromJson(json: JsonObject,context: JsonDeserializationContext): Object;
 fromJson(jsonObject: JsonObject,jsonDeserializationContext: JsonDeserializationContext): BinomialLootNumberProvider;
 toJson(json: JsonObject,object: Object,context: JsonSerializationContext): void;
 toJson(jsonObject: JsonObject,binomialLootNumberProvider: BinomialLootNumberProvider,jsonSerializationContext: JsonSerializationContext): void;
}

//net.minecraft.nbt.NbtIo$1


//net.minecraft.block.entity.BannerPatterns
class BannerPatterns extends JObject{
}
class Static_BannerPatterns {
static of(id: string): RegistryKey;
static registerAndGetDefault(registry: Registry): BannerPattern;
static BASE: RegistryKey;
static SQUARE_BOTTOM_LEFT: RegistryKey;
static SQUARE_BOTTOM_RIGHT: RegistryKey;
static SQUARE_TOP_LEFT: RegistryKey;
static SQUARE_TOP_RIGHT: RegistryKey;
static STRIPE_BOTTOM: RegistryKey;
static STRIPE_TOP: RegistryKey;
static STRIPE_LEFT: RegistryKey;
static STRIPE_RIGHT: RegistryKey;
static STRIPE_CENTER: RegistryKey;
static STRIPE_MIDDLE: RegistryKey;
static STRIPE_DOWNRIGHT: RegistryKey;
static STRIPE_DOWNLEFT: RegistryKey;
static SMALL_STRIPES: RegistryKey;
static CROSS: RegistryKey;
static STRAIGHT_CROSS: RegistryKey;
static TRIANGLE_BOTTOM: RegistryKey;
static TRIANGLE_TOP: RegistryKey;
static TRIANGLES_BOTTOM: RegistryKey;
static TRIANGLES_TOP: RegistryKey;
static DIAGONAL_LEFT: RegistryKey;
static DIAGONAL_UP_RIGHT: RegistryKey;
static DIAGONAL_UP_LEFT: RegistryKey;
static DIAGONAL_RIGHT: RegistryKey;
static CIRCLE: RegistryKey;
static RHOMBUS: RegistryKey;
static HALF_VERTICAL: RegistryKey;
static HALF_HORIZONTAL: RegistryKey;
static HALF_VERTICAL_RIGHT: RegistryKey;
static HALF_HORIZONTAL_BOTTOM: RegistryKey;
static BORDER: RegistryKey;
static CURLY_BORDER: RegistryKey;
static GRADIENT: RegistryKey;
static GRADIENT_UP: RegistryKey;
static BRICKS: RegistryKey;
static GLOBE: RegistryKey;
static CREEPER: RegistryKey;
static SKULL: RegistryKey;
static FLOWER: RegistryKey;
static MOJANG: RegistryKey;
static PIGLIN: RegistryKey;
}

//net.minecraft.recipe.RecipeType$1


//net.minecraft.util.shape.VoxelShapes
class VoxelShapes extends JObject{
}
class Static_VoxelShapes {
static empty(): VoxelShape;
static combine(one: VoxelShape,two: VoxelShape,fun: BooleanBiFunction): VoxelShape;
static union(first: VoxelShape,second: VoxelShape): VoxelShape;
static union(first: VoxelShape,others: VoxelShape[]): VoxelShape;
static unionCoversFullCube(one: VoxelShape,two: VoxelShape): boolean;
static adjacentSidesCoverSquare(one: VoxelShape,two: VoxelShape,direction: Direction): boolean;
static findRequiredBitResolution(min: number,max: number): number;
static cuboidUnchecked(minX: number,minY: number,minZ: number,maxX: number,maxY: number,maxZ: number): VoxelShape;
static isSideCovered(shape: VoxelShape,neighbor: VoxelShape,direction: Direction): boolean;
static extrudeFace(shape: VoxelShape,direction: Direction): VoxelShape;
static calculateMaxOffset(axis: Direction_Axis,box: Box,shapes: Iterable,maxDist: number): number;
static method_1075(pairList: PairList,pairList2: PairList,booleanBiFunction: BooleanBiFunction,voxelSet: VoxelSet,voxelSet2: VoxelSet,x1: number,x2: number,index1: number): boolean;
static createListPair(size: number,first: DoubleList,second: DoubleList,includeFirst: boolean,includeSecond: boolean): PairList;
static method_1076(pairList: PairList,booleanBiFunction: BooleanBiFunction,voxelSet: VoxelSet,i: number,voxelSet2: VoxelSet,j: number,y1: number,y2: number,index2: number): boolean;
static method_1087(): SimpleVoxelShape;
static method_1070(booleanBiFunction: BooleanBiFunction,voxelSet: VoxelSet,i: number,j: number,voxelSet2: VoxelSet,k: number,l: number,z1: number,z2: number,index3: number): boolean;
static fullCube(): VoxelShape;
static cuboid(box: Box): VoxelShape;
static cuboid(minX: number,minY: number,minZ: number,maxX: number,maxY: number,maxZ: number): VoxelShape;
static combineAndSimplify(first: VoxelShape,second: VoxelShape,fun: BooleanBiFunction): VoxelShape;
static matchesAnywhere(shape1: VoxelShape,shape2: VoxelShape,predicate: BooleanBiFunction): boolean;
static matchesAnywhere(mergedX: PairList,mergedY: PairList,mergedZ: PairList,shape1: VoxelSet,shape2: VoxelSet,predicate: BooleanBiFunction): boolean;
static lcm(a: number,b: number): long;
static MIN_SIZE: number;
static field_31881: number;
static FULL_CUBE: VoxelShape;
static UNBOUNDED: VoxelShape;
static EMPTY: VoxelShape;
}

//net.minecraft.server.command.WeatherCommand
class WeatherCommand extends JObject{
}
class Static_WeatherCommand {
static register(dispatcher: CommandDispatcher): void;
static executeClear(source: ServerCommandSource,duration: number): number;
static method_13826(context: CommandContext): number;
static method_52142(): Text;
static method_52143(): Text;
static method_13831(context: CommandContext): number;
static processDuration(source: ServerCommandSource,duration: number,provider: IntProvider): number;
static method_13829(context: CommandContext): number;
static method_13832(source: ServerCommandSource): boolean;
static method_13830(context: CommandContext): number;
static method_13825(context: CommandContext): number;
static executeRain(source: ServerCommandSource,duration: number): number;
static method_13823(context: CommandContext): number;
static executeThunder(source: ServerCommandSource,duration: number): number;
static method_52141(): Text;
static DEFAULT_DURATION: number;
}

//net.minecraft.client.tutorial.PunchTreeTutorialStepHandler
class PunchTreeTutorialStepHandler extends JObject, TutorialStepHandler{
 destroy(): void;
 tick(): void;
 onBlockBreaking(client: ClientWorld,pos: BlockPos,state: BlockState,progress: number): void;
 onSlotUpdate(stack: ItemStack): void;
}
class Static_PunchTreeTutorialStepHandler {
static DELAY: number;
static TITLE: Text;
static DESCRIPTION: Text;
}

//net.minecraft.world.level.LevelProperties
class LevelProperties extends JObject, ServerWorldProperties, SaveProperties{
 getVersion(): number;
 getTime(): long;
 setTime(time: long): void;
 getLevelName(): string;
 setTimeOfDay(timeOfDay: long): void;
 getTimeOfDay(): long;
 setInitialized(initialized: boolean): void;
 isInitialized(): boolean;
 cloneWorldNbt(registryManager: DynamicRegistryManager,playerNbt: NbtCompound): NbtCompound;
 getDataConfiguration(): DataConfiguration;
 setDifficultyLocked(difficultyLocked: boolean): void;
 isDifficultyLocked(): boolean;
 setDifficulty(difficulty: Difficulty): void;
 setSpawnPos(pos: BlockPos,angle: number): void;
 isDebugWorld(): boolean;
 isFlatWorld(): boolean;
 setRaining(raining: boolean): void;
 areCommandsAllowed(): boolean;
 isHardcore(): boolean;
 getDifficulty(): Difficulty;
 setGameMode(gameMode: GameMode): void;
 setWanderingTraderSpawnDelay(wanderingTraderSpawnDelay: number): void;
 getWanderingTraderSpawnDelay(): number;
 getClearWeatherTime(): number;
 getWanderingTraderId(): UUID;
 getWanderingTraderSpawnChance(): number;
 setClearWeatherTime(clearWeatherTime: number): void;
 getCustomBossEvents(): NbtCompound;
 getGeneratorOptions(): GeneratorOptions;
 setCustomBossEvents(customBossEvents: NbtCompound): void;
 setWanderingTraderSpawnChance(wanderingTraderSpawnChance: number): void;
 setWanderingTraderId(wanderingTraderId: UUID): void;
 getMainWorldProperties(): ServerWorldProperties;
 populateCrashReport(reportSection: CrashReportSection,world: HeightLimitView): void;
 getSpawnX(): number;
 getSpawnY(): number;
 updateLevelInfo(dataConfiguration: DataConfiguration): void;
 setRainTime(rainTime: number): void;
 getSpawnAngle(): number;
 addServerBrand(brand: string,modded: boolean): void;
 getSpawnZ(): number;
 setSpawnX(spawnX: number): void;
 setThundering(thundering: boolean): void;
 setSpawnZ(spawnZ: number): void;
 getRainTime(): number;
 setSpawnAngle(spawnAngle: number): void;
 setWorldBorder(worldBorder: WorldBorder_Properties): void;
 getThunderTime(): number;
 setThunderTime(thunderTime: number): void;
 setDragonFight(dragonFight: EnderDragonFight_Data): void;
 getDragonFight(): EnderDragonFight_Data;
 getPlayerData(): NbtCompound;
 getScheduledEvents(): Timer;
 setSpawnY(spawnY: number): void;
 isModded(): boolean;
 getRemovedFeatures(): Set;
 getServerBrands(): Set;
 getLevelInfo(): LevelInfo;
 getLifecycle(): Lifecycle;
 getWorldBorder(): WorldBorder_Properties;
 isRaining(): boolean;
 isThundering(): boolean;
 getGameRules(): GameRules;
 getGameMode(): GameMode;
}
class Static_LevelProperties {
static readProperties(dynamic: Dynamic,dataFixer: DataFixer,dataVersion: number,playerData: NbtCompound,levelInfo: LevelInfo,saveVersionInfo: SaveVersionInfo,specialProperty: LevelProperties_SpecialProperty,generatorOptions: GeneratorOptions,lifecycle: Lifecycle): LevelProperties;
static method_45558(nbtCompound: NbtCompound,dataConfiguration: NbtElement): void;
static method_29030(nbtCompound: NbtCompound,nbtElement: NbtElement): void;
static createStringList(strings: Set): NbtList;
static method_49901(dynamic: Dynamic): Stream;
static method_29032(dynamic: Dynamic): Stream;
static method_45557(result: DataResult_PartialResult): void;
static LOGGER: Logger;
static PLAYER_KEY: string;
static WORLD_GEN_SETTINGS_KEY: string;
}

//net.minecraft.world.event.Vibrations$VibrationListener
class Vibrations_VibrationListener extends JObject, GameEventListener{
 listen(world: ServerWorld,event: GameEvent,emitter: GameEvent_Emitter,emitterPos: Vec3d): boolean;
 getRange(): number;
 forceListen(world: ServerWorld,event: GameEvent,emitter: GameEvent_Emitter,emitterPos: Vec3d): void;
 getPositionSource(): PositionSource;
}
class Static_Vibrations_VibrationListener {
static isOccluded(world: World,emitterPos: Vec3d,listenerPos: Vec3d): boolean;
static method_51401(state: BlockState): boolean;
static getTravelDelay(emitterPos: BlockPos,listenerPos: BlockPos): number;
}

//net.minecraft.client.render.entity.animation.Transformation$Interpolations
class Transformation_Interpolations extends JObject{
}
class Static_Transformation_Interpolations {
static method_41815(dest: Vector3f,delta: number,keyframes: Keyframe[],start: number,end: number,scale: number): Vector3f;
static method_41816(dest: Vector3f,delta: number,keyframes: Keyframe[],start: number,end: number,scale: number): Vector3f;
static LINEAR: Transformation_Interpolation;
static CUBIC: Transformation_Interpolation;
}

//net.minecraft.structure.pool.StructurePoolElementType
interface StructurePoolElementType extends JObject{
 codec(): Codec;
}
class Static_StructurePoolElementType {
static register(id: string,codec: Codec): StructurePoolElementType;
static method_28884(codec: Codec): Codec;
static SINGLE_POOL_ELEMENT: StructurePoolElementType;
static LIST_POOL_ELEMENT: StructurePoolElementType;
static FEATURE_POOL_ELEMENT: StructurePoolElementType;
static EMPTY_POOL_ELEMENT: StructurePoolElementType;
static LEGACY_SINGLE_POOL_ELEMENT: StructurePoolElementType;
}

//net.minecraft.util.profiler.ProfileResult
interface ProfileResult extends JObject{
 save(path: Path): boolean;
 getEndTime(): long;
 getStartTime(): long;
 getTimeSpan(): long;
 getRootTimings(): string;
 getStartTick(): number;
 getTimings(parentPath: string): List;
 getTickSpan(): number;
 getEndTick(): number;
}
class Static_ProfileResult {
static getHumanReadableName(path: string): string;
static SPLITTER_CHAR: char;
}

//net.minecraft.network.packet.c2s.play.QueryEntityNbtC2SPacket
class QueryEntityNbtC2SPacket extends JObject, Packet{
 apply(serverPlayPacketListener: ServerPlayPacketListener): void;
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
 getEntityId(): number;
 getTransactionId(): number;
}

//net.minecraft.client.gui.screen.DialogScreen$ChoiceButton
class DialogScreen_ChoiceButton extends JObject{
}

//net.minecraft.client.util.ProfileKeysImpl
class ProfileKeysImpl extends JObject, ProfileKeys{
 isExpired(): boolean;
 fetchKeyPair(): CompletableFuture;
}
class Static_ProfileKeysImpl {
static decodeKeyPairResponse(keyPairResponse: KeyPairResponse): PlayerPublicKey_PublicKeyData;
static method_45109(key: PlayerKeyPair): boolean;
static LOGGER: Logger;
static TIME_UNTIL_FIRST_EXPIRY_CHECK: Duration;
static PROFILE_KEYS_PATH: Path;
}

//net.minecraft.recipe.Ingredient$TagEntry
class Ingredient_TagEntry extends JObject, Ingredient_Entry{
 toJson(): JsonObject;
 getStacks(): Collection;
}

//net.minecraft.client.util.SelectionManager$1


//net.minecraft.text.NbtTextContent
class NbtTextContent extends JObject, TextContent{
 equals(o: Object): boolean;
 toString(): string;
 hashCode(): number;
 getPath(): string;
 parse(source: ServerCommandSource,sender: Entity,depth: number): MutableText;
 getSeparator(): Optional;
 shouldInterpret(): boolean;
 getDataSource(): NbtDataSource;
}
class Static_NbtTextContent {
static parsePath(rawPath: string): NbtPathArgumentType_NbtPath;
static method_36333(stream: Stream): MutableText;
static method_10917(serverCommandSource: ServerCommandSource,entity: Entity,i: number,text: string): Stream;
static method_36335(mutableText: MutableText,accumulator: MutableText,current: MutableText): MutableText;
static method_15880(text: Text,accumulator: MutableText,current: MutableText): MutableText;
static method_36334(stream: Stream,text: MutableText): MutableText;
static LOGGER: Logger;
}

//net.minecraft.datafixer.schema.Schema99$1


//net.minecraft.client.render.model.json.AndMultipartModelSelector
class AndMultipartModelSelector extends JObject, MultipartModelSelector{
 getPredicate(stateManager: StateManager): Predicate;
}
class Static_AndMultipartModelSelector {
static method_3507(blockState: BlockState,predicate: Predicate): boolean;
static method_3508(stateManager: StateManager,selector: MultipartModelSelector): Predicate;
static method_3506(list: List,state: BlockState): boolean;
static KEY: string;
}

//net.minecraft.structure.StructurePieceType$Simple
interface StructurePieceType_Simple extends JObject, StructurePieceType{
 load(nbt: NbtCompound): StructurePiece;
 load(structureContext: StructureContext,nbtCompound: NbtCompound): StructurePiece;
}

//net.minecraft.resource.DependencyTracker
class DependencyTracker extends JObject{
 add(key: Object,value: DependencyTracker_Dependencies): DependencyTracker;
 traverse(callback: BiConsumer): void;
}
class Static_DependencyTracker {
static containsReverseDependency(dependencies: Multimap,key: Object,dependency: Object): boolean;
static addDependency(dependencies: Multimap,key: Object,dependency: Object): void;
static method_51488(multimap: Multimap,key: Object,value: DependencyTracker_Dependencies): void;
static method_51482(multimap: Multimap,key: Object,value: DependencyTracker_Dependencies): void;
static method_51493(multimap: Multimap,object: Object,subdependency: Object): boolean;
static method_51491(multimap: Multimap,object: Object,dependency: Object): void;
static method_51492(multimap: Multimap,object: Object,dependency: Object): void;
}

//net.minecraft.util.math.MatrixUtil
class MatrixUtil extends JObject{
}
class Static_MatrixUtil {
static scale(matrix: Matrix4f,scalar: number): Matrix4f;
static applyJacobiIteration(AtA: Matrix3f,matrix3f: Matrix3f,quaternionf: Quaternionf,quaternionf2: Quaternionf): void;
static applyJacobiIterations(AtA: Matrix3f,numJacobiIterations: number): Quaternionf;
static approximateGivensQuaternion(a11: number,a12: number,a22: number): GivensPair;
static conjugate(X: Matrix3f,A: Matrix3f): void;
static qrGivensQuaternion(a1: number,a2: number): GivensPair;
static svdDecompose(A: Matrix3f): Triple;
static COT_PI_OVER_8: number;
static SIN_COS_PI_OVER_8: GivensPair;
}

//net.minecraft.world.gen.blockpredicate.HasSturdyFacePredicate
class HasSturdyFacePredicate extends JObject, BlockPredicate{
 test(structureWorldAccess: StructureWorldAccess,blockPos: BlockPos): boolean;
 test(world: Object,pos: Object): boolean;
 getType(): BlockPredicateType;
}
class Static_HasSturdyFacePredicate {
static method_39912(instance: RecordCodecBuilder_Instance): App;
static method_39914(predicate: HasSturdyFacePredicate): Vec3i;
static method_39913(predicate: HasSturdyFacePredicate): Direction;
static CODEC: Codec;
}

//net.minecraft.unused.packageinfo.PackageInfo6518
interface PackageInfo6518 extends JObject{
}

//net.minecraft.client.realms.dto.RealmsText
class RealmsText extends JObject{
 toText(fallback: Text): Text;
}
class Static_RealmsText {
static fromJson(json: JsonObject): RealmsText;
static TRANSLATION_KEY_KEY: string;
static ARGS_KEY: string;
}

//net.minecraft.world.tick.EmptyTickSchedulers
class EmptyTickSchedulers extends JObject{
}
class Static_EmptyTickSchedulers {
static getClientTickScheduler(): QueryableTickScheduler;
static getReadOnlyTickScheduler(): BasicTickScheduler;
static EMPTY_BASIC_TICK_SCHEDULER: BasicTickScheduler;
static EMPTY_QUERYABLE_TICK_SCHEDULER: QueryableTickScheduler;
}

//net.minecraft.server.dedicated.ServerMBean$Entry
class ServerMBean_Entry extends JObject{
}

//net.minecraft.server.filter.TextStream
interface TextStream extends JObject{
 filterText(text: string): CompletableFuture;
 onConnect(): void;
 filterTexts(texts: List): CompletableFuture;
 onDisconnect(): void;
}
class Static_TextStream {
static UNFILTERED: TextStream;
}

//net.minecraft.screen.ScreenHandler$1


//net.minecraft.structure.NetherFossilGenerator
class NetherFossilGenerator extends JObject{
}
class Static_NetherFossilGenerator {
static addPieces(manager: StructureTemplateManager,holder: StructurePiecesHolder,random: Random,pos: BlockPos): void;
static FOSSILS: Identifier[];
}

//net.minecraft.unused.packageinfo.PackageInfo6515
interface PackageInfo6515 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6512
interface PackageInfo6512 extends JObject{
}

//net.minecraft.client.render.block.entity.BlockEntityRenderer
interface BlockEntityRenderer extends JObject{
 render(entity: BlockEntity,tickDelta: number,matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,light: number,overlay: number): void;
 rendersOutsideBoundingBox(blockEntity: BlockEntity): boolean;
 getRenderDistance(): number;
 isInRenderDistance(blockEntity: BlockEntity,pos: Vec3d): boolean;
}

//net.minecraft.entity.InventoryOwner
interface InventoryOwner extends JObject{
 getInventory(): SimpleInventory;
 readInventory(nbt: NbtCompound): void;
 writeInventory(nbt: NbtCompound): void;
}
class Static_InventoryOwner {
static pickUpItem(entity: MobEntity,inventoryOwner: InventoryOwner,item: ItemEntity): void;
static INVENTORY_KEY: string;
}

//net.minecraft.network.packet.c2s.play.ResourcePackStatusC2SPacket
class ResourcePackStatusC2SPacket extends JObject, Packet{
 apply(serverPlayPacketListener: ServerPlayPacketListener): void;
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
 getStatus(): ResourcePackStatusC2SPacket_Status;
}

//net.minecraft.recipe.ShapedRecipe
class ShapedRecipe extends JObject, CraftingRecipe{
 isEmpty(): boolean;
 matches(recipeInputInventory: RecipeInputInventory,world: World): boolean;
 matches(inventory: Inventory,world: World): boolean;
 getId(): Identifier;
 getWidth(): number;
 getHeight(): number;
 getCategory(): CraftingRecipeCategory;
 getOutput(registryManager: DynamicRegistryManager): ItemStack;
 getGroup(): string;
 craft(inventory: Inventory,registryManager: DynamicRegistryManager): ItemStack;
 craft(recipeInputInventory: RecipeInputInventory,dynamicRegistryManager: DynamicRegistryManager): ItemStack;
 getIngredients(): DefaultedList;
 fits(width: number,height: number): boolean;
 showNotification(): boolean;
 getSerializer(): RecipeSerializer;
}
class Static_ShapedRecipe {
static getItem(json: JsonObject): Item;
static getPattern(json: JsonArray): String[];
static createPatternMatrix(pattern: String[],symbols: Map,width: number,height: number): DefaultedList;
static removePadding(pattern: String[]): String[];
static method_31585(ingredient: Ingredient): boolean;
static findFirstSymbol(line: string): number;
static findLastSymbol(pattern: string): number;
static method_31586(ingredient: Ingredient): boolean;
static readSymbols(json: JsonObject): Map;
static method_17878(string: string): JsonSyntaxException;
static outputFromJson(json: JsonObject): ItemStack;
}

//net.minecraft.world.BlockView
interface BlockView extends JObject, HeightLimitView, FabricBlockView{
 getBlockEntity(pos: BlockPos): BlockEntity;
 getBlockEntity(pos: BlockPos,type: BlockEntityType): Optional;
 getFluidState(pos: BlockPos): FluidState;
 getBlockState(pos: BlockPos): BlockState;
 raycast(context: RaycastContext): BlockHitResult;
 raycast(context: BlockStateRaycastContext): BlockHitResult;
 getStatesInBox(box: Box): Stream;
 raycastBlock(start: Vec3d,end: Vec3d,pos: BlockPos,shape: VoxelShape,state: BlockState): BlockHitResult;
 getMaxLightLevel(): number;
 getLuminance(pos: BlockPos): number;
 getDismountHeight(pos: BlockPos): number;
 getDismountHeight(blockCollisionShape: VoxelShape,belowBlockCollisionShapeGetter: Supplier): number;
}
class Static_BlockView {
static raycast(start: Vec3d,end: Vec3d,context: Object,blockHitFactory: BiFunction,missFactory: Function): Object;
static method_32882(innerContext: BlockStateRaycastContext): BlockHitResult;
static method_17746(innerContext: RaycastContext): BlockHitResult;
}

//net.minecraft.network.message.AcknowledgmentValidator
class AcknowledgmentValidator extends JObject{
 validate(acknowledgment: LastSeenMessageList_Acknowledgment): Optional;
 removeUntil(index: number): boolean;
 getMessageCount(): number;
 addPending(signature: MessageSignatureData): void;
}

//net.minecraft.client.render.model.CubeFace$Corner
class CubeFace_Corner extends JObject{
 xSide: number;
 ySide: number;
 zSide: number;
}

//net.minecraft.client.network.ClientPlayerInteractionManager
class ClientPlayerInteractionManager extends JObject{
 tick(): void;
 getCurrentGameMode(): GameMode;
 createPlayer(world: ClientWorld,statHandler: StatHandler,recipeBook: ClientRecipeBook): ClientPlayerEntity;
 createPlayer(world: ClientWorld,statHandler: StatHandler,recipeBook: ClientRecipeBook,lastSneaking: boolean,lastSprinting: boolean): ClientPlayerEntity;
 setGameModes(gameMode: GameMode,previousGameMode: GameMode): void;
 copyAbilities(player: PlayerEntity): void;
 setGameMode(gameMode: GameMode): void;
 stopUsingItem(player: PlayerEntity): void;
 interactItem(player: PlayerEntity,hand: Hand): ActionResult;
 interactBlock(player: ClientPlayerEntity,hand: Hand,hitResult: BlockHitResult): ActionResult;
 hasStatusBars(): boolean;
 hasExperienceBar(): boolean;
 hasExtendedReach(): boolean;
 getReachDistance(): number;
 getPreviousGameMode(): GameMode;
 interactEntityAtLocation(player: PlayerEntity,entity: Entity,hitResult: EntityHitResult,hand: Hand): ActionResult;
 hasCreativeInventory(): boolean;
 getBlockBreakingProgress(): number;
 cancelBlockBreaking(): void;
 updateBlockBreakingProgress(pos: BlockPos,direction: Direction): boolean;
 hasLimitedAttackSpeed(): boolean;
 breakBlock(pos: BlockPos): boolean;
 attackBlock(pos: BlockPos,direction: Direction): boolean;
 clickRecipe(syncId: number,recipe: Recipe,craftAll: boolean): void;
 clickSlot(syncId: number,slotId: number,button: number,actionType: SlotActionType,player: PlayerEntity): void;
 attackEntity(player: PlayerEntity,target: Entity): void;
 interactEntity(player: PlayerEntity,entity: Entity,hand: Hand): ActionResult;
 clickCreativeStack(stack: ItemStack,slotId: number): void;
 isBreakingBlock(): boolean;
 isFlyingLocked(): boolean;
 pickFromInventory(slot: number): void;
 dropCreativeStack(stack: ItemStack): void;
 hasRidingInventory(): boolean;
 clickButton(syncId: number,buttonId: number): void;
}
class Static_ClientPlayerInteractionManager {
static LOGGER: Logger;
}

//net.minecraft.data.client.SimpleModelSupplier
class SimpleModelSupplier extends JObject, Supplier{
 get(): JsonElement;
 get(): Object;
}

//net.minecraft.loot.function.ConditionalLootFunction$Serializer
class ConditionalLootFunction_Serializer extends JObject, JsonSerializer{
 fromJson(json: JsonObject,context: JsonDeserializationContext): Object;
 fromJson(json: JsonObject,context: JsonDeserializationContext,conditions: LootCondition[]): ConditionalLootFunction;
 fromJson(jsonObject: JsonObject,jsonDeserializationContext: JsonDeserializationContext): ConditionalLootFunction;
 toJson(jsonObject: JsonObject,conditionalLootFunction: ConditionalLootFunction,jsonSerializationContext: JsonSerializationContext): void;
 toJson(json: JsonObject,object: Object,context: JsonSerializationContext): void;
}

//net.minecraft.client.world.ClientEntityManager$Listener
class ClientEntityManager_Listener extends JObject, EntityChangeListener{
 remove(reason: Entity_RemovalReason): void;
 updateEntityPosition(): void;
}

//net.minecraft.datafixer.schema.Schema1451v6$1


//net.minecraft.datafixer.schema.Schema1451v6$2


//net.minecraft.network.packet.s2c.play.EntitiesDestroyS2CPacket
class EntitiesDestroyS2CPacket extends JObject, Packet{
 apply(clientPlayPacketListener: ClientPlayPacketListener): void;
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
 getEntityIds(): IntList;
}

//net.minecraft.client.model.ModelPartData
class ModelPartData extends JObject{
 getChild(name: string): ModelPartData;
 addChild(name: string,builder: ModelPartBuilder,rotationData: ModelTransform): ModelPartData;
 createPart(textureWidth: number,textureHeight: number): ModelPart;
}
class Static_ModelPartData {
static method_32113(i: number,j: number,modelCuboidData: ModelCuboidData): ModelPart_Cuboid;
static method_32115(modelPart: ModelPart,modelPart2: ModelPart): ModelPart;
static method_32114(i: number,j: number,entry: Map_Entry): ModelPart;
}

//net.minecraft.util.math.random.CheckedRandom$Splitter
class CheckedRandom_Splitter extends JObject, RandomSplitter{
 split(seed: string): Random;
 split(x: number,y: number,z: number): Random;
 addDebugInfo(info: StringBuilder): void;
}

//net.minecraft.world.chunk.light.LightingView
interface LightingView extends JObject{
 checkBlock(pos: BlockPos): void;
 setSectionStatus(pos: ChunkSectionPos,notReady: boolean): void;
 setSectionStatus(pos: BlockPos,notReady: boolean): void;
 propagateLight(chunkPos: ChunkPos): void;
 hasUpdates(): boolean;
 setColumnEnabled(pos: ChunkPos,retainData: boolean): void;
 doLightUpdates(): number;
}

//net.minecraft.unused.packageinfo.PackageInfo6520
interface PackageInfo6520 extends JObject{
}

//net.minecraft.client.network.ClientPlayNetworkHandler$1


//net.minecraft.command.argument.OperationArgumentType$IntOperator
interface OperationArgumentType_IntOperator extends JObject, OperationArgumentType_Operation{
 apply(a: number,b: number): number;
 apply(scoreboardPlayerScore: ScoreboardPlayerScore,scoreboardPlayerScore2: ScoreboardPlayerScore): void;
}

//net.minecraft.structure.StructurePiecesCollector
class StructurePiecesCollector extends JObject, StructurePiecesHolder{
 clear(): void;
 isEmpty(): boolean;
 toList(): StructurePiecesList;
 shift(y: number): void;
 getIntersecting(box: BlockBox): StructurePiece;
 shiftInto(random: Random,baseY: number,topY: number): void;
 shiftInto(topY: number,bottomY: number,random: Random,topPenalty: number): number;
 addPiece(piece: StructurePiece): void;
 getBoundingBox(): BlockBox;
}

//net.minecraft.entity.projectile.ProjectileUtil
class ProjectileUtil extends JObject{
}
class Static_ProjectileUtil {
static getCollision(pos: Vec3d,entity: Entity,predicate: Predicate,velocity: Vec3d,world: World): HitResult;
static getCollision(entity: Entity,predicate: Predicate,range: number): HitResult;
static getCollision(entity: Entity,predicate: Predicate): HitResult;
static getEntityCollision(world: World,entity: Entity,min: Vec3d,max: Vec3d,box: Box,predicate: Predicate,margin: number): EntityHitResult;
static getEntityCollision(world: World,entity: Entity,min: Vec3d,max: Vec3d,box: Box,predicate: Predicate): EntityHitResult;
static createArrowProjectile(entity: LivingEntity,stack: ItemStack,damageModifier: number): PersistentProjectileEntity;
static setRotationFromVelocity(entity: Entity,delta: number): void;
static getHandPossiblyHolding(entity: LivingEntity,item: Item): Hand;
static raycast(entity: Entity,min: Vec3d,max: Vec3d,box: Box,predicate: Predicate,d: number): EntityHitResult;
}

//net.minecraft.item.ItemStackSet
class ItemStackSet extends JObject{
}
class Static_ItemStackSet {
static create(): Set;
static getHashCode(stack: ItemStack): number;
static HASH_STRATEGY: Hash_Strategy;
}

//net.minecraft.data.DataGenerator$Pack
class DataGenerator_Pack extends JObject{
 addProvider(factory: DataProvider_Factory): DataProvider;
}

//net.minecraft.client.font.SpaceFont
class SpaceFont extends JObject, Font{
 getGlyph(codePoint: number): Glyph;
 getProvidedGlyphs(): IntSet;
}
class Static_SpaceFont {
static method_41714(float_: Float): number;
}

//net.minecraft.block.entity.AbstractFurnaceBlockEntity$1


//net.minecraft.world.chunk.light.PendingUpdateQueue
class PendingUpdateQueue extends JObject{
 remove(id: long,level: number,levelCount: number): void;
 isEmpty(): boolean;
 enqueue(id: long,level: number): void;
 dequeue(): long;
}

//net.minecraft.client.render.block.BlockRenderManager$1


//net.minecraft.command.BlockDataObject$1


//net.minecraft.resource.ResourcePackSource$1


//net.minecraft.util.thread.MessageListener$1


//net.minecraft.resource.fs.ResourcePath
class ResourcePath extends JObject, Path{
 getName(i: number): ResourcePath;
 getName(index: number): Path;
 equals(o: Object): boolean;
 toString(): string;
 hashCode(): number;
 compareTo(path: Path): number;
 compareTo(other: Object): number;
 startsWith(other: Path): boolean;
 endsWith(other: Path): boolean;
 register(watcher: WatchService,events: WatchEvent_Kind,modifiers: WatchEvent_Modifier): WatchKey;
 isAbsolute(): boolean;
 resolve(other: Path): Path;
 resolve(path: Path): ResourcePath;
 getParent(): ResourcePath;
 getParent(): Path;
 getRoot(): Path;
 getRoot(): ResourcePath;
 normalize(): ResourcePath;
 normalize(): Path;
 getAttributes(): BasicFileAttributes;
 toRealPath(options: LinkOption[]): Path;
 toRealPath(linkOptions: LinkOption[]): ResourcePath;
 toFile(): File;
 getFileName(): Path;
 getFileName(): ResourcePath;
 getFileSystem(): ResourceFileSystem;
 getFileSystem(): FileSystem;
 toPath(): Path;
 relativize(path: Path): ResourcePath;
 relativize(other: Path): Path;
 getNameCount(): number;
 subpath(i: number,j: number): ResourcePath;
 subpath(beginIndex: number,endIndex: number): Path;
 toUri(): URI;
 toAbsolutePath(): Path;
 toAbsolutePath(): ResourcePath;
 isReadable(): boolean;
 getAttributeView(): BasicFileAttributeView;
 toDirectory(): ResourceFile_Directory;
}
class Static_ResourcePath {
static isSpecial(file: ResourceFile): boolean;
static DIRECTORY_ATTRIBUTES: BasicFileAttributes;
static FILE_ATTRIBUTES: BasicFileAttributes;
static COMPARATOR: Comparator;
}

//net.minecraft.client.render.model.json.ModelElement$1


//net.minecraft.world.tick.BasicTickScheduler
interface BasicTickScheduler extends JObject, TickScheduler{
}

//net.minecraft.data.validate.StructureValidatorProvider
class StructureValidatorProvider extends JObject, SnbtProvider_Tweaker{
 write(name: string,nbt: NbtCompound): NbtCompound;
}
class Static_StructureValidatorProvider {
static update(name: string,nbt: NbtCompound): NbtCompound;
static LOGGER: Logger;
}

//net.minecraft.client.gui.screen.AccessibilityOnboardingButtons
class AccessibilityOnboardingButtons extends JObject{
}
class Static_AccessibilityOnboardingButtons {
static createLanguageButton(action: ButtonWidget_PressAction): IconButtonWidget;
static createAccessibilityButton(action: ButtonWidget_PressAction): IconButtonWidget;
}

//net.minecraft.client.sound.MusicType
class MusicType extends JObject{
}
class Static_MusicType {
static createIngameMusic(sound: RegistryEntry): MusicSound;
static MENU_MIN_DELAY: number;
static MENU_MAX_DELAY: number;
static GAME_MIN_DELAY: number;
static GAME_MAX_DELAY: number;
static END_MIN_DELAY: number;
static MENU: MusicSound;
static CREATIVE: MusicSound;
static CREDITS: MusicSound;
static DRAGON: MusicSound;
static END: MusicSound;
static UNDERWATER: MusicSound;
static GAME: MusicSound;
}

//net.minecraft.block.entity.BlockEntityTicker
interface BlockEntityTicker extends JObject{
 tick(world: World,pos: BlockPos,state: BlockState,blockEntity: BlockEntity): void;
}

//net.minecraft.entity.ai.brain.ScheduleRuleEntry
class ScheduleRuleEntry extends JObject{
 getPriority(): number;
 getStartTime(): number;
}

//net.minecraft.client.gui.hud.spectator.SpectatorMenu$1


//net.minecraft.command.argument.LookingPosArgument
class LookingPosArgument extends JObject, PosArgument{
 equals(o: Object): boolean;
 hashCode(): number;
 toAbsolutePos(source: ServerCommandSource): Vec3d;
 isZRelative(): boolean;
 isXRelative(): boolean;
 isYRelative(): boolean;
 toAbsoluteRotation(source: ServerCommandSource): Vec2f;
}
class Static_LookingPosArgument {
static parse(reader: StringReader): LookingPosArgument;
static readCoordinate(reader: StringReader,startingCursorPos: number): number;
static CARET: char;
}

//net.minecraft.data.server.loottable.LootTableProvider
class LootTableProvider extends JObject, DataProvider{
 getName(): string;
 run(writer: DataWriter): CompletableFuture;
}
class Static_LootTableProvider {
static method_10411(lootTableReporter: LootTableReporter,id: Identifier,table: LootTable): void;
static method_46577(i: number): CompletableFuture[];
static method_10412(map: Map,map2: Map,lootTypeGenerator: LootTableProvider_LootTypeGenerator,identifier: Identifier,builder: LootTable_Builder): void;
static method_10410(map: Map,map2: Map,lootTypeGenerator: LootTableProvider_LootTypeGenerator): void;
static method_10407(name: string,message: string): void;
static LOGGER: Logger;
}

//net.minecraft.client.render.FpsSmoother
class FpsSmoother extends JObject{
 getTargetUsedTime(time: long): long;
}

//net.minecraft.world.gen.feature.OceanPlacedFeatures
class OceanPlacedFeatures extends JObject{
}
class Static_OceanPlacedFeatures {
static bootstrap(featureRegisterable: Registerable): void;
static seagrassModifiers(count: number): List;
static SEAGRASS_WARM: RegistryKey;
static SEAGRASS_NORMAL: RegistryKey;
static SEAGRASS_COLD: RegistryKey;
static SEAGRASS_RIVER: RegistryKey;
static SEAGRASS_SWAMP: RegistryKey;
static SEAGRASS_DEEP_WARM: RegistryKey;
static SEAGRASS_DEEP: RegistryKey;
static SEAGRASS_DEEP_COLD: RegistryKey;
static SEAGRASS_SIMPLE: RegistryKey;
static SEA_PICKLE: RegistryKey;
static KELP_COLD: RegistryKey;
static KELP_WARM: RegistryKey;
static WARM_OCEAN_VEGETATION: RegistryKey;
}

//net.minecraft.client.util.telemetry.TelemetryEventType
class TelemetryEventType extends JObject{
 toString(): string;
 getProperties(): List;
 getId(): string;
 getDescription(): MutableText;
 hasProperty(property: TelemetryEventProperty): boolean;
 createEvent(session: TelemetrySession,properties: PropertyMap): TelemetryEvent;
 isOptional(): boolean;
 getTitle(): MutableText;
 getCodec(): Codec;
}
class Static_TelemetryEventType {
static builder(id: string,sentEventId: string): TelemetryEventType_Builder;
static getTypes(): List;
static method_47727(id: string): DataResult;
static method_49636(string: string): string;
static TYPES: Map;
static CODEC: Codec;
static BASIC_PROPERTIES: List;
static REQUIRED_PROPERTIES: List;
static WORLD_LOADED: TelemetryEventType;
static PERFORMANCE_METRICS: TelemetryEventType;
static WORLD_LOAD_TIMES: TelemetryEventType;
static WORLD_UNLOADED: TelemetryEventType;
static ADVANCEMENT_MADE: TelemetryEventType;
static GAME_LOAD_TIMES: TelemetryEventType;
}

//net.minecraft.loot.entry.LeafEntry$Factory
interface LeafEntry_Factory extends JObject{
 build(weight: number,quality: number,conditions: LootCondition[],functions: LootFunction[]): LeafEntry;
}

//net.minecraft.command.argument.serialize.DoubleArgumentSerializer
class DoubleArgumentSerializer extends JObject, ArgumentSerializer{
 getArgumentTypeProperties(argumentType: ArgumentType): ArgumentSerializer_ArgumentTypeProperties;
 getArgumentTypeProperties(doubleArgumentType: DoubleArgumentType): DoubleArgumentSerializer_Properties;
 fromPacket(buf: PacketByteBuf): ArgumentSerializer_ArgumentTypeProperties;
 fromPacket(packetByteBuf: PacketByteBuf): DoubleArgumentSerializer_Properties;
 writePacket(properties: ArgumentSerializer_ArgumentTypeProperties,buf: PacketByteBuf): void;
 writePacket(properties: DoubleArgumentSerializer_Properties,packetByteBuf: PacketByteBuf): void;
 writeJson(properties: DoubleArgumentSerializer_Properties,jsonObject: JsonObject): void;
 writeJson(properties: ArgumentSerializer_ArgumentTypeProperties,json: JsonObject): void;
}

//net.minecraft.util.crash.CrashCallable
interface CrashCallable extends JObject, Callable{
}

//net.minecraft.block.LichenGrower$GrowChecker
interface LichenGrower_GrowChecker extends JObject{
 place(world: WorldAccess,growPos: LichenGrower_GrowPos,state: BlockState,markForPostProcessing: boolean): boolean;
 getStateWithDirection(state: BlockState,world: BlockView,pos: BlockPos,direction: Direction): BlockState;
 getGrowTypes(): LichenGrower_GrowType;
 canGrow(state: BlockState,direction: Direction): boolean;
 canGrow(state: BlockState): boolean;
 canGrow(world: BlockView,pos: BlockPos,growPos: LichenGrower_GrowPos): boolean;
 hasDirection(state: BlockState,direction: Direction): boolean;
}

//net.minecraft.util.shape.VoxelShapes$BoxConsumer
interface VoxelShapes_BoxConsumer extends JObject{
 consume(minX: number,minY: number,minZ: number,maxX: number,maxY: number,maxZ: number): void;
}

//net.minecraft.client.report.ContextMessageCollector$ContextMessage
class ContextMessageCollector_ContextMessage extends JObject{
}

//net.minecraft.network.NetworkState$PacketHandler
class NetworkState_PacketHandler extends JObject{
 register(type: Class,packetFactory: Function): NetworkState_PacketHandler;
 getId(packet: Class): number;
 getBundler(): PacketBundleHandler;
 createPacket(id: number,buf: PacketByteBuf): Packet;
 forEachPacketType(consumer: Consumer): void;
 registerBundlePacket(bundlePacketType: Class,bundleFunction: Function): NetworkState_PacketHandler;
}
class Static_NetworkState_PacketHandler {
static method_48315(bundleSplitterPacket: BundleSplitterPacket,buf: PacketByteBuf): BundleSplitterPacket;
static method_48316(type: Class): boolean;
static method_22311(map: Object2IntOpenHashMap): void;
static LOGGER: Logger;
}

//net.minecraft.unused.packageinfo.PackageInfo7804
interface PackageInfo7804 extends JObject{
}

//net.minecraft.loot.condition.BlockStatePropertyLootCondition$Builder
class BlockStatePropertyLootCondition_Builder extends JObject, LootCondition_Builder{
 properties(builder: StatePredicate_Builder): BlockStatePropertyLootCondition_Builder;
 build(): LootCondition;
}

//net.minecraft.client.texture.Sprite$1


//net.minecraft.util.profiler.TickTimeTracker
class TickTimeTracker extends JObject{
 isActive(): boolean;
 getResult(): ProfileResult;
 enable(): void;
 disable(): void;
 getProfiler(): Profiler;
}

//net.minecraft.loot.condition.RandomChanceLootCondition$Serializer
class RandomChanceLootCondition_Serializer extends JObject, JsonSerializer{
 fromJson(json: JsonObject,context: JsonDeserializationContext): Object;
 fromJson(jsonObject: JsonObject,jsonDeserializationContext: JsonDeserializationContext): RandomChanceLootCondition;
 toJson(jsonObject: JsonObject,randomChanceLootCondition: RandomChanceLootCondition,jsonSerializationContext: JsonSerializationContext): void;
 toJson(json: JsonObject,object: Object,context: JsonSerializationContext): void;
}

//net.minecraft.network.packet.s2c.play.SynchronizeRecipesS2CPacket
class SynchronizeRecipesS2CPacket extends JObject, Packet{
 apply(clientPlayPacketListener: ClientPlayPacketListener): void;
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
 getRecipes(): List;
}
class Static_SynchronizeRecipesS2CPacket {
static method_17975(identifier: Identifier): IllegalArgumentException;
static writeRecipe(buf: PacketByteBuf,recipe: Recipe): void;
static readRecipe(buf: PacketByteBuf): Recipe;
}

//net.minecraft.client.gui.screen.ingame.LecternScreen$1


//net.minecraft.entity.ai.NoPenaltyTargeting
class NoPenaltyTargeting extends JObject{
}
class Static_NoPenaltyTargeting {
static find(entity: PathAwareEntity,horizontalRange: number,verticalRange: number): Vec3d;
static tryMake(entity: PathAwareEntity,horizontalRange: number,posTargetInRange: boolean,fuzz: BlockPos): BlockPos;
static findTo(entity: PathAwareEntity,horizontalRange: number,verticalRange: number,end: Vec3d,angleRange: number): Vec3d;
static method_31514(pathAwareEntity: PathAwareEntity,i: number,j: number,vec3d: Vec3d,bl: boolean): BlockPos;
static method_31515(pathAwareEntity: PathAwareEntity,i: number,j: number,bl: boolean): BlockPos;
static method_31513(pathAwareEntity: PathAwareEntity,i: number,j: number,vec3d: Vec3d,d: number,bl: boolean): BlockPos;
static findFrom(entity: PathAwareEntity,horizontalRange: number,verticalRange: number,start: Vec3d): Vec3d;
}

//net.minecraft.client.render.entity.TropicalFishEntityRenderer$1


//net.minecraft.nbt.visitor.NbtOrderedStringFormatter
class NbtOrderedStringFormatter extends JObject, NbtElementVisitor{
 apply(element: NbtElement): string;
 visitEnd(element: NbtEnd): void;
 joinPath(): string;
 visitInt(element: NbtInt): void;
 visitLong(element: NbtLong): void;
 visitString(element: NbtString): void;
 visitDouble(element: NbtDouble): void;
 visitShort(element: NbtShort): void;
 visitFloat(element: NbtFloat): void;
 visitByte(element: NbtByte): void;
 visitByteArray(element: NbtByteArray): void;
 visitLongArray(element: NbtLongArray): void;
 visitCompound(compound: NbtCompound): void;
 visitIntArray(element: NbtIntArray): void;
 visitList(element: NbtList): void;
}
class Static_NbtOrderedStringFormatter {
static method_32282(map: HashMap): void;
static escapeName(name: string): string;
static ENTRY_ORDER_OVERRIDES: Map;
static IGNORED_PATHS: Set;
static SIMPLE_NAME: Pattern;
static KEY_VALUE_SEPARATOR: string;
static ENTRY_SEPARATOR: string;
static SQUARE_OPEN_BRACKET: string;
static SQUARE_CLOSE_BRACKET: string;
static SEMICOLON: string;
static SPACE: string;
static CURLY_OPEN_BRACKET: string;
static CURLY_CLOSE_BRACKET: string;
static NEW_LINE: string;
}

//net.minecraft.client.particle.ParticleManager
class ParticleManager extends JObject, ResourceReloader{
 reload(synchronizer: ResourceReloader_Synchronizer,manager: ResourceManager,prepareProfiler: Profiler,applyProfiler: Profiler,prepareExecutor: Executor,applyExecutor: Executor): CompletableFuture;
 tick(): void;
 setWorld(world: ClientWorld): void;
 clearAtlas(): void;
 renderParticles(matrices: MatrixStack,vertexConsumers: VertexConsumerProvider_Immediate,lightmapTextureManager: LightmapTextureManager,camera: Camera,tickDelta: number): void;
 addParticle(parameters: ParticleEffect,x: number,y: number,z: number,velocityX: number,velocityY: number,velocityZ: number): Particle;
 addParticle(particle: Particle): void;
 addEmitter(entity: Entity,parameters: ParticleEffect): void;
 addEmitter(entity: Entity,parameters: ParticleEffect,maxAge: number): void;
 getDebugString(): string;
 addBlockBreakParticles(pos: BlockPos,state: BlockState): void;
 addBlockBreakingParticles(pos: BlockPos,direction: Direction): void;
}
class Static_ParticleManager {
static method_45771(resourceManager: ResourceManager): Map;
static method_49915(spriteProvider: SpriteProvider): ParticleFactory;
static method_49336(blockLeakParticleFactory: ParticleFactory_BlockLeakParticleFactory,spriteBillboardParticle: SpriteProvider): ParticleFactory;
static method_18125(sheet: ParticleTextureSheet): Queue;
static method_49337(blockLeakParticleFactory: ParticleFactory_BlockLeakParticleFactory,spriteProvider: SpriteProvider,type: ParticleEffect,world: ClientWorld,x: number,y: number,z: number,velocityX: number,velocityY: number,velocityZ: number): Particle;
static method_49916(spriteProvider: SpriteProvider,parameters: DefaultParticleType,world: ClientWorld,x: number,y: number,z: number,velocityX: number,velocityY: number,velocityZ: number): Particle;
static LOGGER: Logger;
static FINDER: ResourceFinder;
static PARTICLES_PATH: Identifier;
static MAX_PARTICLE_COUNT: number;
static PARTICLE_TEXTURE_SHEETS: List;
}

//net.minecraft.client.render.debug.GoalSelectorDebugRenderer
class GoalSelectorDebugRenderer extends JObject, DebugRenderer_Renderer{
 clear(): void;
 render(matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,cameraX: number,cameraY: number,cameraZ: number): void;
 setGoalSelectorList(index: number,selectors: List): void;
 removeGoalSelectorList(index: number): void;
}
class Static_GoalSelectorDebugRenderer {
static method_23116(blockPos: BlockPos,matrixStack: MatrixStack,vertexConsumerProvider: VertexConsumerProvider,index: Integer,selectors: List): void;
static RANGE: number;
}

//net.minecraft.world.gen.feature.EndGatewayFeatureConfig
class EndGatewayFeatureConfig extends JObject, FeatureConfig{
 isExact(): boolean;
 getExitPos(): Optional;
}
class Static_EndGatewayFeatureConfig {
static createConfig(): EndGatewayFeatureConfig;
static createConfig(exitPortalPosition: BlockPos,exitsAtSpawn: boolean): EndGatewayFeatureConfig;
static method_28718(config: EndGatewayFeatureConfig): Optional;
static method_28717(instance: RecordCodecBuilder_Instance): App;
static method_28716(config: EndGatewayFeatureConfig): Boolean;
static CODEC: Codec;
}

//net.minecraft.text.TranslatableTextContent
class TranslatableTextContent extends JObject, TextContent{
 equals(o: Object): boolean;
 toString(): string;
 hashCode(): number;
 getKey(): string;
 parse(source: ServerCommandSource,sender: Entity,depth: number): MutableText;
 visit(visitor: StringVisitable_StyledVisitor,style: Style): Optional;
 visit(visitor: StringVisitable_Visitor): Optional;
 getArgs(): Object[];
 getFallback(): string;
 getArg(index: number): StringVisitable;
}
class Static_TranslatableTextContent {
static EMPTY_ARGUMENTS: Object[];
static LITERAL_PERCENT_SIGN: StringVisitable;
static NULL_ARGUMENT: StringVisitable;
static ARG_FORMAT: Pattern;
}

//net.minecraft.particle.ParticleType
class ParticleType extends JObject{
 getParametersFactory(): ParticleEffect_Factory;
 shouldAlwaysSpawn(): boolean;
 getCodec(): Codec;
}

//net.minecraft.block.LichenGrower
class LichenGrower extends JObject{
 grow(state: BlockState,world: WorldAccess,pos: BlockPos,oldDirection: Direction,newDirection: Direction,markForPostProcessing: boolean): Optional;
 grow(state: BlockState,world: WorldAccess,pos: BlockPos,direction: Direction,random: Random,markForPostProcessing: boolean): Optional;
 grow(state: BlockState,world: WorldAccess,pos: BlockPos,markForPostProcessing: boolean): long;
 grow(state: BlockState,world: WorldAccess,pos: BlockPos,random: Random): Optional;
 place(world: WorldAccess,pos: LichenGrower_GrowPos,markForPostProcessing: boolean): Optional;
 getGrowPos(state: BlockState,world: BlockView,pos: BlockPos,oldDirection: Direction,newDirection: Direction,predicate: LichenGrower_GrowPosPredicate): Optional;
 canGrow(state: BlockState,world: BlockView,pos: BlockPos,direction: Direction): boolean;
}
class Static_LichenGrower {
static GROW_TYPES: LichenGrower_GrowType;
}

//net.minecraft.client.util.ChatMessages
class ChatMessages extends JObject{
}
class Static_ChatMessages {
static method_30886(list: List,text: StringVisitable,lastLineWrapped: Boolean): void;
static method_27536(textCollector: TextCollector,style: Style,message: string): Optional;
static breakRenderedChatMessageLines(message: StringVisitable,width: number,textRenderer: TextRenderer): List;
static getRenderedChatMessage(message: string): string;
static SPACES: OrderedText;
}

//net.minecraft.client.report.log.ChatLog
class ChatLog extends JObject{
 add(entry: ChatLogEntry): void;
 get(index: number): ChatLogEntry;
 getMinIndex(): number;
 getMaxIndex(): number;
}
class Static_ChatLog {
static createCodec(maxSize: number): Codec;
static method_46535(i: number,entries: List): DataResult;
static method_46534(i: number,currentIndex: number): ChatLogEntry[];
static method_49632(i: number,j: number): string;
}

//net.minecraft.util.logging.LogFileCompressor$LogFileIterable
class LogFileCompressor_LogFileIterable extends JObject, Iterable{
 iterator(): Iterator;
 stream(): Stream;
 toIdSet(): Set;
 removeExpired(currentDate: LocalDate,retentionDays: number): LogFileCompressor_LogFileIterable;
 compressAll(): LogFileCompressor_LogFileIterable;
}
class Static_LogFileCompressor_LogFileIterable {
static method_47561(i: number,localDate: LocalDate,log: LogFileCompressor_LogFile): boolean;
}

//net.minecraft.loot.provider.nbt.StorageLootNbtProvider
class StorageLootNbtProvider extends JObject, LootNbtProvider{
 getType(): LootNbtProviderType;
 getRequiredParameters(): Set;
 getNbt(context: LootContext): NbtElement;
}

//net.minecraft.server.command.AdvancementCommand
class AdvancementCommand extends JObject{
}
class Static_AdvancementCommand {
static register(dispatcher: CommandDispatcher): void;
static select(advancement: Advancement,selection: AdvancementCommand_Selection): List;
static method_51896(operation: AdvancementCommand_Operation,collection: Collection,collection2: Collection): Text;
static method_12994(context: CommandContext): number;
static method_12983(context: CommandContext): number;
static executeAdvancement(source: ServerCommandSource,targets: Collection,operation: AdvancementCommand_Operation,selection: Collection): number;
static method_12991(context: CommandContext,builder: SuggestionsBuilder): CompletableFuture;
static method_12978(context: CommandContext): number;
static method_12995(context: CommandContext): number;
static method_12992(context: CommandContext,builder: SuggestionsBuilder): CompletableFuture;
static method_12982(context: CommandContext): number;
static method_12985(context: CommandContext): number;
static method_12979(context: CommandContext): number;
static method_12997(context: CommandContext): number;
static method_12993(context: CommandContext): number;
static method_12984(source: ServerCommandSource): boolean;
static method_12998(context: CommandContext): number;
static method_12986(context: CommandContext): number;
static method_12989(context: CommandContext): number;
static method_51900(operation: AdvancementCommand_Operation,collection: Collection,collection2: Collection): Text;
static method_51897(operation: AdvancementCommand_Operation,string: string,advancement: Advancement,collection: Collection): Text;
static method_12987(context: CommandContext,builder: SuggestionsBuilder): CompletableFuture;
static method_51895(operation: AdvancementCommand_Operation,string: string,advancement: Advancement,collection: Collection): Text;
static executeCriterion(source: ServerCommandSource,targets: Collection,operation: AdvancementCommand_Operation,advancement: Advancement,criterion: string): number;
static method_51898(operation: AdvancementCommand_Operation,collection: Collection,collection2: Collection): Text;
static method_51899(operation: AdvancementCommand_Operation,collection: Collection,collection2: Collection): Text;
static addChildrenRecursivelyToList(parent: Advancement,childList: List): void;
static SUGGESTION_PROVIDER: SuggestionProvider;
}

//net.minecraft.client.render.BufferRenderer
class BufferRenderer extends JObject{
}
class Static_BufferRenderer {
static reset(): void;
static bind(vertexFormat: VertexFormat): VertexBuffer;
static bind(vertexBuffer: VertexBuffer): void;
static upload(buffer: BufferBuilder_BuiltBuffer): VertexBuffer;
static method_43440(builtBuffer: BufferBuilder_BuiltBuffer): void;
static drawWithGlobalProgram(buffer: BufferBuilder_BuiltBuffer): void;
static resetCurrentVertexBuffer(): void;
static drawWithGlobalProgramInternal(buffer: BufferBuilder_BuiltBuffer): void;
static draw(buffer: BufferBuilder_BuiltBuffer): void;
static currentVertexBuffer: VertexBuffer;
}

//net.minecraft.block.AbstractBlock$Settings
class AbstractBlock_Settings extends JObject{
 offset(offsetType: AbstractBlock_OffsetType): AbstractBlock_Settings;
 requires(features: FeatureFlag[]): AbstractBlock_Settings;
 air(): AbstractBlock_Settings;
 resistance(resistance: number): AbstractBlock_Settings;
 hardness(hardness: number): AbstractBlock_Settings;
 burnable(): AbstractBlock_Settings;
 pistonBehavior(pistonBehavior: PistonBehavior): AbstractBlock_Settings;
 sounds(soundGroup: BlockSoundGroup): AbstractBlock_Settings;
 nonOpaque(): AbstractBlock_Settings;
 mapColor(color: DyeColor): AbstractBlock_Settings;
 mapColor(mapColorProvider: Function): AbstractBlock_Settings;
 mapColor(color: MapColor): AbstractBlock_Settings;
 instrument(instrument: Instrument): AbstractBlock_Settings;
 dynamicBounds(): AbstractBlock_Settings;
 noCollision(): AbstractBlock_Settings;
 blockVision(predicate: AbstractBlock_ContextPredicate): AbstractBlock_Settings;
 suffocates(predicate: AbstractBlock_ContextPredicate): AbstractBlock_Settings;
 allowsSpawning(predicate: AbstractBlock_TypedContextPredicate): AbstractBlock_Settings;
 ticksRandomly(): AbstractBlock_Settings;
 solidBlock(predicate: AbstractBlock_ContextPredicate): AbstractBlock_Settings;
 breakInstantly(): AbstractBlock_Settings;
 luminance(luminance: ToIntFunction): AbstractBlock_Settings;
 requiresTool(): AbstractBlock_Settings;
 dropsNothing(): AbstractBlock_Settings;
 liquid(): AbstractBlock_Settings;
 dropsLike(source: Block): AbstractBlock_Settings;
 postProcess(predicate: AbstractBlock_ContextPredicate): AbstractBlock_Settings;
 notSolid(): AbstractBlock_Settings;
 slipperiness(slipperiness: number): AbstractBlock_Settings;
 velocityMultiplier(velocityMultiplier: number): AbstractBlock_Settings;
 strength(hardness: number,resistance: number): AbstractBlock_Settings;
 strength(strength: number): AbstractBlock_Settings;
 noBlockBreakParticles(): AbstractBlock_Settings;
 jumpVelocityMultiplier(jumpVelocityMultiplier: number): AbstractBlock_Settings;
 replaceable(): AbstractBlock_Settings;
 solid(): AbstractBlock_Settings;
 emissiveLighting(predicate: AbstractBlock_ContextPredicate): AbstractBlock_Settings;
}
class Static_AbstractBlock_Settings {
static copy(block: AbstractBlock): AbstractBlock_Settings;
static create(): AbstractBlock_Settings;
static method_51521(state: BlockState): MapColor;
static method_26237(state: BlockState): number;
static method_26239(state: BlockState,world: BlockView,pos: BlockPos,type: EntityType): boolean;
static method_26246(state: BlockState,world: BlockView,pos: BlockPos): boolean;
static method_26248(state: BlockState,world: BlockView,pos: BlockPos): boolean;
static method_26244(state: BlockState,world: BlockView,pos: BlockPos): boolean;
static method_49231(state: BlockState,world: BlockView,pos: BlockPos): Vec3d;
static method_26238(state: BlockState,world: BlockView,pos: BlockPos): boolean;
static method_51519(mapColor: MapColor,state: BlockState): MapColor;
static method_49230(state: BlockState,world: BlockView,pos: BlockPos): Vec3d;
static method_51518(dyeColor: DyeColor,state: BlockState): MapColor;
}

//net.minecraft.loot.condition.EntityPropertiesLootCondition
class EntityPropertiesLootCondition extends JObject, LootCondition{
 test(lootContext: LootContext): boolean;
 test(context: Object): boolean;
 getType(): LootConditionType;
 getRequiredParameters(): Set;
}
class Static_EntityPropertiesLootCondition {
static builder(entity: LootContext_EntityTarget,predicateBuilder: EntityPredicate_Builder): LootCondition_Builder;
static builder(entity: LootContext_EntityTarget,predicate: EntityPredicate): LootCondition_Builder;
static create(entity: LootContext_EntityTarget): LootCondition_Builder;
static method_916(builder: EntityPredicate_Builder,entityTarget: LootContext_EntityTarget): LootCondition;
static method_27864(entityPredicate: EntityPredicate,entityTarget: LootContext_EntityTarget): LootCondition;
}

//net.minecraft.loot.condition.LootConditionConsumingBuilder
interface LootConditionConsumingBuilder extends JObject{
 conditionally(condition: LootCondition_Builder): LootConditionConsumingBuilder;
 conditionally(conditions: Iterable,toBuilderFunction: Function): LootConditionConsumingBuilder;
 getThisConditionConsumingBuilder(): LootConditionConsumingBuilder;
}

//net.minecraft.client.gui.screen.recipebook.RecipeBookResults
class RecipeBookResults extends JObject{
 initialize(client: MinecraftClient,parentLeft: number,parentTop: number): void;
 hideAlternates(): void;
 setGui(widget: RecipeBookWidget): void;
 setResults(resultCollections: List,resetCurrentPage: boolean): void;
 onRecipesDisplayed(recipes: List): void;
 getRecipeBook(): RecipeBook;
 getLastClickedRecipe(): Recipe;
 getLastClickedResults(): RecipeResultCollection;
 drawTooltip(context: DrawContext,x: number,y: number): void;
 draw(context: DrawContext,x: number,y: number,mouseX: number,mouseY: number,delta: number): void;
 getClient(): MinecraftClient;
 mouseClicked(mouseX: number,mouseY: number,button: number,areaLeft: number,areaTop: number,areaWidth: number,areaHeight: number): boolean;
}
class Static_RecipeBookResults {
static field_32411: number;
}

//net.minecraft.network.packet.c2s.play.AdvancementTabC2SPacket
class AdvancementTabC2SPacket extends JObject, Packet{
 apply(serverPlayPacketListener: ServerPlayPacketListener): void;
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
 getAction(): AdvancementTabC2SPacket_Action;
 getTabToOpen(): Identifier;
}
class Static_AdvancementTabC2SPacket {
static close(): AdvancementTabC2SPacket;
static open(advancement: Advancement): AdvancementTabC2SPacket;
}

//net.minecraft.client.realms.util.TextRenderingUtils$LineSegment
class TextRenderingUtils_LineSegment extends JObject{
 equals(o: Object): boolean;
 toString(): string;
 hashCode(): number;
 isLink(): boolean;
 renderedText(): string;
 getLinkUrl(): string;
}
class Static_TextRenderingUtils_LineSegment {
static text(fullText: string): TextRenderingUtils_LineSegment;
static link(linkTitle: string,linkUrl: string): TextRenderingUtils_LineSegment;
}

//net.minecraft.entity.ai.brain.task.TaskTriggerer$Trigger$1


//net.minecraft.client.gui.screen.advancement.AdvancementTab
class AdvancementTab extends JObject{
 getRoot(): Advancement;
 getType(): AdvancementTabType;
 getIndex(): number;
 move(offsetX: number,offsetY: number): void;
 render(context: DrawContext,x: number,y: number): void;
 getTitle(): Text;
 addAdvancement(advancement: Advancement): void;
 drawBackground(context: DrawContext,x: number,y: number,selected: boolean): void;
 drawWidgetTooltip(context: DrawContext,mouseX: number,mouseY: number,x: number,y: number): void;
 isClickOnTab(screenX: number,screenY: number,mouseX: number,mouseY: number): boolean;
 getWidget(advancement: Advancement): AdvancementWidget;
 getDisplay(): AdvancementDisplay;
 getScreen(): AdvancementsScreen;
 drawIcon(context: DrawContext,x: number,y: number): void;
}
class Static_AdvancementTab {
static create(client: MinecraftClient,screen: AdvancementsScreen,index: number,root: Advancement): AdvancementTab;
}

//net.minecraft.entity.data.TrackedData
class TrackedData extends JObject{
 equals(o: Object): boolean;
 toString(): string;
 hashCode(): number;
 getId(): number;
 getType(): TrackedDataHandler;
}

//net.minecraft.client.texture.atlas.AtlasSource
interface AtlasSource extends JObject{
 load(resourceManager: ResourceManager,regions: AtlasSource_SpriteRegions): void;
 getType(): AtlasSourceType;
}
class Static_AtlasSource {
static RESOURCE_FINDER: ResourceFinder;
}

//net.minecraft.item.BlockPredicatesChecker
class BlockPredicatesChecker extends JObject{
 check(stack: ItemStack,blockRegistry: Registry,pos: CachedBlockPosition): boolean;
}
class Static_BlockPredicatesChecker {
static canUseCache(pos: CachedBlockPosition,cachedPos: CachedBlockPosition,nbtAware: boolean): boolean;
}

//net.minecraft.item.ItemUsageContext
class ItemUsageContext extends JObject{
 getStack(): ItemStack;
 hitsInsideBlock(): boolean;
 getPlayerYaw(): number;
 getHitPos(): Vec3d;
 getBlockPos(): BlockPos;
 getHand(): Hand;
 getWorld(): World;
 shouldCancelInteraction(): boolean;
 getHorizontalPlayerFacing(): Direction;
 getSide(): Direction;
 getPlayer(): PlayerEntity;
}

//net.minecraft.server.command.FillBiomeCommand
class FillBiomeCommand extends JObject{
}
class Static_FillBiomeCommand {
static register(dispatcher: CommandDispatcher,commandRegistryAccess: CommandRegistryAccess): void;
static execute(source: ServerCommandSource,from: BlockPos,to: BlockPos,biome: RegistryEntry_Reference,filter: Predicate): number;
static method_47819(registryEntry: RegistryEntry): boolean;
static method_47536(maximum: Object,specified: Object): Message;
static method_51975(mutableInt: MutableInt,blockBox: BlockBox): Text;
static method_47530(context: CommandContext): number;
static method_47532(source: ServerCommandSource): boolean;
static method_47818(context: CommandContext): number;
static method_47534(chunk: Chunk,blockBox: BlockBox,predicate: Predicate,mutableInt: MutableInt,registryEntry: RegistryEntry,x: number,y: number,z: number,noise: MultiNoiseUtil_MultiNoiseSampler): RegistryEntry;
static convertPos(pos: BlockPos): BlockPos;
static convertCoordinate(coordinate: number): number;
static createBiomeSupplier(counter: MutableInt,chunk: Chunk,box: BlockBox,biome: RegistryEntry,filter: Predicate): BiomeSupplier;
static UNLOADED_EXCEPTION: SimpleCommandExceptionType;
static TOO_BIG_EXCEPTION: Dynamic2CommandExceptionType;
}

//net.minecraft.world.storage.RegionFile$OutputAction
interface RegionFile_OutputAction extends JObject{
 run(): void;
}

//net.minecraft.loot.condition.ReferenceLootCondition
class ReferenceLootCondition extends JObject, LootCondition{
 test(context: Object): boolean;
 test(lootContext: LootContext): boolean;
 validate(reporter: LootTableReporter): void;
 getType(): LootConditionType;
}
class Static_ReferenceLootCondition {
static builder(id: Identifier): LootCondition_Builder;
static method_35556(identifier: Identifier): LootCondition;
static LOGGER: Logger;
}

//net.minecraft.data.client.Models
class Models extends JObject{
}
class Static_Models {
static make(requiredTextureKeys: TextureKey[]): Model;
static block(parent: string,variant: string,requiredTextureKeys: TextureKey[]): Model;
static block(parent: string,requiredTextureKeys: TextureKey[]): Model;
static item(parent: string,requiredTextureKeys: TextureKey[]): Model;
static method_25858(stage: number): Model;
static method_25854(i: number): Model[];
static CUBE: Model;
static CUBE_DIRECTIONAL: Model;
static CUBE_ALL: Model;
static CUBE_MIRRORED_ALL: Model;
static CUBE_NORTH_WEST_MIRRORED_ALL: Model;
static CUBE_COLUMN_UV_LOCKED_X: Model;
static CUBE_COLUMN_UV_LOCKED_Y: Model;
static CUBE_COLUMN_UV_LOCKED_Z: Model;
static CUBE_COLUMN: Model;
static CUBE_COLUMN_HORIZONTAL: Model;
static CUBE_COLUMN_MIRRORED: Model;
static CUBE_TOP: Model;
static CUBE_BOTTOM_TOP: Model;
static ORIENTABLE: Model;
static ORIENTABLE_WITH_BOTTOM: Model;
static ORIENTABLE_VERTICAL: Model;
static BUTTON: Model;
static BUTTON_PRESSED: Model;
static BUTTON_INVENTORY: Model;
static DOOR_BOTTOM_LEFT: Model;
static DOOR_BOTTOM_LEFT_OPEN: Model;
static DOOR_BOTTOM_RIGHT: Model;
static DOOR_BOTTOM_RIGHT_OPEN: Model;
static DOOR_TOP_LEFT: Model;
static DOOR_TOP_LEFT_OPEN: Model;
static DOOR_TOP_RIGHT: Model;
static DOOR_TOP_RIGHT_OPEN: Model;
static CUSTOM_FENCE_POST: Model;
static CUSTOM_FENCE_SIDE_NORTH: Model;
static CUSTOM_FENCE_SIDE_EAST: Model;
static CUSTOM_FENCE_SIDE_SOUTH: Model;
static CUSTOM_FENCE_SIDE_WEST: Model;
static CUSTOM_FENCE_INVENTORY: Model;
static FENCE_POST: Model;
static FENCE_SIDE: Model;
static FENCE_INVENTORY: Model;
static TEMPLATE_WALL_POST: Model;
static TEMPLATE_WALL_SIDE: Model;
static TEMPLATE_WALL_SIDE_TALL: Model;
static WALL_INVENTORY: Model;
static TEMPLATE_CUSTOM_FENCE_GATE: Model;
static TEMPLATE_CUSTOM_FENCE_GATE_OPEN: Model;
static TEMPLATE_CUSTOM_FENCE_GATE_WALL: Model;
static TEMPLATE_CUSTOM_FENCE_GATE_WALL_OPEN: Model;
static TEMPLATE_FENCE_GATE: Model;
static TEMPLATE_FENCE_GATE_OPEN: Model;
static TEMPLATE_FENCE_GATE_WALL: Model;
static TEMPLATE_FENCE_GATE_WALL_OPEN: Model;
static PRESSURE_PLATE_UP: Model;
static PRESSURE_PLATE_DOWN: Model;
static PARTICLE: Model;
static SLAB: Model;
static SLAB_TOP: Model;
static LEAVES: Model;
static STAIRS: Model;
static INNER_STAIRS: Model;
static OUTER_STAIRS: Model;
static TEMPLATE_TRAPDOOR_TOP: Model;
static TEMPLATE_TRAPDOOR_BOTTOM: Model;
static TEMPLATE_TRAPDOOR_OPEN: Model;
static TEMPLATE_ORIENTABLE_TRAPDOOR_TOP: Model;
static TEMPLATE_ORIENTABLE_TRAPDOOR_BOTTOM: Model;
static TEMPLATE_ORIENTABLE_TRAPDOOR_OPEN: Model;
static POINTED_DRIPSTONE: Model;
static CROSS: Model;
static TINTED_CROSS: Model;
static FLOWER_POT_CROSS: Model;
static TINTED_FLOWER_POT_CROSS: Model;
static RAIL_FLAT: Model;
static RAIL_CURVED: Model;
static TEMPLATE_RAIL_RAISED_NE: Model;
static TEMPLATE_RAIL_RAISED_SW: Model;
static CARPET: Model;
static FLOWERBED_1: Model;
static FLOWERBED_2: Model;
static FLOWERBED_3: Model;
static FLOWERBED_4: Model;
static CORAL_FAN: Model;
static CORAL_WALL_FAN: Model;
static TEMPLATE_GLAZED_TERRACOTTA: Model;
static TEMPLATE_CHORUS_FLOWER: Model;
static TEMPLATE_DAYLIGHT_DETECTOR: Model;
static TEMPLATE_GLASS_PANE_NOSIDE: Model;
static TEMPLATE_GLASS_PANE_NOSIDE_ALT: Model;
static TEMPLATE_GLASS_PANE_POST: Model;
static TEMPLATE_GLASS_PANE_SIDE: Model;
static TEMPLATE_GLASS_PANE_SIDE_ALT: Model;
static TEMPLATE_COMMAND_BLOCK: Model;
static TEMPLATE_CHISELED_BOOKSHELF_SLOT_TOP_LEFT: Model;
static TEMPLATE_CHISELED_BOOKSHELF_SLOT_TOP_MID: Model;
static TEMPLATE_CHISELED_BOOKSHELF_SLOT_TOP_RIGHT: Model;
static TEMPLATE_CHISELED_BOOKSHELF_SLOT_BOTTOM_LEFT: Model;
static TEMPLATE_CHISELED_BOOKSHELF_SLOT_BOTTOM_MID: Model;
static TEMPLATE_CHISELED_BOOKSHELF_SLOT_BOTTOM_RIGHT: Model;
static TEMPLATE_ANVIL: Model;
static STEM_GROWTH_STAGES: Model[];
static STEM_FRUIT: Model;
static CROP: Model;
static TEMPLATE_FARMLAND: Model;
static TEMPLATE_FIRE_FLOOR: Model;
static TEMPLATE_FIRE_SIDE: Model;
static TEMPLATE_FIRE_SIDE_ALT: Model;
static TEMPLATE_FIRE_UP: Model;
static TEMPLATE_FIRE_UP_ALT: Model;
static TEMPLATE_CAMPFIRE: Model;
static TEMPLATE_LANTERN: Model;
static TEMPLATE_HANGING_LANTERN: Model;
static TEMPLATE_TORCH: Model;
static TEMPLATE_TORCH_WALL: Model;
static TEMPLATE_PISTON: Model;
static TEMPLATE_PISTON_HEAD: Model;
static TEMPLATE_PISTON_HEAD_SHORT: Model;
static TEMPLATE_SEAGRASS: Model;
static TEMPLATE_TURTLE_EGG: Model;
static TEMPLATE_TWO_TURTLE_EGGS: Model;
static TEMPLATE_THREE_TURTLE_EGGS: Model;
static TEMPLATE_FOUR_TURTLE_EGGS: Model;
static TEMPLATE_SINGLE_FACE: Model;
static TEMPLATE_CAULDRON_LEVEL1: Model;
static TEMPLATE_CAULDRON_LEVEL2: Model;
static TEMPLATE_CAULDRON_FULL: Model;
static TEMPLATE_AZALEA: Model;
static TEMPLATE_POTTED_AZALEA_BUSH: Model;
static TEMPLATE_POTTED_FLOWERING_AZALEA_BUSH: Model;
static SNIFFER_EGG: Model;
static GENERATED: Model;
static TEMPLATE_MUSIC_DISC: Model;
static HANDHELD: Model;
static HANDHELD_ROD: Model;
static GENERATED_TWO_LAYERS: Model;
static GENERATED_THREE_LAYERS: Model;
static TEMPLATE_SHULKER_BOX: Model;
static TEMPLATE_BED: Model;
static TEMPLATE_BANNER: Model;
static TEMPLATE_SKULL: Model;
static TEMPLATE_CANDLE: Model;
static TEMPLATE_TWO_CANDLES: Model;
static TEMPLATE_THREE_CANDLES: Model;
static TEMPLATE_FOUR_CANDLES: Model;
static TEMPLATE_CAKE_WITH_CANDLE: Model;
static TEMPLATE_SCULK_SHRIEKER: Model;
}

//net.minecraft.world.chunk.ChunkStatus
class ChunkStatus extends JObject{
 toString(): string;
 getIndex(): number;
 getTaskMargin(): number;
 getChunkType(): ChunkStatus_ChunkType;
 getPrevious(): ChunkStatus;
 runGenerationTask(executor: Executor,world: ServerWorld,generator: ChunkGenerator,structureTemplateManager: StructureTemplateManager,lightingProvider: ServerLightingProvider,fullChunkConverter: Function,chunks: List): CompletableFuture;
 runLoadTask(world: ServerWorld,structureTemplateManager: StructureTemplateManager,lightingProvider: ServerLightingProvider,fullChunkConverter: Function,chunk: Chunk): CompletableFuture;
 getHeightmapTypes(): EnumSet;
 shouldAlwaysUpgrade(): boolean;
 isAtLeast(chunkStatus: ChunkStatus): boolean;
}
class Static_ChunkStatus {
static register(id: string,previous: ChunkStatus,taskMargin: number,shouldAlwaysUpgrade: boolean,heightMapTypes: EnumSet,chunkType: ChunkStatus_ChunkType,generationTask: ChunkStatus_GenerationTask,loadTask: ChunkStatus_LoadTask): ChunkStatus;
static register(id: string,previous: ChunkStatus,taskMargin: number,heightMapTypes: EnumSet,chunkType: ChunkStatus_ChunkType,task: ChunkStatus_SimpleGenerationTask): ChunkStatus;
static register(id: string,previous: ChunkStatus,taskMargin: number,heightMapTypes: EnumSet,chunkType: ChunkStatus_ChunkType,task: ChunkStatus_GenerationTask): ChunkStatus;
static method_12166(statusToDistance: IntArrayList): void;
static getLightingFuture(lightingProvider: ServerLightingProvider,chunk: Chunk): CompletableFuture;
static method_41523(status: ChunkStatus,world: ServerWorld,structureTemplateManager: StructureTemplateManager,lightingProvider: ServerLightingProvider,fullChunkConverter: Function,chunk: Chunk): CompletableFuture;
static method_20614(targetStatus: ChunkStatus,executor: Executor,world: ServerWorld,generator: ChunkGenerator,structureTemplateManager: StructureTemplateManager,lightingProvider: ServerLightingProvider,fullChunkConverter: Function,chunks: List,chunk: Chunk): CompletableFuture;
static method_17033(targetStatus: ChunkStatus,world: ServerWorld,generator: ChunkGenerator,chunks: List,chunk: Chunk): void;
static method_20609(targetStatus: ChunkStatus,executor: Executor,world: ServerWorld,generator: ChunkGenerator,structureTemplateManager: StructureTemplateManager,lightingProvider: ServerLightingProvider,fullChunkConverter: Function,chunks: List,chunk: Chunk): CompletableFuture;
static method_16566(targetStatus: ChunkStatus,world: ServerWorld,structureTemplateManager: StructureTemplateManager,lightingProvider: ServerLightingProvider,fullChunkConverter: Function,chunk: Chunk): CompletableFuture;
static method_51375(targetStatus: ChunkStatus,world: ServerWorld,generator: ChunkGenerator,chunks: List,chunk: Chunk): void;
static method_38282(targetStatus: ChunkStatus,world: ServerWorld,generator: ChunkGenerator,chunks: List,chunk: Chunk): void;
static method_38284(targetStatus: ChunkStatus,executor: Executor,world: ServerWorld,generator: ChunkGenerator,structureTemplateManager: StructureTemplateManager,lightingProvider: ServerLightingProvider,fullChunkConverter: Function,chunks: List,chunk: Chunk): CompletableFuture;
static method_38278(targetStatus: ChunkStatus,world: ServerWorld,structureTemplateManager: StructureTemplateManager,lightingProvider: ServerLightingProvider,fullChunkConverter: Function,chunk: Chunk): CompletableFuture;
static method_16569(targetStatus: ChunkStatus,world: ServerWorld,generator: ChunkGenerator,chunks: List,chunk: Chunk): void;
static method_51376(targetStatus: ChunkStatus,executor: Executor,world: ServerWorld,generator: ChunkGenerator,structureTemplateManager: StructureTemplateManager,lightingProvider: ServerLightingProvider,fullChunkConverter: Function,chunks: List,chunk: Chunk): CompletableFuture;
static method_39790(targetStatus: ChunkStatus,world: ServerWorld,structureTemplateManager: StructureTemplateManager,lightingProvider: ServerLightingProvider,fullChunkConverter: Function,chunk: Chunk): CompletableFuture;
static method_38285(targetStatus: ChunkStatus,executor: Executor,world: ServerWorld,generator: ChunkGenerator,structureTemplateManager: StructureTemplateManager,lightingProvider: ServerLightingProvider,fullChunkConverter: Function,chunks: List,chunk: Chunk): CompletableFuture;
static method_39463(populatedChunk: Chunk): Either;
static method_38283(populatedChunk: Chunk): Either;
static method_16565(targetStatus: ChunkStatus,world: ServerWorld,generator: ChunkGenerator,chunks: List,chunk: Chunk): void;
static method_39464(targetStatus: ChunkStatus,executor: Executor,world: ServerWorld,generator: ChunkGenerator,structureTemplateManager: StructureTemplateManager,lightingProvider: ServerLightingProvider,fullChunkConverter: Function,chunks: List,chunk: Chunk): CompletableFuture;
static method_20615(targetStatus: ChunkStatus,world: ServerWorld,structureTemplateManager: StructureTemplateManager,lightingProvider: ServerLightingProvider,fullChunkConverter: Function,chunk: Chunk): CompletableFuture;
static method_51377(targetStatus: ChunkStatus,world: ServerWorld,chunkGenerator: ChunkGenerator,chunks: List,chunk: Chunk): void;
static getMaxDistanceFromFull(): number;
static getDistanceFromFull(status: ChunkStatus): number;
static byId(id: string): ChunkStatus;
static shouldExcludeBlockLight(chunk: Chunk): boolean;
static getInitializeLightingFuture(lightingProvider: ServerLightingProvider,chunk: Chunk): CompletableFuture;
static createOrderedList(): List;
static byDistanceFromFull(level: number): ChunkStatus;
static field_35470: number;
static PRE_CARVER_HEIGHTMAPS: EnumSet;
static POST_CARVER_HEIGHTMAPS: EnumSet;
static STATUS_BUMP_LOAD_TASK: ChunkStatus_LoadTask;
static EMPTY: ChunkStatus;
static STRUCTURE_STARTS: ChunkStatus;
static STRUCTURE_REFERENCES: ChunkStatus;
static BIOMES: ChunkStatus;
static NOISE: ChunkStatus;
static SURFACE: ChunkStatus;
static CARVERS: ChunkStatus;
static FEATURES: ChunkStatus;
static INITIALIZE_LIGHT: ChunkStatus;
static LIGHT: ChunkStatus;
static SPAWN: ChunkStatus;
static FULL: ChunkStatus;
static DISTANCE_TO_STATUS: List;
static STATUS_TO_DISTANCE: IntList;
}

//net.minecraft.registry.RegistryCodecs
class RegistryCodecs extends JObject{
}
class Static_RegistryCodecs {
static method_45946(mutableRegistry: MutableRegistry,lifecycle: Lifecycle,key: RegistryKey,value: Object): void;
static method_45945(registry: Registry): Map;
static method_45944(registryKey: RegistryKey,lifecycle: Lifecycle,entries: Map): Registry;
static managerEntry(registryRef: RegistryKey,elementCodec: MapCodec): MapCodec;
static method_40345(registryKey: RegistryKey,lifecycle: Lifecycle,entries: List): Registry;
static method_40350(registry: Registry): List;
static method_40348(registryKey: RegistryKey,mapCodec: MapCodec,instance: RecordCodecBuilder_Instance): App;
static createRegistryCodec(registryRef: RegistryKey,lifecycle: Lifecycle,elementCodec: Codec): Codec;
static createKeyedRegistryCodec(registryRef: RegistryKey,lifecycle: Lifecycle,elementCodec: Codec): Codec;
static entryList(registryRef: RegistryKey,alwaysSerializeAsList: boolean): Codec;
static entryList(registryRef: RegistryKey): Codec;
static entryList(registryRef: RegistryKey,elementCodec: Codec): Codec;
static entryList(registryRef: RegistryKey,elementCodec: Codec,alwaysSerializeAsList: boolean): Codec;
}

//net.minecraft.particle.AbstractDustParticleEffect
class AbstractDustParticleEffect extends JObject, ParticleEffect{
 write(buf: PacketByteBuf): void;
 asString(): string;
 getScale(): number;
 getColor(): Vector3f;
}
class Static_AbstractDustParticleEffect {
static readColor(buf: PacketByteBuf): Vector3f;
static readColor(reader: StringReader): Vector3f;
static MIN_SCALE: number;
static MAX_SCALE: number;
}

//net.minecraft.client.render.entity.model.CrossbowPosing
class CrossbowPosing extends JObject{
}
class Static_CrossbowPosing {
static meleeAttack(leftArm: ModelPart,rightArm: ModelPart,attacking: boolean,swingProgress: number,animationProgress: number): void;
static meleeAttack(leftArm: ModelPart,rightArm: ModelPart,actor: MobEntity,swingProgress: number,animationProgress: number): void;
static swingArms(leftArm: ModelPart,rightArm: ModelPart,animationProgress: number): void;
static hold(holdingArm: ModelPart,otherArm: ModelPart,head: ModelPart,rightArmed: boolean): void;
static swingArm(arm: ModelPart,animationProgress: number,sigma: number): void;
static charge(holdingArm: ModelPart,pullingArm: ModelPart,actor: LivingEntity,rightArmed: boolean): void;
}

//net.minecraft.world.gen.carver.CarvingMask$MaskPredicate
interface CarvingMask_MaskPredicate extends JObject{
 test(offsetX: number,y: number,offsetZ: number): boolean;
}

//net.minecraft.client.particle.CrackParticle$SlimeballFactory
class CrackParticle_SlimeballFactory extends JObject, ParticleFactory{
 createParticle(defaultParticleType: DefaultParticleType,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
 createParticle(particleEffect: ParticleEffect,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
}

//net.minecraft.block.ShapeContext
interface ShapeContext extends JObject{
 isDescending(): boolean;
 isAbove(shape: VoxelShape,pos: BlockPos,defaultValue: boolean): boolean;
 canWalkOnFluid(stateAbove: FluidState,state: FluidState): boolean;
 isHolding(item: Item): boolean;
}
class Static_ShapeContext {
static of(entity: Entity): ShapeContext;
static absent(): ShapeContext;
}

//net.minecraft.recipe.book.RecipeBook
class RecipeBook extends JObject{
 add(recipe: Recipe): void;
 remove(recipe: Recipe): void;
 contains(id: Identifier): boolean;
 contains(recipe: Recipe): boolean;
 display(recipe: Recipe): void;
 copyFrom(book: RecipeBook): void;
 isFilteringCraftable(category: RecipeBookCategory): boolean;
 isFilteringCraftable(handler: AbstractRecipeScreenHandler): boolean;
 getOptions(): RecipeBookOptions;
 shouldDisplay(recipe: Recipe): boolean;
 setGuiOpen(category: RecipeBookCategory,open: boolean): void;
 setOptions(options: RecipeBookOptions): void;
 isGuiOpen(category: RecipeBookCategory): boolean;
 onRecipeDisplayed(recipe: Recipe): void;
 setCategoryOptions(category: RecipeBookCategory,guiOpen: boolean,filteringCraftable: boolean): void;
 setFilteringCraftable(category: RecipeBookCategory,filteringCraftable: boolean): void;
}

//net.minecraft.state.State$1


//net.minecraft.client.gui.screen.ChatInputSuggestor
class ChatInputSuggestor extends JObject{
 refresh(): void;
 render(context: DrawContext,mouseX: number,mouseY: number): void;
 setWindowActive(windowActive: boolean): void;
 renderMessages(context: DrawContext): void;
 tryRenderWindow(context: DrawContext,mouseX: number,mouseY: number): boolean;
 mouseScrolled(amount: number): boolean;
 getNarration(): Text;
 clearWindow(): void;
 show(narrateFirstSuggestion: boolean): void;
 keyPressed(keyCode: number,scanCode: number,modifiers: number): boolean;
 mouseClicked(mouseX: number,mouseY: number,button: number): boolean;
}
class Static_ChatInputSuggestor {
static highlight(parse: ParseResults,original: string,firstCharacterIndex: number): OrderedText;
static formatException(exception: CommandSyntaxException): OrderedText;
static getStartOfCurrentWord(input: string): number;
static getSuggestionSuffix(original: string,suggestion: string): string;
static WHITESPACE_PATTERN: Pattern;
static ERROR_STYLE: Style;
static INFO_STYLE: Style;
static HIGHLIGHT_STYLES: List;
}

//net.minecraft.predicate.entity.LightningBoltPredicate
class LightningBoltPredicate extends JObject, TypeSpecificPredicate{
 test(entity: Entity,world: ServerWorld,pos: Vec3d): boolean;
 getDeserializer(): TypeSpecificPredicate_Deserializer;
 typeSpecificToJson(): JsonObject;
}
class Static_LightningBoltPredicate {
static of(blocksSetOnFire: NumberRange_IntRange): LightningBoltPredicate;
static fromJson(json: JsonObject): LightningBoltPredicate;
static BLOCKS_SET_ON_FIRE_KEY: string;
static ENTITY_STRUCK_KEY: string;
}

//net.minecraft.data.client.MultipartBlockStateSupplier
class MultipartBlockStateSupplier extends JObject, BlockStateSupplier{
 get(): JsonElement;
 get(): Object;
 with(condition: When,variants: BlockStateVariant[]): MultipartBlockStateSupplier;
 with(condition: When,variant: BlockStateVariant): MultipartBlockStateSupplier;
 with(variants: List): MultipartBlockStateSupplier;
 with(variant: BlockStateVariant): MultipartBlockStateSupplier;
 with(condition: When,variants: List): MultipartBlockStateSupplier;
 getBlock(): Block;
}
class Static_MultipartBlockStateSupplier {
static create(block: Block): MultipartBlockStateSupplier;
static method_25759(stateManager: StateManager,multipart: MultipartBlockStateSupplier_Multipart): void;
}

//net.minecraft.nbt.NbtFloat$1


//net.minecraft.command.EntitySelector
class EntitySelector extends JObject{
 getLimit(): number;
 getEntities(source: ServerCommandSource): List;
 getEntity(source: ServerCommandSource): Entity;
 includesNonPlayers(): boolean;
 isLocalWorldOnly(): boolean;
 isSenderOnly(): boolean;
 usesAt(): boolean;
 getPlayers(source: ServerCommandSource): List;
 getPlayer(source: ServerCommandSource): ServerPlayerEntity;
}
class Static_EntitySelector {
static method_45914(serverCommandSource: ServerCommandSource,entity: Entity): boolean;
static method_9810(box: Box,entity: Entity): boolean;
static method_47802(pos: Vec3d,entities: List): void;
static getNames(entities: List): Text;
static MAX_VALUE: number;
static ARBITRARY: BiConsumer;
static PASSTHROUGH_FILTER: TypeFilter;
}

//net.minecraft.world.chunk.BlockEntityTickInvoker
interface BlockEntityTickInvoker extends JObject{
 getName(): string;
 tick(): void;
 isRemoved(): boolean;
 getPos(): BlockPos;
}

//net.minecraft.command.argument.BlockPosArgumentType
class BlockPosArgumentType extends JObject, ArgumentType{
 parse(stringReader: StringReader): PosArgument;
 parse(reader: StringReader): Object;
 getExamples(): Collection;
 listSuggestions(context: CommandContext,builder: SuggestionsBuilder): CompletableFuture;
}
class Static_BlockPosArgumentType {
static getBlockPos(context: CommandContext,name: string): BlockPos;
static blockPos(): BlockPosArgumentType;
static getLoadedBlockPos(context: CommandContext,name: string): BlockPos;
static getLoadedBlockPos(context: CommandContext,world: ServerWorld,name: string): BlockPos;
static getValidBlockPos(context: CommandContext,name: string): BlockPos;
static EXAMPLES: Collection;
static UNLOADED_EXCEPTION: SimpleCommandExceptionType;
static OUT_OF_WORLD_EXCEPTION: SimpleCommandExceptionType;
static OUT_OF_BOUNDS_EXCEPTION: SimpleCommandExceptionType;
}

//net.minecraft.text.ScoreTextContent
class ScoreTextContent extends JObject, TextContent{
 getName(): string;
 equals(o: Object): boolean;
 toString(): string;
 hashCode(): number;
 parse(source: ServerCommandSource,sender: Entity,depth: number): MutableText;
 getSelector(): EntitySelector;
 getObjective(): string;
}
class Static_ScoreTextContent {
static parseEntitySelector(name: string): EntitySelector;
static SENDER_PLACEHOLDER: string;
}

//net.minecraft.util.dynamic.Codecs$Either
class Codecs_Either extends JObject, Codec{
 equals(o: Object): boolean;
 toString(): string;
 hashCode(): number;
 decode(ops: DynamicOps,input: Object): DataResult;
 encode(input: Object,ops: DynamicOps,prefix: Object): DataResult;
 encode(either: Either,dynamicOps: DynamicOps,object: Object): DataResult;
}
class Static_Codecs_Either {
static method_37946(pair: Pair): Pair;
static method_37947(pair: Pair,pair2: Pair): Pair;
static method_37949(pair: Pair): Pair;
}

//net.minecraft.util.function.ValueLists
class ValueLists extends JObject{
}
class Static_ValueLists {
static validate(valueToIndexFunction: ToIntFunction,values: Object[]): Object[];
static createIdToValueFunction(valueToIdFunction: ToIntFunction,values: Object[],outOfBoundsHandling: ValueLists_OutOfBoundsHandling): IntFunction;
static createIdToValueFunction(valueToIdFunction: ToIntFunction,values: Object[],fallback: Object): IntFunction;
static createIdToValueFunction(valueToIdFunction: ToIntFunction,values: Object[]): IntFunction;
static method_47918(objects: Object[],i: number,index: number): Object;
static method_47916(objects: Object[],i: number,index: number): Object;
static method_47912(intFunction: IntFunction,object: Object,index: number): Object;
static method_47911(i: number,objects: Object[],object: Object,index: number): Object;
}

//net.minecraft.loot.condition.LootConditionTypes
class LootConditionTypes extends JObject{
}
class Static_LootConditionTypes {
static register(id: string,serializer: JsonSerializer): LootConditionType;
static matchingAll(predicates: Predicate[]): Predicate;
static createGsonSerializer(): Object;
static method_921(predicatesx: Object): boolean;
static method_927(predicates: Predicate[],operand: Object): boolean;
static method_928(predicatesx: Object): boolean;
static matchingAny(predicates: Predicate[]): Predicate;
static method_929(predicates: Predicate[],operand: Object): boolean;
static INVERTED: LootConditionType;
static ANY_OF: LootConditionType;
static ALL_OF: LootConditionType;
static RANDOM_CHANCE: LootConditionType;
static RANDOM_CHANCE_WITH_LOOTING: LootConditionType;
static ENTITY_PROPERTIES: LootConditionType;
static KILLED_BY_PLAYER: LootConditionType;
static ENTITY_SCORES: LootConditionType;
static BLOCK_STATE_PROPERTY: LootConditionType;
static MATCH_TOOL: LootConditionType;
static TABLE_BONUS: LootConditionType;
static SURVIVES_EXPLOSION: LootConditionType;
static DAMAGE_SOURCE_PROPERTIES: LootConditionType;
static LOCATION_CHECK: LootConditionType;
static WEATHER_CHECK: LootConditionType;
static REFERENCE: LootConditionType;
static TIME_CHECK: LootConditionType;
static VALUE_CHECK: LootConditionType;
}

//net.minecraft.resource.ResourcePackManager
class ResourcePackManager extends JObject{
 enable(profile: string): boolean;
 disable(profile: string): boolean;
 getProfile(name: string): ResourcePackProfile;
 createResourcePacks(): List;
 getNames(): Collection;
 getRequestedFeatures(): FeatureSet;
 getProfiles(): Collection;
 setEnabledProfiles(enabled: Collection): void;
 hasProfile(name: string): boolean;
 scanPacks(): void;
 getEnabledNames(): Collection;
 getEnabledProfiles(): Collection;
}
class Static_ResourcePackManager {
static method_29484(map: Map,profile: ResourcePackProfile): void;
}

//net.minecraft.server.ServerTask
class ServerTask extends JObject, Runnable{
 run(): void;
 getCreationTicks(): number;
}

//net.minecraft.network.packet.c2s.handshake.HandshakeC2SPacket
class HandshakeC2SPacket extends JObject, Packet{
 apply(serverHandshakePacketListener: ServerHandshakePacketListener): void;
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
 getAddress(): string;
 getPort(): number;
 getProtocolVersion(): number;
 getIntendedState(): NetworkState;
}
class Static_HandshakeC2SPacket {
static MAX_ADDRESS_LENGTH: number;
}

//net.minecraft.village.raid.Raid$1


//net.minecraft.client.gui.navigation.GuiNavigation$Down
class GuiNavigation_Down extends JObject, GuiNavigation{
 getDirection(): NavigationDirection;
}

//net.minecraft.entity.ai.brain.task.RidingTask
class RidingTask extends JObject{
}
class Static_RidingTask {
static create(range: number,alternativeRideCondition: BiPredicate): Task;
static canRideTarget(entity: LivingEntity,vehicle: Entity,range: number): boolean;
static method_46917(taskContext: TaskTriggerer_TaskContext,i: number,biPredicate: BiPredicate,rideTarget: MemoryQueryResult): TaskRunnable;
static method_46916(i: number,biPredicate: BiPredicate,context: TaskTriggerer_TaskContext): App;
static method_46918(taskContext: TaskTriggerer_TaskContext,memoryQueryResult: MemoryQueryResult,i: number,biPredicate: BiPredicate,world: ServerWorld,entity: LivingEntity,time: long): boolean;
}

//net.minecraft.client.render.model.json.MultipartModelComponent
class MultipartModelComponent extends JObject{
 equals(o: Object): boolean;
 hashCode(): number;
 getModel(): WeightedUnbakedModel;
 getPredicate(stateFactory: StateManager): Predicate;
}

//net.minecraft.registry.tag.PaintingVariantTags
class PaintingVariantTags extends JObject{
}
class Static_PaintingVariantTags {
static of(id: string): TagKey;
static PLACEABLE: TagKey;
}

//net.minecraft.block.SuspiciousStewIngredient
interface SuspiciousStewIngredient extends JObject{
 getEffectInStewDuration(): number;
 getEffectInStew(): StatusEffect;
}
class Static_SuspiciousStewIngredient {
static of(item: ItemConvertible): SuspiciousStewIngredient;
static getAll(): List;
}

//net.minecraft.entity.projectile.PersistentProjectileEntity$1


//net.minecraft.entity.projectile.FishingBobberEntity$1


//net.minecraft.client.gui.ScreenRect$1


//net.minecraft.test.GameTestBatch
class GameTestBatch extends JObject{
 getId(): string;
 getTestFunctions(): Collection;
 finishBatch(world: ServerWorld): void;
 startBatch(world: ServerWorld): void;
}
class Static_GameTestBatch {
static DEFAULT_BATCH: string;
}

//net.minecraft.client.RunArgs$Directories
class RunArgs_Directories extends JObject{
 getAssetDir(): Path;
 runDir: File;
 resourcePackDir: File;
 assetDir: File;
 assetIndex: string;
}

//net.minecraft.world.SpawnHelper$ChunkSource
interface SpawnHelper_ChunkSource extends JObject{
 query(pos: long,chunkConsumer: Consumer): void;
}

//net.minecraft.loot.context.LootContextType
class LootContextType extends JObject{
 toString(): string;
 validate(reporter: LootTableReporter,parameterConsumer: LootContextAware): void;
 getAllowed(): Set;
 getRequired(): Set;
 isAllowed(parameter: LootContextParameter): boolean;
}
class Static_LootContextType {
static create(): LootContextType_Builder;
}

//net.minecraft.text.StringVisitable$3


//net.minecraft.text.StringVisitable$4


//net.minecraft.text.StringVisitable$1


//net.minecraft.text.StringVisitable$2


//net.minecraft.block.HorizontalConnectingBlock$1


//net.minecraft.Bootstrap
class Bootstrap extends JObject{
}
class Static_Bootstrap {
static println(str: string): void;
static initialize(): void;
static collectMissingGameRuleTranslations(translations: Set): void;
static collectMissingTranslations(registry: Iterable,keyExtractor: Function,translationKeys: Set): void;
static getMissingTranslations(): Set;
static createNotBootstrappedException(callerGetter: Supplier): RuntimeException;
static logMissing(): void;
static method_17595(stat: Identifier): string;
static method_12850(fun: Function,language: Language,set: Set,object: Object): void;
static ensureBootstrapped(callerGetter: Supplier): void;
static setOutputStreams(): void;
static method_36238(): string;
static method_36236(key: string): void;
static SYSOUT: PrintStream;
static initialized: boolean;
static LOGGER: Logger;
static LOAD_TIME: AtomicLong;
}

//net.minecraft.entity.ai.brain.WalkTarget
class WalkTarget extends JObject{
 getSpeed(): number;
 getCompletionRange(): number;
 getLookTarget(): LookTarget;
}

//net.minecraft.structure.OceanMonumentGenerator
class OceanMonumentGenerator extends JObject{
}

//net.minecraft.loot.entry.EntryCombiner
interface EntryCombiner extends JObject{
 expand(context: LootContext,choiceConsumer: Consumer): boolean;
 or(other: EntryCombiner): EntryCombiner;
 and(other: EntryCombiner): EntryCombiner;
}
class Static_EntryCombiner {
static doExpand(context: LootContext,choiceConsumer: Consumer): boolean;
static method_16775(context: LootContext,choiceConsumer: Consumer): boolean;
static ALWAYS_FALSE: EntryCombiner;
static ALWAYS_TRUE: EntryCombiner;
}

//net.minecraft.client.network.ClientAdvancementManager$Listener
interface ClientAdvancementManager_Listener extends JObject, AdvancementManager_Listener{
 selectTab(advancement: Advancement): void;
 setProgress(advancement: Advancement,progress: AdvancementProgress): void;
}

//net.minecraft.registry.entry.RegistryElementCodec
class RegistryElementCodec extends JObject, Codec{
 toString(): string;
 decode(ops: DynamicOps,input: Object): DataResult;
 encode(registryEntry: RegistryEntry,dynamicOps: DynamicOps,object: Object): DataResult;
 encode(input: Object,ops: DynamicOps,prefix: Object): DataResult;
}
class Static_RegistryElementCodec {
static of(registryRef: RegistryKey,elementCodec: Codec): RegistryElementCodec;
static of(registryRef: RegistryKey,elementCodec: Codec,allowInlineDefinitions: boolean): RegistryElementCodec;
static method_40393(dynamicOps: DynamicOps,object: Object,key: RegistryKey): DataResult;
static method_49406(registryEntry: RegistryEntry): string;
static method_29746(pair: Pair): Pair;
static method_49405(): string;
static method_49408(registryKey: RegistryKey): string;
static method_40394(pair: Pair): Pair;
static method_46624(registryKey: RegistryKey): DataResult;
static method_45133(pair: Pair,reference: RegistryEntry_Reference): Pair;
}

//net.minecraft.util.math.Quantiles
class Quantiles extends JObject{
}
class Static_Quantiles {
static create(values: number[]): Map;
static create(values: long[]): Map;
static method_37997(map: Map,reversedMap: Int2DoubleRBTreeMap): void;
static reverseMap(map: Map): Map;
static QUANTILE_POINTS: Quantiles_ScaleAndIndexes;
}

//net.minecraft.nbt.NbtCompound
class NbtCompound extends JObject, NbtElement{
 remove(key: string): void;
 get(key: string): NbtElement;
 put(key: string,element: NbtElement): NbtElement;
 equals(o: Object): boolean;
 toString(): string;
 hashCode(): number;
 getBoolean(key: string): boolean;
 putBoolean(key: string,value: boolean): void;
 getByte(key: string): byte;
 putByte(key: string,value: byte): void;
 getShort(key: string): short;
 putShort(key: string,value: short): void;
 getInt(key: string): number;
 putInt(key: string,value: number): void;
 getLong(key: string): long;
 putLong(key: string,value: long): void;
 getFloat(key: string): number;
 putFloat(key: string,value: number): void;
 getDouble(key: string): number;
 putDouble(key: string,value: number): void;
 isEmpty(): boolean;
 contains(key: string): boolean;
 contains(key: string,type: number): boolean;
 write(output: DataOutput): void;
 accept(visitor: NbtElementVisitor): void;
 getType(): byte;
 getType(key: string): byte;
 copy(): NbtElement;
 copy(): NbtCompound;
 getSize(): number;
 putByteArray(key: string,value: byte[]): void;
 putByteArray(key: string,value: List): void;
 copyFrom(source: NbtCompound): NbtCompound;
 getKeys(): Set;
 getString(key: string): string;
 getCompound(key: string): NbtCompound;
 getList(key: string,type: number): NbtList;
 getSizeInBytes(): number;
 doAccept(visitor: NbtScanner): NbtScanner_Result;
 putUuid(key: string,value: UUID): void;
 getNbtType(): NbtType;
 putString(key: string,value: string): void;
 getUuid(key: string): UUID;
 getLongArray(key: string): long[];
 getIntArray(key: string): number[];
 getByteArray(key: string): byte[];
 putLongArray(key: string,value: List): void;
 putLongArray(key: string,value: long[]): void;
 putIntArray(key: string,value: number[]): void;
 putIntArray(key: string,value: List): void;
 containsUuid(key: string): boolean;
}
class Static_NbtCompound {
static write(key: string,element: NbtElement,output: DataOutput): void;
static read(reader: NbtType,key: string,input: DataInput,depth: number,tracker: NbtTagSizeTracker): NbtElement;
static readByte(input: DataInput,tracker: NbtTagSizeTracker): byte;
static readString(input: DataInput,tracker: NbtTagSizeTracker): string;
static method_29142(nbt: NbtCompound): Dynamic;
static method_29141(dynamic: Dynamic): DataResult;
static method_49665(nbtElement: NbtElement): string;
static CODEC: Codec;
static SIZE: number;
static field_41719: number;
static TYPE: NbtType;
}

//net.minecraft.client.gui.widget.ButtonWidget$PressAction
interface ButtonWidget_PressAction extends JObject{
 onPress(button: ButtonWidget): void;
}

//net.minecraft.util.profiler.ServerSamplerSource
class ServerSamplerSource extends JObject, SamplerSource{
 getSamplers(profilerSupplier: Supplier): Set;
}
class Static_ServerSamplerSource {
static createTickTimeTracker(nanoTimeSupplier: LongSupplier): Sampler;
static createSystemSamplers(): Set;
static method_37200(cpuUsageFetcher: ServerSamplerSource_CpuUsageFetcher,index: number): Sampler;
static method_37203(): number;
static method_37201(watch: Stopwatch): number;
static method_37204(cpuUsageFetcher: ServerSamplerSource_CpuUsageFetcher,i: number): number;
static LOGGER: Logger;
}

//net.minecraft.nbt.NbtByteArray$1


//net.minecraft.util.profiling.jfr.JfrProfileRecorder
class JfrProfileRecorder extends JObject{
}
class Static_JfrProfileRecorder {
static createNetworkIoStatistics(duration: Duration,packetsToCounter: Map): NetworkIoStatistics;
static readProfile(path: Path): JfrProfile;
static method_39432(packet: NetworkIoStatistics_Packet): JfrProfileRecorder_PacketCounter;
static method_39434(entry: Map_Entry): Pair;
}

//net.minecraft.world.gen.densityfunction.DensityFunctions$CaveScaler
class DensityFunctions_CaveScaler extends JObject{
}
class Static_DensityFunctions_CaveScaler {
static scaleCaves(value: number): number;
static scaleTunnels(value: number): number;
}

//net.minecraft.registry.RegistryWrapper$Impl$Delegating
class RegistryWrapper_Impl_Delegating extends JObject, RegistryWrapper_Impl{
 getRegistryKey(): RegistryKey;
 getLifecycle(): Lifecycle;
 getOptional(tag: TagKey): Optional;
 getOptional(key: RegistryKey): Optional;
 streamEntries(): Stream;
 streamTags(): Stream;
}

//net.minecraft.client.realms.Ping
class Ping extends JObject{
}
class Static_Ping {
static now(): long;
static pingAllRegions(): List;
static ping(regions: Ping_Region): List;
static ping(host: string): number;
}

//net.minecraft.server.command.TestCommand$Listener
class TestCommand_Listener extends JObject, TestListener{
 onFailed(test: GameTestState): void;
 onPassed(test: GameTestState): void;
 onStarted(test: GameTestState): void;
}

//net.minecraft.server.command.PublishCommand
class PublishCommand extends JObject{
}
class Static_PublishCommand {
static register(dispatcher: CommandDispatcher): void;
static execute(source: ServerCommandSource,port: number,allowCommands: boolean,gameMode: GameMode): number;
static method_13513(source: ServerCommandSource): boolean;
static method_46871(commandContext: CommandContext): number;
static method_46870(commandContext: CommandContext): number;
static method_13512(context: CommandContext): number;
static method_13508(context: CommandContext): number;
static method_13511(port: Object): Message;
static getStartedText(port: number): MutableText;
static method_52025(i: number): Text;
static FAILED_EXCEPTION: SimpleCommandExceptionType;
static ALREADY_PUBLISHED_EXCEPTION: DynamicCommandExceptionType;
}

//net.minecraft.data.server.recipe.CraftingRecipeJsonBuilder
interface CraftingRecipeJsonBuilder extends JObject{
 group(group: string): CraftingRecipeJsonBuilder;
 getOutputItem(): Item;
 criterion(name: string,conditions: CriterionConditions): CraftingRecipeJsonBuilder;
 offerTo(exporter: Consumer): void;
 offerTo(exporter: Consumer,recipePath: string): void;
 offerTo(exporter: Consumer,recipeId: Identifier): void;
}
class Static_CraftingRecipeJsonBuilder {
static getItemId(item: ItemConvertible): Identifier;
static ROOT: Identifier;
}

//net.minecraft.block.pattern.CachedBlockPosition
class CachedBlockPosition extends JObject{
 getBlockPos(): BlockPos;
 getBlockEntity(): BlockEntity;
 getWorld(): WorldView;
 getBlockState(): BlockState;
}
class Static_CachedBlockPosition {
static method_11682(predicate: Predicate,pos: CachedBlockPosition): boolean;
static matchesBlockState(state: Predicate): Predicate;
}

//net.minecraft.network.packet.s2c.play.ExplosionS2CPacket
class ExplosionS2CPacket extends JObject, Packet{
 apply(clientPlayPacketListener: ClientPlayPacketListener): void;
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
 getPlayerVelocityY(): number;
 getRadius(): number;
 getPlayerVelocityX(): number;
 getPlayerVelocityZ(): number;
 getAffectedBlocks(): List;
 getX(): number;
 getY(): number;
 getZ(): number;
}
class Static_ExplosionS2CPacket {
static method_34121(i: number,j: number,k: number,buf2: PacketByteBuf): BlockPos;
static method_34122(i: number,j: number,k: number,buf2: PacketByteBuf,pos: BlockPos): void;
}

//net.minecraft.util.profiling.jfr.JfrListener
class JfrListener extends JObject{
 stop(dumpPath: Path): void;
}
class Static_JfrListener {
static log(logSupplier: Supplier): void;
static warn(logSupplier: Supplier,throwable: Throwable): void;
static method_37995(): string;
static method_37990(path: Path): string;
static method_37994(path: Path): string;
static method_37993(): string;
static LOGGER: Logger;
}

//net.minecraft.client.render.debug.LightDebugRenderer
class LightDebugRenderer extends JObject, DebugRenderer_Renderer{
 render(matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,cameraX: number,cameraY: number,cameraZ: number): void;
}
class Static_LightDebugRenderer {
static method_51461(chunkSectionPos: ChunkSectionPos,matrixStack: MatrixStack,vertexConsumer: VertexConsumer,d: number,e: number,f: number,vector4f: Vector4f,direction: Direction,offsetX: number,offsetY: number,offsetZ: number): void;
static drawFace(matrices: MatrixStack,vertexConsumer: VertexConsumer,direction: Direction,cameraX: number,cameraY: number,cameraZ: number,x: number,y: number,z: number,color: Vector4f): void;
static drawEdge(matrices: MatrixStack,vertexConsumer: VertexConsumer,cameraX: number,cameraY: number,cameraZ: number,x1: number,y1: number,z1: number,x2: number,y2: number,z: number,color: Vector4f): void;
static drawEdges(matrices: MatrixStack,shape: VoxelSet,sectionPos: ChunkSectionPos,vertexConsumers: VertexConsumerProvider,cameraX: number,cameraY: number,cameraZ: number,color: Vector4f): void;
static drawFaces(matrices: MatrixStack,shape: VoxelSet,sectionPos: ChunkSectionPos,vertexConsumer: VertexConsumer,cameraX: number,cameraY: number,cameraZ: number,color: Vector4f): void;
static method_51462(chunkSectionPos: ChunkSectionPos,vertexConsumerProvider: VertexConsumerProvider,matrixStack: MatrixStack,d: number,e: number,f: number,vector4f: Vector4f,x1: number,y1: number,z1: number,x2: number,y2: number,z2: number): void;
static UPDATE_INTERVAL: Duration;
static RADIUS: number;
static READY_SHAPE_COLOR: Vector4f;
static DEFAULT_SHAPE_COLOR: Vector4f;
}

//net.minecraft.client.gui.screen.ingame.EnchantingPhrases
class EnchantingPhrases extends JObject{
 setSeed(seed: long): void;
 generatePhrase(textRenderer: TextRenderer,width: number): StringVisitable;
}
class Static_EnchantingPhrases {
static getInstance(): EnchantingPhrases;
static FONT_ID: Identifier;
static STYLE: Style;
static INSTANCE: EnchantingPhrases;
}

//net.minecraft.world.biome.source.BiomeSupplier
interface BiomeSupplier extends JObject{
 getBiome(x: number,y: number,z: number,noise: MultiNoiseUtil_MultiNoiseSampler): RegistryEntry;
}

//net.minecraft.data.server.advancement.vanilla.VanillaNetherTabAdvancementGenerator
class VanillaNetherTabAdvancementGenerator extends JObject, AdvancementTabGenerator{
 accept(lookup: RegistryWrapper_WrapperLookup,exporter: Consumer): void;
}
class Static_VanillaNetherTabAdvancementGenerator {
static PIGLIN_DISTRACTION_PREDICATE: LootContextPredicate;
}

//net.minecraft.server.command.DatapackCommand
class DatapackCommand extends JObject{
}
class Static_DatapackCommand {
static register(dispatcher: CommandDispatcher): void;
static executeListAvailable(source: ServerCommandSource): number;
static method_51945(): Text;
static method_13116(context: CommandContext): number;
static method_13141(context: CommandContext): number;
static method_51942(): Text;
static method_51943(collection: Collection): Text;
static method_13118(context: CommandContext): number;
static method_13111(context: CommandContext): number;
static method_13137(context: CommandContext): number;
static executeDisable(source: ServerCommandSource,container: ResourcePackProfile): number;
static executeListEnabled(source: ServerCommandSource): number;
static method_51944(list: List): Text;
static method_51946(resourcePackProfile: ResourcePackProfile): Text;
static executeEnable(source: ServerCommandSource,container: ResourcePackProfile,packAdder: DatapackCommand_PackAdder): number;
static method_13130(context: CommandContext): number;
static method_51947(resourcePackProfile: ResourcePackProfile): Text;
static method_29477(collection: Collection,featureSet: FeatureSet,profile: ResourcePackProfile): boolean;
static executeList(source: ServerCommandSource): number;
static method_13123(context: CommandContext): number;
static method_13115(context: CommandContext): number;
static method_13119(source: ServerCommandSource): boolean;
static method_13138(context: CommandContext): number;
static method_13112(commandContext: CommandContext,profiles: List,profile: ResourcePackProfile): void;
static method_29776(collection: Collection,name: string): boolean;
static method_13134(profile: ResourcePackProfile): Text;
static method_45146(name: Object,flags: Object): Message;
static getPackContainer(context: CommandContext,name: string,enable: boolean): ResourcePackProfile;
static method_13132(profile: ResourcePackProfile): Text;
static method_13136(context: CommandContext,builder: SuggestionsBuilder): CompletableFuture;
static method_13131(name: Object): Message;
static method_13139(profiles: List,profile: ResourcePackProfile): void;
static method_13133(commandContext: CommandContext,profiles: List,profile: ResourcePackProfile): void;
static method_13113(profilex: ResourcePackProfile): ResourcePackProfile;
static method_45145(featureSet: FeatureSet,profile: ResourcePackProfile): boolean;
static method_13122(profiles: List,profile: ResourcePackProfile): void;
static method_13120(context: CommandContext,builder: SuggestionsBuilder): CompletableFuture;
static method_13135(name: Object): Message;
static method_13117(name: Object): Message;
static UNKNOWN_DATAPACK_EXCEPTION: DynamicCommandExceptionType;
static ALREADY_ENABLED_EXCEPTION: DynamicCommandExceptionType;
static ALREADY_DISABLED_EXCEPTION: DynamicCommandExceptionType;
static NO_FLAGS_EXCEPTION: Dynamic2CommandExceptionType;
static ENABLED_CONTAINERS_SUGGESTION_PROVIDER: SuggestionProvider;
static DISABLED_CONTAINERS_SUGGESTION_PROVIDER: SuggestionProvider;
}

//net.minecraft.client.search.SearchManager$ProviderGetter
interface SearchManager_ProviderGetter extends JObject, Function{
}

//net.minecraft.test.TestContext
class TestContext extends JObject{
 complete(): void;
 setTime(timeOfDay: number): void;
 getRelative(pos: Vec3d): Vec3d;
 expectEntityAtEnd(type: EntityType,x: number,y: number,z: number): void;
 expectEntityAtEnd(type: EntityType,pos: BlockPos): void;
 testEntity(entity: Entity,predicate: Predicate,testName: string): void;
 addFinalTask(runnable: Runnable): void;
 forceRandomTick(pos: BlockPos): void;
 runAtEveryTick(task: Runnable): void;
 getRelativeTopY(heightmap: Heightmap_Type,x: number,z: number): number;
 testEntityProperty(entity: Entity,propertyGetter: Function,propertyName: string,expectedValue: Object): void;
 addTask(task: Runnable): void;
 getRelativePos(pos: BlockPos): BlockPos;
 assertFalse(condition: boolean,message: string): void;
 useStackOnBlock(player: PlayerEntity,stack: ItemStack,pos: BlockPos,direction: Direction): void;
 forEachRelativePos(posConsumer: Consumer): void;
 assertTrue(condition: boolean,message: string): void;
 checkBlock(pos: BlockPos,predicate: Predicate,errorMessageSupplier: Supplier): void;
 checkBlock(pos: BlockPos,predicate: Predicate,errorMessage: string): void;
 createMockCreativeServerPlayerInWorld(): ServerPlayerEntity;
 getBlockEntity(pos: BlockPos): BlockEntity;
 getWorld(): ServerWorld;
 getBlockState(pos: BlockPos): BlockState;
 setBlockState(pos: BlockPos,block: Block): void;
 setBlockState(pos: BlockPos,state: BlockState): void;
 setBlockState(x: number,y: number,z: number,state: BlockState): void;
 setBlockState(x: number,y: number,z: number,block: Block): void;
 runAtTick(tick: long,runnable: Runnable): void;
 expectRedstonePower(pos: BlockPos,direction: Direction,powerPredicate: IntPredicate,errorMessage: Supplier): void;
 expectEntityWithItem(pos: BlockPos,entityType: EntityType,item: Item): void;
 addFinalTaskWithDuration(duration: number,runnable: Runnable): void;
 expectEntityWithDataEnd(pos: BlockPos,type: EntityType,entityDataGetter: Function,data: Object): void;
 expectEntityHoldingItem(pos: BlockPos,entityType: EntityType,item: Item): void;
 expectEntityWithData(pos: BlockPos,type: EntityType,entityDataGetter: Function,data: Object): void;
 expectEntitiesAround(type: EntityType,pos: BlockPos,amount: number,radius: number): void;
 throwPositionedException(message: string,entity: Entity): void;
 throwPositionedException(message: string,pos: BlockPos): void;
 throwGameTestException(message: string): void;
 expectEntityToTouch(type: EntityType,x: number,y: number,z: number): void;
 expectEmptyContainer(pos: BlockPos): void;
 expectEmptyContainer(delay: long,pos: BlockPos): void;
 dontExpectEntityAtEnd(type: EntityType,pos: BlockPos): void;
 dontExpectEntityAtEnd(type: EntityType,x: number,y: number,z: number): void;
 expectContainerWith(delay: long,pos: BlockPos,item: Item): void;
 expectContainerWith(pos: BlockPos,item: Item): void;
 forEachRemainingTick(runnable: Runnable): void;
 dontExpectEntityToTouch(type: EntityType,x: number,y: number,z: number): void;
 addInstantFinalTask(runnable: Runnable): void;
 createMockSurvivalPlayer(): PlayerEntity;
 expectBlockProperty(pos: BlockPos,property: Property,value: Comparable): void;
 createTimedTaskRunner(): TimedTaskRunner;
 putAndRemoveRedstoneBlock(pos: BlockPos,delay: long): void;
 createMockCreativePlayer(): PlayerEntity;
 drown(entity: LivingEntity): LivingEntity;
 spawnItem(item: Item,pos: BlockPos): ItemEntity;
 spawnItem(item: Item,x: number,y: number,z: number): ItemEntity;
 spawnEntity(type: EntityType,x: number,y: number,z: number): Entity;
 spawnEntity(type: EntityType,x: number,y: number,z: number): Entity;
 spawnEntity(type: EntityType,pos: BlockPos): Entity;
 spawnEntity(type: EntityType,pos: Vec3d): Entity;
 expectSameStates(checkedPos: BlockPos,correctStatePos: BlockPos): void;
 expectSameStates(checkedBlockBox: BlockBox,correctStatePos: BlockPos): void;
 dontExpectEntity(type: EntityType): void;
 dontExpectEntityAt(type: EntityType,x: number,y: number,z: number): void;
 dontExpectEntityAt(type: EntityType,pos: BlockPos): void;
 startMovingTowards(entity: MobEntity,pos: BlockPos,speed: number): TimedTaskRunner;
 spawnMob(type: EntityType,x: number,y: number,z: number): MobEntity;
 spawnMob(type: EntityType,pos: Vec3d): MobEntity;
 spawnMob(type: EntityType,pos: BlockPos): MobEntity;
 spawnMob(type: EntityType,x: number,y: number,z: number): MobEntity;
 getAbsolute(pos: Vec3d): Vec3d;
 killAllEntities(): void;
 killAllEntities(entityClass: Class): void;
 pushButton(pos: BlockPos): void;
 pushButton(x: number,y: number,z: number): void;
 getAbsolutePos(pos: BlockPos): BlockPos;
 removeBlock(pos: BlockPos): void;
 setHealthLow(entity: LivingEntity): LivingEntity;
 toggleLever(x: number,y: number,z: number): void;
 toggleLever(pos: BlockPos): void;
 waitAndRun(ticks: long,runnable: Runnable): void;
 expectBlock(block: Block,x: number,y: number,z: number): void;
 expectBlock(block: Block,pos: BlockPos): void;
 checkBlockState(pos: BlockPos,predicate: Predicate,errorMessageSupplier: Supplier): void;
 useBlock(pos: BlockPos): void;
 useBlock(pos: BlockPos,player: PlayerEntity,result: BlockHitResult): void;
 useBlock(pos: BlockPos,player: PlayerEntity): void;
 useNightTime(): void;
 checkBlockProperty(pos: BlockPos,property: Property,predicate: Predicate,errorMessage: string): void;
 expectBlockAtEnd(block: Block,pos: BlockPos): void;
 expectBlockAtEnd(block: Block,x: number,y: number,z: number): void;
 expectEntity(type: EntityType): void;
 dontExpectBlock(block: Block,pos: BlockPos): void;
 dontExpectBlock(block: Block,x: number,y: number,z: number): void;
 getTick(): long;
 expectItemsAt(item: Item,pos: BlockPos,radius: number,amount: number): void;
 dontExpectItemAt(item: Item,pos: BlockPos,radius: number): void;
 expectEntityAround(type: EntityType,pos: BlockPos,radius: number): void;
 expectEntityAt(type: EntityType,x: number,y: number,z: number): void;
 expectEntityAt(type: EntityType,pos: BlockPos): void;
 expectEntityAt(entity: Entity,pos: BlockPos): void;
 expectEntityAt(entity: Entity,x: number,y: number,z: number): void;
 getEntitiesAround(type: EntityType,pos: BlockPos,radius: number): List;
 expectEntityInside(type: EntityType,pos1: Vec3d,pos2: Vec3d): void;
 expectItemAt(item: Item,pos: BlockPos,radius: number): void;
}
class Static_TestContext {
static method_36055(): Exception;
static method_35979(vec3d: Vec3d,entity: Entity): boolean;
static method_48002(entity: Object): boolean;
static method_36013(vec3d: Vec3d,entity: Entity): boolean;
static method_48000(item: Item,stack: ItemStack): boolean;
static method_52206(entity: Entity): boolean;
static method_36057(): string;
static method_35973(state: BlockState): boolean;
static method_35999(predicate: Predicate,state: BlockState): boolean;
static method_36029(string: string): string;
static method_36020(string: string): string;
static method_36000(property: Property,predicate: Predicate,state: BlockState): boolean;
static method_35974(blockState: BlockState,block: Block,block1: Block): boolean;
static method_35954(entity: Entity,e: Entity): boolean;
}

//net.minecraft.data.DataGenerator
class DataGenerator extends JObject{
 run(): void;
 createVanillaPack(shouldRun: boolean): DataGenerator_Pack;
 createVanillaSubPack(shouldRun: boolean,packName: string): DataGenerator_Pack;
}
class Static_DataGenerator {
static LOGGER: Logger;
}

//net.minecraft.client.render.entity.EntityRenderers
class EntityRenderers extends JObject{
}
class Static_EntityRenderers {
static register(type: EntityType,factory: EntityRendererFactory): void;
static method_32179(context: EntityRendererFactory_Context): EntityRenderer;
static method_32178(context: EntityRendererFactory_Context): EntityRenderer;
static method_32180(context: EntityRendererFactory_Context): EntityRenderer;
static method_32175(builder: ImmutableMap_Builder,context: EntityRendererFactory_Context,type: string,factory: EntityRendererFactory): void;
static method_32174(builder: ImmutableMap_Builder,context: EntityRendererFactory_Context,entityType: EntityType,factory: EntityRendererFactory): void;
static method_32188(context: EntityRendererFactory_Context): EntityRenderer;
static method_32187(context: EntityRendererFactory_Context): EntityRenderer;
static method_32191(context: EntityRendererFactory_Context): EntityRenderer;
static method_32189(context: EntityRendererFactory_Context): EntityRenderer;
static method_32190(context: EntityRendererFactory_Context): EntityRenderer;
static method_32192(context: EntityRendererFactory_Context): EntityRenderer;
static method_33429(context: EntityRendererFactory_Context): EntityRenderer;
static method_32193(context: EntityRendererFactory_Context): EntityRenderer;
static method_32182(context: EntityRendererFactory_Context): EntityRenderer;
static method_32184(context: EntityRendererFactory_Context): EntityRenderer;
static method_32181(context: EntityRendererFactory_Context): EntityRenderer;
static method_32183(context: EntityRendererFactory_Context): EntityRenderer;
static method_32185(context: EntityRendererFactory_Context): EntityRenderer;
static method_32186(context: EntityRendererFactory_Context): EntityRenderer;
static method_33430(context: EntityRendererFactory_Context): EntityRenderer;
static method_45802(context: EntityRendererFactory_Context): EntityRenderer;
static method_32194(context: EntityRendererFactory_Context): EntityRenderer;
static method_32196(context: EntityRendererFactory_Context): EntityRenderer;
static method_42605(context: EntityRendererFactory_Context): EntityRenderer;
static method_32198(context: EntityRendererFactory_Context): EntityRenderer;
static method_42604(context: EntityRendererFactory_Context): EntityRenderer;
static method_32197(context: EntityRendererFactory_Context): EntityRenderer;
static method_32195(context: EntityRendererFactory_Context): EntityRenderer;
static reloadEntityRenderers(ctx: EntityRendererFactory_Context): Map;
static isMissingRendererFactories(): boolean;
static reloadPlayerRenderers(ctx: EntityRendererFactory_Context): Map;
static LOGGER: Logger;
static DEFAULT: string;
static RENDERER_FACTORIES: Map;
static PLAYER_RENDERER_FACTORIES: Map;
}

//net.minecraft.unused.packageinfo.PackageInfo7888
interface PackageInfo7888 extends JObject{
}

//net.minecraft.world.gen.feature.util.FeatureDebugLogger
class FeatureDebugLogger extends JObject{
}
class Static_FeatureDebugLogger {
static clear(): void;
static dump(): void;
static method_39602(string: string,integer: Integer,registry: Registry,featureData: FeatureDebugLogger_FeatureData,count: Integer): void;
static method_39601(featureData: FeatureDebugLogger_FeatureData,count: Integer): Integer;
static method_39600(world: ServerWorld,features: FeatureDebugLogger_Features): void;
static incrementTotalChunksCount(world: ServerWorld): void;
static incrementFeatureCount(world: ServerWorld,configuredFeature: ConfiguredFeature,placedFeature: Optional): void;
static LOGGER: Logger;
static FEATURES: LoadingCache;
}

//net.minecraft.client.realms.RealmsClient
class RealmsClient extends JObject{
 update(worldId: long,name: string,motd: string): void;
 join(worldId: long): RealmsServerAddress;
 close(worldId: long): Boolean;
 open(worldId: long): Boolean;
 op(worldId: long,profileUuid: string): Ops;
 upload(worldId: long,token: string): UploadInfo;
 download(worldId: long,slotId: number): WorldDownload;
 listNotifications(): List;
 getOwnWorld(worldId: long): RealmsServer;
 listWorlds(): RealmsServerList;
 initializeWorld(worldId: long,name: string,motd: string): void;
 mcoEnabled(): Boolean;
 uninviteMyselfFrom(worldId: long): void;
 stageAvailable(): Boolean;
 clientCompatible(): RealmsClient_CompatibleVersionResponse;
 backupsFor(worldId: long): BackupList;
 getLiveStats(): RealmsServerPlayerLists;
 invite(worldId: long,profileName: string): RealmsServer;
 uninvite(worldId: long,profileUuid: string): void;
 resetWorldWithSeed(worldId: long,resetWorldInfo: ResetWorldInfo): Boolean;
 pendingInvites(): PendingInvitesList;
 switchSlot(worldId: long,slot: number): boolean;
 deop(worldId: long,profileUuid: string): Ops;
 subscriptionFor(worldId: long): Subscription;
 restoreWorld(worldId: long,backupId: string): void;
 getNews(): RealmsNews;
 agreeToTos(): void;
 trialAvailable(): Boolean;
 sendPingResults(pingResult: PingResult): void;
 acceptInvitation(invitationId: string): void;
 rejectInvitation(invitationId: string): void;
 deleteWorld(worldId: long): void;
 updateSlot(worldId: long,slot: number,options: RealmsWorldOptions): void;
 putIntoMinigameMode(worldId: long,minigameId: string): Boolean;
 fetchWorldTemplates(page: number,pageSize: number,type: RealmsServer_WorldType): WorldTemplatePaginatedList;
 dismissNotifications(notifications: List): void;
 markNotificationsAsSeen(notifications: List): void;
 getPlayerActivities(worldId: long): PlayerActivities;
 resetWorldWithTemplate(worldId: long,worldTemplateId: string): Boolean;
 pendingInvitesCount(): number;
}
class Static_RealmsClient {
static create(): RealmsClient;
static getErrorMessage(httpResultCode: number): string;
static method_52214(): Optional;
static createRealmsClient(client: MinecraftClient): RealmsClient;
static method_52213(environment: RealmsClient_Environment): void;
static toJsonArray(uuids: List): JsonArray;
static switchToProd(): void;
static switchToStage(): void;
static switchToLocal(): void;
static currentEnvironment: RealmsClient_Environment;
static initialized: boolean;
static LOGGER: Logger;
static WORLDS_ENDPOINT: string;
static INVITES_ENDPOINT: string;
static MCO_ENDPOINT: string;
static SUBSCRIPTIONS_ENDPOINT: string;
static ACTIVITIES_ENDPOINT: string;
static OPS_ENDPOINT: string;
static PING_STAT_ENDPOINT: string;
static TRIAL_ENDPOINT: string;
static NOTIFICATIONS_ENDPOINT: string;
static WORLD_INITIALIZE_ENDPOINT: string;
static WORLD_ENDPOINT: string;
static LIVEPLAYERLIST_ENDPOINT: string;
static WORLD_ENDPOINT_2: string;
static WORLD_PROFILE_ENDPOINT: string;
static MINIGAMES_ENDPOINT: string;
static AVAILABLE_ENDPOINT: string;
static TEMPLATES_ENDPOINT: string;
static JOIN_PC_ENDPOINT: string;
static ID_ENDPOINT: string;
static WORLD_ENDPOINT_3: string;
static INVITE_ENDPOINT: string;
static COUNT_PENDING_ENDPOINT: string;
static PENDING_ENDPOINT: string;
static ACCEPT_INVITATION_ENDPOINT: string;
static REJECT_INVITATION_ENDPOINT: string;
static WORLD_ENDPOINT_4: string;
static WORLD_ENDPOINT_5: string;
static WORLD_SLOT_ENDPOINT: string;
static WORLD_OPEN_ENDPOINT: string;
static WORLD_CLOSE_ENDPOINT: string;
static WORLD_RESET_ENDPOINT: string;
static WORLD_ENDPOINT_6: string;
static WORLD_BACKUPS_ENDPOINT: string;
static WORLD_SLOT_DOWNLOAD_ENDPOINT: string;
static WORLD_BACKUPS_UPLOAD_ENDPOINT: string;
static CLIENT_COMPATIBLE_ENDPOINT: string;
static TOS_AGREED_ENDPOINT: string;
static NEWS_ENDPOINT: string;
static SEEN_ENDPOINT: string;
static DISMISS_ENDPOINT: string;
static STAGE_AVAILABLE_ENDPOINT: string;
static JSON: CheckedGson;
}

//net.minecraft.server.command.MessageCommand
class MessageCommand extends JObject{
}
class Static_MessageCommand {
static register(dispatcher: CommandDispatcher): void;
static execute(source: ServerCommandSource,targets: Collection,message: SignedMessage): void;
static method_13463(context: CommandContext): number;
static method_45153(commandContext: CommandContext,collection: Collection,message: SignedMessage): void;
}

//net.minecraft.util.WinNativeModuleUtil$NativeModule
class WinNativeModuleUtil_NativeModule extends JObject{
 toString(): string;
 path: string;
 info: Optional;
}

//net.minecraft.client.particle.WaterSuspendParticle$WarpedSporeFactory
class WaterSuspendParticle_WarpedSporeFactory extends JObject, ParticleFactory{
 createParticle(defaultParticleType: DefaultParticleType,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
 createParticle(particleEffect: ParticleEffect,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
}

//net.minecraft.data.server.advancement.vanilla.VanillaAdvancementProviders
class VanillaAdvancementProviders extends JObject{
}
class Static_VanillaAdvancementProviders {
static createVanillaProvider(output: DataOutput,registryLookupFuture: CompletableFuture): AdvancementProvider;
}

//net.minecraft.client.font.TextRenderer$Drawer
class TextRenderer_Drawer extends JObject, CharacterVisitor{
 accept(i: number,style: Style,j: number): boolean;
 drawLayer(underlineColor: number,x: number): number;
}

//net.minecraft.client.texture.ResourceTexture$TextureData
class ResourceTexture_TextureData extends JObject, Closeable{
 close(): void;
 checkException(): void;
 getImage(): NativeImage;
 getMetadata(): TextureResourceMetadata;
}
class Static_ResourceTexture_TextureData {
static load(resourceManager: ResourceManager,id: Identifier): ResourceTexture_TextureData;
}

//net.minecraft.network.packet.s2c.play.BossBarS2CPacket$Consumer
interface BossBarS2CPacket_Consumer extends JObject{
 add(uuid: UUID,name: Text,percent: number,color: BossBar_Color,style: BossBar_Style,darkenSky: boolean,dragonMusic: boolean,thickenFog: boolean): void;
 remove(uuid: UUID): void;
 updateStyle(id: UUID,color: BossBar_Color,style: BossBar_Style): void;
 updateProperties(uuid: UUID,darkenSky: boolean,dragonMusic: boolean,thickenFog: boolean): void;
 updateProgress(uuid: UUID,percent: number): void;
 updateName(uuid: UUID,name: Text): void;
}

//net.minecraft.client.color.world.GrassColors
class GrassColors extends JObject{
}
class Static_GrassColors {
static setColorMap(map: number[]): void;
static getDefaultColor(): number;
static getColor(temperature: number,humidity: number): number;
static colorMap: number[];
}

//net.minecraft.client.font.GlyphRenderer
class GlyphRenderer extends JObject{
 getLayer(layerType: TextRenderer_TextLayerType): RenderLayer;
 drawRectangle(rectangle: GlyphRenderer_Rectangle,matrix: Matrix4f,vertexConsumer: VertexConsumer,light: number): void;
 draw(italic: boolean,x: number,y: number,matrix: Matrix4f,vertexConsumer: VertexConsumer,red: number,green: number,blue: number,alpha: number,light: number): void;
}

//net.minecraft.structure.IglooGenerator
class IglooGenerator extends JObject{
}
class Static_IglooGenerator {
static addPieces(manager: StructureTemplateManager,pos: BlockPos,rotation: BlockRotation,holder: StructurePiecesHolder,random: Random): void;
static OFFSET_Y: number;
static TOP_TEMPLATE: Identifier;
static MIDDLE_TEMPLATE: Identifier;
static BOTTOM_TEMPLATE: Identifier;
static OFFSETS: Map;
static OFFSETS_FROM_TOP: Map;
}

//net.minecraft.datafixer.mapping.LegacyDyeItemMapping
class LegacyDyeItemMapping extends JObject{
}
class Static_LegacyDyeItemMapping {
static MAP: Map;
}

//net.minecraft.entity.EntityDimensions
class EntityDimensions extends JObject{
 toString(): string;
 scaled(widthRatio: number,heightRatio: number): EntityDimensions;
 scaled(ratio: number): EntityDimensions;
 getBoxAt(x: number,y: number,z: number): Box;
 getBoxAt(pos: Vec3d): Box;
 width: number;
 height: number;
 fixed: boolean;
}
class Static_EntityDimensions {
static fixed(width: number,height: number): EntityDimensions;
static changing(width: number,height: number): EntityDimensions;
}

//net.minecraft.loot.provider.nbt.LootNbtProvider
interface LootNbtProvider extends JObject{
 getType(): LootNbtProviderType;
 getRequiredParameters(): Set;
 getNbt(context: LootContext): NbtElement;
}

//net.minecraft.entity.Bucketable
interface Bucketable extends JObject{
 getBucketFillSound(): SoundEvent;
 getBucketItem(): ItemStack;
 isFromBucket(): boolean;
 setFromBucket(fromBucket: boolean): void;
 copyDataToStack(stack: ItemStack): void;
 copyDataFromNbt(nbt: NbtCompound): void;
}
class Static_Bucketable {
static copyDataToStack(entity: MobEntity,stack: ItemStack): void;
static copyDataFromNbt(entity: MobEntity,nbt: NbtCompound): void;
static tryBucket(player: PlayerEntity,hand: Hand,entity: LivingEntity): Optional;
}

//net.minecraft.client.gl.GlTimer$Query
class GlTimer_Query extends JObject{
 close(): void;
 isResultAvailable(): boolean;
 queryResult(): long;
}
class Static_GlTimer_Query {
static MISSING: long;
static CLOSED: long;
}

//net.minecraft.client.render.entity.animation.Transformation$Interpolation
interface Transformation_Interpolation extends JObject{
 apply(dest: Vector3f,delta: number,keyframes: Keyframe[],start: number,end: number,scale: number): Vector3f;
}

//net.minecraft.entity.attribute.DefaultAttributeContainer
class DefaultAttributeContainer extends JObject{
 getValue(attribute: EntityAttribute): number;
 has(type: EntityAttribute): boolean;
 getBaseValue(attribute: EntityAttribute): number;
 hasModifier(type: EntityAttribute,uuid: UUID): boolean;
 getModifierValue(attribute: EntityAttribute,uuid: UUID): number;
 createOverride(updateCallback: Consumer,attribute: EntityAttribute): EntityAttributeInstance;
}
class Static_DefaultAttributeContainer {
static builder(): DefaultAttributeContainer_Builder;
}

//net.minecraft.client.sound.Channel$SourceManager
class Channel_SourceManager extends JObject{
 run(action: Consumer): void;
 close(): void;
 isStopped(): boolean;
}

//net.minecraft.network.packet.s2c.play.WorldBorderInterpolateSizeS2CPacket
class WorldBorderInterpolateSizeS2CPacket extends JObject, Packet{
 apply(clientPlayPacketListener: ClientPlayPacketListener): void;
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
 getSize(): number;
 getSizeLerpTime(): long;
 getSizeLerpTarget(): number;
}

//net.minecraft.network.PacketBundleHandler$BundlerGetter
interface PacketBundleHandler_BundlerGetter extends JObject{
 getBundler(side: NetworkSide): PacketBundleHandler;
}

//net.minecraft.client.world.ClientWorld$Properties
class ClientWorld_Properties extends JObject, MutableWorldProperties{
 getTime(): long;
 setTime(time: long): void;
 setTimeOfDay(timeOfDay: long): void;
 getTimeOfDay(): long;
 setDifficultyLocked(difficultyLocked: boolean): void;
 isDifficultyLocked(): boolean;
 setDifficulty(difficulty: Difficulty): void;
 setSpawnPos(pos: BlockPos,angle: number): void;
 setRaining(raining: boolean): void;
 isHardcore(): boolean;
 getDifficulty(): Difficulty;
 populateCrashReport(reportSection: CrashReportSection,world: HeightLimitView): void;
 getSpawnX(): number;
 getSpawnY(): number;
 getSpawnAngle(): number;
 getSpawnZ(): number;
 setSpawnX(spawnX: number): void;
 setSpawnZ(spawnZ: number): void;
 setSpawnAngle(spawnAngle: number): void;
 setSpawnY(spawnY: number): void;
 isRaining(): boolean;
 isThundering(): boolean;
 getGameRules(): GameRules;
 getHorizonShadingRatio(): number;
 getSkyDarknessHeight(world: HeightLimitView): number;
}

//net.minecraft.client.tutorial.TutorialManager
class TutorialManager extends JObject{
 add(toast: TutorialToast,ticks: number): void;
 remove(toast: TutorialToast): void;
 tick(): void;
 tick(world: ClientWorld,hitResult: HitResult): void;
 onUpdateMouse(deltaX: number,deltaY: number): void;
 destroyHandler(): void;
 createHandler(): void;
 onBlockBreaking(world: ClientWorld,pos: BlockPos,state: BlockState,progress: number): void;
 setStep(step: TutorialStep): void;
 onMovement(input: Input): void;
 onInventoryOpened(): void;
 isInSurvival(): boolean;
 onSlotUpdate(stack: ItemStack): void;
 onPickupSlotClick(cursorStack: ItemStack,slotStack: ItemStack,clickType: ClickType): void;
 getClient(): MinecraftClient;
}
class Static_TutorialManager {
static method_31366(tutorialToast: TutorialToast,entry: TutorialManager_Entry): boolean;
static keyToText(name: string): Text;
}

//net.minecraft.world.gen.feature.DefaultBiomeFeatures
class DefaultBiomeFeatures extends JObject{
}
class Static_DefaultBiomeFeatures {
static addDungeons(builder: GenerationSettings_LookupBackedBuilder): void;
static addMineables(builder: GenerationSettings_LookupBackedBuilder): void;
static addLandCarvers(builder: GenerationSettings_LookupBackedBuilder): void;
static addSculk(builder: GenerationSettings_LookupBackedBuilder): void;
static addDefaultOres(builder: GenerationSettings_LookupBackedBuilder,largeCopperOreBlob: boolean): void;
static addDefaultOres(builder: GenerationSettings_LookupBackedBuilder): void;
static addDripstone(builder: GenerationSettings_LookupBackedBuilder): void;
static addDefaultDisks(builder: GenerationSettings_LookupBackedBuilder): void;
static addBamboo(builder: GenerationSettings_LookupBackedBuilder): void;
static addClayDisk(builder: GenerationSettings_LookupBackedBuilder): void;
static addTaigaTrees(builder: GenerationSettings_LookupBackedBuilder): void;
static addGroveTrees(builder: GenerationSettings_LookupBackedBuilder): void;
static addEmeraldOre(builder: GenerationSettings_LookupBackedBuilder): void;
static addExtraGoldOre(builder: GenerationSettings_LookupBackedBuilder): void;
static addMossyRocks(builder: GenerationSettings_LookupBackedBuilder): void;
static addLargeFerns(builder: GenerationSettings_LookupBackedBuilder): void;
static addInfestedStone(builder: GenerationSettings_LookupBackedBuilder): void;
static addJungleTrees(builder: GenerationSettings_LookupBackedBuilder): void;
static addJungleGrass(builder: GenerationSettings_LookupBackedBuilder): void;
static addClayOre(builder: GenerationSettings_LookupBackedBuilder): void;
static addSavannaGrass(builder: GenerationSettings_LookupBackedBuilder): void;
static addForestTrees(builder: GenerationSettings_LookupBackedBuilder): void;
static addBadlandsGrass(builder: GenerationSettings_LookupBackedBuilder): void;
static addForestFlowers(builder: GenerationSettings_LookupBackedBuilder): void;
static addBirchTrees(builder: GenerationSettings_LookupBackedBuilder): void;
static addSavannaTrees(builder: GenerationSettings_LookupBackedBuilder): void;
static addTallBirchTrees(builder: GenerationSettings_LookupBackedBuilder): void;
static addDefaultGrass(builder: GenerationSettings_LookupBackedBuilder): void;
static addForestGrass(builder: GenerationSettings_LookupBackedBuilder): void;
static addTaigaGrass(builder: GenerationSettings_LookupBackedBuilder): void;
static addSwampFeatures(builder: GenerationSettings_LookupBackedBuilder): void;
static addPlainsFeatures(builder: GenerationSettings_LookupBackedBuilder): void;
static addDefaultFlowers(builder: GenerationSettings_LookupBackedBuilder): void;
static addMeadowFlowers(builder: GenerationSettings_LookupBackedBuilder): void;
static addGiantTaigaGrass(builder: GenerationSettings_LookupBackedBuilder): void;
static addDesertFeatures(builder: GenerationSettings_LookupBackedBuilder): void;
static addFossils(builder: GenerationSettings_LookupBackedBuilder): void;
static addKelp(builder: GenerationSettings_LookupBackedBuilder): void;
static addSparseMelons(builder: GenerationSettings_LookupBackedBuilder): void;
static addSeagrassOnStone(builder: GenerationSettings_LookupBackedBuilder): void;
static addVines(builder: GenerationSettings_LookupBackedBuilder): void;
static addLessKelp(builder: GenerationSettings_LookupBackedBuilder): void;
static addSprings(builder: GenerationSettings_LookupBackedBuilder): void;
static addPlainsTallGrass(builder: GenerationSettings_LookupBackedBuilder): void;
static addSwampVegetation(builder: GenerationSettings_LookupBackedBuilder): void;
static addMelons(builder: GenerationSettings_LookupBackedBuilder): void;
static addNetherMineables(builder: GenerationSettings_LookupBackedBuilder): void;
static addAncientDebris(builder: GenerationSettings_LookupBackedBuilder): void;
static addAmethystGeodes(builder: GenerationSettings_LookupBackedBuilder): void;
static addFrozenTopLayer(builder: GenerationSettings_LookupBackedBuilder): void;
static addMonsters(builder: SpawnSettings_Builder,zombieWeight: number,zombieVillagerWeight: number,skeletonWeight: number,drowned: boolean): void;
static addIcebergs(builder: GenerationSettings_LookupBackedBuilder): void;
static addOceanMobs(builder: SpawnSettings_Builder,squidWeight: number,squidMaxGroupSize: number,codWeight: number): void;
static addFarmAnimals(builder: SpawnSettings_Builder): void;
static addBlueIce(builder: GenerationSettings_LookupBackedBuilder): void;
static addCaveMobs(builder: SpawnSettings_Builder): void;
static addBatsAndMonsters(builder: SpawnSettings_Builder): void;
static addWarmOceanMobs(builder: SpawnSettings_Builder,squidWeight: number,squidMinGroupSize: number): void;
static addDesertMobs(builder: SpawnSettings_Builder): void;
static addPlainsMobs(builder: SpawnSettings_Builder): void;
static addSnowyMobs(builder: SpawnSettings_Builder): void;
static addMushroomMobs(builder: SpawnSettings_Builder): void;
static addJungleMobs(builder: SpawnSettings_Builder): void;
static addEndMobs(builder: SpawnSettings_Builder): void;
static addGrassAndClayDisks(builder: GenerationSettings_LookupBackedBuilder): void;
static addSweetBerryBushesSnowy(builder: GenerationSettings_LookupBackedBuilder): void;
static addWaterBiomeOakTrees(builder: GenerationSettings_LookupBackedBuilder): void;
static addExtraSavannaTrees(builder: GenerationSettings_LookupBackedBuilder): void;
static addLushCavesDecoration(builder: GenerationSettings_LookupBackedBuilder): void;
static addBambooJungleTrees(builder: GenerationSettings_LookupBackedBuilder): void;
static addWindsweptHillsTrees(builder: GenerationSettings_LookupBackedBuilder): void;
static addWindsweptForestTrees(builder: GenerationSettings_LookupBackedBuilder): void;
static addSweetBerryBushes(builder: GenerationSettings_LookupBackedBuilder): void;
static addSparseJungleTrees(builder: GenerationSettings_LookupBackedBuilder): void;
static addMushroomFieldsFeatures(builder: GenerationSettings_LookupBackedBuilder): void;
static addSavannaTallGrass(builder: GenerationSettings_LookupBackedBuilder): void;
static addMangroveSwampFeatures(builder: GenerationSettings_LookupBackedBuilder): void;
static addExtraDefaultFlowers(builder: GenerationSettings_LookupBackedBuilder): void;
static addCherryGroveFeatures(builder: GenerationSettings_LookupBackedBuilder): void;
static addSnowySpruceTrees(builder: GenerationSettings_LookupBackedBuilder): void;
static addBadlandsVegetation(builder: GenerationSettings_LookupBackedBuilder): void;
static addDefaultVegetation(builder: GenerationSettings_LookupBackedBuilder): void;
static addDefaultMushrooms(builder: GenerationSettings_LookupBackedBuilder): void;
static addDripstoneCaveMobs(builder: SpawnSettings_Builder): void;
static addBadlandsPlateauTrees(builder: GenerationSettings_LookupBackedBuilder): void;
static addDesertVegetation(builder: GenerationSettings_LookupBackedBuilder): void;
static addFrozenLavaSpring(builder: GenerationSettings_LookupBackedBuilder): void;
static addDesertDeadBushes(builder: GenerationSettings_LookupBackedBuilder): void;
static addWindsweptSavannaGrass(builder: GenerationSettings_LookupBackedBuilder): void;
}

//net.minecraft.loot.LootTableReporter
class LootTableReporter extends JObject{
 makeChild(name: string,currentKey: LootDataKey): LootTableReporter;
 makeChild(name: string): LootTableReporter;
 report(message: string): void;
 validateContext(contextAware: LootContextAware): void;
 withContextType(contextType: LootContextType): LootTableReporter;
 getMessages(): Multimap;
 getDataLookup(): LootDataLookup;
 isInStack(key: LootDataKey): boolean;
}
class Static_LootTableReporter {
static method_362(): string;
}

//net.minecraft.world.gen.treedecorator.TreeDecoratorType
class TreeDecoratorType extends JObject{
 getCodec(): Codec;
}
class Static_TreeDecoratorType {
static register(id: string,codec: Codec): TreeDecoratorType;
static TRUNK_VINE: TreeDecoratorType;
static LEAVE_VINE: TreeDecoratorType;
static COCOA: TreeDecoratorType;
static BEEHIVE: TreeDecoratorType;
static ALTER_GROUND: TreeDecoratorType;
static ATTACHED_TO_LEAVES: TreeDecoratorType;
}

//net.minecraft.network.packet.BundlePacket
class BundlePacket extends JObject, Packet{
 write(buf: PacketByteBuf): void;
 getPackets(): Iterable;
}

//net.minecraft.command.argument.RegistryEntryPredicateArgumentType$Serializer$Properties
class RegistryEntryPredicateArgumentType_Serializer_Properties extends JObject, ArgumentSerializer_ArgumentTypeProperties{
 createType(commandRegistryAccess: CommandRegistryAccess): ArgumentType;
 createType(commandRegistryAccess: CommandRegistryAccess): RegistryEntryPredicateArgumentType;
 getSerializer(): ArgumentSerializer;
}

//net.minecraft.util.profiler.ProfileResultImpl$1


//net.minecraft.client.gui.tooltip.OrderedTextTooltipComponent
class OrderedTextTooltipComponent extends JObject, TooltipComponent{
 getWidth(textRenderer: TextRenderer): number;
 getHeight(): number;
 drawText(textRenderer: TextRenderer,x: number,y: number,matrix: Matrix4f,vertexConsumers: VertexConsumerProvider_Immediate): void;
}

//net.minecraft.block.DoubleBlockProperties$PropertyRetriever
interface DoubleBlockProperties_PropertyRetriever extends JObject{
 getFrom(single: Object): Object;
 getFromBoth(first: Object,second: Object): Object;
 getFallback(): Object;
}

//net.minecraft.client.gui.screen.StatsScreen$ItemStatsListWidget$ItemComparator
class StatsScreen_ItemStatsListWidget_ItemComparator extends JObject, Comparator{
 compare(entry: StatsScreen_ItemStatsListWidget_Entry,entry2: StatsScreen_ItemStatsListWidget_Entry): number;
 compare(a: Object,b: Object): number;
}

//net.minecraft.client.gui.RotatingCubeMapRenderer
class RotatingCubeMapRenderer extends JObject{
 render(delta: number,alpha: number): void;
}
class Static_RotatingCubeMapRenderer {
static wrapOnce(a: number,b: number): number;
}

//net.minecraft.network.message.MessageChain$Packer
interface MessageChain_Packer extends JObject{
 pack(body: MessageBody): MessageSignatureData;
}
class Static_MessageChain_Packer {
static method_46316(body: MessageBody): MessageSignatureData;
static NONE: MessageChain_Packer;
}

//net.minecraft.nbt.NbtIo
class NbtIo extends JObject{
}
class Static_NbtIo {
static write(nbt: NbtCompound,file: File): void;
static write(nbt: NbtCompound,output: DataOutput): void;
static write(nbt: NbtElement,output: DataOutput): void;
static read(input: DataInput,tracker: NbtTagSizeTracker): NbtCompound;
static read(input: DataInput,depth: number,tracker: NbtTagSizeTracker): NbtElement;
static read(file: File): NbtCompound;
static read(input: DataInput): NbtCompound;
static scan(input: DataInput,scanner: NbtScanner): void;
static decompress(stream: InputStream): DataInputStream;
static writeCompressed(nbt: NbtCompound,stream: OutputStream): void;
static writeCompressed(nbt: NbtCompound,file: File): void;
static readCompressed(file: File): NbtCompound;
static readCompressed(stream: InputStream): NbtCompound;
static scanCompressed(file: File,scanner: NbtScanner): void;
static scanCompressed(stream: InputStream,scanner: NbtScanner): void;
}

//net.minecraft.util.JsonSerializing$GsonSerializer
class JsonSerializing_GsonSerializer extends JObject, JsonDeserializer, JsonSerializer{
 deserialize(json: JsonElement,type: Type,context: JsonDeserializationContext): Object;
 serialize(object: Object,type: Type,context: JsonSerializationContext): JsonElement;
}

//net.minecraft.village.TradeOffer
class TradeOffer extends JObject{
 use(): void;
 disable(): void;
 toNbt(): NbtCompound;
 getSellItem(): ItemStack;
 getMaxUses(): number;
 getDemandBonus(): number;
 clearSpecialPrice(): void;
 getUses(): number;
 getSpecialPrice(): number;
 setSpecialPrice(specialPrice: number): void;
 updateDemandBonus(): void;
 getSecondBuyItem(): ItemStack;
 getPriceMultiplier(): number;
 isDisabled(): boolean;
 hasBeenUsed(): boolean;
 resetUses(): void;
 copySellItem(): ItemStack;
 depleteBuyItems(firstBuyStack: ItemStack,secondBuyStack: ItemStack): boolean;
 matchesBuyItems(first: ItemStack,second: ItemStack): boolean;
 getOriginalFirstBuyItem(): ItemStack;
 getMerchantExperience(): number;
 increaseSpecialPrice(increment: number): void;
 getAdjustedFirstBuyItem(): ItemStack;
 shouldRewardPlayerExperience(): boolean;
}

//net.minecraft.command.argument.serialize.LongArgumentSerializer
class LongArgumentSerializer extends JObject, ArgumentSerializer{
 getArgumentTypeProperties(argumentType: ArgumentType): ArgumentSerializer_ArgumentTypeProperties;
 getArgumentTypeProperties(longArgumentType: LongArgumentType): LongArgumentSerializer_Properties;
 fromPacket(buf: PacketByteBuf): ArgumentSerializer_ArgumentTypeProperties;
 fromPacket(packetByteBuf: PacketByteBuf): LongArgumentSerializer_Properties;
 writePacket(properties: ArgumentSerializer_ArgumentTypeProperties,buf: PacketByteBuf): void;
 writePacket(properties: LongArgumentSerializer_Properties,packetByteBuf: PacketByteBuf): void;
 writeJson(properties: LongArgumentSerializer_Properties,jsonObject: JsonObject): void;
 writeJson(properties: ArgumentSerializer_ArgumentTypeProperties,json: JsonObject): void;
}

//net.minecraft.item.ItemStack
class ItemStack extends JObject, FabricItemStack{
 getName(): Text;
 toString(): string;
 isEmpty(): boolean;
 split(amount: number): ItemStack;
 increment(amount: number): void;
 copy(): ItemStack;
 getCount(): number;
 getItem(): Item;
 use(world: World,user: PlayerEntity,hand: Hand): TypedActionResult;
 decrement(amount: number): void;
 getMaxUseTime(): number;
 getUseAction(): UseAction;
 getAttributeModifiers(slot: EquipmentSlot): Multimap;
 getDamage(): number;
 itemMatches(itemEntry: RegistryEntry): boolean;
 itemMatches(predicate: Predicate): boolean;
 setSubNbt(key: string,element: NbtElement): void;
 hasCustomName(): boolean;
 getRarity(): Rarity;
 setCustomName(name: Text): ItemStack;
 getSubNbt(key: string): NbtCompound;
 getMaxDamage(): number;
 hasNbt(): boolean;
 isDamaged(): boolean;
 getOrCreateNbt(): NbtCompound;
 damage(amount: number,entity: LivingEntity,breakCallback: Consumer): void;
 damage(amount: number,random: Random,player: ServerPlayerEntity): boolean;
 toHoverableText(): Text;
 isIn(tag: TagKey): boolean;
 canDestroy(blockRegistry: Registry,pos: CachedBlockPosition): boolean;
 canPlaceOn(blockRegistry: Registry,pos: CachedBlockPosition): boolean;
 hasGlint(): boolean;
 isSuitableFor(state: BlockState): boolean;
 isOf(item: Item): boolean;
 getMaxCount(): number;
 setCount(count: number): void;
 copyWithCount(count: number): ItemStack;
 setDamage(damage: number): void;
 isDamageable(): boolean;
 copyAndEmpty(): ItemStack;
 getTooltipData(): Optional;
 isItemBarVisible(): boolean;
 postMine(world: World,state: BlockState,pos: BlockPos,miner: PlayerEntity): void;
 useOnEntity(user: PlayerEntity,entity: LivingEntity,hand: Hand): ActionResult;
 inventoryTick(world: World,entity: Entity,slot: number,selected: boolean): void;
 onCraft(world: World,player: PlayerEntity,amount: number): void;
 getItemBarColor(): number;
 finishUsing(world: World,user: LivingEntity): ItemStack;
 postHit(target: LivingEntity,attacker: PlayerEntity): void;
 getItemBarStep(): number;
 isUsedOnRelease(): boolean;
 getEnchantments(): NbtList;
 onStoppedUsing(world: World,user: LivingEntity,remainingUseTicks: number): void;
 removeSubNbt(key: string): void;
 getOrCreateSubNbt(key: string): NbtCompound;
 removeCustomName(): void;
 isEnchantable(): boolean;
 hasEnchantments(): boolean;
 addHideFlag(tooltipSection: ItemStack_TooltipSection): void;
 getRepairCost(): number;
 getDrinkSound(): SoundEvent;
 getEatSound(): SoundEvent;
 setRepairCost(repairCost: number): void;
 isInFrame(): boolean;
 usageTick(world: World,user: LivingEntity,remainingUseTicks: number): void;
 setHolder(holder: Entity): void;
 addEnchantment(enchantment: Enchantment,level: number): void;
 getHolder(): Entity;
 getBobbingAnimationTime(): number;
 setBobbingAnimationTime(bobbingAnimationTime: number): void;
 useOnBlock(context: ItemUsageContext): ActionResult;
 getFrame(): ItemFrameEntity;
 isItemEnabled(enabledFeatures: FeatureSet): boolean;
 onStackClicked(slot: Slot,clickType: ClickType,player: PlayerEntity): boolean;
 onClicked(stack: ItemStack,slot: Slot,clickType: ClickType,player: PlayerEntity,cursorStackReference: StackReference): boolean;
 isStackable(): boolean;
 setNbt(nbt: NbtCompound): void;
 getNbt(): NbtCompound;
 streamTags(): Stream;
 getRegistryEntry(): RegistryEntry;
 writeNbt(nbt: NbtCompound): NbtCompound;
 getTooltip(player: PlayerEntity,context: TooltipContext): List;
 isFood(): boolean;
 getMiningSpeedMultiplier(state: BlockState): number;
 onItemEntityDestroyed(entity: ItemEntity): void;
 addAttributeModifier(attribute: EntityAttribute,modifier: EntityAttributeModifier,slot: EquipmentSlot): void;
 getTranslationKey(): string;
}
class Static_ItemStack {
static areEqual(left: ItemStack,right: ItemStack): boolean;
static areItemsEqual(left: ItemStack,right: ItemStack): boolean;
static canCombine(stack: ItemStack,otherStack: ItemStack): boolean;
static appendEnchantments(tooltip: List,enchantments: NbtList): void;
static isSectionVisible(flags: number,tooltipSection: ItemStack_TooltipSection): boolean;
static method_41404(blockResult: BlockArgumentParser_BlockResult): List;
static method_41405(tagResult: BlockArgumentParser_TagResult): List;
static parseBlockTag(tag: string): Collection;
static method_17869(list: List,nbtCompound: NbtCompound,e: Enchantment): void;
static method_26963(decimalFormat: DecimalFormat): void;
static method_28377(stack: ItemStack): Optional;
static method_28376(instance: RecordCodecBuilder_Instance): App;
static method_41408(registryEntry: RegistryEntry): MutableText;
static fromNbt(nbt: NbtCompound): ItemStack;
static CODEC: Codec;
static LOGGER: Logger;
static EMPTY: ItemStack;
static MODIFIER_FORMAT: DecimalFormat;
static ENCHANTMENTS_KEY: string;
static DISPLAY_KEY: string;
static NAME_KEY: string;
static LORE_KEY: string;
static DAMAGE_KEY: string;
static COLOR_KEY: string;
static UNBREAKABLE_KEY: string;
static REPAIR_COST_KEY: string;
static CAN_DESTROY_KEY: string;
static CAN_PLACE_ON_KEY: string;
static HIDE_FLAGS_KEY: string;
static DISABLED_TEXT: Text;
static field_30903: number;
static LORE_STYLE: Style;
}

//net.minecraft.structure.pool.StructurePoolBasedGenerator$StructurePoolGenerator
class StructurePoolBasedGenerator_StructurePoolGenerator extends JObject{
}
class Static_StructurePoolBasedGenerator_StructurePoolGenerator {
static method_46730(key: RegistryKey): string;
static getPoolKey(blockInfo: StructureTemplate_StructureBlockInfo): RegistryKey;
static method_31115(entry: RegistryEntry): RegistryEntry;
}

//net.minecraft.server.command.DifficultyCommand
class DifficultyCommand extends JObject{
}
class Static_DifficultyCommand {
static register(dispatcher: CommandDispatcher): void;
static execute(source: ServerCommandSource,difficulty: Difficulty): number;
static method_13172(source: ServerCommandSource): boolean;
static method_13171(context: CommandContext): number;
static method_13174(difficulty: Difficulty,context: CommandContext): number;
static method_51955(difficulty: Difficulty): Text;
static method_13170(difficulty: Object): Message;
static method_51956(difficulty: Difficulty): Text;
static FAILURE_EXCEPTION: DynamicCommandExceptionType;
}

//net.minecraft.client.gl.GlProgramManager
class GlProgramManager extends JObject{
}
class Static_GlProgramManager {
static deleteProgram(program: ShaderProgramSetupView): void;
static createProgram(): number;
static linkProgram(program: ShaderProgramSetupView): void;
static useProgram(program: number): void;
static LOGGER: Logger;
}

//net.minecraft.block.ChiseledBookshelfBlock$1


//net.minecraft.network.packet.c2s.play.UpdateJigsawC2SPacket
class UpdateJigsawC2SPacket extends JObject, Packet{
 getName(): Identifier;
 apply(listener: PacketListener): void;
 apply(serverPlayPacketListener: ServerPlayPacketListener): void;
 write(buf: PacketByteBuf): void;
 getTarget(): Identifier;
 getPool(): Identifier;
 getJointType(): JigsawBlockEntity_Joint;
 getFinalState(): string;
 getPos(): BlockPos;
}

//net.minecraft.command.argument.ColumnPosArgumentType
class ColumnPosArgumentType extends JObject, ArgumentType{
 parse(reader: StringReader): Object;
 parse(stringReader: StringReader): PosArgument;
 getExamples(): Collection;
 listSuggestions(context: CommandContext,builder: SuggestionsBuilder): CompletableFuture;
}
class Static_ColumnPosArgumentType {
static columnPos(): ColumnPosArgumentType;
static getColumnPos(context: CommandContext,name: string): ColumnPos;
static EXAMPLES: Collection;
static INCOMPLETE_EXCEPTION: SimpleCommandExceptionType;
}

//net.minecraft.world.spawner.Spawner
interface Spawner extends JObject{
 spawn(world: ServerWorld,spawnMonsters: boolean,spawnAnimals: boolean): number;
}

//net.minecraft.entity.ai.brain.task.StopPanickingTask
class StopPanickingTask extends JObject{
}
class Static_StopPanickingTask {
static create(): Task;
static method_47200(taskContext: TaskTriggerer_TaskContext,hurtBy: MemoryQueryResult,hurtByEntity: MemoryQueryResult,nearestHostile: MemoryQueryResult): TaskRunnable;
static method_47198(livingEntity: LivingEntity,hurtByx: LivingEntity): boolean;
static method_47201(taskContext: TaskTriggerer_TaskContext,memoryQueryResult: MemoryQueryResult,memoryQueryResult2: MemoryQueryResult,memoryQueryResult3: MemoryQueryResult,world: ServerWorld,entity: LivingEntity,time: long): boolean;
static method_47199(context: TaskTriggerer_TaskContext): App;
static MAX_DISTANCE: number;
}

//net.minecraft.entity.ai.control.JumpControl
class JumpControl extends JObject, Control{
 tick(): void;
 setActive(): void;
}

//net.minecraft.client.network.Address
interface Address extends JObject{
 getHostAddress(): string;
 getPort(): number;
 getHostName(): string;
 getInetSocketAddress(): InetSocketAddress;
}
class Static_Address {
static create(address: InetSocketAddress): Address;
}

//net.minecraft.client.gui.widget.Positioner$Impl
class Positioner_Impl extends JObject, Positioner{
 copy(): Positioner_Impl;
 copy(): Positioner;
 relative(f: number,g: number): Positioner_Impl;
 relative(x: number,y: number): Positioner;
 toImpl(): Positioner_Impl;
 margin(value: number): Positioner;
 margin(i: number,j: number): Positioner_Impl;
 margin(i: number): Positioner_Impl;
 margin(left: number,top: number,right: number,bottom: number): Positioner;
 margin(x: number,y: number): Positioner;
 margin(i: number,j: number,k: number,l: number): Positioner_Impl;
 relativeX(f: number): Positioner_Impl;
 relativeX(relativeX: number): Positioner;
 marginTop(marginTop: number): Positioner;
 marginTop(i: number): Positioner_Impl;
 relativeY(relativeY: number): Positioner;
 relativeY(f: number): Positioner_Impl;
 marginRight(marginRight: number): Positioner;
 marginRight(i: number): Positioner_Impl;
 marginX(marginX: number): Positioner;
 marginX(i: number): Positioner_Impl;
 marginY(marginY: number): Positioner;
 marginY(i: number): Positioner_Impl;
 marginBottom(i: number): Positioner_Impl;
 marginBottom(marginBottom: number): Positioner;
 marginLeft(i: number): Positioner_Impl;
 marginLeft(marginLeft: number): Positioner;
 marginLeft: number;
 marginTop: number;
 marginRight: number;
 marginBottom: number;
 relativeX: number;
 relativeY: number;
}

//net.minecraft.server.command.CommandManager
class CommandManager extends JObject{
 execute(parseResults: ParseResults,command: string): number;
 getDispatcher(): CommandDispatcher;
 executeWithPrefix(source: ServerCommandSource,command: string): number;
 sendCommandTree(player: ServerPlayerEntity): void;
}
class Static_CommandManager {
static getException(parse: ParseResults): CommandSyntaxException;
static argument(name: string,type: ArgumentType): RequiredArgumentBuilder;
static literal(literal: string): LiteralArgumentBuilder;
static withCommandSource(parseResults: ParseResults,sourceMapper: UnaryOperator): ParseResults;
static method_9248(context: CommandContext,success: boolean,result: number): void;
static method_9245(sourcex: CommandSource): boolean;
static method_9246(context: CommandContext): number;
static method_44253(string: string): string;
static method_9242(mutableText: MutableText,style: Style): Style;
static method_9236(string: string,style: Style): Style;
static method_9240(commandParser: CommandManager_CommandParser,string: string): boolean;
static method_30851(type: ArgumentType): string;
static method_30853(type: ArgumentType): boolean;
static method_41710(commandDispatcher: CommandDispatcher,parent: CommandNode,child: CommandNode,sibling: CommandNode,inputs: Collection): void;
static getCommandValidator(parser: CommandManager_CommandParser): Predicate;
static checkMissing(): void;
static createRegistryAccess(registryLookup: RegistryWrapper_WrapperLookup): CommandRegistryAccess;
static LOGGER: Logger;
static field_31837: number;
static field_31838: number;
static field_31839: number;
static field_31840: number;
static field_31841: number;
}

//net.minecraft.command.CommandSource
interface CommandSource extends JObject{
 getWorldKeys(): Set;
 getChatSuggestions(): Collection;
 getPlayerNames(): Collection;
 suggestIdentifiers(registry: Registry,suggestedIdType: CommandSource_SuggestedIdType,builder: SuggestionsBuilder): void;
 getTeamNames(): Collection;
 hasPermissionLevel(level: number): boolean;
 getCompletions(context: CommandContext): CompletableFuture;
 getSoundIds(): Stream;
 getRecipeIds(): Stream;
 listIdSuggestions(registryRef: RegistryKey,suggestedIdType: CommandSource_SuggestedIdType,builder: SuggestionsBuilder,context: CommandContext): CompletableFuture;
 getBlockPositionSuggestions(): Collection;
 getEnabledFeatures(): FeatureSet;
 getRegistryManager(): DynamicRegistryManager;
 getPositionSuggestions(): Collection;
 getEntitySuggestions(): Collection;
}
class Static_CommandSource {
static suggestMatching(candidates: String[],builder: SuggestionsBuilder): CompletableFuture;
static suggestMatching(candidates: Stream,builder: SuggestionsBuilder): CompletableFuture;
static suggestMatching(candidates: Iterable,builder: SuggestionsBuilder): CompletableFuture;
static suggestMatching(candidates: Iterable,builder: SuggestionsBuilder,suggestionText: Function,tooltip: Function): CompletableFuture;
static suggestPositions(remaining: string,candidates: Collection,builder: SuggestionsBuilder,predicate: Predicate): CompletableFuture;
static suggestIdentifiers(candidates: Stream,builder: SuggestionsBuilder,prefix: string): CompletableFuture;
static suggestIdentifiers(candidates: Iterable,builder: SuggestionsBuilder,prefix: string): CompletableFuture;
static suggestIdentifiers(candidates: Iterable,builder: SuggestionsBuilder): CompletableFuture;
static suggestIdentifiers(candidates: Stream,builder: SuggestionsBuilder): CompletableFuture;
static method_9263(id: Identifier): Identifier;
static method_9275(suggestionsBuilder: SuggestionsBuilder,id: Identifier): void;
static method_9266(suggestionsBuilder: SuggestionsBuilder,string: string,id: Identifier): void;
static forEachMatching(candidates: Iterable,remaining: string,identifier: Function,action: Consumer): void;
static forEachMatching(candidates: Iterable,remaining: string,prefix: string,identifier: Function,action: Consumer): void;
static shouldSuggest(remaining: string,candidate: string): boolean;
static method_9256(suggestionsBuilder: SuggestionsBuilder,fun: Function,function2: Function,object: Object): void;
static method_9251(id: Identifier): Identifier;
static method_9272(string: string,candidate: string): boolean;
static suggestFromIdentifier(candidates: Stream,builder: SuggestionsBuilder,identifier: Function,tooltip: Function): CompletableFuture;
static suggestFromIdentifier(candidates: Iterable,builder: SuggestionsBuilder,identifier: Function,tooltip: Function): CompletableFuture;
static suggestColumnPositions(remaining: string,candidates: Collection,builder: SuggestionsBuilder,predicate: Predicate): CompletableFuture;
}

//net.minecraft.network.packet.c2s.play.PlayerInteractEntityC2SPacket$InteractAtHandler
class PlayerInteractEntityC2SPacket_InteractAtHandler extends JObject, PlayerInteractEntityC2SPacket_InteractTypeHandler{
 write(buf: PacketByteBuf): void;
 getType(): PlayerInteractEntityC2SPacket_InteractType;
 handle(handler: PlayerInteractEntityC2SPacket_Handler): void;
}

//net.minecraft.loot.condition.AlternativeLootCondition$Serializer
class AlternativeLootCondition_Serializer extends JObject, JsonSerializer{
 fromJson(jsonObject: JsonObject,jsonDeserializationContext: JsonDeserializationContext): AlternativeLootCondition;
 fromJson(json: JsonObject,context: JsonDeserializationContext): Object;
 toJson(json: JsonObject,object: Object,context: JsonSerializationContext): void;
 toJson(jsonObject: JsonObject,alternativeLootCondition: AlternativeLootCondition,jsonSerializationContext: JsonSerializationContext): void;
}

//net.minecraft.util.math.Direction$1


//net.minecraft.world.biome.Biome$Builder
class Biome_Builder extends JObject{
 toString(): string;
 build(): Biome;
 precipitation(precipitation: boolean): Biome_Builder;
 generationSettings(generationSettings: GenerationSettings): Biome_Builder;
 effects(effects: BiomeEffects): Biome_Builder;
 downfall(downfall: number): Biome_Builder;
 spawnSettings(spawnSettings: SpawnSettings): Biome_Builder;
 temperature(temperature: number): Biome_Builder;
 temperatureModifier(temperatureModifier: Biome_TemperatureModifier): Biome_Builder;
}

//net.minecraft.network.message.MessageVerifier$Impl
class MessageVerifier_Impl extends JObject, MessageVerifier{
 isVerified(message: SignedMessage): boolean;
}

//net.minecraft.resource.SimpleResourceReload$1


//net.minecraft.world.gen.feature.UndergroundConfiguredFeatures
class UndergroundConfiguredFeatures extends JObject{
}
class Static_UndergroundConfiguredFeatures {
static bootstrap(featureRegisterable: Registerable): void;
static createBigDripleafFeature(direction: Direction): RegistryEntry;
static createSmallDripleafFeature(): RegistryEntry;
static MONSTER_ROOM: RegistryKey;
static FOSSIL_COAL: RegistryKey;
static FOSSIL_DIAMONDS: RegistryKey;
static DRIPSTONE_CLUSTER: RegistryKey;
static LARGE_DRIPSTONE: RegistryKey;
static POINTED_DRIPSTONE: RegistryKey;
static UNDERWATER_MAGMA: RegistryKey;
static GLOW_LICHEN: RegistryKey;
static ROOTED_AZALEA_TREE: RegistryKey;
static CAVE_VINE: RegistryKey;
static CAVE_VINE_IN_MOSS: RegistryKey;
static MOSS_VEGETATION: RegistryKey;
static MOSS_PATCH: RegistryKey;
static MOSS_PATCH_BONEMEAL: RegistryKey;
static DRIPLEAF: RegistryKey;
static CLAY_WITH_DRIPLEAVES: RegistryKey;
static CLAY_POOL_WITH_DRIPLEAVES: RegistryKey;
static LUSH_CAVES_CLAY: RegistryKey;
static MOSS_PATCH_CEILING: RegistryKey;
static SPORE_BLOSSOM: RegistryKey;
static AMETHYST_GEODE: RegistryKey;
static SCULK_PATCH_DEEP_DARK: RegistryKey;
static SCULK_PATCH_ANCIENT_CITY: RegistryKey;
static SCULK_VEIN: RegistryKey;
}

//net.minecraft.util.CsvWriter
class CsvWriter extends JObject{
 printRow(columns: Object[]): void;
}
class Static_CsvWriter {
static escape(o: Object): string;
static makeHeader(): CsvWriter_Header;
static CRLF: string;
static COMMA: string;
}

//net.minecraft.recipe.RecipeInputProvider
interface RecipeInputProvider extends JObject{
 provideRecipeInputs(finder: RecipeMatcher): void;
}

//net.minecraft.world.RaycastContext$ShapeProvider
interface RaycastContext_ShapeProvider extends JObject{
 get(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
}

//net.minecraft.world.gen.StructureAccessor
class StructureAccessor extends JObject{
 shouldGenerateStructures(): boolean;
 getStructureContaining(pos: BlockPos,structure: Structure): StructureStart;
 getStructureContaining(pos: BlockPos,structure: RegistryKey): StructureStart;
 getStructureContaining(pos: BlockPos,structureTag: TagKey): StructureStart;
 forRegion(region: ChunkRegion): StructureAccessor;
 setStructureStart(pos: ChunkSectionPos,structure: Structure,structureStart: StructureStart,holder: StructureHolder): void;
 getStructureStart(pos: ChunkSectionPos,structure: Structure,holder: StructureHolder): StructureStart;
 getStructureAt(pos: BlockPos,structure: Structure): StructureStart;
 structureContains(pos: BlockPos,structureStart: StructureStart): boolean;
 getRegistryManager(): DynamicRegistryManager;
 getStructureStarts(sectionPos: ChunkSectionPos,structure: Structure): List;
 getStructureStarts(pos: ChunkPos,predicate: Predicate): List;
 acceptStructureStarts(structure: Structure,structureStartPositions: LongSet,consumer: Consumer): void;
 addStructureReference(pos: ChunkSectionPos,structure: Structure,reference: long,holder: StructureHolder): void;
 getStructureReferences(pos: BlockPos): Map;
 hasStructureReferences(pos: BlockPos): boolean;
 incrementReferences(structureStart: StructureStart): void;
 getStructurePresence(chunkPos: ChunkPos,structure: Structure,skipExistingChunk: boolean): StructurePresence;
}
class Static_StructureAccessor {
static method_41414(registry: Registry,tagKey: TagKey,structure: Structure): boolean;
static method_41412(tagKey: TagKey,reference: RegistryEntry_Reference): Boolean;
}

//net.minecraft.util.math.BlockBox$1


//net.minecraft.client.render.entity.feature.VillagerResourceMetadataReader
class VillagerResourceMetadataReader extends JObject, ResourceMetadataReader{
 getKey(): string;
 fromJson(jsonObject: JsonObject): VillagerResourceMetadata;
 fromJson(json: JsonObject): Object;
}

//net.minecraft.util.thread.ExecutorSampling
class ExecutorSampling extends JObject{
 add(executor: SampleableExecutor): void;
 createSamplers(): List;
}
class Static_ExecutorSampling {
static method_37181(executor: SampleableExecutor): Stream;
static method_37179(entry: Map_Entry): Sampler;
static mergeSimilarSamplers(samplers: Map): List;
static INSTANCE: ExecutorSampling;
}

//net.minecraft.block.NetherPortalBlock$1


//net.minecraft.client.particle.EndRodParticle$Factory
class EndRodParticle_Factory extends JObject, ParticleFactory{
 createParticle(defaultParticleType: DefaultParticleType,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
 createParticle(particleEffect: ParticleEffect,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
}

//net.minecraft.util.shape.ArrayVoxelShape$1


//net.minecraft.nbt.NbtByte$Cache
class NbtByte_Cache extends JObject{
}
class Static_NbtByte_Cache {
static VALUES: NbtByte[];
}

//net.minecraft.data.client.BlockStateVariantMap
class BlockStateVariantMap extends JObject{
}
class Static_BlockStateVariantMap {
static create(first: Property,second: Property,third: Property): BlockStateVariantMap_TripleProperty;
static create(first: Property,second: Property): BlockStateVariantMap_DoubleProperty;
static create(first: Property,second: Property,third: Property,fourth: Property): BlockStateVariantMap_QuadrupleProperty;
static create(first: Property,second: Property,third: Property,fourth: Property,fifth: Property): BlockStateVariantMap_QuintupleProperty;
static create(property: Property): BlockStateVariantMap_SingleProperty;
static method_25788(property: Property,propertiesMap: PropertiesMap): Stream;
}

//net.minecraft.network.packet.c2s.play.UpdatePlayerAbilitiesC2SPacket
class UpdatePlayerAbilitiesC2SPacket extends JObject, Packet{
 apply(serverPlayPacketListener: ServerPlayPacketListener): void;
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
 isFlying(): boolean;
}
class Static_UpdatePlayerAbilitiesC2SPacket {
static FLYING_MASK: number;
}

//net.minecraft.recipe.SmithingRecipe
interface SmithingRecipe extends JObject, Recipe{
 getType(): RecipeType;
 fits(width: number,height: number): boolean;
 createIcon(): ItemStack;
 testAddition(stack: ItemStack): boolean;
 testTemplate(stack: ItemStack): boolean;
 testBase(stack: ItemStack): boolean;
}

//net.minecraft.village.VillagerData
class VillagerData extends JObject{
 getType(): VillagerType;
 getLevel(): number;
 withLevel(level: number): VillagerData;
 withType(type: VillagerType): VillagerData;
 withProfession(profession: VillagerProfession): VillagerData;
 getProfession(): VillagerProfession;
}
class Static_VillagerData {
static canLevelUp(level: number): boolean;
static method_28372(instance: RecordCodecBuilder_Instance): App;
static method_28374(villagerData: VillagerData): VillagerType;
static method_29948(): VillagerProfession;
static method_29949(): VillagerType;
static method_28373(villagerData: VillagerData): VillagerProfession;
static method_28371(villagerData: VillagerData): Integer;
static getUpperLevelExperience(level: number): number;
static getLowerLevelExperience(level: number): number;
static MIN_LEVEL: number;
static MAX_LEVEL: number;
static LEVEL_BASE_EXPERIENCE: number[];
static CODEC: Codec;
}

//net.minecraft.network.encryption.SignatureUpdatable
interface SignatureUpdatable extends JObject{
 update(updater: SignatureUpdatable_SignatureUpdater): void;
}

//net.minecraft.network.packet.s2c.play.BossBarS2CPacket$UpdateProgressAction
class BossBarS2CPacket_UpdateProgressAction extends JObject, BossBarS2CPacket_Action{
 accept(uuid: UUID,consumer: BossBarS2CPacket_Consumer): void;
 getType(): BossBarS2CPacket_Type;
 toPacket(buf: PacketByteBuf): void;
}

//net.minecraft.world.event.PositionSource
interface PositionSource extends JObject{
 getType(): PositionSourceType;
 getPos(world: World): Optional;
}
class Static_PositionSource {
static CODEC: Codec;
}

//net.minecraft.entity.ai.control.MoveControl
class MoveControl extends JObject, Control{
 tick(): void;
 getSpeed(): number;
 moveTo(x: number,y: number,z: number,speed: number): void;
 isMoving(): boolean;
 strafeTo(forward: number,sideways: number): void;
 getTargetY(): number;
 getTargetX(): number;
 getTargetZ(): number;
}
class Static_MoveControl {
static field_30197: number;
static REACHED_DESTINATION_DISTANCE_SQUARED: number;
static field_30199: number;
}

//net.minecraft.structure.WoodlandMansionGenerator
class WoodlandMansionGenerator extends JObject{
}
class Static_WoodlandMansionGenerator {
static addPieces(manager: StructureTemplateManager,pos: BlockPos,rotation: BlockRotation,pieces: List,random: Random): void;
static printRandomFloorLayouts(args: String[]): void;
}

//net.minecraft.client.recipebook.RecipeBookGroup$1


//net.minecraft.client.report.ContextMessageCollector$IndexedMessageConsumer
interface ContextMessageCollector_IndexedMessageConsumer extends JObject{
 accept(index: number,message: ReceivedMessage_ChatMessage): void;
}

//net.minecraft.server.command.SummonCommand
class SummonCommand extends JObject{
}
class Static_SummonCommand {
static register(dispatcher: CommandDispatcher,registryAccess: CommandRegistryAccess): void;
static execute(source: ServerCommandSource,entityType: RegistryEntry_Reference,pos: Vec3d,nbt: NbtCompound,initialize: boolean): number;
static method_13689(context: CommandContext): number;
static method_13691(context: CommandContext): number;
static method_48759(vec3d: Vec3d,entity: Entity): Entity;
static method_13692(context: CommandContext): number;
static method_52090(entity: Entity): Text;
static method_13693(source: ServerCommandSource): boolean;
static summon(source: ServerCommandSource,entityType: RegistryEntry_Reference,pos: Vec3d,nbt: NbtCompound,initialize: boolean): Entity;
static FAILED_EXCEPTION: SimpleCommandExceptionType;
static FAILED_UUID_EXCEPTION: SimpleCommandExceptionType;
static INVALID_POSITION_EXCEPTION: SimpleCommandExceptionType;
}

//net.minecraft.structure.EndCityGenerator$1


//net.minecraft.world.gen.OreVeinSampler
class OreVeinSampler extends JObject{
}
class Static_OreVeinSampler {
static create(veinToggle: DensityFunction,veinRidged: DensityFunction,veinGap: DensityFunction,randomDeriver: RandomSplitter): ChunkNoiseSampler_BlockStateSampler;
static method_40547(densityFunction: DensityFunction,blockState: BlockState,randomSplitter: RandomSplitter,densityFunction2: DensityFunction,densityFunction3: DensityFunction,pos: DensityFunction_NoisePos): BlockState;
static DENSITY_THRESHOLD: number;
static MAX_DENSITY_INTRUSION: number;
static LIMINAL_DENSITY_REDUCTION: number;
static BLOCK_GENERATION_CHANCE: number;
static MIN_ORE_CHANCE: number;
static MAX_ORE_CHANCE: number;
static DENSITY_FOR_MAX_ORE_CHANCE: number;
static RAW_ORE_BLOCK_CHANCE: number;
static VEIN_GAP_THRESHOLD: number;
}

//net.minecraft.client.sound.SoundListener
class SoundListener extends JObject{
 init(): void;
 getVolume(): number;
 setOrientation(at: Vector3f,up: Vector3f): void;
 getPos(): Vec3d;
 setPosition(position: Vec3d): void;
 setVolume(volume: number): void;
}

//net.minecraft.entity.ai.control.BodyControl
class BodyControl extends JObject, Control{
 tick(): void;
}
class Static_BodyControl {
static BODY_KEEP_UP_THRESHOLD: number;
static ROTATE_BODY_START_TICK: number;
static ROTATION_INCREMENTS: number;
}

//net.minecraft.recipe.ShapelessRecipe
class ShapelessRecipe extends JObject, CraftingRecipe{
 matches(recipeInputInventory: RecipeInputInventory,world: World): boolean;
 matches(inventory: Inventory,world: World): boolean;
 getId(): Identifier;
 getCategory(): CraftingRecipeCategory;
 getOutput(registryManager: DynamicRegistryManager): ItemStack;
 getGroup(): string;
 craft(recipeInputInventory: RecipeInputInventory,dynamicRegistryManager: DynamicRegistryManager): ItemStack;
 craft(inventory: Inventory,registryManager: DynamicRegistryManager): ItemStack;
 getIngredients(): DefaultedList;
 fits(width: number,height: number): boolean;
 getSerializer(): RecipeSerializer;
}

//net.minecraft.server.command.ForceLoadCommand
class ForceLoadCommand extends JObject{
}
class Static_ForceLoadCommand {
static register(dispatcher: CommandDispatcher): void;
static method_13371(source: ServerCommandSource): boolean;
static method_13370(context: CommandContext): number;
static method_13368(context: CommandContext): number;
static method_13363(context: CommandContext): number;
static method_13378(context: CommandContext): number;
static method_13364(context: CommandContext): number;
static method_13367(context: CommandContext): number;
static method_51982(bl: boolean,chunkPos: ChunkPos,registryKey: RegistryKey,chunkPos2: ChunkPos,chunkPos3: ChunkPos): Text;
static method_51979(registryKey: RegistryKey,string: string): Text;
static executeChange(source: ServerCommandSource,from: ColumnPos,to: ColumnPos,forceLoaded: boolean): number;
static method_51980(chunkPos: ChunkPos,registryKey: RegistryKey): Text;
static executeRemoveAll(source: ServerCommandSource): number;
static method_13375(context: CommandContext): number;
static method_13377(serverWorld: ServerWorld,chunkPos: long): void;
static method_51978(registryKey: RegistryKey): Text;
static method_51977(i: number,registryKey: RegistryKey,string: string): Text;
static method_51981(bl: boolean,chunkPos: ChunkPos,registryKey: RegistryKey): Text;
static method_13369(chunkPos: Object,registryKey: Object): Message;
static method_13376(maxCount: Object,count: Object): Message;
static executeQuery(source: ServerCommandSource,pos: ColumnPos): number;
static executeQuery(source: ServerCommandSource): number;
static MAX_CHUNKS: number;
static TOO_BIG_EXCEPTION: Dynamic2CommandExceptionType;
static QUERY_FAILURE_EXCEPTION: Dynamic2CommandExceptionType;
static ADDED_FAILURE_EXCEPTION: SimpleCommandExceptionType;
static REMOVED_FAILURE_EXCEPTION: SimpleCommandExceptionType;
}

//net.minecraft.structure.EndCityGenerator$4


//net.minecraft.loot.operator.BoundedIntUnaryOperator$Applier
interface BoundedIntUnaryOperator_Applier extends JObject{
 apply(context: LootContext,value: number): number;
}

//net.minecraft.structure.EndCityGenerator$3


//net.minecraft.structure.EndCityGenerator$2


//net.minecraft.entity.player.HungerManager
class HungerManager extends JObject{
 add(food: number,saturationModifier: number): void;
 update(player: PlayerEntity): void;
 setExhaustion(exhaustion: number): void;
 getPrevFoodLevel(): number;
 isNotFull(): boolean;
 addExhaustion(exhaustion: number): void;
 getExhaustion(): number;
 getSaturationLevel(): number;
 getFoodLevel(): number;
 setFoodLevel(foodLevel: number): void;
 setSaturationLevel(saturationLevel: number): void;
 eat(item: Item,stack: ItemStack): void;
 readNbt(nbt: NbtCompound): void;
 writeNbt(nbt: NbtCompound): void;
}

//net.minecraft.util.CachedMapper
class CachedMapper extends JObject{
 map(input: Object): Object;
}

//net.minecraft.command.argument.NbtPathArgumentType$FilteredListElementNode
class NbtPathArgumentType_FilteredListElementNode extends JObject, NbtPathArgumentType_PathNode{
 get(current: NbtElement,results: List): void;
 clear(current: NbtElement): number;
 set(current: NbtElement,source: Supplier): number;
 init(): NbtElement;
 getOrInit(current: NbtElement,source: Supplier,results: List): void;
}
class Static_NbtPathArgumentType_FilteredListElementNode {
static method_9365(list: List,mutableBoolean: MutableBoolean,nbt: NbtElement): void;
}

//net.minecraft.client.resource.ResourceReloadLogger
class ResourceReloadLogger extends JObject{
 finish(): void;
 reload(reason: ResourceReloadLogger_ReloadReason,packs: List): void;
 addReloadSection(report: CrashReport): void;
 recover(throwable: Throwable): void;
}
class Static_ResourceReloadLogger {
static LOGGER: Logger;
}

//net.minecraft.block.DoubleBlockProperties$PropertySource$Single
class DoubleBlockProperties_PropertySource_Single extends JObject, DoubleBlockProperties_PropertySource{
 apply(propertyRetriever: DoubleBlockProperties_PropertyRetriever): Object;
}

//net.minecraft.text.KeybindTranslations
class KeybindTranslations extends JObject{
}
class Static_KeybindTranslations {
static setFactory(factory: Function): void;
static method_43481(key: string): Supplier;
static method_43483(string: string): Text;
static factory: Function;
}

//net.minecraft.text.Text$Serializer
class Text_Serializer extends JObject, JsonDeserializer, JsonSerializer{
 deserialize(jsonElement: JsonElement,type: Type,jsonDeserializationContext: JsonDeserializationContext): MutableText;
 deserialize(json: JsonElement,type: Type,context: JsonDeserializationContext): Object;
 serialize(text: Text,type: Type,jsonSerializationContext: JsonSerializationContext): JsonElement;
 serialize(text: Object,type: Type,context: JsonSerializationContext): JsonElement;
}
class Static_Text_Serializer {
static getPosition(reader: JsonReader): number;
static optimizeArgument(text: Object): Object;
static toSortedJsonString(text: Text): string;
static fromLenientJson(json: string): MutableText;
static method_10876(): Field;
static method_10869(): Field;
static method_10878(): Gson;
static fromJson(json: JsonElement): MutableText;
static fromJson(reader: StringReader): MutableText;
static fromJson(json: string): MutableText;
static toJsonTree(text: Text): JsonElement;
static toJson(text: Text): string;
static GSON: Gson;
static JSON_READER_POS: Field;
static JSON_READER_LINE_START: Field;
}

//net.minecraft.world.HeightLimitView
interface HeightLimitView extends JObject{
 getHeight(): number;
 countVerticalSections(): number;
 getBottomSectionCoord(): number;
 sectionCoordToIndex(coord: number): number;
 sectionIndexToCoord(index: number): number;
 getBottomY(): number;
 isOutOfHeightLimit(pos: BlockPos): boolean;
 isOutOfHeightLimit(y: number): boolean;
 getSectionIndex(y: number): number;
 getTopSectionCoord(): number;
 getTopY(): number;
}
class Static_HeightLimitView {
static create(bottomY: number,height: number): HeightLimitView;
}

//net.minecraft.server.dedicated.command.SaveOnCommand
class SaveOnCommand extends JObject{
}
class Static_SaveOnCommand {
static register(dispatcher: CommandDispatcher): void;
static method_13561(source: ServerCommandSource): boolean;
static method_13560(context: CommandContext): number;
static method_52043(): Text;
static ALREADY_ON_EXCEPTION: SimpleCommandExceptionType;
}

//net.minecraft.world.biome.OverworldBiomeCreator
class OverworldBiomeCreator extends JObject{
}
class Static_OverworldBiomeCreator {
static createSparseJungle(featureLookup: RegistryEntryLookup,carverLookup: RegistryEntryLookup): Biome;
static getSkyColor(temperature: number): number;
static createBiome(precipitation: boolean,temperature: number,downfall: number,spawnSettings: SpawnSettings_Builder,generationSettings: GenerationSettings_LookupBackedBuilder,music: MusicSound): Biome;
static createBiome(precipitation: boolean,temperature: number,downfall: number,waterColor: number,waterFogColor: number,grassColor: Integer,foliageColor: Integer,spawnSettings: SpawnSettings_Builder,generationSettings: GenerationSettings_LookupBackedBuilder,music: MusicSound): Biome;
static addBasicFeatures(generationSettings: GenerationSettings_LookupBackedBuilder): void;
static createBadlands(featureLookup: RegistryEntryLookup,carverLookup: RegistryEntryLookup,plateau: boolean): Biome;
static createOcean(spawnSettings: SpawnSettings_Builder,waterColor: number,waterFogColor: number,generationSettings: GenerationSettings_LookupBackedBuilder): Biome;
static createPlains(featureLookup: RegistryEntryLookup,carverLookup: RegistryEntryLookup,sunflower: boolean,snowy: boolean,iceSpikes: boolean): Biome;
static createNormalOcean(featureLookup: RegistryEntryLookup,carverLookup: RegistryEntryLookup,deep: boolean): Biome;
static createDesert(featureLookup: RegistryEntryLookup,carverLookup: RegistryEntryLookup): Biome;
static createSavanna(featureLookup: RegistryEntryLookup,carverLookup: RegistryEntryLookup,windswept: boolean,plateau: boolean): Biome;
static createJungle(featureLookup: RegistryEntryLookup,carverLookup: RegistryEntryLookup): Biome;
static createColdOcean(featureLookup: RegistryEntryLookup,carverLookup: RegistryEntryLookup,deep: boolean): Biome;
static createWarmOcean(featureLookup: RegistryEntryLookup,carverLookup: RegistryEntryLookup): Biome;
static createFrozenOcean(featureLookup: RegistryEntryLookup,carverLookup: RegistryEntryLookup,deep: boolean): Biome;
static createNormalForest(featureLookup: RegistryEntryLookup,carverLookup: RegistryEntryLookup,birch: boolean,oldGrowth: boolean,flower: boolean): Biome;
static createTaiga(featureLookup: RegistryEntryLookup,carverLookup: RegistryEntryLookup,snowy: boolean): Biome;
static createFrozenPeaks(featureLookup: RegistryEntryLookup,carverLookup: RegistryEntryLookup): Biome;
static createRiver(featureLookup: RegistryEntryLookup,carverLookup: RegistryEntryLookup,frozen: boolean): Biome;
static createDeepDark(featureLookup: RegistryEntryLookup,carverLookup: RegistryEntryLookup): Biome;
static createDarkForest(featureLookup: RegistryEntryLookup,carverLookup: RegistryEntryLookup): Biome;
static createSnowySlopes(featureLookup: RegistryEntryLookup,carverLookup: RegistryEntryLookup): Biome;
static createTheVoid(featureLookup: RegistryEntryLookup,carverLookup: RegistryEntryLookup): Biome;
static createGrove(featureLookup: RegistryEntryLookup,carverLookup: RegistryEntryLookup): Biome;
static createBeach(featureLookup: RegistryEntryLookup,carverLookup: RegistryEntryLookup,snowy: boolean,stony: boolean): Biome;
static createMeadow(featureLookup: RegistryEntryLookup,carverLookup: RegistryEntryLookup,cherryGrove: boolean): Biome;
static createSwamp(featureLookup: RegistryEntryLookup,carverLookup: RegistryEntryLookup): Biome;
static createJaggedPeaks(featureLookup: RegistryEntryLookup,carverLookup: RegistryEntryLookup): Biome;
static createLushCaves(featureLookup: RegistryEntryLookup,carverLookup: RegistryEntryLookup): Biome;
static createStonyPeaks(featureLookup: RegistryEntryLookup,carverLookup: RegistryEntryLookup): Biome;
static createNormalBambooJungle(featureLookup: RegistryEntryLookup,carverLookup: RegistryEntryLookup): Biome;
static createWindsweptHills(featureLookup: RegistryEntryLookup,carverLookup: RegistryEntryLookup,forest: boolean): Biome;
static createMushroomFields(featureLookup: RegistryEntryLookup,carverLookup: RegistryEntryLookup): Biome;
static createJungleFeatures(featureLookup: RegistryEntryLookup,carverLookup: RegistryEntryLookup,depth: number,bamboo: boolean,sparse: boolean,unmodified: boolean,spawnSettings: SpawnSettings_Builder,music: MusicSound): Biome;
static createOceanGenerationSettings(featureLookup: RegistryEntryLookup,carverLookup: RegistryEntryLookup): GenerationSettings_LookupBackedBuilder;
static createLukewarmOcean(featureLookup: RegistryEntryLookup,carverLookup: RegistryEntryLookup,deep: boolean): Biome;
static createOldGrowthTaiga(featureLookup: RegistryEntryLookup,carverLookup: RegistryEntryLookup,spruce: boolean): Biome;
static createMangroveSwamp(featureLookup: RegistryEntryLookup,carverLookup: RegistryEntryLookup): Biome;
static createDripstoneCaves(featureLookup: RegistryEntryLookup,carverLookup: RegistryEntryLookup): Biome;
static DEFAULT_WATER_COLOR: number;
static DEFAULT_WATER_FOG_COLOR: number;
static DEFAULT_FOG_COLOR: number;
static DEFAULT_MUSIC: MusicSound;
}

//net.minecraft.util.math.noise.DoublePerlinNoiseSampler
class DoublePerlinNoiseSampler extends JObject{
 copy(): DoublePerlinNoiseSampler_NoiseParameters;
 sample(x: number,y: number,z: number): number;
 getMaxValue(): number;
 addDebugInfo(info: StringBuilder): void;
}
class Static_DoublePerlinNoiseSampler {
static create(random: Random,offset: number,octaves: number[]): DoublePerlinNoiseSampler;
static create(random: Random,parameters: DoublePerlinNoiseSampler_NoiseParameters): DoublePerlinNoiseSampler;
static createLegacy(random: Random,parameters: DoublePerlinNoiseSampler_NoiseParameters): DoublePerlinNoiseSampler;
static createAmplitude(octaves: number): number;
static DOMAIN_SCALE: number;
static field_31703: number;
}

//net.minecraft.world.biome.source.BiomeAccess
class BiomeAccess extends JObject{
 getBiome(pos: BlockPos): RegistryEntry;
 withSource(storage: BiomeAccess_Storage): BiomeAccess;
 getBiomeForNoiseGen(pos: BlockPos): RegistryEntry;
 getBiomeForNoiseGen(biomeX: number,biomeY: number,biomeZ: number): RegistryEntry;
 getBiomeForNoiseGen(x: number,y: number,z: number): RegistryEntry;
}
class Static_BiomeAccess {
static hashSeed(seed: long): long;
static method_38106(l: long,i: number,j: number,k: number,d: number,e: number,f: number): number;
static method_38108(l: long): number;
static CHUNK_CENTER_OFFSET: number;
static field_34466: number;
static field_34467: number;
static field_34468: number;
}

//net.minecraft.block.BedBlock$1


//net.minecraft.command.EntityDataObject$1


//net.minecraft.client.gl.GlBlendState
class GlBlendState extends JObject{
 equals(o: Object): boolean;
 hashCode(): number;
 enable(): void;
 isBlendDisabled(): boolean;
}
class Static_GlBlendState {
static getModeFromString(name: string): number;
static getFactorFromString(expression: string): number;
static activeBlendState: GlBlendState;
}

//net.minecraft.server.command.ReloadCommand
class ReloadCommand extends JObject{
}
class Static_ReloadCommand {
static register(dispatcher: CommandDispatcher): void;
static method_13530(context: CommandContext): number;
static findNewDataPacks(dataPackManager: ResourcePackManager,saveProperties: SaveProperties,enabledDataPacks: Collection): Collection;
static method_52036(): Text;
static method_13531(source: ServerCommandSource): boolean;
static method_29479(serverCommandSource: ServerCommandSource,throwable: Throwable): Void;
static tryReloadDataPacks(dataPacks: Collection,source: ServerCommandSource): void;
static LOGGER: Logger;
}

//net.minecraft.data.client.BlockStateSupplier
interface BlockStateSupplier extends JObject, Supplier{
 getBlock(): Block;
}

//net.minecraft.entity.FlyingItemEntity
interface FlyingItemEntity extends JObject{
 getStack(): ItemStack;
}

//net.minecraft.entity.effect.StatusEffectUtil
class StatusEffectUtil extends JObject{
}
class Static_StatusEffectUtil {
static method_42144(statusEffectInstance: StatusEffectInstance,entity: Entity,player: ServerPlayerEntity): void;
static hasHaste(entity: LivingEntity): boolean;
static getHasteAmplifier(entity: LivingEntity): number;
static getDurationText(effect: StatusEffectInstance,multiplier: number): Text;
static hasWaterBreathing(entity: LivingEntity): boolean;
static method_42145(entity: Entity,vec3d: Vec3d,d: number,statusEffect: StatusEffect,statusEffectInstance: StatusEffectInstance,i: number,player: ServerPlayerEntity): boolean;
static addEffectToPlayersWithinDistance(world: ServerWorld,entity: Entity,origin: Vec3d,range: number,statusEffectInstance: StatusEffectInstance,duration: number): List;
}

//net.minecraft.block.entity.SculkSensorBlockEntity$VibrationCallback
class SculkSensorBlockEntity_VibrationCallback extends JObject, Vibrations_Callback{
 accept(world: ServerWorld,pos: BlockPos,event: GameEvent,sourceEntity: Entity,entity: Entity,distance: number): void;
 getRange(): number;
 requiresTickingChunksAround(): boolean;
 triggersAvoidCriterion(): boolean;
 onListen(): void;
 getPositionSource(): PositionSource;
 accepts(world: ServerWorld,pos: BlockPos,event: GameEvent,emitter: GameEvent_Emitter): boolean;
}
class Static_SculkSensorBlockEntity_VibrationCallback {
static RANGE: number;
}

//net.minecraft.entity.ai.brain.task.AttackTask
class AttackTask extends JObject{
}
class Static_AttackTask {
static create(distance: number,forwardMovement: number): SingleTickTask;
static method_46903(taskContext: TaskTriggerer_TaskContext,i: number,f: number,walkTarget: MemoryQueryResult,lookTarget: MemoryQueryResult,attackTarget: MemoryQueryResult,visibleMobs: MemoryQueryResult): TaskRunnable;
static method_46902(i: number,f: number,context: TaskTriggerer_TaskContext): App;
static method_46904(taskContext: TaskTriggerer_TaskContext,memoryQueryResult: MemoryQueryResult,i: number,memoryQueryResult2: MemoryQueryResult,memoryQueryResult3: MemoryQueryResult,f: number,world: ServerWorld,entity: MobEntity,time: long): boolean;
}

//net.minecraft.util.thread.ThreadExecutor
class ThreadExecutor extends JObject, SampleableExecutor, MessageListener, Executor{
 getName(): string;
 execute(runnable: Runnable): void;
 submit(task: Runnable): CompletableFuture;
 submit(task: Supplier): CompletableFuture;
 getTaskCount(): number;
 isOnThread(): boolean;
 runTask(): boolean;
 executeSync(runnable: Runnable): void;
 runTasks(stopCondition: BooleanSupplier): void;
 send(message: Object): void;
 send(runnable: Runnable): void;
 submitAndJoin(runnable: Runnable): void;
 createSamplers(): List;
}
class Static_ThreadExecutor {
static method_5386(runnable: Runnable): Void;
static LOGGER: Logger;
}

//net.minecraft.world.gen.feature.RandomFeatureConfig
class RandomFeatureConfig extends JObject, FeatureConfig{
 getDecoratedFeatures(): Stream;
 features: List;
 defaultFeature: RegistryEntry;
}
class Static_RandomFeatureConfig {
static method_28753(instance: RecordCodecBuilder_Instance): App;
static method_30650(entry: RandomFeatureEntry): Stream;
static method_28754(config: RandomFeatureConfig): List;
static method_28752(config: RandomFeatureConfig): RegistryEntry;
static CODEC: Codec;
}

//net.minecraft.inventory.SimpleInventory
class SimpleInventory extends JObject, Inventory, RecipeInputProvider{
 toString(): string;
 clear(): void;
 isEmpty(): boolean;
 size(): number;
 getStack(slot: number): ItemStack;
 removeItem(item: Item,count: number): ItemStack;
 removeListener(listener: InventoryChangedListener): void;
 addListener(listener: InventoryChangedListener): void;
 clearToList(): List;
 setStack(slot: number,stack: ItemStack): void;
 removeStack(slot: number): ItemStack;
 removeStack(slot: number,amount: number): ItemStack;
 canInsert(stack: ItemStack): boolean;
 markDirty(): void;
 readNbtList(nbtList: NbtList): void;
 toNbtList(): NbtList;
 addStack(stack: ItemStack): ItemStack;
 canPlayerUse(player: PlayerEntity): boolean;
 provideRecipeInputs(finder: RecipeMatcher): void;
 stacks: DefaultedList;
}
class Static_SimpleInventory {
static method_24513(stack: ItemStack): boolean;
static method_20635(stack: ItemStack): boolean;
}

//net.minecraft.command.EntitySelectorReader
class EntitySelectorReader extends JObject, FabricEntitySelectorReader{
 read(): EntitySelector;
 build(): EntitySelector;
 setLimit(limit: number): void;
 excludesEntityType(): boolean;
 hasLimit(): boolean;
 excludesTeam(): boolean;
 excludesGameMode(): boolean;
 excludesName(): boolean;
 hasSorter(): boolean;
 selectsScores(): boolean;
 selectsName(): boolean;
 selectsTeam(): boolean;
 selectsGameMode(): boolean;
 setX(x: number): void;
 setEntityType(entityType: EntityType): void;
 setPredicate(predicate: Predicate): void;
 setDy(dy: number): void;
 setDz(dz: number): void;
 readTagCharacter(): boolean;
 setZ(z: number): void;
 setDx(dx: number): void;
 getDx(): Double;
 setLocalWorldOnly(): void;
 getPitchRange(): FloatRangeArgument;
 setYawRange(yawRange: FloatRangeArgument): void;
 getYawRange(): FloatRangeArgument;
 getLevelRange(): NumberRange_IntRange;
 setDistance(distance: NumberRange_FloatRange): void;
 setLevelRange(levelRange: NumberRange_IntRange): void;
 setPitchRange(pitchRange: FloatRangeArgument): void;
 setSelectsGameMode(selectsGameMode: boolean): void;
 setHasLimit(hasLimit: boolean): void;
 setExcludesName(excludesName: boolean): void;
 setSelectsScores(selectsScores: boolean): void;
 getDy(): Double;
 selectsEntityType(): boolean;
 setHasSorter(hasSorter: boolean): void;
 setSelectsTeam(selectsTeam: boolean): void;
 setExcludesTeam(excludesTeam: boolean): void;
 getSorter(): BiConsumer;
 getDz(): Double;
 setSorter(sorter: BiConsumer): void;
 setSelectsName(selectsName: boolean): void;
 getReader(): StringReader;
 listSuggestions(builder: SuggestionsBuilder,consumer: Consumer): CompletableFuture;
 isSenderOnly(): boolean;
 getDistance(): NumberRange_FloatRange;
 getX(): Double;
 getY(): Double;
 getZ(): Double;
 setY(y: number): void;
 selectsAdvancements(): boolean;
 readNegationCharacter(): boolean;
 setIncludesNonPlayers(includesNonPlayers: boolean): void;
 setExcludesGameMode(excludesGameMode: boolean): void;
 setExcludesEntityType(): void;
 setSuggestionProvider(suggestionProvider: BiFunction): void;
 setSelectsAdvancements(selectsAdvancements: boolean): void;
}
class Static_EntitySelectorReader {
static method_9869(pos: Vec3d): Vec3d;
static method_9838(entity: Entity): boolean;
static method_9881(toDoubleFunction: ToDoubleFunction,d: number,e: number,entity: Entity): boolean;
static method_9854(builder: SuggestionsBuilder,consumer: Consumer): CompletableFuture;
static method_9867(pos: Vec3d,entities: List): void;
static method_9901(pos: Vec3d,entities: List): void;
static suggestSelector(builder: SuggestionsBuilder): void;
static method_9888(pos: Vec3d,entities: List): void;
static method_9897(vec3d: Vec3d,entity1: Entity,entity2: Entity): number;
static method_9863(selectorType: Object): Message;
static method_9862(vec3d: Vec3d,entity1: Entity,entity2: Entity): number;
static method_9903(option: Object): Message;
static SELECTOR_PREFIX: char;
static ARGUMENTS_OPENING: char;
static ARGUMENTS_CLOSING: char;
static ARGUMENT_DEFINER: char;
static ARGUMENT_SEPARATOR: char;
static INVERT_MODIFIER: char;
static TAG_MODIFIER: char;
static NEAREST_PLAYER: char;
static ALL_PLAYERS: char;
static RANDOM_PLAYER: char;
static SELF: char;
static ALL_ENTITIES: char;
static INVALID_ENTITY_EXCEPTION: SimpleCommandExceptionType;
static UNKNOWN_SELECTOR_EXCEPTION: DynamicCommandExceptionType;
static NOT_ALLOWED_EXCEPTION: SimpleCommandExceptionType;
static MISSING_EXCEPTION: SimpleCommandExceptionType;
static UNTERMINATED_EXCEPTION: SimpleCommandExceptionType;
static VALUELESS_EXCEPTION: DynamicCommandExceptionType;
static NEAREST: BiConsumer;
static FURTHEST: BiConsumer;
static RANDOM: BiConsumer;
static DEFAULT_SUGGESTION_PROVIDER: BiFunction;
}

//net.minecraft.client.render.entity.feature.ArmorFeatureRenderer$1


//net.minecraft.network.message.MessageVerifier
interface MessageVerifier extends JObject{
 isVerified(message: SignedMessage): boolean;
}
class Static_MessageVerifier {
static method_46322(message: SignedMessage): boolean;
static method_46323(message: SignedMessage): boolean;
static NO_SIGNATURE: MessageVerifier;
static UNVERIFIED: MessageVerifier;
}

//net.minecraft.entity.ai.brain.task.StartSniffingTask
class StartSniffingTask extends JObject{
}
class Static_StartSniffingTask {
static create(): Task;
static method_47265(context: TaskTriggerer_TaskContext): App;
static method_47267(isSniffing: MemoryQueryResult,walkTarget: MemoryQueryResult,sniffCooldown: MemoryQueryResult,nearestAttackable: MemoryQueryResult,disturbanceLocation: MemoryQueryResult): TaskRunnable;
static method_47266(memoryQueryResult: MemoryQueryResult,memoryQueryResult2: MemoryQueryResult,memoryQueryResult3: MemoryQueryResult,world: ServerWorld,entity: LivingEntity,time: long): boolean;
static COOLDOWN: IntProvider;
}

//net.minecraft.client.gui.screen.ingame.BookEditScreen$Position
class BookEditScreen_Position extends JObject{
 x: number;
 y: number;
}

//net.minecraft.client.world.BiomeColorCache$Last
class BiomeColorCache_Last extends JObject{
 x: number;
 z: number;
}

//net.minecraft.server.WorldGenerationProgressListener
interface WorldGenerationProgressListener extends JObject{
 start(): void;
 start(spawnPos: ChunkPos): void;
 stop(): void;
 setChunkStatus(pos: ChunkPos,status: ChunkStatus): void;
}

//net.minecraft.world.gen.feature.TreePlacedFeatures
class TreePlacedFeatures extends JObject{
}
class Static_TreePlacedFeatures {
static bootstrap(featureRegisterable: Registerable): void;
static CRIMSON_FUNGI: RegistryKey;
static WARPED_FUNGI: RegistryKey;
static OAK_CHECKED: RegistryKey;
static DARK_OAK_CHECKED: RegistryKey;
static BIRCH_CHECKED: RegistryKey;
static ACACIA_CHECKED: RegistryKey;
static SPRUCE_CHECKED: RegistryKey;
static MANGROVE_CHECKED: RegistryKey;
static CHERRY_CHECKED: RegistryKey;
static PINE_ON_SNOW: RegistryKey;
static SPRUCE_ON_SNOW: RegistryKey;
static PINE_CHECKED: RegistryKey;
static JUNGLE_TREE: RegistryKey;
static FANCY_OAK_CHECKED: RegistryKey;
static MEGA_JUNGLE_TREE_CHECKED: RegistryKey;
static MEGA_SPRUCE_CHECKED: RegistryKey;
static MEGA_PINE_CHECKED: RegistryKey;
static TALL_MANGROVE_CHECKED: RegistryKey;
static JUNGLE_BUSH: RegistryKey;
static SUPER_BIRCH_BEES_0002: RegistryKey;
static SUPER_BIRCH_BEES: RegistryKey;
static OAK_BEES_0002: RegistryKey;
static OAK_BEES_002: RegistryKey;
static BIRCH_BEES_0002: RegistryKey;
static BIRCH_BEES_002: RegistryKey;
static FANCY_OAK_BEES_0002: RegistryKey;
static FANCY_OAK_BEES_002: RegistryKey;
static FANCY_OAK_BEES: RegistryKey;
static CHERRY_BEES_005: RegistryKey;
}

//net.minecraft.network.packet.c2s.play.PlayerInteractEntityC2SPacket
class PlayerInteractEntityC2SPacket extends JObject, Packet{
 apply(serverPlayPacketListener: ServerPlayPacketListener): void;
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
 handle(handler: PlayerInteractEntityC2SPacket_Handler): void;
 getEntity(world: ServerWorld): Entity;
 isPlayerSneaking(): boolean;
}
class Static_PlayerInteractEntityC2SPacket {
static interact(entity: Entity,playerSneaking: boolean,hand: Hand): PlayerInteractEntityC2SPacket;
static attack(entity: Entity,playerSneaking: boolean): PlayerInteractEntityC2SPacket;
static interactAt(entity: Entity,playerSneaking: boolean,hand: Hand,pos: Vec3d): PlayerInteractEntityC2SPacket;
static ATTACK: PlayerInteractEntityC2SPacket_InteractTypeHandler;
}

//net.minecraft.util.profiling.jfr.event.NetworkSummaryEvent$Recorder
class NetworkSummaryEvent_Recorder extends JObject{
 commit(): void;
 addReceivedPacket(bytes: number): void;
 addSentPacket(bytes: number): void;
}

//net.minecraft.unused.packageinfo.PackageInfo6810
interface PackageInfo6810 extends JObject{
}

//net.minecraft.client.realms.CheckedGson
class CheckedGson extends JObject{
 fromJson(json: string,type: Class): RealmsSerializable;
 toJson(serializable: RealmsSerializable): string;
 toJson(json: JsonElement): string;
}

//net.minecraft.loot.context.LootContextParameterSet$Builder
class LootContextParameterSet_Builder extends JObject{
 add(parameter: LootContextParameter,value: Object): LootContextParameterSet_Builder;
 get(parameter: LootContextParameter): Object;
 build(contextType: LootContextType): LootContextParameterSet;
 addDynamicDrop(id: Identifier,dynamicDrop: LootContextParameterSet_DynamicDrop): LootContextParameterSet_Builder;
 getWorld(): ServerWorld;
 getOptional(parameter: LootContextParameter): Object;
 luck(luck: number): LootContextParameterSet_Builder;
 addOptional(parameter: LootContextParameter,value: Object): LootContextParameterSet_Builder;
}

//net.minecraft.datafixer.TypeReferences
class TypeReferences extends JObject{
}
class Static_TypeReferences {
static method_5147(): string;
static method_5140(): string;
static method_5149(): string;
static method_5144(): string;
static method_49772(): string;
static method_5143(): string;
static method_25932(): string;
static method_5145(): string;
static method_5142(): string;
static method_5138(): string;
static method_42636(): string;
static method_5137(): string;
static method_5141(): string;
static method_5150(): string;
static method_5139(): string;
static method_20330(): string;
static method_20339(): string;
static method_20336(): string;
static method_31466(): string;
static method_20335(): string;
static method_5146(): string;
static method_20331(): string;
static method_20334(): string;
static method_20333(): string;
static method_20338(): string;
static method_20332(): string;
static method_20337(): string;
static method_5148(): string;
static LEVEL: DSL_TypeReference;
static PLAYER: DSL_TypeReference;
static CHUNK: DSL_TypeReference;
static HOTBAR: DSL_TypeReference;
static OPTIONS: DSL_TypeReference;
static STRUCTURE: DSL_TypeReference;
static STATS: DSL_TypeReference;
static SAVED_DATA: DSL_TypeReference;
static ADVANCEMENTS: DSL_TypeReference;
static POI_CHUNK: DSL_TypeReference;
static ENTITY_CHUNK: DSL_TypeReference;
static BLOCK_ENTITY: DSL_TypeReference;
static ITEM_STACK: DSL_TypeReference;
static BLOCK_STATE: DSL_TypeReference;
static ENTITY_NAME: DSL_TypeReference;
static ENTITY_TREE: DSL_TypeReference;
static ENTITY: DSL_TypeReference;
static BLOCK_NAME: DSL_TypeReference;
static ITEM_NAME: DSL_TypeReference;
static GAME_EVENT_NAME: DSL_TypeReference;
static UNTAGGED_SPAWNER: DSL_TypeReference;
static STRUCTURE_FEATURE: DSL_TypeReference;
static OBJECTIVE: DSL_TypeReference;
static TEAM: DSL_TypeReference;
static RECIPE: DSL_TypeReference;
static BIOME: DSL_TypeReference;
static MULTI_NOISE_BIOME_SOURCE_PARAMETER_LIST: DSL_TypeReference;
static WORLD_GEN_SETTINGS: DSL_TypeReference;
}

//net.minecraft.entity.ai.brain.task.PacifyTask
class PacifyTask extends JObject{
}
class Static_PacifyTask {
static create(requiredMemory: MemoryModuleType,duration: number): Task;
static method_46907(memoryModuleType: MemoryModuleType): string;
static method_46909(memoryModuleType: MemoryModuleType,i: number,context: TaskTriggerer_TaskContext): App;
static method_46905(i: number,attackTarget: MemoryQueryResult,pacified: MemoryQueryResult,requiredMemoryResult: MemoryQueryResult): TaskRunnable;
static method_46906(memoryQueryResult: MemoryQueryResult,i: number,memoryQueryResult2: MemoryQueryResult,world: ServerWorld,entity: LivingEntity,time: long): boolean;
}

//net.minecraft.world.EntityList
class EntityList extends JObject{
 add(entity: Entity): void;
 remove(entity: Entity): void;
 forEach(action: Consumer): void;
 has(entity: Entity): boolean;
}

//net.minecraft.loot.entry.LootPoolEntry$Builder
class LootPoolEntry_Builder extends JObject, LootConditionConsumingBuilder{
 build(): LootPoolEntry;
 sequenceEntry(entry: LootPoolEntry_Builder): GroupEntry_Builder;
 groupEntry(entry: LootPoolEntry_Builder): SequenceEntry_Builder;
 alternatively(builder: LootPoolEntry_Builder): AlternativeEntry_Builder;
 conditionally(condition: LootCondition_Builder): LootConditionConsumingBuilder;
 conditionally(builder: LootCondition_Builder): LootPoolEntry_Builder;
 getThisConditionConsumingBuilder(): LootConditionConsumingBuilder;
 getThisConditionConsumingBuilder(): LootPoolEntry_Builder;
}

//net.minecraft.network.message.SentMessage
interface SentMessage extends JObject{
 getContent(): Text;
 send(sender: ServerPlayerEntity,filterMaskEnabled: boolean,params: MessageType_Parameters): void;
}
class Static_SentMessage {
static of(message: SignedMessage): SentMessage;
}

//net.minecraft.loot.entry.LootPoolEntry$Serializer
class LootPoolEntry_Serializer extends JObject, JsonSerializer{
 addEntryFields(json: JsonObject,entry: LootPoolEntry,context: JsonSerializationContext): void;
 fromJson(json: JsonObject,context: JsonDeserializationContext): Object;
 fromJson(json: JsonObject,context: JsonDeserializationContext,conditions: LootCondition[]): LootPoolEntry;
 fromJson(jsonObject: JsonObject,jsonDeserializationContext: JsonDeserializationContext): LootPoolEntry;
 toJson(jsonObject: JsonObject,lootPoolEntry: LootPoolEntry,jsonSerializationContext: JsonSerializationContext): void;
 toJson(json: JsonObject,object: Object,context: JsonSerializationContext): void;
}

//net.minecraft.advancement.AdvancementManager
class AdvancementManager extends JObject{
 get(id: Identifier): Advancement;
 load(advancements: Map): void;
 clear(): void;
 removeAll(advancements: Set): void;
 setListener(listener: AdvancementManager_Listener): void;
 getRoots(): Iterable;
 getAdvancements(): Collection;
}
class Static_AdvancementManager {
static LOGGER: Logger;
}

//net.minecraft.network.packet.s2c.play.VehicleMoveS2CPacket
class VehicleMoveS2CPacket extends JObject, Packet{
 apply(clientPlayPacketListener: ClientPlayPacketListener): void;
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
 getX(): number;
 getY(): number;
 getZ(): number;
 getPitch(): number;
 getYaw(): number;
}

//net.minecraft.data.server.advancement.vanilla.VanillaEndTabAdvancementGenerator
class VanillaEndTabAdvancementGenerator extends JObject, AdvancementTabGenerator{
 accept(lookup: RegistryWrapper_WrapperLookup,exporter: Consumer): void;
}

//net.minecraft.unused.packageinfo.PackageInfo6820
interface PackageInfo6820 extends JObject{
}

//net.minecraft.world.gen.densityfunction.DensityFunction$EachApplier
interface DensityFunction_EachApplier extends JObject{
 fill(densities: number[],densityFunction: DensityFunction): void;
 at(index: number): DensityFunction_NoisePos;
}

//net.minecraft.world.gen.densityfunction.DensityFunction
interface DensityFunction extends JObject{
 abs(): DensityFunction;
 apply(visitor: DensityFunction_DensityFunctionVisitor): DensityFunction;
 fill(densities: number[],applier: DensityFunction_EachApplier): void;
 maxValue(): number;
 square(): DensityFunction;
 sample(pos: DensityFunction_NoisePos): number;
 minValue(): number;
 clamp(min: number,max: number): DensityFunction;
 getCodecHolder(): CodecHolder;
 cube(): DensityFunction;
 halfNegative(): DensityFunction;
 squeeze(): DensityFunction;
 quarterNegative(): DensityFunction;
}
class Static_DensityFunction {
static method_41061(fun: DensityFunction): RegistryEntry;
static CODEC: Codec;
static REGISTRY_ENTRY_CODEC: Codec;
static FUNCTION_CODEC: Codec;
}

//net.minecraft.network.packet.s2c.play.PlayerListS2CPacket$Action$Writer
interface PlayerListS2CPacket_Action_Writer extends JObject{
 write(buf: PacketByteBuf,entry: PlayerListS2CPacket_Entry): void;
}

//net.minecraft.world.biome.source.util.MultiNoiseUtil$Entries
class MultiNoiseUtil_Entries extends JObject{
 get(point: MultiNoiseUtil_NoiseValuePoint): Object;
 getValue(point: MultiNoiseUtil_NoiseValuePoint): Object;
 getEntries(): List;
 getValueSimple(point: MultiNoiseUtil_NoiseValuePoint): Object;
}
class Static_MultiNoiseUtil_Entries {
static method_49498(mapCodec: MapCodec,instance: RecordCodecBuilder_Instance): App;
static createCodec(entryCodec: MapCodec): Codec;
}

//net.minecraft.util.profiler.ReadableProfiler
interface ReadableProfiler extends JObject, Profiler{
 getResult(): ProfileResult;
 getInfo(name: string): ProfilerSystem_LocatedInfo;
 getSampleTargets(): Set;
}

//net.minecraft.client.gui.hud.spectator.SpectatorMenu$CloseSpectatorMenuCommand
class SpectatorMenu_CloseSpectatorMenuCommand extends JObject, SpectatorMenuCommand{
 getName(): Text;
 use(menu: SpectatorMenu): void;
 isEnabled(): boolean;
 renderIcon(context: DrawContext,brightness: number,alpha: number): void;
}

//net.minecraft.client.gui.screen.world.WorldScreenOptionGrid$OptionBuilder
class WorldScreenOptionGrid_OptionBuilder extends JObject{
 toggleable(toggleable: BooleanSupplier): WorldScreenOptionGrid_OptionBuilder;
 tooltip(tooltip: Text): WorldScreenOptionGrid_OptionBuilder;
}
class Static_WorldScreenOptionGrid_OptionBuilder {
static method_49029(tooltip: Tooltip,value: Boolean): Tooltip;
}

//net.minecraft.client.render.block.BlockModels
class BlockModels extends JObject{
 getModel(state: BlockState): BakedModel;
 setModels(models: Map): void;
 getModelManager(): BakedModelManager;
 getModelParticleSprite(state: BlockState): Sprite;
}
class Static_BlockModels {
static getModelId(id: Identifier,state: BlockState): ModelIdentifier;
static getModelId(state: BlockState): ModelIdentifier;
static propertyValueToString(property: Property,value: Comparable): string;
static propertyMapToString(map: Map): string;
}

//net.minecraft.client.font.MultilineText$Line
class MultilineText_Line extends JObject{
}

//net.minecraft.network.packet.c2s.play.PlayerInteractEntityC2SPacket$1


//net.minecraft.client.render.chunk.ChunkBuilder$ChunkData
class ChunkBuilder_ChunkData extends JObject{
 isEmpty(layer: RenderLayer): boolean;
 isEmpty(): boolean;
 getBlockEntities(): List;
 isVisibleThrough(from: Direction,to: Direction): boolean;
}
class Static_ChunkBuilder_ChunkData {
static EMPTY: ChunkBuilder_ChunkData;
}

//net.minecraft.client.particle.CrackParticle$SnowballFactory
class CrackParticle_SnowballFactory extends JObject, ParticleFactory{
 createParticle(defaultParticleType: DefaultParticleType,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
 createParticle(particleEffect: ParticleEffect,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
}

//net.minecraft.block.TripwireBlock$1


//net.minecraft.server.SaveLoading
class SaveLoading extends JObject{
}
class Static_SaveLoading {
static load(serverConfig: SaveLoading_ServerConfig,loadContextSupplier: SaveLoading_LoadContextSupplier,saveApplierFactory: SaveLoading_SaveApplierFactory,prepareExecutor: Executor,applyExecutor: Executor): CompletableFuture;
static method_42097(immutable: DynamicRegistryManager_Immutable,saveApplierFactory: SaveLoading_SaveApplierFactory,lifecycledResourceManager: LifecycledResourceManager,combinedDynamicRegistries: CombinedDynamicRegistries,loadContext: SaveLoading_LoadContext,dataPackContents: DataPackContents): Object;
static method_42096(lifecycledResourceManager: LifecycledResourceManager,dataPackContents: DataPackContents,throwable: Throwable): void;
static withRegistriesLoaded(resourceManager: ResourceManager,combinedDynamicRegistries: CombinedDynamicRegistries,type: ServerDynamicRegistryType,entries: List): CombinedDynamicRegistries;
static loadDynamicRegistryManager(resourceManager: ResourceManager,combinedDynamicRegistries: CombinedDynamicRegistries,type: ServerDynamicRegistryType,entries: List): DynamicRegistryManager_Immutable;
static LOGGER: Logger;
}

//net.minecraft.resource.ResourceFactory
interface ResourceFactory extends JObject{
 getResource(id: Identifier): Optional;
 open(id: Identifier): InputStream;
 getResourceOrThrow(id: Identifier): Resource;
 openAsReader(id: Identifier): BufferedReader;
}
class Static_ResourceFactory {
static method_43043(identifier: Identifier): FileNotFoundException;
static fromMap(map: Map): ResourceFactory;
static method_45307(map: Map,id: Identifier): Optional;
}

//net.minecraft.test.TestRunner
class TestRunner extends JObject{
 run(): void;
 getTests(): List;
}
class Static_TestRunner {
static method_33313(blockRotation: BlockRotation,serverWorld: ServerWorld,testFunction: TestFunction): GameTestState;
static method_33312(blockRotation: BlockRotation,serverWorld: ServerWorld,batch: GameTestBatch): Pair;
static method_33314(batch: Pair): Stream;
static LOGGER: Logger;
}

//net.minecraft.client.render.BackgroundRenderer$StatusEffectFogModifier
interface BackgroundRenderer_StatusEffectFogModifier extends JObject{
 applyColorModifier(entity: LivingEntity,effect: StatusEffectInstance,f: number,tickDelta: number): number;
 shouldApply(entity: LivingEntity,tickDelta: number): boolean;
 getStatusEffect(): StatusEffect;
 applyStartEndModifier(fogData: BackgroundRenderer_FogData,entity: LivingEntity,effect: StatusEffectInstance,viewDistance: number,tickDelta: number): void;
}

//net.minecraft.client.option.SimpleOption$ValueTextGetter
interface SimpleOption_ValueTextGetter extends JObject{
 toString(optionText: Text,value: Object): Text;
}

//net.minecraft.server.command.LocateCommand
class LocateCommand extends JObject{
}
class Static_LocateCommand {
static register(dispatcher: CommandDispatcher,registryAccess: CommandRegistryAccess): void;
static getKeyString(result: Pair): string;
static method_43914(context: CommandContext): number;
static method_43904(context: CommandContext): number;
static method_43911(context: CommandContext): number;
static method_13448(source: ServerCommandSource): boolean;
static method_45151(entryPredicate: RegistryEntryPredicateArgumentType_EntryPredicate,entry: RegistryEntry_Reference): string;
static executeLocatePoi(source: ServerCommandSource,predicate: RegistryEntryPredicateArgumentType_EntryPredicate): number;
static method_43909(registry: Registry,key: RegistryKey): Optional;
static sendCoordinates(source: ServerCommandSource,predicate: RegistryEntryPredicateArgumentType_EntryPredicate,currentPos: BlockPos,result: Pair,successMessage: string,includeY: boolean,timeTaken: Duration): number;
static sendCoordinates(source: ServerCommandSource,structure: RegistryPredicateArgumentType_RegistryPredicate,currentPos: BlockPos,result: Pair,successMessage: string,includeY: boolean,timeTaken: Duration): number;
static sendCoordinates(source: ServerCommandSource,currentPos: BlockPos,result: Pair,successMessage: string,includeY: boolean,entryString: string,timeTaken: Duration): number;
static method_43906(registryPredicate: RegistryPredicateArgumentType_RegistryPredicate): CommandSyntaxException;
static executeLocateBiome(source: ServerCommandSource,predicate: RegistryEntryPredicateArgumentType_EntryPredicate): number;
static method_45152(key: RegistryKey): string;
static method_45150(entryPredicate: RegistryEntryPredicateArgumentType_EntryPredicate,pair: Pair,tag: RegistryEntryList_Named): string;
static method_43913(id: Object): Message;
static method_41004(key: RegistryKey): string;
static method_52007(string: string,string2: string,text: Text,i: number): Text;
static method_43917(id: Object): Message;
static method_43908(entry: RegistryEntry): RegistryEntryList_Direct;
static method_13447(blockPos: BlockPos,string: string,style: Style): Style;
static method_39985(id: Object): Message;
static method_40998(pair: Pair,key: TagKey): string;
static method_41002(id: Object): Message;
static getDistance(x1: number,y1: number,x2: number,y2: number): number;
static getStructureListForPredicate(predicate: RegistryPredicateArgumentType_RegistryPredicate,structureRegistry: Registry): Optional;
static executeLocateStructure(source: ServerCommandSource,predicate: RegistryPredicateArgumentType_RegistryPredicate): number;
static LOGGER: Logger;
static STRUCTURE_NOT_FOUND_EXCEPTION: DynamicCommandExceptionType;
static STRUCTURE_INVALID_EXCEPTION: DynamicCommandExceptionType;
static BIOME_NOT_FOUND_EXCEPTION: DynamicCommandExceptionType;
static POI_NOT_FOUND_EXCEPTION: DynamicCommandExceptionType;
static LOCATE_STRUCTURE_RADIUS: number;
static LOCATE_BIOME_RADIUS: number;
static LOCATE_BIOME_HORIZONTAL_BLOCK_CHECK_INTERVAL: number;
static LOCATE_BIOME_VERTICAL_BLOCK_CHECK_INTERVAL: number;
static LOCATE_POI_RADIUS: number;
}

//net.minecraft.client.option.SimpleOption$IntSliderCallbacks
interface SimpleOption_IntSliderCallbacks extends JObject, SimpleOption_SliderCallbacks{
 withModifier(sliderProgressValueToValue: IntFunction,valueToSliderProgressValue: ToIntFunction): SimpleOption_SliderCallbacks;
 maxInclusive(): number;
 minInclusive(): number;
 toSliderProgress(value: Object): number;
 toSliderProgress(integer: Integer): number;
 toValue(sliderProgress: number): Object;
 toValue(d: number): Integer;
}

//net.minecraft.item.ToolMaterial
interface ToolMaterial extends JObject{
 getMiningLevel(): number;
 getDurability(): number;
 getEnchantability(): number;
 getAttackDamage(): number;
 getMiningSpeedMultiplier(): number;
 getRepairIngredient(): Ingredient;
}

//net.minecraft.entity.Npc
interface Npc extends JObject{
}

//net.minecraft.block.entity.SculkShriekerWarningManager
class SculkShriekerWarningManager extends JObject{
 reset(): void;
 tick(): void;
 getWarningLevel(): number;
 setWarningLevel(warningLevel: number): void;
}
class Static_SculkShriekerWarningManager {
static getPlayersInRange(world: ServerWorld,pos: BlockPos): List;
static warnNearbyPlayers(world: ServerWorld,pos: BlockPos,player: ServerPlayerEntity): OptionalInt;
static method_42255(vec3d: Vec3d,player: ServerPlayerEntity): boolean;
static method_44001(nearbyPlayer: ServerPlayerEntity): boolean;
static method_45380(playerx: ServerPlayerEntity): Stream;
static method_44002(sculkShriekerWarningManager: SculkShriekerWarningManager,nearbyPlayer: ServerPlayerEntity): void;
static method_45381(sculkShriekerWarningManager: SculkShriekerWarningManager,warningManager: SculkShriekerWarningManager): void;
static method_42269(manager: SculkShriekerWarningManager): Integer;
static method_42263(manager: SculkShriekerWarningManager): Integer;
static method_42254(instance: RecordCodecBuilder_Instance): App;
static method_42266(manager: SculkShriekerWarningManager): Integer;
static canIncreaseWarningLevel(world: ServerWorld,pos: BlockPos): boolean;
static CODEC: Codec;
static MAX_WARNING_LEVEL: number;
static WARN_RANGE: number;
static WARN_WARDEN_RANGE: number;
static WARN_DECREASE_COOLDOWN: number;
static WARN_INCREASE_COOLDOWN: number;
}

//net.minecraft.client.WindowSettings
class WindowSettings extends JObject{
 width: number;
 height: number;
 fullscreenWidth: OptionalInt;
 fullscreenHeight: OptionalInt;
 fullscreen: boolean;
}

//net.minecraft.world.storage.StorageIoWorker$Result
class StorageIoWorker_Result extends JObject{
}

//net.minecraft.world.gen.surfacebuilder.MaterialRules$BlockStateRule
interface MaterialRules_BlockStateRule extends JObject{
 tryApply(x: number,y: number,z: number): BlockState;
}

//net.minecraft.block.VineLogic
class VineLogic extends JObject{
}
class Static_VineLogic {
static getGrowthLength(random: Random): number;
static isValidForWeepingStem(state: BlockState): boolean;
static field_31198: number;
static field_31197: number;
}

//net.minecraft.loot.condition.TimeCheckLootCondition$Serializer
class TimeCheckLootCondition_Serializer extends JObject, JsonSerializer{
 fromJson(json: JsonObject,context: JsonDeserializationContext): Object;
 fromJson(jsonObject: JsonObject,jsonDeserializationContext: JsonDeserializationContext): TimeCheckLootCondition;
 toJson(jsonObject: JsonObject,timeCheckLootCondition: TimeCheckLootCondition,jsonSerializationContext: JsonSerializationContext): void;
 toJson(json: JsonObject,object: Object,context: JsonSerializationContext): void;
}

//net.minecraft.server.command.ExperienceCommand
class ExperienceCommand extends JObject{
}
class Static_ExperienceCommand {
static register(dispatcher: CommandDispatcher): void;
static method_13332(context: CommandContext): number;
static method_13329(context: CommandContext): number;
static method_51970(component: ExperienceCommand_Component,i: number,collection: Collection): Text;
static method_13334(source: ServerCommandSource): boolean;
static method_51973(component: ExperienceCommand_Component,i: number,collection: Collection): Text;
static method_13337(context: CommandContext): number;
static method_13331(context: CommandContext): number;
static method_13336(context: CommandContext): number;
static method_13335(source: ServerCommandSource): boolean;
static method_13338(context: CommandContext): number;
static method_51971(component: ExperienceCommand_Component,serverPlayerEntity: ServerPlayerEntity,i: number): Text;
static method_51974(component: ExperienceCommand_Component,i: number,collection: Collection): Text;
static method_51972(component: ExperienceCommand_Component,i: number,collection: Collection): Text;
static method_13327(context: CommandContext): number;
static method_13339(context: CommandContext): number;
static executeQuery(source: ServerCommandSource,player: ServerPlayerEntity,component: ExperienceCommand_Component): number;
static executeAdd(source: ServerCommandSource,targets: Collection,amount: number,component: ExperienceCommand_Component): number;
static executeSet(source: ServerCommandSource,targets: Collection,amount: number,component: ExperienceCommand_Component): number;
static SET_POINT_INVALID_EXCEPTION: SimpleCommandExceptionType;
}

//net.minecraft.client.util.SelectionManager
class SelectionManager extends JObject{
 insert(string: string): void;
 insert(c: char): boolean;
 delete(offset: number): void;
 delete(offset: number,selectionType: SelectionManager_SelectionType): void;
 copy(): void;
 moveCursorPastWord(offset: number,shiftDown: boolean): void;
 moveCursorPastWord(offset: number): void;
 putCursorAtEnd(): void;
 moveCursorTo(position: number,shiftDown: boolean): void;
 moveCursorTo(position: number): void;
 cut(): void;
 moveCursorToEnd(shiftDown: boolean): void;
 paste(): void;
 moveCursorToStart(): void;
 moveCursorToStart(shiftDown: boolean): void;
 deleteWord(offset: number): void;
 getSelectionStart(): number;
 getSelectionEnd(): number;
 setSelection(start: number,end: number): void;
 selectAll(): void;
 isSelecting(): boolean;
 moveCursor(offset: number,shiftDown: boolean): void;
 moveCursor(offset: number,shiftDown: boolean,selectionType: SelectionManager_SelectionType): void;
 moveCursor(offset: number): void;
 handleSpecialKey(keyCode: number): boolean;
 setSelectionEnd(pos: number): void;
}
class Static_SelectionManager {
static method_27565(minecraftClient: MinecraftClient): string;
static method_27557(minecraftClient: MinecraftClient,clipboardString: string): void;
static getClipboard(client: MinecraftClient): string;
static setClipboard(client: MinecraftClient,clipboard: string): void;
static makeClipboardGetter(client: MinecraftClient): Supplier;
static makeClipboardSetter(client: MinecraftClient): Consumer;
}

//net.minecraft.recipe.SpecialCraftingRecipe
class SpecialCraftingRecipe extends JObject, CraftingRecipe{
 getId(): Identifier;
 getCategory(): CraftingRecipeCategory;
 isIgnoredInRecipeBook(): boolean;
 getOutput(registryManager: DynamicRegistryManager): ItemStack;
}

//net.minecraft.network.packet.c2s.play.PlayerInteractBlockC2SPacket
class PlayerInteractBlockC2SPacket extends JObject, Packet{
 apply(serverPlayPacketListener: ServerPlayPacketListener): void;
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
 getBlockHitResult(): BlockHitResult;
 getHand(): Hand;
 getSequence(): number;
}

//net.minecraft.entity.ai.TargetPredicate
class TargetPredicate extends JObject{
 test(baseEntity: LivingEntity,targetEntity: LivingEntity): boolean;
 copy(): TargetPredicate;
 setPredicate(predicate: Predicate): TargetPredicate;
 ignoreVisibility(): TargetPredicate;
 setBaseMaxDistance(baseMaxDistance: number): TargetPredicate;
 ignoreDistanceScalingFactor(): TargetPredicate;
}
class Static_TargetPredicate {
static createAttackable(): TargetPredicate;
static createNonAttackable(): TargetPredicate;
static DEFAULT: TargetPredicate;
static MIN_DISTANCE: number;
}

//net.minecraft.network.packet.c2s.play.QueryBlockNbtC2SPacket
class QueryBlockNbtC2SPacket extends JObject, Packet{
 apply(serverPlayPacketListener: ServerPlayPacketListener): void;
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
 getTransactionId(): number;
 getPos(): BlockPos;
}

//net.minecraft.structure.StructurePieceType
interface StructurePieceType extends JObject{
 load(context: StructureContext,nbt: NbtCompound): StructurePiece;
}
class Static_StructurePieceType {
static register(type: StructurePieceType,id: string): StructurePieceType;
static register(type: StructurePieceType_ManagerAware,id: string): StructurePieceType;
static register(type: StructurePieceType_Simple,id: string): StructurePieceType;
static MINESHAFT_CORRIDOR: StructurePieceType;
static MINESHAFT_CROSSING: StructurePieceType;
static MINESHAFT_ROOM: StructurePieceType;
static MINESHAFT_STAIRS: StructurePieceType;
static NETHER_FORTRESS_BRIDGE_CROSSING: StructurePieceType;
static NETHER_FORTRESS_BRIDGE_END: StructurePieceType;
static NETHER_FORTRESS_BRIDGE: StructurePieceType;
static NETHER_FORTRESS_CORRIDOR_STAIRS: StructurePieceType;
static NETHER_FORTRESS_CORRIDOR_BALCONY: StructurePieceType;
static NETHER_FORTRESS_CORRIDOR_EXIT: StructurePieceType;
static NETHER_FORTRESS_CORRIDOR_CROSSING: StructurePieceType;
static NETHER_FORTRESS_CORRIDOR_LEFT_TURN: StructurePieceType;
static NETHER_FORTRESS_SMALL_CORRIDOR: StructurePieceType;
static NETHER_FORTRESS_CORRIDOR_RIGHT_TURN: StructurePieceType;
static NETHER_FORTRESS_CORRIDOR_NETHER_WARTS_ROOM: StructurePieceType;
static NETHER_FORTRESS_BRIDGE_PLATFORM: StructurePieceType;
static NETHER_FORTRESS_BRIDGE_SMALL_CROSSING: StructurePieceType;
static NETHER_FORTRESS_BRIDGE_STAIRS: StructurePieceType;
static NETHER_FORTRESS_START: StructurePieceType;
static STRONGHOLD_CHEST_CORRIDOR: StructurePieceType;
static STRONGHOLD_SMALL_CORRIDOR: StructurePieceType;
static STRONGHOLD_FIVE_WAY_CROSSING: StructurePieceType;
static STRONGHOLD_LEFT_TURN: StructurePieceType;
static STRONGHOLD_LIBRARY: StructurePieceType;
static STRONGHOLD_PORTAL_ROOM: StructurePieceType;
static STRONGHOLD_PRISON_HALL: StructurePieceType;
static STRONGHOLD_RIGHT_TURN: StructurePieceType;
static STRONGHOLD_SQUARE_ROOM: StructurePieceType;
static STRONGHOLD_SPIRAL_STAIRCASE: StructurePieceType;
static STRONGHOLD_START: StructurePieceType;
static STRONGHOLD_CORRIDOR: StructurePieceType;
static STRONGHOLD_STAIRS: StructurePieceType;
static JUNGLE_TEMPLE: StructurePieceType;
static OCEAN_TEMPLE: StructurePieceType;
static IGLOO: StructurePieceType;
static RUINED_PORTAL: StructurePieceType;
static SWAMP_HUT: StructurePieceType;
static DESERT_TEMPLE: StructurePieceType;
static OCEAN_MONUMENT_BASE: StructurePieceType;
static OCEAN_MONUMENT_CORE_ROOM: StructurePieceType;
static OCEAN_MONUMENT_DOUBLE_X_ROOM: StructurePieceType;
static OCEAN_MONUMENT_DOUBLE_X_Y_ROOM: StructurePieceType;
static OCEAN_MONUMENT_DOUBLE_Y_ROOM: StructurePieceType;
static OCEAN_MONUMENT_DOUBLE_Y_Z_ROOM: StructurePieceType;
static OCEAN_MONUMENT_DOUBLE_Z_ROOM: StructurePieceType;
static OCEAN_MONUMENT_ENTRY_ROOM: StructurePieceType;
static OCEAN_MONUMENT_PENTHOUSE: StructurePieceType;
static OCEAN_MONUMENT_SIMPLE_ROOM: StructurePieceType;
static OCEAN_MONUMENT_SIMPLE_TOP_ROOM: StructurePieceType;
static OCEAN_MONUMENT_WING_ROOM: StructurePieceType;
static END_CITY: StructurePieceType;
static WOODLAND_MANSION: StructurePieceType;
static BURIED_TREASURE: StructurePieceType;
static SHIPWRECK: StructurePieceType;
static NETHER_FOSSIL: StructurePieceType;
static JIGSAW: StructurePieceType;
}

//net.minecraft.entity.ai.brain.task.LookAtMobWithIntervalTask
class LookAtMobWithIntervalTask extends JObject{
}
class Static_LookAtMobWithIntervalTask {
static method_47071(entity: LivingEntity): boolean;
static method_47072(livingEntity: LivingEntity,f: number,other: LivingEntity): boolean;
static method_47074(taskContext: TaskTriggerer_TaskContext,predicate: Predicate,f: number,interval: LookAtMobWithIntervalTask_Interval,lookTarget: MemoryQueryResult,visibleMobs: MemoryQueryResult): TaskRunnable;
static method_47073(taskContext: TaskTriggerer_TaskContext,memoryQueryResult: MemoryQueryResult,predicate: Predicate,f: number,interval: LookAtMobWithIntervalTask_Interval,memoryQueryResult2: MemoryQueryResult,world: ServerWorld,entity: LivingEntity,time: long): boolean;
static method_47070(entityType: EntityType,entity: LivingEntity): boolean;
static method_47075(predicate: Predicate,f: number,interval: LookAtMobWithIntervalTask_Interval,context: TaskTriggerer_TaskContext): App;
static follow(type: EntityType,maxDistance: number,interval: UniformIntProvider): Task;
static follow(maxDistance: number,interval: UniformIntProvider,predicate: Predicate): Task;
static follow(maxDistance: number,interval: UniformIntProvider): Task;
}

//net.minecraft.client.network.AllowedAddressResolver
class AllowedAddressResolver extends JObject{
 resolve(address: ServerAddress): Optional;
}
class Static_AllowedAddressResolver {
static DEFAULT: AllowedAddressResolver;
}

//net.minecraft.network.packet.c2s.play.CustomPayloadC2SPacket
class CustomPayloadC2SPacket extends JObject, Packet{
 apply(serverPlayPacketListener: ServerPlayPacketListener): void;
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
 getChannel(): Identifier;
 getData(): PacketByteBuf;
}
class Static_CustomPayloadC2SPacket {
static MAX_PAYLOAD_SIZE: number;
static BRAND: Identifier;
}

//net.minecraft.util.TypeFilter$1


//net.minecraft.entity.ai.brain.task.TaskTriggerer$TaskContext
class TaskTriggerer_TaskContext extends JObject, Applicative{
 trigger(runnable: TaskRunnable): TaskTriggerer;
 getValue(result: MemoryQueryResult): Object;
 map(fun: Function,app: App): TaskTriggerer;
 map(fun: Function,app: App): App;
 supply(nameSupplier: Supplier,value: Object): TaskTriggerer;
 lift1(app: App): Function;
 ap4(app: App,app2: App,app3: App,app4: App,app5: App): TaskTriggerer;
 ap4(app: App,function1: App,function2: App,function3: App,function4: App): App;
 ap2(app: App,app2: App,app3: App): TaskTriggerer;
 ap2(app: App,function1: App,function2: App): App;
 ap3(app: App,function1: App,function2: App,function3: App): App;
 ap3(app: App,app2: App,app3: App,app4: App): TaskTriggerer;
 point(object: Object): TaskTriggerer;
 point(value: Object): App;
 queryMemoryAbsent(type: MemoryModuleType): TaskTriggerer;
 queryMemoryValue(type: MemoryModuleType): TaskTriggerer;
 queryMemoryOptional(type: MemoryModuleType): TaskTriggerer;
 getOptionalValue(result: MemoryQueryResult): Optional;
}

//net.minecraft.client.gui.navigation.Navigable
interface Navigable extends JObject{
 getNavigationOrder(): number;
}

//net.minecraft.entity.player.HungerConstants
class HungerConstants extends JObject{
}
class Static_HungerConstants {
static FULL_FOOD_LEVEL: number;
static field_30705: number;
static INITIAL_SATURATION_LEVEL: number;
static field_30707: number;
static EXHAUSTION_UNIT: number;
static SLOW_HEALING_STARVING_INTERVAL: number;
static FAST_HEALING_INTERVAL: number;
static SLOW_HEALING_FOOD_LEVEL: number;
static EXHAUSTION_PER_HITPOINT: number;
static STARVING_FOOD_LEVEL: number;
static field_30714: number;
static field_30715: number;
static field_30716: number;
static field_30717: number;
static field_30718: number;
static field_30719: number;
static field_30720: number;
static field_30721: number;
static field_30722: number;
static field_30723: number;
static field_30724: number;
static field_30726: number;
static field_30727: number;
static field_30728: number;
static field_30729: number;
}

//net.minecraft.util.annotation.DeobfuscateClass
interface DeobfuscateClass extends JObject, Annotation{
}

//net.minecraft.entity.ai.brain.task.ForgetAngryAtTargetTask
class ForgetAngryAtTargetTask extends JObject{
}
class Static_ForgetAngryAtTargetTask {
static create(): Task;
static method_47146(context: TaskTriggerer_TaskContext): App;
static method_47147(taskContext: TaskTriggerer_TaskContext,angryAt: MemoryQueryResult): TaskRunnable;
static method_47148(taskContext: TaskTriggerer_TaskContext,memoryQueryResult: MemoryQueryResult,world: ServerWorld,entity: LivingEntity,time: long): boolean;
static method_47145(target: Entity): LivingEntity;
static method_47144(serverWorld: ServerWorld,target: LivingEntity): boolean;
static method_47149(memoryQueryResult: MemoryQueryResult,target: LivingEntity): void;
}

//net.minecraft.data.server.loottable.LootTableProvider$1


//net.minecraft.util.shape.IdentityPairList
class IdentityPairList extends JObject, PairList{
 size(): number;
 getPairs(): DoubleList;
 forEachPair(predicate: PairList_Consumer): boolean;
}

//net.minecraft.entity.ai.brain.task.WaitTask
class WaitTask extends JObject, Task{
 getName(): string;
 stop(world: ServerWorld,entity: LivingEntity,time: long): void;
 tick(world: ServerWorld,entity: LivingEntity,time: long): void;
 getStatus(): MultiTickTask_Status;
 tryStarting(world: ServerWorld,entity: LivingEntity,time: long): boolean;
}

//net.minecraft.loot.condition.EntityPropertiesLootCondition$Serializer
class EntityPropertiesLootCondition_Serializer extends JObject, JsonSerializer{
 fromJson(json: JsonObject,context: JsonDeserializationContext): Object;
 fromJson(jsonObject: JsonObject,jsonDeserializationContext: JsonDeserializationContext): EntityPropertiesLootCondition;
 toJson(jsonObject: JsonObject,entityPropertiesLootCondition: EntityPropertiesLootCondition,jsonSerializationContext: JsonSerializationContext): void;
 toJson(json: JsonObject,object: Object,context: JsonSerializationContext): void;
}

//net.minecraft.command.DataCommandStorage
class DataCommandStorage extends JObject{
 get(id: Identifier): NbtCompound;
 set(id: Identifier,nbt: NbtCompound): void;
 getIds(): Stream;
}
class Static_DataCommandStorage {
static getSaveKey(namespace: string): string;
static method_22545(entry: Map_Entry): Stream;
static COMMAND_STORAGE_PREFIX: string;
}

//net.minecraft.client.particle.SpriteProvider
interface SpriteProvider extends JObject{
 getSprite(age: number,maxAge: number): Sprite;
 getSprite(random: Random): Sprite;
}

//net.minecraft.network.packet.c2s.play.PlayerMoveC2SPacket
class PlayerMoveC2SPacket extends JObject, Packet{
 apply(listener: PacketListener): void;
 apply(serverPlayPacketListener: ServerPlayPacketListener): void;
 changesPosition(): boolean;
 changesLook(): boolean;
 getX(currentX: number): number;
 getY(currentY: number): number;
 isOnGround(): boolean;
 getZ(currentZ: number): number;
 getPitch(currentPitch: number): number;
 getYaw(currentYaw: number): number;
}

//net.minecraft.command.argument.NbtPathArgumentType$IndexedListElementNode
class NbtPathArgumentType_IndexedListElementNode extends JObject, NbtPathArgumentType_PathNode{
 get(current: NbtElement,results: List): void;
 clear(current: NbtElement): number;
 set(current: NbtElement,source: Supplier): number;
 init(): NbtElement;
 getOrInit(current: NbtElement,source: Supplier,results: List): void;
}

//net.minecraft.client.item.CompassAnglePredicateProvider$CompassTarget
interface CompassAnglePredicateProvider_CompassTarget extends JObject{
 getPos(world: ClientWorld,stack: ItemStack,entity: Entity): GlobalPos;
}

//net.minecraft.client.particle.SuspendParticle$MyceliumFactory
class SuspendParticle_MyceliumFactory extends JObject, ParticleFactory{
 createParticle(defaultParticleType: DefaultParticleType,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
 createParticle(particleEffect: ParticleEffect,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
}

//net.minecraft.loot.LootTable
class LootTable extends JObject{
 validate(reporter: LootTableReporter): void;
 getType(): LootContextType;
 supplyInventory(inventory: Inventory,parameters: LootContextParameterSet,seed: long): void;
 generateLoot(parameters: LootContextParameterSet,seed: long,lootConsumer: Consumer): void;
 generateLoot(parameters: LootContextParameterSet,lootConsumer: Consumer): void;
 generateLoot(context: LootContext,lootConsumer: Consumer): void;
 generateLoot(parameters: LootContextParameterSet,seed: long): ObjectArrayList;
 generateLoot(parameters: LootContextParameterSet): ObjectArrayList;
 generateUnprocessedLoot(parameters: LootContextParameterSet,lootConsumer: Consumer): void;
 generateUnprocessedLoot(context: LootContext,lootConsumer: Consumer): void;
 pools: LootPool[];
 functions: LootFunction[];
}
class Static_LootTable {
static builder(): LootTable_Builder;
static processStacks(world: ServerWorld,consumer: Consumer): Consumer;
static method_331(serverWorld: ServerWorld,consumer: Consumer,stack: ItemStack): void;
static LOGGER: Logger;
static EMPTY: LootTable;
static GENERIC: LootContextType;
}

//net.minecraft.network.packet.s2c.play.DisconnectS2CPacket
class DisconnectS2CPacket extends JObject, Packet{
 apply(clientPlayPacketListener: ClientPlayPacketListener): void;
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
 getReason(): Text;
}

//net.minecraft.network.PacketBundleHandler$Bundler
interface PacketBundleHandler_Bundler extends JObject{
 add(packet: Packet): Packet;
}

//net.minecraft.world.entity.SimpleEntityLookup
class SimpleEntityLookup extends JObject, EntityLookup{
 get(uuid: UUID): EntityLike;
 get(id: number): EntityLike;
 forEach(filter: TypeFilter,consumer: LazyIterationConsumer): void;
 iterate(): Iterable;
 forEachIntersects(box: Box,action: Consumer): void;
 forEachIntersects(filter: TypeFilter,box: Box,consumer: LazyIterationConsumer): void;
}

//net.minecraft.client.gui.widget.AxisGridWidget$1


//net.minecraft.world.event.EntityPositionSource$Type
class EntityPositionSource_Type extends JObject, PositionSourceType{
 readFromBuf(buf: PacketByteBuf): PositionSource;
 readFromBuf(packetByteBuf: PacketByteBuf): EntityPositionSource;
 writeToBuf(buf: PacketByteBuf,positionSource: PositionSource): void;
 writeToBuf(packetByteBuf: PacketByteBuf,entityPositionSource: EntityPositionSource): void;
 getCodec(): Codec;
}

//net.minecraft.server.command.TellRawCommand
class TellRawCommand extends JObject{
}
class Static_TellRawCommand {
static register(dispatcher: CommandDispatcher): void;
static method_13778(source: ServerCommandSource): boolean;
static method_13777(context: CommandContext): number;
}

//net.minecraft.client.util.ClientSamplerSource
class ClientSamplerSource extends JObject, SamplerSource{
 getSamplers(profilerSupplier: Supplier): Set;
}

//net.minecraft.world.gen.carver.Carver$SkipPredicate
interface Carver_SkipPredicate extends JObject{
 shouldSkip(context: CarverContext,scaledRelativeX: number,scaledRelativeY: number,scaledRelativeZ: number,y: number): boolean;
}

//net.minecraft.world.block.SimpleNeighborUpdater
class SimpleNeighborUpdater extends JObject, NeighborUpdater{
 updateNeighbor(state: BlockState,pos: BlockPos,sourceBlock: Block,sourcePos: BlockPos,notify: boolean): void;
 updateNeighbor(pos: BlockPos,sourceBlock: Block,sourcePos: BlockPos): void;
 replaceWithStateForNeighborUpdate(direction: Direction,neighborState: BlockState,pos: BlockPos,neighborPos: BlockPos,flags: number,maxUpdateDepth: number): void;
}

//net.minecraft.entity.ai.brain.task.HuntHoglinTask
class HuntHoglinTask extends JObject{
}
class Static_HuntHoglinTask {
static create(): SingleTickTask;
static method_47286(taskContext: TaskTriggerer_TaskContext,nearestVisibleHuntableHoglin: MemoryQueryResult,angryAt: MemoryQueryResult,huntedRecently: MemoryQueryResult,nearestVisibleAdultPiglins: MemoryQueryResult): TaskRunnable;
static method_47284(context: TaskTriggerer_TaskContext): App;
static hasHuntedRecently(piglin: AbstractPiglinEntity): boolean;
static method_47288(piglin: List): void;
static method_47285(taskContext: TaskTriggerer_TaskContext,memoryQueryResult: MemoryQueryResult,memoryQueryResult2: MemoryQueryResult,world: ServerWorld,entity: PiglinEntity,time: long): boolean;
static method_47289(piglin: List): Boolean;
}

//net.minecraft.client.realms.util.UploadTokenCache
class UploadTokenCache extends JObject{
}
class Static_UploadTokenCache {
static get(worldId: long): string;
static put(wid: long,token: string): void;
static invalidate(world: long): void;
static TOKEN_CACHE: Long2ObjectMap;
}

//net.minecraft.client.render.BuiltChunkStorage
class BuiltChunkStorage extends JObject{
 clear(): void;
 scheduleRebuild(x: number,y: number,z: number,important: boolean): void;
 updateCameraPosition(x: number,z: number): void;
 chunks: ChunkBuilder_BuiltChunk;
}

//net.minecraft.world.event.listener.GameEventDispatcher
interface GameEventDispatcher extends JObject{
 dispatch(event: GameEvent,pos: Vec3d,emitter: GameEvent_Emitter,callback: GameEventDispatcher_DispatchCallback): boolean;
 isEmpty(): boolean;
 removeListener(listener: GameEventListener): void;
 addListener(listener: GameEventListener): void;
}
class Static_GameEventDispatcher {
static EMPTY: GameEventDispatcher;
}

//net.minecraft.client.sound.RepeatingAudioStream$DelegateFactory
interface RepeatingAudioStream_DelegateFactory extends JObject{
 create(stream: InputStream): AudioStream;
}

//net.minecraft.block.entity.LidOpenable
interface LidOpenable extends JObject{
 getAnimationProgress(tickDelta: number): number;
}

//net.minecraft.network.encryption.SignatureUpdatable$SignatureUpdater
interface SignatureUpdatable_SignatureUpdater extends JObject{
 update(data: byte[]): void;
}

//net.minecraft.datafixer.fix.BlockStateFlattening
class BlockStateFlattening extends JObject{
}
class Static_BlockStateFlattening {
static method_15595(object2IntOpenHashMap: Object2IntOpenHashMap): void;
static method_15601(object2IntOpenHashMap: Object2IntOpenHashMap): void;
static lookupBlock(oldBlockName: string): string;
static putStates(oldId: number,newStateStr: string,oldStateStrings: String[]): void;
static fillEmptyStates(): void;
static lookupStateBlock(stateId: number): string;
static lookupState(dynamic: Dynamic): Dynamic;
static lookupState(stateId: number): Dynamic;
static parseState(stateStr: string): Dynamic;
static putStatesFromBlocks0To15(): void;
static putStatesFromBlocks16To31(): void;
static putStatesFromBlocks80To95(): void;
static putStatesFromBlocks96To111(): void;
static putStatesFromBlocks32To47(): void;
static putStatesFromBlocks64To79(): void;
static putStatesFromBlocks48To63(): void;
static putStatesFromBlocks112To127(): void;
static putStatesFromBlocks144To159(): void;
static putStatesFromBlocks160To175(): void;
static putStatesFromBlocks128To143(): void;
static putStatesFromBlocks208To223(): void;
static putStatesFromBlocks192To207(): void;
static putStatesFromBlocks240To255(): void;
static putStatesFromBlocks176To191(): void;
static putStatesFromBlocks224To239(): void;
static LOGGER: Logger;
static OLD_STATE_TO_DYNAMIC: Dynamic[];
static OLD_BLOCK_TO_DYNAMIC: Dynamic[];
static OLD_STATE_TO_ID: Object2IntMap;
static OLD_BLOCK_TO_ID: Object2IntMap;
static FILTER_ME: string;
}

//net.minecraft.nbt.NbtOps
class NbtOps extends JObject, DynamicOps{
 remove(nbtElement: NbtElement,string: string): NbtElement;
 remove(element: Object,key: string): Object;
 toString(): string;
 empty(): NbtElement;
 empty(): Object;
 getByteBuffer(element: Object): DataResult;
 getByteBuffer(nbtElement: NbtElement): DataResult;
 getMap(nbtElement: NbtElement): DataResult;
 getMap(element: Object): DataResult;
 createMap(stream: Stream): NbtElement;
 createMap(entries: Stream): Object;
 createLong(l: long): NbtElement;
 createLong(value: long): Object;
 createString(string: string): Object;
 createString(string: string): NbtElement;
 getStream(element: Object): DataResult;
 getStream(nbtElement: NbtElement): DataResult;
 getList(nbtElement: NbtElement): DataResult;
 getList(element: Object): DataResult;
 mapBuilder(): RecordBuilder;
 getNumberValue(nbtElement: NbtElement): DataResult;
 getNumberValue(element: Object): DataResult;
 createList(stream: Stream): Object;
 createList(stream: Stream): NbtElement;
 mergeToMap(element: Object,map: MapLike): DataResult;
 mergeToMap(map: Object,key: Object,value: Object): DataResult;
 mergeToMap(nbtElement: NbtElement,nbtElement2: NbtElement,nbtElement3: NbtElement): DataResult;
 mergeToMap(nbtElement: NbtElement,mapLike: MapLike): DataResult;
 createByte(b: byte): NbtElement;
 createByte(value: byte): Object;
 getMapValues(element: Object): DataResult;
 getMapValues(nbtElement: NbtElement): DataResult;
 createNumeric(number: Number): NbtElement;
 createNumeric(value: Number): Object;
 createShort(value: short): Object;
 createShort(s: short): NbtElement;
 createInt(i: number): NbtElement;
 createInt(value: number): Object;
 convertTo(dynamicOps: DynamicOps,nbtElement: NbtElement): Object;
 convertTo(ops: DynamicOps,element: Object): Object;
 getStringValue(nbtElement: NbtElement): DataResult;
 getStringValue(element: Object): DataResult;
 getMapEntries(element: Object): DataResult;
 getMapEntries(nbtElement: NbtElement): DataResult;
 createFloat(value: number): Object;
 createFloat(f: number): NbtElement;
 mergeToList(nbtElement: NbtElement,nbtElement2: NbtElement): DataResult;
 mergeToList(list: Object,values: List): DataResult;
 mergeToList(nbtElement: NbtElement,list: List): DataResult;
 mergeToList(list: Object,value: Object): DataResult;
 createDouble(value: number): Object;
 createDouble(d: number): NbtElement;
 createBoolean(bl: boolean): NbtElement;
 createBoolean(value: boolean): Object;
 getLongStream(element: Object): DataResult;
 getLongStream(nbtElement: NbtElement): DataResult;
 createLongList(stream: LongStream): Object;
 createLongList(longStream: LongStream): NbtElement;
 createIntList(stream: IntStream): Object;
 createIntList(intStream: IntStream): NbtElement;
 getIntStream(nbtElement: NbtElement): DataResult;
 getIntStream(element: Object): DataResult;
 createByteList(buf: ByteBuffer): Object;
 createByteList(byteBuffer: ByteBuffer): NbtElement;
}
class Static_NbtOps {
static method_49669(): string;
static method_46230(list: List,merger: NbtOps_Merger): DataResult;
static method_49675(nbtElement: NbtElement): string;
static method_49666(list: List): string;
static method_49676(nbtElement: NbtElement): string;
static method_49668(): string;
static method_49674(nbtElement: NbtElement): string;
static method_46238(nbtElement: NbtElement): DataResult;
static method_46237(nbtElement: NbtElement): DataResult;
static method_46234(nbtElement: NbtElement,merger: NbtOps_Merger): DataResult;
static method_29161(nbtCompound: NbtCompound,nbtCompound2: NbtCompound,key: string): void;
static method_29147(entry: List,nbtCompound: NbtCompound,pair: Pair): void;
static createMerger(nbt: NbtElement): Optional;
static method_29159(nbtCompound: NbtCompound,nbtCompound2: NbtCompound,key: string): void;
static method_49673(nbtElement: NbtElement): string;
static method_49672(nbtElement: NbtElement): string;
static method_29152(nbtCompound: NbtCompound,entry: Pair): void;
static method_49671(nbtElement: NbtElement): string;
static unpackMarker(nbt: NbtCompound): NbtElement;
static method_10667(nbt: NbtElement): NbtElement;
static method_10666(string: string,k: string): boolean;
static method_49670(nbtElement: NbtElement): string;
static method_10670(nbtCompound: NbtCompound,nbtCompound2: NbtCompound,k: string): void;
static method_49667(): string;
static method_46231(consumer: Consumer,nbt: NbtElement): void;
static method_46236(nbt: NbtElement): NbtElement;
static method_46233(nbtList: NbtList,consumer: Consumer): void;
static method_49677(nbtElement: NbtElement): string;
static method_49678(nbtElement: NbtElement): string;
static INSTANCE: NbtOps;
static MARKER_KEY: string;
}

//net.minecraft.network.packet.s2c.play.UnloadChunkS2CPacket
class UnloadChunkS2CPacket extends JObject, Packet{
 apply(clientPlayPacketListener: ClientPlayPacketListener): void;
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
 getX(): number;
 getZ(): number;
}

//net.minecraft.client.render.model.json.Transformation
class Transformation extends JObject{
 equals(o: Object): boolean;
 hashCode(): number;
 apply(leftHanded: boolean,matrices: MatrixStack): void;
 rotation: Vector3f;
 translation: Vector3f;
 scale: Vector3f;
}
class Static_Transformation {
static IDENTITY: Transformation;
}

//net.minecraft.client.render.FixedColorVertexConsumer
class FixedColorVertexConsumer extends JObject, VertexConsumer{
 unfixColor(): void;
 fixedColor(red: number,green: number,blue: number,alpha: number): void;
}

//net.minecraft.client.render.entity.model.EntityModelLayers
class EntityModelLayers extends JObject{
}
class Static_EntityModelLayers {
static register(id: string,layer: string): EntityModelLayer;
static create(id: string,layer: string): EntityModelLayer;
static createInnerArmor(id: string): EntityModelLayer;
static createChestRaft(type: BoatEntity_Type): EntityModelLayer;
static createOuterArmor(id: string): EntityModelLayer;
static createRaft(type: BoatEntity_Type): EntityModelLayer;
static registerMain(id: string): EntityModelLayer;
static createChestBoat(type: BoatEntity_Type): EntityModelLayer;
static createSign(type: WoodType): EntityModelLayer;
static createBoat(type: BoatEntity_Type): EntityModelLayer;
static createHangingSign(type: WoodType): EntityModelLayer;
static getLayers(): Stream;
static MAIN: string;
static LAYERS: Set;
static ALLAY: EntityModelLayer;
static ARMOR_STAND: EntityModelLayer;
static ARMOR_STAND_INNER_ARMOR: EntityModelLayer;
static ARMOR_STAND_OUTER_ARMOR: EntityModelLayer;
static AXOLOTL: EntityModelLayer;
static BANNER: EntityModelLayer;
static BAT: EntityModelLayer;
static BED_FOOT: EntityModelLayer;
static BED_HEAD: EntityModelLayer;
static BEE: EntityModelLayer;
static BELL: EntityModelLayer;
static BLAZE: EntityModelLayer;
static BOOK: EntityModelLayer;
static CAT: EntityModelLayer;
static CAT_COLLAR: EntityModelLayer;
static CAMEL: EntityModelLayer;
static CAVE_SPIDER: EntityModelLayer;
static CHEST: EntityModelLayer;
static CHEST_MINECART: EntityModelLayer;
static CHICKEN: EntityModelLayer;
static COD: EntityModelLayer;
static COMMAND_BLOCK_MINECART: EntityModelLayer;
static CONDUIT: EntityModelLayer;
static CONDUIT_EYE: EntityModelLayer;
static CONDUIT_SHELL: EntityModelLayer;
static CONDUIT_WIND: EntityModelLayer;
static COW: EntityModelLayer;
static CREEPER: EntityModelLayer;
static CREEPER_ARMOR: EntityModelLayer;
static CREEPER_HEAD: EntityModelLayer;
static DECORATED_POT_BASE: EntityModelLayer;
static DECORATED_POT_SIDES: EntityModelLayer;
static DOLPHIN: EntityModelLayer;
static DONKEY: EntityModelLayer;
static DOUBLE_CHEST_LEFT: EntityModelLayer;
static DOUBLE_CHEST_RIGHT: EntityModelLayer;
static DRAGON_SKULL: EntityModelLayer;
static DROWNED: EntityModelLayer;
static DROWNED_INNER_ARMOR: EntityModelLayer;
static DROWNED_OUTER_ARMOR: EntityModelLayer;
static DROWNED_OUTER: EntityModelLayer;
static ELDER_GUARDIAN: EntityModelLayer;
static ELYTRA: EntityModelLayer;
static ENDERMAN: EntityModelLayer;
static ENDERMITE: EntityModelLayer;
static ENDER_DRAGON: EntityModelLayer;
static END_CRYSTAL: EntityModelLayer;
static EVOKER: EntityModelLayer;
static EVOKER_FANGS: EntityModelLayer;
static FOX: EntityModelLayer;
static FROG: EntityModelLayer;
static FURNACE_MINECART: EntityModelLayer;
static GHAST: EntityModelLayer;
static GIANT: EntityModelLayer;
static GIANT_INNER_ARMOR: EntityModelLayer;
static GIANT_OUTER_ARMOR: EntityModelLayer;
static GLOW_SQUID: EntityModelLayer;
static GOAT: EntityModelLayer;
static GUARDIAN: EntityModelLayer;
static HOGLIN: EntityModelLayer;
static HOPPER_MINECART: EntityModelLayer;
static HORSE: EntityModelLayer;
static HORSE_ARMOR: EntityModelLayer;
static HUSK: EntityModelLayer;
static HUSK_INNER_ARMOR: EntityModelLayer;
static HUSK_OUTER_ARMOR: EntityModelLayer;
static ILLUSIONER: EntityModelLayer;
static IRON_GOLEM: EntityModelLayer;
static LEASH_KNOT: EntityModelLayer;
static LLAMA: EntityModelLayer;
static LLAMA_DECOR: EntityModelLayer;
static LLAMA_SPIT: EntityModelLayer;
static MAGMA_CUBE: EntityModelLayer;
static MINECART: EntityModelLayer;
static MOOSHROOM: EntityModelLayer;
static MULE: EntityModelLayer;
static OCELOT: EntityModelLayer;
static PANDA: EntityModelLayer;
static PARROT: EntityModelLayer;
static PHANTOM: EntityModelLayer;
static PIG: EntityModelLayer;
static PIGLIN: EntityModelLayer;
static PIGLIN_BRUTE: EntityModelLayer;
static PIGLIN_BRUTE_INNER_ARMOR: EntityModelLayer;
static PIGLIN_BRUTE_OUTER_ARMOR: EntityModelLayer;
static PIGLIN_HEAD: EntityModelLayer;
static PIGLIN_INNER_ARMOR: EntityModelLayer;
static PIGLIN_OUTER_ARMOR: EntityModelLayer;
static PIG_SADDLE: EntityModelLayer;
static PILLAGER: EntityModelLayer;
static PLAYER: EntityModelLayer;
static PLAYER_HEAD: EntityModelLayer;
static PLAYER_INNER_ARMOR: EntityModelLayer;
static PLAYER_OUTER_ARMOR: EntityModelLayer;
static PLAYER_SLIM: EntityModelLayer;
static PLAYER_SLIM_INNER_ARMOR: EntityModelLayer;
static PLAYER_SLIM_OUTER_ARMOR: EntityModelLayer;
static SPIN_ATTACK: EntityModelLayer;
static POLAR_BEAR: EntityModelLayer;
static PUFFERFISH_BIG: EntityModelLayer;
static PUFFERFISH_MEDIUM: EntityModelLayer;
static PUFFERFISH_SMALL: EntityModelLayer;
static RABBIT: EntityModelLayer;
static RAVAGER: EntityModelLayer;
static SALMON: EntityModelLayer;
static SHEEP: EntityModelLayer;
static SHEEP_FUR: EntityModelLayer;
static SHIELD: EntityModelLayer;
static SHULKER: EntityModelLayer;
static SHULKER_BULLET: EntityModelLayer;
static SILVERFISH: EntityModelLayer;
static SKELETON: EntityModelLayer;
static SKELETON_HORSE: EntityModelLayer;
static SKELETON_INNER_ARMOR: EntityModelLayer;
static SKELETON_OUTER_ARMOR: EntityModelLayer;
static SKELETON_SKULL: EntityModelLayer;
static SLIME: EntityModelLayer;
static SLIME_OUTER: EntityModelLayer;
static SNIFFER: EntityModelLayer;
static SNOW_GOLEM: EntityModelLayer;
static SPAWNER_MINECART: EntityModelLayer;
static SPIDER: EntityModelLayer;
static SQUID: EntityModelLayer;
static STRAY: EntityModelLayer;
static STRAY_INNER_ARMOR: EntityModelLayer;
static STRAY_OUTER_ARMOR: EntityModelLayer;
static STRAY_OUTER: EntityModelLayer;
static STRIDER: EntityModelLayer;
static STRIDER_SADDLE: EntityModelLayer;
static TADPOLE: EntityModelLayer;
static TNT_MINECART: EntityModelLayer;
static TRADER_LLAMA: EntityModelLayer;
static TRIDENT: EntityModelLayer;
static TROPICAL_FISH_LARGE: EntityModelLayer;
static TROPICAL_FISH_LARGE_PATTERN: EntityModelLayer;
static TROPICAL_FISH_SMALL: EntityModelLayer;
static TROPICAL_FISH_SMALL_PATTERN: EntityModelLayer;
static TURTLE: EntityModelLayer;
static VEX: EntityModelLayer;
static VILLAGER: EntityModelLayer;
static VINDICATOR: EntityModelLayer;
static WARDEN: EntityModelLayer;
static WANDERING_TRADER: EntityModelLayer;
static WITCH: EntityModelLayer;
static WITHER: EntityModelLayer;
static WITHER_ARMOR: EntityModelLayer;
static WITHER_SKELETON: EntityModelLayer;
static WITHER_SKELETON_INNER_ARMOR: EntityModelLayer;
static WITHER_SKELETON_OUTER_ARMOR: EntityModelLayer;
static WITHER_SKELETON_SKULL: EntityModelLayer;
static WITHER_SKULL: EntityModelLayer;
static WOLF: EntityModelLayer;
static ZOGLIN: EntityModelLayer;
static ZOMBIE: EntityModelLayer;
static ZOMBIE_HEAD: EntityModelLayer;
static ZOMBIE_HORSE: EntityModelLayer;
static ZOMBIE_INNER_ARMOR: EntityModelLayer;
static ZOMBIE_OUTER_ARMOR: EntityModelLayer;
static ZOMBIE_VILLAGER: EntityModelLayer;
static ZOMBIE_VILLAGER_INNER_ARMOR: EntityModelLayer;
static ZOMBIE_VILLAGER_OUTER_ARMOR: EntityModelLayer;
static ZOMBIFIED_PIGLIN: EntityModelLayer;
static ZOMBIFIED_PIGLIN_INNER_ARMOR: EntityModelLayer;
static ZOMBIFIED_PIGLIN_OUTER_ARMOR: EntityModelLayer;
}

//net.minecraft.network.PacketCallbacks$1


//net.minecraft.client.particle.DamageParticle$EnchantedHitFactory
class DamageParticle_EnchantedHitFactory extends JObject, ParticleFactory{
 createParticle(defaultParticleType: DefaultParticleType,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
 createParticle(particleEffect: ParticleEffect,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
}

//net.minecraft.network.PacketCallbacks$2


//net.minecraft.world.gen.densityfunction.DensityFunctionTypes$Wrapper
interface DensityFunctionTypes_Wrapper extends JObject, DensityFunction{
 type(): DensityFunctionTypes_Wrapping_Type;
 apply(visitor: DensityFunction_DensityFunctionVisitor): DensityFunction;
 wrapped(): DensityFunction;
 getCodecHolder(): CodecHolder;
}

//net.minecraft.world.gen.feature.Feature
class Feature extends JObject{
 generate(context: FeatureContext): boolean;
 getCodec(): Codec;
 generateIfValid(config: FeatureConfig,world: StructureWorldAccess,chunkGenerator: ChunkGenerator,random: Random,pos: BlockPos): boolean;
}
class Static_Feature {
static register(name: string,feature: Feature): Feature;
static isExposedToAir(posToState: Function,pos: BlockPos): boolean;
static method_36997(tagKey: TagKey,state: BlockState): boolean;
static isStone(state: BlockState): boolean;
static testAdjacentStates(posToState: Function,pos: BlockPos,predicate: Predicate): boolean;
static isSoil(world: TestableWorld,pos: BlockPos): boolean;
static isSoil(state: BlockState): boolean;
static notInBlockTagPredicate(tag: TagKey): Predicate;
static NO_OP: Feature;
static TREE: Feature;
static FLOWER: Feature;
static NO_BONEMEAL_FLOWER: Feature;
static RANDOM_PATCH: Feature;
static BLOCK_PILE: Feature;
static SPRING_FEATURE: Feature;
static CHORUS_PLANT: Feature;
static REPLACE_SINGLE_BLOCK: Feature;
static VOID_START_PLATFORM: Feature;
static DESERT_WELL: Feature;
static FOSSIL: Feature;
static HUGE_RED_MUSHROOM: Feature;
static HUGE_BROWN_MUSHROOM: Feature;
static ICE_SPIKE: Feature;
static GLOWSTONE_BLOB: Feature;
static FREEZE_TOP_LAYER: Feature;
static VINES: Feature;
static BLOCK_COLUMN: Feature;
static VEGETATION_PATCH: Feature;
static WATERLOGGED_VEGETATION_PATCH: Feature;
static ROOT_SYSTEM: Feature;
static MULTIFACE_GROWTH: Feature;
static UNDERWATER_MAGMA: Feature;
static MONSTER_ROOM: Feature;
static BLUE_ICE: Feature;
static ICEBERG: Feature;
static FOREST_ROCK: Feature;
static DISK: Feature;
static LAKE: Feature;
static ORE: Feature;
static END_SPIKE: Feature;
static END_ISLAND: Feature;
static END_GATEWAY: Feature;
static SEAGRASS: SeagrassFeature;
static KELP: Feature;
static CORAL_TREE: Feature;
static CORAL_MUSHROOM: Feature;
static CORAL_CLAW: Feature;
static SEA_PICKLE: Feature;
static SIMPLE_BLOCK: Feature;
static BAMBOO: Feature;
static HUGE_FUNGUS: Feature;
static NETHER_FOREST_VEGETATION: Feature;
static WEEPING_VINES: Feature;
static TWISTING_VINES: Feature;
static BASALT_COLUMNS: Feature;
static DELTA_FEATURE: Feature;
static NETHERRACK_REPLACE_BLOBS: Feature;
static FILL_LAYER: Feature;
static BONUS_CHEST: BonusChestFeature;
static BASALT_PILLAR: Feature;
static SCATTERED_ORE: Feature;
static RANDOM_SELECTOR: Feature;
static SIMPLE_RANDOM_SELECTOR: Feature;
static RANDOM_BOOLEAN_SELECTOR: Feature;
static GEODE: Feature;
static DRIPSTONE_CLUSTER: Feature;
static LARGE_DRIPSTONE: Feature;
static POINTED_DRIPSTONE: Feature;
static SCULK_PATCH: Feature;
}

//net.minecraft.resource.metadata.ResourceMetadata
interface ResourceMetadata extends JObject{
 decode(reader: ResourceMetadataReader): Optional;
}
class Static_ResourceMetadata {
static create(stream: InputStream): ResourceMetadata;
static method_45306(): ResourceMetadata;
static NONE: ResourceMetadata;
static NONE_SUPPLIER: InputSupplier;
}

//net.minecraft.client.gui.widget.ButtonWidget$Builder
class ButtonWidget_Builder extends JObject{
 position(x: number,y: number): ButtonWidget_Builder;
 size(width: number,height: number): ButtonWidget_Builder;
 dimensions(x: number,y: number,width: number,height: number): ButtonWidget_Builder;
 build(): ButtonWidget;
 width(width: number): ButtonWidget_Builder;
 tooltip(tooltip: Tooltip): ButtonWidget_Builder;
 narrationSupplier(narrationSupplier: ButtonWidget_NarrationSupplier): ButtonWidget_Builder;
}

//net.minecraft.network.packet.s2c.play.EntitySpawnS2CPacket
class EntitySpawnS2CPacket extends JObject, Packet{
 apply(clientPlayPacketListener: ClientPlayPacketListener): void;
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
 getId(): number;
 getEntityType(): EntityType;
 getVelocityZ(): number;
 getVelocityX(): number;
 getVelocityY(): number;
 getHeadYaw(): number;
 getX(): number;
 getY(): number;
 getZ(): number;
 getEntityData(): number;
 getPitch(): number;
 getYaw(): number;
 getUuid(): UUID;
}
class Static_EntitySpawnS2CPacket {
static VELOCITY_SCALE: number;
static MAX_ABSOLUTE_VELOCITY: number;
}

//net.minecraft.registry.RegistryOps$RegistryInfoGetter
interface RegistryOps_RegistryInfoGetter extends JObject{
 getRegistryInfo(registryRef: RegistryKey): Optional;
}

//net.minecraft.server.filter.TextFilterer$ProfileEncoder
interface TextFilterer_ProfileEncoder extends JObject{
 encode(gameProfile: GameProfile): JsonObject;
}

//net.minecraft.client.Keyboard$1


//net.minecraft.server.command.ChaseCommand
class ChaseCommand extends JObject{
}
class Static_ChaseCommand {
static register(dispatcher: CommandDispatcher): void;
static stop(source: ServerCommandSource): number;
static isRunning(source: ServerCommandSource): boolean;
static method_38778(context: CommandContext): number;
static method_38774(context: CommandContext): number;
static method_38771(context: CommandContext): number;
static method_51935(): Text;
static method_51932(): Text;
static method_38780(context: CommandContext): number;
static method_38781(context: CommandContext): number;
static method_38779(context: CommandContext): number;
static method_38777(context: CommandContext): number;
static method_51933(i: number): Text;
static method_51934(string: string,i: number): Text;
static startServer(source: ServerCommandSource,ip: string,port: number): number;
static startClient(source: ServerCommandSource,ip: string,port: number): number;
static LOCALHOST: string;
static BIND_ALL: string;
static DEFAULT_PORT: number;
static INTERVAL: number;
static DIMENSIONS: BiMap;
static server: ChaseServer;
static client: ChaseClient;
}

//net.minecraft.entity.ai.brain.task.TaskRunnable
interface TaskRunnable extends JObject{
 trigger(world: ServerWorld,entity: LivingEntity,time: long): boolean;
}

//net.minecraft.command.argument.RegistryPredicateArgumentType$Serializer
class RegistryPredicateArgumentType_Serializer extends JObject, ArgumentSerializer{
 getArgumentTypeProperties(argumentType: ArgumentType): ArgumentSerializer_ArgumentTypeProperties;
 getArgumentTypeProperties(registryPredicateArgumentType: RegistryPredicateArgumentType): RegistryPredicateArgumentType_Serializer_Properties;
 fromPacket(buf: PacketByteBuf): ArgumentSerializer_ArgumentTypeProperties;
 fromPacket(packetByteBuf: PacketByteBuf): RegistryPredicateArgumentType_Serializer_Properties;
 writePacket(properties: ArgumentSerializer_ArgumentTypeProperties,buf: PacketByteBuf): void;
 writePacket(properties: RegistryPredicateArgumentType_Serializer_Properties,packetByteBuf: PacketByteBuf): void;
 writeJson(properties: RegistryPredicateArgumentType_Serializer_Properties,jsonObject: JsonObject): void;
 writeJson(properties: ArgumentSerializer_ArgumentTypeProperties,json: JsonObject): void;
}

//net.minecraft.resource.SynchronousResourceReloader
interface SynchronousResourceReloader extends JObject, ResourceReloader{
 reload(synchronizer: ResourceReloader_Synchronizer,manager: ResourceManager,prepareProfiler: Profiler,applyProfiler: Profiler,prepareExecutor: Executor,applyExecutor: Executor): CompletableFuture;
 reload(manager: ResourceManager): void;
}

//net.minecraft.entity.AngledModelEntity
interface AngledModelEntity extends JObject{
 getModelAngles(): Map;
}

//net.minecraft.util.math.noise.SimplexNoiseSampler
class SimplexNoiseSampler extends JObject{
 sample(x: number,y: number,z: number): number;
 sample(x: number,y: number): number;
 originX: number;
 originY: number;
 originZ: number;
}
class Static_SimplexNoiseSampler {
static dot(gradient: number[],x: number,y: number,z: number): number;
static GRADIENTS: number[][];
static SQRT_3: number;
static SKEW_FACTOR_2D: number;
static UNSKEW_FACTOR_2D: number;
}

//net.minecraft.util.TypeFilter
interface TypeFilter extends JObject{
 downcast(obj: Object): Object;
 getBaseClass(): Class;
}
class Static_TypeFilter {
static instanceOf(cls: Class): TypeFilter;
}

//net.minecraft.client.render.debug.WorldGenAttemptDebugRenderer
class WorldGenAttemptDebugRenderer extends JObject, DebugRenderer_Renderer{
 render(matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,cameraX: number,cameraY: number,cameraZ: number): void;
 addBox(pos: BlockPos,size: number,red: number,green: number,blue: number,alpha: number): void;
}

//net.minecraft.advancement.AdvancementProgress$Serializer
class AdvancementProgress_Serializer extends JObject, JsonDeserializer, JsonSerializer{
 deserialize(functionJson: JsonElement,unused: Type,context: JsonDeserializationContext): Object;
 deserialize(jsonElement: JsonElement,type: Type,jsonDeserializationContext: JsonDeserializationContext): AdvancementProgress;
 serialize(advancementProgress: AdvancementProgress,type: Type,jsonSerializationContext: JsonSerializationContext): JsonElement;
 serialize(entry: Object,unused: Type,context: JsonSerializationContext): JsonElement;
}

//net.minecraft.command.argument.EntityAnchorArgumentType
class EntityAnchorArgumentType extends JObject, ArgumentType{
 parse(reader: StringReader): Object;
 parse(stringReader: StringReader): EntityAnchorArgumentType_EntityAnchor;
 getExamples(): Collection;
 listSuggestions(context: CommandContext,builder: SuggestionsBuilder): CompletableFuture;
}
class Static_EntityAnchorArgumentType {
static entityAnchor(): EntityAnchorArgumentType;
static getEntityAnchor(context: CommandContext,name: string): EntityAnchorArgumentType_EntityAnchor;
static method_9293(name: Object): Message;
static EXAMPLES: Collection;
static INVALID_ANCHOR_EXCEPTION: DynamicCommandExceptionType;
}

//net.minecraft.util.Identifier
class Identifier extends JObject, Comparable{
 equals(o: Object): boolean;
 toString(): string;
 hashCode(): number;
 compareTo(other: Object): number;
 compareTo(identifier: Identifier): number;
 getPath(): string;
 getNamespace(): string;
 toTranslationKey(prefix: string,suffix: string): string;
 toTranslationKey(prefix: string): string;
 toTranslationKey(): string;
 withSuffixedPath(suffix: string): Identifier;
 withPath(path: string): Identifier;
 withPath(pathFunction: UnaryOperator): Identifier;
 withPrefixedPath(prefix: string): Identifier;
 toUnderscoreSeparatedString(): string;
 toShortTranslationKey(): string;
}
class Static_Identifier {
static split(id: string,delimiter: char): String[];
static of(namespace: string,path: string): Identifier;
static validate(id: string): DataResult;
static isValid(id: string): boolean;
static fromCommandInput(reader: StringReader): Identifier;
static splitOn(id: string,delimiter: char): Identifier;
static isCharValid(c: char): boolean;
static method_49418(string: string,invalidIdentifierException: InvalidIdentifierException): string;
static isNamespaceValid(namespace: string): boolean;
static validatePath(namespace: string,path: string): string;
static validateNamespace(namespace: string,path: string): string;
static isPathValid(path: string): boolean;
static tryParse(id: string): Identifier;
static isPathCharacterValid(character: char): boolean;
static isNamespaceCharacterValid(character: char): boolean;
static CODEC: Codec;
static COMMAND_EXCEPTION: SimpleCommandExceptionType;
static NAMESPACE_SEPARATOR: char;
static DEFAULT_NAMESPACE: string;
static REALMS_NAMESPACE: string;
}

//net.minecraft.client.util.telemetry.TelemetryLogManager
class TelemetryLogManager extends JObject, AutoCloseable{
 getLogger(): CompletableFuture;
 close(): void;
}
class Static_TelemetryLogManager {
static create(directory: Path): CompletableFuture;
static method_47742(writer: Optional): Optional;
static method_47739(writer: Optional): void;
static method_47741(path: Path): Optional;
static LOGGER: Logger;
static FILE_EXTENSION: string;
static RETENTION_DAYS: number;
}

//net.minecraft.command.argument.AngleArgumentType
class AngleArgumentType extends JObject, ArgumentType{
 parse(stringReader: StringReader): AngleArgumentType_Angle;
 parse(reader: StringReader): Object;
 getExamples(): Collection;
}
class Static_AngleArgumentType {
static angle(): AngleArgumentType;
static getAngle(context: CommandContext,name: string): number;
static EXAMPLES: Collection;
static INCOMPLETE_ANGLE_EXCEPTION: SimpleCommandExceptionType;
static INVALID_ANGLE_EXCEPTION: SimpleCommandExceptionType;
}

//net.minecraft.client.util.telemetry.WorldLoadTimesEvent
class WorldLoadTimesEvent extends JObject{
 send(sender: TelemetrySender): void;
}

//net.minecraft.structure.StructureSets
interface StructureSets extends JObject{
}
class Static_StructureSets {
static bootstrap(structureSetRegisterable: Registerable): void;
}

//net.minecraft.structure.pool.StructurePoolElement
class StructurePoolElement extends JObject{
 getType(): StructurePoolElementType;
 generate(structureTemplateManager: StructureTemplateManager,world: StructureWorldAccess,structureAccessor: StructureAccessor,chunkGenerator: ChunkGenerator,pos: BlockPos,pivot: BlockPos,rotation: BlockRotation,box: BlockBox,random: Random,keepJigsaws: boolean): boolean;
 getGroundLevelDelta(): number;
 getBoundingBox(structureTemplateManager: StructureTemplateManager,pos: BlockPos,rotation: BlockRotation): BlockBox;
 getStart(structureTemplateManager: StructureTemplateManager,rotation: BlockRotation): Vec3i;
 method_16756(world: WorldAccess,structureBlockInfo: StructureTemplate_StructureBlockInfo,pos: BlockPos,rotation: BlockRotation,random: Random,box: BlockBox): void;
 setProjection(projection: StructurePool_Projection): StructurePoolElement;
 getProjection(): StructurePool_Projection;
 getStructureBlockInfos(structureTemplateManager: StructureTemplateManager,pos: BlockPos,rotation: BlockRotation,random: Random): List;
}
class Static_StructurePoolElement {
static ofFeature(placedFeatureEntry: RegistryEntry): Function;
static ofList(elementGetters: List): Function;
static ofEmpty(): Function;
static ofProcessedSingle(id: string,processorListEntry: RegistryEntry): Function;
static method_30437(string: string,registryEntry: RegistryEntry,projection: StructurePool_Projection): LegacySinglePoolElement;
static projectionGetter(): RecordCodecBuilder;
static method_30428(string: string,projection: StructurePool_Projection): SinglePoolElement;
static method_30427(string: string,registryEntry: RegistryEntry,projection: StructurePool_Projection): SinglePoolElement;
static ofLegacySingle(id: string): Function;
static method_30433(projection: StructurePool_Projection): EmptyPoolElement;
static method_40165(string: string,projection: StructurePool_Projection): LegacySinglePoolElement;
static method_30430(list: List,projection: StructurePool_Projection): ListPoolElement;
static method_30424(projection: StructurePool_Projection,elementGetter: Function): StructurePoolElement;
static method_30422(registryEntry: RegistryEntry,projection: StructurePool_Projection): FeaturePoolElement;
static ofSingle(id: string): Function;
static ofProcessedLegacySingle(id: string,processorListEntry: RegistryEntry): Function;
static CODEC: Codec;
static EMPTY_PROCESSORS: RegistryEntry;
}

//net.minecraft.client.realms.gui.screen.UploadResult$Builder
class UploadResult_Builder extends JObject{
 build(): UploadResult;
 withErrorMessage(errorMessage: string): UploadResult_Builder;
 withStatusCode(statusCode: number): UploadResult_Builder;
}

//net.minecraft.client.particle.ParticleTextureSheet$5


//net.minecraft.resource.featuretoggle.FeatureFlags
class FeatureFlags extends JObject{
}
class Static_FeatureFlags {
static isNotVanilla(features: FeatureSet): boolean;
static method_45408(set: Set,id: Identifier): boolean;
static printMissingFlags(featuresToCheck: FeatureSet,features: FeatureSet): string;
static printMissingFlags(featureManager: FeatureManager,featuresToCheck: FeatureSet,features: FeatureSet): string;
static VANILLA: FeatureFlag;
static BUNDLE: FeatureFlag;
static FEATURE_MANAGER: FeatureManager;
static CODEC: Codec;
static VANILLA_FEATURES: FeatureSet;
static DEFAULT_ENABLED_FEATURES: FeatureSet;
}

//net.minecraft.client.particle.ParticleTextureSheet$6


//net.minecraft.client.particle.ParticleTextureSheet$3


//net.minecraft.test.TeamCityTestCompletionListener
class TeamCityTestCompletionListener extends JObject, TestCompletionListener{
 onTestPassed(test: GameTestState): void;
 onTestFailed(test: GameTestState): void;
}
class Static_TeamCityTestCompletionListener {
static LOGGER: Logger;
static ESCAPER: Escaper;
}

//net.minecraft.client.particle.ParticleTextureSheet$4


//net.minecraft.structure.processor.StructureProcessorLists
class StructureProcessorLists extends JObject{
}
class Static_StructureProcessorLists {
static of(id: string): RegistryKey;
static register(processorListRegisterable: Registerable,key: RegistryKey,processors: List): void;
static bootstrap(processorListRegisterable: Registerable): void;
static createTrailRuinsTowerTopProcessor(lootTableId: Identifier,limit: number): CappedStructureProcessor;
static EMPTY: RegistryKey;
static ZOMBIE_PLAINS: RegistryKey;
static ZOMBIE_SAVANNA: RegistryKey;
static ZOMBIE_SNOWY: RegistryKey;
static ZOMBIE_TAIGA: RegistryKey;
static ZOMBIE_DESERT: RegistryKey;
static MOSSIFY_10_PERCENT: RegistryKey;
static MOSSIFY_20_PERCENT: RegistryKey;
static MOSSIFY_70_PERCENT: RegistryKey;
static STREET_PLAINS: RegistryKey;
static STREET_SAVANNA: RegistryKey;
static STREET_SNOWY_OR_TAIGA: RegistryKey;
static FARM_PLAINS: RegistryKey;
static FARM_SAVANNA: RegistryKey;
static FARM_SNOWY: RegistryKey;
static FARM_TAIGA: RegistryKey;
static FARM_DESERT: RegistryKey;
static OUTPOST_ROT: RegistryKey;
static BOTTOM_RAMPART: RegistryKey;
static TREASURE_ROOMS: RegistryKey;
static HOUSING: RegistryKey;
static SIDE_WALL_DEGRADATION: RegistryKey;
static STABLE_DEGRADATION: RegistryKey;
static BASTION_GENERIC_DEGRADATION: RegistryKey;
static RAMPART_DEGRADATION: RegistryKey;
static ENTRANCE_REPLACEMENT: RegistryKey;
static BRIDGE: RegistryKey;
static ROOF: RegistryKey;
static HIGH_WALL: RegistryKey;
static HIGH_RAMPART: RegistryKey;
static FOSSIL_ROT: RegistryKey;
static FOSSIL_COAL: RegistryKey;
static FOSSIL_DIAMONDS: RegistryKey;
static ANCIENT_CITY_START_DEGRADATION: RegistryKey;
static ANCIENT_CITY_GENERIC_DEGRADATION: RegistryKey;
static ANCIENT_CITY_WALLS_DEGRADATION: RegistryKey;
static TRAIL_RUINS_HOUSES_ARCHAEOLOGY: RegistryKey;
static TRAIL_RUINS_ROADS_ARCHAEOLOGY: RegistryKey;
static TRAIL_RUINS_TOWER_TOP_ARCHAEOLOGY: RegistryKey;
}

//net.minecraft.client.QuickPlay
class QuickPlay extends JObject{
}
class Static_QuickPlay {
static startMultiplayer(client: MinecraftClient,serverAddress: string): void;
static startSingleplayer(client: MinecraftClient,levelName: string): void;
static method_51262(string: string,minecraftClient: MinecraftClient,string2: string,string3: string,realmsClient: RealmsClient): void;
static startQuickPlay(client: MinecraftClient,quickPlay: RunArgs_QuickPlay,resourceReload: ResourceReload,realmsClient: RealmsClient): void;
static startRealms(client: MinecraftClient,realmsClient: RealmsClient,realmId: string): void;
static method_51258(l: long,server: RealmsServer): boolean;
static ERROR_TITLE: Text;
static ERROR_INVALID_IDENTIFIER: Text;
static ERROR_REALM_CONNECT: Text;
static ERROR_REALM_PERMISSION: Text;
static TO_TITLE: Text;
static TO_WORLD: Text;
static TO_REALMS: Text;
}

//net.minecraft.client.particle.ParticleTextureSheet$1


//net.minecraft.client.particle.ParticleTextureSheet$2


//net.minecraft.data.DataWriter
interface DataWriter extends JObject{
 write(path: Path,data: byte[],hashCode: HashCode): void;
}
class Static_DataWriter {
static method_44300(path: Path,data: byte[],hashCode: HashCode): void;
static UNCACHED: DataWriter;
}

//net.minecraft.world.gen.GeneratorOptions
class GeneratorOptions extends JObject{
 getSeed(): long;
 shouldGenerateStructures(): boolean;
 hasBonusChest(): boolean;
 withBonusChest(bonusChest: boolean): GeneratorOptions;
 withSeed(seed: OptionalLong): GeneratorOptions;
 withStructures(structures: boolean): GeneratorOptions;
 isLegacyCustomizedType(): boolean;
}
class Static_GeneratorOptions {
static createRandom(): GeneratorOptions;
static getRandomSeed(): long;
static parseSeed(seed: string): OptionalLong;
static method_28605(generatorOptions: GeneratorOptions): Optional;
static method_28606(instance: RecordCodecBuilder_Instance): App;
static CODEC: MapCodec;
static DEMO_OPTIONS: GeneratorOptions;
}

//net.minecraft.entity.DamageUtil
class DamageUtil extends JObject{
}
class Static_DamageUtil {
static getInflictedDamage(damageDealt: number,protection: number): number;
static getDamageLeft(damage: number,armor: number,armorToughness: number): number;
static field_29962: number;
static field_29963: number;
static field_29964: number;
static field_29965: number;
static field_29966: number;
}

//net.minecraft.network.packet.s2c.play.UpdateSelectedSlotS2CPacket
class UpdateSelectedSlotS2CPacket extends JObject, Packet{
 apply(clientPlayPacketListener: ClientPlayPacketListener): void;
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
 getSlot(): number;
}

//net.minecraft.command.argument.RegistryKeyArgumentType
class RegistryKeyArgumentType extends JObject, ArgumentType{
 parse(stringReader: StringReader): RegistryKey;
 parse(reader: StringReader): Object;
 getExamples(): Collection;
 listSuggestions(context: CommandContext,builder: SuggestionsBuilder): CompletableFuture;
}
class Static_RegistryKeyArgumentType {
static getKey(context: CommandContext,name: string,registryRef: RegistryKey,invalidException: DynamicCommandExceptionType): RegistryKey;
static getStructureEntry(context: CommandContext,name: string): RegistryEntry_Reference;
static getRegistry(context: CommandContext,registryRef: RegistryKey): Registry;
static getStructurePoolEntry(context: CommandContext,name: string): RegistryEntry_Reference;
static getConfiguredFeatureEntry(context: CommandContext,name: string): RegistryEntry_Reference;
static registryKey(registryRef: RegistryKey): RegistryKeyArgumentType;
static method_41222(dynamicCommandExceptionType: DynamicCommandExceptionType,registryKey: RegistryKey): CommandSyntaxException;
static method_41226(id: Object): Message;
static method_43776(id: Object): Message;
static method_43775(dynamicCommandExceptionType: DynamicCommandExceptionType,registryKey: RegistryKey): CommandSyntaxException;
static method_43778(id: Object): Message;
static getRegistryEntry(context: CommandContext,name: string,registryRef: RegistryKey,invalidException: DynamicCommandExceptionType): RegistryEntry_Reference;
static EXAMPLES: Collection;
static INVALID_FEATURE_EXCEPTION: DynamicCommandExceptionType;
static INVALID_STRUCTURE_EXCEPTION: DynamicCommandExceptionType;
static INVALID_JIGSAW_EXCEPTION: DynamicCommandExceptionType;
}

//net.minecraft.unused.packageinfo.PackageInfo6876
interface PackageInfo6876 extends JObject{
}

//net.minecraft.structure.StructureTemplateManager$TemplateFileOpener
interface StructureTemplateManager_TemplateFileOpener extends JObject{
 open(): InputStream;
}

//net.minecraft.entity.EntityInteraction$1


//net.minecraft.client.gui.widget.Widget
interface Widget extends JObject{
 getWidth(): number;
 getHeight(): number;
 setX(x: number): void;
 getNavigationFocus(): ScreenRect;
 getX(): number;
 getY(): number;
 forEachChild(consumer: Consumer): void;
 setPosition(x: number,y: number): void;
 setY(y: number): void;
}

//net.minecraft.client.tutorial.BundleTutorial
class BundleTutorial extends JObject{
 onPickupSlotClick(cursorStack: ItemStack,slotStack: ItemStack,clickType: ClickType): void;
}

//net.minecraft.entity.attribute.DefaultAttributeRegistry
class DefaultAttributeRegistry extends JObject{
}
class Static_DefaultAttributeRegistry {
static get(type: EntityType): DefaultAttributeContainer;
static method_26877(entityType: EntityType): boolean;
static method_26874(id: Identifier): void;
static method_26876(entityType: EntityType): boolean;
static hasDefinitionFor(type: EntityType): boolean;
static checkMissing(): void;
static LOGGER: Logger;
static DEFAULT_ATTRIBUTE_REGISTRY: Map;
}

//net.minecraft.entity.ai.brain.task.LookAtMobTask
class LookAtMobTask extends JObject{
}
class Static_LookAtMobTask {
static create(predicate: Predicate,maxDistance: number): SingleTickTask;
static create(maxDistance: number): SingleTickTask;
static create(type: EntityType,maxDistance: number): SingleTickTask;
static create(spawnGroup: SpawnGroup,maxDistance: number): Task;
static method_47066(predicate: Predicate,f: number,context: TaskTriggerer_TaskContext): App;
static method_47063(taskContext: TaskTriggerer_TaskContext,memoryQueryResult: MemoryQueryResult,predicate: Predicate,f: number,memoryQueryResult2: MemoryQueryResult,world: ServerWorld,entity: LivingEntity,time: long): boolean;
static method_47058(entityType: EntityType,entity: LivingEntity): boolean;
static method_47064(taskContext: TaskTriggerer_TaskContext,predicate: Predicate,f: number,lookTarget: MemoryQueryResult,visibleMobs: MemoryQueryResult): TaskRunnable;
static method_47060(livingEntity: LivingEntity,f: number,target: LivingEntity): boolean;
static method_47062(spawnGroup: SpawnGroup,entity: LivingEntity): boolean;
static method_47059(entity: LivingEntity): boolean;
}

//net.minecraft.state.StateManager$Factory
interface StateManager_Factory extends JObject{
 create(owner: Object,entries: ImmutableMap,codec: MapCodec): Object;
}

//net.minecraft.data.server.loottable.vanilla.VanillaChestLootTableGenerator
class VanillaChestLootTableGenerator extends JObject, LootTableGenerator{
 accept(exporter: BiConsumer): void;
}
class Static_VanillaChestLootTableGenerator {
static createPillagerOutpostChestTableBuilder(): LootTable_Builder;
static createNetherBridgeChestTableBuilder(): LootTable_Builder;
static createShipwreckTreasureChestTableBuilder(): LootTable_Builder;
static createJungleTempleChestTableBuilder(): LootTable_Builder;
static createBastionHoglinStableChestTableBuilder(): LootTable_Builder;
static createBastionTreasureChestTableBuilder(): LootTable_Builder;
static createEndCityTreasureChestTableBuilder(): LootTable_Builder;
static createBastionBridgeChestTableBuilder(): LootTable_Builder;
static createStrongholdCorridorChestTableBuilder(): LootTable_Builder;
static createShipwreckSupplyChestTableBuilder(): LootTable_Builder;
static createStrongholdLibraryChestTableBuilder(): LootTable_Builder;
static createShipwreckMapChestTableBuilder(): LootTable_Builder;
static createDesertPyramidChestTableBuilder(): LootTable_Builder;
static createWoodlandMansionChestTableBuilder(): LootTable_Builder;
static createBastionOtherChestTableBuilder(): LootTable_Builder;
static createAncientCityChestTableBuilder(): LootTable_Builder;
}

//net.minecraft.world.storage.ChunkStreamVersion$Wrapper
interface ChunkStreamVersion_Wrapper extends JObject{
 wrap(object: Object): Object;
}

//net.minecraft.text.Texts
class Texts extends JObject{
}
class Static_Texts {
static join(elements: Collection,separator: Text,transformer: Function): MutableText;
static join(elements: Collection,separator: Optional,transformer: Function): MutableText;
static join(elements: Collection,transformer: Function): Text;
static join(texts: Collection,separator: Text): Text;
static parse(source: ServerCommandSource,text: Text,sender: Entity,depth: number): MutableText;
static parse(source: ServerCommandSource,text: Optional,sender: Entity,depth: number): Optional;
static toText(message: Message): Text;
static toText(profile: GameProfile): Text;
static method_10886(string: string): Text;
static joinOrdered(strings: Collection): Text;
static joinOrdered(elements: Collection,transformer: Function): Text;
static parseStyle(source: ServerCommandSource,style: Style,sender: Entity,depth: number): Style;
static method_47524(string: string,style: Style): Style;
static hasTranslation(text: Text): boolean;
static bracketed(text: Text): MutableText;
static setStyleIfAbsent(text: MutableText,style: Style): MutableText;
static bracketedCopyable(string: string): MutableText;
static DEFAULT_SEPARATOR: string;
static GRAY_DEFAULT_SEPARATOR_TEXT: Text;
static DEFAULT_SEPARATOR_TEXT: Text;
}

//net.minecraft.data.client.Model
class Model extends JObject{
 upload(id: Identifier,textures: TextureMap,modelCollector: BiConsumer,jsonFactory: Model_JsonFactory): Identifier;
 upload(id: Identifier,textures: TextureMap,modelCollector: BiConsumer): Identifier;
 upload(block: Block,textures: TextureMap,modelCollector: BiConsumer): Identifier;
 upload(block: Block,suffix: string,textures: TextureMap,modelCollector: BiConsumer): Identifier;
 createJson(id: Identifier,textures: Map): JsonObject;
 uploadWithoutVariant(block: Block,suffix: string,textures: TextureMap,modelCollector: BiConsumer): Identifier;
}
class Static_Model {
static method_48528(jsonFactory: Model_JsonFactory,identifier: Identifier,map: Map): JsonElement;
static method_48526(jsonObject: JsonObject,identifier: Identifier): void;
static method_48527(jsonObject: JsonObject,textureKey: TextureKey,texture: Identifier): void;
}

//net.minecraft.loot.condition.RandomChanceLootCondition
class RandomChanceLootCondition extends JObject, LootCondition{
 test(lootContext: LootContext): boolean;
 test(context: Object): boolean;
 getType(): LootConditionType;
}
class Static_RandomChanceLootCondition {
static builder(chance: number): LootCondition_Builder;
static method_933(f: number): LootCondition;
}

//net.minecraft.util.StringIdentifiable
interface StringIdentifiable extends JObject{
 asString(): string;
}
class Static_StringIdentifiable {
static createCodec(enumValues: Supplier,valueNameTransformer: Function): StringIdentifiable_Codec;
static createCodec(enumValues: Supplier): StringIdentifiable_Codec;
static method_49452(map: Map,id: string): Enum;
static toKeyable(values: StringIdentifiable[]): Keyable;
static method_49453(fun: Function,enum_: Enum): string;
static method_49451(id: string): string;
static method_49450(enum_: Enum): Enum;
static method_49455(enums: Enum[],fun: Function,id: string): Enum;
static field_38377: number;
}

//net.minecraft.recipe.ShapelessRecipe$Serializer
class ShapelessRecipe_Serializer extends JObject, RecipeSerializer{
 write(buf: PacketByteBuf,recipe: Recipe): void;
 write(packetByteBuf: PacketByteBuf,shapelessRecipe: ShapelessRecipe): void;
 read(id: Identifier,json: JsonObject): Recipe;
 read(id: Identifier,buf: PacketByteBuf): Recipe;
 read(identifier: Identifier,jsonObject: JsonObject): ShapelessRecipe;
 read(identifier: Identifier,packetByteBuf: PacketByteBuf): ShapelessRecipe;
}
class Static_ShapelessRecipe_Serializer {
static getIngredients(json: JsonArray): DefaultedList;
}

//net.minecraft.server.command.EffectCommand
class EffectCommand extends JObject{
}
class Static_EffectCommand {
static register(dispatcher: CommandDispatcher,registryAccess: CommandRegistryAccess): void;
static method_51959(collection: Collection): Text;
static method_13235(source: ServerCommandSource): boolean;
static method_51960(statusEffect: StatusEffect,collection: Collection): Text;
static method_51958(statusEffect: StatusEffect,collection: Collection,i: number): Text;
static method_48545(context: CommandContext): number;
static method_13228(context: CommandContext): number;
static method_13232(context: CommandContext): number;
static method_13225(context: CommandContext): number;
static method_13226(context: CommandContext): number;
static method_48547(context: CommandContext): number;
static method_13233(context: CommandContext): number;
static method_51961(statusEffect: StatusEffect,collection: Collection,i: number): Text;
static method_13234(context: CommandContext): number;
static method_23650(context: CommandContext): number;
static method_51962(collection: Collection): Text;
static method_48546(context: CommandContext): number;
static method_51957(statusEffect: StatusEffect,collection: Collection): Text;
static executeClear(source: ServerCommandSource,targets: Collection): number;
static executeClear(source: ServerCommandSource,targets: Collection,statusEffect: RegistryEntry): number;
static executeGive(source: ServerCommandSource,targets: Collection,statusEffect: RegistryEntry,seconds: Integer,amplifier: number,showParticles: boolean): number;
static GIVE_FAILED_EXCEPTION: SimpleCommandExceptionType;
static CLEAR_EVERYTHING_FAILED_EXCEPTION: SimpleCommandExceptionType;
static CLEAR_SPECIFIC_FAILED_EXCEPTION: SimpleCommandExceptionType;
}

//net.minecraft.network.packet.s2c.play.EntityVelocityUpdateS2CPacket
class EntityVelocityUpdateS2CPacket extends JObject, Packet{
 apply(listener: PacketListener): void;
 apply(clientPlayPacketListener: ClientPlayPacketListener): void;
 write(buf: PacketByteBuf): void;
 getId(): number;
 getVelocityZ(): number;
 getVelocityX(): number;
 getVelocityY(): number;
}

//net.minecraft.client.render.debug.DebugRenderer$Renderer
interface DebugRenderer_Renderer extends JObject{
 clear(): void;
 render(matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,cameraX: number,cameraY: number,cameraZ: number): void;
}

//net.minecraft.network.encryption.PacketEncryptionManager
class PacketEncryptionManager extends JObject{
}

//net.minecraft.world.gen.feature.TreeFeatureConfig$Builder
class TreeFeatureConfig_Builder extends JObject{
 build(): TreeFeatureConfig;
 forceDirt(): TreeFeatureConfig_Builder;
 dirtProvider(dirtProvider: BlockStateProvider): TreeFeatureConfig_Builder;
 decorators(decorators: List): TreeFeatureConfig_Builder;
 ignoreVines(): TreeFeatureConfig_Builder;
 trunkProvider: BlockStateProvider;
 foliageProvider: BlockStateProvider;
}

//net.minecraft.network.packet.c2s.query.QueryRequestC2SPacket
class QueryRequestC2SPacket extends JObject, Packet{
 apply(serverQueryPacketListener: ServerQueryPacketListener): void;
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
}

//net.minecraft.world.timer.TimerCallback
interface TimerCallback extends JObject{
 call(server: Object,events: Timer,time: long): void;
}

//net.minecraft.util.JsonSerializer
interface JsonSerializer extends JObject{
 fromJson(json: JsonObject,context: JsonDeserializationContext): Object;
 toJson(json: JsonObject,object: Object,context: JsonSerializationContext): void;
}

//net.minecraft.client.texture.MipmapHelper
class MipmapHelper extends JObject{
}
class Static_MipmapHelper {
static blend(one: number,two: number,three: number,four: number,checkAlpha: boolean): number;
static getColorComponent(one: number,two: number,three: number,four: number,bits: number): number;
static hasAlpha(image: NativeImage): boolean;
static getColorFraction(value: number): number;
static method_24103(list: number[]): void;
static getMipmapLevelsImages(originals: NativeImage[],mipmap: number): NativeImage[];
static MIN_ALPHA: number;
static COLOR_FRACTIONS: number[];
}

//net.minecraft.world.timer.Timer
class Timer extends JObject{
 remove(name: string): number;
 setEvent(name: string,triggerTime: long,callback: TimerCallback): void;
 processEvents(server: Object,time: long): void;
 getEventNames(): Set;
 toNbt(): NbtList;
}
class Static_Timer {
static method_21904(event: Timer_Event): UnsignedLong;
static method_21905(event: Timer_Event): long;
static createEventComparator(): Comparator;
static LOGGER: Logger;
static CALLBACK_KEY: string;
static NAME_KEY: string;
static TRIGGER_TIME_KEY: string;
}

//net.minecraft.world.StructureHolder
interface StructureHolder extends JObject{
 setStructureStart(structure: Structure,start: StructureStart): void;
 getStructureStart(structure: Structure): StructureStart;
 addStructureReference(structure: Structure,reference: long): void;
 getStructureReferences(structure: Structure): LongSet;
 getStructureReferences(): Map;
 setStructureReferences(structureReferences: Map): void;
}

//net.minecraft.client.network.AddressResolver
interface AddressResolver extends JObject{
 resolve(address: ServerAddress): Optional;
}
class Static_AddressResolver {
static method_36903(address: ServerAddress): Optional;
static LOGGER: Logger;
static DEFAULT: AddressResolver;
}

//net.minecraft.entity.ai.control.LookControl
class LookControl extends JObject, Control{
 tick(): void;
 getLookX(): number;
 getLookZ(): number;
 getLookY(): number;
 lookAt(direction: Vec3d): void;
 lookAt(entity: Entity,maxYawChange: number,maxPitchChange: number): void;
 lookAt(entity: Entity): void;
 lookAt(x: number,y: number,z: number,maxYawChange: number,maxPitchChange: number): void;
 lookAt(x: number,y: number,z: number): void;
 isLookingAtSpecificPosition(): boolean;
}
class Static_LookControl {
static getLookingHeightFor(entity: Entity): number;
}

//net.minecraft.client.gui.hud.spectator.SpectatorMenuCloseCallback
interface SpectatorMenuCloseCallback extends JObject{
 close(menu: SpectatorMenu): void;
}

//net.minecraft.util.function.ToFloatFunction
interface ToFloatFunction extends JObject{
 min(): number;
 max(): number;
 apply(x: Object): number;
 compose(before: Function): ToFloatFunction;
}
class Static_ToFloatFunction {
static method_41307(value: number): number;
static fromFloat(delegate: Float2FloatFunction): ToFloatFunction;
static IDENTITY: ToFloatFunction;
}

//net.minecraft.client.render.chunk.ChunkBuilder$BuiltChunk$RebuildTask$RenderData
class ChunkBuilder_BuiltChunk_RebuildTask_RenderData extends JObject{
 noCullingBlockEntities: List;
 blockEntities: List;
 buffers: Map;
 chunkOcclusionData: ChunkOcclusionData;
 translucencySortingData: BufferBuilder_TransparentSortingData;
}

//net.minecraft.world.biome.source.util.MultiNoiseUtil$SearchTree
class MultiNoiseUtil_SearchTree extends JObject{
 get(point: MultiNoiseUtil_NoiseValuePoint,distanceFunction: MultiNoiseUtil_NodeDistanceFunction): Object;
}
class Static_MultiNoiseUtil_SearchTree {
static create(entries: List): MultiNoiseUtil_SearchTree;
static createNode(parameterNumber: number,subTree: List): MultiNoiseUtil_SearchTree_TreeNode;
static sortTree(subTree: List,parameterNumber: number,currentParameter: number,abs: boolean): void;
static getBatchedTree(nodes: List): List;
static method_38146(i: number,node: MultiNoiseUtil_SearchTree_TreeNode): long;
static method_38150(i: number,bl: boolean,treeNode: MultiNoiseUtil_SearchTree_TreeNode): long;
static getRangeLengthSum(parameters: MultiNoiseUtil_ParameterRange): long;
static method_38152(entry: Pair): MultiNoiseUtil_SearchTree_TreeLeafNode;
static method_38147(i: number,node: MultiNoiseUtil_SearchTree_TreeBranchNode): MultiNoiseUtil_SearchTree_TreeNode;
static createNodeComparator(currentParameter: number,abs: boolean): Comparator;
static getEnclosingParameters(subTree: List): List;
static MAX_NODES_FOR_SIMPLE_TREE: number;
}

//net.minecraft.recipe.CookingRecipeSerializer
class CookingRecipeSerializer extends JObject, RecipeSerializer{
 write(buf: PacketByteBuf,recipe: Recipe): void;
 write(packetByteBuf: PacketByteBuf,abstractCookingRecipe: AbstractCookingRecipe): void;
 read(id: Identifier,json: JsonObject): Recipe;
 read(id: Identifier,buf: PacketByteBuf): Recipe;
 read(identifier: Identifier,jsonObject: JsonObject): AbstractCookingRecipe;
 read(identifier: Identifier,packetByteBuf: PacketByteBuf): AbstractCookingRecipe;
}
class Static_CookingRecipeSerializer {
static method_17879(string: string): IllegalStateException;
}

//net.minecraft.command.argument.TimeArgumentType
class TimeArgumentType extends JObject, ArgumentType{
 parse(reader: StringReader): Object;
 parse(stringReader: StringReader): Integer;
 getExamples(): Collection;
 listSuggestions(context: CommandContext,builder: SuggestionsBuilder): CompletableFuture;
}
class Static_TimeArgumentType {
static time(minimum: number): TimeArgumentType;
static time(): TimeArgumentType;
static method_9491(value: Object,minimum: Object): Message;
static EXAMPLES: Collection;
static INVALID_UNIT_EXCEPTION: SimpleCommandExceptionType;
static TICK_COUNT_TOO_LOW_EXCEPTION: Dynamic2CommandExceptionType;
static UNITS: Object2IntMap;
}

//net.minecraft.client.option.GameOptions
class GameOptions extends JObject{
 load(): void;
 write(): void;
 getMainArm(): SimpleOption;
 getChatColors(): SimpleOption;
 getMonochromeLogo(): SimpleOption;
 getChatVisibility(): SimpleOption;
 getChatDelay(): SimpleOption;
 getChatLinksPrompt(): SimpleOption;
 getAutoJump(): SimpleOption;
 getMipmapLevels(): SimpleOption;
 getRawMouseInput(): SimpleOption;
 getChatLineSpacing(): SimpleOption;
 getEnableVsync(): SimpleOption;
 getAo(): SimpleOption;
 getGraphicsMode(): SimpleOption;
 getEntityShadows(): SimpleOption;
 getInvertYMouse(): SimpleOption;
 getChatLinks(): SimpleOption;
 getCloudRenderMode(): SimpleOption;
 getMaxFps(): SimpleOption;
 getChatScale(): SimpleOption;
 getChatOpacity(): SimpleOption;
 getHighContrast(): SimpleOption;
 getChatWidth(): SimpleOption;
 getSoundVolume(category: SoundCategory): number;
 getSprintToggled(): SimpleOption;
 getFullscreen(): SimpleOption;
 getSoundDevice(): SimpleOption;
 getGamma(): SimpleOption;
 getGuiScale(): SimpleOption;
 getSneakToggled(): SimpleOption;
 getParticles(): SimpleOption;
 getGlintSpeed(): SimpleOption;
 getGlintStrength(): SimpleOption;
 getNarrator(): SimpleOption;
 setKeyCode(key: KeyBinding,code: InputUtil_Key): void;
 getOptionsFile(): File;
 getMouseSensitivity(): SimpleOption;
 getMouseWheelSensitivity(): SimpleOption;
 getOperatorItemsTab(): SimpleOption;
 getSimulationDistance(): SimpleOption;
 getHideLightningFlashes(): SimpleOption;
 getEntityDistanceScaling(): SimpleOption;
 refreshResourcePacks(resourcePackManager: ResourcePackManager): void;
 getTextBackgroundOpacity(): SimpleOption;
 getTextBackgroundOpacity(fallback: number): number;
 getChatHeightFocused(): SimpleOption;
 getChatHeightUnfocused(): SimpleOption;
 getChunkBuilderMode(): SimpleOption;
 getBiomeBlendRadius(): SimpleOption;
 getRealmsNotifications(): SimpleOption;
 getAllowServerListing(): SimpleOption;
 getForceUnicodeFont(): SimpleOption;
 getDiscreteMouseScroll(): SimpleOption;
 getDarknessEffectScale(): SimpleOption;
 getBackgroundForChatOnly(): SimpleOption;
 getTelemetryOptInExtra(): SimpleOption;
 getSoundVolumeOption(category: SoundCategory): SimpleOption;
 getDirectionalAudio(): SimpleOption;
 addResourcePackProfilesToManager(manager: ResourcePackManager): void;
 shouldUseNativeTransport(): boolean;
 getCloudRenderModeValue(): CloudRenderMode;
 isPlayerModelPartEnabled(part: PlayerModelPart): boolean;
 collectProfiledOptions(): string;
 togglePlayerModelPart(part: PlayerModelPart,enabled: boolean): void;
 getAutoSuggestions(): SimpleOption;
 sendClientSettings(): void;
 getShowSubtitles(): SimpleOption;
 getPerspective(): Perspective;
 getAttackIndicator(): SimpleOption;
 getFov(): SimpleOption;
 getBobView(): SimpleOption;
 getFovEffectScale(): SimpleOption;
 setPerspective(perspective: Perspective): void;
 getTouchscreen(): SimpleOption;
 getViewDistance(): SimpleOption;
 getPanoramaSpeed(): SimpleOption;
 getShowAutosaveIndicator(): SimpleOption;
 getNotificationDisplayTime(): SimpleOption;
 getReducedDebugInfo(): SimpleOption;
 getTextBackgroundColor(fallbackColor: number): number;
 getTextBackgroundColor(fallbackOpacity: number): number;
 setServerViewDistance(serverViewDistance: number): void;
 getHideMatchedNames(): SimpleOption;
 getOnlyShowSecureChat(): SimpleOption;
 getDistortionEffectScale(): SimpleOption;
 getDamageTiltStrength(): SimpleOption;
 getClampedViewDistance(): number;
 resourcePacks: List;
 incompatibleResourcePacks: List;
 fullscreenResolution: string;
 hideServerAddress: boolean;
 advancedItemTooltips: boolean;
 pauseOnLostFocus: boolean;
 overrideWidth: number;
 overrideHeight: number;
 useNativeTransport: boolean;
 tutorialStep: TutorialStep;
 joinedFirstServer: boolean;
 hideBundleTutorial: boolean;
 glDebugVerbosity: number;
 skipMultiplayerWarning: boolean;
 skipRealms32BitWarning: boolean;
 forwardKey: KeyBinding;
 leftKey: KeyBinding;
 backKey: KeyBinding;
 rightKey: KeyBinding;
 jumpKey: KeyBinding;
 sneakKey: KeyBinding;
 sprintKey: KeyBinding;
 inventoryKey: KeyBinding;
 swapHandsKey: KeyBinding;
 dropKey: KeyBinding;
 useKey: KeyBinding;
 attackKey: KeyBinding;
 pickItemKey: KeyBinding;
 chatKey: KeyBinding;
 playerListKey: KeyBinding;
 commandKey: KeyBinding;
 socialInteractionsKey: KeyBinding;
 screenshotKey: KeyBinding;
 togglePerspectiveKey: KeyBinding;
 smoothCameraKey: KeyBinding;
 fullscreenKey: KeyBinding;
 spectatorOutlinesKey: KeyBinding;
 advancementsKey: KeyBinding;
 hotbarKeys: KeyBinding[];
 saveToolbarActivatorKey: KeyBinding;
 loadToolbarActivatorKey: KeyBinding;
 allKeys: KeyBinding[];
 hudHidden: boolean;
 debugEnabled: boolean;
 debugProfilerEnabled: boolean;
 debugTpsEnabled: boolean;
 lastServer: string;
 smoothCameraEnabled: boolean;
 language: string;
 onboardAccessibility: boolean;
 syncChunkWrites: boolean;
}
class Static_GameOptions {
static isFalse(value: string): boolean;
static method_42436(optionText: Text,value: Double): Text;
static method_45579(prefix: Text,value: Double): Text;
static method_42434(value: Double): void;
static method_45575(soundCategory: SoundCategory,value: Double): void;
static method_42511(value: number): Integer;
static method_42559(optionText: Text,value: Integer): Text;
static method_42459(cloudRenderMode: CloudRenderMode): void;
static method_42497(optionText: Text,value: GraphicsMode): Text;
static method_42483(either: Either): CloudRenderMode;
static method_42464(option: SimpleOption,graphicsMode: GraphicsMode): void;
static method_47397(value: GraphicsMode): Tooltip;
static method_42486(graphicsMode: GraphicsMode): boolean;
static method_42555(value: Integer): void;
static method_42430(value: Double): number;
static method_42428(value: Double): void;
static method_42557(value: Integer): number;
static method_42518(sliderProgressValue: number): Double;
static method_42485(cloudRenderMode: CloudRenderMode): Either;
static method_42480(): boolean;
static method_42568(value: Double): void;
static method_42424(value: Double): void;
static method_42432(optionText: Text,value: Double): Text;
static method_42566(value: Double): void;
static method_42527(value: string): Arm;
static method_42564(optionText: Text,value: Double): Text;
static method_41776(value: ChunkBuilderMode): void;
static method_42456(value: ChatVisibility): void;
static method_47396(value: ChunkBuilderMode): Tooltip;
static method_42460(value: GraphicsMode): void;
static method_42481(value: Arm): string;
static method_47999(value: Boolean): void;
static method_45580(value: Double): void;
static method_42562(value: Double): void;
static method_42541(value: Integer): void;
static method_42558(value: Double): void;
static method_41799(optionText: Text,value: Double): Text;
static method_42545(optionText: Text,value: Integer): Text;
static method_41797(value: Integer): void;
static method_41804(optionText: Text,value: Double): Text;
static method_41802(value: Double): void;
static method_41796(value: Double): void;
static method_48190(value: Double): number;
static method_42458(value: AttackIndicator): void;
static method_41800(optionText: Text,value: Integer): Text;
static method_48187(sliderProgressValue: number): Double;
static method_42560(optionText: Text,value: Double): Text;
static method_42544(value: Double): number;
static method_41788(optionText: Text,value: Double): Text;
static method_42548(optionText: Text,value: Double): Text;
static method_42504(value: number): Double;
static method_42540(value: Double): void;
static method_41778(value: Double): void;
static method_48189(optionText: Text,value: Double): Text;
static method_48188(value: Double): void;
static method_41777(value: Boolean): void;
static method_42530(value: Boolean): void;
static method_42500(value: Boolean): void;
static method_42520(value: Boolean): void;
static method_42466(value: Boolean): void;
static method_42506(optionText: Text,value: Boolean): Text;
static method_42537(value: Boolean): void;
static method_42538(value: Boolean): void;
static method_47398(value: Boolean): Tooltip;
static method_42525(optionText: Text,value: Boolean): Text;
static method_42491(optionText: Text,value: Boolean): Text;
static method_42536(value: Double): Integer;
static method_48975(value: Double): void;
static method_42727(optionText: Text,value: Double): Text;
static method_48584(optionText: Text,value: Double): Text;
static method_42492(optionText: Text,value: Double): Text;
static method_42728(optionText: Text,value: Double): Text;
static method_42532(value: Integer): Double;
static method_47607(value: Boolean): void;
static method_41789(optionText: Text,value: Integer): Text;
static method_41779(value: Integer): void;
static method_42526(value: Double): void;
static method_42726(optionText: Text,value: Double): Text;
static method_42501(value: Double): void;
static method_48583(optionText: Text,value: Double): Text;
static method_42514(value: Double): void;
static method_48976(optionText: Text,value: Double): Text;
static method_47608(optionText: Text,value: Boolean): Text;
static method_48582(value: Double): void;
static method_42479(): number;
static method_42509(value: string): void;
static method_42508(optionText: Text,value: Integer): Text;
static method_42502(value: Integer): void;
static method_42493(optionText: Text,value: Integer): Text;
static method_42467(value: Double): void;
static method_42465(value: ParticlesMode): void;
static method_42523(optionText: Text,value: string): Text;
static method_42522(optionText: Text,value: Integer): Text;
static method_42478(): List;
static method_42516(value: string): Optional;
static method_42515(value: Integer): void;
static parseList(content: string): List;
static method_42468(value: Integer): void;
static isTrue(value: string): boolean;
static getPixelValueText(prefix: Text,value: number): Text;
static method_37293(option: Pair): string;
static method_24230(nbtCompound: NbtCompound,line: string): void;
static method_42533(cloudRenderMode: string): CloudRenderMode;
static method_42547(value: Boolean): CloudRenderMode;
static toMouseWheelSensitivityValue(value: number): number;
static getPercentValueText(prefix: Text,value: number): Text;
static getGenericValueText(prefix: Text,value: number): Text;
static getGenericValueText(prefix: Text,value: Text): Text;
static toMouseWheelSensitivitySliderProgressValue(value: number): number;
static LOGGER: Logger;
static GSON: Gson;
static STRING_LIST_TYPE: TypeToken;
static field_32149: number;
static field_32150: number;
static field_32152: number;
static field_32153: number;
static field_32154: number;
static field_32155: number;
static COLON_SPLITTER: Splitter;
static field_32151: number;
static EMPTY_STRING: string;
static DARK_MOJANG_STUDIOS_BACKGROUND_COLOR_TOOLTIP: Text;
static HIDE_LIGHTNING_FLASHES_TOOLTIP: Text;
static MAX_FRAMERATE: number;
static FAST_GRAPHICS_TOOLTIP: Text;
static FABULOUS_GRAPHICS_TOOLTIP: Text;
static FANCY_GRAPHICS_TOOLTIP: Text;
static NONE_CHUNK_BUILDER_MODE_TOOLTIP: Text;
static BY_PLAYER_CHUNK_BUILDER_MODE_TOOLTIP: Text;
static NEARBY_CHUNK_BUILDER_MODE_TOOLTIP: Text;
static HIGH_CONTRAST_TOOLTIP: Text;
static NOTIFICATION_DISPLAY_TIME_TOOLTIP: Text;
static ALLOW_SERVER_LISTING_TOOLTIP: Text;
static DIRECTIONAL_AUDIO_ON_TOOLTIP: Text;
static DIRECTIONAL_AUDIO_OFF_TOOLTIP: Text;
static TOGGLE_KEY_TEXT: Text;
static HOLD_KEY_TEXT: Text;
static HIDE_MATCHED_NAMES_TOOLTIP: Text;
static ONLY_SHOW_SECURE_CHAT_TOOLTIP: Text;
static TELEMETRY_TOOLTIP: Text;
static SCREEN_EFFECT_SCALE_TOOLTIP: Text;
static FOV_EFFECT_SCALE_TOOLTIP: Text;
static DARKNESS_EFFECT_SCALE_TOOLTIP: Text;
static GLINT_SPEED_TOOLTIP: Text;
static GLINT_STRENGTH_TOOLTIP: Text;
static DAMAGE_TILT_STRENGTH_TOOLTIP: Text;
static field_43405: number;
static MAX_SERIALIZABLE_GUI_SCALE: number;
}

//net.minecraft.structure.StructureTemplate$Palette
class StructureTemplate_Palette extends JObject, Iterable{
 iterator(): Iterator;
 set(state: BlockState,id: number): void;
 getId(state: BlockState): number;
 getState(id: number): BlockState;
}
class Static_StructureTemplate_Palette {
static AIR: BlockState;
}

//net.minecraft.world.gen.structure.BasicTempleStructure$Constructor
interface BasicTempleStructure_Constructor extends JObject{
 construct(random: ChunkRandom,startX: number,startZ: number): StructurePiece;
}

//net.minecraft.structure.rule.blockentity.ClearRuleBlockEntityModifier
class ClearRuleBlockEntityModifier extends JObject, RuleBlockEntityModifier{
 getType(): RuleBlockEntityModifierType;
 modifyBlockEntityNbt(random: Random,nbt: NbtCompound): NbtCompound;
}
class Static_ClearRuleBlockEntityModifier {
static INSTANCE: ClearRuleBlockEntityModifier;
static CODEC: Codec;
}

//net.minecraft.network.packet.s2c.play.BlockUpdateS2CPacket
class BlockUpdateS2CPacket extends JObject, Packet{
 apply(listener: PacketListener): void;
 apply(clientPlayPacketListener: ClientPlayPacketListener): void;
 write(buf: PacketByteBuf): void;
 getState(): BlockState;
 getPos(): BlockPos;
}

//net.minecraft.client.network.ServerInfo
class ServerInfo extends JObject{
 copyFrom(serverInfo: ServerInfo): void;
 copyWithSettingsFrom(serverInfo: ServerInfo): void;
 setFavicon(favicon: byte[]): void;
 getFavicon(): byte[];
 toNbt(): NbtCompound;
 setSecureChatEnforced(secureChatEnforced: boolean): void;
 getResourcePackPolicy(): ServerInfo_ResourcePackPolicy;
 isSecureChatEnforced(): boolean;
 setResourcePackPolicy(resourcePackPolicy: ServerInfo_ResourcePackPolicy): void;
 isLocal(): boolean;
 name: string;
 address: string;
 playerCountLabel: Text;
 label: Text;
 players: ServerMetadata_Players;
 ping: long;
 protocolVersion: number;
 version: Text;
 online: boolean;
 playerListSummary: List;
}
class Static_ServerInfo {
static fromNbt(root: NbtCompound): ServerInfo;
static LOGGER: Logger;
}

//net.minecraft.network.packet.s2c.play.ScoreboardDisplayS2CPacket
class ScoreboardDisplayS2CPacket extends JObject, Packet{
 getName(): string;
 apply(listener: PacketListener): void;
 apply(clientPlayPacketListener: ClientPlayPacketListener): void;
 write(buf: PacketByteBuf): void;
 getSlot(): number;
}

//net.minecraft.world.gen.carver.RavineCarverConfig$Shape
class RavineCarverConfig_Shape extends JObject{
 distanceFactor: FloatProvider;
 thickness: FloatProvider;
 widthSmoothness: number;
 horizontalRadiusFactor: FloatProvider;
 verticalRadiusDefaultFactor: number;
 verticalRadiusCenterFactor: number;
}
class Static_RavineCarverConfig_Shape {
static method_35340(instance: RecordCodecBuilder_Instance): App;
static method_35346(shape: RavineCarverConfig_Shape): FloatProvider;
static method_35345(shape: RavineCarverConfig_Shape): FloatProvider;
static method_35343(shape: RavineCarverConfig_Shape): FloatProvider;
static method_35342(shape: RavineCarverConfig_Shape): Float;
static method_35344(shape: RavineCarverConfig_Shape): Integer;
static method_35341(shape: RavineCarverConfig_Shape): Float;
static CODEC: Codec;
}

//net.minecraft.particle.DefaultParticleType$1


//net.minecraft.client.resource.metadata.AnimationResourceMetadataReader
class AnimationResourceMetadataReader extends JObject, ResourceMetadataReader{
 getKey(): string;
 fromJson(jsonObject: JsonObject): AnimationResourceMetadata;
 fromJson(json: JsonObject): Object;
}

//net.minecraft.inventory.SingleStackInventory
interface SingleStackInventory extends JObject, Inventory{
 clear(): void;
 isEmpty(): boolean;
 size(): number;
 getStack(): ItemStack;
 setStack(stack: ItemStack): void;
 removeStack(): ItemStack;
 removeStack(slot: number): ItemStack;
}

//net.minecraft.world.gen.feature.PlacedFeatures
class PlacedFeatures extends JObject{
}
class Static_PlacedFeatures {
static of(id: string): RegistryKey;
static register(featureRegisterable: Registerable,key: RegistryKey,feature: RegistryEntry,modifiers: PlacementModifier[]): void;
static register(featureRegisterable: Registerable,key: RegistryKey,feature: RegistryEntry,modifiers: List): void;
static bootstrap(featureRegisterable: Registerable): void;
static createEntry(feature: Feature,featureConfig: FeatureConfig,modifiers: PlacementModifier[]): RegistryEntry;
static createEntry(feature: Feature,featureConfig: FeatureConfig): RegistryEntry;
static createEntry(feature: Feature,featureConfig: FeatureConfig,predicate: BlockPredicate): RegistryEntry;
static createEntry(feature: RegistryEntry,modifiers: PlacementModifier[]): RegistryEntry;
static createCountExtraModifier(count: number,extraChance: number,extraCount: number): PlacementModifier;
static isAir(): AbstractConditionalPlacementModifier;
static wouldSurvive(block: Block): BlockFilterPlacementModifier;
static MOTION_BLOCKING_HEIGHTMAP: PlacementModifier;
static OCEAN_FLOOR_WG_HEIGHTMAP: PlacementModifier;
static WORLD_SURFACE_WG_HEIGHTMAP: PlacementModifier;
static OCEAN_FLOOR_HEIGHTMAP: PlacementModifier;
static BOTTOM_TO_TOP_RANGE: PlacementModifier;
static TEN_ABOVE_AND_BELOW_RANGE: PlacementModifier;
static EIGHT_ABOVE_AND_BELOW_RANGE: PlacementModifier;
static FOUR_ABOVE_AND_BELOW_RANGE: PlacementModifier;
static BOTTOM_TO_120_RANGE: PlacementModifier;
}

//net.minecraft.client.render.block.entity.LecternBlockEntityRenderer
class LecternBlockEntityRenderer extends JObject, BlockEntityRenderer{
 render(lecternBlockEntity: LecternBlockEntity,f: number,matrixStack: MatrixStack,vertexConsumerProvider: VertexConsumerProvider,i: number,j: number): void;
 render(entity: BlockEntity,tickDelta: number,matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,light: number,overlay: number): void;
}

//net.minecraft.client.report.MessagesListAdder$MessagesList
interface MessagesListAdder_MessagesList extends JObject{
 addText(text: Text): void;
 addMessage(index: number,message: ReceivedMessage_ChatMessage): void;
}

//net.minecraft.world.WanderingTraderManager
class WanderingTraderManager extends JObject, Spawner{
 spawn(world: ServerWorld,spawnMonsters: boolean,spawnAnimals: boolean): number;
}
class Static_WanderingTraderManager {
static method_44010(poiType: RegistryEntry): boolean;
static method_19631(pos: BlockPos): boolean;
static DEFAULT_SPAWN_TIMER: number;
static DEFAULT_SPAWN_DELAY: number;
static MIN_SPAWN_CHANCE: number;
static MAX_SPAWN_CHANCE: number;
static DEFAULT_SPAWN_CHANCE: number;
static field_30635: number;
static field_30636: number;
}

//net.minecraft.entity.ai.brain.task.LookAtMobWithIntervalTask$Interval
class LookAtMobWithIntervalTask_Interval extends JObject{
 shouldRun(random: Random): boolean;
}

//net.minecraft.world.gen.structure.StructureKeys
interface StructureKeys extends JObject{
}
class Static_StructureKeys {
static of(id: string): RegistryKey;
static PILLAGER_OUTPOST: RegistryKey;
static MINESHAFT: RegistryKey;
static MINESHAFT_MESA: RegistryKey;
static MANSION: RegistryKey;
static JUNGLE_PYRAMID: RegistryKey;
static DESERT_PYRAMID: RegistryKey;
static IGLOO: RegistryKey;
static SHIPWRECK: RegistryKey;
static SHIPWRECK_BEACHED: RegistryKey;
static SWAMP_HUT: RegistryKey;
static STRONGHOLD: RegistryKey;
static MONUMENT: RegistryKey;
static OCEAN_RUIN_COLD: RegistryKey;
static OCEAN_RUIN_WARM: RegistryKey;
static FORTRESS: RegistryKey;
static NETHER_FOSSIL: RegistryKey;
static END_CITY: RegistryKey;
static BURIED_TREASURE: RegistryKey;
static BASTION_REMNANT: RegistryKey;
static VILLAGE_PLAINS: RegistryKey;
static VILLAGE_DESERT: RegistryKey;
static VILLAGE_SAVANNA: RegistryKey;
static VILLAGE_SNOWY: RegistryKey;
static VILLAGE_TAIGA: RegistryKey;
static RUINED_PORTAL: RegistryKey;
static RUINED_PORTAL_DESERT: RegistryKey;
static RUINED_PORTAL_JUNGLE: RegistryKey;
static RUINED_PORTAL_SWAMP: RegistryKey;
static RUINED_PORTAL_MOUNTAIN: RegistryKey;
static RUINED_PORTAL_OCEAN: RegistryKey;
static RUINED_PORTAL_NETHER: RegistryKey;
static ANCIENT_CITY: RegistryKey;
static TRAIL_RUINS: RegistryKey;
}

//net.minecraft.network.packet.s2c.login.LoginHelloS2CPacket
class LoginHelloS2CPacket extends JObject, Packet{
 apply(clientLoginPacketListener: ClientLoginPacketListener): void;
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
 getPublicKey(): PublicKey;
 getServerId(): string;
 getNonce(): byte[];
}

//net.minecraft.server.command.DamageCommand
class DamageCommand extends JObject{
}
class Static_DamageCommand {
static register(dispatcher: CommandDispatcher,registryAccess: CommandRegistryAccess): void;
static execute(source: ServerCommandSource,target: Entity,amount: number,damageSource: DamageSource): number;
static method_48755(context: CommandContext): number;
static method_48753(context: CommandContext): number;
static method_48750(source: ServerCommandSource): boolean;
static method_48752(context: CommandContext): number;
static method_48754(context: CommandContext): number;
static method_48749(context: CommandContext): number;
static method_51941(f: number,entity: Entity): Text;
static INVULNERABLE_EXCEPTION: SimpleCommandExceptionType;
}

//net.minecraft.resource.metadata.ResourceMetadataSerializer
interface ResourceMetadataSerializer extends JObject, ResourceMetadataReader{
 toJson(metadata: Object): JsonObject;
}
class Static_ResourceMetadataSerializer {
static fromCodec(key: string,codec: Codec): ResourceMetadataSerializer;
}

//net.minecraft.client.gui.widget.CyclingButtonWidget$Values
interface CyclingButtonWidget_Values extends JObject{
 getDefaults(): List;
 getCurrent(): List;
}
class Static_CyclingButtonWidget_Values {
static of(alternativeToggle: BooleanSupplier,defaults: List,alternatives: List): CyclingButtonWidget_Values;
static of(values: Collection): CyclingButtonWidget_Values;
}

//net.minecraft.world.chunk.light.ChunkLightingView
interface ChunkLightingView extends JObject, LightingView{
 getLightSection(pos: ChunkSectionPos): ChunkNibbleArray;
 getLightLevel(pos: BlockPos): number;
}

//net.minecraft.item.Items
class Items extends JObject{
}
class Static_Items {
static register(id: string,item: Item): Item;
static register(id: Identifier,item: Item): Item;
static register(key: RegistryKey,item: Item): Item;
static register(block: Block,item: Item): Item;
static register(block: Block): Item;
static register(item: BlockItem): Item;
static register(block: Block,blocks: Block[]): Item;
static AIR: Item;
static STONE: Item;
static GRANITE: Item;
static POLISHED_GRANITE: Item;
static DIORITE: Item;
static POLISHED_DIORITE: Item;
static ANDESITE: Item;
static POLISHED_ANDESITE: Item;
static DEEPSLATE: Item;
static COBBLED_DEEPSLATE: Item;
static POLISHED_DEEPSLATE: Item;
static CALCITE: Item;
static TUFF: Item;
static DRIPSTONE_BLOCK: Item;
static GRASS_BLOCK: Item;
static DIRT: Item;
static COARSE_DIRT: Item;
static PODZOL: Item;
static ROOTED_DIRT: Item;
static MUD: Item;
static CRIMSON_NYLIUM: Item;
static WARPED_NYLIUM: Item;
static COBBLESTONE: Item;
static OAK_PLANKS: Item;
static SPRUCE_PLANKS: Item;
static BIRCH_PLANKS: Item;
static JUNGLE_PLANKS: Item;
static ACACIA_PLANKS: Item;
static CHERRY_PLANKS: Item;
static DARK_OAK_PLANKS: Item;
static MANGROVE_PLANKS: Item;
static BAMBOO_PLANKS: Item;
static CRIMSON_PLANKS: Item;
static WARPED_PLANKS: Item;
static BAMBOO_MOSAIC: Item;
static OAK_SAPLING: Item;
static SPRUCE_SAPLING: Item;
static BIRCH_SAPLING: Item;
static JUNGLE_SAPLING: Item;
static ACACIA_SAPLING: Item;
static CHERRY_SAPLING: Item;
static DARK_OAK_SAPLING: Item;
static MANGROVE_PROPAGULE: Item;
static BEDROCK: Item;
static SAND: Item;
static SUSPICIOUS_SAND: Item;
static SUSPICIOUS_GRAVEL: Item;
static RED_SAND: Item;
static GRAVEL: Item;
static COAL_ORE: Item;
static DEEPSLATE_COAL_ORE: Item;
static IRON_ORE: Item;
static DEEPSLATE_IRON_ORE: Item;
static COPPER_ORE: Item;
static DEEPSLATE_COPPER_ORE: Item;
static GOLD_ORE: Item;
static DEEPSLATE_GOLD_ORE: Item;
static REDSTONE_ORE: Item;
static DEEPSLATE_REDSTONE_ORE: Item;
static EMERALD_ORE: Item;
static DEEPSLATE_EMERALD_ORE: Item;
static LAPIS_ORE: Item;
static DEEPSLATE_LAPIS_ORE: Item;
static DIAMOND_ORE: Item;
static DEEPSLATE_DIAMOND_ORE: Item;
static NETHER_GOLD_ORE: Item;
static NETHER_QUARTZ_ORE: Item;
static ANCIENT_DEBRIS: Item;
static COAL_BLOCK: Item;
static RAW_IRON_BLOCK: Item;
static RAW_COPPER_BLOCK: Item;
static RAW_GOLD_BLOCK: Item;
static AMETHYST_BLOCK: Item;
static BUDDING_AMETHYST: Item;
static IRON_BLOCK: Item;
static COPPER_BLOCK: Item;
static GOLD_BLOCK: Item;
static DIAMOND_BLOCK: Item;
static NETHERITE_BLOCK: Item;
static EXPOSED_COPPER: Item;
static WEATHERED_COPPER: Item;
static OXIDIZED_COPPER: Item;
static CUT_COPPER: Item;
static EXPOSED_CUT_COPPER: Item;
static WEATHERED_CUT_COPPER: Item;
static OXIDIZED_CUT_COPPER: Item;
static CUT_COPPER_STAIRS: Item;
static EXPOSED_CUT_COPPER_STAIRS: Item;
static WEATHERED_CUT_COPPER_STAIRS: Item;
static OXIDIZED_CUT_COPPER_STAIRS: Item;
static CUT_COPPER_SLAB: Item;
static EXPOSED_CUT_COPPER_SLAB: Item;
static WEATHERED_CUT_COPPER_SLAB: Item;
static OXIDIZED_CUT_COPPER_SLAB: Item;
static WAXED_COPPER_BLOCK: Item;
static WAXED_EXPOSED_COPPER: Item;
static WAXED_WEATHERED_COPPER: Item;
static WAXED_OXIDIZED_COPPER: Item;
static WAXED_CUT_COPPER: Item;
static WAXED_EXPOSED_CUT_COPPER: Item;
static WAXED_WEATHERED_CUT_COPPER: Item;
static WAXED_OXIDIZED_CUT_COPPER: Item;
static WAXED_CUT_COPPER_STAIRS: Item;
static WAXED_EXPOSED_CUT_COPPER_STAIRS: Item;
static WAXED_WEATHERED_CUT_COPPER_STAIRS: Item;
static WAXED_OXIDIZED_CUT_COPPER_STAIRS: Item;
static WAXED_CUT_COPPER_SLAB: Item;
static WAXED_EXPOSED_CUT_COPPER_SLAB: Item;
static WAXED_WEATHERED_CUT_COPPER_SLAB: Item;
static WAXED_OXIDIZED_CUT_COPPER_SLAB: Item;
static OAK_LOG: Item;
static SPRUCE_LOG: Item;
static BIRCH_LOG: Item;
static JUNGLE_LOG: Item;
static ACACIA_LOG: Item;
static CHERRY_LOG: Item;
static DARK_OAK_LOG: Item;
static MANGROVE_LOG: Item;
static MANGROVE_ROOTS: Item;
static MUDDY_MANGROVE_ROOTS: Item;
static CRIMSON_STEM: Item;
static WARPED_STEM: Item;
static BAMBOO_BLOCK: Item;
static STRIPPED_OAK_LOG: Item;
static STRIPPED_SPRUCE_LOG: Item;
static STRIPPED_BIRCH_LOG: Item;
static STRIPPED_JUNGLE_LOG: Item;
static STRIPPED_ACACIA_LOG: Item;
static STRIPPED_CHERRY_LOG: Item;
static STRIPPED_DARK_OAK_LOG: Item;
static STRIPPED_MANGROVE_LOG: Item;
static STRIPPED_CRIMSON_STEM: Item;
static STRIPPED_WARPED_STEM: Item;
static STRIPPED_OAK_WOOD: Item;
static STRIPPED_SPRUCE_WOOD: Item;
static STRIPPED_BIRCH_WOOD: Item;
static STRIPPED_JUNGLE_WOOD: Item;
static STRIPPED_ACACIA_WOOD: Item;
static STRIPPED_CHERRY_WOOD: Item;
static STRIPPED_DARK_OAK_WOOD: Item;
static STRIPPED_MANGROVE_WOOD: Item;
static STRIPPED_CRIMSON_HYPHAE: Item;
static STRIPPED_WARPED_HYPHAE: Item;
static STRIPPED_BAMBOO_BLOCK: Item;
static OAK_WOOD: Item;
static SPRUCE_WOOD: Item;
static BIRCH_WOOD: Item;
static JUNGLE_WOOD: Item;
static ACACIA_WOOD: Item;
static CHERRY_WOOD: Item;
static DARK_OAK_WOOD: Item;
static MANGROVE_WOOD: Item;
static CRIMSON_HYPHAE: Item;
static WARPED_HYPHAE: Item;
static OAK_LEAVES: Item;
static SPRUCE_LEAVES: Item;
static BIRCH_LEAVES: Item;
static JUNGLE_LEAVES: Item;
static ACACIA_LEAVES: Item;
static CHERRY_LEAVES: Item;
static DARK_OAK_LEAVES: Item;
static MANGROVE_LEAVES: Item;
static AZALEA_LEAVES: Item;
static FLOWERING_AZALEA_LEAVES: Item;
static SPONGE: Item;
static WET_SPONGE: Item;
static GLASS: Item;
static TINTED_GLASS: Item;
static LAPIS_BLOCK: Item;
static SANDSTONE: Item;
static CHISELED_SANDSTONE: Item;
static CUT_SANDSTONE: Item;
static COBWEB: Item;
static GRASS: Item;
static FERN: Item;
static AZALEA: Item;
static FLOWERING_AZALEA: Item;
static DEAD_BUSH: Item;
static SEAGRASS: Item;
static SEA_PICKLE: Item;
static WHITE_WOOL: Item;
static ORANGE_WOOL: Item;
static MAGENTA_WOOL: Item;
static LIGHT_BLUE_WOOL: Item;
static YELLOW_WOOL: Item;
static LIME_WOOL: Item;
static PINK_WOOL: Item;
static GRAY_WOOL: Item;
static LIGHT_GRAY_WOOL: Item;
static CYAN_WOOL: Item;
static PURPLE_WOOL: Item;
static BLUE_WOOL: Item;
static BROWN_WOOL: Item;
static GREEN_WOOL: Item;
static RED_WOOL: Item;
static BLACK_WOOL: Item;
static DANDELION: Item;
static POPPY: Item;
static BLUE_ORCHID: Item;
static ALLIUM: Item;
static AZURE_BLUET: Item;
static RED_TULIP: Item;
static ORANGE_TULIP: Item;
static WHITE_TULIP: Item;
static PINK_TULIP: Item;
static OXEYE_DAISY: Item;
static CORNFLOWER: Item;
static LILY_OF_THE_VALLEY: Item;
static WITHER_ROSE: Item;
static TORCHFLOWER: Item;
static PITCHER_PLANT: Item;
static SPORE_BLOSSOM: Item;
static BROWN_MUSHROOM: Item;
static RED_MUSHROOM: Item;
static CRIMSON_FUNGUS: Item;
static WARPED_FUNGUS: Item;
static CRIMSON_ROOTS: Item;
static WARPED_ROOTS: Item;
static NETHER_SPROUTS: Item;
static WEEPING_VINES: Item;
static TWISTING_VINES: Item;
static SUGAR_CANE: Item;
static KELP: Item;
static MOSS_CARPET: Item;
static PINK_PETALS: Item;
static MOSS_BLOCK: Item;
static HANGING_ROOTS: Item;
static BIG_DRIPLEAF: Item;
static SMALL_DRIPLEAF: Item;
static BAMBOO: Item;
static OAK_SLAB: Item;
static SPRUCE_SLAB: Item;
static BIRCH_SLAB: Item;
static JUNGLE_SLAB: Item;
static ACACIA_SLAB: Item;
static CHERRY_SLAB: Item;
static DARK_OAK_SLAB: Item;
static MANGROVE_SLAB: Item;
static BAMBOO_SLAB: Item;
static BAMBOO_MOSAIC_SLAB: Item;
static CRIMSON_SLAB: Item;
static WARPED_SLAB: Item;
static STONE_SLAB: Item;
static SMOOTH_STONE_SLAB: Item;
static SANDSTONE_SLAB: Item;
static CUT_SANDSTONE_SLAB: Item;
static PETRIFIED_OAK_SLAB: Item;
static COBBLESTONE_SLAB: Item;
static BRICK_SLAB: Item;
static STONE_BRICK_SLAB: Item;
static MUD_BRICK_SLAB: Item;
static NETHER_BRICK_SLAB: Item;
static QUARTZ_SLAB: Item;
static RED_SANDSTONE_SLAB: Item;
static CUT_RED_SANDSTONE_SLAB: Item;
static PURPUR_SLAB: Item;
static PRISMARINE_SLAB: Item;
static PRISMARINE_BRICK_SLAB: Item;
static DARK_PRISMARINE_SLAB: Item;
static SMOOTH_QUARTZ: Item;
static SMOOTH_RED_SANDSTONE: Item;
static SMOOTH_SANDSTONE: Item;
static SMOOTH_STONE: Item;
static BRICKS: Item;
static BOOKSHELF: Item;
static CHISELED_BOOKSHELF: Item;
static DECORATED_POT: Item;
static MOSSY_COBBLESTONE: Item;
static OBSIDIAN: Item;
static TORCH: Item;
static END_ROD: Item;
static CHORUS_PLANT: Item;
static CHORUS_FLOWER: Item;
static PURPUR_BLOCK: Item;
static PURPUR_PILLAR: Item;
static PURPUR_STAIRS: Item;
static SPAWNER: Item;
static CHEST: Item;
static CRAFTING_TABLE: Item;
static FARMLAND: Item;
static FURNACE: Item;
static LADDER: Item;
static COBBLESTONE_STAIRS: Item;
static SNOW: Item;
static ICE: Item;
static SNOW_BLOCK: Item;
static CACTUS: Item;
static CLAY: Item;
static JUKEBOX: Item;
static OAK_FENCE: Item;
static SPRUCE_FENCE: Item;
static BIRCH_FENCE: Item;
static JUNGLE_FENCE: Item;
static ACACIA_FENCE: Item;
static CHERRY_FENCE: Item;
static DARK_OAK_FENCE: Item;
static MANGROVE_FENCE: Item;
static BAMBOO_FENCE: Item;
static CRIMSON_FENCE: Item;
static WARPED_FENCE: Item;
static PUMPKIN: Item;
static CARVED_PUMPKIN: Item;
static JACK_O_LANTERN: Item;
static NETHERRACK: Item;
static SOUL_SAND: Item;
static SOUL_SOIL: Item;
static BASALT: Item;
static POLISHED_BASALT: Item;
static SMOOTH_BASALT: Item;
static SOUL_TORCH: Item;
static GLOWSTONE: Item;
static INFESTED_STONE: Item;
static INFESTED_COBBLESTONE: Item;
static INFESTED_STONE_BRICKS: Item;
static INFESTED_MOSSY_STONE_BRICKS: Item;
static INFESTED_CRACKED_STONE_BRICKS: Item;
static INFESTED_CHISELED_STONE_BRICKS: Item;
static INFESTED_DEEPSLATE: Item;
static STONE_BRICKS: Item;
static MOSSY_STONE_BRICKS: Item;
static CRACKED_STONE_BRICKS: Item;
static CHISELED_STONE_BRICKS: Item;
static PACKED_MUD: Item;
static MUD_BRICKS: Item;
static DEEPSLATE_BRICKS: Item;
static CRACKED_DEEPSLATE_BRICKS: Item;
static DEEPSLATE_TILES: Item;
static CRACKED_DEEPSLATE_TILES: Item;
static CHISELED_DEEPSLATE: Item;
static REINFORCED_DEEPSLATE: Item;
static BROWN_MUSHROOM_BLOCK: Item;
static RED_MUSHROOM_BLOCK: Item;
static MUSHROOM_STEM: Item;
static IRON_BARS: Item;
static CHAIN: Item;
static GLASS_PANE: Item;
static MELON: Item;
static VINE: Item;
static GLOW_LICHEN: Item;
static BRICK_STAIRS: Item;
static STONE_BRICK_STAIRS: Item;
static MUD_BRICK_STAIRS: Item;
static MYCELIUM: Item;
static LILY_PAD: Item;
static NETHER_BRICKS: Item;
static CRACKED_NETHER_BRICKS: Item;
static CHISELED_NETHER_BRICKS: Item;
static NETHER_BRICK_FENCE: Item;
static NETHER_BRICK_STAIRS: Item;
static SCULK: Item;
static SCULK_VEIN: Item;
static SCULK_CATALYST: Item;
static SCULK_SHRIEKER: Item;
static ENCHANTING_TABLE: Item;
static END_PORTAL_FRAME: Item;
static END_STONE: Item;
static END_STONE_BRICKS: Item;
static DRAGON_EGG: Item;
static SANDSTONE_STAIRS: Item;
static ENDER_CHEST: Item;
static EMERALD_BLOCK: Item;
static OAK_STAIRS: Item;
static SPRUCE_STAIRS: Item;
static BIRCH_STAIRS: Item;
static JUNGLE_STAIRS: Item;
static ACACIA_STAIRS: Item;
static CHERRY_STAIRS: Item;
static DARK_OAK_STAIRS: Item;
static MANGROVE_STAIRS: Item;
static BAMBOO_STAIRS: Item;
static BAMBOO_MOSAIC_STAIRS: Item;
static CRIMSON_STAIRS: Item;
static WARPED_STAIRS: Item;
static COMMAND_BLOCK: Item;
static BEACON: Item;
static COBBLESTONE_WALL: Item;
static MOSSY_COBBLESTONE_WALL: Item;
static BRICK_WALL: Item;
static PRISMARINE_WALL: Item;
static RED_SANDSTONE_WALL: Item;
static MOSSY_STONE_BRICK_WALL: Item;
static GRANITE_WALL: Item;
static STONE_BRICK_WALL: Item;
static MUD_BRICK_WALL: Item;
static NETHER_BRICK_WALL: Item;
static ANDESITE_WALL: Item;
static RED_NETHER_BRICK_WALL: Item;
static SANDSTONE_WALL: Item;
static END_STONE_BRICK_WALL: Item;
static DIORITE_WALL: Item;
static BLACKSTONE_WALL: Item;
static POLISHED_BLACKSTONE_WALL: Item;
static POLISHED_BLACKSTONE_BRICK_WALL: Item;
static COBBLED_DEEPSLATE_WALL: Item;
static POLISHED_DEEPSLATE_WALL: Item;
static DEEPSLATE_BRICK_WALL: Item;
static DEEPSLATE_TILE_WALL: Item;
static ANVIL: Item;
static CHIPPED_ANVIL: Item;
static DAMAGED_ANVIL: Item;
static CHISELED_QUARTZ_BLOCK: Item;
static QUARTZ_BLOCK: Item;
static QUARTZ_BRICKS: Item;
static QUARTZ_PILLAR: Item;
static QUARTZ_STAIRS: Item;
static WHITE_TERRACOTTA: Item;
static ORANGE_TERRACOTTA: Item;
static MAGENTA_TERRACOTTA: Item;
static LIGHT_BLUE_TERRACOTTA: Item;
static YELLOW_TERRACOTTA: Item;
static LIME_TERRACOTTA: Item;
static PINK_TERRACOTTA: Item;
static GRAY_TERRACOTTA: Item;
static LIGHT_GRAY_TERRACOTTA: Item;
static CYAN_TERRACOTTA: Item;
static PURPLE_TERRACOTTA: Item;
static BLUE_TERRACOTTA: Item;
static BROWN_TERRACOTTA: Item;
static GREEN_TERRACOTTA: Item;
static RED_TERRACOTTA: Item;
static BLACK_TERRACOTTA: Item;
static BARRIER: Item;
static LIGHT: Item;
static HAY_BLOCK: Item;
static WHITE_CARPET: Item;
static ORANGE_CARPET: Item;
static MAGENTA_CARPET: Item;
static LIGHT_BLUE_CARPET: Item;
static YELLOW_CARPET: Item;
static LIME_CARPET: Item;
static PINK_CARPET: Item;
static GRAY_CARPET: Item;
static LIGHT_GRAY_CARPET: Item;
static CYAN_CARPET: Item;
static PURPLE_CARPET: Item;
static BLUE_CARPET: Item;
static BROWN_CARPET: Item;
static GREEN_CARPET: Item;
static RED_CARPET: Item;
static BLACK_CARPET: Item;
static TERRACOTTA: Item;
static PACKED_ICE: Item;
static DIRT_PATH: Item;
static SUNFLOWER: Item;
static LILAC: Item;
static ROSE_BUSH: Item;
static PEONY: Item;
static TALL_GRASS: Item;
static LARGE_FERN: Item;
static WHITE_STAINED_GLASS: Item;
static ORANGE_STAINED_GLASS: Item;
static MAGENTA_STAINED_GLASS: Item;
static LIGHT_BLUE_STAINED_GLASS: Item;
static YELLOW_STAINED_GLASS: Item;
static LIME_STAINED_GLASS: Item;
static PINK_STAINED_GLASS: Item;
static GRAY_STAINED_GLASS: Item;
static LIGHT_GRAY_STAINED_GLASS: Item;
static CYAN_STAINED_GLASS: Item;
static PURPLE_STAINED_GLASS: Item;
static BLUE_STAINED_GLASS: Item;
static BROWN_STAINED_GLASS: Item;
static GREEN_STAINED_GLASS: Item;
static RED_STAINED_GLASS: Item;
static BLACK_STAINED_GLASS: Item;
static WHITE_STAINED_GLASS_PANE: Item;
static ORANGE_STAINED_GLASS_PANE: Item;
static MAGENTA_STAINED_GLASS_PANE: Item;
static LIGHT_BLUE_STAINED_GLASS_PANE: Item;
static YELLOW_STAINED_GLASS_PANE: Item;
static LIME_STAINED_GLASS_PANE: Item;
static PINK_STAINED_GLASS_PANE: Item;
static GRAY_STAINED_GLASS_PANE: Item;
static LIGHT_GRAY_STAINED_GLASS_PANE: Item;
static CYAN_STAINED_GLASS_PANE: Item;
static PURPLE_STAINED_GLASS_PANE: Item;
static BLUE_STAINED_GLASS_PANE: Item;
static BROWN_STAINED_GLASS_PANE: Item;
static GREEN_STAINED_GLASS_PANE: Item;
static RED_STAINED_GLASS_PANE: Item;
static BLACK_STAINED_GLASS_PANE: Item;
static PRISMARINE: Item;
static PRISMARINE_BRICKS: Item;
static DARK_PRISMARINE: Item;
static PRISMARINE_STAIRS: Item;
static PRISMARINE_BRICK_STAIRS: Item;
static DARK_PRISMARINE_STAIRS: Item;
static SEA_LANTERN: Item;
static RED_SANDSTONE: Item;
static CHISELED_RED_SANDSTONE: Item;
static CUT_RED_SANDSTONE: Item;
static RED_SANDSTONE_STAIRS: Item;
static REPEATING_COMMAND_BLOCK: Item;
static CHAIN_COMMAND_BLOCK: Item;
static MAGMA_BLOCK: Item;
static NETHER_WART_BLOCK: Item;
static WARPED_WART_BLOCK: Item;
static RED_NETHER_BRICKS: Item;
static BONE_BLOCK: Item;
static STRUCTURE_VOID: Item;
static SHULKER_BOX: Item;
static WHITE_SHULKER_BOX: Item;
static ORANGE_SHULKER_BOX: Item;
static MAGENTA_SHULKER_BOX: Item;
static LIGHT_BLUE_SHULKER_BOX: Item;
static YELLOW_SHULKER_BOX: Item;
static LIME_SHULKER_BOX: Item;
static PINK_SHULKER_BOX: Item;
static GRAY_SHULKER_BOX: Item;
static LIGHT_GRAY_SHULKER_BOX: Item;
static CYAN_SHULKER_BOX: Item;
static PURPLE_SHULKER_BOX: Item;
static BLUE_SHULKER_BOX: Item;
static BROWN_SHULKER_BOX: Item;
static GREEN_SHULKER_BOX: Item;
static RED_SHULKER_BOX: Item;
static BLACK_SHULKER_BOX: Item;
static WHITE_GLAZED_TERRACOTTA: Item;
static ORANGE_GLAZED_TERRACOTTA: Item;
static MAGENTA_GLAZED_TERRACOTTA: Item;
static LIGHT_BLUE_GLAZED_TERRACOTTA: Item;
static YELLOW_GLAZED_TERRACOTTA: Item;
static LIME_GLAZED_TERRACOTTA: Item;
static PINK_GLAZED_TERRACOTTA: Item;
static GRAY_GLAZED_TERRACOTTA: Item;
static LIGHT_GRAY_GLAZED_TERRACOTTA: Item;
static CYAN_GLAZED_TERRACOTTA: Item;
static PURPLE_GLAZED_TERRACOTTA: Item;
static BLUE_GLAZED_TERRACOTTA: Item;
static BROWN_GLAZED_TERRACOTTA: Item;
static GREEN_GLAZED_TERRACOTTA: Item;
static RED_GLAZED_TERRACOTTA: Item;
static BLACK_GLAZED_TERRACOTTA: Item;
static WHITE_CONCRETE: Item;
static ORANGE_CONCRETE: Item;
static MAGENTA_CONCRETE: Item;
static LIGHT_BLUE_CONCRETE: Item;
static YELLOW_CONCRETE: Item;
static LIME_CONCRETE: Item;
static PINK_CONCRETE: Item;
static GRAY_CONCRETE: Item;
static LIGHT_GRAY_CONCRETE: Item;
static CYAN_CONCRETE: Item;
static PURPLE_CONCRETE: Item;
static BLUE_CONCRETE: Item;
static BROWN_CONCRETE: Item;
static GREEN_CONCRETE: Item;
static RED_CONCRETE: Item;
static BLACK_CONCRETE: Item;
static WHITE_CONCRETE_POWDER: Item;
static ORANGE_CONCRETE_POWDER: Item;
static MAGENTA_CONCRETE_POWDER: Item;
static LIGHT_BLUE_CONCRETE_POWDER: Item;
static YELLOW_CONCRETE_POWDER: Item;
static LIME_CONCRETE_POWDER: Item;
static PINK_CONCRETE_POWDER: Item;
static GRAY_CONCRETE_POWDER: Item;
static LIGHT_GRAY_CONCRETE_POWDER: Item;
static CYAN_CONCRETE_POWDER: Item;
static PURPLE_CONCRETE_POWDER: Item;
static BLUE_CONCRETE_POWDER: Item;
static BROWN_CONCRETE_POWDER: Item;
static GREEN_CONCRETE_POWDER: Item;
static RED_CONCRETE_POWDER: Item;
static BLACK_CONCRETE_POWDER: Item;
static TURTLE_EGG: Item;
static SNIFFER_EGG: Item;
static DEAD_TUBE_CORAL_BLOCK: Item;
static DEAD_BRAIN_CORAL_BLOCK: Item;
static DEAD_BUBBLE_CORAL_BLOCK: Item;
static DEAD_FIRE_CORAL_BLOCK: Item;
static DEAD_HORN_CORAL_BLOCK: Item;
static TUBE_CORAL_BLOCK: Item;
static BRAIN_CORAL_BLOCK: Item;
static BUBBLE_CORAL_BLOCK: Item;
static FIRE_CORAL_BLOCK: Item;
static HORN_CORAL_BLOCK: Item;
static TUBE_CORAL: Item;
static BRAIN_CORAL: Item;
static BUBBLE_CORAL: Item;
static FIRE_CORAL: Item;
static HORN_CORAL: Item;
static DEAD_BRAIN_CORAL: Item;
static DEAD_BUBBLE_CORAL: Item;
static DEAD_FIRE_CORAL: Item;
static DEAD_HORN_CORAL: Item;
static DEAD_TUBE_CORAL: Item;
static TUBE_CORAL_FAN: Item;
static BRAIN_CORAL_FAN: Item;
static BUBBLE_CORAL_FAN: Item;
static FIRE_CORAL_FAN: Item;
static HORN_CORAL_FAN: Item;
static DEAD_TUBE_CORAL_FAN: Item;
static DEAD_BRAIN_CORAL_FAN: Item;
static DEAD_BUBBLE_CORAL_FAN: Item;
static DEAD_FIRE_CORAL_FAN: Item;
static DEAD_HORN_CORAL_FAN: Item;
static BLUE_ICE: Item;
static CONDUIT: Item;
static POLISHED_GRANITE_STAIRS: Item;
static SMOOTH_RED_SANDSTONE_STAIRS: Item;
static MOSSY_STONE_BRICK_STAIRS: Item;
static POLISHED_DIORITE_STAIRS: Item;
static MOSSY_COBBLESTONE_STAIRS: Item;
static END_STONE_BRICK_STAIRS: Item;
static STONE_STAIRS: Item;
static SMOOTH_SANDSTONE_STAIRS: Item;
static SMOOTH_QUARTZ_STAIRS: Item;
static GRANITE_STAIRS: Item;
static ANDESITE_STAIRS: Item;
static RED_NETHER_BRICK_STAIRS: Item;
static POLISHED_ANDESITE_STAIRS: Item;
static DIORITE_STAIRS: Item;
static COBBLED_DEEPSLATE_STAIRS: Item;
static POLISHED_DEEPSLATE_STAIRS: Item;
static DEEPSLATE_BRICK_STAIRS: Item;
static DEEPSLATE_TILE_STAIRS: Item;
static POLISHED_GRANITE_SLAB: Item;
static SMOOTH_RED_SANDSTONE_SLAB: Item;
static MOSSY_STONE_BRICK_SLAB: Item;
static POLISHED_DIORITE_SLAB: Item;
static MOSSY_COBBLESTONE_SLAB: Item;
static END_STONE_BRICK_SLAB: Item;
static SMOOTH_SANDSTONE_SLAB: Item;
static SMOOTH_QUARTZ_SLAB: Item;
static GRANITE_SLAB: Item;
static ANDESITE_SLAB: Item;
static RED_NETHER_BRICK_SLAB: Item;
static POLISHED_ANDESITE_SLAB: Item;
static DIORITE_SLAB: Item;
static COBBLED_DEEPSLATE_SLAB: Item;
static POLISHED_DEEPSLATE_SLAB: Item;
static DEEPSLATE_BRICK_SLAB: Item;
static DEEPSLATE_TILE_SLAB: Item;
static SCAFFOLDING: Item;
static REDSTONE: Item;
static REDSTONE_TORCH: Item;
static REDSTONE_BLOCK: Item;
static REPEATER: Item;
static COMPARATOR: Item;
static PISTON: Item;
static STICKY_PISTON: Item;
static SLIME_BLOCK: Item;
static HONEY_BLOCK: Item;
static OBSERVER: Item;
static HOPPER: Item;
static DISPENSER: Item;
static DROPPER: Item;
static LECTERN: Item;
static TARGET: Item;
static LEVER: Item;
static LIGHTNING_ROD: Item;
static DAYLIGHT_DETECTOR: Item;
static SCULK_SENSOR: Item;
static CALIBRATED_SCULK_SENSOR: Item;
static TRIPWIRE_HOOK: Item;
static TRAPPED_CHEST: Item;
static TNT: Item;
static REDSTONE_LAMP: Item;
static NOTE_BLOCK: Item;
static STONE_BUTTON: Item;
static POLISHED_BLACKSTONE_BUTTON: Item;
static OAK_BUTTON: Item;
static SPRUCE_BUTTON: Item;
static BIRCH_BUTTON: Item;
static JUNGLE_BUTTON: Item;
static ACACIA_BUTTON: Item;
static CHERRY_BUTTON: Item;
static DARK_OAK_BUTTON: Item;
static MANGROVE_BUTTON: Item;
static BAMBOO_BUTTON: Item;
static CRIMSON_BUTTON: Item;
static WARPED_BUTTON: Item;
static STONE_PRESSURE_PLATE: Item;
static POLISHED_BLACKSTONE_PRESSURE_PLATE: Item;
static LIGHT_WEIGHTED_PRESSURE_PLATE: Item;
static HEAVY_WEIGHTED_PRESSURE_PLATE: Item;
static OAK_PRESSURE_PLATE: Item;
static SPRUCE_PRESSURE_PLATE: Item;
static BIRCH_PRESSURE_PLATE: Item;
static JUNGLE_PRESSURE_PLATE: Item;
static ACACIA_PRESSURE_PLATE: Item;
static CHERRY_PRESSURE_PLATE: Item;
static DARK_OAK_PRESSURE_PLATE: Item;
static MANGROVE_PRESSURE_PLATE: Item;
static BAMBOO_PRESSURE_PLATE: Item;
static CRIMSON_PRESSURE_PLATE: Item;
static WARPED_PRESSURE_PLATE: Item;
static IRON_DOOR: Item;
static OAK_DOOR: Item;
static SPRUCE_DOOR: Item;
static BIRCH_DOOR: Item;
static JUNGLE_DOOR: Item;
static ACACIA_DOOR: Item;
static CHERRY_DOOR: Item;
static DARK_OAK_DOOR: Item;
static MANGROVE_DOOR: Item;
static BAMBOO_DOOR: Item;
static CRIMSON_DOOR: Item;
static WARPED_DOOR: Item;
static IRON_TRAPDOOR: Item;
static OAK_TRAPDOOR: Item;
static SPRUCE_TRAPDOOR: Item;
static BIRCH_TRAPDOOR: Item;
static JUNGLE_TRAPDOOR: Item;
static ACACIA_TRAPDOOR: Item;
static CHERRY_TRAPDOOR: Item;
static DARK_OAK_TRAPDOOR: Item;
static MANGROVE_TRAPDOOR: Item;
static BAMBOO_TRAPDOOR: Item;
static CRIMSON_TRAPDOOR: Item;
static WARPED_TRAPDOOR: Item;
static OAK_FENCE_GATE: Item;
static SPRUCE_FENCE_GATE: Item;
static BIRCH_FENCE_GATE: Item;
static JUNGLE_FENCE_GATE: Item;
static ACACIA_FENCE_GATE: Item;
static CHERRY_FENCE_GATE: Item;
static DARK_OAK_FENCE_GATE: Item;
static MANGROVE_FENCE_GATE: Item;
static BAMBOO_FENCE_GATE: Item;
static CRIMSON_FENCE_GATE: Item;
static WARPED_FENCE_GATE: Item;
static POWERED_RAIL: Item;
static DETECTOR_RAIL: Item;
static RAIL: Item;
static ACTIVATOR_RAIL: Item;
static SADDLE: Item;
static MINECART: Item;
static CHEST_MINECART: Item;
static FURNACE_MINECART: Item;
static TNT_MINECART: Item;
static HOPPER_MINECART: Item;
static CARROT_ON_A_STICK: Item;
static WARPED_FUNGUS_ON_A_STICK: Item;
static ELYTRA: Item;
static OAK_BOAT: Item;
static OAK_CHEST_BOAT: Item;
static SPRUCE_BOAT: Item;
static SPRUCE_CHEST_BOAT: Item;
static BIRCH_BOAT: Item;
static BIRCH_CHEST_BOAT: Item;
static JUNGLE_BOAT: Item;
static JUNGLE_CHEST_BOAT: Item;
static ACACIA_BOAT: Item;
static ACACIA_CHEST_BOAT: Item;
static CHERRY_BOAT: Item;
static CHERRY_CHEST_BOAT: Item;
static DARK_OAK_BOAT: Item;
static DARK_OAK_CHEST_BOAT: Item;
static MANGROVE_BOAT: Item;
static MANGROVE_CHEST_BOAT: Item;
static BAMBOO_RAFT: Item;
static BAMBOO_CHEST_RAFT: Item;
static STRUCTURE_BLOCK: Item;
static JIGSAW: Item;
static TURTLE_HELMET: Item;
static SCUTE: Item;
static FLINT_AND_STEEL: Item;
static APPLE: Item;
static BOW: Item;
static ARROW: Item;
static COAL: Item;
static CHARCOAL: Item;
static DIAMOND: Item;
static EMERALD: Item;
static LAPIS_LAZULI: Item;
static QUARTZ: Item;
static AMETHYST_SHARD: Item;
static RAW_IRON: Item;
static IRON_INGOT: Item;
static RAW_COPPER: Item;
static COPPER_INGOT: Item;
static RAW_GOLD: Item;
static GOLD_INGOT: Item;
static NETHERITE_INGOT: Item;
static NETHERITE_SCRAP: Item;
static WOODEN_SWORD: Item;
static WOODEN_SHOVEL: Item;
static WOODEN_PICKAXE: Item;
static WOODEN_AXE: Item;
static WOODEN_HOE: Item;
static STONE_SWORD: Item;
static STONE_SHOVEL: Item;
static STONE_PICKAXE: Item;
static STONE_AXE: Item;
static STONE_HOE: Item;
static GOLDEN_SWORD: Item;
static GOLDEN_SHOVEL: Item;
static GOLDEN_PICKAXE: Item;
static GOLDEN_AXE: Item;
static GOLDEN_HOE: Item;
static IRON_SWORD: Item;
static IRON_SHOVEL: Item;
static IRON_PICKAXE: Item;
static IRON_AXE: Item;
static IRON_HOE: Item;
static DIAMOND_SWORD: Item;
static DIAMOND_SHOVEL: Item;
static DIAMOND_PICKAXE: Item;
static DIAMOND_AXE: Item;
static DIAMOND_HOE: Item;
static NETHERITE_SWORD: Item;
static NETHERITE_SHOVEL: Item;
static NETHERITE_PICKAXE: Item;
static NETHERITE_AXE: Item;
static NETHERITE_HOE: Item;
static STICK: Item;
static BOWL: Item;
static MUSHROOM_STEW: Item;
static STRING: Item;
static FEATHER: Item;
static GUNPOWDER: Item;
static WHEAT_SEEDS: Item;
static WHEAT: Item;
static BREAD: Item;
static LEATHER_HELMET: Item;
static LEATHER_CHESTPLATE: Item;
static LEATHER_LEGGINGS: Item;
static LEATHER_BOOTS: Item;
static CHAINMAIL_HELMET: Item;
static CHAINMAIL_CHESTPLATE: Item;
static CHAINMAIL_LEGGINGS: Item;
static CHAINMAIL_BOOTS: Item;
static IRON_HELMET: Item;
static IRON_CHESTPLATE: Item;
static IRON_LEGGINGS: Item;
static IRON_BOOTS: Item;
static DIAMOND_HELMET: Item;
static DIAMOND_CHESTPLATE: Item;
static DIAMOND_LEGGINGS: Item;
static DIAMOND_BOOTS: Item;
static GOLDEN_HELMET: Item;
static GOLDEN_CHESTPLATE: Item;
static GOLDEN_LEGGINGS: Item;
static GOLDEN_BOOTS: Item;
static NETHERITE_HELMET: Item;
static NETHERITE_CHESTPLATE: Item;
static NETHERITE_LEGGINGS: Item;
static NETHERITE_BOOTS: Item;
static FLINT: Item;
static PORKCHOP: Item;
static COOKED_PORKCHOP: Item;
static PAINTING: Item;
static GOLDEN_APPLE: Item;
static ENCHANTED_GOLDEN_APPLE: Item;
static OAK_SIGN: Item;
static SPRUCE_SIGN: Item;
static BIRCH_SIGN: Item;
static JUNGLE_SIGN: Item;
static ACACIA_SIGN: Item;
static CHERRY_SIGN: Item;
static DARK_OAK_SIGN: Item;
static MANGROVE_SIGN: Item;
static BAMBOO_SIGN: Item;
static CRIMSON_SIGN: Item;
static WARPED_SIGN: Item;
static OAK_HANGING_SIGN: Item;
static SPRUCE_HANGING_SIGN: Item;
static BIRCH_HANGING_SIGN: Item;
static JUNGLE_HANGING_SIGN: Item;
static ACACIA_HANGING_SIGN: Item;
static CHERRY_HANGING_SIGN: Item;
static DARK_OAK_HANGING_SIGN: Item;
static MANGROVE_HANGING_SIGN: Item;
static BAMBOO_HANGING_SIGN: Item;
static CRIMSON_HANGING_SIGN: Item;
static WARPED_HANGING_SIGN: Item;
static BUCKET: Item;
static WATER_BUCKET: Item;
static LAVA_BUCKET: Item;
static POWDER_SNOW_BUCKET: Item;
static SNOWBALL: Item;
static LEATHER: Item;
static MILK_BUCKET: Item;
static PUFFERFISH_BUCKET: Item;
static SALMON_BUCKET: Item;
static COD_BUCKET: Item;
static TROPICAL_FISH_BUCKET: Item;
static AXOLOTL_BUCKET: Item;
static TADPOLE_BUCKET: Item;
static BRICK: Item;
static CLAY_BALL: Item;
static DRIED_KELP_BLOCK: Item;
static PAPER: Item;
static BOOK: Item;
static SLIME_BALL: Item;
static EGG: Item;
static COMPASS: Item;
static RECOVERY_COMPASS: Item;
static BUNDLE: Item;
static FISHING_ROD: Item;
static CLOCK: Item;
static SPYGLASS: Item;
static GLOWSTONE_DUST: Item;
static COD: Item;
static SALMON: Item;
static TROPICAL_FISH: Item;
static PUFFERFISH: Item;
static COOKED_COD: Item;
static COOKED_SALMON: Item;
static INK_SAC: Item;
static GLOW_INK_SAC: Item;
static COCOA_BEANS: Item;
static WHITE_DYE: Item;
static ORANGE_DYE: Item;
static MAGENTA_DYE: Item;
static LIGHT_BLUE_DYE: Item;
static YELLOW_DYE: Item;
static LIME_DYE: Item;
static PINK_DYE: Item;
static GRAY_DYE: Item;
static LIGHT_GRAY_DYE: Item;
static CYAN_DYE: Item;
static PURPLE_DYE: Item;
static BLUE_DYE: Item;
static BROWN_DYE: Item;
static GREEN_DYE: Item;
static RED_DYE: Item;
static BLACK_DYE: Item;
static BONE_MEAL: Item;
static BONE: Item;
static SUGAR: Item;
static CAKE: Item;
static WHITE_BED: Item;
static ORANGE_BED: Item;
static MAGENTA_BED: Item;
static LIGHT_BLUE_BED: Item;
static YELLOW_BED: Item;
static LIME_BED: Item;
static PINK_BED: Item;
static GRAY_BED: Item;
static LIGHT_GRAY_BED: Item;
static CYAN_BED: Item;
static PURPLE_BED: Item;
static BLUE_BED: Item;
static BROWN_BED: Item;
static GREEN_BED: Item;
static RED_BED: Item;
static BLACK_BED: Item;
static COOKIE: Item;
static FILLED_MAP: Item;
static SHEARS: Item;
static MELON_SLICE: Item;
static DRIED_KELP: Item;
static PUMPKIN_SEEDS: Item;
static MELON_SEEDS: Item;
static BEEF: Item;
static COOKED_BEEF: Item;
static CHICKEN: Item;
static COOKED_CHICKEN: Item;
static ROTTEN_FLESH: Item;
static ENDER_PEARL: Item;
static BLAZE_ROD: Item;
static GHAST_TEAR: Item;
static GOLD_NUGGET: Item;
static NETHER_WART: Item;
static POTION: Item;
static GLASS_BOTTLE: Item;
static SPIDER_EYE: Item;
static FERMENTED_SPIDER_EYE: Item;
static BLAZE_POWDER: Item;
static MAGMA_CREAM: Item;
static BREWING_STAND: Item;
static CAULDRON: Item;
static ENDER_EYE: Item;
static GLISTERING_MELON_SLICE: Item;
static ALLAY_SPAWN_EGG: Item;
static AXOLOTL_SPAWN_EGG: Item;
static BAT_SPAWN_EGG: Item;
static BEE_SPAWN_EGG: Item;
static BLAZE_SPAWN_EGG: Item;
static CAT_SPAWN_EGG: Item;
static CAMEL_SPAWN_EGG: Item;
static CAVE_SPIDER_SPAWN_EGG: Item;
static CHICKEN_SPAWN_EGG: Item;
static COD_SPAWN_EGG: Item;
static COW_SPAWN_EGG: Item;
static CREEPER_SPAWN_EGG: Item;
static DOLPHIN_SPAWN_EGG: Item;
static DONKEY_SPAWN_EGG: Item;
static DROWNED_SPAWN_EGG: Item;
static ELDER_GUARDIAN_SPAWN_EGG: Item;
static ENDER_DRAGON_SPAWN_EGG: Item;
static ENDERMAN_SPAWN_EGG: Item;
static ENDERMITE_SPAWN_EGG: Item;
static EVOKER_SPAWN_EGG: Item;
static FOX_SPAWN_EGG: Item;
static FROG_SPAWN_EGG: Item;
static GHAST_SPAWN_EGG: Item;
static GLOW_SQUID_SPAWN_EGG: Item;
static GOAT_SPAWN_EGG: Item;
static GUARDIAN_SPAWN_EGG: Item;
static HOGLIN_SPAWN_EGG: Item;
static HORSE_SPAWN_EGG: Item;
static HUSK_SPAWN_EGG: Item;
static IRON_GOLEM_SPAWN_EGG: Item;
static LLAMA_SPAWN_EGG: Item;
static MAGMA_CUBE_SPAWN_EGG: Item;
static MOOSHROOM_SPAWN_EGG: Item;
static MULE_SPAWN_EGG: Item;
static OCELOT_SPAWN_EGG: Item;
static PANDA_SPAWN_EGG: Item;
static PARROT_SPAWN_EGG: Item;
static PHANTOM_SPAWN_EGG: Item;
static PIG_SPAWN_EGG: Item;
static PIGLIN_SPAWN_EGG: Item;
static PIGLIN_BRUTE_SPAWN_EGG: Item;
static PILLAGER_SPAWN_EGG: Item;
static POLAR_BEAR_SPAWN_EGG: Item;
static PUFFERFISH_SPAWN_EGG: Item;
static RABBIT_SPAWN_EGG: Item;
static RAVAGER_SPAWN_EGG: Item;
static SALMON_SPAWN_EGG: Item;
static SHEEP_SPAWN_EGG: Item;
static SHULKER_SPAWN_EGG: Item;
static SILVERFISH_SPAWN_EGG: Item;
static SKELETON_SPAWN_EGG: Item;
static SKELETON_HORSE_SPAWN_EGG: Item;
static SLIME_SPAWN_EGG: Item;
static SNIFFER_SPAWN_EGG: Item;
static SNOW_GOLEM_SPAWN_EGG: Item;
static SPIDER_SPAWN_EGG: Item;
static SQUID_SPAWN_EGG: Item;
static STRAY_SPAWN_EGG: Item;
static STRIDER_SPAWN_EGG: Item;
static TADPOLE_SPAWN_EGG: Item;
static TRADER_LLAMA_SPAWN_EGG: Item;
static TROPICAL_FISH_SPAWN_EGG: Item;
static TURTLE_SPAWN_EGG: Item;
static VEX_SPAWN_EGG: Item;
static VILLAGER_SPAWN_EGG: Item;
static VINDICATOR_SPAWN_EGG: Item;
static WANDERING_TRADER_SPAWN_EGG: Item;
static WARDEN_SPAWN_EGG: Item;
static WITCH_SPAWN_EGG: Item;
static WITHER_SPAWN_EGG: Item;
static WITHER_SKELETON_SPAWN_EGG: Item;
static WOLF_SPAWN_EGG: Item;
static ZOGLIN_SPAWN_EGG: Item;
static ZOMBIE_SPAWN_EGG: Item;
static ZOMBIE_HORSE_SPAWN_EGG: Item;
static ZOMBIE_VILLAGER_SPAWN_EGG: Item;
static ZOMBIFIED_PIGLIN_SPAWN_EGG: Item;
static EXPERIENCE_BOTTLE: Item;
static FIRE_CHARGE: Item;
static WRITABLE_BOOK: Item;
static WRITTEN_BOOK: Item;
static ITEM_FRAME: Item;
static GLOW_ITEM_FRAME: Item;
static FLOWER_POT: Item;
static CARROT: Item;
static POTATO: Item;
static BAKED_POTATO: Item;
static POISONOUS_POTATO: Item;
static MAP: Item;
static GOLDEN_CARROT: Item;
static SKELETON_SKULL: Item;
static WITHER_SKELETON_SKULL: Item;
static PLAYER_HEAD: Item;
static ZOMBIE_HEAD: Item;
static CREEPER_HEAD: Item;
static DRAGON_HEAD: Item;
static PIGLIN_HEAD: Item;
static NETHER_STAR: Item;
static PUMPKIN_PIE: Item;
static FIREWORK_ROCKET: Item;
static FIREWORK_STAR: Item;
static ENCHANTED_BOOK: Item;
static NETHER_BRICK: Item;
static PRISMARINE_SHARD: Item;
static PRISMARINE_CRYSTALS: Item;
static RABBIT: Item;
static COOKED_RABBIT: Item;
static RABBIT_STEW: Item;
static RABBIT_FOOT: Item;
static RABBIT_HIDE: Item;
static ARMOR_STAND: Item;
static IRON_HORSE_ARMOR: Item;
static GOLDEN_HORSE_ARMOR: Item;
static DIAMOND_HORSE_ARMOR: Item;
static LEATHER_HORSE_ARMOR: Item;
static LEAD: Item;
static NAME_TAG: Item;
static COMMAND_BLOCK_MINECART: Item;
static MUTTON: Item;
static COOKED_MUTTON: Item;
static WHITE_BANNER: Item;
static ORANGE_BANNER: Item;
static MAGENTA_BANNER: Item;
static LIGHT_BLUE_BANNER: Item;
static YELLOW_BANNER: Item;
static LIME_BANNER: Item;
static PINK_BANNER: Item;
static GRAY_BANNER: Item;
static LIGHT_GRAY_BANNER: Item;
static CYAN_BANNER: Item;
static PURPLE_BANNER: Item;
static BLUE_BANNER: Item;
static BROWN_BANNER: Item;
static GREEN_BANNER: Item;
static RED_BANNER: Item;
static BLACK_BANNER: Item;
static END_CRYSTAL: Item;
static CHORUS_FRUIT: Item;
static POPPED_CHORUS_FRUIT: Item;
static TORCHFLOWER_SEEDS: Item;
static PITCHER_POD: Item;
static BEETROOT: Item;
static BEETROOT_SEEDS: Item;
static BEETROOT_SOUP: Item;
static DRAGON_BREATH: Item;
static SPLASH_POTION: Item;
static SPECTRAL_ARROW: Item;
static TIPPED_ARROW: Item;
static LINGERING_POTION: Item;
static SHIELD: Item;
static TOTEM_OF_UNDYING: Item;
static SHULKER_SHELL: Item;
static IRON_NUGGET: Item;
static KNOWLEDGE_BOOK: Item;
static DEBUG_STICK: Item;
static MUSIC_DISC_13: Item;
static MUSIC_DISC_CAT: Item;
static MUSIC_DISC_BLOCKS: Item;
static MUSIC_DISC_CHIRP: Item;
static MUSIC_DISC_FAR: Item;
static MUSIC_DISC_MALL: Item;
static MUSIC_DISC_MELLOHI: Item;
static MUSIC_DISC_STAL: Item;
static MUSIC_DISC_STRAD: Item;
static MUSIC_DISC_WARD: Item;
static MUSIC_DISC_11: Item;
static MUSIC_DISC_WAIT: Item;
static MUSIC_DISC_OTHERSIDE: Item;
static MUSIC_DISC_RELIC: Item;
static MUSIC_DISC_5: Item;
static MUSIC_DISC_PIGSTEP: Item;
static DISC_FRAGMENT_5: Item;
static TRIDENT: Item;
static PHANTOM_MEMBRANE: Item;
static NAUTILUS_SHELL: Item;
static HEART_OF_THE_SEA: Item;
static CROSSBOW: Item;
static SUSPICIOUS_STEW: Item;
static LOOM: Item;
static FLOWER_BANNER_PATTERN: Item;
static CREEPER_BANNER_PATTERN: Item;
static SKULL_BANNER_PATTERN: Item;
static MOJANG_BANNER_PATTERN: Item;
static GLOBE_BANNER_PATTERN: Item;
static PIGLIN_BANNER_PATTERN: Item;
static GOAT_HORN: Item;
static COMPOSTER: Item;
static BARREL: Item;
static SMOKER: Item;
static BLAST_FURNACE: Item;
static CARTOGRAPHY_TABLE: Item;
static FLETCHING_TABLE: Item;
static GRINDSTONE: Item;
static SMITHING_TABLE: Item;
static STONECUTTER: Item;
static BELL: Item;
static LANTERN: Item;
static SOUL_LANTERN: Item;
static SWEET_BERRIES: Item;
static GLOW_BERRIES: Item;
static CAMPFIRE: Item;
static SOUL_CAMPFIRE: Item;
static SHROOMLIGHT: Item;
static HONEYCOMB: Item;
static BEE_NEST: Item;
static BEEHIVE: Item;
static HONEY_BOTTLE: Item;
static HONEYCOMB_BLOCK: Item;
static LODESTONE: Item;
static CRYING_OBSIDIAN: Item;
static BLACKSTONE: Item;
static BLACKSTONE_SLAB: Item;
static BLACKSTONE_STAIRS: Item;
static GILDED_BLACKSTONE: Item;
static POLISHED_BLACKSTONE: Item;
static POLISHED_BLACKSTONE_SLAB: Item;
static POLISHED_BLACKSTONE_STAIRS: Item;
static CHISELED_POLISHED_BLACKSTONE: Item;
static POLISHED_BLACKSTONE_BRICKS: Item;
static POLISHED_BLACKSTONE_BRICK_SLAB: Item;
static POLISHED_BLACKSTONE_BRICK_STAIRS: Item;
static CRACKED_POLISHED_BLACKSTONE_BRICKS: Item;
static RESPAWN_ANCHOR: Item;
static CANDLE: Item;
static WHITE_CANDLE: Item;
static ORANGE_CANDLE: Item;
static MAGENTA_CANDLE: Item;
static LIGHT_BLUE_CANDLE: Item;
static YELLOW_CANDLE: Item;
static LIME_CANDLE: Item;
static PINK_CANDLE: Item;
static GRAY_CANDLE: Item;
static LIGHT_GRAY_CANDLE: Item;
static CYAN_CANDLE: Item;
static PURPLE_CANDLE: Item;
static BLUE_CANDLE: Item;
static BROWN_CANDLE: Item;
static GREEN_CANDLE: Item;
static RED_CANDLE: Item;
static BLACK_CANDLE: Item;
static SMALL_AMETHYST_BUD: Item;
static MEDIUM_AMETHYST_BUD: Item;
static LARGE_AMETHYST_BUD: Item;
static AMETHYST_CLUSTER: Item;
static POINTED_DRIPSTONE: Item;
static OCHRE_FROGLIGHT: Item;
static VERDANT_FROGLIGHT: Item;
static PEARLESCENT_FROGLIGHT: Item;
static FROGSPAWN: Item;
static ECHO_SHARD: Item;
static BRUSH: Item;
static NETHERITE_UPGRADE_SMITHING_TEMPLATE: Item;
static SENTRY_ARMOR_TRIM_SMITHING_TEMPLATE: Item;
static DUNE_ARMOR_TRIM_SMITHING_TEMPLATE: Item;
static COAST_ARMOR_TRIM_SMITHING_TEMPLATE: Item;
static WILD_ARMOR_TRIM_SMITHING_TEMPLATE: Item;
static WARD_ARMOR_TRIM_SMITHING_TEMPLATE: Item;
static EYE_ARMOR_TRIM_SMITHING_TEMPLATE: Item;
static VEX_ARMOR_TRIM_SMITHING_TEMPLATE: Item;
static TIDE_ARMOR_TRIM_SMITHING_TEMPLATE: Item;
static SNOUT_ARMOR_TRIM_SMITHING_TEMPLATE: Item;
static RIB_ARMOR_TRIM_SMITHING_TEMPLATE: Item;
static SPIRE_ARMOR_TRIM_SMITHING_TEMPLATE: Item;
static WAYFINDER_ARMOR_TRIM_SMITHING_TEMPLATE: Item;
static SHAPER_ARMOR_TRIM_SMITHING_TEMPLATE: Item;
static SILENCE_ARMOR_TRIM_SMITHING_TEMPLATE: Item;
static RAISER_ARMOR_TRIM_SMITHING_TEMPLATE: Item;
static HOST_ARMOR_TRIM_SMITHING_TEMPLATE: Item;
static ANGLER_POTTERY_SHERD: Item;
static ARCHER_POTTERY_SHERD: Item;
static ARMS_UP_POTTERY_SHERD: Item;
static BLADE_POTTERY_SHERD: Item;
static BREWER_POTTERY_SHERD: Item;
static BURN_POTTERY_SHERD: Item;
static DANGER_POTTERY_SHERD: Item;
static EXPLORER_POTTERY_SHERD: Item;
static FRIEND_POTTERY_SHERD: Item;
static HEART_POTTERY_SHERD: Item;
static HEARTBREAK_POTTERY_SHERD: Item;
static HOWL_POTTERY_SHERD: Item;
static MINER_POTTERY_SHERD: Item;
static MOURNER_POTTERY_SHERD: Item;
static PLENTY_POTTERY_SHERD: Item;
static PRIZE_POTTERY_SHERD: Item;
static SHEAF_POTTERY_SHERD: Item;
static SHELTER_POTTERY_SHERD: Item;
static SKULL_POTTERY_SHERD: Item;
static SNORT_POTTERY_SHERD: Item;
}

//net.minecraft.client.search.IdentifierSearcher$2


//net.minecraft.client.search.IdentifierSearcher$1


//net.minecraft.unused.packageinfo.PackageInfo6846
interface PackageInfo6846 extends JObject{
}

//net.minecraft.world.timer.FunctionTagTimerCallback
class FunctionTagTimerCallback extends JObject, TimerCallback{
 call(minecraftServer: MinecraftServer,timer: Timer,l: long): void;
 call(server: Object,events: Timer,time: long): void;
}

//net.minecraft.server.function.CommandFunction$CommandElement
class CommandFunction_CommandElement extends JObject, CommandFunction_Element{
 toString(): string;
 execute(commandFunctionManager: CommandFunctionManager,serverCommandSource: ServerCommandSource,deque: Deque,i: number,j: number,tracer: CommandFunctionManager_Tracer): void;
}
class Static_CommandFunction_CommandElement {
static method_45017(serverCommandSource: ServerCommandSource,currentSource: ServerCommandSource): ServerCommandSource;
}

//net.minecraft.client.sound.MusicTracker
class MusicTracker extends JObject{
 stop(): void;
 stop(type: MusicSound): void;
 tick(): void;
 isPlayingType(type: MusicSound): boolean;
 play(type: MusicSound): void;
}
class Static_MusicTracker {
static DEFAULT_TIME_UNTIL_NEXT_SONG: number;
}

//net.minecraft.server.filter.TextStream$1


//net.minecraft.client.network.MultiplayerServerListPinger
class MultiplayerServerListPinger extends JObject{
 add(entry: ServerInfo,saver: Runnable): void;
 cancel(): void;
 tick(): void;
}
class Static_MultiplayerServerListPinger {
static createPlayerCountText(current: number,max: number): Text;
static method_48297(style: Style): Style;
static ZERO_SPLITTER: Splitter;
static LOGGER: Logger;
static CANNOT_CONNECT_TEXT: Text;
}

//net.minecraft.world.gen.feature.HugeMushroomFeatureConfig
class HugeMushroomFeatureConfig extends JObject, FeatureConfig{
 capProvider: BlockStateProvider;
 stemProvider: BlockStateProvider;
 foliageRadius: number;
}
class Static_HugeMushroomFeatureConfig {
static method_28722(hugeMushroomFeatureConfig: HugeMushroomFeatureConfig): BlockStateProvider;
static method_28721(instance: RecordCodecBuilder_Instance): App;
static method_28720(hugeMushroomFeatureConfig: HugeMushroomFeatureConfig): Integer;
static method_28723(hugeMushroomFeatureConfig: HugeMushroomFeatureConfig): BlockStateProvider;
static CODEC: Codec;
}

//net.minecraft.client.particle.ShriekParticle$Factory
class ShriekParticle_Factory extends JObject, ParticleFactory{
 createParticle(shriekParticleEffect: ShriekParticleEffect,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
 createParticle(particleEffect: ParticleEffect,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
}

//net.minecraft.client.realms.RealmsNewsUpdater
class RealmsNewsUpdater extends JObject{
 hasUnreadNews(): boolean;
 getNewsLink(): string;
 updateNews(news: RealmsNews): void;
}

//net.minecraft.client.particle.GlowParticle$WaxOffFactory
class GlowParticle_WaxOffFactory extends JObject, ParticleFactory{
 createParticle(defaultParticleType: DefaultParticleType,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
 createParticle(particleEffect: ParticleEffect,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
}

//net.minecraft.client.render.block.BlockModelRenderer$BrightnessCache
class BlockModelRenderer_BrightnessCache extends JObject{
 getInt(state: BlockState,world: BlockRenderView,pos: BlockPos): number;
 getFloat(state: BlockState,blockView: BlockRenderView,pos: BlockPos): number;
 enable(): void;
 disable(): void;
}

//net.minecraft.registry.entry.RegistryFixedCodec
class RegistryFixedCodec extends JObject, Codec{
 toString(): string;
 decode(ops: DynamicOps,input: Object): DataResult;
 encode(entry: Object,ops: DynamicOps,prefix: Object): DataResult;
 encode(registryEntry: RegistryEntry,dynamicOps: DynamicOps,object: Object): DataResult;
}
class Static_RegistryFixedCodec {
static of(registry: RegistryKey): RegistryFixedCodec;
static method_49410(registryEntry: RegistryEntry): string;
static method_40395(dynamicOps: DynamicOps,object: Object,registryKey: RegistryKey): DataResult;
static method_46625(identifier: Identifier): DataResult;
static method_44141(pair: Pair,reference: RegistryEntry_Reference): Pair;
static method_49412(identifier: Identifier): string;
}

//net.minecraft.network.packet.s2c.play.BossBarS2CPacket$UpdateStyleAction
class BossBarS2CPacket_UpdateStyleAction extends JObject, BossBarS2CPacket_Action{
 accept(uuid: UUID,consumer: BossBarS2CPacket_Consumer): void;
 getType(): BossBarS2CPacket_Type;
 toPacket(buf: PacketByteBuf): void;
}

//net.minecraft.entity.ai.pathing.PathNodeMaker
class PathNodeMaker extends JObject{
 clear(): void;
 init(cachedWorld: ChunkCache,entity: MobEntity): void;
 getNode(x: number,y: number,z: number): TargetPathNode;
 getNodeType(world: BlockView,x: number,y: number,z: number,mob: MobEntity): PathNodeType;
 setCanWalkOverFences(canWalkOverFences: boolean): void;
 setCanEnterOpenDoors(canEnterOpenDoors: boolean): void;
 canWalkOverFences(): boolean;
 getSuccessors(successors: PathNode[],node: PathNode): number;
 setCanOpenDoors(canOpenDoors: boolean): void;
 canEnterOpenDoors(): boolean;
 canOpenDoors(): boolean;
 canSwim(): boolean;
 setCanSwim(canSwim: boolean): void;
 getDefaultNodeType(world: BlockView,x: number,y: number,z: number): PathNodeType;
 getStart(): PathNode;
}
class Static_PathNodeMaker {
static method_18482(i: number,j: number,k: number,l: number): PathNode;
}

//net.minecraft.client.gui.hud.ChatHud
class ChatHud extends JObject{
 clear(clearHistory: boolean): void;
 reset(): void;
 getWidth(): number;
 getHeight(): number;
 render(context: DrawContext,currentTick: number,mouseX: number,mouseY: number): void;
 getChatScale(): number;
 addToMessageHistory(message: string): void;
 getVisibleLineCount(): number;
 getMessageHistory(): List;
 getIndicatorAt(mouseX: number,mouseY: number): MessageIndicator;
 resetScroll(): void;
 getTextStyleAt(x: number,y: number): Style;
 removeMessage(signature: MessageSignatureData): void;
 addMessage(message: Text): void;
 addMessage(message: Text,signature: MessageSignatureData,indicator: MessageIndicator): void;
 tickRemovalQueueIfExists(): void;
 scroll(scroll: number): void;
 mouseClicked(mouseX: number,mouseY: number): boolean;
}
class Static_ChatHud {
static getWidth(widthOption: number): number;
static getHeight(heightOption: number): number;
static getDefaultUnfocusedHeight(): number;
static getMessageOpacityMultiplier(age: number): number;
static LOGGER: Logger;
static MAX_MESSAGES: number;
static MISSING_MESSAGE_INDEX: number;
static field_39772: number;
static field_39773: number;
static OFFSET_FROM_BOTTOM: number;
static REMOVAL_QUEUE_TICKS: number;
static DELETED_MARKER_TEXT: Text;
}

//net.minecraft.network.packet.s2c.play.WorldBorderSizeChangedS2CPacket
class WorldBorderSizeChangedS2CPacket extends JObject, Packet{
 apply(clientPlayPacketListener: ClientPlayPacketListener): void;
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
 getSizeLerpTarget(): number;
}

//net.minecraft.client.render.block.entity.BrushableBlockEntityRenderer$1


//net.minecraft.client.render.debug.HeightmapDebugRenderer
class HeightmapDebugRenderer extends JObject, DebugRenderer_Renderer{
 render(matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,cameraX: number,cameraY: number,cameraZ: number): void;
}
class Static_HeightmapDebugRenderer {
static CHUNK_RANGE: number;
static BOX_HEIGHT: number;
}

//net.minecraft.client.sound.Channel
class Channel extends JObject{
 execute(sourcesConsumer: Consumer): void;
 close(): void;
 tick(): void;
 createSource(mode: SoundEngine_RunMode): CompletableFuture;
}
class Static_Channel {
static method_19725(source: Channel_SourceManager): Source;
}

//net.minecraft.client.render.block.entity.ShulkerBoxBlockEntityRenderer
class ShulkerBoxBlockEntityRenderer extends JObject, BlockEntityRenderer{
 render(shulkerBoxBlockEntity: ShulkerBoxBlockEntity,f: number,matrixStack: MatrixStack,vertexConsumerProvider: VertexConsumerProvider,i: number,j: number): void;
 render(entity: BlockEntity,tickDelta: number,matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,light: number,overlay: number): void;
}

//net.minecraft.client.gui.screen.ingame.BeaconScreen$1


//net.minecraft.network.packet.c2s.play.RenameItemC2SPacket
class RenameItemC2SPacket extends JObject, Packet{
 getName(): string;
 apply(listener: PacketListener): void;
 apply(serverPlayPacketListener: ServerPlayPacketListener): void;
 write(buf: PacketByteBuf): void;
}

//net.minecraft.text.Style
class Style extends JObject{
 equals(o: Object): boolean;
 toString(): string;
 hashCode(): number;
 isEmpty(): boolean;
 getFont(): Identifier;
 getHoverEvent(): HoverEvent;
 withExclusiveFormatting(formatting: Formatting): Style;
 withStrikethrough(strikethrough: Boolean): Style;
 withFormatting(formatting: Formatting): Style;
 withFormatting(formattings: Formatting[]): Style;
 getClickEvent(): ClickEvent;
 withBold(bold: Boolean): Style;
 withUnderline(underline: Boolean): Style;
 withObfuscated(obfuscated: Boolean): Style;
 getInsertion(): string;
 isBold(): boolean;
 isItalic(): boolean;
 isStrikethrough(): boolean;
 isObfuscated(): boolean;
 isUnderlined(): boolean;
 withColor(color: Formatting): Style;
 withColor(color: TextColor): Style;
 withColor(rgbColor: number): Style;
 withHoverEvent(hoverEvent: HoverEvent): Style;
 getColor(): TextColor;
 withItalic(italic: Boolean): Style;
 withClickEvent(clickEvent: ClickEvent): Style;
 withInsertion(insertion: string): Style;
 withParent(parent: Style): Style;
 withFont(font: Identifier): Style;
}
class Static_Style {
static of(color: Optional,bold: Optional,italic: Optional,underlined: Optional,strikethrough: Optional,obfuscated: Optional,insertion: Optional,font: Optional): Style;
static method_43872(style: Style): Optional;
static method_43878(style: Style): Optional;
static method_43869(instance: RecordCodecBuilder_Instance): App;
static method_43876(style: Style): Optional;
static method_43875(style: Style): Optional;
static method_43874(style: Style): Optional;
static method_43873(style: Style): Optional;
static method_43871(style: Style): Optional;
static method_43877(style: Style): Optional;
static EMPTY: Style;
static CODEC: Codec;
static DEFAULT_FONT_ID: Identifier;
}

//net.minecraft.item.Vanishable
interface Vanishable extends JObject{
}

//net.minecraft.world.chunk.BelowZeroRetrogen$1


//net.minecraft.server.command.TitleCommand
class TitleCommand extends JObject{
}
class Static_TitleCommand {
static register(dispatcher: CommandDispatcher): void;
static method_52128(string: string,collection: Collection): Text;
static method_52126(string: string,collection: Collection): Text;
static executeTimes(source: ServerCommandSource,targets: Collection,fadeIn: number,stay: number,fadeOut: number): number;
static method_52132(collection: Collection): Text;
static executeReset(source: ServerCommandSource,targets: Collection): number;
static method_13801(context: CommandContext): number;
static method_52131(collection: Collection): Text;
static method_13808(context: CommandContext): number;
static method_52133(collection: Collection): Text;
static executeTitle(source: ServerCommandSource,targets: Collection,title: Text,titleType: string,constructor: Function): number;
static method_13800(context: CommandContext): number;
static method_13807(context: CommandContext): number;
static method_13803(context: CommandContext): number;
static method_13810(source: ServerCommandSource): boolean;
static method_13809(context: CommandContext): number;
static method_52130(collection: Collection): Text;
static method_52129(collection: Collection): Text;
static method_52127(collection: Collection): Text;
static executeClear(source: ServerCommandSource,targets: Collection): number;
}

//net.minecraft.unused.packageinfo.PackageInfo6015
interface PackageInfo6015 extends JObject{
}

//net.minecraft.network.packet.s2c.play.PlayerRespawnS2CPacket
class PlayerRespawnS2CPacket extends JObject, Packet{
 apply(clientPlayPacketListener: ClientPlayPacketListener): void;
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
 getDimension(): RegistryKey;
 getDimensionType(): RegistryKey;
 getSha256Seed(): long;
 getPortalCooldown(): number;
 isDebugWorld(): boolean;
 isFlatWorld(): boolean;
 hasFlag(flag: byte): boolean;
 getLastDeathPos(): Optional;
 getPreviousGameMode(): GameMode;
 getGameMode(): GameMode;
}
class Static_PlayerRespawnS2CPacket {
static KEEP_ATTRIBUTES: byte;
static KEEP_TRACKED_DATA: byte;
static KEEP_ALL: byte;
}

//net.minecraft.unused.packageinfo.PackageInfo6013
interface PackageInfo6013 extends JObject{
}

//net.minecraft.entity.decoration.AbstractDecorationEntity$1


//net.minecraft.data.family.BlockFamilies
class BlockFamilies extends JObject{
}
class Static_BlockFamilies {
static register(baseBlock: Block): BlockFamily_Builder;
static getFamilies(): Stream;
static BASE_BLOCKS_TO_FAMILIES: Map;
static WOODEN_GROUP: string;
static WOODEN_UNLOCK_CRITERION_NAME: string;
static ACACIA: BlockFamily;
static CHERRY: BlockFamily;
static BIRCH: BlockFamily;
static CRIMSON: BlockFamily;
static JUNGLE: BlockFamily;
static OAK: BlockFamily;
static DARK_OAK: BlockFamily;
static SPRUCE: BlockFamily;
static WARPED: BlockFamily;
static MANGROVE: BlockFamily;
static BAMBOO: BlockFamily;
static BAMBOO_MOSAIC: BlockFamily;
static MUD_BRICK: BlockFamily;
static ANDESITE: BlockFamily;
static POLISHED_ANDESITE: BlockFamily;
static BLACKSTONE: BlockFamily;
static POLISHED_BLACKSTONE: BlockFamily;
static POLISHED_BLACKSTONE_BRICK: BlockFamily;
static BRICK: BlockFamily;
static END_STONE_BRICK: BlockFamily;
static MOSSY_STONE_BRICK: BlockFamily;
static COPPER_BLOCK: BlockFamily;
static CUT_COPPER: BlockFamily;
static WAXED_COPPER_BLOCK: BlockFamily;
static WAXED_CUT_COPPER: BlockFamily;
static EXPOSED_COPPER: BlockFamily;
static EXPOSED_CUT_COPPER: BlockFamily;
static WAXED_EXPOSED_COPPER: BlockFamily;
static WAXED_EXPOSED_CUT_COPPER: BlockFamily;
static WEATHERED_COPPER: BlockFamily;
static WEATHERED_CUT_COPPER: BlockFamily;
static WAXED_WEATHERED_COPPER: BlockFamily;
static WAXED_WEATHERED_CUT_COPPER: BlockFamily;
static OXIDIZED_COPPER: BlockFamily;
static OXIDIZED_CUT_COPPER: BlockFamily;
static WAXED_OXIDIZED_COPPER: BlockFamily;
static WAXED_OXIDIZED_CUT_COPPER: BlockFamily;
static COBBLESTONE: BlockFamily;
static MOSSY_COBBLESTONE: BlockFamily;
static DIORITE: BlockFamily;
static POLISHED_DIORITE: BlockFamily;
static GRANITE: BlockFamily;
static POLISHED_GRANITE: BlockFamily;
static NETHER_BRICK: BlockFamily;
static RED_NETHER_BRICK: BlockFamily;
static PRISMARINE: BlockFamily;
static PURPUR: BlockFamily;
static PRISMARINE_BRICK: BlockFamily;
static DARK_PRISMARINE: BlockFamily;
static QUARTZ_BLOCK: BlockFamily;
static SMOOTH_QUARTZ: BlockFamily;
static SANDSTONE: BlockFamily;
static CUT_SANDSTONE: BlockFamily;
static SMOOTH_SANDSTONE: BlockFamily;
static RED_SANDSTONE: BlockFamily;
static CUT_RED_SANDSTONE: BlockFamily;
static SMOOTH_RED_SANDSTONE: BlockFamily;
static STONE: BlockFamily;
static STONE_BRICK: BlockFamily;
static DEEPSLATE: BlockFamily;
static COBBLED_DEEPSLATE: BlockFamily;
static POLISHED_DEEPSLATE: BlockFamily;
static DEEPSLATE_BRICK: BlockFamily;
static DEEPSLATE_TILE: BlockFamily;
}

//net.minecraft.world.gen.densityfunction.DensityFunction$Base
interface DensityFunction_Base extends JObject, DensityFunction{
 apply(visitor: DensityFunction_DensityFunctionVisitor): DensityFunction;
 fill(densities: number[],applier: DensityFunction_EachApplier): void;
}

//net.minecraft.registry.RegistryKey
class RegistryKey extends JObject{
 toString(): string;
 getValue(): Identifier;
 getRegistry(): Identifier;
 isOf(registry: RegistryKey): boolean;
 tryCast(registryRef: RegistryKey): Optional;
}
class Static_RegistryKey {
static of(registry: Identifier,value: Identifier): RegistryKey;
static of(registry: RegistryKey,value: Identifier): RegistryKey;
static createCodec(registry: RegistryKey): Codec;
static method_29182(pair: RegistryKey_RegistryIdPair): RegistryKey;
static method_39155(registryKey: RegistryKey,id: Identifier): RegistryKey;
static ofRegistry(registry: Identifier): RegistryKey;
static INSTANCES: ConcurrentMap;
}

//net.minecraft.entity.ai.brain.task.MeetVillagerTask
class MeetVillagerTask extends JObject{
}
class Static_MeetVillagerTask {
static create(): SingleTickTask;
static method_47116(taskContext: TaskTriggerer_TaskContext,memoryQueryResult: MemoryQueryResult,memoryQueryResult2: MemoryQueryResult,memoryQueryResult3: MemoryQueryResult,memoryQueryResult4: MemoryQueryResult,memoryQueryResult5: MemoryQueryResult,world: ServerWorld,entity: LivingEntity,time: long): boolean;
static method_47114(context: TaskTriggerer_TaskContext): App;
static method_47115(taskContext: TaskTriggerer_TaskContext,walkTarget: MemoryQueryResult,lookTarget: MemoryQueryResult,meetingPoint: MemoryQueryResult,visibleMobs: MemoryQueryResult,interactionTarget: MemoryQueryResult): TaskRunnable;
static method_47112(target: LivingEntity): boolean;
static method_47117(memoryQueryResult: MemoryQueryResult,memoryQueryResult2: MemoryQueryResult,memoryQueryResult3: MemoryQueryResult,target: LivingEntity): void;
static method_47113(livingEntity: LivingEntity,target: LivingEntity): boolean;
static WALK_SPEED: number;
}

//net.minecraft.world.gen.feature.OceanConfiguredFeatures
class OceanConfiguredFeatures extends JObject{
}
class Static_OceanConfiguredFeatures {
static bootstrap(featureRegisterable: Registerable): void;
static SEAGRASS_SHORT: RegistryKey;
static SEAGRASS_SLIGHTLY_LESS_SHORT: RegistryKey;
static SEAGRASS_MID: RegistryKey;
static SEAGRASS_TALL: RegistryKey;
static SEA_PICKLE: RegistryKey;
static SEAGRASS_SIMPLE: RegistryKey;
static KELP: RegistryKey;
static WARM_OCEAN_VEGETATION: RegistryKey;
}

//net.minecraft.client.texture.SpriteLoader
class SpriteLoader extends JObject{
 load(resourceManager: ResourceManager,path: Identifier,mipLevel: number,executor: Executor): CompletableFuture;
 stitch(sprites: List,mipLevel: number,executor: Executor): SpriteLoader_StitchResult;
}
class Static_SpriteLoader {
static load(id: Identifier,resource: Resource): SpriteContents;
static fromAtlas(atlasTexture: SpriteAtlasTexture): SpriteLoader;
static method_45835(sprite: TextureStitcher_Stitchable): string;
static method_45840(map: Map,i: number): void;
static method_47666(executor: Executor,source: Supplier): CompletableFuture;
static method_47662(sprites: List): List;
static method_47660(resourceManager: ResourceManager,identifier: Identifier): List;
static method_47665(executor: Executor,sources: List): CompletionStage;
static method_45826(i: number,sprite: Sprite): void;
static loadAll(sources: List,executor: Executor): CompletableFuture;
static LOGGER: Logger;
}

//net.minecraft.unused.packageinfo.PackageInfo6023
interface PackageInfo6023 extends JObject{
}

//net.minecraft.client.particle.SpellParticle$DefaultFactory
class SpellParticle_DefaultFactory extends JObject, ParticleFactory{
 createParticle(defaultParticleType: DefaultParticleType,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
 createParticle(particleEffect: ParticleEffect,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
}

//net.minecraft.unused.packageinfo.PackageInfo6022
interface PackageInfo6022 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6021
interface PackageInfo6021 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6020
interface PackageInfo6020 extends JObject{
}

//net.minecraft.screen.PropertyDelegate
interface PropertyDelegate extends JObject{
 get(index: number): number;
 size(): number;
 set(index: number,value: number): void;
}

//net.minecraft.client.gl.JsonEffectShaderProgram
class JsonEffectShaderProgram extends JObject, EffectShaderProgram, AutoCloseable{
 getName(): string;
 close(): void;
 enable(): void;
 disable(): void;
 markUniformsDirty(): void;
 getUniformByName(name: string): GlUniform;
 bindSampler(samplerName: string,intSupplier: IntSupplier): void;
 getUniformByNameOrDummy(name: string): Uniform;
 getGlRef(): number;
 getFragmentShader(): ShaderStage;
 getVertexShader(): ShaderStage;
 attachReferencedShaders(): void;
}
class Static_JsonEffectShaderProgram {
static loadEffect(resourceManager: ResourceManager,type: ShaderStage_Type,name: string): EffectShaderStage;
static deserializeBlendState(json: JsonObject): GlBlendState;
static PROGRAM_DIRECTORY: string;
static LOGGER: Logger;
static DEFAULT_UNIFORM: Uniform;
static field_32683: boolean;
static activeProgram: JsonEffectShaderProgram;
static activeProgramGlRef: number;
}

//net.minecraft.world.entity.EntityLike
interface EntityLike extends JObject{
 getId(): number;
 shouldSave(): boolean;
 setRemoved(reason: Entity_RemovalReason): void;
 streamPassengersAndSelf(): Stream;
 streamSelfAndPassengers(): Stream;
 getBlockPos(): BlockPos;
 setChangeListener(changeListener: EntityChangeListener): void;
 isPlayer(): boolean;
 getBoundingBox(): Box;
 getUuid(): UUID;
}

//net.minecraft.resource.ReloadableResourceManagerImpl
class ReloadableResourceManagerImpl extends JObject, ResourceManager, AutoCloseable{
 getResource(identifier: Identifier): Optional;
 findResources(startingPath: string,allowedPathPredicate: Predicate): Map;
 close(): void;
 reload(prepareExecutor: Executor,applyExecutor: Executor,initialStage: CompletableFuture,packs: List): ResourceReload;
 registerReloader(reloader: ResourceReloader): void;
 streamResourcePacks(): Stream;
 getAllNamespaces(): Set;
 getAllResources(id: Identifier): List;
 findAllResources(startingPath: string,allowedPathPredicate: Predicate): Map;
}
class Static_ReloadableResourceManagerImpl {
static method_29491(list: List): Object;
static LOGGER: Logger;
}

//net.minecraft.unused.packageinfo.PackageInfo6027
interface PackageInfo6027 extends JObject{
}

//net.minecraft.client.gui.screen.world.WorldScreenOptionGrid$Builder
class WorldScreenOptionGrid_Builder extends JObject{
 add(text: Text,getter: BooleanSupplier,setter: Consumer): WorldScreenOptionGrid_OptionBuilder;
 build(widgetConsumer: Consumer): WorldScreenOptionGrid;
 setRowSpacing(rowSpacing: number): WorldScreenOptionGrid_Builder;
 withTooltipBox(maxInfoRows: number,alwaysMaxHeight: boolean): WorldScreenOptionGrid_Builder;
 marginLeft(marginLeft: number): WorldScreenOptionGrid_Builder;
}

//net.minecraft.util.logging.LogFileCompressor$LogFile
interface LogFileCompressor_LogFile extends JObject{
 compress(): LogFileCompressor_Compressed;
 id(): LogFileCompressor_LogId;
 path(): Path;
 getReader(): Reader;
}

//net.minecraft.world.chunk.ReadableContainer$Reader
interface ReadableContainer_Reader extends JObject{
 read(idList: IndexedIterable,paletteProvider: PalettedContainer_PaletteProvider,serialize: ReadableContainer_Serialized): DataResult;
}

//net.minecraft.block.DoubleBlockProperties
class DoubleBlockProperties extends JObject{
}
class Static_DoubleBlockProperties {
static toPropertySource(blockEntityType: BlockEntityType,typeMapper: Function,fun: Function,directionProperty: DirectionProperty,state: BlockState,world: WorldAccess,pos: BlockPos,fallbackTester: BiPredicate): DoubleBlockProperties_PropertySource;
}

//net.minecraft.predicate.entity.EntityEffectPredicate
class EntityEffectPredicate extends JObject{
 test(livingEntity: LivingEntity): boolean;
 test(entity: Entity): boolean;
 test(effects: Map): boolean;
 toJson(): JsonElement;
 withEffect(statusEffect: StatusEffect): EntityEffectPredicate;
 withEffect(statusEffect: StatusEffect,data: EntityEffectPredicate_EffectData): EntityEffectPredicate;
}
class Static_EntityEffectPredicate {
static create(): EntityEffectPredicate;
static method_17894(identifier: Identifier): JsonSyntaxException;
static fromJson(json: JsonElement): EntityEffectPredicate;
static EMPTY: EntityEffectPredicate;
}

//net.minecraft.command.argument.ItemStackArgumentType
class ItemStackArgumentType extends JObject, ArgumentType{
 parse(stringReader: StringReader): ItemStackArgument;
 parse(reader: StringReader): Object;
 getExamples(): Collection;
 listSuggestions(context: CommandContext,builder: SuggestionsBuilder): CompletableFuture;
}
class Static_ItemStackArgumentType {
static itemStack(commandRegistryAccess: CommandRegistryAccess): ItemStackArgumentType;
static getItemStackArgument(context: CommandContext,name: string): ItemStackArgument;
static EXAMPLES: Collection;
}

//net.minecraft.block.SculkSpreadable$1


//net.minecraft.loot.function.SetAttributesLootFunction$1


//net.minecraft.util.math.ColorHelper
class ColorHelper extends JObject{
}

//net.minecraft.client.render.SpriteTexturedVertexConsumer
class SpriteTexturedVertexConsumer extends JObject, VertexConsumer{
 next(): void;
 color(red: number,green: number,blue: number,alpha: number): VertexConsumer;
 normal(x: number,y: number,z: number): VertexConsumer;
 light(u: number,v: number): VertexConsumer;
 overlay(u: number,v: number): VertexConsumer;
 vertex(x: number,y: number,z: number,red: number,green: number,blue: number,alpha: number,u: number,v: number,overlay: number,light: number,normalX: number,normalY: number,normalZ: number): void;
 vertex(x: number,y: number,z: number): VertexConsumer;
 texture(u: number,v: number): VertexConsumer;
 unfixColor(): void;
 fixedColor(red: number,green: number,blue: number,alpha: number): void;
}

//net.minecraft.predicate.item.EnchantmentPredicate
class EnchantmentPredicate extends JObject{
 test(enchantments: Map): boolean;
 serialize(): JsonElement;
}
class Static_EnchantmentPredicate {
static deserialize(el: JsonElement): EnchantmentPredicate;
static method_17849(identifier: Identifier): JsonSyntaxException;
static deserializeAll(el: JsonElement): EnchantmentPredicate[];
static ANY: EnchantmentPredicate;
static ARRAY_OF_ANY: EnchantmentPredicate[];
}

//net.minecraft.client.realms.util.JsonUtils
class JsonUtils extends JObject{
}
class Static_JsonUtils {
static get(key: string,node: JsonObject,deserializer: Function): Object;
static getString(key: string,node: JsonObject): string;
static getIntOr(key: string,node: JsonObject,defaultValue: number): number;
static getBooleanOr(key: string,node: JsonObject,defaultValue: boolean): boolean;
static getDateOr(key: string,node: JsonObject): Date;
static getStringOr(key: string,node: JsonObject,defaultValue: string): string;
static getUuidOr(key: string,node: JsonObject,defaultValue: UUID): UUID;
static getLongOr(key: string,node: JsonObject,defaultValue: long): long;
}

//net.minecraft.block.entity.BannerPattern$Patterns
class BannerPattern_Patterns extends JObject{
 add(pattern: Pair): BannerPattern_Patterns;
 add(pattern: RegistryEntry,color: DyeColor): BannerPattern_Patterns;
 add(pattern: RegistryKey,color: DyeColor): BannerPattern_Patterns;
 toNbt(): NbtList;
}

//net.minecraft.structure.StructureTemplate$StructureEntityInfo
class StructureTemplate_StructureEntityInfo extends JObject{
 pos: Vec3d;
 blockPos: BlockPos;
 nbt: NbtCompound;
}

//net.minecraft.entity.CrossbowUser
interface CrossbowUser extends JObject, RangedAttackMob{
 getTarget(): LivingEntity;
 postShoot(): void;
 shoot(target: LivingEntity,crossbow: ItemStack,projectile: ProjectileEntity,multiShotSpray: number): void;
 shoot(entity: LivingEntity,target: LivingEntity,projectile: ProjectileEntity,multishotSpray: number,speed: number): void;
 shoot(entity: LivingEntity,speed: number): void;
 setCharging(charging: boolean): void;
 getProjectileLaunchVelocity(entity: LivingEntity,positionDelta: Vec3d,multishotSpray: number): Vector3f;
}

//net.minecraft.structure.StructurePiece$1


//net.minecraft.network.packet.s2c.play.HealthUpdateS2CPacket
class HealthUpdateS2CPacket extends JObject, Packet{
 apply(clientPlayPacketListener: ClientPlayPacketListener): void;
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
 getFood(): number;
 getSaturation(): number;
 getHealth(): number;
}

//net.minecraft.util.CuboidBlockIterator
class CuboidBlockIterator extends JObject{
 step(): boolean;
 getEdgeCoordinatesCount(): number;
 getX(): number;
 getY(): number;
 getZ(): number;
}
class Static_CuboidBlockIterator {
static field_33084: number;
static field_33085: number;
static field_33086: number;
static field_33087: number;
}

//net.minecraft.client.render.VertexFormatElement$Type$SetupTask
interface VertexFormatElement_Type_SetupTask extends JObject{
 setupBufferState(componentCount: number,componentType: number,stride: number,offset: long,uvIndex: number,elementIndex: number): void;
}

//net.minecraft.loot.condition.BlockStatePropertyLootCondition
class BlockStatePropertyLootCondition extends JObject, LootCondition{
 test(context: Object): boolean;
 test(lootContext: LootContext): boolean;
 getType(): LootConditionType;
 getRequiredParameters(): Set;
}
class Static_BlockStatePropertyLootCondition {
static builder(block: Block): BlockStatePropertyLootCondition_Builder;
}

//net.minecraft.world.gen.chunk.ChunkNoiseSampler$CacheOnce
class ChunkNoiseSampler_CacheOnce extends JObject, DensityFunctionTypes_Wrapper, ChunkNoiseSampler_ParentedNoiseType{
 type(): DensityFunctionTypes_Wrapping_Type;
 fill(densities: number[],applier: DensityFunction_EachApplier): void;
 wrapped(): DensityFunction;
 sample(pos: DensityFunction_NoisePos): number;
}

//net.minecraft.client.gui.navigation.NavigationDirection$1


//net.minecraft.client.gui.screen.recipebook.RecipeAlternativesWidget$AlternativeButtonWidget$InputSlot
class RecipeAlternativesWidget_AlternativeButtonWidget_InputSlot extends JObject{
 stacks: ItemStack[];
 y: number;
 x: number;
}

//net.minecraft.client.render.block.BlockModelRenderer$1


//net.minecraft.world.gen.blockpredicate.CombinedBlockPredicate
class CombinedBlockPredicate extends JObject, BlockPredicate{
}
class Static_CombinedBlockPredicate {
static buildCodec(combiner: Function): Codec;
static method_38890(predicate: CombinedBlockPredicate): List;
static method_38892(fun: Function,instance: RecordCodecBuilder_Instance): App;
}

//net.minecraft.network.packet.s2c.play.CooldownUpdateS2CPacket
class CooldownUpdateS2CPacket extends JObject, Packet{
 apply(clientPlayPacketListener: ClientPlayPacketListener): void;
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
 getItem(): Item;
 getCooldown(): number;
}

//net.minecraft.unused.packageinfo.PackageInfo6001
interface PackageInfo6001 extends JObject{
}

//net.minecraft.server.world.ChunkHolder$Unloaded
interface ChunkHolder_Unloaded extends JObject{
}
class Static_ChunkHolder_Unloaded {
static INSTANCE: ChunkHolder_Unloaded;
}

//net.minecraft.client.option.SimpleOption$CyclingCallbacks
interface SimpleOption_CyclingCallbacks extends JObject, SimpleOption_Callbacks{
 valueSetter(): SimpleOption_CyclingCallbacks_ValueSetter;
 getValues(): CyclingButtonWidget_Values;
 getWidgetCreator(tooltipFactory: SimpleOption_TooltipFactory,gameOptions: GameOptions,x: number,y: number,width: number,changeCallback: Consumer): Function;
}

//net.minecraft.datafixer.fix.ChunkPalettedStorageFix$Level
class ChunkPalettedStorageFix_Level extends JObject{
 transform(): Dynamic;
 getBlock(packedLocalPos: number): Dynamic;
}
class Static_ChunkPalettedStorageFix_Level {
static adjacentTo(packedLocalPos: number,direction: ChunkPalettedStorageFix_Facing): number;
}

//net.minecraft.client.option.SimpleOption$CyclingCallbacks$ValueSetter
interface SimpleOption_CyclingCallbacks_ValueSetter extends JObject{
 set(option: SimpleOption,value: Object): void;
}

//net.minecraft.command.argument.NbtPathArgumentType
class NbtPathArgumentType extends JObject, ArgumentType{
 parse(reader: StringReader): Object;
 parse(stringReader: StringReader): NbtPathArgumentType_NbtPath;
 getExamples(): Collection;
}
class Static_NbtPathArgumentType {
static parseNode(reader: StringReader,root: boolean): NbtPathArgumentType_PathNode;
static readName(reader: StringReader): string;
static method_9356(path: Object): Message;
static method_47969(index: Object): Message;
static method_9353(nbtCompound: NbtCompound,nbt: NbtElement): boolean;
static isNameCharacter(c: char): boolean;
static method_47970(nbt: Object): Message;
static readCompoundChildNode(reader: StringReader,name: string): NbtPathArgumentType_PathNode;
static getNbtPath(context: CommandContext,name: string): NbtPathArgumentType_NbtPath;
static nbtPath(): NbtPathArgumentType;
static getPredicate(filter: NbtCompound): Predicate;
static EXAMPLES: Collection;
static INVALID_PATH_NODE_EXCEPTION: SimpleCommandExceptionType;
static TOO_DEEP_EXCEPTION: SimpleCommandExceptionType;
static NOTHING_FOUND_EXCEPTION: DynamicCommandExceptionType;
static EXPECTED_LIST_EXCEPTION: DynamicCommandExceptionType;
static INVALID_INDEX_EXCEPTION: DynamicCommandExceptionType;
static LEFT_SQUARE_BRACKET: char;
static RIGHT_SQUARE_BRACKET: char;
static LEFT_CURLY_BRACKET: char;
static RIGHT_CURLY_BRACKET: char;
static DOUBLE_QUOTE: char;
static SINGLE_QUOTE: char;
}

//net.minecraft.world.tick.WorldTickScheduler
class WorldTickScheduler extends JObject, QueryableTickScheduler{
 isQueued(pos: BlockPos,type: Object): boolean;
 tick(time: long,maxTicks: number,ticker: BiConsumer): void;
 scheduleTick(orderedTick: OrderedTick): void;
 getTickCount(): number;
 clearNextTicks(box: BlockBox): void;
 isTicking(pos: BlockPos,type: Object): boolean;
 scheduleTicks(scheduler: WorldTickScheduler,box: BlockBox,offset: Vec3i): void;
 scheduleTicks(box: BlockBox,offset: Vec3i): void;
 addChunkTickScheduler(pos: ChunkPos,scheduler: ChunkTickScheduler): void;
 removeChunkTickScheduler(pos: ChunkPos): void;
}
class Static_WorldTickScheduler {
static method_39387(map: Long2LongOpenHashMap): void;
static method_39382(blockBox: BlockBox,tick: OrderedTick): boolean;
static method_48169(predicate: Predicate,list: List,chunkPos: long,chunkTickScheduler: ChunkTickScheduler): void;
static method_48166(blockBox: BlockBox,tick: OrderedTick): boolean;
static method_39384(a: ChunkTickScheduler,b: ChunkTickScheduler): number;
static COMPARATOR: Comparator;
}

//net.minecraft.unused.packageinfo.PackageInfo6004
interface PackageInfo6004 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6003
interface PackageInfo6003 extends JObject{
}

//net.minecraft.client.render.model.json.Transformation$Deserializer
class Transformation_Deserializer extends JObject, JsonDeserializer{
 deserialize(jsonElement: JsonElement,type: Type,jsonDeserializationContext: JsonDeserializationContext): Transformation;
 deserialize(functionJson: JsonElement,unused: Type,context: JsonDeserializationContext): Object;
}
class Static_Transformation_Deserializer {
static DEFAULT_ROTATION: Vector3f;
static DEFAULT_TRANSLATION: Vector3f;
static DEFAULT_SCALE: Vector3f;
static field_32808: number;
static field_32809: number;
}

//net.minecraft.loot.operator.BoundedIntUnaryOperator$Tester
interface BoundedIntUnaryOperator_Tester extends JObject{
 test(context: LootContext,value: number): boolean;
}

//net.minecraft.unused.packageinfo.PackageInfo6002
interface PackageInfo6002 extends JObject{
}

//net.minecraft.client.gui.hud.spectator.TeleportSpectatorMenu
class TeleportSpectatorMenu extends JObject, SpectatorMenuCommandGroup, SpectatorMenuCommand{
 getName(): Text;
 use(menu: SpectatorMenu): void;
 isEnabled(): boolean;
 getPrompt(): Text;
 getCommands(): List;
 renderIcon(context: DrawContext,brightness: number,alpha: number): void;
}
class Static_TeleportSpectatorMenu {
static method_46520(entry: PlayerListEntry): SpectatorMenuCommand;
static method_46521(entry: PlayerListEntry): boolean;
static method_2785(a: PlayerListEntry): UUID;
static ORDERING: Comparator;
static TELEPORT_TEXT: Text;
static PROMPT_TEXT: Text;
}

//net.minecraft.entity.ai.brain.task.SingleTickTask
class SingleTickTask extends JObject, Task, TaskRunnable{
 getName(): string;
 stop(world: ServerWorld,entity: LivingEntity,time: long): void;
 tick(world: ServerWorld,entity: LivingEntity,time: long): void;
 getStatus(): MultiTickTask_Status;
 tryStarting(world: ServerWorld,entity: LivingEntity,time: long): boolean;
}

//net.minecraft.network.packet.s2c.play.WorldBorderInitializeS2CPacket
class WorldBorderInitializeS2CPacket extends JObject, Packet{
 apply(clientPlayPacketListener: ClientPlayPacketListener): void;
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
 getSize(): number;
 getMaxRadius(): number;
 getWarningTime(): number;
 getWarningBlocks(): number;
 getCenterX(): number;
 getCenterZ(): number;
 getSizeLerpTime(): long;
 getSizeLerpTarget(): number;
}

//net.minecraft.resource.metadata.ResourceMetadataMap
class ResourceMetadataMap extends JObject{
 get(reader: ResourceMetadataReader): Object;
}
class Static_ResourceMetadataMap {
static of(reader: ResourceMetadataReader,value: Object): ResourceMetadataMap;
static of(reader: ResourceMetadataReader,value: Object,reader2: ResourceMetadataReader,value2: Object): ResourceMetadataMap;
static of(): ResourceMetadataMap;
static EMPTY: ResourceMetadataMap;
}

//net.minecraft.util.StringHelper
class StringHelper extends JObject{
}
class Static_StringHelper {
static isEmpty(text: string): boolean;
static truncate(text: string,maxLength: number,addEllipsis: boolean): string;
static countLines(text: string): number;
static stripTextFormat(text: string): string;
static endsWithLineBreak(text: string): boolean;
static truncateChat(text: string): string;
static formatTicks(ticks: number): string;
static FORMATTING_CODE: Pattern;
static LINE_BREAK: Pattern;
static ENDS_WITH_LINE_BREAK: Pattern;
}

//net.minecraft.client.particle.SnowflakeParticle$Factory
class SnowflakeParticle_Factory extends JObject, ParticleFactory{
 createParticle(defaultParticleType: DefaultParticleType,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
 createParticle(particleEffect: ParticleEffect,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
}

//net.minecraft.network.packet.c2s.play.PlayerActionC2SPacket
class PlayerActionC2SPacket extends JObject, Packet{
 apply(listener: PacketListener): void;
 apply(serverPlayPacketListener: ServerPlayPacketListener): void;
 write(buf: PacketByteBuf): void;
 getAction(): PlayerActionC2SPacket_Action;
 getSequence(): number;
 getDirection(): Direction;
 getPos(): BlockPos;
}

//net.minecraft.server.command.ScheduleCommand
class ScheduleCommand extends JObject{
}
class Static_ScheduleCommand {
static register(dispatcher: CommandDispatcher): void;
static execute(source: ServerCommandSource,fun: Pair,time: number,replace: boolean): number;
static method_13569(source: ServerCommandSource): boolean;
static method_13568(context: CommandContext): number;
static method_22835(context: CommandContext,builder: SuggestionsBuilder): CompletableFuture;
static method_13571(identifier: Identifier,bl: boolean,timer: Timer,l: long,serverCommandSource: ServerCommandSource,i: number,function2: CommandFunction): void;
static clearEvent(source: ServerCommandSource,eventName: string): number;
static method_22836(eventName: Object): Message;
static method_22837(context: CommandContext): number;
static method_52044(i: number,string: string): Text;
static method_22834(context: CommandContext): number;
static method_13570(identifier: Identifier,bl: boolean,timer: Timer,l: long,serverCommandSource: ServerCommandSource,i: number,functions: Collection): void;
static method_52045(identifier: Identifier,i: number,l: long): Text;
static method_22838(context: CommandContext): number;
static method_52046(identifier: Identifier,i: number,l: long): Text;
static SAME_TICK_EXCEPTION: SimpleCommandExceptionType;
static CLEARED_FAILURE_EXCEPTION: DynamicCommandExceptionType;
static SUGGESTION_PROVIDER: SuggestionProvider;
}

//net.minecraft.util.thread.TaskExecutor
class TaskExecutor extends JObject, SampleableExecutor, MessageListener, AutoCloseable, Runnable{
 getName(): string;
 run(): void;
 toString(): string;
 close(): void;
 getQueueSize(): number;
 send(message: Object): void;
 awaitAll(): void;
 createSamplers(): List;
 hasQueuedTasks(): boolean;
}
class Static_TaskExecutor {
static create(executor: Executor,name: string): TaskExecutor;
static method_16899(runCount: number): boolean;
static method_37478(runCount: number): boolean;
static LOGGER: Logger;
static field_29940: number;
static field_29941: number;
}

//net.minecraft.text.HoverEvent
class HoverEvent extends JObject{
 equals(o: Object): boolean;
 toString(): string;
 hashCode(): number;
 getValue(action: HoverEvent_Action): Object;
 getAction(): HoverEvent_Action;
 toJson(): JsonObject;
}
class Static_HoverEvent {
static fromJson(json: JsonObject): HoverEvent;
static LOGGER: Logger;
}

//net.minecraft.client.gui.hud.SubtitlesHud$SubtitleEntry
class SubtitlesHud_SubtitleEntry extends JObject{
 reset(pos: Vec3d): void;
 getTime(): long;
 getText(): Text;
 getPosition(): Vec3d;
}

//net.minecraft.text.StringVisitable
interface StringVisitable extends JObject{
 visit(visitor: StringVisitable_Visitor): Optional;
 visit(styledVisitor: StringVisitable_StyledVisitor,style: Style): Optional;
 getString(): string;
}
class Static_StringVisitable {
static concat(visitables: List): StringVisitable;
static concat(visitables: StringVisitable[]): StringVisitable;
static plain(string: string): StringVisitable;
static styled(string: string,style: Style): StringVisitable;
static method_30067(stringBuilder: StringBuilder,string: string): Optional;
static TERMINATE_VISIT: Optional;
static EMPTY: StringVisitable;
}

//net.minecraft.world.biome.source.MultiNoiseBiomeSourceParameterLists
class MultiNoiseBiomeSourceParameterLists extends JObject{
}
class Static_MultiNoiseBiomeSourceParameterLists {
static of(id: string): RegistryKey;
static bootstrap(registry: Registerable): void;
static NETHER: RegistryKey;
static OVERWORLD: RegistryKey;
}

//net.minecraft.client.particle.GlowParticle$ElectricSparkFactory
class GlowParticle_ElectricSparkFactory extends JObject, ParticleFactory{
 createParticle(defaultParticleType: DefaultParticleType,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
 createParticle(particleEffect: ParticleEffect,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
}

//net.minecraft.unused.packageinfo.PackageInfo7300
interface PackageInfo7300 extends JObject{
}

//net.minecraft.item.map.MapIcon
class MapIcon extends JObject{
 equals(o: Object): boolean;
 hashCode(): number;
 getType(): MapIcon_Type;
 getText(): Text;
 isAlwaysRendered(): boolean;
 getX(): byte;
 getTypeId(): byte;
 getZ(): byte;
 getRotation(): byte;
}

//net.minecraft.server.network.ServerPlayerEntity$2


//net.minecraft.server.network.ServerPlayerEntity$1


//net.minecraft.util.math.random.RandomSequencesState$1


//net.minecraft.block.Waterloggable
interface Waterloggable extends JObject, FluidDrainable, FluidFillable{
 tryDrainFluid(world: WorldAccess,pos: BlockPos,state: BlockState): ItemStack;
 canFillWithFluid(world: BlockView,pos: BlockPos,state: BlockState,fluid: Fluid): boolean;
 getBucketFillSound(): Optional;
 tryFillWithFluid(world: WorldAccess,pos: BlockPos,state: BlockState,fluidState: FluidState): boolean;
}

//net.minecraft.network.packet.s2c.play.InventoryS2CPacket
class InventoryS2CPacket extends JObject, Packet{
 apply(clientPlayPacketListener: ClientPlayPacketListener): void;
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
 getContents(): List;
 getSyncId(): number;
 getCursorStack(): ItemStack;
 getRevision(): number;
}

//net.minecraft.network.packet.s2c.play.ResourcePackSendS2CPacket
class ResourcePackSendS2CPacket extends JObject, Packet{
 apply(clientPlayPacketListener: ClientPlayPacketListener): void;
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
 getURL(): string;
 getPrompt(): Text;
 getSHA1(): string;
 isRequired(): boolean;
}
class Static_ResourcePackSendS2CPacket {
static MAX_HASH_LENGTH: number;
}

//net.minecraft.block.AbstractBlock$AbstractBlockState$ShapeCache
class AbstractBlock_AbstractBlockState_ShapeCache extends JObject{
 isSideSolid(direction: Direction,shapeType: SideShapeType): boolean;
}
class Static_AbstractBlock_AbstractBlockState_ShapeCache {
static indexSolidSide(direction: Direction,shapeType: SideShapeType): number;
static DIRECTIONS: Direction[];
static SHAPE_TYPE_LENGTH: number;
}

//net.minecraft.client.render.model.json.ModelOverrideList
class ModelOverrideList extends JObject{
 apply(model: BakedModel,stack: ItemStack,world: ClientWorld,entity: LivingEntity,seed: number): BakedModel;
}
class Static_ModelOverrideList {
static method_33696(map: Object2IntMap,condition: ModelOverride_Condition): ModelOverrideList_InlinedCondition;
static method_33697(i: number): Identifier[];
static method_33694(i: number): ModelOverrideList_InlinedCondition;
static EMPTY: ModelOverrideList;
static field_42072: number;
}

//net.minecraft.network.packet.s2c.play.ScoreboardPlayerUpdateS2CPacket
class ScoreboardPlayerUpdateS2CPacket extends JObject, Packet{
 apply(clientPlayPacketListener: ClientPlayPacketListener): void;
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
 getObjectiveName(): string;
 getUpdateMode(): ServerScoreboard_UpdateMode;
 getScore(): number;
 getPlayerName(): string;
}

//net.minecraft.nbt.NbtOps$CompoundListMerger
class NbtOps_CompoundListMerger extends JObject, NbtOps_Merger{
 merge(nbt: NbtElement): NbtOps_Merger;
 getResult(): NbtElement;
}
class Static_NbtOps_CompoundListMerger {
static createMarkerNbt(value: NbtElement): NbtCompound;
static isMarker(nbt: NbtCompound): boolean;
static makeMarker(value: NbtElement): NbtElement;
}

//net.minecraft.test.StructureTestUtil
class StructureTestUtil extends JObject{
}
class Static_StructureTestUtil {
static main(args: String[]): void;
static method_22254(i: number,serverWorld: ServerWorld,pos: BlockPos): void;
static method_22241(entity: Entity): boolean;
static method_36107(path: Path): void;
static method_36108(path: Path): boolean;
static getRotationSteps(rotation: BlockRotation): number;
static createTestArea(testName: string,pos: BlockPos,relativePos: Vec3i,rotation: BlockRotation,world: ServerWorld): void;
static placeStartButton(pos: BlockPos,relativePos: BlockPos,rotation: BlockRotation,world: ServerWorld): void;
static method_22249(blockPos: BlockPos,serverWorld: ServerWorld,structureBlockPos: BlockPos): boolean;
static resetBlock(altitude: number,pos: BlockPos,world: ServerWorld): void;
static loadSnbt(path: Path): NbtCompound;
static method_22245(blockPos: BlockPos,posx: BlockPos): number;
static getStructureBlockBox(pos: BlockPos,relativePos: Vec3i,rotation: BlockRotation): BlockBox;
static getStructureBlockBox(structureBlockEntity: StructureBlockBlockEntity): BlockBox;
static placeStructureTemplate(name: string,pos: BlockPos,rotation: BlockRotation,world: ServerWorld,bl: boolean): StructureBlockBlockEntity;
static findNearestStructureBlock(pos: BlockPos,radius: number,world: ServerWorld): BlockPos;
static findContainingStructureBlock(pos: BlockPos,radius: number,world: ServerWorld): Optional;
static findStructureBlocks(pos: BlockPos,radius: number,world: ServerWorld): Collection;
static forceLoadNearbyChunks(pos: BlockPos,world: ServerWorld): void;
static isInStructureBounds(structureBlockPos: BlockPos,pos: BlockPos,world: ServerWorld): boolean;
static getRotation(steps: number): BlockRotation;
static clearArea(area: BlockBox,altitude: number,world: ServerWorld): void;
static createStructureTemplate(templateId: string,world: ServerWorld): StructureTemplate;
static createStructureTemplate(templateName: string,pos: BlockPos,rotation: BlockRotation,i: number,world: ServerWorld,interactive: boolean): StructureBlockBlockEntity;
static getStructureBoundingBox(structureBlockEntity: StructureBlockBlockEntity): Box;
static LOGGER: Logger;
static TEST_STRUCTURES_DIRECTORY_NAME: string;
static testStructuresDirectoryName: string;
static field_33174: number;
}

//net.minecraft.util.profiling.jfr.event.NetworkSummaryEvent$Names
class NetworkSummaryEvent_Names extends JObject{
}
class Static_NetworkSummaryEvent_Names {
static REMOTE_ADDRESS: string;
static SENT_BYTES: string;
static SENT_PACKETS: string;
static RECEIVED_BYTES: string;
static RECEIVED_PACKETS: string;
}

//net.minecraft.client.render.RenderPhase
class RenderPhase extends JObject{
 toString(): string;
 startDrawing(): void;
 endDrawing(): void;
}
class Static_RenderPhase {
static method_51780(): void;
static method_34554(): void;
static method_51783(): void;
static method_29378(): void;
static method_29377(): void;
static method_23519(): void;
static method_23522(): void;
static method_51781(): void;
static method_34552(): void;
static method_23520(): void;
static method_34553(): void;
static method_51782(): void;
static method_29376(): void;
static method_23542(): void;
static method_23801(): void;
static method_29370(): void;
static method_23540(): void;
static method_23504(): void;
static method_29994(): void;
static method_34556(): void;
static method_23539(): void;
static method_23536(): void;
static method_23531(): void;
static method_23532(): void;
static method_23534(): void;
static method_23505(): void;
static method_23533(): void;
static method_23537(): void;
static method_23524(): void;
static method_23502(): void;
static method_29368(): void;
static method_30675(): void;
static method_23541(): void;
static method_23535(): void;
static method_24467(): void;
static method_29995(): void;
static method_23538(): void;
static method_34555(): void;
static method_23515(): void;
static method_23510(): void;
static method_23514(): void;
static method_23511(): void;
static setupGlintTexturing(scale: number): void;
static VIEW_OFFSET_Z_LAYERING_SCALE: number;
static field_42230: number;
static NO_TRANSPARENCY: RenderPhase_Transparency;
static ADDITIVE_TRANSPARENCY: RenderPhase_Transparency;
static LIGHTNING_TRANSPARENCY: RenderPhase_Transparency;
static GLINT_TRANSPARENCY: RenderPhase_Transparency;
static CRUMBLING_TRANSPARENCY: RenderPhase_Transparency;
static TRANSLUCENT_TRANSPARENCY: RenderPhase_Transparency;
static NO_PROGRAM: RenderPhase_ShaderProgram;
static POSITION_COLOR_LIGHTMAP_PROGRAM: RenderPhase_ShaderProgram;
static POSITION_PROGRAM: RenderPhase_ShaderProgram;
static POSITION_COLOR_TEXTURE_PROGRAM: RenderPhase_ShaderProgram;
static POSITION_TEXTURE_PROGRAM: RenderPhase_ShaderProgram;
static POSITION_COLOR_TEXTURE_LIGHTMAP_PROGRAM: RenderPhase_ShaderProgram;
static COLOR_PROGRAM: RenderPhase_ShaderProgram;
static SOLID_PROGRAM: RenderPhase_ShaderProgram;
static CUTOUT_MIPPED_PROGRAM: RenderPhase_ShaderProgram;
static CUTOUT_PROGRAM: RenderPhase_ShaderProgram;
static TRANSLUCENT_PROGRAM: RenderPhase_ShaderProgram;
static TRANSLUCENT_MOVING_BLOCK_PROGRAM: RenderPhase_ShaderProgram;
static TRANSLUCENT_NO_CRUMBLING_PROGRAM: RenderPhase_ShaderProgram;
static ARMOR_CUTOUT_NO_CULL_PROGRAM: RenderPhase_ShaderProgram;
static ENTITY_SOLID_PROGRAM: RenderPhase_ShaderProgram;
static ENTITY_CUTOUT_PROGRAM: RenderPhase_ShaderProgram;
static ENTITY_CUTOUT_NONULL_PROGRAM: RenderPhase_ShaderProgram;
static ENTITY_CUTOUT_NONULL_OFFSET_Z_PROGRAM: RenderPhase_ShaderProgram;
static ITEM_ENTITY_TRANSLUCENT_CULL_PROGRAM: RenderPhase_ShaderProgram;
static ENTITY_TRANSLUCENT_CULL_PROGRAM: RenderPhase_ShaderProgram;
static ENTITY_TRANSLUCENT_PROGRAM: RenderPhase_ShaderProgram;
static ENTITY_TRANSLUCENT_EMISSIVE_PROGRAM: RenderPhase_ShaderProgram;
static ENTITY_SMOOTH_CUTOUT_PROGRAM: RenderPhase_ShaderProgram;
static BEACON_BEAM_PROGRAM: RenderPhase_ShaderProgram;
static ENTITY_DECAL_PROGRAM: RenderPhase_ShaderProgram;
static ENTITY_NO_OUTLINE_PROGRAM: RenderPhase_ShaderProgram;
static ENTITY_SHADOW_PROGRAM: RenderPhase_ShaderProgram;
static ENTITY_ALPHA_PROGRAM: RenderPhase_ShaderProgram;
static EYES_PROGRAM: RenderPhase_ShaderProgram;
static ENERGY_SWIRL_PROGRAM: RenderPhase_ShaderProgram;
static LEASH_PROGRAM: RenderPhase_ShaderProgram;
static WATER_MASK_PROGRAM: RenderPhase_ShaderProgram;
static OUTLINE_PROGRAM: RenderPhase_ShaderProgram;
static ARMOR_GLINT_PROGRAM: RenderPhase_ShaderProgram;
static ARMOR_ENTITY_GLINT_PROGRAM: RenderPhase_ShaderProgram;
static TRANSLUCENT_GLINT_PROGRAM: RenderPhase_ShaderProgram;
static GLINT_PROGRAM: RenderPhase_ShaderProgram;
static DIRECT_GLINT_PROGRAM: RenderPhase_ShaderProgram;
static ENTITY_GLINT_PROGRAM: RenderPhase_ShaderProgram;
static DIRECT_ENTITY_GLINT_PROGRAM: RenderPhase_ShaderProgram;
static CRUMBLING_PROGRAM: RenderPhase_ShaderProgram;
static TEXT_PROGRAM: RenderPhase_ShaderProgram;
static TEXT_BACKGROUND_PROGRAM: RenderPhase_ShaderProgram;
static TEXT_INTENSITY_PROGRAM: RenderPhase_ShaderProgram;
static TRANSPARENT_TEXT_PROGRAM: RenderPhase_ShaderProgram;
static TRANSPARENT_TEXT_BACKGROUND_PROGRAM: RenderPhase_ShaderProgram;
static TRANSPARENT_TEXT_INTENSITY_PROGRAM: RenderPhase_ShaderProgram;
static LIGHTNING_PROGRAM: RenderPhase_ShaderProgram;
static TRIPWIRE_PROGRAM: RenderPhase_ShaderProgram;
static END_PORTAL_PROGRAM: RenderPhase_ShaderProgram;
static END_GATEWAY_PROGRAM: RenderPhase_ShaderProgram;
static LINES_PROGRAM: RenderPhase_ShaderProgram;
static GUI_PROGRAM: RenderPhase_ShaderProgram;
static GUI_OVERLAY_PROGRAM: RenderPhase_ShaderProgram;
static GUI_TEXT_HIGHLIGHT_PROGRAM: RenderPhase_ShaderProgram;
static GUI_GHOST_RECIPE_OVERLAY_PROGRAM: RenderPhase_ShaderProgram;
static MIPMAP_BLOCK_ATLAS_TEXTURE: RenderPhase_Texture;
static BLOCK_ATLAS_TEXTURE: RenderPhase_Texture;
static NO_TEXTURE: RenderPhase_TextureBase;
static DEFAULT_TEXTURING: RenderPhase_Texturing;
static GLINT_TEXTURING: RenderPhase_Texturing;
static ENTITY_GLINT_TEXTURING: RenderPhase_Texturing;
static ENABLE_LIGHTMAP: RenderPhase_Lightmap;
static DISABLE_LIGHTMAP: RenderPhase_Lightmap;
static ENABLE_OVERLAY_COLOR: RenderPhase_Overlay;
static DISABLE_OVERLAY_COLOR: RenderPhase_Overlay;
static ENABLE_CULLING: RenderPhase_Cull;
static DISABLE_CULLING: RenderPhase_Cull;
static ALWAYS_DEPTH_TEST: RenderPhase_DepthTest;
static EQUAL_DEPTH_TEST: RenderPhase_DepthTest;
static LEQUAL_DEPTH_TEST: RenderPhase_DepthTest;
static BIGGER_DEPTH_TEST: RenderPhase_DepthTest;
static ALL_MASK: RenderPhase_WriteMaskState;
static COLOR_MASK: RenderPhase_WriteMaskState;
static DEPTH_MASK: RenderPhase_WriteMaskState;
static NO_LAYERING: RenderPhase_Layering;
static POLYGON_OFFSET_LAYERING: RenderPhase_Layering;
static VIEW_OFFSET_Z_LAYERING: RenderPhase_Layering;
static MAIN_TARGET: RenderPhase_Target;
static OUTLINE_TARGET: RenderPhase_Target;
static TRANSLUCENT_TARGET: RenderPhase_Target;
static PARTICLES_TARGET: RenderPhase_Target;
static WEATHER_TARGET: RenderPhase_Target;
static CLOUDS_TARGET: RenderPhase_Target;
static ITEM_ENTITY_TARGET: RenderPhase_Target;
static FULL_LINE_WIDTH: RenderPhase_LineWidth;
static NO_COLOR_LOGIC: RenderPhase_ColorLogic;
static OR_REVERSE: RenderPhase_ColorLogic;
}

//net.minecraft.entity.ai.brain.task.TakeJobSiteTask
class TakeJobSiteTask extends JObject{
}
class Static_TakeJobSiteTask {
static create(speed: number): Task;
static canUseJobSite(poiType: RegistryEntry,villager: VillagerEntity,pos: BlockPos): boolean;
static method_47208(f: number,context: TaskTriggerer_TaskContext): App;
static method_47213(villagerEntity: VillagerEntity,mob: LivingEntity): boolean;
static method_47212(memoryQueryResult: MemoryQueryResult,memoryQueryResult2: MemoryQueryResult,memoryQueryResult3: MemoryQueryResult,blockPos: BlockPos,f: number,serverWorld: ServerWorld,villager: VillagerEntity): void;
static method_47210(taskContext: TaskTriggerer_TaskContext,f: number,potentialJobSite: MemoryQueryResult,jobSite: MemoryQueryResult,mobs: MemoryQueryResult,walkTarget: MemoryQueryResult,lookTarget: MemoryQueryResult): TaskRunnable;
static method_47209(villager: LivingEntity): VillagerEntity;
static method_47211(taskContext: TaskTriggerer_TaskContext,memoryQueryResult: MemoryQueryResult,memoryQueryResult2: MemoryQueryResult,memoryQueryResult3: MemoryQueryResult,memoryQueryResult4: MemoryQueryResult,f: number,world: ServerWorld,entity: VillagerEntity,time: long): boolean;
static method_47214(optional: Optional,blockPos: BlockPos,villager: VillagerEntity): boolean;
static canReachJobSite(entity: PathAwareEntity,pos: BlockPos,poiType: PointOfInterestType): boolean;
}

//net.minecraft.client.texture.TextureStitcher$SpriteConsumer
interface TextureStitcher_SpriteConsumer extends JObject{
 load(info: TextureStitcher_Stitchable,x: number,y: number): void;
}

//net.minecraft.world.gen.feature.util.PlacedFeatureIndexer
class PlacedFeatureIndexer extends JObject{
}
class Static_PlacedFeatureIndexer {
static collectIndexedFeatures(biomes: List,biomesToPlacedFeaturesList: Function,listInvolvedBiomesOnFailure: boolean): List;
static method_44208(i: number,feature: PlacedFeatureIndexer_IndexedFeature): boolean;
static method_44211(mutableInt: MutableInt,feature: Object): number;
static method_44209(comparator: Comparator,feature: PlacedFeatureIndexer_IndexedFeature): Set;
}

//net.minecraft.world.poi.PointOfInterestTypes
class PointOfInterestTypes extends JObject{
}
class Static_PointOfInterestTypes {
static of(id: string): RegistryKey;
static register(registry: Registry,key: RegistryKey,states: Set,ticketCount: number,searchDistance: number): PointOfInterestType;
static method_43996(blockState: BlockState): boolean;
static registerStates(poiTypeEntry: RegistryEntry,states: Set): void;
static getStatesOfBlock(block: Block): Set;
static getTypeForState(state: BlockState): Optional;
static method_43995(block: Block): Stream;
static method_43997(block: Block): Stream;
static method_43991(registryEntry: RegistryEntry,state: BlockState): void;
static registerAndGetDefault(registry: Registry): PointOfInterestType;
static isPointOfInterest(state: BlockState): boolean;
static ARMORER: RegistryKey;
static BUTCHER: RegistryKey;
static CARTOGRAPHER: RegistryKey;
static CLERIC: RegistryKey;
static FARMER: RegistryKey;
static FISHERMAN: RegistryKey;
static FLETCHER: RegistryKey;
static LEATHERWORKER: RegistryKey;
static LIBRARIAN: RegistryKey;
static MASON: RegistryKey;
static SHEPHERD: RegistryKey;
static TOOLSMITH: RegistryKey;
static WEAPONSMITH: RegistryKey;
static HOME: RegistryKey;
static MEETING: RegistryKey;
static BEEHIVE: RegistryKey;
static BEE_NEST: RegistryKey;
static NETHER_PORTAL: RegistryKey;
static LODESTONE: RegistryKey;
static LIGHTNING_ROD: RegistryKey;
static BED_HEADS: Set;
static CAULDRONS: Set;
static POI_STATES_TO_TYPE: Map;
}

//net.minecraft.nbt.NbtElement
interface NbtElement extends JObject{
 toString(): string;
 write(output: DataOutput): void;
 accept(visitor: NbtScanner): void;
 accept(visitor: NbtElementVisitor): void;
 getType(): byte;
 copy(): NbtElement;
 asString(): string;
 getSizeInBytes(): number;
 doAccept(visitor: NbtScanner): NbtScanner_Result;
 getNbtType(): NbtType;
}
class Static_NbtElement {
static field_33246: number;
static field_33247: number;
static field_33248: number;
static field_33249: number;
static END_TYPE: byte;
static BYTE_TYPE: byte;
static SHORT_TYPE: byte;
static INT_TYPE: byte;
static LONG_TYPE: byte;
static FLOAT_TYPE: byte;
static DOUBLE_TYPE: byte;
static BYTE_ARRAY_TYPE: byte;
static STRING_TYPE: byte;
static LIST_TYPE: byte;
static COMPOUND_TYPE: byte;
static INT_ARRAY_TYPE: byte;
static LONG_ARRAY_TYPE: byte;
static NUMBER_TYPE: byte;
static MAX_DEPTH: number;
}

//net.minecraft.block.AbstractBlock
class AbstractBlock extends JObject, ToggleableFeature{
 prepare(state: BlockState,world: WorldAccess,pos: BlockPos,flags: number,maxUpdateDepth: number): void;
 rotate(state: BlockState,rotation: BlockRotation): BlockState;
 hasSidedTransparency(state: BlockState): boolean;
 getStateForNeighborUpdate(state: BlockState,direction: Direction,neighborState: BlockState,world: WorldAccess,pos: BlockPos,neighborPos: BlockPos): BlockState;
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 canPlaceAt(state: BlockState,world: WorldView,pos: BlockPos): boolean;
 isShapeFullCube(state: BlockState,world: BlockView,pos: BlockPos): boolean;
 getAmbientOcclusionLightLevel(state: BlockState,world: BlockView,pos: BlockPos): number;
 getCameraCollisionShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 getStrongRedstonePower(state: BlockState,world: BlockView,pos: BlockPos,direction: Direction): number;
 hasComparatorOutput(state: BlockState): boolean;
 isCullingShapeFullCube(state: BlockState,world: BlockView,pos: BlockPos): boolean;
 getComparatorOutput(state: BlockState,world: World,pos: BlockPos): number;
 getRenderingSeed(state: BlockState,pos: BlockPos): long;
 getSidesShape(state: BlockState,world: BlockView,pos: BlockPos): VoxelShape;
 isSideInvisible(state: BlockState,stateFrom: BlockState,direction: Direction): boolean;
 canReplace(state: BlockState,context: ItemPlacementContext): boolean;
 onSyncedBlockEvent(state: BlockState,world: World,pos: BlockPos,type: number,data: number): boolean;
 canPathfindThrough(state: BlockState,world: BlockView,pos: BlockPos,type: NavigationType): boolean;
 canBucketPlace(state: BlockState,fluid: Fluid): boolean;
 emitsRedstonePower(state: BlockState): boolean;
 onBlockAdded(state: BlockState,world: World,pos: BlockPos,oldState: BlockState,notify: boolean): void;
 onStateReplaced(state: BlockState,world: World,pos: BlockPos,newState: BlockState,moved: boolean): void;
 onStacksDropped(state: BlockState,world: ServerWorld,pos: BlockPos,tool: ItemStack,dropExperience: boolean): void;
 onEntityCollision(state: BlockState,world: World,pos: BlockPos,entity: Entity): void;
 scheduledTick(state: BlockState,world: ServerWorld,pos: BlockPos,random: Random): void;
 onProjectileHit(world: World,state: BlockState,hit: BlockHitResult,projectile: ProjectileEntity): void;
 getHardness(): number;
 getDefaultMapColor(): MapColor;
 randomTick(state: BlockState,world: ServerWorld,pos: BlockPos,random: Random): void;
 getOpacity(state: BlockState,world: BlockView,pos: BlockPos): number;
 getCullingShape(state: BlockState,world: BlockView,pos: BlockPos): VoxelShape;
 mirror(state: BlockState,mirror: BlockMirror): BlockState;
 neighborUpdate(state: BlockState,world: World,pos: BlockPos,sourceBlock: Block,sourcePos: BlockPos,notify: boolean): void;
 getFluidState(state: BlockState): FluidState;
 createScreenHandlerFactory(state: BlockState,world: World,pos: BlockPos): NamedScreenHandlerFactory;
 getWeakRedstonePower(state: BlockState,world: BlockView,pos: BlockPos,direction: Direction): number;
 calcBlockBreakingDelta(state: BlockState,player: PlayerEntity,world: BlockView,pos: BlockPos): number;
 getRequiredFeatures(): FeatureSet;
 getMaxHorizontalModelOffset(): number;
 getVerticalModelOffsetMultiplier(): number;
 onUse(state: BlockState,world: World,pos: BlockPos,player: PlayerEntity,hand: Hand,hit: BlockHitResult): ActionResult;
 onBlockBreakStart(state: BlockState,world: World,pos: BlockPos,player: PlayerEntity): void;
 getRaycastShape(state: BlockState,world: BlockView,pos: BlockPos): VoxelShape;
 getCollisionShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 asItem(): Item;
 getRenderType(state: BlockState): BlockRenderType;
 getLootTableId(): Identifier;
 getDroppedStacks(state: BlockState,builder: LootContextParameterSet_Builder): List;
}
class Static_AbstractBlock {
static DIRECTIONS: Direction[];
}

//net.minecraft.world.tick.EmptyTickSchedulers$1


//net.minecraft.world.tick.EmptyTickSchedulers$2


//net.minecraft.block.AbstractBlock$1


//net.minecraft.block.entity.BeehiveBlockEntity$Bee
class BeehiveBlockEntity_Bee extends JObject{
}

//net.minecraft.server.command.ParticleCommand
class ParticleCommand extends JObject{
}
class Static_ParticleCommand {
static register(dispatcher: CommandDispatcher,registryAccess: CommandRegistryAccess): void;
static execute(source: ServerCommandSource,parameters: ParticleEffect,pos: Vec3d,delta: Vec3d,speed: number,count: number,force: boolean,viewers: Collection): number;
static method_13490(source: ServerCommandSource): boolean;
static method_13492(context: CommandContext): number;
static method_13485(context: CommandContext): number;
static method_13488(context: CommandContext): number;
static method_52015(particleEffect: ParticleEffect): Text;
static method_13483(context: CommandContext): number;
static method_13487(context: CommandContext): number;
static method_13489(context: CommandContext): number;
static method_13484(context: CommandContext): number;
static FAILED_EXCEPTION: SimpleCommandExceptionType;
}

//net.minecraft.datafixer.schema.Schema704$1


//net.minecraft.util.math.random.ThreadSafeRandom
class ThreadSafeRandom extends JObject, BaseRandom{
 split(): Random;
 next(bits: number): number;
 nextGaussian(): number;
 setSeed(seed: long): void;
 nextSplitter(): RandomSplitter;
}
class Static_ThreadSafeRandom {
static INT_BITS: number;
static SEED_MASK: long;
static MULTIPLIER: long;
static INCREMENT: long;
}

//net.minecraft.client.texture.SpriteContents$Interpolation
class SpriteContents_Interpolation extends JObject, AutoCloseable{
 close(): void;
}

//net.minecraft.world.RedstoneView
interface RedstoneView extends JObject, BlockView{
 isEmittingRedstonePower(pos: BlockPos,direction: Direction): boolean;
 getStrongRedstonePower(pos: BlockPos,direction: Direction): number;
 getEmittedRedstonePower(pos: BlockPos,direction: Direction): number;
 getEmittedRedstonePower(pos: BlockPos,direction: Direction,onlyFromGate: boolean): number;
 getReceivedRedstonePower(pos: BlockPos): number;
 isReceivingRedstonePower(pos: BlockPos): boolean;
 getReceivedStrongRedstonePower(pos: BlockPos): number;
}
class Static_RedstoneView {
static DIRECTIONS: Direction[];
}

//net.minecraft.registry.tag.StructureTags
interface StructureTags extends JObject{
}
class Static_StructureTags {
static of(id: string): TagKey;
static EYE_OF_ENDER_LOCATED: TagKey;
static DOLPHIN_LOCATED: TagKey;
static ON_WOODLAND_EXPLORER_MAPS: TagKey;
static ON_OCEAN_EXPLORER_MAPS: TagKey;
static ON_TREASURE_MAPS: TagKey;
static CATS_SPAWN_IN: TagKey;
static CATS_SPAWN_AS_BLACK: TagKey;
static VILLAGE: TagKey;
static MINESHAFT: TagKey;
static SHIPWRECK: TagKey;
static RUINED_PORTAL: TagKey;
static OCEAN_RUIN: TagKey;
}

//net.minecraft.particle.DustParticleEffect$1


//net.minecraft.client.util.telemetry.TelemetryLogger
interface TelemetryLogger extends JObject{
 log(event: SentTelemetryEvent): void;
}

//net.minecraft.client.render.debug.VillageSectionsDebugRenderer
class VillageSectionsDebugRenderer extends JObject, DebugRenderer_Renderer{
 clear(): void;
 render(matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,cameraX: number,cameraY: number,cameraZ: number): void;
 removeSection(pos: ChunkSectionPos): void;
 addSection(pos: ChunkSectionPos): void;
}
class Static_VillageSectionsDebugRenderer {
static drawBoxAtCenterOf(matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,sectionPos: ChunkSectionPos): void;
static method_49049(blockPos: BlockPos,matrixStack: MatrixStack,vertexConsumerProvider: VertexConsumerProvider,section: ChunkSectionPos): void;
static RANGE: number;
}

//net.minecraft.world.gen.feature.OrePlacedFeatures
class OrePlacedFeatures extends JObject{
}
class Static_OrePlacedFeatures {
static modifiers(countModifier: PlacementModifier,heightModifier: PlacementModifier): List;
static bootstrap(featureRegisterable: Registerable): void;
static modifiersWithRarity(chance: number,heightModifier: PlacementModifier): List;
static modifiersWithCount(count: number,heightModifier: PlacementModifier): List;
static ORE_MAGMA: RegistryKey;
static ORE_SOUL_SAND: RegistryKey;
static ORE_GOLD_DELTAS: RegistryKey;
static ORE_QUARTZ_DELTAS: RegistryKey;
static ORE_GOLD_NETHER: RegistryKey;
static ORE_QUARTZ_NETHER: RegistryKey;
static ORE_GRAVEL_NETHER: RegistryKey;
static ORE_BLACKSTONE: RegistryKey;
static ORE_DIRT: RegistryKey;
static ORE_GRAVEL: RegistryKey;
static ORE_GRANITE_UPPER: RegistryKey;
static ORE_GRANITE_LOWER: RegistryKey;
static ORE_DIORITE_UPPER: RegistryKey;
static ORE_DIORITE_LOWER: RegistryKey;
static ORE_ANDESITE_UPPER: RegistryKey;
static ORE_ANDESITE_LOWER: RegistryKey;
static ORE_TUFF: RegistryKey;
static ORE_COAL_UPPER: RegistryKey;
static ORE_COAL_LOWER: RegistryKey;
static ORE_IRON_UPPER: RegistryKey;
static ORE_IRON_MIDDLE: RegistryKey;
static ORE_IRON_SMALL: RegistryKey;
static ORE_GOLD_EXTRA: RegistryKey;
static ORE_GOLD: RegistryKey;
static ORE_GOLD_LOWER: RegistryKey;
static ORE_REDSTONE: RegistryKey;
static ORE_REDSTONE_LOWER: RegistryKey;
static ORE_DIAMOND: RegistryKey;
static ORE_DIAMOND_LARGE: RegistryKey;
static ORE_DIAMOND_BURIED: RegistryKey;
static ORE_LAPIS: RegistryKey;
static ORE_LAPIS_BURIED: RegistryKey;
static ORE_INFESTED: RegistryKey;
static ORE_EMERALD: RegistryKey;
static ORE_ANCIENT_DEBRIS_LARGE: RegistryKey;
static ORE_DEBRIS_SMALL: RegistryKey;
static ORE_COPPER: RegistryKey;
static ORE_COPPER_LARGE: RegistryKey;
static ORE_CLAY: RegistryKey;
}

//net.minecraft.world.timer.Timer$Event
class Timer_Event extends JObject{
 triggerTime: long;
 id: UnsignedLong;
 name: string;
 callback: TimerCallback;
}

//net.minecraft.registry.RegistryBuilder$AnyOwner
class RegistryBuilder_AnyOwner extends JObject, RegistryEntryOwner{
 addOwner(owner: RegistryEntryOwner): void;
 ownerEquals(other: RegistryEntryOwner): boolean;
}

//net.minecraft.client.gui.screen.world.WorldIcon
class WorldIcon extends JObject, AutoCloseable{
 load(image: NativeImage): void;
 destroy(): void;
 close(): void;
 getTextureId(): Identifier;
}
class Static_WorldIcon {
static forWorld(textureManager: TextureManager,worldName: string): WorldIcon;
static forServer(textureManager: TextureManager,serverAddress: string): WorldIcon;
static UNKNOWN_SERVER_ID: Identifier;
static ICON_WIDTH: number;
static ICON_HEIGHT: number;
}

//net.minecraft.client.render.entity.ParrotEntityRenderer$1


//net.minecraft.item.ItemConvertible
interface ItemConvertible extends JObject{
 asItem(): Item;
}

//net.minecraft.predicate.NumberRange$Factory
interface NumberRange_Factory extends JObject{
 create(min: Number,max: Number): NumberRange;
}

//net.minecraft.registry.SerializableRegistries
class SerializableRegistries extends JObject{
}
class Static_SerializableRegistries {
static add(builder: ImmutableMap_Builder,key: RegistryKey,networkCodec: Codec): void;
static stream(dynamicRegistryManager: DynamicRegistryManager): Stream;
static createCodec(): Codec;
static streamRegistryManagerEntries(combinedRegistries: CombinedDynamicRegistries): Stream;
static createDynamicRegistryManagerCodec(networkCodec: UnboundedMapCodec): Codec;
static streamDynamicEntries(combinedRegistries: CombinedDynamicRegistries): Stream;
static method_45961(registryManager: DynamicRegistryManager): Map;
static method_45954(registry: Registry): DataResult;
static method_45957(info: SerializableRegistries_Info): Codec;
static method_45962(registryKey: RegistryKey): DataResult;
static getNetworkCodec(registryRef: RegistryKey): DataResult;
static method_45963(entry: DynamicRegistryManager_Entry): boolean;
static method_45959(registryRef: RegistryKey): DataResult;
static method_45955(entry: DynamicRegistryManager_Entry): Registry;
static method_45950(registryKey: RegistryKey,codec: Codec): Codec;
static method_45960(entry: DynamicRegistryManager_Entry): RegistryKey;
static method_49644(registryKey: RegistryKey): string;
static method_45958(): ImmutableMap;
static REGISTRIES: Map;
static CODEC: Codec;
}

//net.minecraft.screen.ScreenHandlerFactory
interface ScreenHandlerFactory extends JObject{
 createMenu(syncId: number,playerInventory: PlayerInventory,player: PlayerEntity): ScreenHandler;
}

//net.minecraft.util.profiler.Profiler$1


//net.minecraft.unused.packageinfo.PackageInfo6096
interface PackageInfo6096 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6095
interface PackageInfo6095 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6094
interface PackageInfo6094 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6093
interface PackageInfo6093 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6099
interface PackageInfo6099 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6098
interface PackageInfo6098 extends JObject{
}

//net.minecraft.nbt.NbtEnd$1


//net.minecraft.unused.packageinfo.PackageInfo6097
interface PackageInfo6097 extends JObject{
}

//net.minecraft.client.realms.util.PeriodicRunnerFactory
class PeriodicRunnerFactory extends JObject{
 create(name: string,task: Callable,cycle: Duration,backoff: Backoff): PeriodicRunnerFactory_PeriodicRunner;
 create(): PeriodicRunnerFactory_RunnersManager;
}
class Static_PeriodicRunnerFactory {
static LOGGER: Logger;
}

//net.minecraft.command.argument.serialize.StringArgumentSerializer$1


//net.minecraft.unused.packageinfo.PackageInfo6092
interface PackageInfo6092 extends JObject{
}

//net.minecraft.server.command.PlaySoundCommand
class PlaySoundCommand extends JObject{
}
class Static_PlaySoundCommand {
static register(dispatcher: CommandDispatcher): void;
static execute(source: ServerCommandSource,targets: Collection,sound: Identifier,category: SoundCategory,pos: Vec3d,volume: number,pitch: number,minVolume: number): number;
static makeArgumentsForCategory(category: SoundCategory): LiteralArgumentBuilder;
static method_13499(soundCategory: SoundCategory,context: CommandContext): number;
static method_13501(soundCategory: SoundCategory,context: CommandContext): number;
static method_13503(soundCategory: SoundCategory,context: CommandContext): number;
static method_13502(source: ServerCommandSource): boolean;
static method_13498(soundCategory: SoundCategory,context: CommandContext): number;
static method_13505(soundCategory: SoundCategory,context: CommandContext): number;
static method_52023(identifier: Identifier,collection: Collection): Text;
static method_52024(identifier: Identifier,collection: Collection): Text;
static FAILED_EXCEPTION: SimpleCommandExceptionType;
}

//net.minecraft.unused.packageinfo.PackageInfo6091
interface PackageInfo6091 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6090
interface PackageInfo6090 extends JObject{
}

//net.minecraft.world.ModifiableWorld
interface ModifiableWorld extends JObject{
 setBlockState(pos: BlockPos,state: BlockState,flags: number,maxUpdateDepth: number): boolean;
 setBlockState(pos: BlockPos,state: BlockState,flags: number): boolean;
 breakBlock(pos: BlockPos,drop: boolean,breakingEntity: Entity): boolean;
 breakBlock(pos: BlockPos,drop: boolean,breakingEntity: Entity,maxUpdateDepth: number): boolean;
 breakBlock(pos: BlockPos,drop: boolean): boolean;
 spawnEntity(entity: Entity): boolean;
 removeBlock(pos: BlockPos,move: boolean): boolean;
}

//net.minecraft.world.timer.FunctionTimerCallback
class FunctionTimerCallback extends JObject, TimerCallback{
 call(server: Object,events: Timer,time: long): void;
 call(minecraftServer: MinecraftServer,timer: Timer,l: long): void;
}
class Static_FunctionTimerCallback {
static method_17938(commandFunctionManager: CommandFunctionManager,fun: CommandFunction): void;
}

//net.minecraft.predicate.entity.FishingHookPredicate
class FishingHookPredicate extends JObject, TypeSpecificPredicate{
 test(entity: Entity,world: ServerWorld,pos: Vec3d): boolean;
 getDeserializer(): TypeSpecificPredicate_Deserializer;
 typeSpecificToJson(): JsonObject;
}
class Static_FishingHookPredicate {
static of(inOpenWater: boolean): FishingHookPredicate;
static fromJson(json: JsonObject): FishingHookPredicate;
static ALL: FishingHookPredicate;
static IN_OPEN_WATER: string;
}

//net.minecraft.client.realms.FileDownload
class FileDownload extends JObject{
 isError(): boolean;
 cancel(): void;
 contentLength(downloadLink: string): long;
 isExtracting(): boolean;
 downloadWorld(download: WorldDownload,message: string,status: RealmsDownloadLatestWorldScreen_DownloadStatus,storage: LevelStorage): void;
 isFinished(): boolean;
}
class Static_FileDownload {
static findAvailableFolderName(folder: string): string;
static readNbtFile(file: File): void;
static LOGGER: Logger;
static INVALID_FILE_NAMES: String[];
}

//net.minecraft.entity.player.PlayerAbilities
class PlayerAbilities extends JObject{
 setWalkSpeed(walkSpeed: number): void;
 setFlySpeed(flySpeed: number): void;
 getFlySpeed(): number;
 getWalkSpeed(): number;
 readNbt(nbt: NbtCompound): void;
 writeNbt(nbt: NbtCompound): void;
 invulnerable: boolean;
 flying: boolean;
 allowFlying: boolean;
 creativeMode: boolean;
 allowModifyWorld: boolean;
}

//net.minecraft.entity.ai.brain.task.WorkStationCompetitionTask
class WorkStationCompetitionTask extends JObject{
}
class Static_WorkStationCompetitionTask {
static create(): Task;
static isCompletedWorkStation(poiType: RegistryEntry,profession: VillagerProfession): boolean;
static isUsingWorkStationAt(pos: GlobalPos,poiType: RegistryEntry,villager: VillagerEntity): boolean;
static method_47012(villagerEntity: VillagerEntity,mob: LivingEntity): boolean;
static method_47013(globalPos: GlobalPos,registryEntry: RegistryEntry,villager: VillagerEntity): boolean;
static method_47008(context: TaskTriggerer_TaskContext): App;
static method_47010(taskContext: TaskTriggerer_TaskContext,memoryQueryResult: MemoryQueryResult,memoryQueryResult2: MemoryQueryResult,world: ServerWorld,entity: VillagerEntity,time: long): boolean;
static method_47007(villager: LivingEntity): VillagerEntity;
static method_47011(taskContext: TaskTriggerer_TaskContext,memoryQueryResult: MemoryQueryResult,villagerEntity: VillagerEntity,globalPos: GlobalPos,poiType: RegistryEntry): void;
static method_47009(taskContext: TaskTriggerer_TaskContext,jobSite: MemoryQueryResult,mobs: MemoryQueryResult): TaskRunnable;
static keepJobSiteForMoreExperiencedVillager(first: VillagerEntity,second: VillagerEntity): VillagerEntity;
}

//net.minecraft.world.gen.structure.StructureType
interface StructureType extends JObject{
 codec(): Codec;
}
class Static_StructureType {
static register(id: string,codec: Codec): StructureType;
static method_41622(codec: Codec): Codec;
static BURIED_TREASURE: StructureType;
static DESERT_PYRAMID: StructureType;
static END_CITY: StructureType;
static FORTRESS: StructureType;
static IGLOO: StructureType;
static JIGSAW: StructureType;
static JUNGLE_TEMPLE: StructureType;
static MINESHAFT: StructureType;
static NETHER_FOSSIL: StructureType;
static OCEAN_MONUMENT: StructureType;
static OCEAN_RUIN: StructureType;
static RUINED_PORTAL: StructureType;
static SHIPWRECK: StructureType;
static STRONGHOLD: StructureType;
static SWAMP_HUT: StructureType;
static WOODLAND_MANSION: StructureType;
}

//net.minecraft.structure.WoodlandMansionGenerator$LayoutGenerator
class WoodlandMansionGenerator_LayoutGenerator extends JObject{
 generate(pos: BlockPos,rotation: BlockRotation,pieces: List,parameters: WoodlandMansionGenerator_MansionParameters): void;
}

//net.minecraft.network.packet.s2c.play.ChunkData
class ChunkData extends JObject{
 write(buf: PacketByteBuf): void;
 getSectionsDataBuf(): PacketByteBuf;
 getHeightmap(): NbtCompound;
 getBlockEntities(x: number,z: number): Consumer;
}
class Static_ChunkData {
static getSectionsPacketSize(chunk: WorldChunk): number;
static method_38592(buf2: PacketByteBuf,entry: ChunkData_BlockEntityData): void;
static writeSections(buf: PacketByteBuf,chunk: WorldChunk): void;
static MAX_SECTIONS_DATA_SIZE: number;
}

//net.minecraft.structure.PostPlacementProcessor
interface PostPlacementProcessor extends JObject{
 afterPlace(world: StructureWorldAccess,structureAccessor: StructureAccessor,chunkGenerator: ChunkGenerator,random: Random,chunkBox: BlockBox,pos: ChunkPos,children: StructurePiecesList): void;
}
class Static_PostPlacementProcessor {
static method_38701(world: StructureWorldAccess,structureAccessor: StructureAccessor,chunkGenerator: ChunkGenerator,random: Random,chunkBox: BlockBox,pos: ChunkPos,children: StructurePiecesList): void;
static EMPTY: PostPlacementProcessor;
}

//net.minecraft.loot.context.LootContextType$Builder
class LootContextType_Builder extends JObject{
 allow(parameter: LootContextParameter): LootContextType_Builder;
 build(): LootContextType;
 require(parameter: LootContextParameter): LootContextType_Builder;
}

//net.minecraft.client.resource.metadata.AnimationResourceMetadata$FrameConsumer
interface AnimationResourceMetadata_FrameConsumer extends JObject{
 accept(index: number,frameTime: number): void;
}

//net.minecraft.util.math.noise.PerlinNoiseSampler
class PerlinNoiseSampler extends JObject{
 sample(x: number,y: number,z: number): number;
 sample(x: number,y: number,z: number,yScale: number,yMax: number): number;
 addDebugInfo(info: StringBuilder): void;
 sampleDerivative(x: number,y: number,z: number,ds: number[]): number;
 originX: number;
 originY: number;
 originZ: number;
}
class Static_PerlinNoiseSampler {
static grad(hash: number,x: number,y: number,z: number): number;
static field_31701: number;
}

//net.minecraft.client.render.debug.VillageDebugRenderer
class VillageDebugRenderer extends JObject, DebugRenderer_Renderer{
 clear(): void;
 render(matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,cameraX: number,cameraY: number,cameraZ: number): void;
 removeBrain(entityId: number): void;
 setFreeTicketCount(pos: BlockPos,freeTicketCount: number): void;
 addPointOfInterest(poi: VillageDebugRenderer_PointOfInterest): void;
 addBrain(brain: VillageDebugRenderer_Brain): void;
 removePointOfInterest(pos: BlockPos): void;
}
class Static_VillageDebugRenderer {
static drawPointOfInterest(matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,pos: BlockPos): void;
static method_35798(i: number,brain: VillageDebugRenderer_Brain): boolean;
static method_23127(blockPos: BlockPos,brain: VillageDebugRenderer_Brain): boolean;
static method_29384(blockPos: BlockPos,brain: VillageDebugRenderer_Brain): boolean;
static method_30112(pos: BlockPos): List;
static drawString(matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,string: string,pointOfInterest: VillageDebugRenderer_PointOfInterest,offsetY: number,color: number): void;
static drawString(matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,string: string,pos: BlockPos,offsetY: number,color: number): void;
static drawString(matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,pos: Position,offsetY: number,string: string,color: number,size: number): void;
static LOGGER: Logger;
static field_32874: boolean;
static field_32875: boolean;
static field_32876: boolean;
static field_32877: boolean;
static field_32878: boolean;
static field_32879: boolean;
static field_32880: boolean;
static field_32881: boolean;
static field_32882: boolean;
static field_38346: boolean;
static field_32883: boolean;
static field_32884: boolean;
static field_32885: boolean;
static field_32886: boolean;
static field_32887: boolean;
static field_32888: boolean;
static field_32889: boolean;
static field_32890: boolean;
static field_32891: boolean;
static field_32892: boolean;
static field_38347: boolean;
static field_32893: boolean;
static POI_RANGE: number;
static BRAIN_RANGE: number;
static TARGET_ENTITY_RANGE: number;
static DEFAULT_DRAWN_STRING_SIZE: number;
static WHITE: number;
static YELLOW: number;
static AQUA: number;
static GREEN: number;
static GRAY: number;
static PINK: number;
static RED: number;
static ORANGE: number;
}

//net.minecraft.util.JsonSerializableType
class JsonSerializableType extends JObject{
 getJsonSerializer(): JsonSerializer;
}

//net.minecraft.world.level.storage.SaveVersionInfo
class SaveVersionInfo extends JObject{
 getVersion(): SaveVersion;
 getLastPlayed(): long;
 getVersionName(): string;
 isStable(): boolean;
 getLevelFormatVersion(): number;
}
class Static_SaveVersionInfo {
static fromDynamic(dynamic: Dynamic): SaveVersionInfo;
}

//net.minecraft.predicate.entity.PlayerPredicate
class PlayerPredicate extends JObject, TypeSpecificPredicate{
 test(entity: Entity,world: ServerWorld,pos: Vec3d): boolean;
 getDeserializer(): TypeSpecificPredicate_Deserializer;
 typeSpecificToJson(): JsonObject;
}
class Static_PlayerPredicate {
static getStatId(stat: Stat): Identifier;
static criterionFromJson(json: JsonElement): PlayerPredicate_AdvancementPredicate;
static method_22498(jsonArray: JsonArray,stat: Stat,intRange: NumberRange_IntRange): void;
static method_37250(hitEntity: Entity): boolean;
static method_22502(object2BooleanMap: Object2BooleanMap,entry: Map_Entry): void;
static method_22501(jsonObject: JsonObject,id: Identifier,advancementPredicate: PlayerPredicate_AdvancementPredicate): void;
static method_22500(jsonObject: JsonObject,id: Identifier,boolean_: Boolean): void;
static getStat(type: StatType,id: Identifier): Stat;
static fromJson(json: JsonObject): PlayerPredicate;
static LOOKING_AT_DISTANCE: number;
}

//net.minecraft.world.gen.chunk.placement.SpreadType$1


//net.minecraft.recipe.SpecialRecipeSerializer$Factory
interface SpecialRecipeSerializer_Factory extends JObject{
 create(id: Identifier,category: CraftingRecipeCategory): CraftingRecipe;
}

//net.minecraft.unused.packageinfo.PackageInfo6074
interface PackageInfo6074 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6073
interface PackageInfo6073 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6072
interface PackageInfo6072 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6071
interface PackageInfo6071 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6078
interface PackageInfo6078 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6077
interface PackageInfo6077 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6076
interface PackageInfo6076 extends JObject{
}

//net.minecraft.client.particle.ParticleFactory$BlockLeakParticleFactory
interface ParticleFactory_BlockLeakParticleFactory extends JObject{
 createParticle(parameters: ParticleEffect,world: ClientWorld,x: number,y: number,z: number,velocityX: number,velocityY: number,velocityZ: number): SpriteBillboardParticle;
}

//net.minecraft.world.event.EntityPositionSource
class EntityPositionSource extends JObject, PositionSource{
 getType(): PositionSourceType;
 getPos(world: World): Optional;
}
class Static_EntityPositionSource {
static method_42674(world: World,entityId: Either): Optional;
static method_42338(entityPositionSource: EntityPositionSource): Float;
static method_42675(world: World,uuid: UUID): Entity;
static method_42679(uuid: UUID,yOffset: Float): EntityPositionSource;
static method_42676(entityId: Either): Integer;
static method_42677(entityIdx: Integer): UUID;
static method_42678(uuid: UUID): Integer;
static method_42682(entityId: Either): UUID;
static method_32932(instance: RecordCodecBuilder_Instance): App;
static CODEC: Codec;
}

//net.minecraft.server.PlayerManager
class PlayerManager extends JObject{
 remove(player: ServerPlayerEntity): void;
 broadcast(message: Text,overlay: boolean): void;
 broadcast(message: SignedMessage,sender: ServerPlayerEntity,params: MessageType_Parameters): void;
 broadcast(message: SignedMessage,source: ServerCommandSource,params: MessageType_Parameters): void;
 broadcast(message: Text,playerMessageFactory: Function,overlay: boolean): void;
 getUserData(): NbtCompound;
 getPlayerList(): List;
 getAdvancementTracker(player: ServerPlayerEntity): PlayerAdvancementTracker;
 getSimulationDistance(): number;
 canBypassPlayerLimit(profile: GameProfile): boolean;
 disconnectAllPlayers(): void;
 getCurrentPlayerCount(): number;
 onDataPacksReloaded(): void;
 removeFromOperators(profile: GameProfile): void;
 getWhitelistedNames(): String[];
 setWhitelistEnabled(whitelistEnabled: boolean): void;
 updatePlayerLatency(): void;
 getMaxPlayerCount(): number;
 sendWorldInfo(player: ServerPlayerEntity,world: ServerWorld): void;
 checkCanJoin(address: SocketAddress,profile: GameProfile): Text;
 setMainWorld(world: ServerWorld): void;
 isWhitelisted(profile: GameProfile): boolean;
 sendToDimension(packet: Packet,dimension: RegistryKey): void;
 sendToTeam(source: PlayerEntity,message: Text): void;
 setCheatsAllowed(cheatsAllowed: boolean): void;
 getIpBanList(): BannedIpList;
 reloadWhitelist(): void;
 saveAllPlayerData(): void;
 getOpList(): OperatorList;
 sendToAround(player: PlayerEntity,x: number,y: number,z: number,distance: number,worldKey: RegistryKey,packet: Packet): void;
 sendToOtherTeams(source: PlayerEntity,message: Text): void;
 getOpNames(): String[];
 getPlayersByIp(ip: string): List;
 getUserBanList(): BannedPlayerList;
 sendPlayerStatus(player: ServerPlayerEntity): void;
 isWhitelistEnabled(): boolean;
 getWhitelist(): Whitelist;
 createStatHandler(player: PlayerEntity): ServerStatHandler;
 areCheatsAllowed(): boolean;
 createPlayer(profile: GameProfile): ServerPlayerEntity;
 getPlayerNames(): String[];
 isOperator(profile: GameProfile): boolean;
 respawnPlayer(player: ServerPlayerEntity,alive: boolean): ServerPlayerEntity;
 sendToAll(packet: Packet): void;
 getViewDistance(): number;
 sendCommandTree(player: ServerPlayerEntity): void;
 setSimulationDistance(simulationDistance: number): void;
 loadPlayerData(player: ServerPlayerEntity): NbtCompound;
 getServer(): MinecraftServer;
 getPlayer(uuid: UUID): ServerPlayerEntity;
 getPlayer(name: string): ServerPlayerEntity;
 setViewDistance(viewDistance: number): void;
 onPlayerConnect(connection: ClientConnection,player: ServerPlayerEntity): void;
 addToOperators(profile: GameProfile): void;
}
class Static_PlayerManager {
static method_43670(serverPlayerEntity: ServerPlayerEntity,properties: MinecraftServer_ServerResourcePackProperties): void;
static method_31441(entity: Entity): void;
static method_18241(serverWorld: ServerWorld,vehicle: Entity): Entity;
static method_43511(text: Text,player: ServerPlayerEntity): Text;
static BANNED_PLAYERS_FILE: File;
static BANNED_IPS_FILE: File;
static OPERATORS_FILE: File;
static WHITELIST_FILE: File;
static FILTERED_FULL_TEXT: Text;
static LOGGER: Logger;
static LATENCY_UPDATE_INTERVAL: number;
static DATE_FORMATTER: SimpleDateFormat;
static field_29791: boolean;
}

//net.minecraft.server.command.GameRuleCommand
class GameRuleCommand extends JObject{
}
class Static_GameRuleCommand {
static register(dispatcher: CommandDispatcher): void;
static method_13393(source: ServerCommandSource): boolean;
static method_51990(key: GameRules_Key,rule: GameRules_Rule): Text;
static method_51989(key: GameRules_Key,rule: GameRules_Rule): Text;
static executeQuery(source: ServerCommandSource,key: GameRules_Key): number;
static executeSet(context: CommandContext,key: GameRules_Key): number;
}

//net.minecraft.entity.ai.brain.task.HideWhenBellRingsTask
class HideWhenBellRingsTask extends JObject{
}
class Static_HideWhenBellRingsTask {
static create(): Task;
static method_47034(world: ServerWorld,entity: LivingEntity,time: long): boolean;
static method_47035(context: TaskTriggerer_TaskContext): App;
static method_47036(heardBellTime: MemoryQueryResult): TaskRunnable;
}

//net.minecraft.data.client.Model$JsonFactory
interface Model_JsonFactory extends JObject{
 create(id: Identifier,textures: Map): JsonObject;
}

//net.minecraft.client.resource.VideoWarningManager$WarningPatternLoader
class VideoWarningManager_WarningPatternLoader extends JObject{
}
class Static_VideoWarningManager_WarningPatternLoader {
static buildWarning(warningPattern: List,info: string): string;
}

//net.minecraft.unused.packageinfo.PackageInfo6070
interface PackageInfo6070 extends JObject{
}

//net.minecraft.util.MetricsData
class MetricsData extends JObject{
 average(offset: number): long;
 wrapIndex(index: number): number;
 method_34913(offset: number,i: number): number;
 pushSample(time: long): void;
 getCurrentIndex(): number;
 getSamples(): long[];
 getStartIndex(): number;
 scaleSample(sample: long,destScale: number,srcScale: number): number;
}
class Static_MetricsData {
static SIZE: number;
}

//net.minecraft.world.gen.feature.RandomBooleanFeatureConfig
class RandomBooleanFeatureConfig extends JObject, FeatureConfig{
 getDecoratedFeatures(): Stream;
 featureTrue: RegistryEntry;
 featureFalse: RegistryEntry;
}
class Static_RandomBooleanFeatureConfig {
static method_28750(instance: RecordCodecBuilder_Instance): App;
static method_28749(config: RandomBooleanFeatureConfig): RegistryEntry;
static method_28751(config: RandomBooleanFeatureConfig): RegistryEntry;
static CODEC: Codec;
}

//net.minecraft.network.NetworkState$PacketHandlerInitializer
class NetworkState_PacketHandlerInitializer extends JObject{
 setup(side: NetworkSide,handler: NetworkState_PacketHandler): NetworkState_PacketHandlerInitializer;
}

//net.minecraft.client.texture.atlas.UnstitchAtlasSource
class UnstitchAtlasSource extends JObject, AtlasSource{
 load(resourceManager: ResourceManager,regions: AtlasSource_SpriteRegions): void;
 getType(): AtlasSourceType;
}
class Static_UnstitchAtlasSource {
static method_47692(instance: RecordCodecBuilder_Instance): App;
static method_47696(unstitchAtlasSource: UnstitchAtlasSource): Identifier;
static method_47695(unstitchAtlasSource: UnstitchAtlasSource): List;
static method_47693(unstitchAtlasSource: UnstitchAtlasSource): Double;
static method_47694(unstitchAtlasSource: UnstitchAtlasSource): Double;
static LOGGER: Logger;
static CODEC: Codec;
}

//net.minecraft.structure.MineshaftGenerator
class MineshaftGenerator extends JObject{
}
class Static_MineshaftGenerator {
static pieceGenerator(start: StructurePiece,holder: StructurePiecesHolder,random: Random,x: number,y: number,z: number,orientation: Direction,chainLength: number): MineshaftGenerator_MineshaftPart;
static pickPiece(holder: StructurePiecesHolder,random: Random,x: number,y: number,z: number,orientation: Direction,chainLength: number,type: MineshaftStructure_Type): MineshaftGenerator_MineshaftPart;
static LOGGER: Logger;
static field_31551: number;
static field_31552: number;
static field_31553: number;
static field_31554: number;
static field_31555: number;
static field_31556: number;
static field_34729: number;
}

//net.minecraft.unused.packageinfo.PackageInfo6085
interface PackageInfo6085 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6084
interface PackageInfo6084 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6083
interface PackageInfo6083 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6082
interface PackageInfo6082 extends JObject{
}

//net.minecraft.item.FoodComponent
class FoodComponent extends JObject{
 getHunger(): number;
 isSnack(): boolean;
 isMeat(): boolean;
 isAlwaysEdible(): boolean;
 getStatusEffects(): List;
 getSaturationModifier(): number;
}

//net.minecraft.structure.WoodlandMansionGenerator$RoomPool
class WoodlandMansionGenerator_RoomPool extends JObject{
 getMediumSecretRoom(random: Random): string;
 getMediumGenericRoom(random: Random,staircase: boolean): string;
 getMediumFunctionalRoom(random: Random,staircase: boolean): string;
 getSmallRoom(random: Random): string;
 getSmallSecretRoom(random: Random): string;
 getBigSecretRoom(random: Random): string;
 getBigRoom(random: Random): string;
}

//net.minecraft.client.model.TextureDimensions
class TextureDimensions extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6086
interface PackageInfo6086 extends JObject{
}

//net.minecraft.util.Urls
class Urls extends JObject{
}
class Static_Urls {
static getExtendJavaRealmsUrl(subscriptionId: string,profileId: string,trial: boolean): string;
static getExtendJavaRealmsUrl(subscriptionId: string,profileId: string): string;
static GDPR: string;
static EULA: string;
static JAVA_ATTRIBUTION: string;
static JAVA_LICENSES: string;
static BUY_JAVA: string;
static JAVA_ACCOUNT_SETTINGS: string;
static SNAPSHOT_FEEDBACK: string;
static JAVA_FEEDBACK: string;
static SNAPSHOT_BUGS: string;
static JAVA_ACCESSIBILITY: string;
static ABOUT_JAVA_REPORTING: string;
static JAVA_MODERATION: string;
static JAVA_BLOCKING: string;
static MINECRAFT_SYMLINKS: string;
static JAVA_REALMS_TRIAL: string;
static BUY_JAVA_REALMS: string;
static REALMS_TERMS: string;
static REALMS_CONTENT_CREATOR: string;
static UPDATE_MOJANG_ACCOUNT: string;
}

//net.minecraft.world.chunk.ChunkSection
class ChunkSection extends JObject{
 lock(): void;
 isEmpty(): boolean;
 unlock(): void;
 toPacket(buf: PacketByteBuf): void;
 hasRandomBlockTicks(): boolean;
 getBlockStateContainer(): PalettedContainer;
 hasRandomFluidTicks(): boolean;
 populateBiomes(biomeSupplier: BiomeSupplier,sampler: MultiNoiseUtil_MultiNoiseSampler,x: number,y: number,z: number): void;
 getPacketSize(): number;
 getBiomeContainer(): ReadableContainer;
 calculateCounts(): void;
 readDataPacket(buf: PacketByteBuf): void;
 readBiomePacket(buf: PacketByteBuf): void;
 hasAny(predicate: Predicate): boolean;
 hasRandomTicks(): boolean;
 getBiome(x: number,y: number,z: number): RegistryEntry;
 getFluidState(x: number,y: number,z: number): FluidState;
 getBlockState(x: number,y: number,z: number): BlockState;
 setBlockState(x: number,y: number,z: number,state: BlockState): BlockState;
 setBlockState(x: number,y: number,z: number,state: BlockState,lock: boolean): BlockState;
}
class Static_ChunkSection {
static field_31406: number;
static field_31407: number;
static field_31408: number;
static field_34555: number;
}

//net.minecraft.unused.packageinfo.PackageInfo6081
interface PackageInfo6081 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6080
interface PackageInfo6080 extends JObject{
}

//net.minecraft.world.event.GameEvent$Message
class GameEvent_Message extends JObject, Comparable{
 compareTo(other: Object): number;
 compareTo(message: GameEvent_Message): number;
 getListener(): GameEventListener;
 getEmitterPos(): Vec3d;
 getEvent(): GameEvent;
 getEmitter(): GameEvent_Emitter;
}

//net.minecraft.util.math.MathHelper
class MathHelper extends JObject{
}
class Static_MathHelper {
static hashCode(x: number,y: number,z: number): long;
static hashCode(vec: Vec3i): long;
static abs(value: number): number;
static abs(value: number): number;
static sin(value: number): number;
static cos(value: number): number;
static atan2(y: number,x: number): number;
static sqrt(value: number): number;
static floor(value: number): number;
static floor(value: number): number;
static ceil(value: number): number;
static ceil(value: number): number;
static wrap(value: number,maxDeviation: number): number;
static map(value: number,oldStart: number,oldEnd: number,newStart: number,newEnd: number): number;
static map(value: number,oldStart: number,oldEnd: number,newStart: number,newEnd: number): number;
static stream(seed: number,lowerBound: number,upperBound: number,steps: number): IntStream;
static stream(seed: number,lowerBound: number,upperBound: number): IntStream;
static parseInt(string: string,fallback: number): number;
static floorMod(dividend: number,divisor: number): number;
static floorMod(dividend: number,divisor: number): number;
static floorMod(dividend: number,divisor: number): number;
static nextDouble(random: Random,min: number,max: number): number;
static floorDiv(dividend: number,divisor: number): number;
static hypot(a: number,b: number): number;
static magnitude(a: number,b: number,c: number): number;
static sign(value: number): number;
static binarySearch(min: number,max: number,predicate: IntPredicate): number;
static nextInt(random: Random,min: number,max: number): number;
static nextFloat(random: Random,min: number,max: number): number;
static nextGaussian(random: Random,mean: number,deviation: number): number;
static square(n: number): number;
static square(n: number): number;
static square(n: long): long;
static square(n: number): number;
static fractionalPart(value: number): number;
static fractionalPart(value: number): number;
static subtractAngles(start: number,end: number): number;
static floorLog2(value: number): number;
static isMultipleOf(a: number,b: number): boolean;
static perlinFadeDerivative(value: number): number;
static roundDownToMultiple(a: number,b: number): number;
static stepUnwrappedAngleTowards(from: number,to: number,step: number): number;
static smallestEncompassingPowerOfTwo(value: number): number;
static approximatelyEquals(a: number,b: number): boolean;
static approximatelyEquals(a: number,b: number): boolean;
static lerp3(deltaX: number,deltaY: number,deltaZ: number,x0y0z0: number,x1y0z0: number,x0y1z0: number,x1y1z0: number,x0y0z1: number,x1y0z1: number,x0y1z1: number,x1y1z1: number): number;
static lerp2(deltaX: number,deltaY: number,x0y0: number,x1y0: number,x0y1: number,x1y1: number): number;
static perlinFade(value: number): number;
static absMax(a: number,b: number): number;
static lfloor(value: number): long;
static randomUuid(): UUID;
static randomUuid(random: Random): UUID;
static method_34945(origin: Vec3d,direction: Vec3d,box: Box): boolean;
static inverseSqrt(x: number): number;
static inverseSqrt(x: number): number;
static isPowerOfTwo(value: number): boolean;
static angleBetween(first: number,second: number): number;
static idealHash(value: number): number;
static packRgb(r: number,g: number,b: number): number;
static stepTowards(from: number,to: number,step: number): number;
static lerpAngleDegrees(delta: number,start: number,end: number): number;
static getLerpProgress(value: number,start: number,end: number): number;
static getLerpProgress(value: number,start: number,end: number): number;
static method_42118(j: number,k: number,l: number,m: number,i: number): number;
static method_42119(j: number,k: number,l: number,i: number): boolean;
static method_34957(d: number): number;
static roundUpToMultiple(value: number,divisor: number): number;
static squaredHypot(a: number,b: number): number;
static method_15376(sineTable: number[]): void;
static fastInverseCbrt(x: number): number;
static wrapDegrees(degrees: number): number;
static wrapDegrees(degrees: number): number;
static wrapDegrees(degrees: number): number;
static hsvToRgb(hue: number,saturation: number,value: number): number;
static clampAngle(value: number,mean: number,delta: number): number;
static catmullRom(delta: number,p0: number,p1: number,p2: number,p3: number): number;
static clamp(value: number,min: number,max: number): number;
static clamp(value: number,min: number,max: number): number;
static clamp(value: number,min: number,max: number): number;
static lerp(delta: number,start: number,end: number): number;
static lerp(delta: number,start: number,end: number): number;
static lerp(delta: number,start: number,end: number): number;
static nextBetween(random: Random,min: number,max: number): number;
static nextBetween(random: Random,min: number,max: number): number;
static ceilDiv(a: number,b: number): number;
static clampedLerp(start: number,end: number,delta: number): number;
static clampedLerp(start: number,end: number,delta: number): number;
static clampedMap(value: number,oldStart: number,oldEnd: number,newStart: number,newEnd: number): number;
static clampedMap(value: number,oldStart: number,oldEnd: number,newStart: number,newEnd: number): number;
static squaredMagnitude(a: number,b: number,c: number): number;
static fastInverseSqrt(x: number): number;
static ceilLog2(value: number): number;
static field_29852: long;
static HALF_PI_RADIANS_SINE_TABLE_INDEX: long;
static field_29854: long;
static field_29855: long;
static PI: number;
static HALF_PI: number;
static TAU: number;
static RADIANS_PER_DEGREE: number;
static DEGREES_PER_RADIAN: number;
static EPSILON: number;
static SQUARE_ROOT_OF_TWO: number;
static DEGREES_TO_SINE_TABLE_INDEX: number;
static SINE_TABLE: number[];
static RANDOM: Random;
static MULTIPLY_DE_BRUIJN_BIT_POSITION: number[];
static ARCSINE_MACLAURIN_3: number;
static field_29858: number;
static ARCSINE_TABLE_LENGTH: number;
static ROUNDER_256THS: number;
static ARCSINE_TABLE: number[];
static COSINE_OF_ARCSINE_TABLE: number[];
}

//net.minecraft.client.particle.CloudParticle$SneezeFactory
class CloudParticle_SneezeFactory extends JObject, ParticleFactory{
 createParticle(defaultParticleType: DefaultParticleType,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
 createParticle(particleEffect: ParticleEffect,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
}

//net.minecraft.text.TextVisitFactory
class TextVisitFactory extends JObject{
}
class Static_TextVisitFactory {
static visitRegularCharacter(style: Style,visitor: CharacterVisitor,index: number,c: char): boolean;
static visitBackwards(text: string,style: Style,visitor: CharacterVisitor): boolean;
static visitForwards(text: string,style: Style,visitor: CharacterVisitor): boolean;
static validateSurrogates(text: string): string;
static visitFormatted(text: StringVisitable,style: Style,visitor: CharacterVisitor): boolean;
static visitFormatted(text: string,style: Style,visitor: CharacterVisitor): boolean;
static visitFormatted(text: string,startIndex: number,startingStyle: Style,resetStyle: Style,visitor: CharacterVisitor): boolean;
static visitFormatted(text: string,startIndex: number,style: Style,visitor: CharacterVisitor): boolean;
static method_27470(characterVisitor: CharacterVisitor,stylex: Style,string: string): Optional;
static method_27475(stringBuilder: StringBuilder,index: number,style: Style,codePoint: number): boolean;
static method_31401(stringBuilder: StringBuilder,index: number,style: Style,codePoint: number): boolean;
static removeFormattingCodes(text: StringVisitable): string;
static REPLACEMENT_CHARACTER: char;
static VISIT_TERMINATED: Optional;
}

//net.minecraft.client.particle.WaterSuspendParticle$SporeBlossomAirFactory
class WaterSuspendParticle_SporeBlossomAirFactory extends JObject, ParticleFactory{
 createParticle(defaultParticleType: DefaultParticleType,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
 createParticle(particleEffect: ParticleEffect,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
}

//net.minecraft.recipe.RecipeType
interface RecipeType extends JObject{
}
class Static_RecipeType {
static register(id: string): RecipeType;
static CRAFTING: RecipeType;
static SMELTING: RecipeType;
static BLASTING: RecipeType;
static SMOKING: RecipeType;
static CAMPFIRE_COOKING: RecipeType;
static STONECUTTING: RecipeType;
static SMITHING: RecipeType;
}

//net.minecraft.client.gl.PostEffectPass
class PostEffectPass extends JObject, AutoCloseable{
 getName(): string;
 close(): void;
 render(time: number): void;
 addAuxTarget(name: string,valueSupplier: IntSupplier,width: number,height: number): void;
 getProgram(): JsonEffectShaderProgram;
 setProjectionMatrix(projectionMatrix: Matrix4f): void;
 input: Framebuffer;
 output: Framebuffer;
}

//net.minecraft.client.render.entity.LlamaEntityRenderer$1


//net.minecraft.world.chunk.light.LevelPropagator
class LevelPropagator extends JObject{
 removePendingUpdateIf(predicate: LongPredicate): void;
 getPendingUpdateCount(): number;
}
class Static_LevelPropagator {
static method_24207(longPredicate: LongPredicate,longList: LongList,l: long): void;
static field_43397: long;
static MAX_LEVEL: number;
}

//net.minecraft.data.DataOutput
class DataOutput extends JObject{
 getPath(): Path;
 resolvePath(outputType: DataOutput_OutputType): Path;
 getResolver(outputType: DataOutput_OutputType,directoryName: string): DataOutput_PathResolver;
}

//net.minecraft.unused.packageinfo.PackageInfo6052
interface PackageInfo6052 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6051
interface PackageInfo6051 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6050
interface PackageInfo6050 extends JObject{
}

//net.minecraft.world.gen.surfacebuilder.MaterialRules$LazyAbstractPredicate
class MaterialRules_LazyAbstractPredicate extends JObject, MaterialRules_BooleanSupplier{
 get(): boolean;
}

//net.minecraft.unused.packageinfo.PackageInfo6056
interface PackageInfo6056 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6055
interface PackageInfo6055 extends JObject{
}

//net.minecraft.world.chunk.IdListPalette
class IdListPalette extends JObject, Palette{
 index(object: Object): number;
 get(id: number): Object;
 copy(): Palette;
 getSize(): number;
 getPacketSize(): number;
 readPacket(buf: PacketByteBuf): void;
 hasAny(predicate: Predicate): boolean;
 writePacket(buf: PacketByteBuf): void;
}
class Static_IdListPalette {
static create(bits: number,idList: IndexedIterable,listener: PaletteResizeListener,list: List): Palette;
}

//net.minecraft.client.render.entity.animation.AnimationHelper
class AnimationHelper extends JObject{
}
class Static_AnimationHelper {
static createRotationalVector(x: number,y: number,z: number): Vector3f;
static createTranslationalVector(x: number,y: number,z: number): Vector3f;
static createScalingVector(x: number,y: number,z: number): Vector3f;
static getRunningSeconds(animation: Animation,runningTime: long): number;
static animate(model: SinglePartEntityModel,animation: Animation,runningTime: long,scale: number,tempVec: Vector3f): void;
static method_41828(list: List,f: number,vector3f: Vector3f,g: number,part: ModelPart): void;
static method_41825(f: number,keyframes: Keyframe[],index: number): boolean;
static method_41824(f: number,vector3f: Vector3f,g: number,modelPart: ModelPart,transformation: Transformation): void;
}

//net.minecraft.client.resource.ServerResourcePackProvider
class ServerResourcePackProvider extends JObject, ResourcePackProvider{
 clear(): CompletableFuture;
 register(profileAdder: Consumer): void;
 download(url: URL,packSha1: string,closeAfterDownload: boolean): CompletableFuture;
 loadServerPack(session: LevelStorage_Session): CompletableFuture;
 loadServerPack(packZip: File,packSource: ResourcePackSource): CompletableFuture;
}
class Static_ServerResourcePackProvider {
static delete(file: File): void;
static method_4639(minecraftClient: MinecraftClient,progressScreen: ProgressScreen): void;
static getDownloadHeaders(): Map;
static method_4637(file: File,name: string): ResourcePack;
static method_44602(throwable: Throwable,file: File,void_: Void): void;
static method_36324(minecraftClient: MinecraftClient,confirmed: boolean): void;
static method_36323(minecraftClient: MinecraftClient,void_: Void): void;
static method_36438(bl: boolean,minecraftClient: MinecraftClient): void;
static LOGGER: Logger;
static SHA1_PATTERN: Pattern;
static MAX_FILE_SIZE: number;
static MAX_SAVED_PACKS: number;
static SERVER: string;
static SERVER_NAME_TEXT: Text;
static APPLYING_PACK_TEXT: Text;
}

//net.minecraft.client.render.debug.SupportingBlockDebugRenderer
class SupportingBlockDebugRenderer extends JObject, DebugRenderer_Renderer{
 render(matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,cameraX: number,cameraY: number,cameraZ: number): void;
}
class Static_SupportingBlockDebugRenderer {
static method_51793(): number;
}

//net.minecraft.entity.decoration.ItemFrameEntity$2


//net.minecraft.entity.ai.brain.task.CompositeTask
class CompositeTask extends JObject, Task{
 getName(): string;
 toString(): string;
 stop(world: ServerWorld,entity: LivingEntity,time: long): void;
 tick(world: ServerWorld,entity: LivingEntity,time: long): void;
 getStatus(): MultiTickTask_Status;
 tryStarting(world: ServerWorld,entity: LivingEntity,time: long): boolean;
}
class Static_CompositeTask {
static method_46929(task: Task): boolean;
static method_46926(serverWorld: ServerWorld,livingEntity: LivingEntity,l: long,task: Task): void;
static method_46927(task: Task): boolean;
static method_46923(serverWorld: ServerWorld,livingEntity: LivingEntity,l: long,task: Task): void;
static method_46925(task: Task): boolean;
static method_46928(task: Task): boolean;
}

//net.minecraft.client.gl.GlTimer
class GlTimer extends JObject{
 beginProfile(): void;
 endProfile(): GlTimer_Query;
}
class Static_GlTimer {
static getInstance(): Optional;
}

//net.minecraft.entity.decoration.ItemFrameEntity$1


//net.minecraft.client.search.SearchManager$Key
class SearchManager_Key extends JObject{
}

//net.minecraft.client.gui.widget.ButtonWidget$NarrationSupplier
interface ButtonWidget_NarrationSupplier extends JObject{
 createNarrationMessage(textSupplier: Supplier): MutableText;
}

//net.minecraft.network.message.MessageChain$Unpacker
interface MessageChain_Unpacker extends JObject{
 unpack(signature: MessageSignatureData,body: MessageBody): SignedMessage;
}
class Static_MessageChain_Unpacker {
static unsigned(uuid: UUID): MessageChain_Unpacker;
static method_46315(uUID: UUID,signature: MessageSignatureData,body: MessageBody): SignedMessage;
static method_46613(signature: MessageSignatureData,body: MessageBody): SignedMessage;
static NOT_INITIALIZED: MessageChain_Unpacker;
}

//net.minecraft.server.world.ThreadedAnvilChunkStorage$1


//net.minecraft.unused.packageinfo.PackageInfo6059
interface PackageInfo6059 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6058
interface PackageInfo6058 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6057
interface PackageInfo6057 extends JObject{
}

//net.minecraft.server.world.ThreadedAnvilChunkStorage$2


//net.minecraft.unused.packageinfo.PackageInfo6063
interface PackageInfo6063 extends JObject{
}

//net.minecraft.block.LecternBlock$1


//net.minecraft.entity.ai.brain.task.FindEntityTask
class FindEntityTask extends JObject{
}
class Static_FindEntityTask {
static create(type: EntityType,maxDistance: number,entityPredicate: Predicate,targetPredicate: Predicate,targetModule: MemoryModuleType,speed: number,completionRange: number): Task;
static create(type: EntityType,maxDistance: number,targetModule: MemoryModuleType,speed: number,completionRange: number): Task;
static method_18949(entity: LivingEntity): boolean;
static method_46958(entityType: EntityType,predicate: Predicate,entity: LivingEntity): boolean;
static method_18948(entity: LivingEntity): boolean;
static method_46963(memoryModuleType: MemoryModuleType,predicate: Predicate,predicate2: Predicate,i: number,f: number,j: number,context: TaskTriggerer_TaskContext): App;
static method_46961(taskContext: TaskTriggerer_TaskContext,predicate: Predicate,predicate2: Predicate,i: number,f: number,j: number,targetValue: MemoryQueryResult,lookTarget: MemoryQueryResult,walkTarget: MemoryQueryResult,visibleMobs: MemoryQueryResult): TaskRunnable;
static method_46959(livingEntity: LivingEntity,i: number,predicate: Predicate,target: LivingEntity): boolean;
static method_46960(taskContext: TaskTriggerer_TaskContext,memoryQueryResult: MemoryQueryResult,predicate: Predicate,predicate2: Predicate,i: number,memoryQueryResult2: MemoryQueryResult,memoryQueryResult3: MemoryQueryResult,memoryQueryResult4: MemoryQueryResult,f: number,j: number,world: ServerWorld,entity: LivingEntity,time: long): boolean;
static method_46962(memoryQueryResult: MemoryQueryResult,memoryQueryResult2: MemoryQueryResult,memoryQueryResult3: MemoryQueryResult,f: number,i: number,target: LivingEntity): void;
}

//net.minecraft.unused.packageinfo.PackageInfo6062
interface PackageInfo6062 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6061
interface PackageInfo6061 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6060
interface PackageInfo6060 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6066
interface PackageInfo6066 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6065
interface PackageInfo6065 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6064
interface PackageInfo6064 extends JObject{
}

//net.minecraft.client.gui.screen.narration.ScreenNarrator$1


//net.minecraft.client.particle.ExplosionSmokeParticle$Factory
class ExplosionSmokeParticle_Factory extends JObject, ParticleFactory{
 createParticle(defaultParticleType: DefaultParticleType,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
 createParticle(particleEffect: ParticleEffect,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
}

//net.minecraft.world.World$2


//net.minecraft.entity.data.DataTracker$Entry
class DataTracker_Entry extends JObject{
 get(): Object;
 set(value: Object): void;
 getData(): TrackedData;
 isDirty(): boolean;
 toSerialized(): DataTracker_SerializedEntry;
 setDirty(dirty: boolean): void;
 isUnchanged(): boolean;
}

//net.minecraft.client.gui.hud.SpectatorHud
class SpectatorHud extends JObject, SpectatorMenuCloseCallback{
 isOpen(): boolean;
 close(menu: SpectatorMenu): void;
 render(context: DrawContext): void;
 renderSpectatorMenu(context: DrawContext): void;
 selectSlot(slot: number): void;
 cycleSlot(offset: number): void;
 useSelectedCommand(): void;
}
class Static_SpectatorHud {
static WIDGETS_TEXTURE: Identifier;
static SPECTATOR_TEXTURE: Identifier;
static FADE_OUT_DELAY: long;
static FADE_OUT_DURATION: long;
}

//net.minecraft.enchantment.EnchantmentHelper
class EnchantmentHelper extends JObject{
}
class Static_EnchantmentHelper {
static get(stack: ItemStack): Map;
static set(enchantments: Map,stack: ItemStack): void;
static getLevel(enchantment: Enchantment,stack: ItemStack): number;
static enchant(random: Random,target: ItemStack,level: number,treasureAllowed: boolean): ItemStack;
static isCompatible(existing: Collection,candidate: Enchantment): boolean;
static getSweepingMultiplier(entity: LivingEntity): number;
static chooseEquipmentWith(enchantment: Enchantment,entity: LivingEntity): Map_Entry;
static chooseEquipmentWith(enchantment: Enchantment,entity: LivingEntity,condition: Predicate): Map_Entry;
static getSwiftSneakSpeedBoost(entity: LivingEntity): number;
static calculateRequiredExperienceLevel(random: Random,slotIndex: number,bookshelfCount: number,stack: ItemStack): number;
static generateEnchantments(random: Random,stack: ItemStack,level: number,treasureAllowed: boolean): List;
static getProtectionAmount(equipment: Iterable,source: DamageSource): number;
static createNbt(id: Identifier,lvl: number): NbtCompound;
static getLooting(entity: LivingEntity): number;
static getAttackDamage(stack: ItemStack,group: EntityGroup): number;
static getIdFromNbt(nbt: NbtCompound): Identifier;
static getLevelFromNbt(nbt: NbtCompound): number;
static getEnchantmentId(enchantment: Enchantment): Identifier;
static fromNbt(list: NbtList): Map;
static method_17883(consumer: EnchantmentHelper_Consumer,nbtCompound: NbtCompound,enchantment: Enchantment): void;
static getEquipmentLevel(enchantment: Enchantment,entity: LivingEntity): number;
static forEachEnchantment(consumer: EnchantmentHelper_Consumer,stack: ItemStack): void;
static forEachEnchantment(consumer: EnchantmentHelper_Consumer,stacks: Iterable): void;
static method_8212(mutableInt: MutableInt,damageSource: DamageSource,enchantment: Enchantment,level: number): void;
static onUserDamaged(user: LivingEntity,attacker: Entity): void;
static writeLevelToNbt(nbt: NbtCompound,lvl: number): void;
static method_17884(map: Map,nbtCompound: NbtCompound,enchantment: Enchantment): void;
static method_8208(mutableFloat: MutableFloat,entityGroup: EntityGroup,enchantment: Enchantment,level: number): void;
static getRespiration(entity: LivingEntity): number;
static getDepthStrider(entity: LivingEntity): number;
static getEfficiency(entity: LivingEntity): number;
static getLuckOfTheSea(stack: ItemStack): number;
static hasFrostWalker(entity: LivingEntity): boolean;
static onTargetDamaged(user: LivingEntity,target: Entity): void;
static hasBindingCurse(stack: ItemStack): boolean;
static hasVanishingCurse(stack: ItemStack): boolean;
static hasSoulSpeed(entity: LivingEntity): boolean;
static hasSilkTouch(stack: ItemStack): boolean;
static hasAquaAffinity(entity: LivingEntity): boolean;
static method_8198(livingEntity: LivingEntity,entity: Entity,enchantment: Enchantment,level: number): void;
static getLure(stack: ItemStack): number;
static method_8207(livingEntity: LivingEntity,entity: Entity,enchantment: Enchantment,level: number): void;
static getKnockback(entity: LivingEntity): number;
static getFireAspect(entity: LivingEntity): number;
static getLoyalty(stack: ItemStack): number;
static removeConflicts(possibleEntries: List,pickedEntry: EnchantmentLevelEntry): void;
static hasChanneling(stack: ItemStack): boolean;
static method_24366(stack: ItemStack): boolean;
static getRiptide(stack: ItemStack): number;
static getPossibleEntries(power: number,stack: ItemStack,treasureAllowed: boolean): List;
static ID_KEY: string;
static LEVEL_KEY: string;
static field_38222: number;
}

//net.minecraft.world.StructureWorldAccess
interface StructureWorldAccess extends JObject, ServerWorldAccess{
 getSeed(): long;
 setCurrentlyGeneratingStructureName(structureName: Supplier): void;
 isValidForSetBlock(pos: BlockPos): boolean;
}

//net.minecraft.client.realms.RealmsConnection
class RealmsConnection extends JObject{
 connect(server: RealmsServer,address: ServerAddress): void;
 abort(): void;
 tick(): void;
}
class Static_RealmsConnection {
static LOGGER: Logger;
}

//net.minecraft.client.util.telemetry.PropertyMap$Builder
class PropertyMap_Builder extends JObject{
 put(property: TelemetryEventProperty,value: Object): PropertyMap_Builder;
 putAll(map: PropertyMap): PropertyMap_Builder;
 build(): PropertyMap;
 putIfNonNull(property: TelemetryEventProperty,value: Object): PropertyMap_Builder;
}

//net.minecraft.client.render.model.json.ModelVariantMap$DeserializationContext
class ModelVariantMap_DeserializationContext extends JObject{
 getStateFactory(): StateManager;
 setStateFactory(stateFactory: StateManager): void;
}

//net.minecraft.unused.packageinfo.PackageInfo6069
interface PackageInfo6069 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6068
interface PackageInfo6068 extends JObject{
}

//net.minecraft.data.client.VariantSettings
class VariantSettings extends JObject{
}
class Static_VariantSettings {
static method_25831(rotation: VariantSettings_Rotation): JsonElement;
static method_25833(rotation: VariantSettings_Rotation): JsonElement;
static method_25832(id: Identifier): JsonElement;
static X: VariantSetting;
static Y: VariantSetting;
static MODEL: VariantSetting;
static UVLOCK: VariantSetting;
static WEIGHT: VariantSetting;
}

//net.minecraft.recipe.InputSlotFiller
class InputSlotFiller extends JObject, RecipeGridAligner{
 fillInputSlots(entity: ServerPlayerEntity,recipe: Recipe,craftAll: boolean): void;
 acceptAlignedInput(inputs: Iterator,slot: number,amount: number,gridX: number,gridY: number): void;
}
class Static_InputSlotFiller {
static LOGGER: Logger;
}

//net.minecraft.structure.PillagerOutpostGenerator
class PillagerOutpostGenerator extends JObject{
}
class Static_PillagerOutpostGenerator {
static bootstrap(poolRegisterable: Registerable): void;
static STRUCTURE_POOLS: RegistryKey;
}

//net.minecraft.world.biome.source.util.MultiNoiseUtil$SearchTree$TreeNode
class MultiNoiseUtil_SearchTree_TreeNode extends JObject{
 toString(): string;
}

//net.minecraft.unused.packageinfo.PackageInfo6034
interface PackageInfo6034 extends JObject{
}

//net.minecraft.client.gl.WindowFramebuffer$Size
class WindowFramebuffer_Size extends JObject{
 equals(o: Object): boolean;
 toString(): string;
 hashCode(): number;
 width: number;
 height: number;
}
class Static_WindowFramebuffer_Size {
static findCompatible(width: number,height: number): List;
}

//net.minecraft.client.util.Untracker
class Untracker extends JObject{
}
class Static_Untracker {
static untrack(address: long): void;
static untrack(pointer: Pointer): void;
static method_1408(): MethodHandle;
static ALLOCATOR_UNTRACK: MethodHandle;
}

//net.minecraft.world.gen.stateprovider.BlockStateProviderType
class BlockStateProviderType extends JObject{
 getCodec(): Codec;
}
class Static_BlockStateProviderType {
static register(id: string,codec: Codec): BlockStateProviderType;
static SIMPLE_STATE_PROVIDER: BlockStateProviderType;
static WEIGHTED_STATE_PROVIDER: BlockStateProviderType;
static NOISE_THRESHOLD_PROVIDER: BlockStateProviderType;
static NOISE_PROVIDER: BlockStateProviderType;
static DUAL_NOISE_PROVIDER: BlockStateProviderType;
static ROTATED_BLOCK_PROVIDER: BlockStateProviderType;
static RANDOMIZED_INT_STATE_PROVIDER: BlockStateProviderType;
}

//net.minecraft.predicate.entity.PlayerPredicate$CompletedAdvancementPredicate
class PlayerPredicate_CompletedAdvancementPredicate extends JObject, PlayerPredicate_AdvancementPredicate{
 test(progress: Object): boolean;
 test(advancementProgress: AdvancementProgress): boolean;
 toJson(): JsonElement;
}

//net.minecraft.nbt.scanner.NbtScanner
interface NbtScanner extends JObject{
 start(rootType: NbtType): NbtScanner_Result;
 visitEnd(): NbtScanner_Result;
 visitInt(value: number): NbtScanner_Result;
 endNested(): NbtScanner_Result;
 startListItem(type: NbtType,index: number): NbtScanner_NestedResult;
 visitListMeta(entryType: NbtType,length: number): NbtScanner_Result;
 visitLong(value: long): NbtScanner_Result;
 visitString(value: string): NbtScanner_Result;
 visitDouble(value: number): NbtScanner_Result;
 visitShort(value: short): NbtScanner_Result;
 visitFloat(value: number): NbtScanner_Result;
 visitByte(value: byte): NbtScanner_Result;
 visitByteArray(value: byte[]): NbtScanner_Result;
 visitLongArray(value: long[]): NbtScanner_Result;
 visitIntArray(value: number[]): NbtScanner_Result;
 startSubNbt(type: NbtType,key: string): NbtScanner_NestedResult;
 visitSubNbtType(type: NbtType): NbtScanner_NestedResult;
}

//net.minecraft.world.BlockStateRaycastContext
class BlockStateRaycastContext extends JObject{
 getStart(): Vec3d;
 getEnd(): Vec3d;
 getStatePredicate(): Predicate;
}

//net.minecraft.client.gui.tooltip.FocusedTooltipPositioner
class FocusedTooltipPositioner extends JObject, TooltipPositioner{
 getPosition(screenWidth: number,screenHeight: number,x: number,y: number,width: number,height: number): Vector2ic;
}

//net.minecraft.util.profiling.jfr.event.ChunkGenerationEvent$Names
class ChunkGenerationEvent_Names extends JObject{
}
class Static_ChunkGenerationEvent_Names {
static WORLD_POS_X: string;
static WORLD_POS_Z: string;
static CHUNK_POS_X: string;
static CHUNK_POS_Z: string;
static STATUS: string;
static LEVEL: string;
}

//net.minecraft.server.dedicated.command.DeOpCommand
class DeOpCommand extends JObject{
}
class Static_DeOpCommand {
static register(dispatcher: CommandDispatcher): void;
static deop(source: ServerCommandSource,targets: Collection): number;
static method_13145(context: CommandContext,builder: SuggestionsBuilder): CompletableFuture;
static method_13146(context: CommandContext): number;
static method_51948(collection: Collection): Text;
static method_13147(source: ServerCommandSource): boolean;
static ALREADY_DEOPPED_EXCEPTION: SimpleCommandExceptionType;
}

//net.minecraft.unused.packageinfo.PackageInfo6038
interface PackageInfo6038 extends JObject{
}

//net.minecraft.resource.fs.ResourcePath$3


//net.minecraft.unused.packageinfo.PackageInfo6036
interface PackageInfo6036 extends JObject{
}

//net.minecraft.entity.ai.brain.task.WakeUpTask
class WakeUpTask extends JObject{
}
class Static_WakeUpTask {
static create(): Task;
static method_47205(world: ServerWorld,entity: LivingEntity,time: long): boolean;
static method_47206(context: TaskTriggerer_TaskContext): App;
}

//net.minecraft.unused.packageinfo.PackageInfo6039
interface PackageInfo6039 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6041
interface PackageInfo6041 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6040
interface PackageInfo6040 extends JObject{
}

//net.minecraft.loot.function.SetAttributesLootFunction$AttributeBuilder
class SetAttributesLootFunction_AttributeBuilder extends JObject{
 slot(slot: EquipmentSlot): SetAttributesLootFunction_AttributeBuilder;
 build(): SetAttributesLootFunction_Attribute;
 uuid(uuid: UUID): SetAttributesLootFunction_AttributeBuilder;
}

//net.minecraft.unused.packageinfo.PackageInfo7374
interface PackageInfo7374 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6043
interface PackageInfo6043 extends JObject{
}

//net.minecraft.client.tutorial.TutorialManager$Entry
class TutorialManager_Entry extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6042
interface PackageInfo6042 extends JObject{
}

//net.minecraft.entity.ai.brain.task.OpenDoorsTask
class OpenDoorsTask extends JObject{
}
class Static_OpenDoorsTask {
static create(): Task;
static method_46972(mutableObject: MutableObject,mutableInt: MutableInt,context: TaskTriggerer_TaskContext): App;
static cannotReachDoor(world: ServerWorld,entity: LivingEntity,doorPos: GlobalPos): boolean;
static pathToDoor(world: ServerWorld,entity: LivingEntity,lastNode: PathNode,currentNode: PathNode,doors: Set,otherMobs: Optional): void;
static method_46967(taskContext: TaskTriggerer_TaskContext,mutableObject: MutableObject,mutableInt: MutableInt,path: MemoryQueryResult,doorsToClose: MemoryQueryResult,mobs: MemoryQueryResult): TaskRunnable;
static method_46966(taskContext: TaskTriggerer_TaskContext,memoryQueryResult: MemoryQueryResult,memoryQueryResult2: MemoryQueryResult,mutableObject: MutableObject,mutableInt: MutableInt,memoryQueryResult3: MemoryQueryResult,world: ServerWorld,entity: LivingEntity,time: long): boolean;
static method_46974(state: AbstractBlock_AbstractBlockState): boolean;
static method_46973(state: AbstractBlock_AbstractBlockState): boolean;
static method_46968(globalPos: GlobalPos,memoryQueryResult: MemoryQueryResult): Set;
static method_30765(blockPos: BlockPos,mob: LivingEntity): boolean;
static method_46971(globalPos: GlobalPos,doorSet: Set): Set;
static method_40002(state: AbstractBlock_AbstractBlockState): boolean;
static hasReached(brain: Brain,pos: BlockPos): boolean;
static method_30764(livingEntity: LivingEntity,mob: LivingEntity): boolean;
static method_46970(blockPos: BlockPos,mob: LivingEntity): boolean;
static storePos(queryResult: MemoryQueryResult,doors: Optional,world: ServerWorld,pos: BlockPos): Optional;
static method_46965(serverWorld: ServerWorld,livingEntity: LivingEntity,pathNode: PathNode,pathNode2: PathNode,taskContext: TaskTriggerer_TaskContext,memoryQueryResult: MemoryQueryResult,doors: Set): void;
static hasOtherMobReachedDoor(entity: LivingEntity,pos: BlockPos,otherMobs: Optional): boolean;
static RUN_TIME: number;
static PATHING_DISTANCE: number;
static REACH_DISTANCE: number;
}

//net.minecraft.block.Oxidizable
interface Oxidizable extends JObject, Degradable{
 getDegradationChanceMultiplier(): number;
 getDegradationResult(state: BlockState): Optional;
}
class Static_Oxidizable {
static method_34733(blockState: BlockState,block: Block): BlockState;
static method_34736(blockState: BlockState,block: Block): BlockState;
static method_34740(): BiMap;
static method_34739(): BiMap;
static getDecreasedOxidationState(state: BlockState): Optional;
static getUnaffectedOxidationState(state: BlockState): BlockState;
static getUnaffectedOxidationBlock(block: Block): Block;
static getDecreasedOxidationBlock(block: Block): Optional;
static getIncreasedOxidationBlock(block: Block): Optional;
static OXIDATION_LEVEL_INCREASES: Supplier;
static OXIDATION_LEVEL_DECREASES: Supplier;
}

//net.minecraft.command.argument.serialize.ConstantArgumentSerializer$Properties
class ConstantArgumentSerializer_Properties extends JObject, ArgumentSerializer_ArgumentTypeProperties{
 createType(commandRegistryAccess: CommandRegistryAccess): ArgumentType;
 getSerializer(): ArgumentSerializer;
}

//net.minecraft.test.TestUtil
class TestUtil extends JObject{
}
class Static_TestUtil {
static startTest(test: GameTestState,pos: BlockPos,testManager: TestManager): void;
static clearDebugMarkers(world: ServerWorld): void;
static method_22223(serverWorld: ServerWorld,posx: BlockPos): boolean;
static runTestBatches(batches: Collection,pos: BlockPos,rotation: BlockRotation,world: ServerWorld,testManager: TestManager,sizeZ: number): Collection;
static method_23641(string: string,mutableInt: MutableInt,consumer: Consumer,consumer2: Consumer,testFunctionsx: List): GameTestBatch;
static method_33318(entry: Map_Entry): Stream;
static createBatches(testFunctions: Collection): Collection;
static clearTests(world: ServerWorld,pos: BlockPos,testManager: TestManager,radius: number): void;
static method_22215(serverWorld: ServerWorld,posx: BlockPos): void;
static runTestFunctions(testFunctions: Collection,pos: BlockPos,rotation: BlockRotation,world: ServerWorld,testManager: TestManager,sizeZ: number): Collection;
static MAX_BATCH_SIZE: number;
static field_33148: number;
static field_33149: number;
static field_33150: number;
static field_33151: number;
}

//net.minecraft.unused.packageinfo.PackageInfo6049
interface PackageInfo6049 extends JObject{
}

//net.minecraft.client.util.ClientPlayerTickable
interface ClientPlayerTickable extends JObject{
 tick(): void;
}

//net.minecraft.unused.packageinfo.PackageInfo6048
interface PackageInfo6048 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6047
interface PackageInfo6047 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6046
interface PackageInfo6046 extends JObject{
}

//net.minecraft.datafixer.fix.StructureSeparationDataFix$Information
class StructureSeparationDataFix_Information extends JObject{
 method_28288(dynamicOps: DynamicOps): Dynamic;
}
class Static_StructureSeparationDataFix_Information {
static method_28294(information: StructureSeparationDataFix_Information): Integer;
static method_28289(instance: RecordCodecBuilder_Instance): App;
static method_28292(information: StructureSeparationDataFix_Information): Integer;
static method_28293(information: StructureSeparationDataFix_Information): Integer;
static CODEC: Codec;
}

//net.minecraft.predicate.FluidPredicate
class FluidPredicate extends JObject{
 test(world: ServerWorld,pos: BlockPos): boolean;
 toJson(): JsonElement;
}
class Static_FluidPredicate {
static fromJson(json: JsonElement): FluidPredicate;
static ANY: FluidPredicate;
}

//net.minecraft.loot.condition.DamageSourcePropertiesLootCondition$Serializer
class DamageSourcePropertiesLootCondition_Serializer extends JObject, JsonSerializer{
 fromJson(json: JsonObject,context: JsonDeserializationContext): Object;
 fromJson(jsonObject: JsonObject,jsonDeserializationContext: JsonDeserializationContext): DamageSourcePropertiesLootCondition;
 toJson(jsonObject: JsonObject,damageSourcePropertiesLootCondition: DamageSourcePropertiesLootCondition,jsonSerializationContext: JsonSerializationContext): void;
 toJson(json: JsonObject,object: Object,context: JsonSerializationContext): void;
}

//net.minecraft.server.network.ServerPlayNetworkHandler$Interaction
interface ServerPlayNetworkHandler_Interaction extends JObject{
 run(player: ServerPlayerEntity,entity: Entity,hand: Hand): ActionResult;
}

//net.minecraft.client.render.VertexFormat
class VertexFormat extends JObject{
 equals(o: Object): boolean;
 toString(): string;
 hashCode(): number;
 getBuffer(): VertexBuffer;
 getElements(): ImmutableList;
 getVertexSizeByte(): number;
 setupState(): void;
 clearState(): void;
 getAttributeNames(): ImmutableList;
 getVertexSizeInteger(): number;
}

//net.minecraft.client.particle.FireworksSparkParticle$ExplosionFactory
class FireworksSparkParticle_ExplosionFactory extends JObject, ParticleFactory{
 createParticle(defaultParticleType: DefaultParticleType,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
 createParticle(particleEffect: ParticleEffect,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
}

//net.minecraft.test.TimedTask
class TimedTask extends JObject{
 duration: Long;
 task: Runnable;
}
class Static_TimedTask {
static create(task: Runnable): TimedTask;
static create(duration: long,task: Runnable): TimedTask;
}

//net.minecraft.text.TextContent$1


//net.minecraft.network.packet.c2s.play.ClickSlotC2SPacket
class ClickSlotC2SPacket extends JObject, Packet{
 apply(serverPlayPacketListener: ServerPlayPacketListener): void;
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
 getSlot(): number;
 getStack(): ItemStack;
 getModifiedStacks(): Int2ObjectMap;
 getSyncId(): number;
 getButton(): number;
 getActionType(): SlotActionType;
 getRevision(): number;
}
class Static_ClickSlotC2SPacket {
static method_34677(bufx: PacketByteBuf): Integer;
static MAX_MODIFIED_STACKS: number;
}

//net.minecraft.client.render.model.json.ModelTransformation
class ModelTransformation extends JObject{
 getTransformation(renderMode: ModelTransformationMode): Transformation;
 isTransformationDefined(renderMode: ModelTransformationMode): boolean;
 thirdPersonLeftHand: Transformation;
 thirdPersonRightHand: Transformation;
 firstPersonLeftHand: Transformation;
 firstPersonRightHand: Transformation;
 head: Transformation;
 gui: Transformation;
 ground: Transformation;
 fixed: Transformation;
}
class Static_ModelTransformation {
static NONE: ModelTransformation;
}

//net.minecraft.client.gui.widget.TabNavigationWidget$Builder
class TabNavigationWidget_Builder extends JObject{
 build(): TabNavigationWidget;
 tabs(tabs: Tab[]): TabNavigationWidget_Builder;
}

//net.minecraft.screen.NamedScreenHandlerFactory
interface NamedScreenHandlerFactory extends JObject, ScreenHandlerFactory, FabricScreenHandlerFactory{
 getDisplayName(): Text;
}

//net.minecraft.server.command.CommandManager$CommandParser
interface CommandManager_CommandParser extends JObject{
 parse(reader: StringReader): void;
}

//net.minecraft.client.render.model.SpriteAtlasManager
class SpriteAtlasManager extends JObject, AutoCloseable{
 close(): void;
 reload(resourceManager: ResourceManager,mipmapLevels: number,executor: Executor): Map;
 getAtlas(id: Identifier): SpriteAtlasTexture;
}
class Static_SpriteAtlasManager {
static method_45864(textureManager: TextureManager,entry: Map_Entry): SpriteAtlasManager_Atlas;
static method_45867(atlas: SpriteAtlasManager_Atlas,stitchResult: SpriteLoader_StitchResult): SpriteAtlasManager_AtlasPreparation;
static method_45863(resourceManager: ResourceManager,i: number,executor: Executor,entry: Map_Entry): CompletableFuture;
}

//net.minecraft.world.biome.source.BiomeAccess$Storage
interface BiomeAccess_Storage extends JObject{
 getBiomeForNoiseGen(biomeX: number,biomeY: number,biomeZ: number): RegistryEntry;
}

//net.minecraft.client.render.model.json.ModelElement
class ModelElement extends JObject{
 from: Vector3f;
 to: Vector3f;
 faces: Map;
 rotation: ModelRotation;
 shade: boolean;
}
class Static_ModelElement {
static field_32785: boolean;
static field_32786: number;
static field_32787: number;
}

//net.minecraft.structure.SnowyVillageData
class SnowyVillageData extends JObject{
}
class Static_SnowyVillageData {
static bootstrap(poolRegisterable: Registerable): void;
static TOWN_CENTERS_KEY: RegistryKey;
static TERMINATORS_KEY: RegistryKey;
}

//net.minecraft.data.client.When
interface When extends JObject, Supplier{
 validate(stateManager: StateManager): void;
}
class Static_When {
static create(): When_PropertyCondition;
static allOf(conditions: When[]): When;
static anyOf(conditions: When[]): When;
}

//net.minecraft.server.rcon.RconBase
class RconBase extends JObject, Runnable{
 start(): boolean;
 stop(): void;
 isRunning(): boolean;
}
class Static_RconBase {
static LOGGER: Logger;
static THREAD_COUNTER: AtomicInteger;
static field_29794: number;
}

//net.minecraft.server.command.StopSoundCommand
class StopSoundCommand extends JObject{
}
class Static_StopSoundCommand {
static register(dispatcher: CommandDispatcher): void;
static execute(source: ServerCommandSource,targets: Collection,category: SoundCategory,sound: Identifier): number;
static method_52086(): Text;
static method_13680(context: CommandContext): number;
static method_52089(soundCategory: SoundCategory): Text;
static method_13684(soundCategory: SoundCategory,context: CommandContext): number;
static method_13683(context: CommandContext): number;
static method_52087(identifier: Identifier): Text;
static method_13682(source: ServerCommandSource): boolean;
static method_13686(soundCategory: SoundCategory,context: CommandContext): number;
static method_52088(identifier: Identifier,soundCategory: SoundCategory): Text;
}

//net.minecraft.client.realms.task.LongRunningTask
class LongRunningTask extends JObject, Errable, Runnable{
 init(): void;
 error(errorMessage: Text): void;
 tick(): void;
 setTitle(title: Text): void;
 setScreen(screen: RealmsLongRunningMcoTaskScreen): void;
 aborted(): boolean;
 abortTask(): void;
}
class Static_LongRunningTask {
static setScreen(screen: Screen): void;
static pause(seconds: long): void;
static method_25288(minecraftClient: MinecraftClient,screen: Screen): void;
static MAX_RETRIES: number;
static LOGGER: Logger;
}

//net.minecraft.client.gui.hud.BossBarHud
class BossBarHud extends JObject{
 clear(): void;
 render(context: DrawContext): void;
 shouldDarkenSky(): boolean;
 shouldThickenFog(): boolean;
 handlePacket(packet: BossBarS2CPacket): void;
 shouldPlayDragonMusic(): boolean;
}
class Static_BossBarHud {
static BARS_TEXTURE: Identifier;
static WIDTH: number;
static HEIGHT: number;
static NOTCHED_BAR_OVERLAY_V: number;
}

//net.minecraft.client.font.UnihexFont$BitmapGlyphConsumer
interface UnihexFont_BitmapGlyphConsumer extends JObject{
 accept(codePoint: number,glyph: UnihexFont_BitmapGlyph): void;
}

//net.minecraft.client.render.block.FluidRenderer
class FluidRenderer extends JObject{
 render(world: BlockRenderView,pos: BlockPos,vertexConsumer: VertexConsumer,blockState: BlockState,fluidState: FluidState): void;
}
class Static_FluidRenderer {
static isSameFluid(a: FluidState,b: FluidState): boolean;
static shouldRenderSide(world: BlockRenderView,pos: BlockPos,fluidState: FluidState,blockState: BlockState,direction: Direction,neighborFluidState: FluidState): boolean;
static isSideCovered(world: BlockView,direction: Direction,height: number,pos: BlockPos,state: BlockState): boolean;
static isSideCovered(world: BlockView,pos: BlockPos,direction: Direction,maxDeviation: number,state: BlockState): boolean;
static isOppositeSideCovered(world: BlockView,pos: BlockPos,state: BlockState,direction: Direction): boolean;
static field_32781: number;
}

//net.minecraft.command.argument.BlockPredicateArgumentType$StatePredicate
class BlockPredicateArgumentType_StatePredicate extends JObject, BlockPredicateArgumentType_BlockPredicate{
 test(context: Object): boolean;
 test(cachedBlockPosition: CachedBlockPosition): boolean;
 hasNbt(): boolean;
}

//net.minecraft.network.packet.s2c.play.GameStateChangeS2CPacket$Reason
class GameStateChangeS2CPacket_Reason extends JObject{
}
class Static_GameStateChangeS2CPacket_Reason {
static REASONS: Int2ObjectMap;
}

//net.minecraft.server.command.SpreadPlayersCommand$Pile
class SpreadPlayersCommand_Pile extends JObject{
 subtract(other: SpreadPlayersCommand_Pile): void;
 setPileLocation(random: Random,minX: number,minZ: number,maxX: number,maxZ: number): void;
 isSafe(world: BlockView,maxY: number): boolean;
 getY(blockView: BlockView,maxY: number): number;
 clamp(minX: number,minZ: number,maxX: number,maxZ: number): boolean;
}

//net.minecraft.advancement.Advancement
class Advancement extends JObject{
 equals(o: Object): boolean;
 toString(): string;
 hashCode(): number;
 getParent(): Advancement;
 getId(): Identifier;
 getRoot(): Advancement;
 getChildren(): Iterable;
 addChild(child: Advancement): void;
 toHoverableText(): Text;
 getRequirementCount(): number;
 getDisplay(): AdvancementDisplay;
 getRewards(): AdvancementRewards;
 getRequirements(): String[][];
 getCriteria(): Map;
 createTask(): Advancement_Builder;
 sendsTelemetryEvent(): boolean;
}
class Static_Advancement {
static getRoot(advancement: Advancement): Advancement;
static method_685(text: Text,style: Style): Style;
}

//net.minecraft.util.ProgressListener
interface ProgressListener extends JObject{
 setDone(): void;
 setTitleAndTask(title: Text): void;
 setTask(task: Text): void;
 setTitle(title: Text): void;
 progressStagePercentage(percentage: number): void;
}

//net.minecraft.client.render.block.BlockRenderManager
class BlockRenderManager extends JObject, SynchronousResourceReloader{
 reload(manager: ResourceManager): void;
 getModel(state: BlockState): BakedModel;
 renderFluid(pos: BlockPos,world: BlockRenderView,vertexConsumer: VertexConsumer,blockState: BlockState,fluidState: FluidState): void;
 renderDamage(state: BlockState,pos: BlockPos,world: BlockRenderView,matrices: MatrixStack,vertexConsumer: VertexConsumer): void;
 renderBlock(state: BlockState,pos: BlockPos,world: BlockRenderView,matrices: MatrixStack,vertexConsumer: VertexConsumer,cull: boolean,random: Random): void;
 getModelRenderer(): BlockModelRenderer;
 getModels(): BlockModels;
 renderBlockAsEntity(state: BlockState,matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,light: number,overlay: number): void;
}

//net.minecraft.client.render.chunk.ChunkRendererRegionBuilder
class ChunkRendererRegionBuilder extends JObject{
 build(world: World,startPos: BlockPos,endPos: BlockPos,offset: number): ChunkRendererRegion;
}
class Static_ChunkRendererRegionBuilder {
static isEmptyBetween(startPos: BlockPos,endPos: BlockPos,offsetX: number,offsetZ: number,chunks: ChunkRendererRegionBuilder_ClientChunk): boolean;
static method_39968(world: World,pos: long): ChunkRendererRegionBuilder_ClientChunk;
}

//net.minecraft.client.font.BitmapFont
class BitmapFont extends JObject, Font{
 close(): void;
 getGlyph(codePoint: number): Glyph;
 getProvidedGlyphs(): IntSet;
}
class Static_BitmapFont {
static LOGGER: Logger;
}

//net.minecraft.util.annotation.ClientFieldsAreNonnullByDefault
interface ClientFieldsAreNonnullByDefault extends JObject, Annotation{
}

//net.minecraft.item.ItemGroup$Entries
interface ItemGroup_Entries extends JObject{
 add(item: ItemConvertible): void;
 add(item: ItemConvertible,visibility: ItemGroup_StackVisibility): void;
 add(stack: ItemStack): void;
 add(stack: ItemStack,visibility: ItemGroup_StackVisibility): void;
 addAll(stacks: Collection): void;
 addAll(stacks: Collection,visibility: ItemGroup_StackVisibility): void;
}

//net.minecraft.client.gui.hud.spectator.TeleportToSpecificPlayerSpectatorCommand
class TeleportToSpecificPlayerSpectatorCommand extends JObject, SpectatorMenuCommand{
 getName(): Text;
 use(menu: SpectatorMenu): void;
 isEnabled(): boolean;
 renderIcon(context: DrawContext,brightness: number,alpha: number): void;
}

//net.minecraft.client.render.model.BasicBakedModel
class BasicBakedModel extends JObject, BakedModel{
 isBuiltin(): boolean;
 useAmbientOcclusion(): boolean;
 hasDepth(): boolean;
 isSideLit(): boolean;
 getParticleSprite(): Sprite;
 getTransformation(): ModelTransformation;
 getOverrides(): ModelOverrideList;
 getQuads(state: BlockState,face: Direction,random: Random): List;
}

//net.minecraft.predicate.entity.LocationPredicate$Builder
class LocationPredicate_Builder extends JObject{
 x(x: NumberRange_FloatRange): LocationPredicate_Builder;
 z(z: NumberRange_FloatRange): LocationPredicate_Builder;
 y(y: NumberRange_FloatRange): LocationPredicate_Builder;
 block(block: BlockPredicate): LocationPredicate_Builder;
 build(): LocationPredicate;
 feature(feature: RegistryKey): LocationPredicate_Builder;
 dimension(dimension: RegistryKey): LocationPredicate_Builder;
 fluid(fluid: FluidPredicate): LocationPredicate_Builder;
 biome(biome: RegistryKey): LocationPredicate_Builder;
 light(light: LightPredicate): LocationPredicate_Builder;
 smokey(smokey: Boolean): LocationPredicate_Builder;
}
class Static_LocationPredicate_Builder {
static create(): LocationPredicate_Builder;
}

//net.minecraft.client.util.ProfileKeys$1


//net.minecraft.predicate.entity.LootContextPredicate
class LootContextPredicate extends JObject{
 test(context: LootContext): boolean;
 toJson(predicateSerializer: AdvancementEntityPredicateSerializer): JsonElement;
}
class Static_LootContextPredicate {
static create(conditions: LootCondition[]): LootContextPredicate;
static fromJson(key: string,predicateDeserializer: AdvancementEntityPredicateDeserializer,json: JsonElement,contextType: LootContextType): LootContextPredicate;
static toPredicatesJsonArray(predicates: LootContextPredicate[],predicateSerializer: AdvancementEntityPredicateSerializer): JsonElement;
static EMPTY: LootContextPredicate;
}

//net.minecraft.structure.StructurePieceType$ManagerAware
interface StructurePieceType_ManagerAware extends JObject, StructurePieceType{
 load(structureTemplateManager: StructureTemplateManager,nbt: NbtCompound): StructurePiece;
 load(structureContext: StructureContext,nbtCompound: NbtCompound): StructurePiece;
}

//net.minecraft.advancement.criterion.CriterionConditions
interface CriterionConditions extends JObject{
 getId(): Identifier;
 toJson(predicateSerializer: AdvancementEntityPredicateSerializer): JsonObject;
}

//net.minecraft.structure.TaigaVillageData
class TaigaVillageData extends JObject{
}
class Static_TaigaVillageData {
static bootstrap(poolRegisterable: Registerable): void;
static TOWN_CENTERS_KEY: RegistryKey;
static TERMINATORS_KEY: RegistryKey;
}

//net.minecraft.network.packet.s2c.play.OverlayMessageS2CPacket
class OverlayMessageS2CPacket extends JObject, Packet{
 apply(clientPlayPacketListener: ClientPlayPacketListener): void;
 apply(listener: PacketListener): void;
 getMessage(): Text;
 write(buf: PacketByteBuf): void;
}

//net.minecraft.world.tick.TickScheduler
interface TickScheduler extends JObject{
 isQueued(pos: BlockPos,type: Object): boolean;
 scheduleTick(orderedTick: OrderedTick): void;
 getTickCount(): number;
}

//net.minecraft.command.argument.BlockPredicateArgumentType$TagPredicate
class BlockPredicateArgumentType_TagPredicate extends JObject, BlockPredicateArgumentType_BlockPredicate{
 test(context: Object): boolean;
 test(cachedBlockPosition: CachedBlockPosition): boolean;
 hasNbt(): boolean;
}

//net.minecraft.command.argument.serialize.LongArgumentSerializer$Properties
class LongArgumentSerializer_Properties extends JObject, ArgumentSerializer_ArgumentTypeProperties{
 createType(commandRegistryAccess: CommandRegistryAccess): ArgumentType;
 createType(commandRegistryAccess: CommandRegistryAccess): LongArgumentType;
 getSerializer(): ArgumentSerializer;
}

//net.minecraft.network.packet.s2c.play.CommandTreeS2CPacket$ArgumentNode
class CommandTreeS2CPacket_ArgumentNode extends JObject, CommandTreeS2CPacket_SuggestableNode{
 write(buf: PacketByteBuf): void;
 createArgumentBuilder(commandRegistryAccess: CommandRegistryAccess): ArgumentBuilder;
}
class Static_CommandTreeS2CPacket_ArgumentNode {
static write(buf: PacketByteBuf,properties: ArgumentSerializer_ArgumentTypeProperties): void;
static write(buf: PacketByteBuf,serializer: ArgumentSerializer,properties: ArgumentSerializer_ArgumentTypeProperties): void;
static computeId(provider: SuggestionProvider): Identifier;
}

//net.minecraft.client.world.GeneratorOptionsHolder$Modifier
interface GeneratorOptionsHolder_Modifier extends JObject, UnaryOperator{
}

//net.minecraft.obfuscate.DontObfuscate
interface DontObfuscate extends JObject, Annotation{
}

//net.minecraft.client.gui.screen.ingame.BookScreen$1


//net.minecraft.client.render.VertexConsumerProvider
interface VertexConsumerProvider extends JObject{
 getBuffer(layer: RenderLayer): VertexConsumer;
}
class Static_VertexConsumerProvider {
static immediate(layerBuffers: Map,fallbackBuffer: BufferBuilder): VertexConsumerProvider_Immediate;
static immediate(buffer: BufferBuilder): VertexConsumerProvider_Immediate;
}

//net.minecraft.world.gen.feature.util.DripstoneHelper
class DripstoneHelper extends JObject{
}
class Static_DripstoneHelper {
static getState(direction: Direction,thickness: Thickness): BlockState;
static canReplaceOrLava(state: BlockState): boolean;
static cannotGenerate(state: BlockState): boolean;
static method_33007(worldAccess: WorldAccess,mutable: BlockPos_Mutable,direction: Direction,state: BlockState): void;
static canGenerate(state: BlockState): boolean;
static canGenerate(world: WorldAccess,pos: BlockPos): boolean;
static canReplace(state: BlockState): boolean;
static canGenerateBase(world: StructureWorldAccess,pos: BlockPos,height: number): boolean;
static canGenerateOrLava(world: WorldAccess,pos: BlockPos): boolean;
static canGenerateOrLava(state: BlockState): boolean;
static scaleHeightFromRadius(radius: number,scale: number,heightScale: number,bluntness: number): number;
static getDripstoneThickness(direction: Direction,height: number,merge: boolean,callback: Consumer): void;
static generatePointedDripstone(world: WorldAccess,pos: BlockPos,direction: Direction,height: number,merge: boolean): void;
static generateDripstoneBlock(world: WorldAccess,pos: BlockPos): boolean;
}

//net.minecraft.client.gui.screen.ingame.BookScreen$WrittenBookContents
class BookScreen_WrittenBookContents extends JObject, BookScreen_Contents{
 getPageCount(): number;
 getPageUnchecked(index: number): StringVisitable;
}
class Static_BookScreen_WrittenBookContents {
static getPages(stack: ItemStack): List;
}

//net.minecraft.recipe.RecipeManager$MatchGetter
interface RecipeManager_MatchGetter extends JObject{
 getFirstMatch(inventory: Inventory,world: World): Optional;
}

//net.minecraft.network.packet.s2c.login.LoginCompressionS2CPacket
class LoginCompressionS2CPacket extends JObject, Packet{
 apply(clientLoginPacketListener: ClientLoginPacketListener): void;
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
 getCompressionThreshold(): number;
}

//net.minecraft.inventory.Inventories
class Inventories extends JObject{
}
class Static_Inventories {
static remove(inventory: Inventory,shouldRemove: Predicate,maxCount: number,dryRun: boolean): number;
static remove(stack: ItemStack,shouldRemove: Predicate,maxCount: number,dryRun: boolean): number;
static removeStack(stacks: List,slot: number): ItemStack;
static readNbt(nbt: NbtCompound,stacks: DefaultedList): void;
static writeNbt(nbt: NbtCompound,stacks: DefaultedList,setIfEmpty: boolean): NbtCompound;
static writeNbt(nbt: NbtCompound,stacks: DefaultedList): NbtCompound;
static splitStack(stacks: List,slot: number,amount: number): ItemStack;
}

//net.minecraft.structure.NetherFortressGenerator$1


//net.minecraft.client.sound.SoundEngine
class SoundEngine extends JObject{
 init(deviceSpecifier: string,directionalAudio: boolean): void;
 close(): void;
 release(source: Source): void;
 getListener(): SoundListener;
 isDeviceUnavailable(): boolean;
 getSoundDevices(): List;
 createSource(mode: SoundEngine_RunMode): Source;
 getDebugString(): string;
 updateDeviceSpecifier(): boolean;
 getCurrentDeviceName(): string;
}
class Static_SoundEngine {
static findAvailableDeviceSpecifier(): string;
static openDeviceOrFallback(deviceSpecifier: string): long;
static openDevice(deviceSpecifier: string): OptionalLong;
static LOGGER: Logger;
static field_34945: number;
static field_31897: number;
static EMPTY_SOURCE_SET: SoundEngine_SourceSet;
}

//net.minecraft.client.report.log.ChatLogEntry
interface ChatLogEntry extends JObject{
 getType(): ChatLogEntry_Type;
}
class Static_ChatLogEntry {
static CODEC: Codec;
}

//net.minecraft.client.particle.EnchantGlyphParticle$EnchantFactory
class EnchantGlyphParticle_EnchantFactory extends JObject, ParticleFactory{
 createParticle(defaultParticleType: DefaultParticleType,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
 createParticle(particleEffect: ParticleEffect,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
}

//net.minecraft.entity.effect.StatusEffectInstance
class StatusEffectInstance extends JObject, Comparable{
 equals(o: Object): boolean;
 toString(): string;
 hashCode(): number;
 compareTo(that: Object): number;
 compareTo(statusEffectInstance: StatusEffectInstance): number;
 update(entity: LivingEntity,overwriteCallback: Runnable): boolean;
 isInfinite(): boolean;
 getDuration(): number;
 upgrade(that: StatusEffectInstance): boolean;
 applyUpdateEffect(entity: LivingEntity): void;
 mapDuration(mapper: Int2IntFunction): number;
 getAmplifier(): number;
 shouldShowIcon(): boolean;
 isAmbient(): boolean;
 getEffectType(): StatusEffect;
 isDurationBelow(duration: number): boolean;
 getFactorCalculationData(): Optional;
 shouldShowParticles(): boolean;
 writeNbt(nbt: NbtCompound): NbtCompound;
 getTranslationKey(): string;
}
class Static_StatusEffectInstance {
static method_48560(duration: number): number;
static method_42133(nbtCompound: NbtCompound,factorCalculationDataNbt: NbtElement): void;
static method_42132(nbtCompound: NbtCompound,factorCalculationData: StatusEffectInstance_FactorCalculationData): void;
static fromNbt(type: StatusEffect,nbt: NbtCompound): StatusEffectInstance;
static fromNbt(nbt: NbtCompound): StatusEffectInstance;
static LOGGER: Logger;
static INFINITE: number;
}

//net.minecraft.entity.ai.FuzzyTargeting
class FuzzyTargeting extends JObject{
}
class Static_FuzzyTargeting {
static validate(entity: PathAwareEntity,pos: BlockPos): BlockPos;
static find(entity: PathAwareEntity,horizontalRange: number,verticalRange: number): Vec3d;
static find(entity: PathAwareEntity,horizontalRange: number,verticalRange: number,scorer: ToDoubleFunction): Vec3d;
static method_31535(pathAwareEntity: PathAwareEntity,i: number,j: number,vec3d: Vec3d,bl: boolean): BlockPos;
static findValid(entity: PathAwareEntity,horizontalRange: number,verticalRange: number,direction: Vec3d,posTargetInRange: boolean): Vec3d;
static method_31531(pathAwareEntity: PathAwareEntity,i: number,j: number,bl: boolean): BlockPos;
static method_31536(pathAwareEntity: PathAwareEntity,currentPos: BlockPos): boolean;
static towardTarget(entity: PathAwareEntity,horizontalRange: number,posTargetInRange: boolean,relativeInRangePos: BlockPos): BlockPos;
static findTo(entity: PathAwareEntity,horizontalRange: number,verticalRange: number,end: Vec3d): Vec3d;
static findFrom(entity: PathAwareEntity,horizontalRange: number,verticalRange: number,start: Vec3d): Vec3d;
}

//net.minecraft.server.network.LocalServerHandshakeNetworkHandler
class LocalServerHandshakeNetworkHandler extends JObject, ServerHandshakePacketListener{
 isConnectionOpen(): boolean;
 onDisconnected(reason: Text): void;
 onHandshake(packet: HandshakeC2SPacket): void;
}

//net.minecraft.entity.ai.brain.task.VillagerTaskListProvider
class VillagerTaskListProvider extends JObject{
}
class Static_VillagerTaskListProvider {
static method_43970(poiType: RegistryEntry): boolean;
static createPlayTasks(speed: number): ImmutableList;
static createWorkTasks(profession: VillagerProfession,speed: number): ImmutableList;
static method_43971(poiType: RegistryEntry): boolean;
static createCoreTasks(profession: VillagerProfession,speed: number): ImmutableList;
static createFreeFollowTask(): Pair;
static createBusyFollowTask(): Pair;
static wonRaid(world: ServerWorld,entity: LivingEntity): boolean;
static method_43969(poiType: RegistryEntry): boolean;
static createPanicTasks(profession: VillagerProfession,speed: number): ImmutableList;
static createIdleTasks(profession: VillagerProfession,speed: number): ImmutableList;
static method_43968(poiType: RegistryEntry): boolean;
static createRaidTasks(profession: VillagerProfession,speed: number): ImmutableList;
static createHideTasks(profession: VillagerProfession,speed: number): ImmutableList;
static createMeetTasks(profession: VillagerProfession,speed: number): ImmutableList;
static hasActiveRaid(world: ServerWorld,entity: LivingEntity): boolean;
static createRestTasks(profession: VillagerProfession,speed: number): ImmutableList;
static createPreRaidTasks(profession: VillagerProfession,speed: number): ImmutableList;
static JOB_WALKING_SPEED: number;
}

//net.minecraft.util.Uuids
class Uuids extends JObject{
}
class Static_Uuids {
static toByteArray(uuid: UUID): byte[];
static toIntArray(uuid: UUID): number[];
static toIntArray(uuidMost: long,uuidLeast: long): number[];
static getOfflinePlayerUuid(nickname: string): UUID;
static getUuidFromProfile(profile: GameProfile): UUID;
static toUuid(array: number[]): UUID;
static toUuid(dynamic: Dynamic): UUID;
static method_46560(string: string): DataResult;
static method_47804(string: string): DataResult;
static method_29727(uuid: UUID): IntStream;
static method_49645(string: string,illegalArgumentException: IllegalArgumentException): string;
static method_46561(uuid: UUID): UUID;
static method_49646(string: string,illegalArgumentException: IllegalArgumentException): string;
static method_29122(uuidStream: IntStream): DataResult;
static method_46562(uuid: UUID): UUID;
static method_46559(either: Either): UUID;
static INT_STREAM_CODEC: Codec;
static STRING_CODEC: Codec;
static CODEC: Codec;
static BYTE_ARRAY_SIZE: number;
static OFFLINE_PLAYER_UUID_PREFIX: string;
}

//net.minecraft.block.LichenGrower$GrowPosPredicate
interface LichenGrower_GrowPosPredicate extends JObject{
 test(world: BlockView,pos: BlockPos,growPos: LichenGrower_GrowPos): boolean;
}

//net.minecraft.registry.RegistryEntryLookup
interface RegistryEntryLookup extends JObject{
 getOptional(key: RegistryKey): Optional;
 getOptional(tag: TagKey): Optional;
 getOrThrow(tag: TagKey): RegistryEntryList_Named;
 getOrThrow(key: RegistryKey): RegistryEntry_Reference;
}
class Static_RegistryEntryLookup {
static method_46748(registryKey: RegistryKey): IllegalStateException;
static method_46749(tagKey: TagKey): IllegalStateException;
}

//net.minecraft.registry.RegistryLoader$1


//net.minecraft.server.command.ReturnCommand
class ReturnCommand extends JObject{
}
class Static_ReturnCommand {
static register(dispatcher: CommandDispatcher): void;
static execute(source: ServerCommandSource,value: number): number;
static method_51279(source: ServerCommandSource): boolean;
static method_51278(context: CommandContext): number;
}

//net.minecraft.client.texture.SpriteContents$Animation
class SpriteContents_Animation extends JObject{
 upload(x: number,y: number): void;
 getDistinctFrameCount(): IntStream;
 createAnimator(): Animator;
}
class Static_SpriteContents_Animation {
static method_33449(frame: SpriteContents_AnimationFrame): number;
}

//net.minecraft.registry.DefaultedRegistry
interface DefaultedRegistry extends JObject, Registry{
 get(index: number): Object;
 get(id: Identifier): Object;
 getId(value: Object): Identifier;
 getDefaultId(): Identifier;
}

//net.minecraft.client.particle.SquidInkParticle$Factory
class SquidInkParticle_Factory extends JObject, ParticleFactory{
 createParticle(defaultParticleType: DefaultParticleType,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
 createParticle(particleEffect: ParticleEffect,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
}

//net.minecraft.server.command.CloneCommand
class CloneCommand extends JObject{
}
class Static_CloneCommand {
static register(dispatcher: CommandDispatcher,commandRegistryAccess: CommandRegistryAccess): void;
static execute(source: ServerCommandSource,begin: CloneCommand_DimensionalPos,end: CloneCommand_DimensionalPos,destination: CloneCommand_DimensionalPos,filter: Predicate,mode: CloneCommand_Mode): number;
static method_13096(pos: CachedBlockPosition): boolean;
static method_48053(cachedBlockPosition: CachedBlockPosition): boolean;
static method_13099(maxCount: Object,count: Object): Message;
static method_48048(cachedBlockPosition: CachedBlockPosition): boolean;
static method_48041(cachedBlockPosition: CachedBlockPosition): boolean;
static method_48045(argumentGetter: CloneCommand_ArgumentGetter,argumentGetter2: CloneCommand_ArgumentGetter,argumentGetter3: CloneCommand_ArgumentGetter,context: CommandContext): number;
static createModeArgs(beginPosGetter: CloneCommand_ArgumentGetter,endPosGetter: CloneCommand_ArgumentGetter,destinationPosGetter: CloneCommand_ArgumentGetter,filterGetter: CloneCommand_ArgumentGetter,builder: ArgumentBuilder): ArgumentBuilder;
static method_48052(context: CommandContext): Predicate;
static method_48039(context: CommandContext): Predicate;
static method_48037(argumentGetter: CloneCommand_ArgumentGetter,argumentGetter2: CloneCommand_ArgumentGetter,argumentGetter3: CloneCommand_ArgumentGetter,context: CommandContext): number;
static method_48047(context: CommandContext): Predicate;
static method_48049(argumentGetter: CloneCommand_ArgumentGetter,argumentGetter2: CloneCommand_ArgumentGetter,argumentGetter3: CloneCommand_ArgumentGetter,argumentGetter4: CloneCommand_ArgumentGetter,context: CommandContext): number;
static method_48050(argumentGetter: CloneCommand_ArgumentGetter,argumentGetter2: CloneCommand_ArgumentGetter,argumentGetter3: CloneCommand_ArgumentGetter,context: CommandContext): number;
static method_51940(i: number): Text;
static method_48044(argumentGetter: CloneCommand_ArgumentGetter,argumentGetter2: CloneCommand_ArgumentGetter,argumentGetter3: CloneCommand_ArgumentGetter,argumentGetter4: CloneCommand_ArgumentGetter,context: CommandContext): number;
static method_48036(argumentGetter: CloneCommand_ArgumentGetter,argumentGetter2: CloneCommand_ArgumentGetter,argumentGetter3: CloneCommand_ArgumentGetter,argumentGetter4: CloneCommand_ArgumentGetter,context: CommandContext): number;
static createDimensionalPos(context: CommandContext,world: ServerWorld,name: string): CloneCommand_DimensionalPos;
static createDestinationArgs(commandRegistryAccess: CommandRegistryAccess,sourceWorldGetter: CloneCommand_ArgumentGetter,targetWorldGetter: CloneCommand_ArgumentGetter): ArgumentBuilder;
static createSourceArgs(commandRegistryAccess: CommandRegistryAccess,worldGetter: CloneCommand_ArgumentGetter): ArgumentBuilder;
static method_48057(context: CommandContext): ServerWorld;
static method_13094(source: ServerCommandSource): boolean;
static method_48055(context: CommandContext): ServerWorld;
static method_48051(argumentGetter: CloneCommand_ArgumentGetter,context: CommandContext): CloneCommand_DimensionalPos;
static method_48046(argumentGetter: CloneCommand_ArgumentGetter,context: CommandContext): CloneCommand_DimensionalPos;
static method_48038(argumentGetter: CloneCommand_ArgumentGetter,context: CommandContext): CloneCommand_DimensionalPos;
static method_48054(argumentGetter: CloneCommand_ArgumentGetter,argumentGetter2: CloneCommand_ArgumentGetter,argumentGetter3: CloneCommand_ArgumentGetter,context: CommandContext): number;
static method_48058(context: CommandContext): ServerWorld;
static method_48056(context: CommandContext): ServerWorld;
static OVERLAP_EXCEPTION: SimpleCommandExceptionType;
static TOO_BIG_EXCEPTION: Dynamic2CommandExceptionType;
static FAILED_EXCEPTION: SimpleCommandExceptionType;
static IS_AIR_PREDICATE: Predicate;
}

//net.minecraft.client.realms.FileDownload$ResourcePackProgressListener
class FileDownload_ResourcePackProgressListener extends JObject, ActionListener{
 actionPerformed(e: ActionEvent): void;
}

//net.minecraft.particle.ShriekParticleEffect$1


//net.minecraft.client.util.GlfwUtil
class GlfwUtil extends JObject{
}
class Static_GlfwUtil {
static getTime(): number;
static accessProcessingQueue(storage: RenderCallStorage,f: number): void;
static accessRecordingQueue(storage: RenderCallStorage,f: number): void;
static makeJvmCrash(): void;
}

//net.minecraft.network.packet.s2c.play.TeamS2CPacket$SerializableTeam
class TeamS2CPacket_SerializableTeam extends JObject{
 write(buf: PacketByteBuf): void;
 getDisplayName(): Text;
 getPrefix(): Text;
 getCollisionRule(): string;
 getSuffix(): Text;
 getColor(): Formatting;
 getFriendlyFlagsBitwise(): number;
 getNameTagVisibilityRule(): string;
}

//net.minecraft.world.storage.StorageIoWorker
class StorageIoWorker extends JObject, NbtScannable, AutoCloseable{
 close(): void;
 setResult(pos: ChunkPos,nbt: NbtCompound): CompletableFuture;
 scanChunk(pos: ChunkPos,scanner: NbtScanner): CompletableFuture;
 completeAll(sync: boolean): CompletableFuture;
 readChunkData(pos: ChunkPos): CompletableFuture;
 needsBlending(chunkPos: ChunkPos,checkRadius: number): boolean;
}
class Static_StorageIoWorker {
static method_37480(): Either;
static method_23705(result: StorageIoWorker_Result): CompletableFuture;
static method_23711(nbtCompound: NbtCompound,pos2: ChunkPos): StorageIoWorker_Result;
static method_23699(i: number): CompletableFuture[];
static method_27938(listener: MessageListener): TaskQueue_PrioritizedTask;
static method_27942(messageListener: MessageListener): void;
static LOGGER: Logger;
static MAX_CACHE_SIZE: number;
}

//net.minecraft.block.WallBlock$1


//net.minecraft.predicate.entity.EntityEquipmentPredicate
class EntityEquipmentPredicate extends JObject{
 test(entity: Entity): boolean;
 toJson(): JsonElement;
}
class Static_EntityEquipmentPredicate {
static fromJson(json: JsonElement): EntityEquipmentPredicate;
static ANY: EntityEquipmentPredicate;
static OMINOUS_BANNER_ON_HEAD: EntityEquipmentPredicate;
}

//net.minecraft.world.explosion.Explosion
class Explosion extends JObject{
 getEntity(): Entity;
 clearAffectedBlocks(): void;
 collectBlocksAndDamageEntities(): void;
 affectWorld(particles: boolean): void;
 getAffectedBlocks(): List;
 getDamageSource(): DamageSource;
 shouldDestroy(): boolean;
 getCausingEntity(): LivingEntity;
 getAffectedPlayers(): Map;
}
class Static_Explosion {
static method_24024(objectArrayList: ObjectArrayList,blockPos: BlockPos,stack: ItemStack): void;
static getExposure(source: Vec3d,entity: Entity): number;
static tryMergeStack(stacks: ObjectArrayList,stack: ItemStack,pos: BlockPos): void;
static DEFAULT_BEHAVIOR: ExplosionBehavior;
static field_30960: number;
}

//net.minecraft.client.particle.LargeFireSmokeParticle$Factory
class LargeFireSmokeParticle_Factory extends JObject, ParticleFactory{
 createParticle(defaultParticleType: DefaultParticleType,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
 createParticle(particleEffect: ParticleEffect,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
}

//net.minecraft.world.gen.trunk.LargeOakTrunkPlacer$BranchPosition
class LargeOakTrunkPlacer_BranchPosition extends JObject{
 getEndY(): number;
}

//net.minecraft.block.RailPlacementHelper$1


//net.minecraft.resource.AbstractFileResourcePack
class AbstractFileResourcePack extends JObject, ResourcePack{
 getName(): string;
 isAlwaysStable(): boolean;
 parseMetadata(metaReader: ResourceMetadataReader): Object;
}
class Static_AbstractFileResourcePack {
static parseMetadata(metaReader: ResourceMetadataReader,inputStream: InputStream): Object;
static LOGGER: Logger;
}

//net.minecraft.registry.Registerable
interface Registerable extends JObject{
 register(key: RegistryKey,value: Object,lifecycle: Lifecycle): RegistryEntry_Reference;
 register(key: RegistryKey,value: Object): RegistryEntry_Reference;
 getRegistryLookup(registryRef: RegistryKey): RegistryEntryLookup;
}

//net.minecraft.item.map.MapState$PlayerUpdateTracker
class MapState_PlayerUpdateTracker extends JObject{
 player: PlayerEntity;
 field_131: number;
}

//net.minecraft.structure.PlainsVillageData
class PlainsVillageData extends JObject{
}
class Static_PlainsVillageData {
static bootstrap(poolRegisterable: Registerable): void;
static TOWN_CENTERS_KEY: RegistryKey;
static TERMINATORS_KEY: RegistryKey;
}

//net.minecraft.screen.ScreenHandlerListener
interface ScreenHandlerListener extends JObject{
 onSlotUpdate(handler: ScreenHandler,slotId: number,stack: ItemStack): void;
 onPropertyUpdate(handler: ScreenHandler,property: number,value: number): void;
}

//net.minecraft.client.render.model.ModelLoader
class ModelLoader extends JObject{
 getBakedModelMap(): Map;
 getStateLookup(): Object2IntMap;
 bake(spriteLoader: BiFunction): void;
 getOrLoadModel(id: Identifier): UnbakedModel;
}
class Static_ModelLoader {
static stateKeyToPredicate(stateFactory: StateManager,key: string): Predicate;
static method_4738(map: Map,multipartUnbakedModel: MultipartUnbakedModel,list: List,state: BlockState): void;
static method_4731(immutableList: ImmutableList,stateManager: StateManager,map: Map,list: List,multipartUnbakedModel: MultipartUnbakedModel,pair: Pair,modelVariantMap: ModelVariantMap,identifier: Identifier,pair2: Pair,key: string,model: WeightedUnbakedModel): void;
static method_21606(modelDefinition: ModelLoader_ModelDefinition): ModelLoader_ModelDefinition;
static method_4721(model: JsonUnbakedModel): void;
static method_4730(pair: Pair,entry: Map_Entry): boolean;
static method_22820(stage: number): Identifier;
static method_21599(blockState: BlockState,multipartUnbakedModel: MultipartUnbakedModel,list: List): ModelLoader_ModelDefinition;
static method_21598(blockState: BlockState,weightedUnbakedModel: WeightedUnbakedModel,list: List): ModelLoader_ModelDefinition;
static method_4719(model: JsonUnbakedModel): void;
static method_23216(id: Identifier): Identifier;
static method_21600(definition: ModelLoader_ModelDefinition): Set;
static method_4722(map: Map,weightedUnbakedModel: WeightedUnbakedModel,list: List,multipartUnbakedModel: MultipartUnbakedModel,pair: Pair,modelVariantMap: ModelVariantMap,state: BlockState): void;
static method_4739(block: Block,map: Map,state: BlockState): boolean;
static getPropertyValue(property: Property,string: string): Comparable;
static method_4736(identifier: Identifier): StateManager;
static method_4720(map: Map,identifier: Identifier,state: BlockState): void;
static method_21602(map: Object2IntOpenHashMap): void;
static FIRE_0: SpriteIdentifier;
static FIRE_1: SpriteIdentifier;
static LAVA_FLOW: SpriteIdentifier;
static WATER_FLOW: SpriteIdentifier;
static WATER_OVERLAY: SpriteIdentifier;
static BANNER_BASE: SpriteIdentifier;
static SHIELD_BASE: SpriteIdentifier;
static SHIELD_BASE_NO_PATTERN: SpriteIdentifier;
static field_32983: number;
static BLOCK_DESTRUCTION_STAGES: List;
static BLOCK_DESTRUCTION_STAGE_TEXTURES: List;
static BLOCK_DESTRUCTION_RENDER_LAYERS: List;
static field_32984: number;
static field_32985: number;
static LOGGER: Logger;
static BUILTIN: string;
static BUILTIN_GENERATED: string;
static BUILTIN_ENTITY: string;
static MISSING: string;
static MISSING_ID: ModelIdentifier;
static BLOCK_STATES_FINDER: ResourceFinder;
static MODELS_FINDER: ResourceFinder;
static MISSING_DEFINITION: string;
static BUILTIN_MODEL_DEFINITIONS: Map;
static COMMA_SPLITTER: Splitter;
static KEY_VALUE_SPLITTER: Splitter;
static GENERATION_MARKER: JsonUnbakedModel;
static BLOCK_ENTITY_MARKER: JsonUnbakedModel;
static ITEM_FRAME_STATE_FACTORY: StateManager;
static ITEM_MODEL_GENERATOR: ItemModelGenerator;
static STATIC_DEFINITIONS: Map;
}

//net.minecraft.client.util.math.MatrixStack$Entry
class MatrixStack_Entry extends JObject{
 getPositionMatrix(): Matrix4f;
 getNormalMatrix(): Matrix3f;
}

//net.minecraft.client.report.ChatAbuseReport$Draft
class ChatAbuseReport_Draft extends JObject{
 copy(): ChatAbuseReport_Draft;
 toggleMessageSelection(index: number,limits: AbuseReportLimits): void;
 playerUuidEquals(uuid: UUID): boolean;
}

//net.minecraft.recipe.RecipeMatcher$Matcher
class RecipeMatcher_Matcher extends JObject{
 match(multiplier: number,output: IntList): boolean;
 countCrafts(minimum: number,output: IntList): number;
}

//net.minecraft.block.dispenser.DispenserBehavior$26


//net.minecraft.data.client.TexturedModel
class TexturedModel extends JObject{
 getModel(): Model;
 upload(block: Block,suffix: string,writer: BiConsumer): Identifier;
 upload(block: Block,writer: BiConsumer): Identifier;
 textures(texturesConsumer: Consumer): TexturedModel;
 getTextures(): TextureMap;
}
class Static_TexturedModel {
static makeFactory(texturesGetter: Function,model: Model): TexturedModel_Factory;
static getCubeAll(id: Identifier): TexturedModel;
static method_25919(fun: Function,model: Model,block: Block): TexturedModel;
static CUBE_ALL: TexturedModel_Factory;
static CUBE_MIRRORED_ALL: TexturedModel_Factory;
static CUBE_COLUMN: TexturedModel_Factory;
static CUBE_COLUMN_HORIZONTAL: TexturedModel_Factory;
static CUBE_BOTTOM_TOP: TexturedModel_Factory;
static CUBE_TOP: TexturedModel_Factory;
static ORIENTABLE: TexturedModel_Factory;
static ORIENTABLE_WITH_BOTTOM: TexturedModel_Factory;
static CARPET: TexturedModel_Factory;
static FLOWERBED_1: TexturedModel_Factory;
static FLOWERBED_2: TexturedModel_Factory;
static FLOWERBED_3: TexturedModel_Factory;
static FLOWERBED_4: TexturedModel_Factory;
static TEMPLATE_GLAZED_TERRACOTTA: TexturedModel_Factory;
static CORAL_FAN: TexturedModel_Factory;
static PARTICLE: TexturedModel_Factory;
static TEMPLATE_ANVIL: TexturedModel_Factory;
static LEAVES: TexturedModel_Factory;
static TEMPLATE_LANTERN: TexturedModel_Factory;
static TEMPLATE_HANGING_LANTERN: TexturedModel_Factory;
static TEMPLATE_SEAGRASS: TexturedModel_Factory;
static END_FOR_TOP_CUBE_COLUMN: TexturedModel_Factory;
static END_FOR_TOP_CUBE_COLUMN_HORIZONTAL: TexturedModel_Factory;
static SIDE_TOP_BOTTOM_WALL: TexturedModel_Factory;
static SIDE_END_WALL: TexturedModel_Factory;
}

//net.minecraft.block.dispenser.DispenserBehavior$25


//net.minecraft.server.world.ServerEntityManager$Listener
class ServerEntityManager_Listener extends JObject, EntityChangeListener{
 remove(reason: Entity_RemovalReason): void;
 updateEntityPosition(): void;
}

//net.minecraft.world.event.Vibrations$Callback
interface Vibrations_Callback extends JObject{
 accept(world: ServerWorld,pos: BlockPos,event: GameEvent,sourceEntity: Entity,entity: Entity,distance: number): void;
 getTag(): TagKey;
 getRange(): number;
 requiresTickingChunksAround(): boolean;
 triggersAvoidCriterion(): boolean;
 canAccept(gameEvent: GameEvent,emitter: GameEvent_Emitter): boolean;
 getDelay(distance: number): number;
 onListen(): void;
 getPositionSource(): PositionSource;
 accepts(world: ServerWorld,pos: BlockPos,event: GameEvent,emitter: GameEvent_Emitter): boolean;
}

//net.minecraft.command.argument.RegistryEntryPredicateArgumentType$Serializer
class RegistryEntryPredicateArgumentType_Serializer extends JObject, ArgumentSerializer{
 getArgumentTypeProperties(argumentType: ArgumentType): ArgumentSerializer_ArgumentTypeProperties;
 getArgumentTypeProperties(registryEntryPredicateArgumentType: RegistryEntryPredicateArgumentType): RegistryEntryPredicateArgumentType_Serializer_Properties;
 fromPacket(buf: PacketByteBuf): ArgumentSerializer_ArgumentTypeProperties;
 fromPacket(packetByteBuf: PacketByteBuf): RegistryEntryPredicateArgumentType_Serializer_Properties;
 writePacket(properties: ArgumentSerializer_ArgumentTypeProperties,buf: PacketByteBuf): void;
 writePacket(properties: RegistryEntryPredicateArgumentType_Serializer_Properties,packetByteBuf: PacketByteBuf): void;
 writeJson(properties: RegistryEntryPredicateArgumentType_Serializer_Properties,jsonObject: JsonObject): void;
 writeJson(properties: ArgumentSerializer_ArgumentTypeProperties,json: JsonObject): void;
}

//net.minecraft.network.packet.c2s.play.CraftRequestC2SPacket
class CraftRequestC2SPacket extends JObject, Packet{
 apply(serverPlayPacketListener: ServerPlayPacketListener): void;
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
 getSyncId(): number;
 getRecipe(): Identifier;
 shouldCraftAll(): boolean;
}

//net.minecraft.command.argument.NbtPathArgumentType$PathNode
interface NbtPathArgumentType_PathNode extends JObject{
 get(current: NbtElement,results: List): void;
 get(elements: List): List;
 clear(current: NbtElement): number;
 set(current: NbtElement,source: Supplier): number;
 init(): NbtElement;
 process(elements: List,action: BiConsumer): List;
 getOrInit(elements: List,supplier: Supplier): List;
 getOrInit(current: NbtElement,source: Supplier,results: List): void;
}

//net.minecraft.block.StairsBlock$1


//net.minecraft.client.network.SequencedPacketCreator
interface SequencedPacketCreator extends JObject{
 predict(sequence: number): Packet;
}

//net.minecraft.command.argument.ScoreHolderArgumentType$Serializer
class ScoreHolderArgumentType_Serializer extends JObject, ArgumentSerializer{
 getArgumentTypeProperties(argumentType: ArgumentType): ArgumentSerializer_ArgumentTypeProperties;
 getArgumentTypeProperties(scoreHolderArgumentType: ScoreHolderArgumentType): ScoreHolderArgumentType_Serializer_Properties;
 fromPacket(buf: PacketByteBuf): ArgumentSerializer_ArgumentTypeProperties;
 fromPacket(packetByteBuf: PacketByteBuf): ScoreHolderArgumentType_Serializer_Properties;
 writePacket(properties: ArgumentSerializer_ArgumentTypeProperties,buf: PacketByteBuf): void;
 writePacket(properties: ScoreHolderArgumentType_Serializer_Properties,packetByteBuf: PacketByteBuf): void;
 writeJson(properties: ScoreHolderArgumentType_Serializer_Properties,jsonObject: JsonObject): void;
 writeJson(properties: ArgumentSerializer_ArgumentTypeProperties,json: JsonObject): void;
}
class Static_ScoreHolderArgumentType_Serializer {
static MULTIPLE_FLAG: byte;
}

//net.minecraft.util.collection.EmptyPaletteStorage
class EmptyPaletteStorage extends JObject, PaletteStorage{
 get(index: number): number;
 set(index: number,value: number): void;
 forEach(action: IntConsumer): void;
 copy(): PaletteStorage;
 getSize(): number;
 swap(index: number,value: number): number;
 getData(): long[];
 writePaletteIndices(out: number[]): void;
 getElementBits(): number;
}
class Static_EmptyPaletteStorage {
static EMPTY_DATA: long[];
}

//net.minecraft.client.render.block.entity.ConduitBlockEntityRenderer
class ConduitBlockEntityRenderer extends JObject, BlockEntityRenderer{
 render(conduitBlockEntity: ConduitBlockEntity,f: number,matrixStack: MatrixStack,vertexConsumerProvider: VertexConsumerProvider,i: number,j: number): void;
 render(entity: BlockEntity,tickDelta: number,matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,light: number,overlay: number): void;
}
class Static_ConduitBlockEntityRenderer {
static getWindTexturedModelData(): TexturedModelData;
static getPlainTexturedModelData(): TexturedModelData;
static getShellTexturedModelData(): TexturedModelData;
static getEyeTexturedModelData(): TexturedModelData;
static BASE_TEXTURE: SpriteIdentifier;
static CAGE_TEXTURE: SpriteIdentifier;
static WIND_TEXTURE: SpriteIdentifier;
static WIND_VERTICAL_TEXTURE: SpriteIdentifier;
static OPEN_EYE_TEXTURE: SpriteIdentifier;
static CLOSED_EYE_TEXTURE: SpriteIdentifier;
}

//net.minecraft.client.render.RenderTickCounter
class RenderTickCounter extends JObject{
 beginRenderTick(timeMillis: long): number;
 tickDelta: number;
 lastFrameDuration: number;
}

//net.minecraft.world.gen.feature.SimpleRandomFeatureConfig
class SimpleRandomFeatureConfig extends JObject, FeatureConfig{
 getDecoratedFeatures(): Stream;
 features: RegistryEntryList;
}
class Static_SimpleRandomFeatureConfig {
static method_30651(feature: RegistryEntry): Stream;
static method_28788(config: SimpleRandomFeatureConfig): RegistryEntryList;
static CODEC: Codec;
}

//net.minecraft.client.MinecraftClient$1


//net.minecraft.recipe.AbstractCookingRecipe
class AbstractCookingRecipe extends JObject, Recipe{
 matches(inventory: Inventory,world: World): boolean;
 getId(): Identifier;
 getType(): RecipeType;
 getCategory(): CookingRecipeCategory;
 getExperience(): number;
 getCookTime(): number;
 getOutput(registryManager: DynamicRegistryManager): ItemStack;
 getGroup(): string;
 craft(inventory: Inventory,registryManager: DynamicRegistryManager): ItemStack;
 getIngredients(): DefaultedList;
 fits(width: number,height: number): boolean;
}

//net.minecraft.client.render.model.MultipartBakedModel
class MultipartBakedModel extends JObject, BakedModel{
 isBuiltin(): boolean;
 useAmbientOcclusion(): boolean;
 hasDepth(): boolean;
 isSideLit(): boolean;
 getParticleSprite(): Sprite;
 getTransformation(): ModelTransformation;
 getOverrides(): ModelOverrideList;
 getQuads(state: BlockState,face: Direction,random: Random): List;
}

//net.minecraft.recipe.book.RecipeBookOptions$CategoryOption
class RecipeBookOptions_CategoryOption extends JObject{
 equals(o: Object): boolean;
 toString(): string;
 hashCode(): number;
 copy(): RecipeBookOptions_CategoryOption;
}

//net.minecraft.resource.ResourcePackSource
interface ResourcePackSource extends JObject{
 decorate(packName: Text): Text;
 canBeEnabledLater(): boolean;
}
class Static_ResourcePackSource {
static create(sourceTextSupplier: UnaryOperator,canBeEnabledLater: boolean): ResourcePackSource;
static method_45283(text: Text,name: Text): Text;
static getSourceTextSupplier(translationKey: string): UnaryOperator;
static NONE_SOURCE_TEXT_SUPPLIER: UnaryOperator;
static NONE: ResourcePackSource;
static BUILTIN: ResourcePackSource;
static FEATURE: ResourcePackSource;
static WORLD: ResourcePackSource;
static SERVER: ResourcePackSource;
}

//net.minecraft.entity.damage.DamageTracker
class DamageTracker extends JObject{
 update(): void;
 getDeathMessage(): Text;
 onDamage(damageSource: DamageSource,damage: number): void;
 getTimeSinceLastAttack(): number;
}
class Static_DamageTracker {
static getDisplayName(entity: Entity): Text;
static isAttackerLiving(damageSource: DamageSource): boolean;
static DAMAGE_COOLDOWN: number;
static ATTACK_DAMAGE_COOLDOWN: number;
static INTENTIONAL_GAME_DESIGN_ISSUE_LINK_STYLE: Style;
}

//net.minecraft.client.input.Input
class Input extends JObject{
 tick(slowDown: boolean,slowDownFactor: number): void;
 getMovementInput(): Vec2f;
 hasForwardMovement(): boolean;
 movementSideways: number;
 movementForward: number;
 pressingForward: boolean;
 pressingBack: boolean;
 pressingLeft: boolean;
 pressingRight: boolean;
 jumping: boolean;
 sneaking: boolean;
}

//net.minecraft.world.SpawnDensityCapper$DensityCap
class SpawnDensityCapper_DensityCap extends JObject{
 canSpawn(spawnGroup: SpawnGroup): boolean;
 increaseDensity(spawnGroup: SpawnGroup): void;
}
class Static_SpawnDensityCapper_DensityCap {
static method_38089(group: SpawnGroup,density: Integer): Integer;
}

//net.minecraft.client.render.model.json.JsonUnbakedModel$Deserializer
class JsonUnbakedModel_Deserializer extends JObject, JsonDeserializer{
 deserialize(element: JsonElement,unused: Type,ctx: JsonDeserializationContext): Object;
 deserialize(jsonElement: JsonElement,type: Type,jsonDeserializationContext: JsonDeserializationContext): JsonUnbakedModel;
}
class Static_JsonUnbakedModel_Deserializer {
static resolveReference(id: Identifier,name: string): Either;
}

//net.minecraft.client.realms.util.TextRenderingUtils
class TextRenderingUtils extends JObject{
}
class Static_TextRenderingUtils {
static split(line: string,delimiter: string): List;
static insertLinks(lines: List,links: List): List;
static lineBreak(text: string): List;
static decompose(text: string,links: List): List;
static decompose(text: string,links: TextRenderingUtils_LineSegment): List;
}

//net.minecraft.command.argument.RegistryKeyArgumentType$Serializer
class RegistryKeyArgumentType_Serializer extends JObject, ArgumentSerializer{
 getArgumentTypeProperties(argumentType: ArgumentType): ArgumentSerializer_ArgumentTypeProperties;
 getArgumentTypeProperties(registryKeyArgumentType: RegistryKeyArgumentType): RegistryKeyArgumentType_Serializer_Properties;
 fromPacket(buf: PacketByteBuf): ArgumentSerializer_ArgumentTypeProperties;
 fromPacket(packetByteBuf: PacketByteBuf): RegistryKeyArgumentType_Serializer_Properties;
 writePacket(properties: ArgumentSerializer_ArgumentTypeProperties,buf: PacketByteBuf): void;
 writePacket(properties: RegistryKeyArgumentType_Serializer_Properties,packetByteBuf: PacketByteBuf): void;
 writeJson(properties: RegistryKeyArgumentType_Serializer_Properties,jsonObject: JsonObject): void;
 writeJson(properties: ArgumentSerializer_ArgumentTypeProperties,json: JsonObject): void;
}

//net.minecraft.world.ModifiableTestableWorld
interface ModifiableTestableWorld extends JObject, TestableWorld, ModifiableWorld{
}

//net.minecraft.world.gen.root.RootPlacer
class RootPlacer extends JObject{
 generate(world: TestableWorld,replacer: BiConsumer,random: Random,pos: BlockPos,trunkPos: BlockPos,config: TreeFeatureConfig): boolean;
 trunkOffset(pos: BlockPos,random: Random): BlockPos;
}
class Static_RootPlacer {
static method_43183(rootPlacer: RootPlacer): BlockStateProvider;
static method_43310(rootPlacer: RootPlacer): IntProvider;
static method_43182(instance: RecordCodecBuilder_Instance): Products_P3;
static method_43308(rootPlacer: RootPlacer): Optional;
static method_43184(fluidState: FluidState): boolean;
static TYPE_CODEC: Codec;
}

//net.minecraft.client.font.Font
interface Font extends JObject, AutoCloseable{
 close(): void;
 getGlyph(codePoint: number): Glyph;
 getProvidedGlyphs(): IntSet;
}

//net.minecraft.client.font.TextHandler$StyledString
class TextHandler_StyledString extends JObject, StringVisitable{
 visit(visitor: StringVisitable_Visitor): Optional;
 visit(styledVisitor: StringVisitable_StyledVisitor,style: Style): Optional;
}

//net.minecraft.util.math.Spline$Visitor
interface Spline_Visitor extends JObject{
 visit(value: Object): Object;
}

//net.minecraft.client.model.ModelPartBuilder
class ModelPartBuilder extends JObject{
 build(): List;
 mirrored(): ModelPartBuilder;
 mirrored(mirror: boolean): ModelPartBuilder;
 uv(textureX: number,textureY: number): ModelPartBuilder;
 cuboid(offsetX: number,offsetY: number,offsetZ: number,sizeX: number,sizeY: number,sizeZ: number,extra: Dilation,textureScaleX: number,textureScaleY: number): ModelPartBuilder;
 cuboid(offsetX: number,offsetY: number,offsetZ: number,sizeX: number,sizeY: number,sizeZ: number,mirror: boolean): ModelPartBuilder;
 cuboid(name: string,offsetX: number,offsetY: number,offsetZ: number,sizeX: number,sizeY: number,sizeZ: number): ModelPartBuilder;
 cuboid(offsetX: number,offsetY: number,offsetZ: number,sizeX: number,sizeY: number,sizeZ: number,extra: Dilation): ModelPartBuilder;
 cuboid(name: string,offsetX: number,offsetY: number,offsetZ: number,sizeX: number,sizeY: number,sizeZ: number,extra: Dilation,textureX: number,textureY: number): ModelPartBuilder;
 cuboid(name: string,offsetX: number,offsetY: number,offsetZ: number,sizeX: number,sizeY: number,sizeZ: number,textureX: number,textureY: number): ModelPartBuilder;
 cuboid(offsetX: number,offsetY: number,offsetZ: number,sizeX: number,sizeY: number,sizeZ: number): ModelPartBuilder;
 cuboid(offsetX: number,offsetY: number,offsetZ: number,sizeX: number,sizeY: number,sizeZ: number,directions: Set): ModelPartBuilder;
 cuboid(name: string,offsetX: number,offsetY: number,offsetZ: number,sizeX: number,sizeY: number,sizeZ: number,extra: Dilation): ModelPartBuilder;
}
class Static_ModelPartBuilder {
static create(): ModelPartBuilder;
static ALL_DIRECTIONS: Set;
}

//net.minecraft.structure.OceanRuinGenerator
class OceanRuinGenerator extends JObject{
}
class Static_OceanRuinGenerator {
static getRandomWarmRuin(random: Random): Identifier;
static getRoomPositions(random: Random,pos: BlockPos): List;
static addCluster(manager: StructureTemplateManager,random: Random,rotation: BlockRotation,pos: BlockPos,structure: OceanRuinStructure,pieces: StructurePiecesHolder): void;
static createArchaeologyStructureProcessor(baseBlock: Block,suspiciousBlock: Block,lootTableId: Identifier): StructureProcessor;
static getRandomBigWarmRuin(random: Random): Identifier;
static addPieces(manager: StructureTemplateManager,pos: BlockPos,rotation: BlockRotation,holder: StructurePiecesHolder,random: Random,structure: OceanRuinStructure): void;
static addPieces(manager: StructureTemplateManager,pos: BlockPos,rotation: BlockRotation,holder: StructurePiecesHolder,random: Random,structure: OceanRuinStructure,large: boolean,integrity: number): void;
static SUSPICIOUS_SAND_PROCESSOR: StructureProcessor;
static SUSPICIOUS_GRAVEL_PROCESSOR: StructureProcessor;
static WARM_RUINS: Identifier[];
static BRICK_RUINS: Identifier[];
static CRACKED_RUINS: Identifier[];
static MOSSY_RUINS: Identifier[];
static BIG_BRICK_RUINS: Identifier[];
static BIG_MOSSY_RUINS: Identifier[];
static BIG_CRACKED_RUINS: Identifier[];
static BIG_WARM_RUINS: Identifier[];
}

//net.minecraft.structure.NetherFortressGenerator$PieceData
class NetherFortressGenerator_PieceData extends JObject{
 canGenerate(): boolean;
 canGenerate(chainLength: number): boolean;
 pieceType: Class;
 weight: number;
 generatedCount: number;
 limit: number;
 repeatable: boolean;
}

//net.minecraft.server.function.CommandFunction$LazyContainer
class CommandFunction_LazyContainer extends JObject{
 get(manager: CommandFunctionManager): Optional;
 getId(): Identifier;
}
class Static_CommandFunction_LazyContainer {
static method_17913(f: CommandFunction): Identifier;
static EMPTY: CommandFunction_LazyContainer;
}

//net.minecraft.network.encryption.Signer
interface Signer extends JObject{
 sign(updatable: SignatureUpdatable): byte[];
 sign(data: byte[]): byte[];
}
class Static_Signer {
static create(privateKey: PrivateKey,algorithm: string): Signer;
static method_44178(string: string,privateKey: PrivateKey,updatable: SignatureUpdatable): byte[];
static method_44181(bs: byte[],updater: SignatureUpdatable_SignatureUpdater): void;
static LOGGER: Logger;
}

//net.minecraft.predicate.FluidPredicate$Builder
class FluidPredicate_Builder extends JObject{
 state(state: StatePredicate): FluidPredicate_Builder;
 build(): FluidPredicate;
 tag(tag: TagKey): FluidPredicate_Builder;
 fluid(fluid: Fluid): FluidPredicate_Builder;
}
class Static_FluidPredicate_Builder {
static create(): FluidPredicate_Builder;
}

//net.minecraft.client.render.chunk.ChunkBuilder$BuiltChunk
class ChunkBuilder_BuiltChunk extends JObject{
 delete(): void;
 getData(): ChunkBuilder_ChunkData;
 getBuffer(layer: RenderLayer): VertexBuffer;
 getOrigin(): BlockPos;
 shouldBuild(): boolean;
 needsRebuild(): boolean;
 rebuild(builder: ChunkRendererRegionBuilder): void;
 createRebuildTask(builder: ChunkRendererRegionBuilder): ChunkBuilder_BuiltChunk_Task;
 cancelRebuild(): void;
 scheduleSort(layer: RenderLayer,chunkRenderer: ChunkBuilder): boolean;
 getNeighborPosition(direction: Direction): BlockPos;
 needsImportantRebuild(): boolean;
 getBoundingBox(): Box;
 scheduleRebuild(chunkRenderer: ChunkBuilder,builder: ChunkRendererRegionBuilder): void;
 scheduleRebuild(important: boolean): void;
 setOrigin(x: number,y: number,z: number): void;
 index: number;
 data: AtomicReference;
}
class Static_ChunkBuilder_BuiltChunk {
static method_22780(layer: RenderLayer): RenderLayer;
static method_3660(neighborPositions: BlockPos_Mutable): void;
static method_22779(layer: RenderLayer): VertexBuffer;
static field_32832: number;
}

//net.minecraft.world.event.listener.EntityGameEventHandler
class EntityGameEventHandler extends JObject{
 getListener(): GameEventListener;
 onEntityRemoval(world: ServerWorld): void;
 onEntitySetPos(world: ServerWorld): void;
 onEntitySetPosCallback(world: ServerWorld): void;
}
class Static_EntityGameEventHandler {
static updateDispatcher(world: WorldView,sectionPos: ChunkSectionPos,dispatcherConsumer: Consumer): void;
}

//net.minecraft.client.render.entity.DisplayEntityRenderer$1


//net.minecraft.server.command.ExecuteCommand
class ExecuteCommand extends JObject{
}
class Static_ExecuteCommand {
static register(dispatcher: CommandDispatcher,commandRegistryAccess: CommandRegistryAccess): void;
static isLoaded(world: ServerWorld,pos: BlockPos): boolean;
static method_13281(context: CommandContext): Collection;
static method_13292(context: CommandContext): Collection;
static method_13254(source: ServerCommandSource): boolean;
static method_13295(context: CommandContext): Collection;
static method_13255(source: ServerCommandSource): boolean;
static method_13314(context: CommandContext): ServerCommandSource;
static addStoreArguments(node: LiteralCommandNode,builder: LiteralArgumentBuilder,requestResult: boolean): ArgumentBuilder;
static getExistsConditionExecute(positive: boolean,condition: ExecuteCommand_ExistsCondition): Command;
static getSourceOrEmptyForConditionFork(context: CommandContext,positive: boolean,value: boolean): Collection;
static executeNegativeBlockCondition(context: CommandContext,masked: boolean): number;
static addConditionArguments(root: CommandNode,argumentBuilder: LiteralArgumentBuilder,positive: boolean,commandRegistryAccess: CommandRegistryAccess): ArgumentBuilder;
static executePositiveBlockCondition(context: CommandContext,masked: boolean): number;
static createMultiEntityModifier(fun: Function): RedirectModifier;
static addBlocksConditionLogic(root: CommandNode,builder: ArgumentBuilder,positive: boolean,masked: boolean): ArgumentBuilder;
static executeStoreBossbar(source: ServerCommandSource,bossBar: CommandBossBar,storeInValue: boolean,requestResult: boolean): ServerCommandSource;
static testBlocksCondition(world: ServerWorld,start: BlockPos,end: BlockPos,destination: BlockPos,masked: boolean): OptionalInt;
static testBlocksCondition(context: CommandContext,masked: boolean): OptionalInt;
static createEntityModifier(fun: Function): RedirectModifier;
static method_13308(context: CommandContext): ServerCommandSource;
static method_13285(bl: boolean,context: CommandContext): ServerCommandSource;
static method_13268(context: CommandContext): ServerCommandSource;
static method_13260(collection: Collection,scoreboard: Scoreboard,scoreboardObjective: ScoreboardObjective,bl: boolean,context: CommandContext,success: boolean,result: number): void;
static addOnArguments(node: CommandNode,builder: LiteralArgumentBuilder): LiteralArgumentBuilder;
static method_13253(literalCommandNode: LiteralCommandNode,objectType: DataCommand_ObjectType,bl: boolean,builderx: ArgumentBuilder): ArgumentBuilder;
static executeStoreScore(source: ServerCommandSource,targets: Collection,objective: ScoreboardObjective,requestResult: boolean): ServerCommandSource;
static method_13259(context: CommandContext): ServerCommandSource;
static method_13293(context: CommandContext): Collection;
static method_49419(context: CommandContext): ServerCommandSource;
static method_13252(context: CommandContext): ServerCommandSource;
static method_13291(context: CommandContext): Collection;
static method_13269(bl: boolean,context: CommandContext): ServerCommandSource;
static method_13286(context: CommandContext): ServerCommandSource;
static method_48757(context: CommandContext): ServerCommandSource;
static method_13322(bl: boolean,context: CommandContext): ServerCommandSource;
static method_13249(context: CommandContext): boolean;
static method_13294(dataCommandObject: DataCommandObject,bl: boolean,nbtPath: NbtPathArgumentType_NbtPath,intFunction: IntFunction,context: CommandContext,success: boolean,result: number): void;
static method_48070(commandContext: CommandContext): boolean;
static method_13262(context: CommandContext): boolean;
static method_13321(context: CommandContext): number;
static method_13280(context: CommandContext): boolean;
static method_47527(context: CommandContext): boolean;
static addConditionLogic(root: CommandNode,builder: ArgumentBuilder,positive: boolean,condition: ExecuteCommand_Condition): ArgumentBuilder;
static method_13288(context: CommandContext): boolean;
static method_13277(bl: boolean,bl2: boolean,commandBossBar: CommandBossBar,context: CommandContext,success: boolean,result: number): void;
static method_13282(context: CommandContext): boolean;
static method_13266(context: CommandContext): boolean;
static method_13300(bl: boolean,context: CommandContext): Collection;
static method_13274(context: CommandContext): boolean;
static executeStoreData(source: ServerCommandSource,object: DataCommandObject,path: NbtPathArgumentType_NbtPath,nbtSetter: IntFunction,requestResult: boolean): ServerCommandSource;
static method_48076(context: CommandContext): boolean;
static testLootCondition(source: ServerCommandSource,condition: LootCondition): boolean;
static testScoreCondition(context: CommandContext,condition: BiPredicate): boolean;
static method_13287(bl: boolean,bl2: boolean,context: CommandContext): Collection;
static method_13315(bl: boolean,context: CommandContext): number;
static method_13273(bl: boolean,context: CommandContext): number;
static method_13267(bl: boolean,condition: ExecuteCommand_Condition,context: CommandContext): Collection;
static method_13270(bl: boolean,condition: ExecuteCommand_Condition,context: CommandContext): number;
static method_51967(optionalInt: OptionalInt): Text;
static testScoreMatch(context: CommandContext,range: NumberRange_IntRange): boolean;
static method_13305(existsCondition: ExecuteCommand_ExistsCondition,context: CommandContext): number;
static countPathMatches(object: DataCommandObject,path: NbtPathArgumentType_NbtPath): number;
static method_13258(commandNode: CommandNode,bl: boolean,objectType: DataCommand_ObjectType,builder: ArgumentBuilder): ArgumentBuilder;
static method_22830(context: CommandContext): boolean;
static method_13296(existsCondition: ExecuteCommand_ExistsCondition,context: CommandContext): number;
static method_51965(): Text;
static method_48068(entity: Entity): Optional;
static method_48060(entity: Entity): Stream;
static method_48067(fun: Function,context: CommandContext): Collection;
static method_48071(entity: Entity): Optional;
static method_48064(fun: Function,context: CommandContext): Collection;
static method_48073(entity: Entity): Optional;
static method_48069(entity: Entity): Optional;
static method_48065(entity: Entity): Optional;
static method_48332(entity: Entity): Optional;
static method_48072(entity: Entity): Optional;
static method_48075(entity: Entity): boolean;
static method_13317(objectType: DataCommand_ObjectType,context: CommandContext): number;
static method_13257(a: Integer,b: Integer): boolean;
static method_51968(): Text;
static method_13251(objectType: DataCommand_ObjectType,bl: boolean,context: CommandContext): ServerCommandSource;
static method_13311(objectType: DataCommand_ObjectType,bl: boolean,context: CommandContext): ServerCommandSource;
static method_13309(objectType: DataCommand_ObjectType,bl: boolean,context: CommandContext): ServerCommandSource;
static method_13307(commandContext: CommandContext,result: number): NbtElement;
static method_13301(bl: boolean,objectType: DataCommand_ObjectType,context: CommandContext): Collection;
static method_13284(objectType: DataCommand_ObjectType,bl: boolean,context: CommandContext): ServerCommandSource;
static method_13276(commandContext: CommandContext,result: number): NbtElement;
static method_48074(entity: Entity): boolean;
static method_13264(objectType: DataCommand_ObjectType,bl: boolean,context: CommandContext): ServerCommandSource;
static method_13275(commandContext: CommandContext,result: number): NbtElement;
static method_13299(a: Integer,b: Integer): boolean;
static method_13256(objectType: DataCommand_ObjectType,bl: boolean,context: CommandContext): ServerCommandSource;
static method_48062(serverCommandSource: ServerCommandSource,entity: Entity): List;
static method_51969(): Text;
static method_13250(a: Integer,b: Integer): boolean;
static method_51966(i: number): Text;
static method_13302(a: Integer,b: Integer): boolean;
static method_13279(resultConsumer: ResultConsumer,resultConsumer2: ResultConsumer,context: CommandContext,success: boolean,result: number): void;
static method_13324(commandContext: CommandContext,result: number): NbtElement;
static method_13316(maxCount: Object,count: Object): Message;
static method_13283(commandContext: CommandContext,result: number): NbtElement;
static method_13312(count: Object): Message;
static method_22831(context: CommandContext,builder: SuggestionsBuilder): CompletableFuture;
static method_13318(commandContext: CommandContext,result: number): NbtElement;
static method_13278(consumer: ResultConsumer,consumer2: ResultConsumer): ResultConsumer;
static summon(source: ServerCommandSource,entityType: RegistryEntry_Reference): ServerCommandSource;
static MAX_BLOCKS: number;
static BLOCKS_TOOBIG_EXCEPTION: Dynamic2CommandExceptionType;
static CONDITIONAL_FAIL_EXCEPTION: SimpleCommandExceptionType;
static CONDITIONAL_FAIL_COUNT_EXCEPTION: DynamicCommandExceptionType;
static BINARY_RESULT_CONSUMER: BinaryOperator;
static LOOT_CONDITIONS: SuggestionProvider;
}

//net.minecraft.loot.provider.score.FixedLootScoreProvider
class FixedLootScoreProvider extends JObject, LootScoreProvider{
 getName(): string;
 getName(context: LootContext): string;
 getType(): LootScoreProviderType;
 getRequiredParameters(): Set;
}
class Static_FixedLootScoreProvider {
static create(name: string): LootScoreProvider;
}

//net.minecraft.entity.ai.goal.GoalSelector
class GoalSelector extends JObject{
 add(priority: number,goal: Goal): void;
 remove(goal: Goal): void;
 clear(predicate: Predicate): void;
 tick(): void;
 enableControl(control: Goal_Control): void;
 setTimeInterval(timeInterval: number): void;
 disableControl(control: Goal_Control): void;
 tickGoals(tickAll: boolean): void;
 setControlEnabled(control: Goal_Control,enabled: boolean): void;
 getGoals(): Set;
 getRunningGoals(): Stream;
}
class Static_GoalSelector {
static method_47828(predicate: Predicate,goal: PrioritizedGoal): boolean;
static method_20649(goal: Goal,prioritizedGoal: PrioritizedGoal): boolean;
static usesAny(goal: PrioritizedGoal,controls: EnumSet): boolean;
static method_20650(goal: Goal,prioritizedGoal: PrioritizedGoal): boolean;
static canReplaceAll(goal: PrioritizedGoal,goalsByControl: Map): boolean;
static LOGGER: Logger;
static REPLACEABLE_GOAL: PrioritizedGoal;
}

//net.minecraft.client.item.CompassAnglePredicateProvider
class CompassAnglePredicateProvider extends JObject, ClampedModelPredicateProvider{
 unclampedCall(itemStack: ItemStack,clientWorld: ClientWorld,livingEntity: LivingEntity,i: number): number;
 compassTarget: CompassAnglePredicateProvider_CompassTarget;
}
class Static_CompassAnglePredicateProvider {
static field_38798: number;
}

//net.minecraft.client.render.debug.BeeDebugRenderer$Bee
class BeeDebugRenderer_Bee extends JObject{
 getName(): string;
 toString(): string;
 hasFlower(): boolean;
 isHiveAt(pos: BlockPos): boolean;
 getUuid(): UUID;
 uuid: UUID;
 entityId: number;
 position: Position;
 path: Path;
 hive: BlockPos;
 flower: BlockPos;
 travelTicks: number;
 labels: List;
 blacklist: Set;
}

//net.minecraft.loot.condition.EntityScoresLootCondition
class EntityScoresLootCondition extends JObject, LootCondition{
 test(lootContext: LootContext): boolean;
 test(context: Object): boolean;
 getType(): LootConditionType;
 getRequiredParameters(): Set;
}
class Static_EntityScoresLootCondition {
static create(target: LootContext_EntityTarget): EntityScoresLootCondition_Builder;
static method_32422(boundedIntUnaryOperator: BoundedIntUnaryOperator): Stream;
}

//net.minecraft.util.collection.WeightedList$Entry$1


//net.minecraft.world.gen.densityfunction.DensityFunctionTypes$Offset
interface DensityFunctionTypes_Offset extends JObject, DensityFunction{
 fill(densities: number[],applier: DensityFunction_EachApplier): void;
 maxValue(): number;
 sample(x: number,y: number,z: number): number;
 minValue(): number;
 offsetNoise(): DensityFunction_Noise;
}

//net.minecraft.world.gen.chunk.Blender$DistanceFunction
interface Blender_DistanceFunction extends JObject{
 getDistance(offsetX: number,y: number,offsetZ: number): number;
}

//net.minecraft.world.chunk.ReadableContainer
interface ReadableContainer extends JObject{
 get(x: number,y: number,z: number): Object;
 count(counter: PalettedContainer_Counter): void;
 forEachValue(action: Consumer): void;
 slice(): PalettedContainer;
 serialize(idList: IndexedIterable,paletteProvider: PalettedContainer_PaletteProvider): ReadableContainer_Serialized;
 getPacketSize(): number;
 hasAny(predicate: Predicate): boolean;
 writePacket(buf: PacketByteBuf): void;
}

//net.minecraft.loot.entry.LootPoolEntry
class LootPoolEntry extends JObject, EntryCombiner{
 validate(reporter: LootTableReporter): void;
 getType(): LootPoolEntryType;
}

//net.minecraft.client.render.item.ItemRenderer
class ItemRenderer extends JObject, SynchronousResourceReloader{
 reload(manager: ResourceManager): void;
 getModel(stack: ItemStack,world: World,entity: LivingEntity,seed: number): BakedModel;
 renderItem(stack: ItemStack,renderMode: ModelTransformationMode,leftHanded: boolean,matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,light: number,overlay: number,model: BakedModel): void;
 renderItem(stack: ItemStack,transformationType: ModelTransformationMode,light: number,overlay: number,matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,world: World,seed: number): void;
 renderItem(entity: LivingEntity,item: ItemStack,renderMode: ModelTransformationMode,leftHanded: boolean,matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,world: World,light: number,overlay: number,seed: number): void;
 getModels(): ItemModels;
}
class Static_ItemRenderer {
static usesDynamicDisplay(stack: ItemStack): boolean;
static getArmorGlintConsumer(provider: VertexConsumerProvider,layer: RenderLayer,solid: boolean,glint: boolean): VertexConsumer;
static getDynamicDisplayGlintConsumer(provider: VertexConsumerProvider,layer: RenderLayer,entry: MatrixStack_Entry): VertexConsumer;
static getItemGlintConsumer(vertexConsumers: VertexConsumerProvider,layer: RenderLayer,solid: boolean,glint: boolean): VertexConsumer;
static getDirectDynamicDisplayGlintConsumer(provider: VertexConsumerProvider,layer: RenderLayer,entry: MatrixStack_Entry): VertexConsumer;
static getDirectItemGlintConsumer(provider: VertexConsumerProvider,layer: RenderLayer,solid: boolean,glint: boolean): VertexConsumer;
static ENTITY_ENCHANTMENT_GLINT: Identifier;
static ITEM_ENCHANTMENT_GLINT: Identifier;
static WITHOUT_MODELS: Set;
static field_32937: number;
static field_32938: number;
static field_32934: number;
static COMPASS_WITH_GLINT_GUI_MODEL_MULTIPLIER: number;
static COMPASS_WITH_GLINT_FIRST_PERSON_MODEL_MULTIPLIER: number;
static field_41120: number;
static TRIDENT: ModelIdentifier;
static TRIDENT_IN_HAND: ModelIdentifier;
static SPYGLASS: ModelIdentifier;
static SPYGLASS_IN_HAND: ModelIdentifier;
}

//net.minecraft.unused.packageinfo.PackageInfo6753
interface PackageInfo6753 extends JObject{
}

//net.minecraft.network.message.MessageSignatureStorage
class MessageSignatureStorage extends JObject{
 add(message: SignedMessage): void;
 get(index: number): MessageSignatureData;
 indexOf(signature: MessageSignatureData): number;
}
class Static_MessageSignatureStorage {
static create(): MessageSignatureStorage;
static MISSING: number;
static MAX_ENTRIES: number;
}

//net.minecraft.util.math.Boxes$1


//net.minecraft.util.function.CharPredicate
interface CharPredicate extends JObject{
 test(c: char): boolean;
 or(predicate: CharPredicate): CharPredicate;
 negate(): CharPredicate;
 and(predicate: CharPredicate): CharPredicate;
}

//net.minecraft.world.gen.feature.OreFeatureConfig$Target
class OreFeatureConfig_Target extends JObject{
 target: RuleTest;
 state: BlockState;
}
class Static_OreFeatureConfig_Target {
static method_33996(instance: RecordCodecBuilder_Instance): App;
static method_33998(target: OreFeatureConfig_Target): RuleTest;
static method_33997(target: OreFeatureConfig_Target): BlockState;
static CODEC: Codec;
}

//net.minecraft.world.gen.feature.FillLayerFeatureConfig
class FillLayerFeatureConfig extends JObject, FeatureConfig{
 height: number;
 state: BlockState;
}
class Static_FillLayerFeatureConfig {
static method_28727(config: FillLayerFeatureConfig): Integer;
static method_28725(config: FillLayerFeatureConfig): BlockState;
static method_28726(instance: RecordCodecBuilder_Instance): App;
static CODEC: Codec;
}

//net.minecraft.command.argument.CommandFunctionArgumentType$2


//net.minecraft.util.Pair
class Pair extends JObject{
 setRight(right: Object): void;
 setLeft(left: Object): void;
 getLeft(): Object;
 getRight(): Object;
}

//net.minecraft.command.argument.CommandFunctionArgumentType$1


//net.minecraft.world.World
class World extends JObject, WorldAccess, AutoCloseable{
 close(): void;
 getTime(): long;
 getTimeOfDay(): long;
 disconnect(): void;
 getDimension(): DimensionType;
 getMapState(id: string): MapState;
 getOtherEntities(except: Entity,box: Box,predicate: Predicate): List;
 removeBlockEntity(pos: BlockPos): void;
 sendEntityStatus(entity: Entity,status: byte): void;
 getBiomeAccess(): BiomeAccess;
 isInBuildLimit(pos: BlockPos): boolean;
 putMapState(id: string,state: MapState): void;
 isSavingDisabled(): boolean;
 getNextMapId(): number;
 sendEntityDamage(entity: Entity,damageSource: DamageSource): void;
 hasRain(pos: BlockPos): boolean;
 getDimensionEntry(): RegistryEntry;
 updateComparators(pos: BlockPos,block: Block): void;
 isDay(): boolean;
 isNight(): boolean;
 getSkyAngleRadians(tickDelta: number): number;
 tickEntity(tickConsumer: Consumer,entity: Entity): void;
 shouldTickBlockPos(pos: BlockPos): boolean;
 onBlockChanged(pos: BlockPos,oldBlock: BlockState,newBlock: BlockState): void;
 addBlockEntity(blockEntity: BlockEntity): void;
 createExplosion(entity: Entity,damageSource: DamageSource,behavior: ExplosionBehavior,x: number,y: number,z: number,power: number,createFire: boolean,explosionSourceType: World_ExplosionSourceType,particles: boolean): Explosion;
 createExplosion(entity: Entity,damageSource: DamageSource,behavior: ExplosionBehavior,x: number,y: number,z: number,power: number,createFire: boolean,explosionSourceType: World_ExplosionSourceType): Explosion;
 createExplosion(entity: Entity,damageSource: DamageSource,behavior: ExplosionBehavior,pos: Vec3d,power: number,createFire: boolean,explosionSourceType: World_ExplosionSourceType): Explosion;
 createExplosion(entity: Entity,x: number,y: number,z: number,power: number,createFire: boolean,explosionSourceType: World_ExplosionSourceType): Explosion;
 createExplosion(entity: Entity,x: number,y: number,z: number,power: number,explosionSourceType: World_ExplosionSourceType): Explosion;
 setMobSpawnOptions(spawnMonsters: boolean,spawnAnimals: boolean): void;
 isTopSolid(pos: BlockPos,entity: Entity): boolean;
 isDirectionSolid(pos: BlockPos,entity: Entity,direction: Direction): boolean;
 asString(): string;
 getDimensionKey(): RegistryKey;
 getSpawnPos(): BlockPos;
 getRainGradient(delta: number): number;
 getThunderGradient(delta: number): number;
 addParticle(parameters: ParticleEffect,alwaysSpawn: boolean,x: number,y: number,z: number,velocityX: number,velocityY: number,velocityZ: number): void;
 addParticle(parameters: ParticleEffect,x: number,y: number,z: number,velocityX: number,velocityY: number,velocityZ: number): void;
 isDebugWorld(): boolean;
 setRainGradient(rainGradient: number): void;
 setThunderGradient(thunderGradient: number): void;
 syncGlobalEvent(eventId: number,pos: BlockPos,data: number): void;
 getEntitiesByType(filter: TypeFilter,box: Box,predicate: Predicate): List;
 calculateAmbientDarkness(): void;
 addFireworkParticle(x: number,y: number,z: number,velocityX: number,velocityY: number,velocityZ: number,nbt: NbtCompound): void;
 getRandomPosInChunk(x: number,y: number,z: number,i: number): BlockPos;
 getProfilerSupplier(): Supplier;
 setLightningTicksLeft(lightningTicksLeft: number): void;
 addBlockEntityTicker(ticker: BlockEntityTickInvoker): void;
 updateNeighborsAlways(pos: BlockPos,sourceBlock: Block): void;
 addImportantParticle(parameters: ParticleEffect,x: number,y: number,z: number,velocityX: number,velocityY: number,velocityZ: number): void;
 addImportantParticle(parameters: ParticleEffect,alwaysSpawn: boolean,x: number,y: number,z: number,velocityX: number,velocityY: number,velocityZ: number): void;
 playSoundAtBlockCenter(pos: BlockPos,sound: SoundEvent,category: SoundCategory,volume: number,pitch: number,useDistance: boolean): void;
 updateNeighborsExcept(pos: BlockPos,sourceBlock: Block,direction: Direction): void;
 shouldUpdatePostDeath(entity: Entity): boolean;
 scheduleBlockRerenderIfNeeded(pos: BlockPos,old: BlockState,updated: BlockState): void;
 addDetailsToCrashReport(report: CrashReport): CrashReportSection;
 canSetBlock(pos: BlockPos): boolean;
 getScoreboard(): Scoreboard;
 updateListeners(pos: BlockPos,oldState: BlockState,newState: BlockState,flags: number): void;
 canPlayerModifyAt(player: PlayerEntity,pos: BlockPos): boolean;
 getLocalDifficulty(pos: BlockPos): LocalDifficulty;
 getBlockEntity(pos: BlockPos): BlockEntity;
 getFluidState(pos: BlockPos): FluidState;
 getBlockState(pos: BlockPos): BlockState;
 setBlockState(pos: BlockPos,state: BlockState,flags: number): boolean;
 setBlockState(pos: BlockPos,state: BlockState): boolean;
 setBlockState(pos: BlockPos,state: BlockState,flags: number,maxUpdateDepth: number): boolean;
 getChunk(chunkX: number,chunkZ: number): Chunk;
 getChunk(chunkX: number,chunkZ: number,leastStatus: ChunkStatus,create: boolean): Chunk;
 getChunk(i: number,j: number): WorldChunk;
 markDirty(pos: BlockPos): void;
 shouldTickBlocksInChunk(chunkPos: long): boolean;
 addSyncedBlockEvent(pos: BlockPos,block: Block,type: number,data: number): void;
 setBlockBreakingInfo(entityId: number,pos: BlockPos,progress: number): void;
 getLightingProvider(): LightingProvider;
 playSoundFromEntity(except: PlayerEntity,entity: Entity,sound: SoundEvent,category: SoundCategory,volume: number,pitch: number): void;
 playSoundFromEntity(except: PlayerEntity,entity: Entity,sound: RegistryEntry,category: SoundCategory,volume: number,pitch: number,seed: long): void;
 addBlockBreakParticles(pos: BlockPos,state: BlockState): void;
 collectEntitiesByType(filter: TypeFilter,box: Box,predicate: Predicate,result: List,limit: number): void;
 collectEntitiesByType(filter: TypeFilter,box: Box,predicate: Predicate,result: List): void;
 getSpawnAngle(): number;
 breakBlock(pos: BlockPos,drop: boolean,breakingEntity: Entity,maxUpdateDepth: number): boolean;
 getLevelProperties(): WorldProperties;
 getEntityById(id: number): Entity;
 getRegistryKey(): RegistryKey;
 getChunkAsView(chunkX: number,chunkZ: number): BlockView;
 getWorldBorder(): WorldBorder;
 getWorldChunk(pos: BlockPos): WorldChunk;
 getProfiler(): Profiler;
 getRegistryManager(): DynamicRegistryManager;
 getTopY(heightmap: Heightmap_Type,x: number,z: number): number;
 isRaining(): boolean;
 isThundering(): boolean;
 testBlockState(pos: BlockPos,state: Predicate): boolean;
 playSound(except: PlayerEntity,x: number,y: number,z: number,sound: SoundEvent,category: SoundCategory,volume: number,pitch: number): void;
 playSound(except: PlayerEntity,x: number,y: number,z: number,sound: RegistryEntry,category: SoundCategory,volume: number,pitch: number,seed: long): void;
 playSound(except: PlayerEntity,x: number,y: number,z: number,sound: SoundEvent,category: SoundCategory,volume: number,pitch: number,seed: long): void;
 playSound(x: number,y: number,z: number,sound: SoundEvent,category: SoundCategory,volume: number,pitch: number,useDistance: boolean): void;
 playSound(except: PlayerEntity,pos: BlockPos,sound: SoundEvent,category: SoundCategory,volume: number,pitch: number): void;
 playSound(except: Entity,pos: BlockPos,sound: SoundEvent,category: SoundCategory,volume: number,pitch: number): void;
 getRandom(): Random;
 getRecipeManager(): RecipeManager;
 sendPacket(packet: Packet): void;
 getServer(): MinecraftServer;
 getGameRules(): GameRules;
 isClient(): boolean;
 getDamageSources(): DamageSources;
 updateNeighbor(state: BlockState,pos: BlockPos,sourceBlock: Block,sourcePos: BlockPos,notify: boolean): void;
 updateNeighbor(pos: BlockPos,sourceBlock: Block,sourcePos: BlockPos): void;
 removeBlock(pos: BlockPos,move: boolean): boolean;
 replaceWithStateForNeighborUpdate(direction: Direction,neighborState: BlockState,pos: BlockPos,neighborPos: BlockPos,flags: number,maxUpdateDepth: number): void;
 getTickOrder(): long;
 getAmbientDarkness(): number;
 getSeaLevel(): number;
 testFluidState(pos: BlockPos,state: Predicate): boolean;
 random: Random;
 isClient: boolean;
}
class Static_World {
static isValid(pos: BlockPos): boolean;
static method_44014(registryEntry: RegistryEntry): IllegalArgumentException;
static method_47576(predicate: Predicate,list: List,i: number,typeFilter: TypeFilter,entity: Entity): LazyIterationConsumer_NextIteration;
static method_31593(entity2: Entity,predicate: Predicate,list: List,entity: Entity): void;
static isValidHorizontally(pos: BlockPos): boolean;
static isInvalidVertically(y: number): boolean;
static CODEC: Codec;
static OVERWORLD: RegistryKey;
static NETHER: RegistryKey;
static END: RegistryKey;
static HORIZONTAL_LIMIT: number;
static MAX_UPDATE_DEPTH: number;
static field_30967: number;
static field_30968: number;
static field_30969: number;
static MAX_Y: number;
static MIN_Y: number;
}

//net.minecraft.client.gui.widget.GridWidget$Adder
class GridWidget_Adder extends JObject{
 add(widget: Widget,occupiedColumns: number,positioner: Positioner): Widget;
 add(widget: Widget,positioner: Positioner): Widget;
 add(widget: Widget,occupiedColumns: number): Widget;
 add(widget: Widget): Widget;
 copyPositioner(): Positioner;
 getMainPositioner(): Positioner;
 getGridWidget(): GridWidget;
}

//net.minecraft.entity.ai.brain.task.GoToWorkTask
class GoToWorkTask extends JObject{
}
class Static_GoToWorkTask {
static create(): Task;
static method_46888(context: TaskTriggerer_TaskContext): App;
static method_46890(taskContext: TaskTriggerer_TaskContext,memoryQueryResult: MemoryQueryResult,memoryQueryResult2: MemoryQueryResult,world: ServerWorld,entity: VillagerEntity,time: long): boolean;
static method_46892(globalPos: GlobalPos,jobSiteWorld: ServerWorld): Optional;
static method_46889(taskContext: TaskTriggerer_TaskContext,potentialJobSite: MemoryQueryResult,jobSite: MemoryQueryResult): TaskRunnable;
static method_46893(poiType: RegistryEntry): Optional;
static method_46894(registryEntry: RegistryEntry,profession: VillagerProfession): boolean;
static method_46891(villagerEntity: VillagerEntity,serverWorld: ServerWorld,profession: VillagerProfession): void;
}

//net.minecraft.structure.rule.blockentity.AppendLootRuleBlockEntityModifier
class AppendLootRuleBlockEntityModifier extends JObject, RuleBlockEntityModifier{
 getType(): RuleBlockEntityModifierType;
 modifyBlockEntityNbt(random: Random,nbt: NbtCompound): NbtCompound;
}
class Static_AppendLootRuleBlockEntityModifier {
static method_49893(instance: RecordCodecBuilder_Instance): App;
static method_49894(modifier: AppendLootRuleBlockEntityModifier): Identifier;
static method_49895(nbtCompound: NbtCompound,nbtx: NbtElement): void;
static LOGGER: Logger;
static CODEC: Codec;
}

//net.minecraft.util.thread.SampleableExecutor
interface SampleableExecutor extends JObject{
 createSamplers(): List;
}

//net.minecraft.client.search.SearchManager
class SearchManager extends JObject, SynchronousResourceReloader{
 get(key: SearchManager_Key): SearchProvider;
 put(key: SearchManager_Key,providerGetter: SearchManager_ProviderGetter): void;
 reload(manager: ResourceManager): void;
 reload(key: SearchManager_Key,values: List): void;
}
class Static_SearchManager {
static ITEM_TOOLTIP: SearchManager_Key;
static ITEM_TAG: SearchManager_Key;
static RECIPE_OUTPUT: SearchManager_Key;
}

//net.minecraft.server.world.ServerEntityManager
class ServerEntityManager extends JObject, AutoCloseable{
 flush(): void;
 close(): void;
 save(): void;
 isLoaded(chunkPos: long): boolean;
 has(uuid: UUID): boolean;
 tick(): void;
 dump(writer: Writer): void;
 getLookup(): EntityLookup;
 addEntity(entity: EntityLike): boolean;
 updateTrackingStatus(chunkPos: ChunkPos,levelType: ChunkLevelType): void;
 updateTrackingStatus(chunkPos: ChunkPos,trackingStatus: EntityTrackingStatus): void;
 getDebugString(): string;
 shouldTick(pos: BlockPos): boolean;
 shouldTick(pos: ChunkPos): boolean;
 loadEntities(entities: Stream): void;
 addEntities(entities: Stream): void;
}
class Static_ServerEntityManager {
static getNeededLoadStatus(entity: EntityLike,current: EntityTrackingStatus): EntityTrackingStatus;
static method_31821(section: EntityTrackingSection): Stream;
static method_31817(chunkPos: ChunkPos,throwable: Throwable): Void;
static method_31861(entity: EntityLike): boolean;
static method_31856(entity: EntityLike): void;
static method_31859(entity: EntityLike): boolean;
static method_31854(entity: EntityLike): void;
static method_31860(entity: EntityLike): boolean;
static method_31862(entity: EntityLike): boolean;
static LOGGER: Logger;
}

//net.minecraft.util.math.floatprovider.FloatProviderType
interface FloatProviderType extends JObject{
 codec(): Codec;
}
class Static_FloatProviderType {
static register(id: string,codec: Codec): FloatProviderType;
static method_33924(codec: Codec): Codec;
static CONSTANT: FloatProviderType;
static UNIFORM: FloatProviderType;
static CLAMPED_NORMAL: FloatProviderType;
static TRAPEZOID: FloatProviderType;
}

//net.minecraft.unused.packageinfo.PackageInfo6764
interface PackageInfo6764 extends JObject{
}

//net.minecraft.loot.LootDataType
class LootDataType extends JObject{
 validate(reporter: LootTableReporter,key: LootDataKey,value: Object): void;
 getId(): string;
 parse(id: Identifier,json: JsonElement): Optional;
 getGson(): Gson;
}
class Static_LootDataType {
static stream(): Stream;
static validator(): LootDataType_Validator;
static tableValidator(): LootDataType_Validator;
static method_51208(reporter: LootTableReporter,key: LootDataKey,value: LootTable): void;
static parserFactory(clazz: Class,combiner: Function): BiFunction;
static parserFactory(clazz: Class): BiFunction;
static method_51211(class_: Class,gson: Gson,dataTypeId: string): BiFunction;
static method_51213(class_: Class,fun: Function,class2: Class,gson: Gson,dataTypeId: string): BiFunction;
static method_51205(gson: Gson,class_: Class,string: string,id: Identifier,json: JsonElement): Optional;
static method_51207(reporter: LootTableReporter,key: LootDataKey,value: LootContextAware): void;
static method_51206(gson: Gson,class_: Class,fun: Function,class2: Class,string: string,id: Identifier,json: JsonElement): Optional;
static LOGGER: Logger;
static PREDICATES: LootDataType;
static ITEM_MODIFIERS: LootDataType;
static LOOT_TABLES: LootDataType;
}

//net.minecraft.world.gen.feature.MiscPlacedFeatures
class MiscPlacedFeatures extends JObject{
}
class Static_MiscPlacedFeatures {
static bootstrap(featureRegisterable: Registerable): void;
static ICE_SPIKE: RegistryKey;
static ICE_PATCH: RegistryKey;
static FOREST_ROCK: RegistryKey;
static ICEBERG_PACKED: RegistryKey;
static ICEBERG_BLUE: RegistryKey;
static BLUE_ICE: RegistryKey;
static LAKE_LAVA_UNDERGROUND: RegistryKey;
static LAKE_LAVA_SURFACE: RegistryKey;
static DISK_CLAY: RegistryKey;
static DISK_GRAVEL: RegistryKey;
static DISK_SAND: RegistryKey;
static DISK_GRASS: RegistryKey;
static FREEZE_TOP_LAYER: RegistryKey;
static VOID_START_PLATFORM: RegistryKey;
static DESERT_WELL: RegistryKey;
static SPRING_LAVA: RegistryKey;
static SPRING_LAVA_FROZEN: RegistryKey;
static SPRING_WATER: RegistryKey;
}

//net.minecraft.world.LocalDifficulty
class LocalDifficulty extends JObject{
 getGlobalDifficulty(): Difficulty;
 getClampedLocalDifficulty(): number;
 getLocalDifficulty(): number;
 isAtLeastHard(): boolean;
 isHarderThan(difficulty: number): boolean;
}
class Static_LocalDifficulty {
static field_29953: number;
static field_29954: number;
static field_29955: number;
}

//net.minecraft.loot.condition.TimeCheckLootCondition$Builder
class TimeCheckLootCondition_Builder extends JObject, LootCondition_Builder{
 build(): LootCondition;
 build(): TimeCheckLootCondition;
 period(period: long): TimeCheckLootCondition_Builder;
}

//net.minecraft.village.ZombieSiegeManager
class ZombieSiegeManager extends JObject, Spawner{
 spawn(world: ServerWorld,spawnMonsters: boolean,spawnAnimals: boolean): number;
}
class Static_ZombieSiegeManager {
static LOGGER: Logger;
}

//net.minecraft.world.CollisionView
interface CollisionView extends JObject, BlockView{
 findSupportingBlockPos(entity: Entity,box: Box): Optional;
 findClosestCollision(entity: Entity,shape: VoxelShape,target: Vec3d,x: number,y: number,z: number): Optional;
 doesNotIntersectEntities(except: Entity,shape: VoxelShape): boolean;
 doesNotIntersectEntities(entity: Entity): boolean;
 getEntityCollisions(entity: Entity,box: Box): List;
 getChunkAsView(chunkX: number,chunkZ: number): BlockView;
 getWorldBorder(): WorldBorder;
 canPlace(state: BlockState,pos: BlockPos,context: ShapeContext): boolean;
 getBlockCollisions(entity: Entity,box: Box): Iterable;
 isSpaceEmpty(box: Box): boolean;
 isSpaceEmpty(entity: Entity,box: Box): boolean;
 isSpaceEmpty(entity: Entity): boolean;
 getCollisions(entity: Entity,box: Box): Iterable;
 canCollide(entity: Entity,box: Box): boolean;
}
class Static_CollisionView {
static method_51716(pos: BlockPos_Mutable,voxelShape: VoxelShape): VoxelShape;
static method_39452(voxelShape: VoxelShape): Stream;
static method_51715(pos: BlockPos_Mutable,voxelShape: VoxelShape): BlockPos;
static method_39451(d: number,e: number,f: number,box: Box): Box;
static method_51717(pos: BlockPos_Mutable,voxelShape: VoxelShape): VoxelShape;
}

//net.minecraft.client.particle.SpellParticle$EntityAmbientFactory
class SpellParticle_EntityAmbientFactory extends JObject, ParticleFactory{
 createParticle(defaultParticleType: DefaultParticleType,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
 createParticle(particleEffect: ParticleEffect,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
}

//net.minecraft.client.realms.gui.RealmsWorldSlotButton$State
class RealmsWorldSlotButton_State extends JObject{
 empty: boolean;
 minigame: boolean;
 action: RealmsWorldSlotButton_Action;
}

//net.minecraft.client.render.block.entity.BrushableBlockEntityRenderer
class BrushableBlockEntityRenderer extends JObject, BlockEntityRenderer{
 render(entity: BlockEntity,tickDelta: number,matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,light: number,overlay: number): void;
 render(brushableBlockEntity: BrushableBlockEntity,f: number,matrixStack: MatrixStack,vertexConsumerProvider: VertexConsumerProvider,i: number,j: number): void;
}

//net.minecraft.network.encryption.NetworkEncryptionUtils
class NetworkEncryptionUtils extends JObject{
}
class Static_NetworkEncryptionUtils {
static hash(bytes: byte[][]): byte[];
static decrypt(key: Key,data: byte[]): byte[];
static encrypt(key: Key,data: byte[]): byte[];
static decodeEncodedRsaPublicKey(key: byte[]): PublicKey;
static decodeEncodedRsaPrivateKey(key: byte[]): PrivateKey;
static encodeRsaPrivateKey(key: PrivateKey): string;
static generateServerKeyPair(): KeyPair;
static crypt(opMode: number,key: Key,data: byte[]): byte[];
static decodeRsaPrivateKeyPem(key: string): PrivateKey;
static decodeRsaPublicKeyPem(key: string): PublicKey;
static computeServerId(baseServerId: string,publicKey: PublicKey,secretKey: SecretKey): byte[];
static generateSecretKey(): SecretKey;
static decodePem(key: string,prefix: string,suffix: string,decoder: NetworkEncryptionUtils_KeyDecoder): Key;
static decryptSecretKey(privateKey: PrivateKey,encryptedSecretKey: byte[]): SecretKey;
static method_43526(key: string): DataResult;
static encodeRsaPublicKey(key: PublicKey): string;
static method_43527(key: string): DataResult;
static createCipher(opMode: number,algorithm: string,key: Key): Cipher;
static cipherFromKey(opMode: number,key: Key): Cipher;
static AES: string;
static AES_KEY_LENGTH: number;
static RSA: string;
static RSA_KEY_LENGTH: number;
static ISO_8859_1: string;
static SHA1: string;
static SHA256_WITH_RSA: string;
static SHA256_BITS: number;
static RSA_PRIVATE_KEY_PREFIX: string;
static RSA_PRIVATE_KEY_SUFFIX: string;
static RSA_PUBLIC_KEY_PREFIX: string;
static RSA_PUBLIC_KEY_SUFFIX: string;
static LINEBREAK: string;
static BASE64_ENCODER: Base64_Encoder;
static RSA_PUBLIC_KEY_CODEC: Codec;
static RSA_PRIVATE_KEY_CODEC: Codec;
}

//net.minecraft.client.render.model.json.ModelTransformation$Deserializer
class ModelTransformation_Deserializer extends JObject, JsonDeserializer{
 deserialize(functionJson: JsonElement,unused: Type,context: JsonDeserializationContext): Object;
 deserialize(jsonElement: JsonElement,type: Type,jsonDeserializationContext: JsonDeserializationContext): ModelTransformation;
}

//net.minecraft.data.server.recipe.SmithingTrimRecipeJsonBuilder
class SmithingTrimRecipeJsonBuilder extends JObject{
 criterion(name: string,conditions: CriterionConditions): SmithingTrimRecipeJsonBuilder;
 offerTo(exporter: Consumer,recipeId: Identifier): void;
}
class Static_SmithingTrimRecipeJsonBuilder {
static create(template: Ingredient,base: Ingredient,addition: Ingredient,category: RecipeCategory): SmithingTrimRecipeJsonBuilder;
}

//net.minecraft.client.render.TexturedRenderLayers
class TexturedRenderLayers extends JObject{
}
class Static_TexturedRenderLayers {
static createShieldPatternTextureId(bannerPattern: RegistryKey): SpriteIdentifier;
static createDecoratedPotPatternTextureId(potPatternKey: RegistryKey): SpriteIdentifier;
static createChestTextureId(variant: string): SpriteIdentifier;
static getHangingSignTextureId(signType: WoodType): SpriteIdentifier;
static getDecoratedPotPatternTextureId(potPatternKey: RegistryKey): SpriteIdentifier;
static createSignTextureId(type: WoodType): SpriteIdentifier;
static createBannerPatternTextureId(bannerPattern: RegistryKey): SpriteIdentifier;
static createHangingSignTextureId(type: WoodType): SpriteIdentifier;
static getBannerPatternTextureId(bannerPattern: RegistryKey): SpriteIdentifier;
static getShieldPatternTextureId(bannerPattern: RegistryKey): SpriteIdentifier;
static getEntitySolid(): RenderLayer;
static getEntityTranslucentCull(): RenderLayer;
static getItemEntityTranslucentCull(): RenderLayer;
static getEntityCutout(): RenderLayer;
static getArmorTrims(): RenderLayer;
static addDefaultTextures(adder: Consumer): void;
static getShieldPatterns(): RenderLayer;
static getHangingSign(): RenderLayer;
static getChest(): RenderLayer;
static getSignTextureId(signType: WoodType): SpriteIdentifier;
static getSign(): RenderLayer;
static getShulkerBoxes(): RenderLayer;
static getBeds(): RenderLayer;
static getBannerPatterns(): RenderLayer;
static method_24068(colorName: string): SpriteIdentifier;
static method_24060(i: number): SpriteIdentifier[];
static method_24061(color: DyeColor): SpriteIdentifier;
static getChestTextureId(type: ChestType,single: SpriteIdentifier,left: SpriteIdentifier,right: SpriteIdentifier): SpriteIdentifier;
static getChestTextureId(blockEntity: BlockEntity,type: ChestType,christmas: boolean): SpriteIdentifier;
static SHULKER_BOXES_ATLAS_TEXTURE: Identifier;
static BEDS_ATLAS_TEXTURE: Identifier;
static BANNER_PATTERNS_ATLAS_TEXTURE: Identifier;
static SHIELD_PATTERNS_ATLAS_TEXTURE: Identifier;
static SIGNS_ATLAS_TEXTURE: Identifier;
static CHEST_ATLAS_TEXTURE: Identifier;
static ARMOR_TRIMS_ATLAS_TEXTURE: Identifier;
static DECORATED_POT_ATLAS_TEXTURE: Identifier;
static SHULKER_BOXES_RENDER_LAYER: RenderLayer;
static BEDS_RENDER_LAYER: RenderLayer;
static BANNER_PATTERNS_RENDER_LAYER: RenderLayer;
static SHIELD_PATTERNS_RENDER_LAYER: RenderLayer;
static SIGN_RENDER_LAYER: RenderLayer;
static CHEST_RENDER_LAYER: RenderLayer;
static ARMOR_TRIMS_RENDER_LAYER: RenderLayer;
static ENTITY_SOLID: RenderLayer;
static ENTITY_CUTOUT: RenderLayer;
static ITEM_ENTITY_TRANSLUCENT_CULL: RenderLayer;
static ENTITY_TRANSLUCENT_CULL: RenderLayer;
static SHULKER_TEXTURE_ID: SpriteIdentifier;
static COLORED_SHULKER_BOXES_TEXTURES: List;
static SIGN_TYPE_TEXTURES: Map;
static HANGING_SIGN_TYPE_TEXTURES: Map;
static BANNER_PATTERN_TEXTURES: Map;
static SHIELD_PATTERN_TEXTURES: Map;
static DECORATED_POT_PATTERN_TEXTURES: Map;
static BED_TEXTURES: SpriteIdentifier[];
static TRAPPED: SpriteIdentifier;
static TRAPPED_LEFT: SpriteIdentifier;
static TRAPPED_RIGHT: SpriteIdentifier;
static CHRISTMAS: SpriteIdentifier;
static CHRISTMAS_LEFT: SpriteIdentifier;
static CHRISTMAS_RIGHT: SpriteIdentifier;
static NORMAL: SpriteIdentifier;
static NORMAL_LEFT: SpriteIdentifier;
static NORMAL_RIGHT: SpriteIdentifier;
static ENDER: SpriteIdentifier;
}

//net.minecraft.entity.Tameable
interface Tameable extends JObject{
 getOwner(): LivingEntity;
 getOwnerUuid(): UUID;
 method_48926(): EntityView;
}

//net.minecraft.network.packet.s2c.play.ClearTitleS2CPacket
class ClearTitleS2CPacket extends JObject, Packet{
 apply(clientPlayPacketListener: ClientPlayPacketListener): void;
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
 shouldReset(): boolean;
}

//net.minecraft.client.render.DiffuseLighting
class DiffuseLighting extends JObject{
}
class Static_DiffuseLighting {
static disableGuiDepthLighting(): void;
static enableGuiDepthLighting(): void;
static enableForLevel(positionMatrix: Matrix4f): void;
static disableForLevel(positionMatrix: Matrix4f): void;
static method_34742(): void;
static field_24426: Vector3f;
static field_24427: Vector3f;
static field_24428: Vector3f;
static field_24429: Vector3f;
static field_29567: Vector3f;
static field_29568: Vector3f;
}

//net.minecraft.screen.ScreenHandlerType
class ScreenHandlerType extends JObject, ToggleableFeature{
 create(syncId: number,playerInventory: PlayerInventory): ScreenHandler;
 getRequiredFeatures(): FeatureSet;
}
class Static_ScreenHandlerType {
static register(id: string,factory: ScreenHandlerType_Factory): ScreenHandlerType;
static register(id: string,factory: ScreenHandlerType_Factory,requiredFeatures: FeatureFlag[]): ScreenHandlerType;
static method_17436(syncId: number,playerInventory: PlayerInventory): LecternScreenHandler;
static GENERIC_9X1: ScreenHandlerType;
static GENERIC_9X2: ScreenHandlerType;
static GENERIC_9X3: ScreenHandlerType;
static GENERIC_9X4: ScreenHandlerType;
static GENERIC_9X5: ScreenHandlerType;
static GENERIC_9X6: ScreenHandlerType;
static GENERIC_3X3: ScreenHandlerType;
static ANVIL: ScreenHandlerType;
static BEACON: ScreenHandlerType;
static BLAST_FURNACE: ScreenHandlerType;
static BREWING_STAND: ScreenHandlerType;
static CRAFTING: ScreenHandlerType;
static ENCHANTMENT: ScreenHandlerType;
static FURNACE: ScreenHandlerType;
static GRINDSTONE: ScreenHandlerType;
static HOPPER: ScreenHandlerType;
static LECTERN: ScreenHandlerType;
static LOOM: ScreenHandlerType;
static MERCHANT: ScreenHandlerType;
static SHULKER_BOX: ScreenHandlerType;
static SMITHING: ScreenHandlerType;
static SMOKER: ScreenHandlerType;
static CARTOGRAPHY_TABLE: ScreenHandlerType;
static STONECUTTER: ScreenHandlerType;
}

//net.minecraft.loot.condition.InvertedLootCondition
class InvertedLootCondition extends JObject, LootCondition{
 test(lootContext: LootContext): boolean;
 test(context: Object): boolean;
 validate(reporter: LootTableReporter): void;
 getType(): LootConditionType;
 getRequiredParameters(): Set;
}
class Static_InvertedLootCondition {
static builder(term: LootCondition_Builder): LootCondition_Builder;
static method_887(invertedLootCondition: InvertedLootCondition): LootCondition;
}

//net.minecraft.recipe.CuttingRecipe$Serializer$RecipeFactory
interface CuttingRecipe_Serializer_RecipeFactory extends JObject{
 create(id: Identifier,group: string,input: Ingredient,output: ItemStack): CuttingRecipe;
}

//net.minecraft.client.render.Tessellator
class Tessellator extends JObject{
 getBuffer(): BufferBuilder;
 draw(): void;
}
class Static_Tessellator {
static getInstance(): Tessellator;
static field_32051: number;
static DEFAULT_BUFFER_CAPACITY: number;
static INSTANCE: Tessellator;
}

//net.minecraft.client.network.MultiplayerServerListPinger$1


//net.minecraft.recipe.BrewingRecipeRegistry
class BrewingRecipeRegistry extends JObject{
}
class Static_BrewingRecipeRegistry {
static craft(ingredient: ItemStack,input: ItemStack): ItemStack;
static isPotionRecipeIngredient(stack: ItemStack): boolean;
static registerPotionRecipe(input: Potion,item: Item,output: Potion): void;
static isItemRecipeIngredient(stack: ItemStack): boolean;
static registerDefaults(): void;
static isValidIngredient(stack: ItemStack): boolean;
static isBrewable(potion: Potion): boolean;
static hasRecipe(input: ItemStack,ingredient: ItemStack): boolean;
static hasItemRecipe(input: ItemStack,ingredient: ItemStack): boolean;
static hasPotionRecipe(input: ItemStack,ingredient: ItemStack): boolean;
static registerPotionType(item: Item): void;
static registerItemRecipe(input: Item,ingredient: Item,output: Item): void;
static method_8073(stack: ItemStack): boolean;
static field_30942: number;
static POTION_RECIPES: List;
static ITEM_RECIPES: List;
static POTION_TYPES: List;
static POTION_TYPE_PREDICATE: Predicate;
}

//net.minecraft.server.dedicated.command.SetIdleTimeoutCommand
class SetIdleTimeoutCommand extends JObject{
}
class Static_SetIdleTimeoutCommand {
static register(dispatcher: CommandDispatcher): void;
static execute(source: ServerCommandSource,minutes: number): number;
static method_52077(i: number): Text;
static method_13632(context: CommandContext): number;
static method_13633(source: ServerCommandSource): boolean;
}

//net.minecraft.client.particle.FireworksSparkParticle
class FireworksSparkParticle extends JObject{
}

//net.minecraft.entity.ai.AboveGroundTargeting
class AboveGroundTargeting extends JObject{
}
class Static_AboveGroundTargeting {
static find(entity: PathAwareEntity,horizontalRange: number,verticalRange: number,x: number,z: number,angle: number,maxAboveSolid: number,minAboveSolid: number): Vec3d;
static method_31525(pathAwareEntity: PathAwareEntity,i: number,j: number,d: number,e: number,f: number,bl: boolean,k: number,l: number): BlockPos;
static method_31526(pathAwareEntity: PathAwareEntity,pos: BlockPos): boolean;
}

//net.minecraft.client.util.telemetry.WorldLoadedEvent$1


//net.minecraft.network.message.MessageDecorator
interface MessageDecorator extends JObject{
 decorate(sender: ServerPlayerEntity,message: Text): CompletableFuture;
}
class Static_MessageDecorator {
static method_44303(sender: ServerPlayerEntity,message: Text): CompletableFuture;
static NOOP: MessageDecorator;
}

//net.minecraft.client.sound.Sound
class Sound extends JObject, SoundContainer{
 toString(): string;
 getLocation(): Identifier;
 getIdentifier(): Identifier;
 getVolume(): FloatSupplier;
 getSound(random: Random): Sound;
 getSound(random: Random): Object;
 getWeight(): number;
 getRegistrationType(): Sound_RegistrationType;
 getPitch(): FloatSupplier;
 preload(soundSystem: SoundSystem): void;
 isStreamed(): boolean;
 isPreloaded(): boolean;
 getAttenuation(): number;
}
class Static_Sound {
static FINDER: ResourceFinder;
}

//net.minecraft.util.math.noise.InterpolatedNoiseSampler
class InterpolatedNoiseSampler extends JObject, DensityFunction_Base{
 maxValue(): number;
 sample(pos: DensityFunction_NoisePos): number;
 addDebugInfo(info: StringBuilder): void;
 minValue(): number;
 getCodecHolder(): CodecHolder;
 copyWithRandom(random: Random): InterpolatedNoiseSampler;
}
class Static_InterpolatedNoiseSampler {
static createBase3dNoiseFunction(xzScale: number,yScale: number,xzFactor: number,yFactor: number,smearScaleMultiplier: number): InterpolatedNoiseSampler;
static method_42391(interpolatedNoiseSampler: InterpolatedNoiseSampler): Double;
static method_42390(interpolatedNoiseSampler: InterpolatedNoiseSampler): Double;
static method_42385(instance: RecordCodecBuilder_Instance): App;
static method_42389(interpolatedNoiseSampler: InterpolatedNoiseSampler): Double;
static method_42387(interpolatedNoiseSampler: InterpolatedNoiseSampler): Double;
static method_42388(interpolatedNoiseSampler: InterpolatedNoiseSampler): Double;
static SCALE_AND_FACTOR_RANGE: Codec;
static MAP_CODEC: MapCodec;
static CODEC: CodecHolder;
}

//net.minecraft.server.command.ServerCommandSource
class ServerCommandSource extends JObject, CommandSource{
 getName(): string;
 getDisplayName(): Text;
 getPosition(): Vec3d;
 getEntity(): Entity;
 getWorldKeys(): Set;
 getSignedArguments(): SignedCommandArguments;
 getMessageChainTaskQueue(): FutureQueue;
 withSignedArguments(signedArguments: SignedCommandArguments): ServerCommandSource;
 getEntityAnchor(): EntityAnchorArgumentType_EntityAnchor;
 withLevel(level: number): ServerCommandSource;
 getReturnValueConsumer(): IntConsumer;
 getPlayerNames(): Collection;
 mergeConsumers(consumer: ResultConsumer,merger: BinaryOperator): ServerCommandSource;
 withEntity(entity: Entity): ServerCommandSource;
 withLookingAt(position: Vec3d): ServerCommandSource;
 withLookingAt(entity: Entity,anchor: EntityAnchorArgumentType_EntityAnchor): ServerCommandSource;
 withEntityAnchor(anchor: EntityAnchorArgumentType_EntityAnchor): ServerCommandSource;
 withRotation(rotation: Vec2f): ServerCommandSource;
 withWorld(world: ServerWorld): ServerCommandSource;
 withPosition(position: Vec3d): ServerCommandSource;
 sendMessage(message: Text): void;
 shouldFilterText(recipient: ServerPlayerEntity): boolean;
 sendChatMessage(message: SentMessage,filterMaskEnabled: boolean,params: MessageType_Parameters): void;
 onCommandComplete(context: CommandContext,success: boolean,result: number): void;
 withConsumer(consumer: ResultConsumer): ServerCommandSource;
 getTeamNames(): Collection;
 getWorld(): ServerWorld;
 hasPermissionLevel(level: number): boolean;
 sendFeedback(feedbackSupplier: Supplier,broadcastToOps: boolean): void;
 sendError(message: Text): void;
 getCompletions(context: CommandContext): CompletableFuture;
 getSoundIds(): Stream;
 getRecipeIds(): Stream;
 listIdSuggestions(registryRef: RegistryKey,suggestedIdType: CommandSource_SuggestedIdType,builder: SuggestionsBuilder,context: CommandContext): CompletableFuture;
 withMessageChainTaskQueue(messageChainTaskQueue: FutureQueue): ServerCommandSource;
 withReturnValueConsumer(returnValueConsumer: IntConsumer): ServerCommandSource;
 getEnabledFeatures(): FeatureSet;
 getRegistryManager(): DynamicRegistryManager;
 getRotation(): Vec2f;
 getServer(): MinecraftServer;
 getPlayerOrThrow(): ServerPlayerEntity;
 getPlayer(): ServerPlayerEntity;
 getEntityOrThrow(): Entity;
 withSilent(): ServerCommandSource;
 withMaxLevel(level: number): ServerCommandSource;
 isExecutedByPlayer(): boolean;
 withOutput(output: CommandOutput): ServerCommandSource;
}
class Static_ServerCommandSource {
static method_9224(context: CommandContext,success: boolean,result: number): void;
static method_51412(i: number): void;
static REQUIRES_PLAYER_EXCEPTION: SimpleCommandExceptionType;
static REQUIRES_ENTITY_EXCEPTION: SimpleCommandExceptionType;
}

//net.minecraft.client.render.block.BlockModelRenderer
class BlockModelRenderer extends JObject{
 render(entry: MatrixStack_Entry,vertexConsumer: VertexConsumer,state: BlockState,bakedModel: BakedModel,red: number,green: number,blue: number,light: number,overlay: number): void;
 render(world: BlockRenderView,model: BakedModel,state: BlockState,pos: BlockPos,matrices: MatrixStack,vertexConsumer: VertexConsumer,cull: boolean,random: Random,seed: long,overlay: number): void;
 renderSmooth(world: BlockRenderView,model: BakedModel,state: BlockState,pos: BlockPos,matrices: MatrixStack,vertexConsumer: VertexConsumer,cull: boolean,random: Random,seed: long,overlay: number): void;
 renderFlat(world: BlockRenderView,model: BakedModel,state: BlockState,pos: BlockPos,matrices: MatrixStack,vertexConsumer: VertexConsumer,cull: boolean,random: Random,seed: long,overlay: number): void;
}
class Static_BlockModelRenderer {
static enableBrightnessCache(): void;
static disableBrightnessCache(): void;
static renderQuads(entry: MatrixStack_Entry,vertexConsumer: VertexConsumer,red: number,green: number,blue: number,quads: List,light: number,overlay: number): void;
static field_32782: number;
static field_32783: number;
static DIRECTIONS: Direction[];
static BRIGHTNESS_CACHE_MAX_SIZE: number;
static BRIGHTNESS_CACHE: ThreadLocal;
}

//net.minecraft.server.world.ChunkHolder$LevelUpdateListener
interface ChunkHolder_LevelUpdateListener extends JObject{
 updateLevel(pos: ChunkPos,levelGetter: IntSupplier,targetLevel: number,levelSetter: IntConsumer): void;
}

//net.minecraft.client.util.telemetry.TelemetryEventType$Builder
class TelemetryEventType_Builder extends JObject{
 properties(property: TelemetryEventProperty): TelemetryEventType_Builder;
 properties(properties: List): TelemetryEventType_Builder;
 build(): TelemetryEventType;
 optional(): TelemetryEventType_Builder;
}

//net.minecraft.structure.pool.StructurePoolBasedGenerator
class StructurePoolBasedGenerator extends JObject{
}
class Static_StructurePoolBasedGenerator {
static generate(context: Structure_Context,structurePool: RegistryEntry,id: Optional,size: number,pos: BlockPos,useExpansionHack: boolean,projectStartToHeightmap: Optional,maxDistanceFromCenter: number): Optional;
static generate(noiseConfig: NoiseConfig,maxSize: number,modifyBoundingBox: boolean,chunkGenerator: ChunkGenerator,structureTemplateManager: StructureTemplateManager,heightLimitView: HeightLimitView,random: Random,structurePoolRegistry: Registry,firstPiece: PoolStructurePiece,pieces: List,pieceShape: VoxelShape): void;
static generate(world: ServerWorld,structurePool: RegistryEntry,id: Identifier,size: number,pos: BlockPos,keepJigsaws: boolean): boolean;
static findStartingJigsawPos(pool: StructurePoolElement,id: Identifier,pos: BlockPos,rotation: BlockRotation,structureManager: StructureTemplateManager,random: ChunkRandom): Optional;
static method_45548(key: RegistryKey): string;
static method_39824(poolStructurePiece: PoolStructurePiece,i: number,j: number,k: number,l: number,m: number,blockBox: BlockBox,context: Structure_Context,bl: boolean,chunkGenerator: ChunkGenerator,structureTemplateManager: StructureTemplateManager,heightLimitView: HeightLimitView,chunkRandom: ChunkRandom,registry: Registry,collector: StructurePiecesCollector): void;
static method_43730(biome: RegistryEntry): boolean;
static LOGGER: Logger;
}

//net.minecraft.loot.LootDataLookup
interface LootDataLookup extends JObject{
 getElement(key: LootDataKey): Object;
 getElement(type: LootDataType,id: Identifier): Object;
 getElementOptional(type: LootDataType,id: Identifier): Optional;
 getElementOptional(key: LootDataKey): Optional;
 getLootTable(id: Identifier): LootTable;
}

//net.minecraft.world.gen.feature.size.FeatureSize
class FeatureSize extends JObject{
 getRadius(height: number,y: number): number;
 getMinClippedHeight(): OptionalInt;
}
class Static_FeatureSize {
static createCodec(): RecordCodecBuilder;
static method_28821(featureSize: FeatureSize): OptionalInt;
static method_28822(minClippedHeight: Optional): OptionalInt;
static method_28823(minClippedHeight: OptionalInt): Optional;
static TYPE_CODEC: Codec;
static field_31522: number;
}

//net.minecraft.world.gen.carver.CarverDebugConfig
class CarverDebugConfig extends JObject{
 getBarrierState(): BlockState;
 isDebugMode(): boolean;
 getWaterState(): BlockState;
 getLavaState(): BlockState;
 getAirState(): BlockState;
}
class Static_CarverDebugConfig {
static create(debugMode: boolean,airState: BlockState,waterState: BlockState,lavaState: BlockState,barrierState: BlockState): CarverDebugConfig;
static create(airState: BlockState,waterState: BlockState,lavaState: BlockState,barrierState: BlockState): CarverDebugConfig;
static create(debugMode: boolean,debugState: BlockState): CarverDebugConfig;
static method_33971(instance: RecordCodecBuilder_Instance): App;
static DEFAULT: CarverDebugConfig;
static CODEC: Codec;
}

//net.minecraft.client.gui.PlayerSkinDrawer
class PlayerSkinDrawer extends JObject{
}
class Static_PlayerSkinDrawer {
static draw(context: DrawContext,texture: Identifier,x: number,y: number,size: number,hatVisible: boolean,upsideDown: boolean): void;
static draw(context: DrawContext,texture: Identifier,x: number,y: number,size: number): void;
static drawHat(context: DrawContext,texture: Identifier,x: number,y: number,size: number,upsideDown: boolean): void;
static FACE_WIDTH: number;
static FACE_HEIGHT: number;
static FACE_X: number;
static FACE_Y: number;
static FACE_OVERLAY_X: number;
static FACE_OVERLAY_Y: number;
static field_39531: number;
static field_39532: number;
static SKIN_TEXTURE_WIDTH: number;
static SKIN_TEXTURE_HEIGHT: number;
}

//net.minecraft.network.packet.s2c.play.EntityPassengersSetS2CPacket
class EntityPassengersSetS2CPacket extends JObject, Packet{
 apply(clientPlayPacketListener: ClientPlayPacketListener): void;
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
 getId(): number;
 getPassengerIds(): number[];
}

//net.minecraft.entity.Entity
class Entity extends JObject, Nameable, EntityLike, CommandOutput{
 getName(): Text;
 remove(reason: Entity_RemovalReason): void;
 equals(o: Object): boolean;
 toString(): string;
 hashCode(): number;
 isAlive(): boolean;
 getId(): number;
 getType(): EntityType;
 isFrozen(): boolean;
 move(movementType: MovementType,movement: Vec3d): void;
 detach(): void;
 getDimensions(pose: EntityPose): EntityDimensions;
 copyFrom(original: Entity): void;
 getDisplayName(): Text;
 isSupportedBy(pos: BlockPos): boolean;
 tick(): void;
 getEntityName(): string;
 getWidth(): number;
 getHeight(): number;
 isInRange(entity: Entity,horizontalRadius: number,verticalRadius: number): boolean;
 isInRange(entity: Entity,radius: number): boolean;
 isTeammate(other: Entity): boolean;
 setPose(pose: EntityPose): void;
 discard(): void;
 setId(id: number): void;
 equipStack(slot: EquipmentSlot,stack: ItemStack): void;
 isInvisible(): boolean;
 updatePositionAndAngles(x: number,y: number,z: number,yaw: number,pitch: number): void;
 getControllingPassenger(): LivingEntity;
 getControllingVehicle(): Entity;
 shouldBroadcastConsoleToOps(): boolean;
 shouldReceiveFeedback(): boolean;
 refreshPositionAndAngles(x: number,y: number,z: number,yaw: number,pitch: number): void;
 refreshPositionAndAngles(pos: BlockPos,yaw: number,pitch: number): void;
 getTargetingMargin(): number;
 isImmuneToExplosion(): boolean;
 getMaxAir(): number;
 hasPassenger(predicate: Predicate): boolean;
 hasPassenger(passenger: Entity): boolean;
 shouldSave(): boolean;
 setRemoved(reason: Entity_RemovalReason): void;
 getBodyY(heightScale: number): number;
 addVelocity(deltaX: number,deltaY: number,deltaZ: number): void;
 addVelocity(velocity: Vec3d): void;
 applyDamageEffects(attacker: LivingEntity,target: Entity): void;
 isConnectedThroughVehicle(entity: Entity): boolean;
 streamPassengersAndSelf(): Stream;
 streamSelfAndPassengers(): Stream;
 getOppositeRotationVector(tickDelta: number): Vec3d;
 isDescending(): boolean;
 canModifyAt(world: World,pos: BlockPos): boolean;
 getRemovalReason(): Entity_RemovalReason;
 canSprintAsVehicle(): boolean;
 getLeashPos(delta: number): Vec3d;
 canFreeze(): boolean;
 setInPowderSnow(inPowderSnow: boolean): void;
 getPickBlockStack(): ItemStack;
 setStepHeight(stepHeight: number): void;
 getBodyYaw(): number;
 getPassengersDeep(): Iterable;
 hasPlayerRider(): boolean;
 addCommandTag(tag: string): boolean;
 getCommandTags(): Set;
 setYaw(yaw: number): void;
 setPortalCooldown(portalCooldown: number): void;
 setVelocityClient(x: number,y: number,z: number): void;
 onSpawnPacket(packet: EntitySpawnS2CPacket): void;
 setPitch(pitch: number): void;
 getHeadYaw(): number;
 setPos(x: number,y: number,z: number): void;
 getTrackedPosition(): TrackedPosition;
 resetPosition(): void;
 animateDamage(yaw: number): void;
 hasPassengerDeep(passenger: Entity): boolean;
 startRiding(entity: Entity,force: boolean): boolean;
 startRiding(entity: Entity): boolean;
 setHeadYaw(headYaw: number): void;
 onDamaged(damageSource: DamageSource): void;
 getSoundCategory(): SoundCategory;
 handleStatus(status: byte): void;
 getPortalCooldown(): number;
 isSprinting(): boolean;
 lookAt(anchorPoint: EntityAnchorArgumentType_EntityAnchor,target: Vec3d): void;
 isInvulnerable(): boolean;
 getPassengerList(): List;
 getRotationClient(): Vec2f;
 emitGameEvent(event: GameEvent,entity: Entity): void;
 emitGameEvent(event: GameEvent): void;
 dropStack(stack: ItemStack,yOffset: number): ItemEntity;
 dropStack(stack: ItemStack): ItemEntity;
 stopRiding(): void;
 getArmorItems(): Iterable;
 isFireImmune(): boolean;
 getFluidHeight(fluid: TagKey): number;
 setGlowing(glowing: boolean): void;
 isSilent(): boolean;
 setSilent(silent: boolean): void;
 setInvulnerable(invulnerable: boolean): void;
 setNoGravity(noGravity: boolean): void;
 isGlowingLocal(): boolean;
 getX(): number;
 getY(): number;
 offsetX(widthScale: number): number;
 getScoreboardTeam(): AbstractTeam;
 hasVehicle(): boolean;
 getRootVehicle(): Entity;
 onLanding(): void;
 isSneaking(): boolean;
 getVelocity(): Vec3d;
 updatePosition(x: number,y: number,z: number): void;
 hasNoGravity(): boolean;
 getCommandSource(): ServerCommandSource;
 getBlockPos(): BlockPos;
 sendMessage(message: Text): void;
 shouldTrackOutput(): boolean;
 requestTeleport(destX: number,destY: number,destZ: number): void;
 isOnGround(): boolean;
 setOnGround(onGround: boolean,movement: Vec3d): void;
 setOnGround(onGround: boolean): void;
 teleport(destX: number,destY: number,destZ: number): void;
 teleport(world: ServerWorld,destX: number,destY: number,destZ: number,flags: Set,yaw: number,pitch: number): boolean;
 getEyePos(): Vec3d;
 getVehicle(): Entity;
 setSprinting(sprinting: boolean): void;
 setSneaking(sneaking: boolean): void;
 hasCustomName(): boolean;
 isLiving(): boolean;
 saveNbt(nbt: NbtCompound): boolean;
 offsetZ(widthScale: number): number;
 applyRotation(rotation: BlockRotation): number;
 applyMirror(mirror: BlockMirror): number;
 getCustomName(): Text;
 setCustomName(name: Text): void;
 interact(player: PlayerEntity,hand: Hand): ActionResult;
 getEntityWorld(): World;
 isInLava(): boolean;
 distanceTo(entity: Entity): number;
 doesNotCollide(offsetX: number,offsetY: number,offsetZ: number): boolean;
 damage(source: DamageSource,amount: number): boolean;
 getFreezingScale(): number;
 getFrozenTicks(): number;
 getChunkPos(): ChunkPos;
 getDataTracker(): DataTracker;
 setChangeListener(changeListener: EntityChangeListener): void;
 getCameraPosVec(tickDelta: number): Vec3d;
 getRotationVec(tickDelta: number): Vec3d;
 canHit(): boolean;
 getUuidAsString(): string;
 isSneaky(): boolean;
 isRemoved(): boolean;
 getWorld(): World;
 hasPermissionLevel(permissionLevel: number): boolean;
 dropItem(item: ItemConvertible,yOffset: number): ItemEntity;
 dropItem(item: ItemConvertible): ItemEntity;
 getStepHeight(): number;
 getBlockY(): number;
 getFirstPassenger(): Entity;
 isInsideWaterOrBubbleColumn(): boolean;
 removeAllPassengers(): void;
 isLogicalSideForUpdatingMovement(): boolean;
 updateTrackedHeadRotation(yaw: number,interpolationSteps: number): void;
 updateTrackedPosition(x: number,y: number,z: number): void;
 updateTrackedPositionAndAngles(x: number,y: number,z: number,yaw: number,pitch: number,interpolationSteps: number,interpolate: boolean): void;
 collidesWithStateAtPos(pos: BlockPos,state: BlockState): boolean;
 onPassengerLookAround(passenger: Entity): void;
 getDefaultPortalCooldown(): number;
 removeScoreboardTag(tag: string): boolean;
 changeLookDirection(cursorDeltaX: number,cursorDeltaY: number): void;
 resetPortalCooldown(): void;
 getMaxNetherPortalTime(): number;
 shouldSpawnSprintingParticles(): boolean;
 populateCrashReport(section: CrashReportSection): void;
 getStandingEyeHeight(): number;
 bypassesSteppingEffects(): boolean;
 occludeVibrationSignals(): boolean;
 getHorizontalFacing(): Direction;
 isPlayer(): boolean;
 interactAt(player: PlayerEntity,hitPos: Vec3d,hand: Hand): ActionResult;
 getAir(): number;
 shouldRender(cameraX: number,cameraY: number,cameraZ: number): boolean;
 shouldRender(distance: number): boolean;
 getZ(): number;
 squaredDistanceTo(entity: Entity): number;
 squaredDistanceTo(x: number,y: number,z: number): number;
 squaredDistanceTo(vector: Vec3d): number;
 getBoundingBox(): Box;
 raycast(maxDistance: number,tickDelta: number,includeFluids: boolean): HitResult;
 getPos(): Vec3d;
 playSound(sound: SoundEvent,volume: number,pitch: number): void;
 setVelocity(velocity: Vec3d): void;
 setVelocity(x: number,y: number,z: number): void;
 setPosition(x: number,y: number,z: number): void;
 setPosition(pos: Vec3d): void;
 isSpectator(): boolean;
 readNbt(nbt: NbtCompound): void;
 writeNbt(nbt: NbtCompound): NbtCompound;
 isSubmergedIn(fluidTag: TagKey): boolean;
 isOnFire(): boolean;
 getEyeY(): number;
 getPitch(): number;
 getPitch(tickDelta: number): number;
 getYaw(): number;
 getYaw(tickDelta: number): number;
 getSwimHeight(): number;
 createSpawnPacket(): Packet;
 checkDespawn(): void;
 getLeashOffset(tickDelta: number): Vec3d;
 getBlockStateAtPos(): BlockState;
 getPistonBehavior(): PistonBehavior;
 canMoveVoluntarily(): boolean;
 isRegionUnloaded(): boolean;
 getNameLabelHeight(): number;
 getRandomBodyY(): number;
 getParticleX(widthScale: number): number;
 getParticleZ(widthScale: number): number;
 getEyeHeight(pose: EntityPose): number;
 getPose(): EntityPose;
 isInPose(pose: EntityPose): boolean;
 getTeamColorValue(): number;
 hasPassengers(): boolean;
 onRemoved(): void;
 updateSwimming(): void;
 setFireTicks(fireTicks: number): void;
 setOnFireFromLava(): void;
 setOnFire(onFire: boolean): void;
 attemptTickInVoid(): void;
 baseTick(): void;
 setBoundingBox(boundingBox: Box): void;
 setFrozenTicks(frozenTicks: number): void;
 getFireTicks(): number;
 extinguish(): void;
 hasPortalCooldown(): boolean;
 setOnFireFor(seconds: number): void;
 isTouchingWater(): boolean;
 isWet(): boolean;
 isInSneakingPose(): boolean;
 isOnRail(): boolean;
 isSwimming(): boolean;
 handleFallDamage(fallDistance: number,damageMultiplier: number,damageSource: DamageSource): boolean;
 updateVelocity(speed: number,movementInput: Vec3d): void;
 isSubmergedInWater(): boolean;
 getRotationVector(): Vec3d;
 onPlayerCollision(player: PlayerEntity): void;
 pushAwayFrom(entity: Entity): void;
 isInvulnerableTo(damageSource: DamageSource): boolean;
 getLerpedPos(delta: number): Vec3d;
 setSwimming(swimming: boolean): void;
 isPushable(): boolean;
 saveSelfNbt(nbt: NbtCompound): boolean;
 getBlockX(): number;
 getBlockZ(): number;
 tickRiding(): void;
 isCollidable(): boolean;
 setBodyYaw(bodyYaw: number): void;
 getHeightOffset(): number;
 isInsideWall(): boolean;
 dismountVehicle(): void;
 getHandItems(): Iterable;
 updateEventHandler(callback: BiConsumer): void;
 getHandPosOffset(item: Item): Vec3d;
 moveToWorld(destination: ServerWorld): Entity;
 isInSwimmingPose(): boolean;
 setInNetherPortal(pos: BlockPos): void;
 isCrawling(): boolean;
 isGlowing(): boolean;
 isInvisibleTo(player: PlayerEntity): boolean;
 isPartOf(entity: Entity): boolean;
 isTeamPlayer(team: AbstractTeam): boolean;
 setInvisible(invisible: boolean): void;
 slowMovement(state: BlockState,multiplier: Vec3d): void;
 onKilledOther(world: ServerWorld,other: LivingEntity): boolean;
 isAttackable(): boolean;
 handleAttack(attacker: Entity): boolean;
 limitFallDistance(): void;
 canAvoidTraps(): boolean;
 canUsePortals(): boolean;
 doesRenderOnFire(): boolean;
 onTrackedDataSet(data: TrackedData): void;
 canBeSpectated(spectator: ServerPlayerEntity): boolean;
 shouldRenderName(): boolean;
 isPushedByFluids(): boolean;
 setUuid(uuid: UUID): void;
 getServer(): MinecraftServer;
 getUuid(): UUID;
 getSyncedPos(): Vec3d;
 getStackReference(mappedIndex: number): StackReference;
 getDamageSources(): DamageSources;
 kill(): void;
 setAir(air: number): void;
 getLandingPos(): BlockPos;
 getSteppingPos(): BlockPos;
 getItemsEquipped(): Iterable;
 collidesWith(other: Entity): boolean;
 updatePassengerPosition(passenger: Entity): void;
 getMinFreezeDamageTicks(): number;
 onStruckByLightning(world: ServerWorld,lightning: LightningEntity): void;
 updateKilledAdvancementCriterion(entityKilled: Entity,score: number,damageSource: DamageSource): void;
 copyPositionAndRotation(entity: Entity): void;
 onBubbleColumnSurfaceCollision(drag: boolean): void;
 onBubbleColumnCollision(drag: boolean): void;
 getEffectiveExplosionResistance(explosion: Explosion,world: BlockView,pos: BlockPos,blockState: BlockState,fluidState: FluidState,max: number): number;
 getBrightnessAtEyes(): number;
 shouldDismountUnderwater(): boolean;
 getClientCameraPosVec(tickDelta: number): Vec3d;
 canExplosionDestroyBlock(explosion: Explosion,world: BlockView,pos: BlockPos,state: BlockState,explosionPower: number): boolean;
 getSafeFallDistance(): number;
 getSteppingBlockState(): BlockState;
 isTouchingWaterOrRain(): boolean;
 refreshPositionAfterTeleport(pos: Vec3d): void;
 refreshPositionAfterTeleport(x: number,y: number,z: number): void;
 setCustomNameVisible(visible: boolean): void;
 canBeHitByProjectile(): boolean;
 extinguishWithSound(): void;
 isCustomNameVisible(): boolean;
 updateMovementInFluid(tag: TagKey,speed: number): boolean;
 playSoundIfNotSilent(event: SoundEvent): void;
 getMountedHeightOffset(): number;
 getRotationVecClient(): Vec3d;
 bypassesLandingEffects(): boolean;
 requestTeleportAndDismount(destX: number,destY: number,destZ: number): void;
 requestTeleportOffset(offsetX: number,offsetY: number,offsetZ: number): void;
 onDataTrackerUpdate(dataEntries: List): void;
 calculateDimensions(): void;
 onStoppedTrackingBy(player: ServerPlayerEntity): void;
 onStartedTrackingBy(player: ServerPlayerEntity): void;
 updatePassengerForDismount(passenger: LivingEntity): Vec3d;
 entityDataRequiresOperator(): boolean;
 getMovementDirection(): Direction;
 shouldEscapePowderSnow(): boolean;
 getVisibilityBoundingBox(): Box;
 hasControllingPassenger(): boolean;
 intersectionChecked: boolean;
 prevX: number;
 prevY: number;
 prevZ: number;
 prevYaw: number;
 prevPitch: number;
 horizontalCollision: boolean;
 verticalCollision: boolean;
 groundCollision: boolean;
 collidedSoftly: boolean;
 velocityModified: boolean;
 prevHorizontalSpeed: number;
 horizontalSpeed: number;
 distanceTraveled: number;
 speed: number;
 fallDistance: number;
 lastRenderX: number;
 lastRenderY: number;
 lastRenderZ: number;
 noClip: boolean;
 age: number;
 timeUntilRegen: number;
 ignoreCameraFrustum: boolean;
 velocityDirty: boolean;
 inPowderSnow: boolean;
 wasInPowderSnow: boolean;
 wasOnFire: boolean;
 supportingBlockPos: Optional;
}
class Static_Entity {
static adjustMovementForCollisions(entity: Entity,movement: Vec3d,entityBoundingBox: Box,world: World,collisions: List): Vec3d;
static adjustMovementForCollisions(movement: Vec3d,entityBoundingBox: Box,collisions: List): Vec3d;
static method_31469(entity: Entity): boolean;
static method_29494(state: BlockState): boolean;
static method_37217(passenger: Entity): boolean;
static method_37216(player: Entity): void;
static method_31475(entity2: Entity,entity: Entity): boolean;
static removeClickEvents(textComponent: Text): Text;
static method_49789(entity: Entity): void;
static movementInputToVelocity(movementInput: Vec3d,speed: number,yaw: number): Vec3d;
static setRenderDistanceMultiplier(value: number): void;
static getRenderDistanceMultiplier(): number;
static getPassengerDismountOffset(vehicleWidth: number,passengerWidth: number,passengerYaw: number): Vec3d;
static LOGGER: Logger;
static ID_KEY: string;
static PASSENGERS_KEY: string;
static CURRENT_ID: AtomicInteger;
static EMPTY_STACK_LIST: List;
static MAX_RIDING_COOLDOWN: number;
static DEFAULT_PORTAL_COOLDOWN: number;
static MAX_COMMAND_TAGS: number;
static field_44870: number;
static field_44871: number;
static field_44872: number;
static field_29991: number;
static DEFAULT_MIN_FREEZE_DAMAGE_TICKS: number;
static FREEZING_DAMAGE_INTERVAL: number;
static NULL_BOX: Box;
static SPEED_IN_WATER: number;
static SPEED_IN_LAVA_IN_NETHER: number;
static SPEED_IN_LAVA: number;
static UUID_KEY: string;
static renderDistanceMultiplier: number;
static DEFAULT_FRICTION: number;
static MIN_RISING_BUBBLE_COLUMN_SPEED: number;
static FLAGS: TrackedData;
static ON_FIRE_FLAG_INDEX: number;
static SNEAKING_FLAG_INDEX: number;
static SPRINTING_FLAG_INDEX: number;
static SWIMMING_FLAG_INDEX: number;
static INVISIBLE_FLAG_INDEX: number;
static GLOWING_FLAG_INDEX: number;
static FALL_FLYING_FLAG_INDEX: number;
static AIR: TrackedData;
static CUSTOM_NAME: TrackedData;
static NAME_VISIBLE: TrackedData;
static SILENT: TrackedData;
static NO_GRAVITY: TrackedData;
static POSE: TrackedData;
static FROZEN_TICKS: TrackedData;
}

//net.minecraft.entity.ai.control.Control
interface Control extends JObject{
}

//net.minecraft.data.client.BlockStateVariantMap$TriFunction
interface BlockStateVariantMap_TriFunction extends JObject{
 apply(one: Object,two: Object,three: Object): Object;
}

//net.minecraft.world.biome.source.util.MultiNoiseUtil$NodeDistanceFunction
interface MultiNoiseUtil_NodeDistanceFunction extends JObject{
 getDistance(node: MultiNoiseUtil_SearchTree_TreeNode,otherParameters: long[]): long;
}

//net.minecraft.client.render.block.entity.SignBlockEntityRenderer
class SignBlockEntityRenderer extends JObject, BlockEntityRenderer{
 render(signBlockEntity: SignBlockEntity,f: number,matrixStack: MatrixStack,vertexConsumerProvider: VertexConsumerProvider,i: number,j: number): void;
 render(entity: BlockEntity,tickDelta: number,matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,light: number,overlay: number): void;
 getSignScale(): number;
 getTextScale(): number;
}
class Static_SignBlockEntityRenderer {
static method_32156(signType: WoodType): WoodType;
static method_32158(context: BlockEntityRendererFactory_Context,signType: WoodType): SignBlockEntityRenderer_SignModel;
static createSignModel(entityModelLoader: EntityModelLoader,type: WoodType): SignBlockEntityRenderer_SignModel;
static getColor(sign: SignText): number;
static getTexturedModelData(): TexturedModelData;
static shouldRender(pos: BlockPos,signColor: number): boolean;
static STICK: string;
static GLOWING_BLACK_COLOR: number;
static RENDER_DISTANCE: number;
static SCALE: number;
static TEXT_OFFSET: Vec3d;
}

//net.minecraft.block.entity.PistonBlockEntity$1


//net.minecraft.entity.ai.pathing.PathNode
class PathNode extends JObject{
 equals(o: Object): boolean;
 toString(): string;
 hashCode(): number;
 write(buf: PacketByteBuf): void;
 isInHeap(): boolean;
 getManhattanDistance(pos: BlockPos): number;
 getManhattanDistance(node: PathNode): number;
 getDistance(node: PathNode): number;
 getDistance(pos: BlockPos): number;
 getBlockPos(): BlockPos;
 copyWithNewPosition(x: number,y: number,z: number): PathNode;
 getPos(): Vec3d;
 getSquaredDistance(pos: BlockPos): number;
 getSquaredDistance(node: PathNode): number;
 getHorizontalDistance(node: PathNode): number;
 x: number;
 y: number;
 z: number;
 heapIndex: number;
 penalizedPathLength: number;
 distanceToNearestTarget: number;
 heapWeight: number;
 previous: PathNode;
 visited: boolean;
 pathLength: number;
 penalty: number;
 type: PathNodeType;
}
class Static_PathNode {
static hash(x: number,y: number,z: number): number;
static readFromBuf(buf: PacketByteBuf,target: PathNode): void;
static fromBuf(buf: PacketByteBuf): PathNode;
}

//net.minecraft.loot.condition.TableBonusLootCondition
class TableBonusLootCondition extends JObject, LootCondition{
 test(context: Object): boolean;
 test(lootContext: LootContext): boolean;
 getType(): LootConditionType;
 getRequiredParameters(): Set;
}
class Static_TableBonusLootCondition {
static builder(enchantment: Enchantment,chances: number[]): LootCondition_Builder;
static method_801(enchantment: Enchantment,fs: number[]): LootCondition;
}

//net.minecraft.screen.ScreenTexts
class ScreenTexts extends JObject{
}
class Static_ScreenTexts {
static space(): MutableText;
static days(days: long): MutableText;
static hours(hours: long): MutableText;
static minutes(minutes: long): MutableText;
static joinSentences(sentences: Text[]): MutableText;
static composeToggleText(text: Text,value: boolean): MutableText;
static joinLines(texts: Collection): Text;
static joinLines(texts: Text[]): Text;
static onOrOff(on: boolean): Text;
static composeGenericOptionText(text: Text,value: Text): MutableText;
static EMPTY: Text;
static ON: Text;
static OFF: Text;
static DONE: Text;
static CANCEL: Text;
static YES: Text;
static NO: Text;
static OK: Text;
static PROCEED: Text;
static CONTINUE: Text;
static BACK: Text;
static TO_TITLE: Text;
static ACKNOWLEDGE: Text;
static OPEN_LINK: Text;
static COPY_LINK_TO_CLIPBOARD: Text;
static CONNECT_FAILED: Text;
static LINE_BREAK: Text;
static SENTENCE_SEPARATOR: Text;
static ELLIPSIS: Text;
static SPACE: Text;
}

//net.minecraft.world.biome.TheEndBiomeCreator
class TheEndBiomeCreator extends JObject{
}
class Static_TheEndBiomeCreator {
static createEndMidlands(featureLookup: RegistryEntryLookup,carverLookup: RegistryEntryLookup): Biome;
static createEndHighlands(featureLookup: RegistryEntryLookup,carverLookup: RegistryEntryLookup): Biome;
static createEndBiome(builder: GenerationSettings_LookupBackedBuilder): Biome;
static createTheEnd(featureLookup: RegistryEntryLookup,carverLookup: RegistryEntryLookup): Biome;
static createEndBarrens(featureLookup: RegistryEntryLookup,carverLookup: RegistryEntryLookup): Biome;
static createSmallEndIslands(featureLookup: RegistryEntryLookup,carverLookup: RegistryEntryLookup): Biome;
}

//net.minecraft.util.profiler.ProfileResultImpl
class ProfileResultImpl extends JObject, ProfileResult{
 save(path: Path): boolean;
 getEndTime(): long;
 getStartTime(): long;
 getRootTimings(): string;
 getStartTick(): number;
 getTimings(parentPath: string): List;
 getTickSpan(): number;
 getEndTick(): number;
}
class Static_ProfileResultImpl {
static indent(sb: StringBuilder,size: number): StringBuilder;
static generateWittyComment(): string;
static isSubpath(parent: string,path: string): boolean;
static method_24259(map: Map,location: string,info: ProfileLocationInfo): void;
static method_24261(map: Map,list: List,marker: string,count: Long): void;
static method_24254(counterInfo: ProfileResultImpl_CounterInfo): long;
static method_24263(k: string): ProfileResultImpl_CounterInfo;
static LOGGER: Logger;
static EMPTY_INFO: ProfileLocationInfo;
static SPLITTER: Splitter;
static COMPARATOR: Comparator;
}

//net.minecraft.client.realms.FileDownload$ProgressListener
class FileDownload_ProgressListener extends JObject, ActionListener{
 actionPerformed(e: ActionEvent): void;
}

//net.minecraft.structure.StructurePiece
class StructurePiece extends JObject{
 getType(): StructurePieceType;
 generate(world: StructureWorldAccess,structureAccessor: StructureAccessor,chunkGenerator: ChunkGenerator,random: Random,chunkBox: BlockBox,chunkPos: ChunkPos,pivot: BlockPos): void;
 translate(x: number,y: number,z: number): void;
 setChainLength(chainLength: number): void;
 getCenter(): BlockPos;
 getChainLength(): number;
 fillOpenings(start: StructurePiece,holder: StructurePiecesHolder,random: Random): void;
 toNbt(context: StructureContext): NbtCompound;
 setOrientation(orientation: Direction): void;
 getBoundingBox(): BlockBox;
 getFacing(): Direction;
 getMirror(): BlockMirror;
 getRotation(): BlockRotation;
 intersectsChunk(pos: ChunkPos,offset: number): boolean;
}
class Static_StructurePiece {
static boundingBox(pieces: Stream): BlockBox;
static firstIntersecting(pieces: List,box: BlockBox): StructurePiece;
static method_35459(): IllegalArgumentException;
static method_34398(nbtCompound: NbtCompound,nbtElement: NbtElement): void;
static method_38704(): IllegalStateException;
static orientateChest(world: BlockView,pos: BlockPos,state: BlockState): BlockState;
static createBox(x: number,y: number,z: number,orientation: Direction,width: number,height: number,depth: number): BlockBox;
static getRandomHorizontalDirection(random: Random): Direction;
static LOGGER: Logger;
static AIR: BlockState;
static BLOCKS_NEEDING_POST_PROCESSING: Set;
}

//net.minecraft.world.gen.noise.NoiseHelper
class NoiseHelper extends JObject{
}
class Static_NoiseHelper {
static method_35479(d: number,e: number): number;
static appendDebugInfo(builder: StringBuilder,originX: number,originY: number,originZ: number,permutation: number[]): void;
static appendDebugInfo(builder: StringBuilder,originX: number,originY: number,originZ: number,permutation: byte[]): void;
}

//net.minecraft.data.client.BlockStateVariantMap$QuadFunction
interface BlockStateVariantMap_QuadFunction extends JObject{
 apply(one: Object,two: Object,three: Object,four: Object): Object;
}

//net.minecraft.structure.OceanMonumentGenerator$1


//net.minecraft.particle.ItemStackParticleEffect
class ItemStackParticleEffect extends JObject, ParticleEffect{
 write(buf: PacketByteBuf): void;
 getType(): ParticleType;
 asString(): string;
 getItemStack(): ItemStack;
}
class Static_ItemStackParticleEffect {
static createCodec(type: ParticleType): Codec;
static method_29137(particleType: ParticleType,stack: ItemStack): ItemStackParticleEffect;
static method_29135(effect: ItemStackParticleEffect): ItemStack;
static PARAMETERS_FACTORY: ParticleEffect_Factory;
}

//net.minecraft.structure.TrailRuinsGenerator
class TrailRuinsGenerator extends JObject{
}
class Static_TrailRuinsGenerator {
static bootstrap(poolRegisterable: Registerable): void;
static TOWER: RegistryKey;
}

//net.minecraft.client.texture.Animator
interface Animator extends JObject, AutoCloseable{
 close(): void;
 tick(x: number,y: number): void;
}

//net.minecraft.client.particle.SpellParticle$WitchFactory
class SpellParticle_WitchFactory extends JObject, ParticleFactory{
 createParticle(defaultParticleType: DefaultParticleType,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
 createParticle(particleEffect: ParticleEffect,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
}

//net.minecraft.client.render.block.entity.BlockEntityRendererFactories
class BlockEntityRendererFactories extends JObject{
}
class Static_BlockEntityRendererFactories {
static register(type: BlockEntityType,factory: BlockEntityRendererFactory): void;
static reload(args: BlockEntityRendererFactory_Context): Map;
static method_32145(builder: ImmutableMap_Builder,context: BlockEntityRendererFactory_Context,type: BlockEntityType,factory: BlockEntityRendererFactory): void;
static FACTORIES: Map;
}

//net.minecraft.world.spawner.PatrolSpawner
class PatrolSpawner extends JObject, Spawner{
 spawn(world: ServerWorld,spawnMonsters: boolean,spawnAnimals: boolean): number;
}

//net.minecraft.world.gen.HeightContext
class HeightContext extends JObject{
 getHeight(): number;
 getMinY(): number;
}

//net.minecraft.client.font.TextHandler$LineWrappingCollector
class TextHandler_LineWrappingCollector extends JObject{
 charAt(index: number): char;
 collectRemainers(): StringVisitable;
 collectLine(lineLength: number,skippedLength: number,style: Style): StringVisitable;
}
class Static_TextHandler_LineWrappingCollector {
static method_27504(part: TextHandler_StyledString): string;
}

//net.minecraft.server.world.ChunkLevels$1


//net.minecraft.client.particle.ParticleManager$SimpleSpriteProvider
class ParticleManager_SimpleSpriteProvider extends JObject, SpriteProvider{
 setSprites(sprites: List): void;
 getSprite(age: number,maxAge: number): Sprite;
 getSprite(random: Random): Sprite;
}

//net.minecraft.command.DataCommandObject
interface DataCommandObject extends JObject{
 setNbt(nbt: NbtCompound): void;
 getNbt(): NbtCompound;
 feedbackModify(): Text;
 feedbackGet(path: NbtPathArgumentType_NbtPath,scale: number,result: number): Text;
 feedbackQuery(element: NbtElement): Text;
}

//net.minecraft.entity.ai.brain.task.StartRidingTask
class StartRidingTask extends JObject{
}
class Static_StartRidingTask {
static create(speed: number): Task;
static method_46993(taskContext: TaskTriggerer_TaskContext,f: number,lookTarget: MemoryQueryResult,walkTarget: MemoryQueryResult,rideTarget: MemoryQueryResult): TaskRunnable;
static method_46992(f: number,context: TaskTriggerer_TaskContext): App;
static method_46994(taskContext: TaskTriggerer_TaskContext,memoryQueryResult: MemoryQueryResult,memoryQueryResult2: MemoryQueryResult,memoryQueryResult3: MemoryQueryResult,f: number,world: ServerWorld,entity: LivingEntity,time: long): boolean;
static COMPLETION_RANGE: number;
}

//net.minecraft.client.texture.SpriteContents$AnimatorImpl
class SpriteContents_AnimatorImpl extends JObject, Animator{
 close(): void;
 tick(x: number,y: number): void;
}

//net.minecraft.loot.condition.AlternativeLootCondition
class AlternativeLootCondition extends JObject, LootCondition{
 test(context: Object): boolean;
 test(lootContext: LootContext): boolean;
 validate(reporter: LootTableReporter): void;
}

//net.minecraft.world.chunk.ChunkProvider
interface ChunkProvider extends JObject{
 onLightUpdate(type: LightType,pos: ChunkSectionPos): void;
 getWorld(): BlockView;
 getChunk(chunkX: number,chunkZ: number): LightSourceView;
}

//net.minecraft.client.network.RedirectResolver
interface RedirectResolver extends JObject{
 lookupRedirect(address: ServerAddress): Optional;
}
class Static_RedirectResolver {
static createSrv(): RedirectResolver;
static method_36911(context: DirContext,address: ServerAddress): Optional;
static method_36910(address: ServerAddress): Optional;
static LOGGER: Logger;
static INVALID: RedirectResolver;
}

//net.minecraft.client.report.ChatAbuseReport
class ChatAbuseReport extends JObject{
 validate(): ChatAbuseReport_ValidationError;
 copy(): ChatAbuseReport;
 getReason(): AbuseReportReason;
 getSelections(): IntSet;
 setOpinionComments(opinionComments: string): void;
 hasSelectedMessage(index: number): boolean;
 hasContents(): boolean;
 finalizeReport(reporter: AbuseReportContext): Either;
 getDraft(): ChatAbuseReport_Draft;
 getOpinionComments(): string;
 setReason(reason: AbuseReportReason): void;
 toggleMessageSelection(index: number): void;
 getReportedPlayerUuid(): UUID;
}

//net.minecraft.server.dedicated.command.BanIpCommand
class BanIpCommand extends JObject{
}
class Static_BanIpCommand {
static register(dispatcher: CommandDispatcher): void;
static method_13010(context: CommandContext): number;
static checkIp(source: ServerCommandSource,target: string,reason: Text): number;
static banIp(source: ServerCommandSource,targetIp: string,reason: Text): number;
static method_13011(source: ServerCommandSource): boolean;
static method_51908(list: List): Text;
static method_51907(string: string,bannedIpEntry: BannedIpEntry): Text;
static method_13006(context: CommandContext): number;
static INVALID_IP_EXCEPTION: SimpleCommandExceptionType;
static ALREADY_BANNED_EXCEPTION: SimpleCommandExceptionType;
}

//net.minecraft.client.gui.Selectable
interface Selectable extends JObject, Navigable, Narratable{
 getType(): Selectable_SelectionType;
 isNarratable(): boolean;
}

//net.minecraft.resource.fs.ResourceFileAttributes
class ResourceFileAttributes extends JObject, BasicFileAttributes{
 size(): long;
 isOther(): boolean;
 lastModifiedTime(): FileTime;
 lastAccessTime(): FileTime;
 creationTime(): FileTime;
 isSymbolicLink(): boolean;
 fileKey(): Object;
}
class Static_ResourceFileAttributes {
static EPOCH: FileTime;
}

//net.minecraft.text.StringVisitable$StyledVisitor
interface StringVisitable_StyledVisitor extends JObject{
 accept(style: Style,asString: string): Optional;
}

//net.minecraft.world.SpawnHelper$1


//net.minecraft.registry.RegistryWrapper$WrapperLookup
interface RegistryWrapper_WrapperLookup extends JObject{
 getOptionalWrapper(registryRef: RegistryKey): Optional;
 getWrapperOrThrow(registryRef: RegistryKey): RegistryWrapper_Impl;
 createRegistryLookup(): RegistryEntryLookup_RegistryLookup;
}
class Static_RegistryWrapper_WrapperLookup {
static of(wrappers: Stream): RegistryWrapper_WrapperLookup;
static method_46763(registryKey: RegistryKey): IllegalStateException;
static method_46760(wrapper: RegistryWrapper_Impl): RegistryWrapper_Impl;
}

//net.minecraft.client.item.ModelPredicateProvider
interface ModelPredicateProvider extends JObject{
 call(stack: ItemStack,world: ClientWorld,entity: LivingEntity,seed: number): number;
}

//net.minecraft.client.gui.screen.recipebook.RecipeBookGhostSlots
class RecipeBookGhostSlots extends JObject{
 getSlot(index: number): RecipeBookGhostSlots_GhostInputSlot;
 reset(): void;
 setRecipe(recipe: Recipe): void;
 getSlotCount(): number;
 getRecipe(): Recipe;
 addSlot(ingredient: Ingredient,x: number,y: number): void;
 draw(context: DrawContext,client: MinecraftClient,x: number,y: number,notInventory: boolean,tickDelta: number): void;
}

//net.minecraft.world.tick.Tick$1


//net.minecraft.network.packet.s2c.play.ServerMetadataS2CPacket
class ServerMetadataS2CPacket extends JObject, Packet{
 apply(clientPlayPacketListener: ClientPlayPacketListener): void;
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
 getDescription(): Text;
 getFavicon(): Optional;
 isSecureChatEnforced(): boolean;
}

//net.minecraft.unused.packageinfo.PackageInfo7205
interface PackageInfo7205 extends JObject{
}

//net.minecraft.client.gui.Drawable
interface Drawable extends JObject{
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
}

//net.minecraft.advancement.AdvancementProgress
class AdvancementProgress extends JObject, Comparable{
 toString(): string;
 compareTo(advancementProgress: AdvancementProgress): number;
 compareTo(other: Object): number;
 init(criteria: Map,requirements: String[][]): void;
 reset(name: string): boolean;
 isDone(): boolean;
 toPacket(buf: PacketByteBuf): void;
 getProgressBarPercentage(): number;
 getProgressBarFraction(): string;
 getCriterionProgress(name: string): CriterionProgress;
 isAnyObtained(): boolean;
 obtain(name: string): boolean;
 getUnobtainedCriteria(): Iterable;
 getObtainedCriteria(): Iterable;
 getEarliestProgressObtainDate(): Date;
}
class Static_AdvancementProgress {
static fromPacket(buf: PacketByteBuf): AdvancementProgress;
static method_33895(bufx: PacketByteBuf,progresses: CriterionProgress): void;
static method_730(set: Set,progress: Map_Entry): boolean;
}

//net.minecraft.entity.player.PlayerInventory
class PlayerInventory extends JObject, Inventory, Nameable{
 getName(): Text;
 remove(shouldRemove: Predicate,maxCount: number,craftingInventory: Inventory): number;
 clone(other: PlayerInventory): void;
 indexOf(stack: ItemStack): number;
 clear(): void;
 isEmpty(): boolean;
 size(): number;
 contains(stack: ItemStack): boolean;
 contains(tag: TagKey): boolean;
 getStack(slot: number): ItemStack;
 offer(stack: ItemStack,notifiesClient: boolean): void;
 getMainHandStack(): ItemStack;
 setStack(slot: number,stack: ItemStack): void;
 removeStack(slot: number,amount: number): ItemStack;
 removeStack(slot: number): ItemStack;
 getBlockBreakingSpeed(block: BlockState): number;
 swapSlotWithHotbar(slot: number): void;
 dropSelectedItem(entireStack: boolean): ItemStack;
 getArmorStack(slot: number): ItemStack;
 markDirty(): void;
 insertStack(slot: number,stack: ItemStack): boolean;
 insertStack(stack: ItemStack): boolean;
 offerOrDrop(stack: ItemStack): void;
 readNbt(nbtList: NbtList): void;
 writeNbt(nbtList: NbtList): NbtList;
 canPlayerUse(player: PlayerEntity): boolean;
 getSwappableHotbarSlot(): number;
 getOccupiedSlotWithRoomForStack(stack: ItemStack): number;
 populateRecipeFinder(finder: RecipeMatcher): void;
 getEmptySlot(): number;
 addPickBlock(stack: ItemStack): void;
 getSlotWithStack(stack: ItemStack): number;
 scrollInHotbar(scrollAmount: number): void;
 damageArmor(damageSource: DamageSource,amount: number,slots: number[]): void;
 dropAll(): void;
 updateItems(): void;
 removeOne(stack: ItemStack): void;
 getChangeCount(): number;
 main: DefaultedList;
 armor: DefaultedList;
 offHand: DefaultedList;
 selectedSlot: number;
 player: PlayerEntity;
}
class Static_PlayerInventory {
static isValidHotbarIndex(slot: number): boolean;
static getHotbarSize(): number;
static method_20265(i: number,player: PlayerEntity): void;
static method_7389(itemStack: ItemStack): string;
static ITEM_USAGE_COOLDOWN: number;
static MAIN_SIZE: number;
static HOTBAR_SIZE: number;
static OFF_HAND_SLOT: number;
static NOT_FOUND: number;
static ARMOR_SLOTS: number[];
static HELMET_SLOTS: number[];
}

//net.minecraft.server.command.LootCommand$Target
interface LootCommand_Target extends JObject{
 accept(context: CommandContext,items: List,messageSender: LootCommand_FeedbackMessage): number;
}

//net.minecraft.loot.entry.LeafEntry$Choice
class LeafEntry_Choice extends JObject, LootChoice{
 getWeight(luck: number): number;
}

//net.minecraft.block.SculkSpreadable
interface SculkSpreadable extends JObject{
 spread(world: WorldAccess,pos: BlockPos,state: BlockState,directions: Collection,markForPostProcessing: boolean): boolean;
 spread(cursor: SculkSpreadManager_Cursor,world: WorldAccess,catalystPos: BlockPos,random: Random,spreadManager: SculkSpreadManager,shouldConvertToBlock: boolean): number;
 getUpdate(): byte;
 getDecay(oldDecay: number): number;
 method_41470(world: WorldAccess,pos: BlockPos,random: Random): boolean;
 shouldConvertToSpreadable(): boolean;
 spreadAtSamePosition(world: WorldAccess,state: BlockState,pos: BlockPos,random: Random): void;
}
class Static_SculkSpreadable {
static VEIN_ONLY_SPREADER: SculkSpreadable;
}

//net.minecraft.client.model.ModelPart$Quad
class ModelPart_Quad extends JObject{
 vertices: ModelPart_Vertex;
 direction: Vector3f;
}

//net.minecraft.server.network.ServerHandshakeNetworkHandler$1


//net.minecraft.text.HoverEvent$Action
class HoverEvent_Action extends JObject{
 getName(): string;
 toString(): string;
 contentsToJson(contents: Object): JsonElement;
 buildHoverEvent(contents: JsonElement): HoverEvent;
 buildHoverEvent(value: Text): HoverEvent;
 isParsable(): boolean;
}
class Static_HoverEvent_Action {
static byName(name: string): HoverEvent_Action;
static method_27672(action: HoverEvent_Action): HoverEvent_Action;
static SHOW_TEXT: HoverEvent_Action;
static SHOW_ITEM: HoverEvent_Action;
static SHOW_ENTITY: HoverEvent_Action;
static BY_NAME: Map;
}

//net.minecraft.server.command.FunctionCommand
class FunctionCommand extends JObject{
}
class Static_FunctionCommand {
static register(dispatcher: CommandDispatcher): void;
static execute(source: ServerCommandSource,functions: Collection): number;
static method_13384(source: ServerCommandSource): boolean;
static method_13383(context: CommandContext): number;
static method_51276(mutableObject: MutableObject,value: number): void;
static method_51985(i: number,collection: Collection): Text;
static method_51983(i: number,collection: Collection): Text;
static method_51984(collection: Collection): Text;
static method_51986(i: number,collection: Collection): Text;
static method_13382(context: CommandContext,builder: SuggestionsBuilder): CompletableFuture;
static SUGGESTION_PROVIDER: SuggestionProvider;
}

//net.minecraft.world.gen.carver.CarvingMask
class CarvingMask extends JObject{
 get(offsetX: number,y: number,offsetZ: number): boolean;
 set(offsetX: number,y: number,offsetZ: number): void;
 getMask(): long[];
 streamBlockPos(chunkPos: ChunkPos): Stream;
 setMaskPredicate(maskPredicate: CarvingMask_MaskPredicate): void;
}
class Static_CarvingMask {
static method_39786(offsetX: number,y: number,offsetZ: number): boolean;
}

//net.minecraft.entity.ai.brain.task.AdmireItemTask
class AdmireItemTask extends JObject{
}
class Static_AdmireItemTask {
static create(duration: number): Task;
static method_47282(taskContext: TaskTriggerer_TaskContext,memoryQueryResult: MemoryQueryResult,memoryQueryResult2: MemoryQueryResult,i: number,world: ServerWorld,entity: LivingEntity,time: long): boolean;
static method_47280(i: number,context: TaskTriggerer_TaskContext): App;
static method_47281(taskContext: TaskTriggerer_TaskContext,i: number,nearestVisibleWantedItem: MemoryQueryResult,admiringItem: MemoryQueryResult,admiringDisabled: MemoryQueryResult,disableWalkToAdmireItem: MemoryQueryResult): TaskRunnable;
}

//net.minecraft.util.shape.VoxelSet$PositionBiConsumer
interface VoxelSet_PositionBiConsumer extends JObject{
 consume(x1: number,y1: number,z1: number,x2: number,y2: number,z2: number): void;
}

//net.minecraft.entity.Ownable
interface Ownable extends JObject{
 getOwner(): Entity;
}

//net.minecraft.server.command.GiveCommand
class GiveCommand extends JObject{
}
class Static_GiveCommand {
static register(dispatcher: CommandDispatcher,commandRegistryAccess: CommandRegistryAccess): void;
static execute(source: ServerCommandSource,item: ItemStackArgument,targets: Collection,count: number): number;
static method_13400(context: CommandContext): number;
static method_13403(context: CommandContext): number;
static method_51991(i: number,itemStack: ItemStack,collection: Collection): Text;
static method_13404(source: ServerCommandSource): boolean;
static method_51992(i: number,itemStack: ItemStack,collection: Collection): Text;
static MAX_STACKS: number;
}

//net.minecraft.command.CommandRegistryAccess$EntryListCreationPolicySettable
interface CommandRegistryAccess_EntryListCreationPolicySettable extends JObject, CommandRegistryAccess{
 setEntryListCreationPolicy(entryListCreationPolicy: CommandRegistryAccess_EntryListCreationPolicy): void;
}

//net.minecraft.client.gui.Element
interface Element extends JObject, Navigable{
 setFocused(focused: boolean): void;
 isMouseOver(mouseX: number,mouseY: number): boolean;
 getNavigationFocus(): ScreenRect;
 getFocusedPath(): GuiNavigationPath;
 isFocused(): boolean;
 getNavigationPath(navigation: GuiNavigation): GuiNavigationPath;
 charTyped(chr: char,modifiers: number): boolean;
 mouseScrolled(mouseX: number,mouseY: number,amount: number): boolean;
 keyPressed(keyCode: number,scanCode: number,modifiers: number): boolean;
 keyReleased(keyCode: number,scanCode: number,modifiers: number): boolean;
 mouseReleased(mouseX: number,mouseY: number,button: number): boolean;
 mouseClicked(mouseX: number,mouseY: number,button: number): boolean;
 mouseMoved(mouseX: number,mouseY: number): void;
 mouseDragged(mouseX: number,mouseY: number,button: number,deltaX: number,deltaY: number): boolean;
}
class Static_Element {
static MAX_DOUBLE_CLICK_INTERVAL: long;
}

//net.minecraft.advancement.criterion.Criterion$ConditionsContainer
class Criterion_ConditionsContainer extends JObject{
 equals(o: Object): boolean;
 hashCode(): number;
 grant(tracker: PlayerAdvancementTracker): void;
 getConditions(): CriterionConditions;
}

//net.minecraft.command.argument.ItemStringReader
class ItemStringReader extends JObject{
}
class Static_ItemStringReader {
static item(registryWrapper: RegistryWrapper,reader: StringReader): ItemStringReader_ItemResult;
static getSuggestions(registryWrapper: RegistryWrapper,builder: SuggestionsBuilder,allowTag: boolean): CompletableFuture;
static method_41976(): IllegalStateException;
static itemOrTag(registryWrapper: RegistryWrapper,reader: StringReader): Either;
static method_41973(tag: Object): Message;
static method_41970(itemStringReader: ItemStringReader,item: RegistryEntry): ItemStringReader_ItemResult;
static method_9792(id: Object): Message;
static method_41971(itemStringReader: ItemStringReader,tag: RegistryEntryList): ItemStringReader_TagResult;
static TAG_DISALLOWED_EXCEPTION: SimpleCommandExceptionType;
static ID_INVALID_EXCEPTION: DynamicCommandExceptionType;
static UNKNOWN_TAG_EXCEPTION: DynamicCommandExceptionType;
static LEFT_CURLY_BRACKET: char;
static HASH_SIGN: char;
static NBT_SUGGESTION_PROVIDER: Function;
}

//net.minecraft.client.particle.ExplosionLargeParticle$Factory
class ExplosionLargeParticle_Factory extends JObject, ParticleFactory{
 createParticle(defaultParticleType: DefaultParticleType,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
 createParticle(particleEffect: ParticleEffect,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
}

//net.minecraft.util.collection.WeightedList$Entry
class WeightedList_Entry extends JObject{
 toString(): string;
 getElement(): Object;
 getWeight(): number;
}
class Static_WeightedList_Entry {
static createCodec(codec: Codec): Codec;
}

//net.minecraft.data.client.BlockStateModelGenerator$BlockTexturePool
class BlockStateModelGenerator_BlockTexturePool extends JObject{
 base(block: Block,model: Model): BlockStateModelGenerator_BlockTexturePool;
 sign(signBlock: Block): BlockStateModelGenerator_BlockTexturePool;
 fence(fenceBlock: Block): BlockStateModelGenerator_BlockTexturePool;
 family(family: BlockFamily): BlockStateModelGenerator_BlockTexturePool;
 wall(wallBlock: Block): BlockStateModelGenerator_BlockTexturePool;
 slab(block: Block): BlockStateModelGenerator_BlockTexturePool;
 stairs(block: Block): BlockStateModelGenerator_BlockTexturePool;
 pressurePlate(pressurePlateBlock: Block): BlockStateModelGenerator_BlockTexturePool;
 fenceGate(fenceGateBlock: Block): BlockStateModelGenerator_BlockTexturePool;
 customFence(customFenceBlock: Block): BlockStateModelGenerator_BlockTexturePool;
 button(buttonBlock: Block): BlockStateModelGenerator_BlockTexturePool;
 customFenceGate(customFenceGateBlock: Block): BlockStateModelGenerator_BlockTexturePool;
 same(blocks: Block[]): BlockStateModelGenerator_BlockTexturePool;
}

//net.minecraft.test.FailureLoggingTestCompletionListener
class FailureLoggingTestCompletionListener extends JObject, TestCompletionListener{
 onTestPassed(test: GameTestState): void;
 onTestFailed(test: GameTestState): void;
}
class Static_FailureLoggingTestCompletionListener {
static LOGGER: Logger;
}

//net.minecraft.predicate.LightPredicate
class LightPredicate extends JObject{
 test(world: ServerWorld,pos: BlockPos): boolean;
 toJson(): JsonElement;
}
class Static_LightPredicate {
static fromJson(json: JsonElement): LightPredicate;
static ANY: LightPredicate;
}

//net.minecraft.client.sound.SoundLoader
class SoundLoader extends JObject{
 close(): void;
 loadStreamed(id: Identifier,repeatInstantly: boolean): CompletableFuture;
 loadStatic(id: Identifier): CompletableFuture;
 loadStatic(sounds: Collection): CompletableFuture;
}
class Static_SoundLoader {
static method_19739(i: number): CompletableFuture[];
static method_19742(soundFuture: CompletableFuture): void;
}

//net.minecraft.client.search.IdentifierSearchProvider
class IdentifierSearchProvider extends JObject, ReloadableSearchProvider{
 findAll(text: string): List;
}

//net.minecraft.command.argument.serialize.ArgumentSerializer$ArgumentTypeProperties
interface ArgumentSerializer_ArgumentTypeProperties extends JObject{
 createType(commandRegistryAccess: CommandRegistryAccess): ArgumentType;
 getSerializer(): ArgumentSerializer;
}

//net.minecraft.entity.ai.brain.task.HuntFinishTask
class HuntFinishTask extends JObject{
}
class Static_HuntFinishTask {
static create(): Task;
static method_47277(taskContext: TaskTriggerer_TaskContext,attackTarget: MemoryQueryResult,huntedRecently: MemoryQueryResult): TaskRunnable;
static method_47278(taskContext: TaskTriggerer_TaskContext,memoryQueryResult: MemoryQueryResult,memoryQueryResult2: MemoryQueryResult,world: ServerWorld,entity: LivingEntity,time: long): boolean;
static method_47276(context: TaskTriggerer_TaskContext): App;
}

//net.minecraft.entity.AttackPosOffsettingMount
interface AttackPosOffsettingMount extends JObject{
 getPassengerAttackYOffset(): number;
}

//net.minecraft.client.util.telemetry.WorldUnloadedEvent
class WorldUnloadedEvent extends JObject{
 start(): void;
 send(sender: TelemetrySender): void;
 setTick(tick: long): void;
}
class Static_WorldUnloadedEvent {
static ABSENT_LAST_TICK: number;
}

//net.minecraft.world.chunk.light.LightingProvider
class LightingProvider extends JObject, LightingView{
 get(lightType: LightType): ChunkLightingView;
 getHeight(): number;
 getStatus(lightType: LightType,pos: ChunkSectionPos): LightStorage_Status;
 setRetainData(pos: ChunkPos,retainData: boolean): void;
 isLightingEnabled(sectionPos: ChunkSectionPos): boolean;
 displaySectionLevel(lightType: LightType,pos: ChunkSectionPos): string;
 checkBlock(pos: BlockPos): void;
 setSectionStatus(pos: ChunkSectionPos,notReady: boolean): void;
 enqueueSectionData(lightType: LightType,pos: ChunkSectionPos,nibbles: ChunkNibbleArray): void;
 propagateLight(chunkPos: ChunkPos): void;
 hasUpdates(): boolean;
 setColumnEnabled(pos: ChunkPos,retainData: boolean): void;
 doLightUpdates(): number;
 getLight(pos: BlockPos,ambientDarkness: number): number;
 getBottomY(): number;
 getTopY(): number;
}
class Static_LightingProvider {
static field_31714: number;
}

//net.minecraft.structure.processor.StructureProcessor
class StructureProcessor extends JObject{
 process(world: WorldView,pos: BlockPos,pivot: BlockPos,originalBlockInfo: StructureTemplate_StructureBlockInfo,currentBlockInfo: StructureTemplate_StructureBlockInfo,data: StructurePlacementData): StructureTemplate_StructureBlockInfo;
 reprocess(world: ServerWorldAccess,pos: BlockPos,pivot: BlockPos,originalBlockInfos: List,currentBlockInfos: List,data: StructurePlacementData): List;
}

//net.minecraft.structure.JigsawJunction
class JigsawJunction extends JObject{
 equals(o: Object): boolean;
 toString(): string;
 hashCode(): number;
 getDestProjection(): StructurePool_Projection;
 serialize(ops: DynamicOps): Dynamic;
 getDeltaY(): number;
 getSourceX(): number;
 getSourceGroundY(): number;
 getSourceZ(): number;
}
class Static_JigsawJunction {
static deserialize(dynamic: Dynamic): JigsawJunction;
}

//net.minecraft.world.gen.structure.Structures
class Structures extends JObject{
}
class Static_Structures {
static bootstrap(structureRegisterable: Registerable): void;
static method_46848(spawnGroup: SpawnGroup): SpawnGroup;
static method_46847(spawnGroup: SpawnGroup): StructureSpawns;
static createConfig(biomes: RegistryEntryList,terrainAdaptation: StructureTerrainAdaptation): Structure_Config;
static createConfig(biomes: RegistryEntryList,featureStep: GenerationStep_Feature,terrainAdaptation: StructureTerrainAdaptation): Structure_Config;
static createConfig(biomes: RegistryEntryList,spawns: Map,featureStep: GenerationStep_Feature,terrainAdaptation: StructureTerrainAdaptation): Structure_Config;
}

//net.minecraft.block.DetectorRailBlock$1


//net.minecraft.block.DoubleBlockProperties$PropertySource$Pair
class DoubleBlockProperties_PropertySource_Pair extends JObject, DoubleBlockProperties_PropertySource{
 apply(propertyRetriever: DoubleBlockProperties_PropertyRetriever): Object;
}

//net.minecraft.world.biome.BuiltinBiomes
class BuiltinBiomes extends JObject{
}
class Static_BuiltinBiomes {
static bootstrap(biomeRegisterable: Registerable): void;
}

//net.minecraft.client.gui.screen.recipebook.RecipeDisplayListener
interface RecipeDisplayListener extends JObject{
 onRecipesDisplayed(recipes: List): void;
}

//net.minecraft.block.LandingBlock
interface LandingBlock extends JObject{
 onDestroyedOnLanding(world: World,pos: BlockPos,fallingBlockEntity: FallingBlockEntity): void;
 getDamageSource(attacker: Entity): DamageSource;
 onLanding(world: World,pos: BlockPos,fallingBlockState: BlockState,currentStateInPos: BlockState,fallingBlockEntity: FallingBlockEntity): void;
}

//net.minecraft.advancement.criterion.ImpossibleCriterion
class ImpossibleCriterion extends JObject, Criterion{
 getId(): Identifier;
 conditionsFromJson(jsonObject: JsonObject,advancementEntityPredicateDeserializer: AdvancementEntityPredicateDeserializer): ImpossibleCriterion_Conditions;
 conditionsFromJson(obj: JsonObject,predicateDeserializer: AdvancementEntityPredicateDeserializer): CriterionConditions;
 beginTrackingCondition(manager: PlayerAdvancementTracker,conditions: Criterion_ConditionsContainer): void;
 endTrackingCondition(manager: PlayerAdvancementTracker,conditions: Criterion_ConditionsContainer): void;
 endTracking(tracker: PlayerAdvancementTracker): void;
}
class Static_ImpossibleCriterion {
static ID: Identifier;
}

//net.minecraft.world.StructureLocator
class StructureLocator extends JObject{
 cache(pos: ChunkPos,structureStarts: Map): void;
 incrementReferences(pos: ChunkPos,structure: Structure): void;
 getStructurePresence(pos: ChunkPos,type: Structure,skipReferencedStructures: boolean): StructurePresence;
}
class Static_StructureLocator {
static createMapIfEmpty(map: Object2IntMap): Object2IntMap;
static method_39839(structure: Object2IntMap,start: Structure,structureStart: StructureStart): void;
static method_39834(structure2: Structure): Long2BooleanMap;
static method_39827(l: long,generationPossibilityByChunkPos: Long2BooleanMap): void;
static method_39837(structure: Structure,posx: Long,referencesByStructure: Object2IntMap): Object2IntMap;
static method_39836(feature: Structure,references: Integer): Integer;
static LOGGER: Logger;
static START_NOT_PRESENT_REFERENCE: number;
}

//net.minecraft.world.gen.FlatLevelGeneratorPresets$Registrar
class FlatLevelGeneratorPresets_Registrar extends JObject{
 bootstrap(): void;
}

//net.minecraft.client.gui.screen.ingame.BookEditScreen$PageContent
class BookEditScreen_PageContent extends JObject{
 getVerticalOffset(position: number,lines: number): number;
 getLineStart(position: number): number;
 getLineEnd(position: number): number;
 getCursorPosition(renderer: TextRenderer,position: BookEditScreen_Position): number;
}
class Static_BookEditScreen_PageContent {
static EMPTY: BookEditScreen_PageContent;
}

//net.minecraft.entity.effect.StatusEffect
class StatusEffect extends JObject{
 getName(): Text;
 getCategory(): StatusEffectCategory;
 applyInstantEffect(source: Entity,attacker: Entity,target: LivingEntity,amplifier: number,proximity: number): void;
 onApplied(entity: LivingEntity,attributes: AttributeContainer,amplifier: number): void;
 adjustModifierAmount(amplifier: number,modifier: EntityAttributeModifier): number;
 setFactorCalculationDataSupplier(factorCalculationDataSupplier: Supplier): StatusEffect;
 applyUpdateEffect(entity: LivingEntity,amplifier: number): void;
 getFactorCalculationDataSupplier(): Optional;
 canApplyUpdateEffect(duration: number,amplifier: number): boolean;
 isInstant(): boolean;
 getAttributeModifiers(): Map;
 isBeneficial(): boolean;
 getColor(): number;
 onRemoved(entity: LivingEntity,attributes: AttributeContainer,amplifier: number): void;
 addAttributeModifier(attribute: EntityAttribute,uuid: string,amount: number,operation: EntityAttributeModifier_Operation): StatusEffect;
 getTranslationKey(): string;
}
class Static_StatusEffect {
static getRawIdNullable(type: StatusEffect): number;
static method_42128(): StatusEffectInstance_FactorCalculationData;
static byRawId(rawId: number): StatusEffect;
static getRawId(type: StatusEffect): number;
}

//net.minecraft.client.color.world.BiomeColors
class BiomeColors extends JObject{
}
class Static_BiomeColors {
static getFoliageColor(world: BlockRenderView,pos: BlockPos): number;
static method_23790(biome: Biome,x: number,z: number): number;
static method_23791(biome: Biome,x: number,z: number): number;
static getGrassColor(world: BlockRenderView,pos: BlockPos): number;
static getWaterColor(world: BlockRenderView,pos: BlockPos): number;
static getColor(world: BlockRenderView,pos: BlockPos,resolver: ColorResolver): number;
static GRASS_COLOR: ColorResolver;
static FOLIAGE_COLOR: ColorResolver;
static WATER_COLOR: ColorResolver;
}

//net.minecraft.client.gui.hud.BossBarHud$1


//net.minecraft.entity.ai.brain.task.WalkTowardsLandTask
class WalkTowardsLandTask extends JObject{
}
class Static_WalkTowardsLandTask {
static create(range: number,speed: number): Task;
static method_47170(mutableLong: MutableLong,i: number,f: number,attackTarget: MemoryQueryResult,walkTarget: MemoryQueryResult,lookTarget: MemoryQueryResult): TaskRunnable;
static method_47169(mutableLong: MutableLong,i: number,f: number,context: TaskTriggerer_TaskContext): App;
static method_47171(mutableLong: MutableLong,i: number,memoryQueryResult: MemoryQueryResult,memoryQueryResult2: MemoryQueryResult,f: number,world: ServerWorld,entity: PathAwareEntity,time: long): boolean;
static TASK_COOLDOWN: number;
}

//net.minecraft.item.map.MapFrameMarker
class MapFrameMarker extends JObject{
 getKey(): string;
 toNbt(): NbtCompound;
 getEntityId(): number;
 getPos(): BlockPos;
 getRotation(): number;
}
class Static_MapFrameMarker {
static getKey(pos: BlockPos): string;
static fromNbt(nbt: NbtCompound): MapFrameMarker;
}

//net.minecraft.network.packet.s2c.play.CommandTreeS2CPacket$LiteralNode
class CommandTreeS2CPacket_LiteralNode extends JObject, CommandTreeS2CPacket_SuggestableNode{
 write(buf: PacketByteBuf): void;
 createArgumentBuilder(commandRegistryAccess: CommandRegistryAccess): ArgumentBuilder;
}

//net.minecraft.item.ItemStackSet$1


//net.minecraft.resource.ResourceReloader$Synchronizer
interface ResourceReloader_Synchronizer extends JObject{
 whenPrepared(preparedObject: Object): CompletableFuture;
}

//net.minecraft.predicate.DamagePredicate
class DamagePredicate extends JObject{
 test(player: ServerPlayerEntity,source: DamageSource,dealt: number,taken: number,blocked: boolean): boolean;
 toJson(): JsonElement;
}
class Static_DamagePredicate {
static fromJson(json: JsonElement): DamagePredicate;
static ANY: DamagePredicate;
}

//net.minecraft.text.StringVisitable$Visitor
interface StringVisitable_Visitor extends JObject{
 accept(asString: string): Optional;
}

//net.minecraft.client.realms.util.RealmsServerFilterer
class RealmsServerFilterer extends JObject{
 remove(server: RealmsServer): List;
 filterAndSort(servers: List): List;
}

//net.minecraft.util.thread.TaskQueue$PrioritizedTask
class TaskQueue_PrioritizedTask extends JObject, Runnable{
 run(): void;
 getPriority(): number;
}

//net.minecraft.server.WorldGenerationProgressLogger
class WorldGenerationProgressLogger extends JObject, WorldGenerationProgressListener{
 start(): void;
 start(spawnPos: ChunkPos): void;
 stop(): void;
 getProgressPercentage(): number;
 setChunkStatus(pos: ChunkPos,status: ChunkStatus): void;
}
class Static_WorldGenerationProgressLogger {
static LOGGER: Logger;
}

//net.minecraft.world.tick.OrderedTick$1


//net.minecraft.util.thread.AtomicStack
class AtomicStack extends JObject{
 toList(): List;
 push(value: Object): void;
}

//net.minecraft.data.server.loottable.vanilla.VanillaGiftLootTableGenerator
class VanillaGiftLootTableGenerator extends JObject, LootTableGenerator{
 accept(exporter: BiConsumer): void;
}

//net.minecraft.command.argument.CoordinateArgument
class CoordinateArgument extends JObject{
 equals(o: Object): boolean;
 hashCode(): number;
 isRelative(): boolean;
 toAbsoluteCoordinate(offset: number): number;
}
class Static_CoordinateArgument {
static isRelative(reader: StringReader): boolean;
static parse(reader: StringReader): CoordinateArgument;
static parse(reader: StringReader,centerIntegers: boolean): CoordinateArgument;
static TILDE: char;
static MISSING_COORDINATE: SimpleCommandExceptionType;
static MISSING_BLOCK_POSITION: SimpleCommandExceptionType;
}

//net.minecraft.util.TimeSupplier$Nanoseconds
interface TimeSupplier_Nanoseconds extends JObject, TimeSupplier, LongSupplier{
 get(timeUnit: TimeUnit): long;
}

//net.minecraft.registry.tag.TagGroupLoader
class TagGroupLoader extends JObject{
 load(manager: ResourceManager): Map;
 buildGroup(tags: Map): Map;
 loadTags(resourceManager: ResourceManager): Map;
}
class Static_TagGroupLoader {
static method_43951(id: Identifier): List;
static method_43954(list: List,string: string,entry: TagEntry): void;
static method_51477(dependencyTracker: DependencyTracker,id: Identifier,entries: List): void;
static method_32840(map: Map,identifier: Identifier,resolvedEntries: Collection): void;
static method_33175(identifier: Identifier,missingReferences: Collection): void;
static LOGGER: Logger;
}

//net.minecraft.nbt.NbtShort$Cache
class NbtShort_Cache extends JObject{
}
class Static_NbtShort_Cache {
static MAX: number;
static MIN: number;
static VALUES: NbtShort[];
}

//net.minecraft.world.dimension.NetherPortal
class NetherPortal extends JObject{
 isValid(): boolean;
 wasAlreadyValid(): boolean;
 createPortal(): void;
}
class Static_NetherPortal {
static method_30487(state: BlockState,world: BlockView,pos: BlockPos): boolean;
static findOpenPosition(fallback: Vec3d,world: ServerWorld,entity: Entity,dimensions: EntityDimensions): Vec3d;
static method_47381(d: number,pos: Vec3d): Vec3d;
static method_30489(areaHelper: NetherPortal): boolean;
static getNewPortal(world: WorldAccess,pos: BlockPos,axis: Direction_Axis): Optional;
static validStateInsidePortal(state: BlockState): boolean;
static getOrEmpty(world: WorldAccess,pos: BlockPos,validator: Predicate,axis: Direction_Axis): Optional;
static entityPosInPortal(portalRect: BlockLocating_Rectangle,portalAxis: Direction_Axis,entityPos: Vec3d,entityDimensions: EntityDimensions): Vec3d;
static getNetherTeleportTarget(destination: ServerWorld,portalRect: BlockLocating_Rectangle,portalAxis: Direction_Axis,offset: Vec3d,entity: Entity,velocity: Vec3d,yaw: number,pitch: number): TeleportTarget;
static MIN_WIDTH: number;
static MAX_WIDTH: number;
static MIN_HEIGHT: number;
static MAX_HEIGHT: number;
static IS_VALID_FRAME_BLOCK: AbstractBlock_ContextPredicate;
static FALLBACK_THRESHOLD: number;
static HEIGHT_STRETCH: number;
}

//net.minecraft.client.report.ContextMessageCollector
class ContextMessageCollector extends JObject{
 add(message: SignedMessage): void;
 add(log: ChatLog,selections: IntCollection,consumer: ContextMessageCollector_IndexedMessageConsumer): void;
 tryLink(message: SignedMessage): boolean;
 hasContextMessage(): boolean;
}

//net.minecraft.nbt.NbtHelper
class NbtHelper extends JObject{
}
class Static_NbtHelper {
static matches(standard: NbtElement,subject: NbtElement,ignoreListOrder: boolean): boolean;
static fromBlockPos(pos: BlockPos): NbtCompound;
static toBlockPos(nbt: NbtCompound): BlockPos;
static toFormattedString(nbt: NbtElement,withArrayContents: boolean): string;
static toFormattedString(nbt: NbtElement): string;
static withProperty(state: State,property: Property,key: string,properties: NbtCompound,root: NbtCompound): State;
static fromFluidState(state: FluidState): NbtCompound;
static appendIndent(depth: number,stringBuilder: StringBuilder): StringBuilder;
static method_32262(nbtCompound: NbtCompound,key: string): string;
static method_32279(nbt: NbtCompound): NbtList;
static method_32278(nbt: NbtCompound): NbtList;
static method_32266(nbtList: NbtList,nbtList2: NbtList,nbt: NbtList): void;
static method_32269(nbt: NbtList): number;
static method_32263(nbtCompound: NbtCompound,string: string,property: string): void;
static method_32268(nbt: NbtList): number;
static method_32274(nbt: NbtList): number;
static method_32272(nbt: NbtList): number;
static method_32265(nbtList: NbtList,nbt: NbtCompound): void;
static method_32261(map: Map,nbt: NbtCompound): NbtList;
static method_32264(nbt: NbtList): number;
static toPrettyPrintedText(element: NbtElement): Text;
static getDataVersion(nbt: NbtCompound,fallback: number): number;
static toNbtProviderString(compound: NbtCompound): string;
static fromNbtProviderString(string: string): NbtCompound;
static toNbtProviderFormat(compound: NbtCompound): NbtCompound;
static fromNbtProviderFormattedPalette(string: string): NbtCompound;
static appendFormattedString(stringBuilder: StringBuilder,nbt: NbtElement,depth: number,withArrayContents: boolean): StringBuilder;
static fromNbtProviderFormat(compound: NbtCompound): NbtCompound;
static toNbtProviderFormattedPalette(compound: NbtCompound): string;
static nameValue(property: Property,value: Comparable): string;
static fromBlockState(state: BlockState): NbtCompound;
static putDataVersion(nbt: NbtCompound,dataVersion: number): NbtCompound;
static putDataVersion(nbt: NbtCompound): NbtCompound;
static toBlockState(blockLookup: RegistryEntryLookup,nbt: NbtCompound): BlockState;
static toGameProfile(nbt: NbtCompound): GameProfile;
static writeGameProfile(nbt: NbtCompound,profile: GameProfile): NbtCompound;
static toUuid(element: NbtElement): UUID;
static fromUuid(uuid: UUID): NbtIntArray;
static method_32276(nbt: NbtList): number;
static BLOCK_POS_COMPARATOR: Comparator;
static ENTITY_POS_COMPARATOR: Comparator;
static DATA_KEY: string;
static LEFT_CURLY_BRACKET: char;
static RIGHT_CURLY_BRACKET: char;
static COMMA: string;
static COLON: char;
static COMMA_SPLITTER: Splitter;
static COLON_SPLITTER: Splitter;
static LOGGER: Logger;
static field_33229: number;
static field_33230: number;
}

//net.minecraft.world.event.BlockPositionSource
class BlockPositionSource extends JObject, PositionSource{
 getType(): PositionSourceType;
 getPos(world: World): Optional;
}
class Static_BlockPositionSource {
static method_32928(blockPositionSource: BlockPositionSource): BlockPos;
static method_32927(instance: RecordCodecBuilder_Instance): App;
static CODEC: Codec;
}

//net.minecraft.client.particle.SquidInkParticle$GlowSquidInkFactory
class SquidInkParticle_GlowSquidInkFactory extends JObject, ParticleFactory{
 createParticle(defaultParticleType: DefaultParticleType,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
 createParticle(particleEffect: ParticleEffect,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
}

//net.minecraft.entity.ai.brain.ScheduleBuilder
class ScheduleBuilder extends JObject{
 build(): Schedule;
 withActivity(startTime: number,activity: Activity): ScheduleBuilder;
}
class Static_ScheduleBuilder {
static method_19223(activityEntry: ScheduleBuilder_ActivityEntry,rule: ScheduleRule): void;
}

//net.minecraft.unused.packageinfo.PackageInfo8501
interface PackageInfo8501 extends JObject{
}

//net.minecraft.server.command.ScoreboardCommand
class ScoreboardCommand extends JObject{
}
class Static_ScoreboardCommand {
static register(dispatcher: CommandDispatcher): void;
static executeModifyRenderType(source: ServerCommandSource,objective: ScoreboardObjective,type: ScoreboardCriterion_RenderType): number;
static executeListObjectives(source: ServerCommandSource): number;
static executeClearDisplay(source: ServerCommandSource,slot: number): number;
static executeAddObjective(source: ServerCommandSource,objective: string,criteria: ScoreboardCriterion,displayName: Text): number;
static makeRenderTypeArguments(): LiteralArgumentBuilder;
static executeRemoveObjective(source: ServerCommandSource,objective: ScoreboardObjective): number;
static executeModifyObjective(source: ServerCommandSource,objective: ScoreboardObjective,displayName: Text): number;
static executeReset(source: ServerCommandSource,targets: Collection): number;
static executeReset(source: ServerCommandSource,targets: Collection,objective: ScoreboardObjective): number;
static executeGet(source: ServerCommandSource,target: string,objective: ScoreboardObjective): number;
static executeRemove(source: ServerCommandSource,targets: Collection,objective: ScoreboardObjective,score: number): number;
static executeEnable(source: ServerCommandSource,targets: Collection,objective: ScoreboardObjective): number;
static method_13583(context: CommandContext): number;
static method_13579(context: CommandContext): number;
static method_13603(context: CommandContext): number;
static method_13587(context: CommandContext,builder: SuggestionsBuilder): CompletableFuture;
static method_13610(context: CommandContext): number;
static method_13593(context: CommandContext): number;
static method_13598(context: CommandContext): number;
static suggestDisabled(source: ServerCommandSource,targets: Collection,builder: SuggestionsBuilder): CompletableFuture;
static method_13601(renderType: ScoreboardCriterion_RenderType,context: CommandContext): number;
static method_13590(context: CommandContext): number;
static method_13599(context: CommandContext): number;
static method_13594(context: CommandContext): number;
static method_13588(context: CommandContext): number;
static method_13580(context: CommandContext): number;
static method_13577(context: CommandContext): number;
static method_13591(context: CommandContext): number;
static method_13574(context: CommandContext): number;
static method_13582(context: CommandContext): number;
static method_13585(source: ServerCommandSource): boolean;
static method_13612(context: CommandContext): number;
static method_13608(context: CommandContext): number;
static method_52063(scoreboardObjective: ScoreboardObjective,collection: Collection): Text;
static method_52060(i: number,scoreboardObjective: ScoreboardObjective,collection: Collection): Text;
static method_52055(string: string,scoreboardPlayerScore: ScoreboardPlayerScore,scoreboardObjective: ScoreboardObjective): Text;
static method_52073(collection: Collection): Text;
static method_52064(scoreboardObjective: ScoreboardObjective,collection: Collection,i: number): Text;
static method_52050(i: number,scoreboardObjective: ScoreboardObjective,collection: Collection,j: number): Text;
static method_52070(collection: Collection): Text;
static executeListPlayers(source: ServerCommandSource): number;
static method_52072(scoreboardObjective: ScoreboardObjective,collection: Collection): Text;
static method_52052(scoreboardObjective: ScoreboardObjective,collection: Collection): Text;
static method_52066(): Text;
static method_52065(collection: Collection): Text;
static method_52068(scoreboardObjective: ScoreboardObjective,collection: Collection): Text;
static method_52049(i: number,scoreboardObjective: ScoreboardObjective,collection: Collection): Text;
static executeListScores(source: ServerCommandSource,target: string): number;
static method_52054(string: string): Text;
static method_52056(string: string,map: Map): Text;
static method_52074(scoreboardObjective: ScoreboardObjective,collection: Collection): Text;
static method_52053(scoreboardObjective: ScoreboardObjective,collection: Collection,i: number): Text;
static method_52069(scoreboardObjective: ScoreboardObjective,collection: Collection,i: number): Text;
static executeOperation(source: ServerCommandSource,targets: Collection,targetObjective: ScoreboardObjective,operation: OperationArgumentType_Operation,sources: Collection,sourceObjectives: ScoreboardObjective): number;
static method_52061(i: number,scoreboardObjective: ScoreboardObjective,collection: Collection,j: number): Text;
static method_52057(collection: Collection): Text;
static method_52062(scoreboardObjective: ScoreboardObjective): Text;
static method_52059(): Text;
static method_52051(scoreboardObjective: ScoreboardObjective): Text;
static method_52058(entry: Map_Entry): Text;
static method_52048(i: number,scoreboardObjective: ScoreboardObjective): Text;
static method_52067(scoreboardObjective: ScoreboardObjective): Text;
static method_52047(i: number): Text;
static method_52071(scoreboardObjective: ScoreboardObjective): Text;
static executeSetDisplay(source: ServerCommandSource,slot: number,objective: ScoreboardObjective): number;
static method_13605(objective: Object,target: Object): Message;
static executeAdd(source: ServerCommandSource,targets: Collection,objective: ScoreboardObjective,score: number): number;
static executeSet(source: ServerCommandSource,targets: Collection,objective: ScoreboardObjective,score: number): number;
static OBJECTIVES_ADD_DUPLICATE_EXCEPTION: SimpleCommandExceptionType;
static OBJECTIVES_DISPLAY_ALREADY_EMPTY_EXCEPTION: SimpleCommandExceptionType;
static OBJECTIVES_DISPLAY_ALREADY_SET_EXCEPTION: SimpleCommandExceptionType;
static PLAYERS_ENABLE_FAILED_EXCEPTION: SimpleCommandExceptionType;
static PLAYERS_ENABLE_INVALID_EXCEPTION: SimpleCommandExceptionType;
static PLAYERS_GET_NULL_EXCEPTION: Dynamic2CommandExceptionType;
}

//net.minecraft.client.sound.SoundManager$SoundList$1


//net.minecraft.text.TextContent
interface TextContent extends JObject{
 parse(source: ServerCommandSource,sender: Entity,depth: number): MutableText;
 visit(visitor: StringVisitable_Visitor): Optional;
 visit(visitor: StringVisitable_StyledVisitor,style: Style): Optional;
}
class Static_TextContent {
static EMPTY: TextContent;
}

//net.minecraft.world.entity.EntityHandler
interface EntityHandler extends JObject{
 destroy(entity: Object): void;
 create(entity: Object): void;
 startTicking(entity: Object): void;
 updateLoadStatus(entity: Object): void;
 startTracking(entity: Object): void;
 stopTicking(entity: Object): void;
 stopTracking(entity: Object): void;
}

//net.minecraft.client.model.ModelPart
class ModelPart extends JObject{
 scale(vec3f: Vector3f): void;
 isEmpty(): boolean;
 rotate(matrices: MatrixStack): void;
 rotate(vec3f: Vector3f): void;
 translate(vec3f: Vector3f): void;
 getChild(name: string): ModelPart;
 render(matrices: MatrixStack,vertices: VertexConsumer,light: number,overlay: number): void;
 render(matrices: MatrixStack,vertices: VertexConsumer,light: number,overlay: number,red: number,green: number,blue: number,alpha: number): void;
 setTransform(rotationData: ModelTransform): void;
 getDefaultTransform(): ModelTransform;
 setAngles(pitch: number,yaw: number,roll: number): void;
 traverse(): Stream;
 setPivot(x: number,y: number,z: number): void;
 setDefaultTransform(transform: ModelTransform): void;
 getTransform(): ModelTransform;
 resetTransform(): void;
 copyTransform(part: ModelPart): void;
 hasChild(child: string): boolean;
 forEachCuboid(matrices: MatrixStack,consumer: ModelPart_CuboidConsumer): void;
 getRandomCuboid(random: Random): ModelPart_Cuboid;
 pivotX: number;
 pivotY: number;
 pivotZ: number;
 pitch: number;
 yaw: number;
 roll: number;
 xScale: number;
 yScale: number;
 zScale: number;
 visible: boolean;
 hidden: boolean;
}
class Static_ModelPart {
static method_35747(matrixStack: MatrixStack,cuboidConsumer: ModelPart_CuboidConsumer,string: string,name: string,part: ModelPart): void;
static field_37937: number;
}

//net.minecraft.world.gen.chunk.BlendingData$CollidableBlockDensityConsumer
interface BlendingData_CollidableBlockDensityConsumer extends JObject{
 consume(biomeX: number,halfSectionY: number,biomeZ: number,collidableBlockDensity: number): void;
}

//net.minecraft.client.toast.Toast
interface Toast extends JObject{
 getType(): Object;
 getWidth(): number;
 getHeight(): number;
 getRequiredSpaceCount(): number;
 draw(context: DrawContext,manager: ToastManager,startTime: long): Toast_Visibility;
}
class Static_Toast {
static TEXTURE: Identifier;
static TYPE: Object;
static BASE_HEIGHT: number;
}

//net.minecraft.client.render.MapRenderer
class MapRenderer extends JObject, AutoCloseable{
 close(): void;
 updateTexture(id: number,state: MapState): void;
 clearStateTextures(): void;
 draw(matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,id: number,state: MapState,hidePlayerIcons: boolean,light: number): void;
}
class Static_MapRenderer {
static MAP_ICONS_TEXTURE: Identifier;
static MAP_ICONS_RENDER_LAYER: RenderLayer;
static DEFAULT_IMAGE_WIDTH: number;
static DEFAULT_IMAGE_HEIGHT: number;
}

//net.minecraft.util.math.noise.OctavePerlinNoiseSampler
class OctavePerlinNoiseSampler extends JObject{
 sample(x: number,y: number,z: number): number;
 sample(x: number,y: number,z: number,yScale: number,yMax: number,useOrigin: boolean): number;
 addDebugInfo(info: StringBuilder): void;
 method_40556(d: number): number;
 getOctave(octave: number): PerlinNoiseSampler;
}
class Static_OctavePerlinNoiseSampler {
static create(random: Random,octaves: List): OctavePerlinNoiseSampler;
static create(random: Random,offset: number,firstAmplitude: number,amplitudes: number[]): OctavePerlinNoiseSampler;
static create(random: Random,offset: number,amplitudes: DoubleList): OctavePerlinNoiseSampler;
static create(random: Random,octaves: IntStream): OctavePerlinNoiseSampler;
static createLegacy(random: Random,octaves: IntStream): OctavePerlinNoiseSampler;
static createLegacy(random: Random,offset: number,amplitudes: DoubleList): OctavePerlinNoiseSampler;
static calculateAmplitudes(octaves: IntSortedSet): Pair;
static method_39131(amplitude: Double): boolean;
static skipCalls(random: Random): void;
static method_39129(double_: Double): string;
static maintainPrecision(value: number): number;
static field_31704: number;
}

//net.minecraft.loot.condition.KilledByPlayerLootCondition$Serializer
class KilledByPlayerLootCondition_Serializer extends JObject, JsonSerializer{
 fromJson(json: JsonObject,context: JsonDeserializationContext): Object;
 fromJson(jsonObject: JsonObject,jsonDeserializationContext: JsonDeserializationContext): KilledByPlayerLootCondition;
 toJson(jsonObject: JsonObject,killedByPlayerLootCondition: KilledByPlayerLootCondition,jsonSerializationContext: JsonSerializationContext): void;
 toJson(json: JsonObject,object: Object,context: JsonSerializationContext): void;
}

//net.minecraft.client.font.Glyph
interface Glyph extends JObject{
 getAdvance(): number;
 getAdvance(bold: boolean): number;
 getShadowOffset(): number;
 getBoldOffset(): number;
 bake(glyphRendererGetter: Function): GlyphRenderer;
}

//net.minecraft.network.encryption.NetworkEncryptionUtils$KeyDecoder
interface NetworkEncryptionUtils_KeyDecoder extends JObject{
 apply(key: byte[]): Key;
}

//net.minecraft.village.TradeOffers$SellItemFactory
class TradeOffers_SellItemFactory extends JObject, TradeOffers_Factory{
 create(entity: Entity,random: Random): TradeOffer;
}

//net.minecraft.client.realms.gui.screen.RealmsNotificationsScreen$NotificationRunnersFactory
interface RealmsNotificationsScreen_NotificationRunnersFactory extends JObject{
 createPeriodicRunnersManager(checkers: RealmsPeriodicCheckers): PeriodicRunnerFactory_RunnersManager;
 isNews(): boolean;
}

//net.minecraft.server.command.SpreadPlayersCommand
class SpreadPlayersCommand extends JObject{
}
class Static_SpreadPlayersCommand {
static register(dispatcher: CommandDispatcher): void;
static execute(source: ServerCommandSource,center: Vec2f,spreadDistance: number,maxRange: number,maxY: number,respectTeams: boolean,players: Collection): number;
static spread(center: Vec2f,spreadDistance: number,world: ServerWorld,random: Random,minX: number,minZ: number,maxX: number,maxZ: number,maxY: number,piles: SpreadPlayersCommand_Pile,respectTeams: boolean): void;
static getPileCountRespectingTeams(entities: Collection): number;
static method_52084(bl: boolean,piles: SpreadPlayersCommand_Pile,vec2f: Vec2f,d: number): Text;
static method_39991(maxY: Object,worldBottomY: Object): Message;
static method_13660(pilesCount: Object,x: Object,z: Object,maxSpreadDistance: Object): Message;
static method_13659(source: ServerCommandSource): boolean;
static method_29193(context: CommandContext): number;
static method_13658(context: CommandContext): number;
static makePiles(random: Random,count: number,minX: number,minZ: number,maxX: number,maxZ: number): SpreadPlayersCommand_Pile;
static getMinDistance(entities: Collection,world: ServerWorld,piles: SpreadPlayersCommand_Pile,maxY: number,respectTeams: boolean): number;
static method_13655(pilesCount: Object,x: Object,z: Object,maxSpreadDistance: Object): Message;
static MAX_ATTEMPTS: number;
static FAILED_TEAMS_EXCEPTION: Dynamic4CommandExceptionType;
static FAILED_ENTITIES_EXCEPTION: Dynamic4CommandExceptionType;
static INVALID_HEIGHT_EXCEPTION: Dynamic2CommandExceptionType;
}

//net.minecraft.village.TradeOffers$TypeAwareBuyForOneEmeraldFactory
class TradeOffers_TypeAwareBuyForOneEmeraldFactory extends JObject, TradeOffers_Factory{
 create(entity: Entity,random: Random): TradeOffer;
}
class Static_TradeOffers_TypeAwareBuyForOneEmeraldFactory {
static method_19202(map: Map,villagerType: VillagerType): boolean;
static method_19201(villagerType: VillagerType): void;
}

//net.minecraft.client.realms.RealmsClientConfig
class RealmsClientConfig extends JObject{
}
class Static_RealmsClientConfig {
static setProxy(proxy: Proxy): void;
static getProxy(): Proxy;
static proxy: Proxy;
}

//net.minecraft.text.Style$Serializer
class Style_Serializer extends JObject, JsonDeserializer, JsonSerializer{
 deserialize(json: JsonElement,type: Type,context: JsonDeserializationContext): Object;
 deserialize(jsonElement: JsonElement,type: Type,jsonDeserializationContext: JsonDeserializationContext): Style;
 serialize(style: Style,type: Type,jsonSerializationContext: JsonSerializationContext): JsonElement;
 serialize(style: Object,type: Type,context: JsonSerializationContext): JsonElement;
}
class Static_Style_Serializer {
static getFont(root: JsonObject): Identifier;
static getHoverEvent(root: JsonObject): HoverEvent;
static parseNullableBoolean(root: JsonObject,key: string): Boolean;
static getClickEvent(root: JsonObject): ClickEvent;
static parseInsertion(root: JsonObject): string;
static parseColor(root: JsonObject): TextColor;
}

//net.minecraft.block.SkullBlock$SkullType
interface SkullBlock_SkullType extends JObject{
}

//net.minecraft.client.render.model.BakedModelManager
class BakedModelManager extends JObject, ResourceReloader, AutoCloseable, FabricBakedModelManager{
 close(): void;
 reload(synchronizer: ResourceReloader_Synchronizer,manager: ResourceManager,prepareProfiler: Profiler,applyProfiler: Profiler,prepareExecutor: Executor,applyExecutor: Executor): CompletableFuture;
 getModel(id: ModelIdentifier): BakedModel;
 getMissingModel(): BakedModel;
 getBlockModels(): BlockModels;
 setMipmapLevels(mipmapLevels: number): void;
 shouldRerender(from: BlockState,to: BlockState): boolean;
 getAtlas(id: Identifier): SpriteAtlasTexture;
}
class Static_BakedModelManager {
static reloadModels(resourceManager: ResourceManager,executor: Executor): CompletableFuture;
static method_45879(modelId: Identifier,spriteIds: Collection): void;
static method_45895(resourceManager: ResourceManager): Map;
static method_45894(i: number): CompletableFuture[];
static method_45899(executor: Executor,models: Map): CompletionStage;
static method_45880(resourceManager: ResourceManager): Map;
static reloadBlockStates(resourceManager: ResourceManager,executor: Executor): CompletableFuture;
static method_45900(i: number): CompletableFuture[];
static method_45887(result: BakedModelManager_BakingResult): CompletionStage;
static method_45893(executor: Executor,blockStates: Map): CompletionStage;
static method_45891(map: Map,multimap: Multimap,id: Identifier,spriteId: SpriteIdentifier): Sprite;
static method_45892(map: Map,bakedModel: BakedModel,map2: Map,state: BlockState): void;
static method_45902(entry: Map_Entry): SpriteAtlasManager_AtlasPreparation;
static method_45888(bakingResult: BakedModelManager_BakingResult,void_: Void): BakedModelManager_BakingResult;
static method_45898(entry: Map_Entry): Pair;
static method_45886(spriteIdentifier: SpriteIdentifier): string;
static method_45890(entry: Map_Entry): Pair;
static method_45897(models: List): Map;
static method_45889(blockStates: List): Map;
static LOGGER: Logger;
static LAYERS_TO_LOADERS: Map;
}

//net.minecraft.item.AutomaticItemPlacementContext$1


//net.minecraft.world.biome.TheNetherBiomeCreator
class TheNetherBiomeCreator extends JObject{
}
class Static_TheNetherBiomeCreator {
static createNetherWastes(featureLookup: RegistryEntryLookup,carverLookup: RegistryEntryLookup): Biome;
static createBasaltDeltas(featureLookup: RegistryEntryLookup,carverLookup: RegistryEntryLookup): Biome;
static createWarpedForest(featureLookup: RegistryEntryLookup,carverLookup: RegistryEntryLookup): Biome;
static createCrimsonForest(featureLookup: RegistryEntryLookup,carverLookup: RegistryEntryLookup): Biome;
static createSoulSandValley(featureLookup: RegistryEntryLookup,carverLookup: RegistryEntryLookup): Biome;
}

//net.minecraft.client.particle.WaterSplashParticle$SplashFactory
class WaterSplashParticle_SplashFactory extends JObject, ParticleFactory{
 createParticle(defaultParticleType: DefaultParticleType,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
 createParticle(particleEffect: ParticleEffect,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
}

//net.minecraft.village.VillagerDataContainer
interface VillagerDataContainer extends JObject, VariantHolder{
 getVariant(): Object;
 getVariant(): VillagerType;
 setVariant(variant: Object): void;
 setVariant(villagerType: VillagerType): void;
 getVillagerData(): VillagerData;
 setVillagerData(villagerData: VillagerData): void;
}

//net.minecraft.network.packet.s2c.play.SetTradeOffersS2CPacket
class SetTradeOffersS2CPacket extends JObject, Packet{
 apply(clientPlayPacketListener: ClientPlayPacketListener): void;
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
 getOffers(): TradeOfferList;
 getExperience(): number;
 getLevelProgress(): number;
 isRefreshable(): boolean;
 isLeveled(): boolean;
 getSyncId(): number;
}

//net.minecraft.util.thread.FutureQueue
interface FutureQueue extends JObject{
 append(future: FutureQueue_FutureSupplier): void;
}
class Static_FutureQueue {
static immediate(executor: Executor): FutureQueue;
static method_45311(throwable: Throwable): Object;
static method_45312(executor: Executor,future: FutureQueue_FutureSupplier): void;
static LOGGER: Logger;
}

//net.minecraft.block.DoorBlock$1


//net.minecraft.entity.ai.goal.Goal
class Goal extends JObject{
 toString(): string;
 start(): void;
 stop(): void;
 canStop(): boolean;
 tick(): void;
 shouldContinue(): boolean;
 canStart(): boolean;
 shouldRunEveryTick(): boolean;
 getControls(): EnumSet;
 setControls(controls: EnumSet): void;
}
class Static_Goal {
static toGoalTicks(serverTicks: number): number;
}

//net.minecraft.client.sound.TickableSoundInstance
interface TickableSoundInstance extends JObject, SoundInstance{
 isDone(): boolean;
 tick(): void;
}

//net.minecraft.util.math.floatprovider.FloatSupplier
interface FloatSupplier extends JObject{
 get(random: Random): number;
}

//net.minecraft.client.sound.SoundEntryDeserializer
class SoundEntryDeserializer extends JObject, JsonDeserializer{
 deserialize(jsonElement: JsonElement,type: Type,jsonDeserializationContext: JsonDeserializationContext): SoundEntry;
 deserialize(functionJson: JsonElement,unused: Type,context: JsonDeserializationContext): Object;
}
class Static_SoundEntryDeserializer {
static ONE: FloatProvider;
}

//net.minecraft.text.OrderedText
interface OrderedText extends JObject{
 accept(visitor: CharacterVisitor): boolean;
}
class Static_OrderedText {
static map(visitor: CharacterVisitor,codePointMapper: Int2IntFunction): CharacterVisitor;
static of(text: OrderedText): OrderedText;
static concat(first: OrderedText,second: OrderedText): OrderedText;
static concat(texts: OrderedText[]): OrderedText;
static concat(texts: List): OrderedText;
static empty(): OrderedText;
static styledBackwardsVisitedString(string: string,style: Style,codePointMapper: Int2IntFunction): OrderedText;
static styledBackwardsVisitedString(string: string,style: Style): OrderedText;
static styled(codePoint: number,style: Style): OrderedText;
static styledForwardsVisitedString(string: string,style: Style): OrderedText;
static styledForwardsVisitedString(string: string,style: Style,codePointMapper: Int2IntFunction): OrderedText;
static method_30748(string: string,style: Style,int2IntFunction: Int2IntFunction,visitor: CharacterVisitor): boolean;
static method_30753(string: string,style: Style,visitor: CharacterVisitor): boolean;
static method_34911(string: string,style: Style,int2IntFunction: Int2IntFunction,visitor: CharacterVisitor): boolean;
static method_34907(string: string,style: Style,visitor: CharacterVisitor): boolean;
static method_30746(characterVisitor: CharacterVisitor,int2IntFunction: Int2IntFunction,charIndex: number,style: Style,charPoint: number): boolean;
static method_30751(style: Style,i: number,visitor: CharacterVisitor): boolean;
static innerConcat(text1: OrderedText,text2: OrderedText): OrderedText;
static innerConcat(texts: List): OrderedText;
static method_30750(list: List,visitor: CharacterVisitor): boolean;
static method_30744(visitor: CharacterVisitor): boolean;
static method_30743(orderedText: OrderedText,orderedText2: OrderedText,visitor: CharacterVisitor): boolean;
static EMPTY: OrderedText;
}

//net.minecraft.world.gen.feature.RootSystemFeatureConfig
class RootSystemFeatureConfig extends JObject, FeatureConfig{
 feature: RegistryEntry;
 requiredVerticalSpaceForTree: number;
 rootRadius: number;
 rootReplaceable: TagKey;
 rootStateProvider: BlockStateProvider;
 rootPlacementAttempts: number;
 maxRootColumnHeight: number;
 hangingRootRadius: number;
 hangingRootVerticalSpan: number;
 hangingRootStateProvider: BlockStateProvider;
 hangingRootPlacementAttempts: number;
 allowedVerticalWaterForTree: number;
 predicate: BlockPredicate;
}
class Static_RootSystemFeatureConfig {
static method_34342(config: RootSystemFeatureConfig): Integer;
static method_34343(config: RootSystemFeatureConfig): RegistryEntry;
static method_34341(config: RootSystemFeatureConfig): Integer;
static method_34340(config: RootSystemFeatureConfig): TagKey;
static method_34332(instance: RecordCodecBuilder_Instance): App;
static method_34339(config: RootSystemFeatureConfig): BlockStateProvider;
static method_34335(config: RootSystemFeatureConfig): Integer;
static method_34338(config: RootSystemFeatureConfig): Integer;
static method_39919(config: RootSystemFeatureConfig): BlockPredicate;
static method_34337(config: RootSystemFeatureConfig): Integer;
static method_34334(config: RootSystemFeatureConfig): BlockStateProvider;
static method_36421(config: RootSystemFeatureConfig): Integer;
static method_34333(config: RootSystemFeatureConfig): Integer;
static method_34336(config: RootSystemFeatureConfig): Integer;
static CODEC: Codec;
}

//net.minecraft.predicate.entity.EntityFlagsPredicate
class EntityFlagsPredicate extends JObject{
 test(entity: Entity): boolean;
 toJson(): JsonElement;
}
class Static_EntityFlagsPredicate {
static nullableBooleanFromJson(json: JsonObject,key: string): Boolean;
static fromJson(json: JsonElement): EntityFlagsPredicate;
static ANY: EntityFlagsPredicate;
}

//net.minecraft.client.render.entity.model.EntityModelLoader
class EntityModelLoader extends JObject, SynchronousResourceReloader{
 reload(manager: ResourceManager): void;
 getModelPart(layer: EntityModelLayer): ModelPart;
}

//net.minecraft.util.math.BlockPos$5


//net.minecraft.client.render.model.json.ModelElementTexture$Deserializer
class ModelElementTexture_Deserializer extends JObject, JsonDeserializer{
 deserialize(functionJson: JsonElement,unused: Type,context: JsonDeserializationContext): Object;
 deserialize(jsonElement: JsonElement,type: Type,jsonDeserializationContext: JsonDeserializationContext): ModelElementTexture;
}
class Static_ModelElementTexture_Deserializer {
static DEFAULT_ROTATION: number;
}

//net.minecraft.entity.Entity$PositionUpdater
interface Entity_PositionUpdater extends JObject{
 accept(entity: Entity,x: number,y: number,z: number): void;
}

//net.minecraft.server.command.WorldBorderCommand
class WorldBorderCommand extends JObject{
}
class Static_WorldBorderCommand {
static register(dispatcher: CommandDispatcher): void;
static executeWarningDistance(source: ServerCommandSource,distance: number): number;
static executeGet(source: ServerCommandSource): number;
static method_13857(context: CommandContext): number;
static method_13862(source: ServerCommandSource): boolean;
static method_13861(context: CommandContext): number;
static method_13855(context: CommandContext): number;
static method_13864(context: CommandContext): number;
static executeBuffer(source: ServerCommandSource,distance: number): number;
static method_13871(context: CommandContext): number;
static method_13867(context: CommandContext): number;
static method_13872(context: CommandContext): number;
static method_13866(context: CommandContext): number;
static method_13860(context: CommandContext): number;
static method_13870(context: CommandContext): number;
static method_52151(d: number): Text;
static executeCenter(source: ServerCommandSource,pos: Vec2f): number;
static method_52158(f: number): Text;
static method_52159(i: number): Text;
static method_52153(f: number): Text;
static method_52154(i: number): Text;
static method_52157(d: number,l: long): Text;
static executeDamage(source: ServerCommandSource,damagePerBlock: number): number;
static executeWarningTime(source: ServerCommandSource,time: number): number;
static method_52156(d: number): Text;
static method_52152(d: number,l: long): Text;
static method_52155(vec2f: Vec2f): Text;
static executeSet(source: ServerCommandSource,distance: number,time: long): number;
static CENTER_FAILED_EXCEPTION: SimpleCommandExceptionType;
static SET_FAILED_NO_CHANGE_EXCEPTION: SimpleCommandExceptionType;
static SET_FAILED_SMALL_EXCEPTION: SimpleCommandExceptionType;
static SET_FAILED_BIG_EXCEPTION: SimpleCommandExceptionType;
static SET_FAILED_FAR_EXCEPTION: SimpleCommandExceptionType;
static WARNING_TIME_FAILED_EXCEPTION: SimpleCommandExceptionType;
static WARNING_DISTANCE_FAILED_EXCEPTION: SimpleCommandExceptionType;
static DAMAGE_BUFFER_FAILED_EXCEPTION: SimpleCommandExceptionType;
static DAMAGE_AMOUNT_FAILED_EXCEPTION: SimpleCommandExceptionType;
}

//net.minecraft.loot.entry.LootPoolEntryTypes
class LootPoolEntryTypes extends JObject{
}
class Static_LootPoolEntryTypes {
static register(id: string,jsonSerializer: JsonSerializer): LootPoolEntryType;
static createGsonSerializer(): Object;
static EMPTY: LootPoolEntryType;
static ITEM: LootPoolEntryType;
static LOOT_TABLE: LootPoolEntryType;
static DYNAMIC: LootPoolEntryType;
static TAG: LootPoolEntryType;
static ALTERNATIVES: LootPoolEntryType;
static SEQUENCE: LootPoolEntryType;
static GROUP: LootPoolEntryType;
}

//net.minecraft.client.render.model.json.ModelVariantMap
class ModelVariantMap extends JObject{
 equals(o: Object): boolean;
 hashCode(): number;
 getVariant(key: string): WeightedUnbakedModel;
 getVariantMap(): Map;
 getMultipartModel(): MultipartUnbakedModel;
 hasMultipartModel(): boolean;
 containsVariant(key: string): boolean;
 getAllModels(): Set;
}
class Static_ModelVariantMap {
static fromJson(context: ModelVariantMap_DeserializationContext,json: JsonElement): ModelVariantMap;
static fromJson(context: ModelVariantMap_DeserializationContext,reader: Reader): ModelVariantMap;
}

//net.minecraft.client.gl.ShaderProgram
class ShaderProgram extends JObject, ShaderProgramSetupView, AutoCloseable{
 getName(): string;
 close(): void;
 bind(): void;
 getFormat(): VertexFormat;
 unbind(): void;
 addSampler(name: string,sampler: Object): void;
 markUniformsDirty(): void;
 getUniformOrDefault(name: string): Uniform;
 getGlRef(): number;
 getFragmentShader(): ShaderStage;
 getVertexShader(): ShaderStage;
 getUniform(name: string): GlUniform;
 attachReferencedShaders(): void;
 modelViewMat: GlUniform;
 projectionMat: GlUniform;
 viewRotationMat: GlUniform;
 textureMat: GlUniform;
 screenSize: GlUniform;
 colorModulator: GlUniform;
 light0Direction: GlUniform;
 light1Direction: GlUniform;
 glintAlpha: GlUniform;
 fogStart: GlUniform;
 fogEnd: GlUniform;
 fogColor: GlUniform;
 fogShape: GlUniform;
 lineWidth: GlUniform;
 gameTime: GlUniform;
 chunkOffset: GlUniform;
}
class Static_ShaderProgram {
static readBlendState(json: JsonObject): GlBlendState;
static loadShader(factory: ResourceFactory,type: ShaderStage_Type,name: string): ShaderStage;
static SHADERS_DIRECTORY: string;
static CORE_DIRECTORY: string;
static INCLUDE_DIRECTORY: string;
static LOGGER: Logger;
static DEFAULT_UNIFORM: Uniform;
static field_32780: boolean;
static activeProgram: ShaderProgram;
static activeProgramGlRef: number;
}

//net.minecraft.world.gen.heightprovider.HeightProviderType
interface HeightProviderType extends JObject{
 codec(): Codec;
}
class Static_HeightProviderType {
static register(id: string,codec: Codec): HeightProviderType;
static method_35393(codec: Codec): Codec;
static CONSTANT: HeightProviderType;
static UNIFORM: HeightProviderType;
static BIASED_TO_BOTTOM: HeightProviderType;
static VERY_BIASED_TO_BOTTOM: HeightProviderType;
static TRAPEZOID: HeightProviderType;
static WEIGHTED_LIST: HeightProviderType;
}

//net.minecraft.unused.packageinfo.PackageInfo7263
interface PackageInfo7263 extends JObject{
}

//net.minecraft.network.packet.s2c.play.ScreenHandlerPropertyUpdateS2CPacket
class ScreenHandlerPropertyUpdateS2CPacket extends JObject, Packet{
 getValue(): number;
 apply(listener: PacketListener): void;
 apply(clientPlayPacketListener: ClientPlayPacketListener): void;
 write(buf: PacketByteBuf): void;
 getPropertyId(): number;
 getSyncId(): number;
}

//net.minecraft.data.server.tag.TagProvider$ProvidedTagBuilder
class TagProvider_ProvidedTagBuilder extends JObject{
 add(keys: RegistryKey[]): TagProvider_ProvidedTagBuilder;
 add(key: RegistryKey): TagProvider_ProvidedTagBuilder;
 addOptional(id: Identifier): TagProvider_ProvidedTagBuilder;
 addOptionalTag(id: Identifier): TagProvider_ProvidedTagBuilder;
 addTag(identifiedTag: TagKey): TagProvider_ProvidedTagBuilder;
}

//net.minecraft.network.listener.ServerLoginPacketListener
interface ServerLoginPacketListener extends JObject, ServerPacketListener{
 onHello(packet: LoginHelloC2SPacket): void;
 onQueryResponse(packet: LoginQueryResponseC2SPacket): void;
 onKey(packet: LoginKeyC2SPacket): void;
}

//net.minecraft.entity.ai.brain.task.LookTargetUtil
class LookTargetUtil extends JObject{
}
class Static_LookTargetUtil {
static find(entity: PathAwareEntity,horizontalRange: number,verticalRange: number): Vec3d;
static getEntity(entity: LivingEntity,uuidMemoryModule: MemoryModuleType): Optional;
static canSee(brain: Brain,target: LivingEntity): boolean;
static canSee(brain: Brain,memoryType: MemoryModuleType,filter: Predicate): boolean;
static canSee(brain: Brain,memoryModuleType: MemoryModuleType,entityType: EntityType): boolean;
static lookAtAndWalkTowardsEachOther(first: LivingEntity,second: LivingEntity,speed: number): void;
static walkTowardsEachOther(first: LivingEntity,second: LivingEntity,speed: number): void;
static isTargetWithinAttackRange(mob: MobEntity,target: LivingEntity,rangedWeaponReachReduction: number): boolean;
static lookAt(entity: LivingEntity,target: LivingEntity): void;
static isNewTargetTooFar(source: LivingEntity,target: LivingEntity,extraDistance: number): boolean;
static getCloserEntity(source: LivingEntity,first: Optional,second: LivingEntity): LivingEntity;
static getCloserEntity(source: LivingEntity,first: LivingEntity,second: LivingEntity): LivingEntity;
static isVisibleInMemory(source: LivingEntity,target: LivingEntity): boolean;
static walkTowards(entity: LivingEntity,target: BlockPos,speed: number,completionRange: number): void;
static walkTowards(entity: LivingEntity,target: LookTarget,speed: number,completionRange: number): void;
static walkTowards(entity: LivingEntity,target: Entity,speed: number,completionRange: number): void;
static hasBreedTarget(entity: LivingEntity): boolean;
static give(entity: LivingEntity,stack: ItemStack,targetLocation: Vec3d): void;
static give(entity: LivingEntity,stack: ItemStack,targetLocation: Vec3d,velocityFactor: Vec3d,yOffset: number): void;
static getPosClosestToOccupiedPointOfInterest(world: ServerWorld,center: ChunkSectionPos,radius: number): ChunkSectionPos;
static method_19553(brain: Brain,target: LivingEntity): boolean;
static method_20418(serverWorld: ServerWorld,i: number,sectionPos: ChunkSectionPos): boolean;
static method_31500(target: Entity): LivingEntity;
static lookAtEachOther(first: LivingEntity,second: LivingEntity): void;
static method_24563(livingEntity: LivingEntity,uuid: UUID): Entity;
static method_19547(entityType: EntityType,entity: LivingEntity): boolean;
}

//net.minecraft.block.entity.LecternBlockEntity$1


//net.minecraft.network.packet.s2c.play.EntityStatusEffectS2CPacket
class EntityStatusEffectS2CPacket extends JObject, Packet{
 apply(clientPlayPacketListener: ClientPlayPacketListener): void;
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
 getDuration(): number;
 getAmplifier(): byte;
 getEffectId(): StatusEffect;
 getEntityId(): number;
 shouldShowIcon(): boolean;
 isAmbient(): boolean;
 getFactorCalculationData(): StatusEffectInstance_FactorCalculationData;
 shouldShowParticles(): boolean;
}
class Static_EntityStatusEffectS2CPacket {
static method_43891(buf2: PacketByteBuf,factorCalculationData: StatusEffectInstance_FactorCalculationData): void;
static method_43892(buf2: PacketByteBuf): StatusEffectInstance_FactorCalculationData;
static AMBIENT_MASK: number;
static SHOW_PARTICLES_MASK: number;
static SHOW_ICON_MASK: number;
}

//net.minecraft.block.entity.LecternBlockEntity$2


//net.minecraft.loot.provider.number.BinomialLootNumberProvider
class BinomialLootNumberProvider extends JObject, LootNumberProvider{
 getType(): LootNumberProviderType;
 nextInt(context: LootContext): number;
 nextFloat(context: LootContext): number;
 getRequiredParameters(): Set;
}
class Static_BinomialLootNumberProvider {
static create(n: number,p: number): BinomialLootNumberProvider;
}

//net.minecraft.enchantment.Enchantments
class Enchantments extends JObject{
}
class Static_Enchantments {
static register(name: string,enchantment: Enchantment): Enchantment;
static ALL_ARMOR: EquipmentSlot[];
static PROTECTION: Enchantment;
static FIRE_PROTECTION: Enchantment;
static FEATHER_FALLING: Enchantment;
static BLAST_PROTECTION: Enchantment;
static PROJECTILE_PROTECTION: Enchantment;
static RESPIRATION: Enchantment;
static AQUA_AFFINITY: Enchantment;
static THORNS: Enchantment;
static DEPTH_STRIDER: Enchantment;
static FROST_WALKER: Enchantment;
static BINDING_CURSE: Enchantment;
static SOUL_SPEED: Enchantment;
static SWIFT_SNEAK: Enchantment;
static SHARPNESS: Enchantment;
static SMITE: Enchantment;
static BANE_OF_ARTHROPODS: Enchantment;
static KNOCKBACK: Enchantment;
static FIRE_ASPECT: Enchantment;
static LOOTING: Enchantment;
static SWEEPING: Enchantment;
static EFFICIENCY: Enchantment;
static SILK_TOUCH: Enchantment;
static UNBREAKING: Enchantment;
static FORTUNE: Enchantment;
static POWER: Enchantment;
static PUNCH: Enchantment;
static FLAME: Enchantment;
static INFINITY: Enchantment;
static LUCK_OF_THE_SEA: Enchantment;
static LURE: Enchantment;
static LOYALTY: Enchantment;
static IMPALING: Enchantment;
static RIPTIDE: Enchantment;
static CHANNELING: Enchantment;
static MULTISHOT: Enchantment;
static QUICK_CHARGE: Enchantment;
static PIERCING: Enchantment;
static MENDING: Enchantment;
static VANISHING_CURSE: Enchantment;
}

//net.minecraft.village.TradeOffers$SellSuspiciousStewFactory
class TradeOffers_SellSuspiciousStewFactory extends JObject, TradeOffers_Factory{
 create(entity: Entity,random: Random): TradeOffer;
}

//net.minecraft.world.chunk.PalettedContainer
class PalettedContainer extends JObject, PaletteResizeListener, ReadableContainer{
 lock(): void;
 get(x: number,y: number,z: number): Object;
 count(counter: PalettedContainer_Counter): void;
 set(x: number,y: number,z: number,value: Object): void;
 copy(): PalettedContainer;
 forEachValue(action: Consumer): void;
 slice(): PalettedContainer;
 unlock(): void;
 swap(x: number,y: number,z: number,value: Object): Object;
 serialize(idList: IndexedIterable,paletteProvider: PalettedContainer_PaletteProvider): ReadableContainer_Serialized;
 getPacketSize(): number;
 swapUnsafe(x: number,y: number,z: number,value: Object): Object;
 readPacket(buf: PacketByteBuf): void;
 hasAny(predicate: Predicate): boolean;
 writePacket(buf: PacketByteBuf): void;
 onResize(i: number,object: Object): number;
}
class Static_PalettedContainer {
static increment(int2IntOpenHashMap: Int2IntOpenHashMap,key: number): void;
static read(idList: IndexedIterable,paletteProvider: PalettedContainer_PaletteProvider,serialized: ReadableContainer_Serialized): DataResult;
static createCodec(idList: IndexedIterable,entryCodec: Codec,provider: PalettedContainer_PaletteProvider,defaultValue: Object,reader: ReadableContainer_Reader): Codec;
static createPalettedContainerCodec(idList: IndexedIterable,entryCodec: Codec,paletteProvider: PalettedContainer_PaletteProvider,defaultValue: Object): Codec;
static createReadableContainerCodec(idList: IndexedIterable,entryCodec: Codec,paletteProvider: PalettedContainer_PaletteProvider,defaultValue: Object): Codec;
static method_44342(reader: ReadableContainer_Reader,indexedIterable: IndexedIterable,paletteProvider: PalettedContainer_PaletteProvider,serialized: ReadableContainer_Serialized): DataResult;
static method_38302(indexedIterable: IndexedIterable,paletteProvider: PalettedContainer_PaletteProvider,container: ReadableContainer): ReadableContainer_Serialized;
static method_44348(idListx: IndexedIterable,paletteProviderx: PalettedContainer_PaletteProvider,serialized: ReadableContainer_Serialized): DataResult;
static method_12333(newSize: number,added: Object): number;
static method_38296(codec: Codec,object: Object,instance: RecordCodecBuilder_Instance): App;
static method_49528(): string;
static method_44349(id: number,value: Object): number;
static method_39794(consumer: Consumer,palette: Palette,id: number): void;
static method_44344(indexedIterable: IndexedIterable,palette: Palette,id: number): number;
static applyEach(is: number[],applier: IntUnaryOperator): void;
static method_49527(invalidLengthException: PackedIntegerArray_InvalidLengthException): string;
static method_44341(result: PalettedContainer): ReadableContainer;
static field_34557: number;
}

//net.minecraft.network.packet.s2c.play.PlayerSpawnS2CPacket
class PlayerSpawnS2CPacket extends JObject, Packet{
 apply(clientPlayPacketListener: ClientPlayPacketListener): void;
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
 getId(): number;
 getPlayerUuid(): UUID;
 getX(): number;
 getY(): number;
 getZ(): number;
 getPitch(): byte;
 getYaw(): byte;
}

//net.minecraft.structure.rule.blockentity.AppendStaticRuleBlockEntityModifier
class AppendStaticRuleBlockEntityModifier extends JObject, RuleBlockEntityModifier{
 getType(): RuleBlockEntityModifierType;
 modifyBlockEntityNbt(random: Random,nbt: NbtCompound): NbtCompound;
}
class Static_AppendStaticRuleBlockEntityModifier {
static method_49896(instance: RecordCodecBuilder_Instance): App;
static method_49897(modifier: AppendStaticRuleBlockEntityModifier): NbtCompound;
static CODEC: Codec;
}

//net.minecraft.client.toast.SystemToast
class SystemToast extends JObject, Toast{
 getType(): Object;
 getType(): SystemToast_Type;
 getWidth(): number;
 getHeight(): number;
 draw(context: DrawContext,manager: ToastManager,startTime: long): Toast_Visibility;
 setContent(title: Text,description: Text): void;
}
class Static_SystemToast {
static add(manager: ToastManager,type: SystemToast_Type,title: Text,description: Text): void;
static create(client: MinecraftClient,type: SystemToast_Type,title: Text,description: Text): SystemToast;
static addWorldAccessFailureToast(client: MinecraftClient,worldName: string): void;
static addWorldDeleteFailureToast(client: MinecraftClient,worldName: string): void;
static show(manager: ToastManager,type: SystemToast_Type,title: Text,description: Text): void;
static addPackCopyFailure(client: MinecraftClient,directory: string): void;
static getTextAsList(text: Text): ImmutableList;
static MIN_WIDTH: number;
static LINE_HEIGHT: number;
static PADDING_Y: number;
}

//net.minecraft.util.math.ChunkPos
class ChunkPos extends JObject{
 equals(o: Object): boolean;
 toString(): string;
 hashCode(): number;
 getChebyshevDistance(pos: ChunkPos): number;
 getEndX(): number;
 getEndZ(): number;
 getStartPos(): BlockPos;
 getRegionRelativeZ(): number;
 getRegionRelativeX(): number;
 getBlockPos(offsetX: number,y: number,offsetZ: number): BlockPos;
 toLong(): long;
 getCenterX(): number;
 getCenterZ(): number;
 getOffsetZ(offset: number): number;
 getOffsetX(offset: number): number;
 getStartZ(): number;
 getStartX(): number;
 getCenterAtY(y: number): BlockPos;
 getRegionX(): number;
 getRegionZ(): number;
 x: number;
 z: number;
}
class Static_ChunkPos {
static hashCode(x: number,z: number): number;
static stream(center: ChunkPos,radius: number): Stream;
static stream(pos1: ChunkPos,pos2: ChunkPos): Stream;
static fromRegionCenter(x: number,z: number): ChunkPos;
static getPackedZ(pos: long): number;
static getPackedX(pos: long): number;
static toLong(pos: BlockPos): long;
static toLong(chunkX: number,chunkZ: number): long;
static fromRegion(x: number,z: number): ChunkPos;
static field_36299: number;
static MARKER: long;
static ORIGIN: ChunkPos;
static field_30953: long;
static field_30954: long;
static field_30955: number;
static field_38224: number;
static field_30956: number;
static field_38225: number;
static field_30957: number;
static field_30958: number;
static field_30959: number;
}

//net.minecraft.client.util.telemetry.WorldLoadedEvent
class WorldLoadedEvent extends JObject{
 send(sender: TelemetrySender): boolean;
 setBrand(brand: string): void;
 setGameMode(gameMode: GameMode,hardcore: boolean): void;
 putServerType(builder: PropertyMap_Builder): void;
}

//net.minecraft.data.DataCache
class DataCache extends JObject{
 run(providerName: string,runner: DataCache_Runner): CompletableFuture;
 store(runResult: DataCache_RunResult): void;
 write(): void;
 isVersionDifferent(providerName: string): boolean;
}
class Static_DataCache {
static parseOrCreateCache(root: Path,dataProviderPath: Path): DataCache_CachedData;
static method_46568(cachedDataWriter: DataCache_CachedDataWriter,void_: Object): DataCache_RunResult;
static LOGGER: Logger;
static HEADER: string;
}

//net.minecraft.client.util.Monitor
class Monitor extends JObject{
 toString(): string;
 getHandle(): long;
 findClosestVideoModeIndex(videoMode: VideoMode): number;
 getCurrentVideoMode(): VideoMode;
 findClosestVideoMode(videoMode: Optional): VideoMode;
 getViewportX(): number;
 getViewportY(): number;
 getVideoMode(index: number): VideoMode;
 populateVideoModes(): void;
 getVideoModeCount(): number;
}

//net.minecraft.client.realms.dto.RealmsNotification
class RealmsNotification extends JObject{
 getUuid(): UUID;
 isDismissable(): boolean;
 isSeen(): boolean;
}
class Static_RealmsNotification {
static parse(json: string): List;
static fromJson(json: JsonObject): RealmsNotification;
static LOGGER: Logger;
static NOTIFICATION_UUID_KEY: string;
static DISMISSABLE_KEY: string;
static SEEN_KEY: string;
static TYPE_KEY: string;
static VISIT_URL_TYPE: string;
}

//net.minecraft.command.argument.serialize.StringArgumentSerializer
class StringArgumentSerializer extends JObject, ArgumentSerializer{
 getArgumentTypeProperties(argumentType: ArgumentType): ArgumentSerializer_ArgumentTypeProperties;
 getArgumentTypeProperties(stringArgumentType: StringArgumentType): StringArgumentSerializer_Properties;
 fromPacket(buf: PacketByteBuf): ArgumentSerializer_ArgumentTypeProperties;
 fromPacket(packetByteBuf: PacketByteBuf): StringArgumentSerializer_Properties;
 writePacket(properties: ArgumentSerializer_ArgumentTypeProperties,buf: PacketByteBuf): void;
 writePacket(properties: StringArgumentSerializer_Properties,packetByteBuf: PacketByteBuf): void;
 writeJson(properties: StringArgumentSerializer_Properties,jsonObject: JsonObject): void;
 writeJson(properties: ArgumentSerializer_ArgumentTypeProperties,json: JsonObject): void;
}

//net.minecraft.util.dynamic.ForwardingDynamicOps
class ForwardingDynamicOps extends JObject, DynamicOps{
 remove(input: Object,key: string): Object;
 empty(): Object;
 getByteBuffer(input: Object): DataResult;
 getMap(input: Object): DataResult;
 createMap(map: Stream): Object;
 createLong(l: long): Object;
 createString(string: string): Object;
 getStream(input: Object): DataResult;
 getList(input: Object): DataResult;
 compressMaps(): boolean;
 mapBuilder(): RecordBuilder;
 getNumberValue(input: Object): DataResult;
 createList(stream: Stream): Object;
 mergeToMap(map: Object,key: Object,value: Object): DataResult;
 mergeToMap(map: Object,values: MapLike): DataResult;
 createByte(b: byte): Object;
 getMapValues(input: Object): DataResult;
 createNumeric(number: Number): Object;
 getBooleanValue(input: Object): DataResult;
 createShort(s: short): Object;
 createInt(i: number): Object;
 convertTo(outputOps: DynamicOps,input: Object): Object;
 getStringValue(input: Object): DataResult;
 getMapEntries(input: Object): DataResult;
 createFloat(f: number): Object;
 mergeToList(list: Object,values: List): DataResult;
 mergeToList(list: Object,value: Object): DataResult;
 createDouble(d: number): Object;
 createBoolean(bl: boolean): Object;
 getLongStream(input: Object): DataResult;
 createLongList(stream: LongStream): Object;
 listBuilder(): ListBuilder;
 createIntList(stream: IntStream): Object;
 getIntStream(input: Object): DataResult;
 createByteList(buf: ByteBuffer): Object;
}

//net.minecraft.world.gen.chunk.ChunkNoiseSampler$2


//net.minecraft.client.model.ModelCuboidData
class ModelCuboidData extends JObject{
 createCuboid(textureWidth: number,textureHeight: number): ModelPart_Cuboid;
}

//net.minecraft.command.argument.OperationArgumentType$Operation
interface OperationArgumentType_Operation extends JObject{
 apply(a: ScoreboardPlayerScore,b: ScoreboardPlayerScore): void;
}

//net.minecraft.loot.function.ConditionalLootFunction$Builder
class ConditionalLootFunction_Builder extends JObject, LootFunction_Builder, LootConditionConsumingBuilder{
 conditionally(condition: LootCondition_Builder): LootConditionConsumingBuilder;
 conditionally(builder: LootCondition_Builder): ConditionalLootFunction_Builder;
 getThisConditionConsumingBuilder(): LootConditionConsumingBuilder;
 getThisConditionConsumingBuilder(): ConditionalLootFunction_Builder;
}

//net.minecraft.world.gen.chunk.ChunkNoiseSampler$1


//net.minecraft.network.listener.ServerQueryPacketListener
interface ServerQueryPacketListener extends JObject, ServerPacketListener{
 onRequest(packet: QueryRequestC2SPacket): void;
 onPing(packet: QueryPingC2SPacket): void;
}

//net.minecraft.text.Style$Writer
class Style_Writer extends JObject{
}

//net.minecraft.block.Block$NeighborGroup
class Block_NeighborGroup extends JObject{
 equals(o: Object): boolean;
 hashCode(): number;
}

//net.minecraft.loot.condition.TimeCheckLootCondition
class TimeCheckLootCondition extends JObject, LootCondition{
 test(context: Object): boolean;
 test(lootContext: LootContext): boolean;
 getType(): LootConditionType;
 getRequiredParameters(): Set;
}
class Static_TimeCheckLootCondition {
static create(value: BoundedIntUnaryOperator): TimeCheckLootCondition_Builder;
}

//net.minecraft.loot.provider.score.LootScoreProviderTypes
class LootScoreProviderTypes extends JObject{
}
class Static_LootScoreProviderTypes {
static register(id: string,jsonSerializer: JsonSerializer): LootScoreProviderType;
static createGsonSerializer(): Object;
static FIXED: LootScoreProviderType;
static CONTEXT: LootScoreProviderType;
}

//net.minecraft.entity.ai.brain.task.FindRoarTargetTask
class FindRoarTargetTask extends JObject{
}
class Static_FindRoarTargetTask {
static create(targetFinder: Function): Task;
static method_47258(fun: Function,roarTarget: MemoryQueryResult,attackTarget: MemoryQueryResult,cantReachWalkTargetSince: MemoryQueryResult): TaskRunnable;
static method_47257(fun: Function,memoryQueryResult: MemoryQueryResult,memoryQueryResult2: MemoryQueryResult,world: ServerWorld,entity: WardenEntity,time: long): boolean;
static method_47256(fun: Function,context: TaskTriggerer_TaskContext): App;
}

//net.minecraft.entity.ai.brain.task.MemoryTransferTask
class MemoryTransferTask extends JObject{
}
class Static_MemoryTransferTask {
static create(runPredicate: Predicate,sourceType: MemoryModuleType,targetType: MemoryModuleType,expiry: UniformIntProvider): Task;
static method_46912(predicate: Predicate,taskContext: TaskTriggerer_TaskContext,uniformIntProvider: UniformIntProvider,source: MemoryQueryResult,target: MemoryQueryResult): TaskRunnable;
static method_46913(predicate: Predicate,memoryQueryResult: MemoryQueryResult,taskContext: TaskTriggerer_TaskContext,memoryQueryResult2: MemoryQueryResult,uniformIntProvider: UniformIntProvider,world: ServerWorld,entity: LivingEntity,time: long): boolean;
static method_46911(memoryModuleType: MemoryModuleType,memoryModuleType2: MemoryModuleType,predicate: Predicate,uniformIntProvider: UniformIntProvider,context: TaskTriggerer_TaskContext): App;
}

//net.minecraft.network.listener.ServerHandshakePacketListener
interface ServerHandshakePacketListener extends JObject, ServerPacketListener{
 onHandshake(packet: HandshakeC2SPacket): void;
}

//net.minecraft.util.shape.PairList
interface PairList extends JObject{
 size(): number;
 getPairs(): DoubleList;
 forEachPair(predicate: PairList_Consumer): boolean;
}

//net.minecraft.util.math.GravityField
class GravityField extends JObject{
 addPoint(pos: BlockPos,mass: number): void;
 calculate(pos: BlockPos,mass: number): number;
}

//net.minecraft.util.math.ColorHelper$Abgr
class ColorHelper_Abgr extends JObject{
}
class Static_ColorHelper_Abgr {
static getBlue(abgr: number): number;
static getGreen(abgr: number): number;
static getRed(abgr: number): number;
static getAlpha(abgr: number): number;
static getBgr(abgr: number): number;
static withAlpha(alpha: number,bgr: number): number;
static toOpaque(abgr: number): number;
static getAbgr(a: number,b: number,g: number,r: number): number;
}

//net.minecraft.world.gen.noise.NoiseConfig$1


//net.minecraft.structure.BastionTreasureData
class BastionTreasureData extends JObject{
}
class Static_BastionTreasureData {
static bootstrap(poolRegisterable: Registerable): void;
}

//net.minecraft.block.WallMountedBlock$1


//net.minecraft.client.util.GlAllocationUtils
class GlAllocationUtils extends JObject{
}
class Static_GlAllocationUtils {
static allocateByteBuffer(size: number): ByteBuffer;
static resizeByteBuffer(source: ByteBuffer,size: number): ByteBuffer;
static ALLOCATOR: MemoryUtil_MemoryAllocator;
}

//net.minecraft.unused.packageinfo.PackageInfo8585
interface PackageInfo8585 extends JObject{
}

//net.minecraft.world.level.storage.LevelSummary
class LevelSummary extends JObject, Comparable{
 getName(): string;
 compareTo(levelSummary: LevelSummary): number;
 compareTo(other: Object): number;
 isLocked(): boolean;
 getVersion(): MutableText;
 getDisplayName(): string;
 getIconPath(): Path;
 getConversionWarning(): LevelSummary_ConversionWarning;
 getLastPlayed(): long;
 isHardcore(): boolean;
 getLevelInfo(): LevelInfo;
 getGameMode(): GameMode;
 isExperimental(): boolean;
 getDetails(): Text;
 getVersionInfo(): SaveVersionInfo;
 isVersionAvailable(): boolean;
 isUnavailable(): boolean;
 isFutureLevel(): boolean;
 isDifferentVersion(): boolean;
 hasCheats(): boolean;
 requiresConversion(): boolean;
}
class Static_LevelSummary {
static method_48165(style: Style): Style;
}

//net.minecraft.client.particle.FireworksSparkParticle$1


//net.minecraft.client.gui.hud.spectator.TeamTeleportSpectatorMenu$TeleportToSpecificTeamCommand
class TeamTeleportSpectatorMenu_TeleportToSpecificTeamCommand extends JObject, SpectatorMenuCommand{
 getName(): Text;
 use(menu: SpectatorMenu): void;
 isEnabled(): boolean;
 renderIcon(context: DrawContext,brightness: number,alpha: number): void;
}
class Static_TeamTeleportSpectatorMenu_TeleportToSpecificTeamCommand {
static create(client: MinecraftClient,team: Team): Optional;
}

//net.minecraft.client.util.SmoothUtil
class SmoothUtil extends JObject{
 clear(): void;
 smooth(original: number,smoother: number): number;
}

//net.minecraft.item.ItemGroup$EntryCollector
interface ItemGroup_EntryCollector extends JObject{
 accept(displayContext: ItemGroup_DisplayContext,entries: ItemGroup_Entries): void;
}

//net.minecraft.client.realms.util.Errable
interface Errable extends JObject{
 error(errorMessage: Text): void;
 error(errorMessage: string): void;
}

//net.minecraft.data.report.CommandSyntaxProvider
class CommandSyntaxProvider extends JObject, DataProvider{
 getName(): string;
 run(writer: DataWriter): CompletableFuture;
}
class Static_CommandSyntaxProvider {
static method_46811(dataWriter: DataWriter,path: Path,lookup: RegistryWrapper_WrapperLookup): CompletionStage;
}

//net.minecraft.client.render.model.json.ModelVariantMap$Deserializer
class ModelVariantMap_Deserializer extends JObject, JsonDeserializer{
 deserialize(functionJson: JsonElement,unused: Type,context: JsonDeserializationContext): Object;
 deserialize(jsonElement: JsonElement,type: Type,jsonDeserializationContext: JsonDeserializationContext): ModelVariantMap;
}

//net.minecraft.util.SystemDetails
class SystemDetails extends JObject{
 collect(): string;
 writeTo(stringBuilder: StringBuilder): void;
 addSection(name: string,value: string): void;
 addSection(name: string,valueSupplier: Supplier): void;
}
class Static_SystemDetails {
static method_37151(): string;
static method_37148(): string;
static method_37136(): string;
static method_37141(physicalMemory: PhysicalMemory): string;
static method_37142(virtualMemory: VirtualMemory): string;
static method_37134(physicalMemory: PhysicalMemory): string;
static method_37150(virtualMemory: VirtualMemory): string;
static method_37152(virtualMemory: VirtualMemory): string;
static method_37147(virtualMemory: VirtualMemory): string;
static method_37132(graphicsCard: GraphicsCard): string;
static method_37129(processorIdentifier: CentralProcessor_ProcessorIdentifier): string;
static method_37149(centralProcessor: CentralProcessor): string;
static method_37138(centralProcessor: CentralProcessor): string;
static method_37127(entry: Map_Entry): string;
static method_37144(centralProcessor: CentralProcessor): string;
static method_37125(stringBuilder: StringBuilder,name: string,value: string): void;
static MEBI: long;
static GIGA: long;
static LOGGER: Logger;
static OPERATING_SYSTEM: string;
static JAVA_VERSION: string;
static JVM_VERSION: string;
}

//net.minecraft.block.ChestBlock$3


//net.minecraft.world.gen.chunk.ChunkNoiseSampler$Cache2D
class ChunkNoiseSampler_Cache2D extends JObject, DensityFunctionTypes_Wrapper, ChunkNoiseSampler_ParentedNoiseType{
 type(): DensityFunctionTypes_Wrapping_Type;
 fill(densities: number[],applier: DensityFunction_EachApplier): void;
 wrapped(): DensityFunction;
 sample(pos: DensityFunction_NoisePos): number;
}

//net.minecraft.block.ChestBlock$4


//net.minecraft.block.ChestBlock$1


//net.minecraft.block.ChestBlock$2


//net.minecraft.structure.EndCityGenerator
class EndCityGenerator extends JObject{
}
class Static_EndCityGenerator {
static createPart(manager: StructureTemplateManager,piece: EndCityGenerator_Part,depth: number,parent: EndCityGenerator_Piece,pos: BlockPos,pieces: List,random: Random): boolean;
static addPiece(pieces: List,piece: EndCityGenerator_Piece): EndCityGenerator_Piece;
static createPiece(structureTemplateManager: StructureTemplateManager,lastPiece: EndCityGenerator_Piece,relativePosition: BlockPos,template: string,rotation: BlockRotation,ignoreAir: boolean): EndCityGenerator_Piece;
static addPieces(structureTemplateManager: StructureTemplateManager,pos: BlockPos,rotation: BlockRotation,pieces: List,random: Random): void;
static MAX_DEPTH: number;
static BUILDING: EndCityGenerator_Part;
static SMALL_TOWER_BRIDGE_ATTACHMENTS: List;
static SMALL_TOWER: EndCityGenerator_Part;
static BRIDGE_PIECE: EndCityGenerator_Part;
static FAT_TOWER_BRIDGE_ATTACHMENTS: List;
static FAT_TOWER: EndCityGenerator_Part;
}

//net.minecraft.block.PillarBlock$1


//net.minecraft.client.gl.PostEffectProcessor
class PostEffectProcessor extends JObject, AutoCloseable{
 getName(): string;
 close(): void;
 render(tickDelta: number): void;
 setupDimensions(targetsWidth: number,targetsHeight: number): void;
 addTarget(name: string,width: number,height: number): void;
 getSecondaryTarget(name: string): Framebuffer;
 addPass(programName: string,source: Framebuffer,dest: Framebuffer): PostEffectPass;
}
class Static_PostEffectProcessor {
static method_43210(string: string): InvalidHierarchicalFileException;
static MAIN_TARGET_NAME: string;
}

//net.minecraft.command.suggestion.SuggestionProviders
class SuggestionProviders extends JObject{
}
class Static_SuggestionProviders {
static register(id: Identifier,provider: SuggestionProvider): SuggestionProvider;
static byId(id: Identifier): SuggestionProvider;
static getLocalProvider(provider: SuggestionProvider): SuggestionProvider;
static computeId(provider: SuggestionProvider): Identifier;
static method_10023(entityType: EntityType): Message;
static method_10025(context: CommandContext,builder: SuggestionsBuilder): CompletableFuture;
static method_10030(context: CommandContext,builder: SuggestionsBuilder): CompletableFuture;
static method_10028(context: CommandContext,builder: SuggestionsBuilder): CompletableFuture;
static method_45916(commandContext: CommandContext,entityType: EntityType): boolean;
static method_10029(context: CommandContext,builder: SuggestionsBuilder): CompletableFuture;
static REGISTRY: Map;
static ASK_SERVER_NAME: Identifier;
static ASK_SERVER: SuggestionProvider;
static ALL_RECIPES: SuggestionProvider;
static AVAILABLE_SOUNDS: SuggestionProvider;
static SUMMONABLE_ENTITIES: SuggestionProvider;
}

//net.minecraft.network.packet.s2c.play.AdvancementUpdateS2CPacket
class AdvancementUpdateS2CPacket extends JObject, Packet{
 apply(clientPlayPacketListener: ClientPlayPacketListener): void;
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
 shouldClearCurrent(): boolean;
 getAdvancementIdsToRemove(): Set;
 getAdvancementsToEarn(): Map;
 getAdvancementsToProgress(): Map;
}
class Static_AdvancementUpdateS2CPacket {
static method_34197(buf2: PacketByteBuf,progress: AdvancementProgress): void;
static method_34198(buf2: PacketByteBuf,task: Advancement_Builder): void;
}

//net.minecraft.recipe.SpecialRecipeSerializer
class SpecialRecipeSerializer extends JObject, RecipeSerializer{
 write(buf: PacketByteBuf,recipe: Recipe): void;
 write(packetByteBuf: PacketByteBuf,craftingRecipe: CraftingRecipe): void;
 read(id: Identifier,json: JsonObject): Recipe;
 read(id: Identifier,buf: PacketByteBuf): Recipe;
 read(identifier: Identifier,jsonObject: JsonObject): CraftingRecipe;
 read(identifier: Identifier,packetByteBuf: PacketByteBuf): CraftingRecipe;
}

//net.minecraft.world.biome.source.util.VanillaTerrainParametersCreator
class VanillaTerrainParametersCreator extends JObject{
}
class Static_VanillaTerrainParametersCreator {
static createJaggednessSpline(continents: ToFloatFunction,erosion: ToFloatFunction,ridges: ToFloatFunction,ridgesFolded: ToFloatFunction,amplified: boolean): Spline;
static createOffsetSpline(continents: ToFloatFunction,erosion: ToFloatFunction,ridgesFolded: ToFloatFunction,amplified: boolean): Spline;
static createFactorSpline(continents: ToFloatFunction,erosion: ToFloatFunction,ridges: ToFloatFunction,ridgesFolded: ToFloatFunction,amplified: boolean): Spline;
static method_42052(ridges: ToFloatFunction,ridgesFolded: ToFloatFunction,f: number,g: number,amplifier: ToFloatFunction): Spline;
static method_42053(erosion: ToFloatFunction,ridges: ToFloatFunction,ridgesFolded: ToFloatFunction,f: number,g: number,h: number,i: number,amplifier: ToFloatFunction): Spline;
static method_42049(ridges: ToFloatFunction,f: number,amplifier: ToFloatFunction): Spline;
static method_42054(erosion: ToFloatFunction,ridges: ToFloatFunction,ridgesFolded: ToFloatFunction,f: number,bl: boolean,amplifier: ToFloatFunction): Spline;
static method_42047(f: number,g: number,h: number,i: number): number;
static method_42050(ridgesFolded: ToFloatFunction,f: number,bl: boolean,amplifier: ToFloatFunction): Spline;
static method_42060(value: number): number;
static getOffsetValue(f: number,g: number,h: number): number;
static method_42045(f: number): number;
static method_42057(value: number): number;
static method_42048(ridgesFolded: ToFloatFunction,continentalness: number,f: number,g: number,h: number,i: number,j: number,amplifier: ToFloatFunction): Spline;
static method_42059(value: number): number;
static createContinentalOffsetSpline(erosion: ToFloatFunction,ridgesFolded: ToFloatFunction,continentalness: number,f: number,g: number,h: number,i: number,j: number,bl: boolean,bl2: boolean,amplifier: ToFloatFunction): Spline;
static field_38024: number;
static field_38025: number;
static field_38026: number;
static field_38027: number;
static IDENTITY: ToFloatFunction;
static OFFSET_AMPLIFIER: ToFloatFunction;
static FACTOR_AMPLIFIER: ToFloatFunction;
static JAGGEDNESS_AMPLIFIER: ToFloatFunction;
}

//net.minecraft.entity.ai.brain.task.MeleeAttackTask
class MeleeAttackTask extends JObject{
}
class Static_MeleeAttackTask {
static create(cooldown: number): SingleTickTask;
static method_25943(mobEntity: MobEntity,stack: ItemStack): boolean;
static method_46988(i: number,context: TaskTriggerer_TaskContext): App;
static method_46989(taskContext: TaskTriggerer_TaskContext,i: number,lookTarget: MemoryQueryResult,attackTarget: MemoryQueryResult,attackCoolingDown: MemoryQueryResult,visibleMobs: MemoryQueryResult): TaskRunnable;
static method_46990(taskContext: TaskTriggerer_TaskContext,memoryQueryResult: MemoryQueryResult,memoryQueryResult2: MemoryQueryResult,memoryQueryResult3: MemoryQueryResult,memoryQueryResult4: MemoryQueryResult,i: number,world: ServerWorld,entity: MobEntity,time: long): boolean;
static isHoldingUsableRangedWeapon(mob: MobEntity): boolean;
}

//net.minecraft.resource.metadata.ResourceMetadataReader
interface ResourceMetadataReader extends JObject{
 getKey(): string;
 fromJson(json: JsonObject): Object;
}

//net.minecraft.client.util.NetworkUtils
class NetworkUtils extends JObject{
}
class Static_NetworkUtils {
static downloadResourcePack(file: File,url: URL,headers: Map,maxFileSize: number,progressListener: ProgressListener,proxy: Proxy): CompletableFuture;
static findLocalPort(): number;
static isPortAvailable(port: number): boolean;
static method_15303(progressListener: ProgressListener,uRL: URL,proxy: Proxy,map: Map,file: File,i: number): Object;
static LOGGER: Logger;
static EXECUTOR: ListeningExecutorService;
}

//net.minecraft.item.ArmorMaterial
interface ArmorMaterial extends JObject{
 getName(): string;
 getDurability(type: ArmorItem_Type): number;
 getEnchantability(): number;
 getRepairIngredient(): Ingredient;
 getToughness(): number;
 getProtection(type: ArmorItem_Type): number;
 getEquipSound(): SoundEvent;
 getKnockbackResistance(): number;
}

//net.minecraft.client.model.ModelTransform
class ModelTransform extends JObject{
 pivotX: number;
 pivotY: number;
 pivotZ: number;
 pitch: number;
 yaw: number;
 roll: number;
}
class Static_ModelTransform {
static of(pivotX: number,pivotY: number,pivotZ: number,pitch: number,yaw: number,roll: number): ModelTransform;
static pivot(pivotX: number,pivotY: number,pivotZ: number): ModelTransform;
static rotation(pitch: number,yaw: number,roll: number): ModelTransform;
static NONE: ModelTransform;
}

//net.minecraft.registry.BuiltinRegistries
class BuiltinRegistries extends JObject{
}
class Static_BuiltinRegistries {
static validate(wrapperLookup: RegistryWrapper_WrapperLookup): void;
static validate(placedFeatureLookup: RegistryEntryLookup,biomeLookup: RegistryWrapper): void;
static createWrapperLookup(): RegistryWrapper_WrapperLookup;
static method_46822(registryEntryLookup: RegistryEntryLookup,biome: RegistryEntry_Reference): void;
static method_46821(registryEntryLookup: RegistryEntryLookup,identifier: Identifier,reference: RegistryEntry_Reference,placedFeature: RegistryEntry): void;
static method_46820(registryEntryLookup: RegistryEntryLookup,identifier: Identifier,key: RegistryKey): void;
static method_46819(reference: RegistryEntry_Reference,value: PlacedFeature): void;
static hasBiomePlacementModifier(placedFeature: PlacedFeature): boolean;
static REGISTRY_BUILDER: RegistryBuilder;
}

//net.minecraft.nbt.NbtByte$1


//net.minecraft.client.particle.PortalParticle$Factory
class PortalParticle_Factory extends JObject, ParticleFactory{
 createParticle(defaultParticleType: DefaultParticleType,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
 createParticle(particleEffect: ParticleEffect,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
}

//net.minecraft.block.ChestBlock$2$1


//net.minecraft.network.packet.s2c.play.EntityAttributesS2CPacket
class EntityAttributesS2CPacket extends JObject, Packet{
 apply(clientPlayPacketListener: ClientPlayPacketListener): void;
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
 getEntries(): List;
 getEntityId(): number;
}
class Static_EntityAttributesS2CPacket {
static method_34199(buf3: PacketByteBuf,modifier: EntityAttributeModifier): void;
static method_34202(modifiers: PacketByteBuf): EntityAttributeModifier;
static method_34200(buf2: PacketByteBuf,attribute: EntityAttributesS2CPacket_Entry): void;
static method_34201(buf2: PacketByteBuf): EntityAttributesS2CPacket_Entry;
}

//net.minecraft.client.font.TextRenderer
class TextRenderer extends JObject{
 getWidth(text: OrderedText): number;
 getWidth(text: string): number;
 getWidth(text: StringVisitable): number;
 drawWithOutline(text: OrderedText,x: number,y: number,color: number,outlineColor: number,matrix: Matrix4f,vertexConsumers: VertexConsumerProvider,light: number): void;
 mirror(text: string): string;
 trimToWidth(text: string,maxWidth: number): string;
 trimToWidth(text: string,maxWidth: number,backwards: boolean): string;
 trimToWidth(text: StringVisitable,width: number): StringVisitable;
 getTextHandler(): TextHandler;
 wrapLines(text: StringVisitable,width: number): List;
 draw(text: string,x: number,y: number,color: number,shadow: boolean,matrix: Matrix4f,vertexConsumers: VertexConsumerProvider,layerType: TextRenderer_TextLayerType,backgroundColor: number,light: number,rightToLeft: boolean): number;
 draw(text: OrderedText,x: number,y: number,color: number,shadow: boolean,matrix: Matrix4f,vertexConsumers: VertexConsumerProvider,layerType: TextRenderer_TextLayerType,backgroundColor: number,light: number): number;
 draw(text: string,x: number,y: number,color: number,shadow: boolean,matrix: Matrix4f,vertexConsumers: VertexConsumerProvider,layerType: TextRenderer_TextLayerType,backgroundColor: number,light: number): number;
 draw(text: Text,x: number,y: number,color: number,shadow: boolean,matrix: Matrix4f,vertexConsumers: VertexConsumerProvider,layerType: TextRenderer_TextLayerType,backgroundColor: number,light: number): number;
 isRightToLeft(): boolean;
 getWrappedLinesHeight(text: string,maxWidth: number): number;
 getWrappedLinesHeight(text: StringVisitable,maxWidth: number): number;
 fontHeight: number;
 random: Random;
}
class Static_TextRenderer {
static tweakTransparency(argb: number): number;
static Z_INDEX: number;
static FORWARD_SHIFT: Vector3f;
static ARABIC_SHAPING_LETTERS_SHAPE: number;
}

//net.minecraft.client.render.model.json.ModelElementFace$Deserializer
class ModelElementFace_Deserializer extends JObject, JsonDeserializer{
 deserialize(functionJson: JsonElement,unused: Type,context: JsonDeserializationContext): Object;
 deserialize(jsonElement: JsonElement,type: Type,jsonDeserializationContext: JsonDeserializationContext): ModelElementFace;
}
class Static_ModelElementFace_Deserializer {
static DEFAULT_TINT_INDEX: number;
}

//net.minecraft.loot.function.CopyNbtLootFunction$Operation
class CopyNbtLootFunction_Operation extends JObject{
 execute(itemNbtGetter: Supplier,sourceEntityNbt: NbtElement): void;
 toJson(): JsonObject;
}
class Static_CopyNbtLootFunction_Operation {
static fromJson(json: JsonObject): CopyNbtLootFunction_Operation;
}

//net.minecraft.structure.OceanMonumentGenerator$DoubleXRoomFactory
class OceanMonumentGenerator_DoubleXRoomFactory extends JObject, OceanMonumentGenerator_PieceFactory{
 generate(direction: Direction,setting: OceanMonumentGenerator_PieceSetting,random: Random): OceanMonumentGenerator_Piece;
 canGenerate(setting: OceanMonumentGenerator_PieceSetting): boolean;
}

//net.minecraft.util.Util
class Util extends JObject{
}
class Static_Util {
static isWhitespace(c: number): boolean;
static next(iterable: Iterable,object: Object): Object;
static isBlank(string: string): boolean;
static make(factory: Supplier): Object;
static make(object: Object,initializer: Consumer): Object;
static toMap(): Collector;
static combine(futures: List,exceptionHandler: Consumer): CompletableFuture;
static combine(futures: List): CompletableFuture;
static uncaughtExceptionHandler(thread: Thread,t: Throwable): void;
static previous(iterable: Iterable,object: Object): Object;
static error(message: string): void;
static error(message: string,throwable: Throwable): void;
static shuffle(list: ObjectArrayList,random: Random): void;
static shuffle(stream: IntStream,random: Random): IntArrayList;
static ifPresentOrElse(optional: Optional,presentAction: Consumer,elseAction: Runnable): Optional;
static getLast(list: List): Object;
static getResult(result: DataResult,exceptionGetter: Function): Object;
static createWorker(name: string): ExecutorService;
static getOperatingSystem(): Util_OperatingSystem;
static lastIndexGetter(values: List,mapCreator: IntFunction): ToIntFunction;
static lastIndexGetter(values: List): ToIntFunction;
static addPrefix(prefix: string,consumer: Consumer): Consumer;
static backupAndReplace(current: File,newFile: File,backup: File): void;
static backupAndReplace(current: Path,newPath: Path,backup: Path): void;
static backupAndReplace(current: File,newPath: File,backup: File,noRestoreOnFail: boolean): void;
static backupAndReplace(current: Path,newPath: Path,backup: Path,noRestoreOnFail: boolean): void;
static getIoWorkerExecutor(): ExecutorService;
static createTranslationKey(type: string,id: Identifier): string;
static getFormattedCurrentTime(): string;
static getMainWorkerExecutor(): ExecutorService;
static combineSafe(futures: List): CompletableFuture;
static debugRunnable(runnable: Runnable,messageSupplier: Supplier): Runnable;
static debugRunnable(activeThreadName: string,task: Runnable): Runnable;
static replaceInvalidChars(string: string,predicate: CharPredicate): string;
static decodeFixedLengthArray(stream: IntStream,length: number): DataResult;
static decodeFixedLengthArray(stream: LongStream,length: number): DataResult;
static getMeasuringTimeNano(): long;
static identityHashStrategy(): Hash_Strategy;
static moveCursor(string: string,cursor: number,delta: number): number;
static getChoiceType(typeReference: DSL_TypeReference,id: string): Type;
static memoize(biFunction: BiFunction): BiFunction;
static memoize(fun: Function): Function;
static getEpochTimeMs(): long;
static startTimerHack(): void;
static throwOrPause(t: Throwable): Throwable;
static getMeasuringTimeMs(): long;
static getRandom(array: Object[],random: Random): Object;
static getRandom(array: number[],random: Random): number;
static getRandom(list: List,random: Random): Object;
static getInnermostMessage(t: Throwable): string;
static copyShuffled(list: ObjectArrayList,random: Random): List;
static copyShuffled(array: Object[],random: Random): List;
static copyShuffled(stream: Stream,random: Random): List;
static pause(message: string): void;
static getJVMFlags(): Stream;
static attemptShutdown(service: ExecutorService): void;
static createIoWorker(): ExecutorService;
static method_27956(runnable: Runnable): Thread;
static throwUnchecked(t: Throwable): void;
static getValueAsString(property: Property,value: Object): string;
static method_28123(string: string,forkJoinPool: ForkJoinPool): ForkJoinWorkerThread;
static shutdownExecutors(): void;
static method_37911(string: string,supplier: Supplier): Object;
static debugSupplier(supplier: Supplier,messageSupplier: Supplier): Supplier;
static debugSupplier(activeThreadName: string,supplier: Supplier): Supplier;
static method_33790(string: string,runnable: Runnable): void;
static combineCancellable(futures: List): CompletableFuture;
static method_40082(list: List,void_: Void): List;
static method_43369(completableFuture: CompletableFuture,list: List,throwable: Throwable): void;
static method_666(runtimeArg: string): boolean;
static getRandomOrEmpty(list: List,random: Random): Optional;
static attemptTasks(tasks: BooleanSupplier[]): boolean;
static attemptTasks(retries: number,taskName: string,tasks: BooleanSupplier[]): boolean;
static method_43368(list: List,void_: Void): List;
static deletionVerifyTask(path: Path): BooleanSupplier;
static renameTask(src: Path,dest: Path): BooleanSupplier;
static deleteTask(path: Path): BooleanSupplier;
static existenceCheckTask(path: Path): BooleanSupplier;
static method_43371(list: List,completableFutures: CompletableFuture[],consumer: Consumer,future: CompletableFuture): void;
static method_49400(i: number): string;
static method_51823(i: number): string;
static method_49399(i: number): string;
static method_30623(charPredicate: CharPredicate,charCode: number): string;
static waitAndApply(resultFactory: Function): CompletableFuture;
static waitAndApply(resultFactory: Function,donePredicate: Predicate): Object;
static method_29189(consumer: Consumer,string2: string,string: string): void;
static relativeCopy(src: Path,dest: Path,toCopy: Path): void;
static cachedMapper(mapper: Function): CachedMapper;
static method_37154(): IllegalStateException;
static method_37153(fileSystemProvider: FileSystemProvider): boolean;
static method_43372(consumer: Consumer,list: List,i: number,value: Object,throwable: Throwable): void;
static method_38647(message: string): void;
static getMaxBackgroundThreads(): number;
static setMissingBreakpointHandler(missingBreakpointHandler: Consumer): void;
static getChoiceTypeInternal(typeReference: DSL_TypeReference,id: string): Type;
static decodeFixedLengthList(list: List,length: number): DataResult;
static LOGGER: Logger;
static MAX_PARALLELISM: number;
static MAX_BG_THREADS_PROPERTY: string;
static NEXT_WORKER_ID: AtomicInteger;
static MAIN_WORKER_EXECUTOR: ExecutorService;
static IO_WORKER_EXECUTOR: ExecutorService;
static DATE_TIME_FORMATTER: DateTimeFormatter;
static nanoTimeSupplier: TimeSupplier_Nanoseconds;
static TICKER: Ticker;
static NIL_UUID: UUID;
static JAR_FILE_SYSTEM_PROVIDER: FileSystemProvider;
static missingBreakpointHandler: Consumer;
}

//net.minecraft.nbt.NbtDouble$1


//net.minecraft.entity.effect.StatusEffects
class StatusEffects extends JObject{
}
class Static_StatusEffects {
static register(rawId: number,id: string,entry: StatusEffect): StatusEffect;
static method_42146(): StatusEffectInstance_FactorCalculationData;
static DARKNESS_PADDING_DURATION: number;
static SPEED: StatusEffect;
static SLOWNESS: StatusEffect;
static HASTE: StatusEffect;
static MINING_FATIGUE: StatusEffect;
static STRENGTH: StatusEffect;
static INSTANT_HEALTH: StatusEffect;
static INSTANT_DAMAGE: StatusEffect;
static JUMP_BOOST: StatusEffect;
static NAUSEA: StatusEffect;
static REGENERATION: StatusEffect;
static RESISTANCE: StatusEffect;
static FIRE_RESISTANCE: StatusEffect;
static WATER_BREATHING: StatusEffect;
static INVISIBILITY: StatusEffect;
static BLINDNESS: StatusEffect;
static NIGHT_VISION: StatusEffect;
static HUNGER: StatusEffect;
static WEAKNESS: StatusEffect;
static POISON: StatusEffect;
static WITHER: StatusEffect;
static HEALTH_BOOST: StatusEffect;
static ABSORPTION: StatusEffect;
static SATURATION: StatusEffect;
static GLOWING: StatusEffect;
static LEVITATION: StatusEffect;
static LUCK: StatusEffect;
static UNLUCK: StatusEffect;
static SLOW_FALLING: StatusEffect;
static CONDUIT_POWER: StatusEffect;
static DOLPHINS_GRACE: StatusEffect;
static BAD_OMEN: StatusEffect;
static HERO_OF_THE_VILLAGE: StatusEffect;
static DARKNESS: StatusEffect;
}

//net.minecraft.advancement.AdvancementRewards
class AdvancementRewards extends JObject{
 toString(): string;
 apply(player: ServerPlayerEntity): void;
 getRecipes(): Identifier[];
 toJson(): JsonElement;
}
class Static_AdvancementRewards {
static fromJson(json: JsonObject): AdvancementRewards;
static method_17978(minecraftServer: MinecraftServer,serverPlayerEntity: ServerPlayerEntity,fun: CommandFunction): void;
static NONE: AdvancementRewards;
}

//net.minecraft.world.gen.chunk.placement.StructurePlacementCalculator
class StructurePlacementCalculator extends JObject{
 getNoiseConfig(): NoiseConfig;
 canGenerate(structureSetEntry: RegistryEntry,centerChunkX: number,centerChunkZ: number,chunkCount: number): boolean;
 tryCalculate(): void;
 getStructureSets(): List;
 getPlacements(structureEntry: RegistryEntry): List;
 getStructureSeed(): long;
 getPlacementPositions(placement: ConcentricRingsStructurePlacement): List;
}
class Static_StructurePlacementCalculator {
static create(noiseConfig: NoiseConfig,seed: long,biomeSource: BiomeSource,structureSets: Stream): StructurePlacementCalculator;
static create(noiseConfig: NoiseConfig,seed: long,biomeSource: BiomeSource,structureSetRegistry: RegistryWrapper): StructurePlacementCalculator;
static method_46700(biomeSource: BiomeSource,structureSet: RegistryEntry): boolean;
static method_46699(biomeSource: BiomeSource,structureSet: RegistryEntry_Reference): boolean;
static method_46701(stopwatch: Stopwatch,registryEntry: RegistryEntry,positions: List): List;
static hasValidBiome(structureSet: StructureSet,biomeSource: BiomeSource): boolean;
static method_46705(structure: StructureSet_WeightedEntry): Stream;
static method_46704(structure: Structure): List;
static LOGGER: Logger;
}

//net.minecraft.world.gen.densityfunction.DensityFunctionTypes$EndIslands
class DensityFunctionTypes_EndIslands extends JObject, DensityFunction_Base{
 maxValue(): number;
 sample(pos: DensityFunction_NoisePos): number;
 minValue(): number;
 getCodecHolder(): CodecHolder;
}
class Static_DensityFunctionTypes_EndIslands {
static sample(sampler: SimplexNoiseSampler,x: number,z: number): number;
static CODEC_HOLDER: CodecHolder;
static field_37677: number;
}

//net.minecraft.world.biome.source.MultiNoiseBiomeSourceParameterList
class MultiNoiseBiomeSourceParameterList extends JObject{
 getEntries(): MultiNoiseUtil_Entries;
}
class Static_MultiNoiseBiomeSourceParameterList {
static method_49513(preset: MultiNoiseBiomeSourceParameterList_Preset): MultiNoiseBiomeSourceParameterList_Preset;
static method_49508(registryKey: RegistryKey): RegistryKey;
static method_49510(multiNoiseBiomeSourceParameterList: MultiNoiseBiomeSourceParameterList): MultiNoiseBiomeSourceParameterList_Preset;
static method_49509(preset: MultiNoiseBiomeSourceParameterList_Preset): MultiNoiseUtil_Entries;
static method_49511(instance: RecordCodecBuilder_Instance): App;
static getPresetToEntriesMap(): Map;
static CODEC: Codec;
static REGISTRY_CODEC: Codec;
}

//net.minecraft.world.biome.source.MultiNoiseBiomeSourceParameterList$Preset$1


//net.minecraft.world.biome.source.MultiNoiseBiomeSourceParameterList$Preset$2


//net.minecraft.world.chunk.Chunk
class Chunk extends JObject, BlockView, BiomeAccess_Storage, LightSourceView, StructureHolder{
 getHeight(): number;
 getStatus(): ChunkStatus;
 getGameEventDispatcher(ySectionCoord: number): GameEventDispatcher;
 removeBlockEntity(pos: BlockPos): void;
 getFluidTickScheduler(): BasicTickScheduler;
 getBlockTickScheduler(): BasicTickScheduler;
 populateBiomes(biomeSupplier: BiomeSupplier,sampler: MultiNoiseUtil_MultiNoiseSampler): void;
 refreshSurfaceY(): void;
 isLightOn(): boolean;
 setStructureStarts(structureStarts: Map): void;
 getInhabitedTime(): long;
 sampleHeightmap(type: Heightmap_Type,x: number,z: number): number;
 getHeightmaps(): Collection;
 addEntity(entity: Entity): void;
 getHeightmap(type: Heightmap_Type): Heightmap;
 getSectionArray(): ChunkSection[];
 markBlockForPostProcessing(pos: BlockPos): void;
 markBlockForPostProcessing(packedPos: short,index: number): void;
 areSectionsEmptyBetween(lowerHeight: number,upperHeight: number): boolean;
 getBlockEntityNbt(pos: BlockPos): NbtCompound;
 setBlockEntity(blockEntity: BlockEntity): void;
 setBlockState(pos: BlockPos,state: BlockState,moved: boolean): BlockState;
 setStructureStart(structure: Structure,start: StructureStart): void;
 getStructureStart(structure: Structure): StructureStart;
 getBiomeForNoiseGen(biomeX: number,biomeY: number,biomeZ: number): RegistryEntry;
 hasBelowZeroRetrogen(): boolean;
 getBelowZeroRetrogen(): BelowZeroRetrogen;
 getBottomY(): number;
 getPos(): ChunkPos;
 getSection(yIndex: number): ChunkSection;
 setNeedsSaving(needsSaving: boolean): void;
 getStructureStarts(): Map;
 getHeightLimitView(): HeightLimitView;
 setInhabitedTime(inhabitedTime: long): void;
 setLightOn(lightOn: boolean): void;
 getChunkSkyLight(): ChunkSkyLight;
 addStructureReference(structure: Structure,reference: long): void;
 getStructureReferences(): Map;
 getStructureReferences(structure: Structure): LongSet;
 hasStructureReferences(): boolean;
 setStructureReferences(structureReferences: Map): void;
 setHeightmap(type: Heightmap_Type,heightmap: long[]): void;
 needsSaving(): boolean;
 getBlendingData(): BlendingData;
 getTickSchedulers(): Chunk_TickSchedulers;
 setBlendingData(blendingData: BlendingData): void;
 forEachLightSource(callback: BiConsumer): void;
 method_51526(): ChunkStatus;
 hasHeightmap(type: Heightmap_Type): boolean;
 getUpgradeData(): UpgradeData;
 usesOldNoise(): boolean;
 getPackedBlockEntityNbt(pos: BlockPos): NbtCompound;
 getOrCreateGenerationSettings(generationSettingsCreator: Supplier): GenerationSettings;
 increaseInhabitedTime(delta: long): void;
 getHighestNonEmptySection(): number;
 getPostProcessingLists(): ShortList[];
 getHighestNonEmptySectionYOffset(): number;
 forEachBlockMatchingPredicate(predicate: Predicate,consumer: BiConsumer): void;
 getBlockEntityPositions(): Set;
 addPendingBlockEntityNbt(nbt: NbtCompound): void;
 getOrCreateChunkNoiseSampler(chunkNoiseSamplerCreator: Function): ChunkNoiseSampler;
}
class Static_Chunk {
static getList(lists: ShortList[],index: number): ShortList;
static fillSectionArray(biomeRegistry: Registry,sectionArray: ChunkSection[]): void;
static method_51523(blockState: BlockState): boolean;
static method_38261(type2: Structure): LongSet;
static MISSING_SECTION: number;
static LOGGER: Logger;
static EMPTY_STRUCTURE_REFERENCES: LongSet;
}

//net.minecraft.entity.decoration.DisplayEntity$IntLerper
interface DisplayEntity_IntLerper extends JObject{
 lerp(delta: number): number;
}
class Static_DisplayEntity_IntLerper {
static constant(value: number): DisplayEntity_IntLerper;
static method_49781(i: number,delta: number): number;
}

//net.minecraft.util.profiler.ServerSamplerSource$CpuUsageFetcher
class ServerSamplerSource_CpuUsageFetcher extends JObject{
 getCpuUsage(index: number): number;
 logicalProcessorCount: number;
}

//net.minecraft.client.realms.FileUpload
class FileUpload extends JObject{
 cancel(): void;
 upload(callback: Consumer): void;
 isFinished(): boolean;
}
class Static_FileUpload {
static LOGGER: Logger;
static MAX_ATTEMPTS: number;
static UPLOAD_ENDPOINT: string;
}

//net.minecraft.util.math.random.LocalRandom
class LocalRandom extends JObject, BaseRandom{
 split(): Random;
 next(bits: number): number;
 nextGaussian(): number;
 setSeed(seed: long): void;
 nextSplitter(): RandomSplitter;
}
class Static_LocalRandom {
static INT_BITS: number;
static SEED_MASK: long;
static MULTIPLIER: long;
static INCREMENT: long;
}

//net.minecraft.command.argument.DimensionArgumentType
class DimensionArgumentType extends JObject, ArgumentType{
 parse(reader: StringReader): Object;
 parse(stringReader: StringReader): Identifier;
 getExamples(): Collection;
 listSuggestions(context: CommandContext,builder: SuggestionsBuilder): CompletableFuture;
}
class Static_DimensionArgumentType {
static dimension(): DimensionArgumentType;
static getDimensionArgument(context: CommandContext,name: string): ServerWorld;
static method_9291(key: RegistryKey): string;
static method_9290(id: Object): Message;
static EXAMPLES: Collection;
static INVALID_DIMENSION_EXCEPTION: DynamicCommandExceptionType;
}

//net.minecraft.world.storage.RegionFile
class RegionFile extends JObject, AutoCloseable{
 delete(pos: ChunkPos): void;
 close(): void;
 sync(): void;
 isChunkValid(pos: ChunkPos): boolean;
 hasChunk(pos: ChunkPos): boolean;
 getChunkInputStream(pos: ChunkPos): DataInputStream;
 getChunkOutputStream(pos: ChunkPos): DataOutputStream;
}
class Static_RegionFile {
static getSize(sectorData: number): number;
static getInputStream(buffer: ByteBuffer,length: number): ByteArrayInputStream;
static getIndex(pos: ChunkPos): number;
static getOffset(sectorData: number): number;
static method_22411(path: Path,path2: Path): void;
static getSectorCount(byteCount: number): number;
static hasChunkStreamVersionId(flags: byte): boolean;
static getChunkStreamVersionId(flags: byte): byte;
static getEpochTimeSeconds(): number;
static LOGGER: Logger;
static field_31418: number;
static SECTOR_DATA_LIMIT: number;
static field_31419: number;
static field_31420: number;
static ZERO: ByteBuffer;
static FILE_EXTENSION: string;
static field_31422: number;
static field_31423: number;
static field_31424: number;
}

//net.minecraft.network.PacketByteBuf$PacketWriter
interface PacketByteBuf_PacketWriter extends JObject, BiConsumer{
 asOptional(): PacketByteBuf_PacketWriter;
}

//net.minecraft.sound.BiomeMoodSound
class BiomeMoodSound extends JObject{
 getSound(): RegistryEntry;
 getExtraDistance(): number;
 getSpawnRange(): number;
 getCultivationTicks(): number;
}
class Static_BiomeMoodSound {
static method_28397(sound: BiomeMoodSound): RegistryEntry;
static method_28393(sound: BiomeMoodSound): Double;
static method_28394(instance: RecordCodecBuilder_Instance): App;
static method_28395(sound: BiomeMoodSound): Integer;
static method_28396(sound: BiomeMoodSound): Integer;
static CODEC: Codec;
static CAVE: BiomeMoodSound;
}

//net.minecraft.server.ServerConfigHandler$1


//net.minecraft.client.render.VertexConsumers$Union
class VertexConsumers_Union extends JObject, VertexConsumer{
 next(): void;
 color(red: number,green: number,blue: number,alpha: number): VertexConsumer;
 normal(x: number,y: number,z: number): VertexConsumer;
 light(u: number,v: number): VertexConsumer;
 overlay(u: number,v: number): VertexConsumer;
 vertex(x: number,y: number,z: number): VertexConsumer;
 vertex(x: number,y: number,z: number,red: number,green: number,blue: number,alpha: number,u: number,v: number,overlay: number,light: number,normalX: number,normalY: number,normalZ: number): void;
 texture(u: number,v: number): VertexConsumer;
 unfixColor(): void;
 fixedColor(red: number,green: number,blue: number,alpha: number): void;
}
class Static_VertexConsumers_Union {
static method_35678(i: number,j: number,k: number,l: number,vertexConsumer: VertexConsumer): void;
static method_35671(d: number,e: number,f: number,vertexConsumer: VertexConsumer): void;
static method_35674(f: number,g: number,vertexConsumer: VertexConsumer): void;
static method_35676(i: number,j: number,vertexConsumer: VertexConsumer): void;
static method_35672(f: number,g: number,h: number,i: number,j: number,k: number,l: number,m: number,n: number,o: number,p: number,q: number,r: number,s: number,vertexConsumer: VertexConsumer): void;
static method_35675(i: number,j: number,k: number,l: number,vertexConsumer: VertexConsumer): void;
static method_35679(i: number,j: number,vertexConsumer: VertexConsumer): void;
static method_35673(f: number,g: number,h: number,vertexConsumer: VertexConsumer): void;
}

//net.minecraft.server.ServerConfigHandler$3


//net.minecraft.server.ServerConfigHandler$2


//net.minecraft.server.ServerConfigHandler$5


//net.minecraft.server.ServerConfigHandler$4


//net.minecraft.server.network.ServerPlayNetworkHandler$2


//net.minecraft.loot.condition.WeatherCheckLootCondition$Serializer
class WeatherCheckLootCondition_Serializer extends JObject, JsonSerializer{
 fromJson(json: JsonObject,context: JsonDeserializationContext): Object;
 fromJson(jsonObject: JsonObject,jsonDeserializationContext: JsonDeserializationContext): WeatherCheckLootCondition;
 toJson(jsonObject: JsonObject,weatherCheckLootCondition: WeatherCheckLootCondition,jsonSerializationContext: JsonSerializationContext): void;
 toJson(json: JsonObject,object: Object,context: JsonSerializationContext): void;
}

//net.minecraft.server.network.ServerPlayNetworkHandler$1


//net.minecraft.resource.featuretoggle.FeatureUniverse
class FeatureUniverse extends JObject{
 toString(): string;
}

//net.minecraft.block.entity.BlockEntity
class BlockEntity extends JObject, RenderDataBlockEntity{
 getType(): BlockEntityType;
 setWorld(world: World): void;
 getCachedState(): BlockState;
 hasWorld(): boolean;
 toInitialChunkDataNbt(): NbtCompound;
 onSyncedBlockEvent(type: number,data: number): boolean;
 setStackNbt(stack: ItemStack): void;
 setCachedState(state: BlockState): void;
 createNbt(): NbtCompound;
 createNbtWithId(): NbtCompound;
 isRemoved(): boolean;
 getWorld(): World;
 markDirty(): void;
 populateCrashReport(crashReportSection: CrashReportSection): void;
 getPos(): BlockPos;
 readNbt(nbt: NbtCompound): void;
 toUpdatePacket(): Packet;
 markRemoved(): void;
 cancelRemoval(): void;
 createNbtWithIdentifyingData(): NbtCompound;
 copyItemDataRequiresOperator(): boolean;
}
class Static_BlockEntity {
static posFromNbt(nbt: NbtCompound): BlockPos;
static markDirty(world: World,pos: BlockPos,state: BlockState): void;
static method_17898(string: string): BlockEntity;
static method_17897(nbtCompound: NbtCompound,string: string,blockEntity: BlockEntity): BlockEntity;
static writeIdToNbt(nbt: NbtCompound,type: BlockEntityType): void;
static createFromNbt(pos: BlockPos,state: BlockState,nbt: NbtCompound): BlockEntity;
static method_17899(blockPos: BlockPos,blockState: BlockState,string: string,type: BlockEntityType): BlockEntity;
static LOGGER: Logger;
}

//net.minecraft.recipe.SmithingTransformRecipe
class SmithingTransformRecipe extends JObject, SmithingRecipe{
 isEmpty(): boolean;
 matches(inventory: Inventory,world: World): boolean;
 getId(): Identifier;
 getOutput(registryManager: DynamicRegistryManager): ItemStack;
 craft(inventory: Inventory,registryManager: DynamicRegistryManager): ItemStack;
 getSerializer(): RecipeSerializer;
 testAddition(stack: ItemStack): boolean;
 testTemplate(stack: ItemStack): boolean;
 testBase(stack: ItemStack): boolean;
}

//net.minecraft.block.CaveVines
interface CaveVines extends JObject{
}
class Static_CaveVines {
static getLuminanceSupplier(luminance: number): ToIntFunction;
static pickBerries(picker: Entity,state: BlockState,world: World,pos: BlockPos): ActionResult;
static hasBerries(state: BlockState): boolean;
static method_37361(i: number,state: BlockState): number;
static SHAPE: VoxelShape;
static BERRIES: BooleanProperty;
}

//net.minecraft.util.profiler.Sampler$Data
class Sampler_Data extends JObject{
 getValue(tick: number): number;
 getStartTick(): number;
 getEndTick(): number;
}

//net.minecraft.client.particle.BubblePopParticle$Factory
class BubblePopParticle_Factory extends JObject, ParticleFactory{
 createParticle(defaultParticleType: DefaultParticleType,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
 createParticle(particleEffect: ParticleEffect,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
}

//net.minecraft.world.storage.RegionBasedStorage
class RegionBasedStorage extends JObject, AutoCloseable{
 close(): void;
 getTagAt(pos: ChunkPos): NbtCompound;
 sync(): void;
 scanChunk(chunkPos: ChunkPos,scanner: NbtScanner): void;
}
class Static_RegionBasedStorage {
static MCA_EXTENSION: string;
static MAX_CACHE_SIZE: number;
}

//net.minecraft.resource.LifecycledResourceManagerImpl
class LifecycledResourceManagerImpl extends JObject, LifecycledResourceManager{
 getResource(identifier: Identifier): Optional;
 findResources(startingPath: string,allowedPathPredicate: Predicate): Map;
 close(): void;
 streamResourcePacks(): Stream;
 getAllNamespaces(): Set;
 getAllResources(id: Identifier): List;
 findAllResources(startingPath: string,allowedPathPredicate: Predicate): Map;
}
class Static_LifecycledResourceManagerImpl {
static method_41275(resourceType: ResourceType,pack: ResourcePack): Stream;
static method_41276(resourceFilter: ResourceFilter,id: Identifier): boolean;
static validateStartingPath(startingPath: string): void;
static LOGGER: Logger;
}

//net.minecraft.entity.LimbAnimator
class LimbAnimator extends JObject{
 getSpeed(tickDelta: number): number;
 getSpeed(): number;
 setSpeed(speed: number): void;
 getPos(): number;
 getPos(tickDelta: number): number;
 updateLimbs(speed: number,multiplier: number): void;
 isLimbMoving(): boolean;
}

//net.minecraft.entity.data.TrackedDataHandler
interface TrackedDataHandler extends JObject{
 write(buf: PacketByteBuf,value: Object): void;
 read(buf: PacketByteBuf): Object;
 copy(value: Object): Object;
 create(id: number): TrackedData;
}
class Static_TrackedDataHandler {
static of(registry: IndexedIterable): TrackedDataHandler;
static of(writer: PacketByteBuf_PacketWriter,reader: PacketByteBuf_PacketReader): TrackedDataHandler;
static method_43241(class_: Class,buf: PacketByteBuf): Enum;
static ofEnum(enum_: Class): TrackedDataHandler;
static method_43239(indexedIterable: IndexedIterable,buf: PacketByteBuf,value: Object): void;
static ofOptional(writer: PacketByteBuf_PacketWriter,reader: PacketByteBuf_PacketReader): TrackedDataHandler;
static method_43238(indexedIterable: IndexedIterable,buf: PacketByteBuf): Object;
}

//net.minecraft.client.sound.AmbientSoundLoops
class AmbientSoundLoops extends JObject{
}

//net.minecraft.client.gui.EditBox$1


//net.minecraft.world.biome.GenerationSettings$Builder
class GenerationSettings_Builder extends JObject{
 build(): GenerationSettings;
 feature(featureStep: GenerationStep_Feature,featureEntry: RegistryEntry): GenerationSettings_Builder;
 carver(carverStep: GenerationStep_Carver,carverEntry: RegistryEntry): GenerationSettings_Builder;
 addFeature(ordinal: number,featureEntry: RegistryEntry): GenerationSettings_Builder;
}
class Static_GenerationSettings_Builder {
static method_46674(step: GenerationStep_Carver): List;
static method_46677(entry: Map_Entry): RegistryEntryList;
}

//net.minecraft.command.argument.BlockStateArgument
class BlockStateArgument extends JObject, Predicate{
 test(cachedBlockPosition: CachedBlockPosition): boolean;
 test(world: ServerWorld,pos: BlockPos): boolean;
 test(context: Object): boolean;
 getProperties(): Set;
 getBlockState(): BlockState;
 setBlockState(world: ServerWorld,pos: BlockPos,flags: number): boolean;
}

//net.minecraft.command.argument.serialize.ArgumentSerializer
interface ArgumentSerializer extends JObject{
 getArgumentTypeProperties(argumentType: ArgumentType): ArgumentSerializer_ArgumentTypeProperties;
 fromPacket(buf: PacketByteBuf): ArgumentSerializer_ArgumentTypeProperties;
 writePacket(properties: ArgumentSerializer_ArgumentTypeProperties,buf: PacketByteBuf): void;
 writeJson(properties: ArgumentSerializer_ArgumentTypeProperties,json: JsonObject): void;
}

//net.minecraft.item.Instruments
interface Instruments extends JObject{
}
class Static_Instruments {
static of(id: string): RegistryKey;
static registerAndGetDefault(registry: Registry): Instrument;
static GOAT_HORN_RANGE: number;
static GOAT_HORN_USE_DURATION: number;
static PONDER_GOAT_HORN: RegistryKey;
static SING_GOAT_HORN: RegistryKey;
static SEEK_GOAT_HORN: RegistryKey;
static FEEL_GOAT_HORN: RegistryKey;
static ADMIRE_GOAT_HORN: RegistryKey;
static CALL_GOAT_HORN: RegistryKey;
static YEARN_GOAT_HORN: RegistryKey;
static DREAM_GOAT_HORN: RegistryKey;
}

//net.minecraft.item.Item$Settings
class Item_Settings extends JObject{
 requires(features: FeatureFlag[]): Item_Settings;
 rarity(rarity: Rarity): Item_Settings;
 fireproof(): Item_Settings;
 maxDamage(maxDamage: number): Item_Settings;
 recipeRemainder(recipeRemainder: Item): Item_Settings;
 maxCount(maxCount: number): Item_Settings;
 food(foodComponent: FoodComponent): Item_Settings;
 maxDamageIfAbsent(maxDamage: number): Item_Settings;
}

//net.minecraft.server.command.ResetChunksCommand
class ResetChunksCommand extends JObject{
}
class Static_ResetChunksCommand {
static register(dispatcher: CommandDispatcher): void;
static method_38627(chunk: Chunk): CompletableFuture;
static method_38622(chunkStatus: ChunkStatus,either: Either): Unit;
static method_38624(context: CommandContext): number;
static method_38628(context: CommandContext): number;
static method_38621(chunkStatus: ChunkStatus,taskExecutor: TaskExecutor,serverWorld: ServerWorld,serverChunkManager: ServerChunkManager,list: List,unit: Unit): CompletionStage;
static method_38619(): Unit;
static method_52037(i: number,l: long): Text;
static method_39500(context: CommandContext): number;
static executeResetChunks(source: ServerCommandSource,radius: number,skipOldChunks: boolean): number;
static method_38625(source: ServerCommandSource): boolean;
static method_38620(chunk: Chunk): void;
static LOGGER: Logger;
}

//net.minecraft.registry.entry.RegistryEntry
interface RegistryEntry extends JObject{
 value(): Object;
 matches(predicate: Predicate): boolean;
 getKey(): Optional;
 getType(): RegistryEntry_Type;
 matchesKey(key: RegistryKey): boolean;
 isIn(tag: TagKey): boolean;
 streamTags(): Stream;
 ownerEquals(owner: RegistryEntryOwner): boolean;
 getKeyOrValue(): Either;
 hasKeyAndValue(): boolean;
 matchesId(id: Identifier): boolean;
}
class Static_RegistryEntry {
static of(value: Object): RegistryEntry;
}

//net.minecraft.util.annotation.MathMethodsReturnNonnullByDefault
interface MathMethodsReturnNonnullByDefault extends JObject, Annotation{
}

//net.minecraft.block.ShulkerBoxBlock$1


//net.minecraft.client.util.MonitorFactory
interface MonitorFactory extends JObject{
 createMonitor(pointer: long): Monitor;
}

//net.minecraft.block.Fertilizable
interface Fertilizable extends JObject{
 grow(world: ServerWorld,random: Random,pos: BlockPos,state: BlockState): void;
 canGrow(world: World,random: Random,pos: BlockPos,state: BlockState): boolean;
 isFertilizable(world: WorldView,pos: BlockPos,state: BlockState,isClient: boolean): boolean;
}

//net.minecraft.loot.function.LootFunctionTypes
class LootFunctionTypes extends JObject{
}
class Static_LootFunctionTypes {
static join(lootFunctions: BiFunction[]): BiFunction;
static register(id: string,jsonSerializer: JsonSerializer): LootFunctionType;
static createGsonSerializer(): Object;
static method_592(stack: ItemStack,context: LootContext): ItemStack;
static method_595(biFunctions: BiFunction[],stack: ItemStack,context: LootContext): ItemStack;
static method_591(biFunction: BiFunction,biFunction2: BiFunction,stack: ItemStack,context: LootContext): ItemStack;
static NOOP: BiFunction;
static SET_COUNT: LootFunctionType;
static ENCHANT_WITH_LEVELS: LootFunctionType;
static ENCHANT_RANDOMLY: LootFunctionType;
static SET_ENCHANTMENTS: LootFunctionType;
static SET_NBT: LootFunctionType;
static FURNACE_SMELT: LootFunctionType;
static LOOTING_ENCHANT: LootFunctionType;
static SET_DAMAGE: LootFunctionType;
static SET_ATTRIBUTES: LootFunctionType;
static SET_NAME: LootFunctionType;
static EXPLORATION_MAP: LootFunctionType;
static SET_STEW_EFFECT: LootFunctionType;
static COPY_NAME: LootFunctionType;
static SET_CONTENTS: LootFunctionType;
static LIMIT_COUNT: LootFunctionType;
static APPLY_BONUS: LootFunctionType;
static SET_LOOT_TABLE: LootFunctionType;
static EXPLOSION_DECAY: LootFunctionType;
static SET_LORE: LootFunctionType;
static FILL_PLAYER_HEAD: LootFunctionType;
static COPY_NBT: LootFunctionType;
static COPY_STATE: LootFunctionType;
static SET_BANNER_PATTERN: LootFunctionType;
static SET_POTION: LootFunctionType;
static SET_INSTRUMENT: LootFunctionType;
static REFERENCE: LootFunctionType;
}

//net.minecraft.entity.ai.brain.task.WalkTowardClosestAdultTask
class WalkTowardClosestAdultTask extends JObject{
}
class Static_WalkTowardClosestAdultTask {
static create(executionRange: UniformIntProvider,speed: Function): SingleTickTask;
static create(executionRange: UniformIntProvider,speed: number): SingleTickTask;
static method_46895(f: number,entity: LivingEntity): Float;
static method_46899(taskContext: TaskTriggerer_TaskContext,uniformIntProvider: UniformIntProvider,fun: Function,nearestVisibleAdult: MemoryQueryResult,lookTarget: MemoryQueryResult,walkTarget: MemoryQueryResult): TaskRunnable;
static method_46900(taskContext: TaskTriggerer_TaskContext,memoryQueryResult: MemoryQueryResult,uniformIntProvider: UniformIntProvider,fun: Function,memoryQueryResult2: MemoryQueryResult,memoryQueryResult3: MemoryQueryResult,world: ServerWorld,entity: PassiveEntity,time: long): boolean;
static method_46898(uniformIntProvider: UniformIntProvider,fun: Function,context: TaskTriggerer_TaskContext): App;
}

//net.minecraft.client.font.TrueTypeFont$TtfGlyph
class TrueTypeFont_TtfGlyph extends JObject, Glyph{
 getAdvance(): number;
 bake(fun: Function): GlyphRenderer;
}

//net.minecraft.client.gui.hud.spectator.RootSpectatorCommandGroup
class RootSpectatorCommandGroup extends JObject, SpectatorMenuCommandGroup{
 getPrompt(): Text;
 getCommands(): List;
}
class Static_RootSpectatorCommandGroup {
static PROMPT_TEXT: Text;
}

//net.minecraft.world.gen.feature.BlockPileFeatureConfig
class BlockPileFeatureConfig extends JObject, FeatureConfig{
 stateProvider: BlockStateProvider;
}
class Static_BlockPileFeatureConfig {
static method_28683(config: BlockPileFeatureConfig): BlockStateProvider;
static CODEC: Codec;
}

//net.minecraft.client.report.MessagesListAdder
class MessagesListAdder extends JObject{
 add(minAmount: number,messages: MessagesListAdder_MessagesList): void;
}

//net.minecraft.client.world.GeneratorOptionsHolder$RegistryAwareModifier
interface GeneratorOptionsHolder_RegistryAwareModifier extends JObject, BiFunction{
}

//net.minecraft.advancement.AdvancementDisplay
class AdvancementDisplay extends JObject{
 isHidden(): boolean;
 getDescription(): Text;
 toPacket(buf: PacketByteBuf): void;
 getTitle(): Text;
 setPos(x: number,y: number): void;
 getBackground(): Identifier;
 getX(): number;
 getY(): number;
 toJson(): JsonElement;
 shouldAnnounceToChat(): boolean;
 getFrame(): AdvancementFrame;
 getIcon(): ItemStack;
 shouldShowToast(): boolean;
}
class Static_AdvancementDisplay {
static fromJson(obj: JsonObject): AdvancementDisplay;
static fromPacket(buf: PacketByteBuf): AdvancementDisplay;
static iconFromJson(json: JsonObject): ItemStack;
}

//net.minecraft.client.gui.screen.pack.ResourcePackOrganizer$Pack
interface ResourcePackOrganizer_Pack extends JObject{
 getName(): string;
 getSource(): ResourcePackSource;
 getDisplayName(): Text;
 isEnabled(): boolean;
 enable(): void;
 getDescription(): Text;
 disable(): void;
 getDecoratedDescription(): Text;
 isAlwaysEnabled(): boolean;
 isPinned(): boolean;
 getCompatibility(): ResourcePackCompatibility;
 canBeDisabled(): boolean;
 canBeEnabled(): boolean;
 canMoveTowardStart(): boolean;
 moveTowardEnd(): void;
 canMoveTowardEnd(): boolean;
 getIconId(): Identifier;
 moveTowardStart(): void;
}

//net.minecraft.world.gen.chunk.ChunkGenerator
class ChunkGenerator extends JObject{
 getHeight(x: number,z: number,heightmap: Heightmap_Type,world: HeightLimitView,noiseConfig: NoiseConfig): number;
 locateStructure(world: ServerWorld,structures: RegistryEntryList,center: BlockPos,radius: number,skipReferencedStructures: boolean): Pair;
 getCodecKey(): Optional;
 createStructurePlacementCalculator(structureSetRegistry: RegistryWrapper,noiseConfig: NoiseConfig,seed: long): StructurePlacementCalculator;
 populateBiomes(executor: Executor,noiseConfig: NoiseConfig,blender: Blender,structureAccessor: StructureAccessor,chunk: Chunk): CompletableFuture;
 populateEntities(region: ChunkRegion): void;
 carve(chunkRegion: ChunkRegion,seed: long,noiseConfig: NoiseConfig,biomeAccess: BiomeAccess,structureAccessor: StructureAccessor,chunk: Chunk,carverStep: GenerationStep_Carver): void;
 buildSurface(region: ChunkRegion,structures: StructureAccessor,noiseConfig: NoiseConfig,chunk: Chunk): void;
 generateFeatures(world: StructureWorldAccess,chunk: Chunk,structureAccessor: StructureAccessor): void;
 populateNoise(executor: Executor,blender: Blender,noiseConfig: NoiseConfig,structureAccessor: StructureAccessor,chunk: Chunk): CompletableFuture;
 setStructureStarts(registryManager: DynamicRegistryManager,placementCalculator: StructurePlacementCalculator,structureAccessor: StructureAccessor,chunk: Chunk,structureTemplateManager: StructureTemplateManager): void;
 getMinimumY(): number;
 getWorldHeight(): number;
 getBiomeSource(): BiomeSource;
 getHeightOnGround(x: number,z: number,heightmap: Heightmap_Type,world: HeightLimitView,noiseConfig: NoiseConfig): number;
 addStructureReferences(world: StructureWorldAccess,structureAccessor: StructureAccessor,chunk: Chunk): void;
 getSeaLevel(): number;
 getGenerationSettings(biomeEntry: RegistryEntry): GenerationSettings;
 getSpawnHeight(world: HeightLimitView): number;
 getEntitySpawnList(biome: RegistryEntry,accessor: StructureAccessor,group: SpawnGroup,pos: BlockPos): Pool;
 getDebugHudText(text: List,noiseConfig: NoiseConfig,pos: BlockPos): void;
 getColumnSample(x: number,z: number,world: HeightLimitView,noiseConfig: NoiseConfig): VerticalBlockSample;
 getHeightInGround(x: number,z: number,heightmap: Heightmap_Type,world: HeightLimitView,noiseConfig: NoiseConfig): number;
}
class Static_ChunkGenerator {
static locateStructure(structures: Set,world: WorldView,structureAccessor: StructureAccessor,skipReferencedStructures: boolean,placement: StructurePlacement,pos: ChunkPos): Pair;
static locateRandomSpreadStructure(structures: Set,world: WorldView,structureAccessor: StructureAccessor,centerChunkX: number,centerChunkZ: number,radius: number,skipReferencedStructures: boolean,seed: long,placement: RandomSpreadStructurePlacement): Pair;
static getBlockBoxForChunk(chunk: Chunk): BlockBox;
static getStructureReferences(structureAccessor: StructureAccessor,chunk: Chunk,sectionPos: ChunkSectionPos,structure: Structure): number;
static method_44218(biomeEntry: RegistryEntry): GenerationSettings;
static method_44215(biomeSource: BiomeSource,fun: Function): List;
static method_38268(structureType: Structure): Integer;
static checkNotReferenced(structureAccessor: StructureAccessor,start: StructureStart): boolean;
static method_39787(pos: StructureWorldAccess,set: Set,chunkPos: ChunkPos): void;
static method_41046(placement: StructurePlacement): Set;
static method_38272(registry: Registry,structure: Structure): string;
static method_41040(structureAccessor: StructureAccessor,blockPos: BlockPos,start: StructureStart): boolean;
static method_38271(registry: Registry,placedFeature: PlacedFeature): string;
static method_39788(feature: IntSet,indexedFeatures: PlacedFeatureIndexer_IndexedFeatures,placedFeature: PlacedFeature): void;
static method_30148(structureStart: StructureStart): string;
static method_30149(structureStart: StructureStart): string;
static method_41045(structureStart: StructureStart,structureTypeRegistry: Registry): string;
static method_41050(optional: Optional,structureStart: StructureStart): string;
static method_41047(blockPos: BlockPos,start: StructureStart): boolean;
static method_41052(mutableBoolean: MutableBoolean,predicate: Predicate,start: StructureStart): void;
static method_44217(fun: Function,biomeEntry: RegistryEntry): List;
static CODEC: Codec;
}

//net.minecraft.client.texture.atlas.DirectoryAtlasSource
class DirectoryAtlasSource extends JObject, AtlasSource{
 load(resourceManager: ResourceManager,regions: AtlasSource_SpriteRegions): void;
 getType(): AtlasSourceType;
}
class Static_DirectoryAtlasSource {
static method_47685(directoryAtlasSource: DirectoryAtlasSource): string;
static method_47686(directoryAtlasSource: DirectoryAtlasSource): string;
static method_47684(instance: RecordCodecBuilder_Instance): App;
static CODEC: Codec;
}

//net.minecraft.client.render.BufferBuilderStorage
class BufferBuilderStorage extends JObject{
 getBlockBufferBuilders(): BlockBufferBuilderStorage;
 getOutlineVertexConsumers(): OutlineVertexConsumerProvider;
 getEffectVertexConsumers(): VertexConsumerProvider_Immediate;
 getEntityVertexConsumers(): VertexConsumerProvider_Immediate;
}
class Static_BufferBuilderStorage {
static assignBufferBuilder(builderStorage: Object2ObjectLinkedOpenHashMap,layer: RenderLayer): void;
static method_24047(object2ObjectLinkedOpenHashMap: Object2ObjectLinkedOpenHashMap,layer: RenderLayer): void;
}

//net.minecraft.network.packet.s2c.login.LoginDisconnectS2CPacket
class LoginDisconnectS2CPacket extends JObject, Packet{
 apply(clientLoginPacketListener: ClientLoginPacketListener): void;
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
 getReason(): Text;
}

//net.minecraft.loot.condition.InvertedLootCondition$Serializer
class InvertedLootCondition_Serializer extends JObject, JsonSerializer{
 fromJson(json: JsonObject,context: JsonDeserializationContext): Object;
 fromJson(jsonObject: JsonObject,jsonDeserializationContext: JsonDeserializationContext): InvertedLootCondition;
 toJson(jsonObject: JsonObject,invertedLootCondition: InvertedLootCondition,jsonSerializationContext: JsonSerializationContext): void;
 toJson(json: JsonObject,object: Object,context: JsonSerializationContext): void;
}

//net.minecraft.loot.LootPool$Serializer
class LootPool_Serializer extends JObject, JsonDeserializer, JsonSerializer{
 deserialize(json: JsonElement,unused: Type,context: JsonDeserializationContext): Object;
 deserialize(jsonElement: JsonElement,type: Type,jsonDeserializationContext: JsonDeserializationContext): LootPool;
 serialize(entry: Object,unused: Type,context: JsonSerializationContext): JsonElement;
 serialize(lootPool: LootPool,type: Type,jsonSerializationContext: JsonSerializationContext): JsonElement;
}

//net.minecraft.world.chunk.ChunkNibbleArray
class ChunkNibbleArray extends JObject{
 get(x: number,y: number,z: number): number;
 toString(): string;
 clear(defaultValue: number): void;
 set(x: number,y: number,z: number,value: number): void;
 copy(): ChunkNibbleArray;
 isArrayUninitialized(): boolean;
 bottomToString(unused: number): string;
 asByteArray(): byte[];
 isUninitialized(expectedDefaultValue: number): boolean;
 isUninitialized(): boolean;
}
class Static_ChunkNibbleArray {
static getIndex(x: number,y: number,z: number): number;
static occupiesSmallerBits(i: number): number;
static pack(value: number): byte;
static getArrayIndex(i: number): number;
static COPY_TIMES: number;
static COPY_BLOCK_SIZE: number;
static BYTES_LENGTH: number;
static NIBBLE_BITS: number;
}

//net.minecraft.entity.ai.brain.task.VillagerWalkTowardsTask
class VillagerWalkTowardsTask extends JObject{
}
class Static_VillagerWalkTowardsTask {
static create(destination: MemoryModuleType,speed: number,completionRange: number,maxDistance: number,maxRunTime: number): SingleTickTask;
static method_47100(taskContext: TaskTriggerer_TaskContext,i: number,memoryModuleType: MemoryModuleType,j: number,f: number,k: number,cantReachWalkTargetSince: MemoryQueryResult,walkTarget: MemoryQueryResult,destinationResult: MemoryQueryResult): TaskRunnable;
static method_47101(taskContext: TaskTriggerer_TaskContext,memoryQueryResult: MemoryQueryResult,memoryQueryResult2: MemoryQueryResult,i: number,memoryModuleType: MemoryModuleType,j: number,memoryQueryResult3: MemoryQueryResult,f: number,k: number,world: ServerWorld,entity: VillagerEntity,time: long): boolean;
static method_47103(memoryModuleType: MemoryModuleType,i: number,j: number,f: number,k: number,context: TaskTriggerer_TaskContext): App;
}

//net.minecraft.world.gen.blockpredicate.NotBlockPredicate
class NotBlockPredicate extends JObject, BlockPredicate{
 test(world: Object,pos: Object): boolean;
 test(structureWorldAccess: StructureWorldAccess,blockPos: BlockPos): boolean;
 getType(): BlockPredicateType;
}
class Static_NotBlockPredicate {
static method_38902(instance: RecordCodecBuilder_Instance): App;
static method_38903(predicate: NotBlockPredicate): BlockPredicate;
static CODEC: Codec;
}

//net.minecraft.world.spawner.CatSpawner
class CatSpawner extends JObject, Spawner{
 spawn(world: ServerWorld,spawnMonsters: boolean,spawnAnimals: boolean): number;
}
class Static_CatSpawner {
static method_44004(entry: RegistryEntry): boolean;
static SPAWN_INTERVAL: number;
}

//net.minecraft.client.render.model.ModelLoader$ModelDefinition
class ModelLoader_ModelDefinition extends JObject{
 equals(o: Object): boolean;
 hashCode(): number;
}
class Static_ModelLoader_ModelDefinition {
static create(state: BlockState,rawModel: UnbakedModel,properties: Collection): ModelLoader_ModelDefinition;
static create(state: BlockState,rawModel: MultipartUnbakedModel,properties: Collection): ModelLoader_ModelDefinition;
static method_21610(stateManager: StateManager,blockState: BlockState,component: MultipartModelComponent): boolean;
static getStateValues(state: BlockState,properties: Collection): List;
}

//net.minecraft.block.BigDripleafStemBlock$1


//net.minecraft.world.gen.surfacebuilder.MaterialRules
class MaterialRules extends JObject{
}
class Static_MaterialRules {
static register(registry: Registry,id: string,codecHolder: CodecHolder): Codec;
static block(state: BlockState): MaterialRules_MaterialRule;
static condition(condition: MaterialRules_MaterialCondition,rule: MaterialRules_MaterialRule): MaterialRules_MaterialRule;
static sequence(rules: MaterialRules_MaterialRule): MaterialRules_MaterialRule;
static not(target: MaterialRules_MaterialCondition): MaterialRules_MaterialCondition;
static water(offset: number,runDepthMultiplier: number): MaterialRules_MaterialCondition;
static biome(biomes: List): MaterialRules_BiomeMaterialCondition;
static biome(biomes: RegistryKey[]): MaterialRules_MaterialCondition;
static steepSlope(): MaterialRules_MaterialCondition;
static noiseThreshold(noise: RegistryKey,min: number): MaterialRules_MaterialCondition;
static noiseThreshold(noise: RegistryKey,min: number,max: number): MaterialRules_MaterialCondition;
static surface(): MaterialRules_MaterialCondition;
static hole(): MaterialRules_MaterialCondition;
static aboveY(anchor: YOffset,runDepthMultiplier: number): MaterialRules_MaterialCondition;
static temperature(): MaterialRules_MaterialCondition;
static verticalGradient(id: string,trueAtAndBelow: YOffset,falseAtAndAbove: YOffset): MaterialRules_MaterialCondition;
static terracottaBands(): MaterialRules_MaterialRule;
static aboveYWithStoneDepth(anchor: YOffset,runDepthMultiplier: number): MaterialRules_MaterialCondition;
static waterWithStoneDepth(offset: number,runDepthMultiplier: number): MaterialRules_MaterialCondition;
static stoneDepth(offset: number,addSurfaceDepth: boolean,verticalSurfaceType: VerticalSurfaceType): MaterialRules_MaterialCondition;
static stoneDepth(offset: number,addSurfaceDepth: boolean,secondaryDepthRange: number,verticalSurfaceType: VerticalSurfaceType): MaterialRules_MaterialCondition;
static STONE_DEPTH_FLOOR: MaterialRules_MaterialCondition;
static STONE_DEPTH_FLOOR_WITH_SURFACE_DEPTH: MaterialRules_MaterialCondition;
static STONE_DEPTH_FLOOR_WITH_SURFACE_DEPTH_RANGE_6: MaterialRules_MaterialCondition;
static STONE_DEPTH_FLOOR_WITH_SURFACE_DEPTH_RANGE_30: MaterialRules_MaterialCondition;
static STONE_DEPTH_CEILING: MaterialRules_MaterialCondition;
static STONE_DEPTH_CEILING_WITH_SURFACE_DEPTH: MaterialRules_MaterialCondition;
}

//net.minecraft.screen.ScreenHandlerContext$2


//net.minecraft.screen.ScreenHandlerContext$1


//net.minecraft.client.network.PendingUpdateManager
class PendingUpdateManager extends JObject, AutoCloseable{
 close(): void;
 processPendingUpdates(maxProcessableSequence: number,world: ClientWorld): void;
 getSequence(): number;
 incrementSequence(): PendingUpdateManager;
 hasPendingSequence(): boolean;
 hasPendingUpdate(pos: BlockPos,state: BlockState): boolean;
 addPendingUpdate(pos: BlockPos,state: BlockState,player: ClientPlayerEntity): void;
}

//net.minecraft.util.UserCache
class UserCache extends JObject{
 add(profile: GameProfile): void;
 load(): List;
 save(): void;
 findByName(name: string): Optional;
 getByUuid(uuid: UUID): Optional;
 findByNameAsync(username: string,consumer: Consumer): void;
 setExecutor(executor: Executor): void;
 clearExecutor(): void;
}
class Static_UserCache {
static shouldUseRemote(): boolean;
static findProfileByName(repository: GameProfileRepository,name: string): Optional;
static setUseRemote(value: boolean): void;
static method_37160(consumer: Consumer,profile: Optional,throwable: Throwable): void;
static method_37158(consumer: Consumer,profile: Optional,throwable: Throwable): void;
static entryToJson(entry: UserCache_Entry,dateFormat: DateFormat): JsonElement;
static entryFromJson(json: JsonElement,dateFormat: DateFormat): Optional;
static getDateFormat(): DateFormat;
static method_30168(dateFormat: DateFormat,list: List,json: JsonElement): void;
static method_30166(jsonArray: JsonArray,dateFormat: DateFormat,entry: UserCache_Entry): void;
static LOGGER: Logger;
static MAX_SAVED_ENTRIES: number;
static field_29789: number;
static useRemote: boolean;
}

//net.minecraft.sound.MusicSound
class MusicSound extends JObject{
 shouldReplaceCurrentMusic(): boolean;
 getMinDelay(): number;
 getMaxDelay(): number;
 getSound(): RegistryEntry;
}
class Static_MusicSound {
static method_28131(sound: MusicSound): RegistryEntry;
static method_28128(instance: RecordCodecBuilder_Instance): App;
static method_28130(sound: MusicSound): Integer;
static method_28129(sound: MusicSound): Integer;
static method_28127(sound: MusicSound): Boolean;
static CODEC: Codec;
}

//net.minecraft.nbt.NbtString
class NbtString extends JObject, NbtElement{
 equals(o: Object): boolean;
 toString(): string;
 hashCode(): number;
 write(output: DataOutput): void;
 accept(visitor: NbtElementVisitor): void;
 getType(): byte;
 copy(): NbtElement;
 copy(): NbtString;
 asString(): string;
 getSizeInBytes(): number;
 doAccept(visitor: NbtScanner): NbtScanner_Result;
 getNbtType(): NbtType;
}
class Static_NbtString {
static of(value: string): NbtString;
static skip(input: DataInput): void;
static escape(value: string): string;
static SIZE: number;
static TYPE: NbtType;
static EMPTY: NbtString;
static DOUBLE_QUOTE: char;
static SINGLE_QUOTE: char;
static BACKSLASH: char;
static NULL: char;
}

//net.minecraft.world.event.listener.SimpleGameEventDispatcher
class SimpleGameEventDispatcher extends JObject, GameEventDispatcher{
 dispatch(event: GameEvent,pos: Vec3d,emitter: GameEvent_Emitter,callback: GameEventDispatcher_DispatchCallback): boolean;
 isEmpty(): boolean;
 removeListener(listener: GameEventListener): void;
 addListener(listener: GameEventListener): void;
}
class Static_SimpleGameEventDispatcher {
static dispatchTo(world: ServerWorld,listenerPos: Vec3d,listener: GameEventListener): Optional;
}

//net.minecraft.network.packet.s2c.play.LightData
class LightData extends JObject{
 write(buf: PacketByteBuf): void;
 getUninitedSky(): BitSet;
 getSkyNibbles(): List;
 getUninitedBlock(): BitSet;
 getBlockNibbles(): List;
 getInitedBlock(): BitSet;
 getInitedSky(): BitSet;
}
class Static_LightData {
static method_38607(b: PacketByteBuf): byte[];
static method_38605(b: PacketByteBuf): byte[];
}

//net.minecraft.nbt.NbtIntArray$1


//net.minecraft.client.gui.tooltip.TooltipComponent
interface TooltipComponent extends JObject{
 getWidth(textRenderer: TextRenderer): number;
 getHeight(): number;
 drawItems(textRenderer: TextRenderer,x: number,y: number,context: DrawContext): void;
 drawText(textRenderer: TextRenderer,x: number,y: number,matrix: Matrix4f,vertexConsumers: VertexConsumerProvider_Immediate): void;
}
class Static_TooltipComponent {
static of(text: OrderedText): TooltipComponent;
static of(data: TooltipData): TooltipComponent;
}

//net.minecraft.world.gen.feature.util.CaveSurface
class CaveSurface extends JObject{
 getCeilingHeight(): OptionalInt;
 withFloor(floor: OptionalInt): CaveSurface;
 getFloorHeight(): OptionalInt;
 withCeiling(ceiling: OptionalInt): CaveSurface;
 getOptionalHeight(): OptionalInt;
}
class Static_CaveSurface {
static create(world: TestableWorld,pos: BlockPos,height: number,canGenerate: Predicate,canReplace: Predicate): Optional;
static create(ceilingHeight: OptionalInt,floorHeight: OptionalInt): CaveSurface;
static createEmpty(): CaveSurface;
static createHalfWithCeiling(ceiling: number): CaveSurface;
static createHalfWithFloor(floor: number): CaveSurface;
static getCaveSurface(world: TestableWorld,height: number,canGenerate: Predicate,canReplace: Predicate,mutablePos: BlockPos_Mutable,y: number,direction: Direction): OptionalInt;
static createBounded(floor: number,ceiling: number): CaveSurface_Bounded;
static method_35326(i: number,j: number): CaveSurface_Bounded;
static method_35327(i: number): CaveSurface;
static method_35329(i: number): CaveSurface;
}

//net.minecraft.client.util.TextCollector
class TextCollector extends JObject{
 add(text: StringVisitable): void;
 clear(): void;
 getCombined(): StringVisitable;
 getRawCombined(): StringVisitable;
}

//net.minecraft.client.particle.BlockFallingDustParticle$Factory
class BlockFallingDustParticle_Factory extends JObject, ParticleFactory{
 createParticle(blockStateParticleEffect: BlockStateParticleEffect,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
 createParticle(particleEffect: ParticleEffect,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
}

//net.minecraft.world.gen.feature.DeltaFeatureConfig
class DeltaFeatureConfig extends JObject, FeatureConfig{
 getSize(): IntProvider;
 getContents(): BlockState;
 getRimSize(): IntProvider;
 getRim(): BlockState;
}
class Static_DeltaFeatureConfig {
static method_28710(config: DeltaFeatureConfig): BlockState;
static method_30401(config: DeltaFeatureConfig): IntProvider;
static method_30398(config: DeltaFeatureConfig): IntProvider;
static method_30399(instance: RecordCodecBuilder_Instance): App;
static method_28709(config: DeltaFeatureConfig): BlockState;
static CODEC: Codec;
}

//net.minecraft.registry.entry.RegistryEntry$Reference
class RegistryEntry_Reference<T> extends JObject, RegistryEntry{
 value(): T;
 toString(): string;
 matches(predicate: Predicate): boolean;
 getKey(): Optional;
 getType(): RegistryEntry_Type;
 matchesKey(key: RegistryKey): boolean;
 isIn(tag: TagKey): boolean;
 streamTags(): Stream;
 registryKey(): RegistryKey;
 ownerEquals(owner: RegistryEntryOwner): boolean;
 getKeyOrValue(): Either;
 hasKeyAndValue(): boolean;
 matchesId(id: Identifier): boolean;
}
class Static_RegistryEntry_Reference {
static standAlone(owner: RegistryEntryOwner,registryKey: RegistryKey): RegistryEntry_Reference;
static intrusive(owner: RegistryEntryOwner,value: Object): RegistryEntry_Reference;
}

//net.minecraft.client.util.InputUtil$Key
class InputUtil_Key extends JObject{
 equals(o: Object): boolean;
 toString(): string;
 hashCode(): number;
 toInt(): OptionalInt;
 getCategory(): InputUtil_Type;
 getCode(): number;
 getTranslationKey(): string;
 getLocalizedText(): Text;
}
class Static_InputUtil_Key {
static method_27444(type: InputUtil_Type,i: number,string: string): Text;
static KEYS: Map;
}

//net.minecraft.network.packet.s2c.play.GameStateChangeS2CPacket
class GameStateChangeS2CPacket extends JObject, Packet{
 getValue(): number;
 apply(listener: PacketListener): void;
 apply(clientPlayPacketListener: ClientPlayPacketListener): void;
 write(buf: PacketByteBuf): void;
 getReason(): GameStateChangeS2CPacket_Reason;
}
class Static_GameStateChangeS2CPacket {
static NO_RESPAWN_BLOCK: GameStateChangeS2CPacket_Reason;
static RAIN_STARTED: GameStateChangeS2CPacket_Reason;
static RAIN_STOPPED: GameStateChangeS2CPacket_Reason;
static GAME_MODE_CHANGED: GameStateChangeS2CPacket_Reason;
static GAME_WON: GameStateChangeS2CPacket_Reason;
static DEMO_MESSAGE_SHOWN: GameStateChangeS2CPacket_Reason;
static PROJECTILE_HIT_PLAYER: GameStateChangeS2CPacket_Reason;
static RAIN_GRADIENT_CHANGED: GameStateChangeS2CPacket_Reason;
static THUNDER_GRADIENT_CHANGED: GameStateChangeS2CPacket_Reason;
static PUFFERFISH_STING: GameStateChangeS2CPacket_Reason;
static ELDER_GUARDIAN_EFFECT: GameStateChangeS2CPacket_Reason;
static IMMEDIATE_RESPAWN: GameStateChangeS2CPacket_Reason;
static DEMO_OPEN_SCREEN: number;
static DEMO_MOVEMENT_HELP: number;
static DEMO_JUMP_HELP: number;
static DEMO_INVENTORY_HELP: number;
static DEMO_EXPIRY_NOTICE: number;
}

//net.minecraft.util.ItemScatterer
class ItemScatterer extends JObject{
}
class Static_ItemScatterer {
static spawn(world: World,x: number,y: number,z: number,inventory: Inventory): void;
static spawn(world: World,pos: BlockPos,stacks: DefaultedList): void;
static spawn(world: World,x: number,y: number,z: number,stack: ItemStack): void;
static spawn(world: World,entity: Entity,inventory: Inventory): void;
static spawn(world: World,pos: BlockPos,inventory: Inventory): void;
static method_17348(world: World,blockPos: BlockPos,stack: ItemStack): void;
}

//net.minecraft.registry.SimpleRegistry
class SimpleRegistry extends JObject, MutableRegistry{
 add(key: RegistryKey,entry: Object,lifecycle: Lifecycle): RegistryEntry_Reference;
 get(index: number): Object;
 get(key: RegistryKey): Object;
 get(id: Identifier): Object;
 toString(): string;
 isEmpty(): boolean;
 size(): number;
 iterator(): Iterator;
 contains(key: RegistryKey): boolean;
 getKey(entry: Object): Optional;
 getKey(): RegistryKey;
 set(i: number,registryKey: RegistryKey,object: Object,lifecycle: Lifecycle): RegistryEntry_Reference;
 set(rawId: number,key: RegistryKey,value: Object,lifecycle: Lifecycle): RegistryEntry;
 getId(value: Object): Identifier;
 freeze(): Registry;
 getEntry(value: Object): RegistryEntry;
 getEntry(key: RegistryKey): Optional;
 getEntry(rawId: number): Optional;
 getKeys(): Set;
 createEntry(value: Object): RegistryEntry_Reference;
 getOrCreateEntryList(tag: TagKey): RegistryEntryList_Named;
 createMutableEntryLookup(): RegistryEntryLookup;
 streamTagsAndEntries(): Stream;
 getLifecycle(): Lifecycle;
 streamEntries(): Stream;
 streamTags(): Stream;
 getEntryLifecycle(entry: Object): Lifecycle;
 getRandom(random: Random): Optional;
 getRawId(value: Object): number;
 getEntrySet(): Set;
 getIds(): Set;
 containsId(id: Identifier): boolean;
 getEntryList(tag: TagKey): Optional;
 clearTags(): void;
 getEntryOwner(): RegistryEntryOwner;
 populateTags(tagEntries: Map): void;
 getReadOnlyWrapper(): RegistryWrapper_Impl;
}
class Static_SimpleRegistry {
static getValue(entry: RegistryEntry_Reference): Object;
static method_39665(map: Object2IntOpenCustomHashMap): void;
static method_45938(value: Object,entry: RegistryEntry_Reference): void;
static method_41199(entry: Map_Entry): Identifier;
static method_40262(entry: Map_Entry): Pair;
static method_40256(entry: Map_Entry): boolean;
static method_47440(registryKey: RegistryKey): string;
static method_40255(entryList: RegistryEntryList_Named): void;
static method_40259(map: Map,entry: RegistryEntry_Reference): void;
static method_40563(tag: TagKey): string;
static method_40261(entry: RegistryEntry_Reference): void;
static LOGGER: Logger;
}

//net.minecraft.entity.TrackedPosition
class TrackedPosition extends JObject{
 subtract(pos: Vec3d): Vec3d;
 getDeltaY(pos: Vec3d): long;
 getDeltaX(pos: Vec3d): long;
 getDeltaZ(pos: Vec3d): long;
 setPos(pos: Vec3d): void;
 withDelta(x: long,y: long,z: long): Vec3d;
}
class Static_TrackedPosition {
static pack(value: number): long;
static unpack(value: long): number;
static COORDINATE_SCALE: number;
}

//net.minecraft.inventory.DoubleInventory
class DoubleInventory extends JObject, Inventory{
 clear(): void;
 isEmpty(): boolean;
 size(): number;
 getStack(slot: number): ItemStack;
 onClose(player: PlayerEntity): void;
 isValid(slot: number,stack: ItemStack): boolean;
 setStack(slot: number,stack: ItemStack): void;
 removeStack(slot: number): ItemStack;
 removeStack(slot: number,amount: number): ItemStack;
 getMaxCountPerStack(): number;
 markDirty(): void;
 onOpen(player: PlayerEntity): void;
 canPlayerUse(player: PlayerEntity): boolean;
 isPart(inventory: Inventory): boolean;
}

//net.minecraft.server.command.TeleportCommand
class TeleportCommand extends JObject{
}
class Static_TeleportCommand {
static register(dispatcher: CommandDispatcher): void;
static execute(source: ServerCommandSource,targets: Collection,destination: Entity): number;
static execute(source: ServerCommandSource,targets: Collection,world: ServerWorld,location: PosArgument,rotation: PosArgument,facingLocation: TeleportCommand_LookTarget): number;
static teleport(source: ServerCommandSource,target: Entity,world: ServerWorld,x: number,y: number,z: number,movementFlags: Set,yaw: number,pitch: number,facingLocation: TeleportCommand_LookTarget): void;
static method_13761(context: CommandContext): number;
static method_13770(context: CommandContext): number;
static method_13768(context: CommandContext): number;
static method_13767(context: CommandContext): number;
static method_13762(context: CommandContext): number;
static method_13759(context: CommandContext): number;
static method_13764(source: ServerCommandSource): boolean;
static method_52120(collection: Collection,vec3d: Vec3d): Text;
static method_52119(collection: Collection,entity: Entity): Text;
static method_13758(context: CommandContext): number;
static method_52121(collection: Collection,entity: Entity): Text;
static method_52122(collection: Collection,vec3d: Vec3d): Text;
static method_13769(context: CommandContext): number;
static method_13763(source: ServerCommandSource): boolean;
static formatFloat(d: number): string;
static INVALID_POSITION_EXCEPTION: SimpleCommandExceptionType;
}

//net.minecraft.test.CustomTestProvider
interface CustomTestProvider extends JObject, Annotation{
}

//net.minecraft.resource.featuretoggle.FeatureSet
class FeatureSet extends JObject{
 equals(o: Object): boolean;
 hashCode(): number;
 contains(feature: FeatureFlag): boolean;
 combine(features: FeatureSet): FeatureSet;
 isSubsetOf(features: FeatureSet): boolean;
}
class Static_FeatureSet {
static of(universe: FeatureUniverse,features: Collection): FeatureSet;
static of(feature: FeatureFlag): FeatureSet;
static of(feature1: FeatureFlag,features: FeatureFlag[]): FeatureSet;
static empty(): FeatureSet;
static combineMask(universe: FeatureUniverse,featuresMask: long,newFeatures: Iterable): long;
static EMPTY: FeatureSet;
static MAX_FEATURE_FLAGS: number;
}

//net.minecraft.loot.context.LootContext
class LootContext extends JObject{
 get(parameter: LootContextParameter): Object;
 isActive(entry: LootContext_Entry): boolean;
 drop(id: Identifier,lootConsumer: Consumer): void;
 markInactive(entry: LootContext_Entry): void;
 getDataLookup(): LootDataLookup;
 getWorld(): ServerWorld;
 getRandom(): Random;
 getLuck(): number;
 markActive(entry: LootContext_Entry): boolean;
 requireParameter(parameter: LootContextParameter): Object;
 hasParameter(parameter: LootContextParameter): boolean;
}
class Static_LootContext {
static table(table: LootTable): LootContext_Entry;
static predicate(predicate: LootCondition): LootContext_Entry;
static itemModifier(itemModifier: LootFunction): LootContext_Entry;
}

//net.minecraft.screen.AnvilScreenHandler$1


//net.minecraft.world.border.WorldBorder$Properties
class WorldBorder_Properties extends JObject{
 getSize(): number;
 getWarningTime(): number;
 getWarningBlocks(): number;
 getCenterX(): number;
 getCenterZ(): number;
 getSizeLerpTime(): long;
 getSizeLerpTarget(): number;
 writeNbt(nbt: NbtCompound): void;
 getSafeZone(): number;
 getDamagePerBlock(): number;
}
class Static_WorldBorder_Properties {
static fromDynamic(dynamic: DynamicLike,properties: WorldBorder_Properties): WorldBorder_Properties;
}

//net.minecraft.entity.ai.brain.task.GoToPointOfInterestTask
class GoToPointOfInterestTask extends JObject{
}
class Static_GoToPointOfInterestTask {
static create(speed: number,completionRange: number): Task;
static method_46935(f: number,i: number,context: TaskTriggerer_TaskContext): App;
static method_46938(pointOfInterestStorage: PointOfInterestStorage,pos: BlockPos): number;
static method_46937(memoryQueryResult: MemoryQueryResult,f: number,i: number,world: ServerWorld,entity: VillagerEntity,time: long): boolean;
static method_46936(f: number,i: number,walkTarget: MemoryQueryResult): TaskRunnable;
}

//net.minecraft.recipe.book.RecipeBookOptions
class RecipeBookOptions extends JObject{
 equals(o: Object): boolean;
 hashCode(): number;
 copy(): RecipeBookOptions;
 copyFrom(other: RecipeBookOptions): void;
 toPacket(buf: PacketByteBuf): void;
 isFilteringCraftable(category: RecipeBookCategory): boolean;
 setGuiOpen(category: RecipeBookCategory,open: boolean): void;
 isGuiOpen(category: RecipeBookCategory): boolean;
 setFilteringCraftable(category: RecipeBookCategory,filtering: boolean): void;
 writeNbt(nbt: NbtCompound): void;
}
class Static_RecipeBookOptions {
static fromNbt(nbt: NbtCompound): RecipeBookOptions;
static fromPacket(buf: PacketByteBuf): RecipeBookOptions;
static method_30182(categoryOptions: EnumMap): void;
static method_30185(nbtCompound: NbtCompound,map: Map,category: RecipeBookCategory,pair: Pair): void;
static CATEGORY_OPTION_NAMES: Map;
}

//net.minecraft.client.texture.TextureTickListener
interface TextureTickListener extends JObject{
 tick(): void;
}

//net.minecraft.server.command.TeamCommand
class TeamCommand extends JObject{
}
class Static_TeamCommand {
static register(dispatcher: CommandDispatcher): void;
static executeModifyDisplayName(source: ServerCommandSource,team: Team,displayName: Text): number;
static executeModifyNametagVisibility(source: ServerCommandSource,team: Team,visibility: AbstractTeam_VisibilityRule): number;
static executeModifyCollisionRule(source: ServerCommandSource,team: Team,collisionRule: AbstractTeam_CollisionRule): number;
static executeModifyPrefix(source: ServerCommandSource,team: Team,prefix: Text): number;
static executeModifySuffix(source: ServerCommandSource,team: Team,suffix: Text): number;
static executeModifyFriendlyFire(source: ServerCommandSource,team: Team,allowed: boolean): number;
static executeModifySeeFriendlyInvisibles(source: ServerCommandSource,team: Team,allowed: boolean): number;
static executeRemove(source: ServerCommandSource,team: Team): number;
static executeAdd(source: ServerCommandSource,team: string): number;
static executeAdd(source: ServerCommandSource,team: string,displayName: Text): number;
static method_13726(context: CommandContext): number;
static method_13752(context: CommandContext): number;
static method_13722(context: CommandContext): number;
static method_13718(context: CommandContext): number;
static method_13750(context: CommandContext): number;
static method_13727(context: CommandContext): number;
static method_13749(context: CommandContext): number;
static method_13729(context: CommandContext): number;
static method_13742(context: CommandContext): number;
static method_13755(context: CommandContext): number;
static method_13719(source: ServerCommandSource): boolean;
static method_13740(context: CommandContext): number;
static method_13734(context: CommandContext): number;
static method_13730(context: CommandContext): number;
static method_13721(context: CommandContext): number;
static method_13753(context: CommandContext): number;
static method_13746(context: CommandContext): number;
static method_13716(context: CommandContext): number;
static method_13737(context: CommandContext): number;
static method_13733(context: CommandContext): number;
static method_13731(context: CommandContext): number;
static method_13738(context: CommandContext): number;
static method_13725(context: CommandContext): number;
static method_13744(context: CommandContext): number;
static method_13739(context: CommandContext): number;
static method_52118(team: Team): Text;
static method_13712(context: CommandContext): number;
static executeJoin(source: ServerCommandSource,team: Team,members: Collection): number;
static method_13717(context: CommandContext): number;
static method_52111(collection: Collection): Text;
static method_52102(team: Team,visibilityRule: AbstractTeam_VisibilityRule): Text;
static method_13724(context: CommandContext): number;
static executeLeave(source: ServerCommandSource,members: Collection): number;
static method_52108(bl: boolean,team: Team): Text;
static method_52114(bl: boolean,team: Team): Text;
static executeModifyColor(source: ServerCommandSource,team: Team,color: Formatting): number;
static method_52101(team: Team,collisionRule: AbstractTeam_CollisionRule): Text;
static method_52104(team: Team,formatting: Formatting): Text;
static method_52117(collection: Collection,team: Team): Text;
static method_52116(collection: Collection): Text;
static method_52112(collection: Collection,team: Team): Text;
static method_52110(team: Team,visibilityRule: AbstractTeam_VisibilityRule): Text;
static method_52099(): Text;
static method_52113(text: Text): Text;
static method_52115(team: Team): Text;
static method_52106(collection: Collection,team: Team): Text;
static method_52107(text: Text): Text;
static executeListMembers(source: ServerCommandSource,team: Team): number;
static executeEmpty(source: ServerCommandSource,team: Team): number;
static method_52109(team: Team): Text;
static method_52103(team: Team,collection: Collection): Text;
static executeListTeams(source: ServerCommandSource): number;
static method_52105(collection: Collection): Text;
static method_52100(team: Team): Text;
static executeModifyDeathMessageVisibility(source: ServerCommandSource,team: Team,visibility: AbstractTeam_VisibilityRule): number;
static ADD_DUPLICATE_EXCEPTION: SimpleCommandExceptionType;
static EMPTY_UNCHANGED_EXCEPTION: SimpleCommandExceptionType;
static OPTION_NAME_UNCHANGED_EXCEPTION: SimpleCommandExceptionType;
static OPTION_COLOR_UNCHANGED_EXCEPTION: SimpleCommandExceptionType;
static OPTION_FRIENDLY_FIRE_ALREADY_ENABLED_EXCEPTION: SimpleCommandExceptionType;
static OPTION_FRIENDLY_FIRE_ALREADY_DISABLED_EXCEPTION: SimpleCommandExceptionType;
static OPTION_SEE_FRIENDLY_INVISIBLES_ALREADY_ENABLED_EXCEPTION: SimpleCommandExceptionType;
static OPTION_SEE_FRIENDLY_INVISIBLES_ALREADY_DISABLED_EXCEPTION: SimpleCommandExceptionType;
static OPTION_NAMETAG_VISIBILITY_UNCHANGED_EXCEPTION: SimpleCommandExceptionType;
static OPTION_DEATH_MESSAGE_VISIBILITY_UNCHANGED_EXCEPTION: SimpleCommandExceptionType;
static OPTION_COLLISION_RULE_UNCHANGED_EXCEPTION: SimpleCommandExceptionType;
}

//net.minecraft.util.path.SymlinkFinder
class SymlinkFinder extends JObject{
 collect(path: Path,resolveSymlink: boolean): List;
 validate(path: Path,results: List): void;
}

//net.minecraft.network.PacketBundleHandler$2$1


//net.minecraft.client.render.block.entity.StructureBlockBlockEntityRenderer$1


//net.minecraft.registry.tag.CatVariantTags
class CatVariantTags extends JObject{
}
class Static_CatVariantTags {
static of(id: string): TagKey;
static DEFAULT_SPAWNS: TagKey;
static FULL_MOON_SPAWNS: TagKey;
}

//net.minecraft.world.spawner.PhantomSpawner
class PhantomSpawner extends JObject, Spawner{
 spawn(world: ServerWorld,spawnMonsters: boolean,spawnAnimals: boolean): number;
}

//net.minecraft.loot.provider.nbt.LootNbtProviderTypes
class LootNbtProviderTypes extends JObject{
}
class Static_LootNbtProviderTypes {
static register(id: string,jsonSerializer: JsonSerializer): LootNbtProviderType;
static createGsonSerializer(): Object;
static STORAGE: LootNbtProviderType;
static CONTEXT: LootNbtProviderType;
}

//net.minecraft.network.packet.s2c.play.EntityAttributesS2CPacket$Entry
class EntityAttributesS2CPacket_Entry extends JObject{
 getModifiers(): Collection;
 getId(): EntityAttribute;
 getBaseValue(): number;
}

//net.minecraft.server.network.ServerHandshakeNetworkHandler
class ServerHandshakeNetworkHandler extends JObject, ServerHandshakePacketListener{
 isConnectionOpen(): boolean;
 onDisconnected(reason: Text): void;
 onHandshake(packet: HandshakeC2SPacket): void;
}
class Static_ServerHandshakeNetworkHandler {
static IGNORING_STATUS_REQUEST_MESSAGE: Text;
}

//net.minecraft.client.util.Clipboard
class Clipboard extends JObject{
 getClipboard(window: long,errorCallback: GLFWErrorCallbackI): string;
 setClipboard(window: long,string: string): void;
}
class Static_Clipboard {
static setClipboard(window: long,clipboardBuffer: ByteBuffer,content: byte[]): void;
static GLFW_FORMAT_UNAVAILABLE: number;
}

//net.minecraft.block.RedstoneTorchBlock$BurnoutEntry
class RedstoneTorchBlock_BurnoutEntry extends JObject{
}

//net.minecraft.block.DecoratedPotPatterns
class DecoratedPotPatterns extends JObject{
}
class Static_DecoratedPotPatterns {
static of(path: string): RegistryKey;
static getTextureId(key: RegistryKey): Identifier;
static registerAndGetDefault(registry: Registry): string;
static fromSherd(sherd: Item): RegistryKey;
static DECORATED_POT_BASE: string;
static DECORATED_POT_BASE_KEY: RegistryKey;
static DECORATED_POT_SIDE: string;
static ANGLER_POTTERY_PATTERN: string;
static ARCHER_POTTERY_PATTERN: string;
static ARMS_UP_POTTERY_PATTERN: string;
static BLADE_POTTERY_PATTERN: string;
static BREWER_POTTERY_PATTERN: string;
static BURN_POTTERY_PATTERN: string;
static DANGER_POTTERY_PATTERN: string;
static EXPLORER_POTTERY_PATTERN: string;
static FRIEND_POTTERY_PATTERN: string;
static HEART_POTTERY_PATTERN: string;
static HEARTBREAK_POTTERY_PATTERN: string;
static HOWL_POTTERY_PATTERN: string;
static MINER_POTTERY_PATTERN: string;
static MOURNER_POTTERY_PATTERN: string;
static PLENTY_POTTERY_PATTERN: string;
static PRIZE_POTTERY_PATTERN: string;
static SHEAF_POTTERY_PATTERN: string;
static SHELTER_POTTERY_PATTERN: string;
static SKULL_POTTERY_PATTERN: string;
static SNORT_POTTERY_PATTERN: string;
static DECORATED_POT_SIDE_KEY: RegistryKey;
static ANGLER_POTTERY_PATTERN_KEY: RegistryKey;
static ARCHER_POTTERY_PATTERN_KEY: RegistryKey;
static ARMS_UP_POTTERY_PATTERN_KEY: RegistryKey;
static BLADE_POTTERY_PATTERN_KEY: RegistryKey;
static BREWER_POTTERY_PATTERN_KEY: RegistryKey;
static BURN_POTTERY_PATTERN_KEY: RegistryKey;
static DANGER_POTTERY_PATTERN_KEY: RegistryKey;
static EXPLORER_POTTERY_PATTERN_KEY: RegistryKey;
static FRIEND_POTTERY_PATTERN_KEY: RegistryKey;
static HEART_POTTERY_PATTERN_KEY: RegistryKey;
static HEARTBREAK_POTTERY_PATTERN_KEY: RegistryKey;
static HOWL_POTTERY_PATTERN_KEY: RegistryKey;
static MINER_POTTERY_PATTERN_KEY: RegistryKey;
static MOURNER_POTTERY_PATTERN_KEY: RegistryKey;
static PLENTY_POTTERY_PATTERN_KEY: RegistryKey;
static POTTERY_PATTERN_PRIZE_KEY: RegistryKey;
static SHEAF_POTTERY_PATTERN_KEY: RegistryKey;
static SHELTER_POTTERY_PATTERN_KEY: RegistryKey;
static SKULL_POTTERY_PATTERN_KEY: RegistryKey;
static SNORT_POTTERY_PATTERN_KEY: RegistryKey;
static SHERD_TO_PATTERN: Map;
}

//net.minecraft.world.gen.trunk.TrunkPlacer
class TrunkPlacer extends JObject{
 generate(world: TestableWorld,replacer: BiConsumer,random: Random,height: number,startPos: BlockPos,config: TreeFeatureConfig): List;
 getHeight(random: Random): number;
 canReplaceOrIsLog(world: TestableWorld,pos: BlockPos): boolean;
}
class Static_TrunkPlacer {
static fillTrunkPlacerFields(instance: RecordCodecBuilder_Instance): Products_P3;
static canGenerate(world: TestableWorld,pos: BlockPos): boolean;
static method_28906(placer: TrunkPlacer): Integer;
static method_28905(placer: TrunkPlacer): Integer;
static method_28907(placer: TrunkPlacer): Integer;
static method_43197(state: BlockState): boolean;
static setToDirt(world: TestableWorld,replacer: BiConsumer,random: Random,pos: BlockPos,config: TreeFeatureConfig): void;
static method_27405(state: BlockState): boolean;
static TYPE_CODEC: Codec;
static MAX_BASE_HEIGHT: number;
static MAX_RANDOM_HEIGHT: number;
static field_31530: number;
}

//net.minecraft.world.SpawnHelper
class SpawnHelper extends JObject{
}
class Static_SpawnHelper {
static getRandomPosInChunkSection(world: World,chunk: WorldChunk): BlockPos;
static pickRandomSpawnEntry(world: ServerWorld,structureAccessor: StructureAccessor,chunkGenerator: ChunkGenerator,spawnGroup: SpawnGroup,random: Random,pos: BlockPos): Optional;
static isAcceptableSpawnPosition(world: ServerWorld,chunk: Chunk,pos: BlockPos_Mutable,squaredDistance: number): boolean;
static shouldUseNetherFortressSpawns(pos: BlockPos,world: ServerWorld,spawnGroup: SpawnGroup,structureAccessor: StructureAccessor): boolean;
static populateEntities(world: ServerWorldAccess,biomeEntry: RegistryEntry,chunkPos: ChunkPos,random: Random): void;
static isClearForSpawn(blockView: BlockView,pos: BlockPos,state: BlockState,fluidState: FluidState,entityType: EntityType): boolean;
static spawnEntitiesInChunk(group: SpawnGroup,world: ServerWorld,pos: BlockPos): void;
static spawnEntitiesInChunk(group: SpawnGroup,world: ServerWorld,chunk: WorldChunk,checker: SpawnHelper_Checker,runner: SpawnHelper_Runner): void;
static spawnEntitiesInChunk(group: SpawnGroup,world: ServerWorld,chunk: Chunk,pos: BlockPos,checker: SpawnHelper_Checker,runner: SpawnHelper_Runner): void;
static spawn(world: ServerWorld,chunk: WorldChunk,info: SpawnHelper_Info,spawnAnimals: boolean,spawnMonsters: boolean,rareSpawn: boolean): void;
static canSpawn(location: SpawnRestriction_Location,world: WorldView,pos: BlockPos,entityType: EntityType): boolean;
static canSpawn(world: ServerWorld,group: SpawnGroup,structureAccessor: StructureAccessor,chunkGenerator: ChunkGenerator,spawnEntry: SpawnSettings_SpawnEntry,pos: BlockPos_Mutable,squaredDistance: number): boolean;
static getSpawnEntries(world: ServerWorld,structureAccessor: StructureAccessor,chunkGenerator: ChunkGenerator,spawnGroup: SpawnGroup,pos: BlockPos,biomeEntry: RegistryEntry): Pool;
static setupSpawn(spawningChunkCount: number,entities: Iterable,chunkSource: SpawnHelper_ChunkSource,densityCapper: SpawnDensityCapper): SpawnHelper_Info;
static method_27819(blockPos: BlockPos,entity: Entity,gravityField: GravityField,spawnDensityCapper: SpawnDensityCapper,spawnGroup: SpawnGroup,object2IntOpenHashMap: Object2IntOpenHashMap,chunk: WorldChunk): void;
static createMob(world: ServerWorld,type: EntityType): MobEntity;
static isValidSpawn(world: ServerWorld,entity: MobEntity,squaredDistance: number): boolean;
static containsSpawnEntry(world: ServerWorld,structureAccessor: StructureAccessor,chunkGenerator: ChunkGenerator,spawnGroup: SpawnGroup,spawnEntry: SpawnSettings_SpawnEntry,pos: BlockPos): boolean;
static method_35238(type: EntityType,posx: BlockPos,chunk: Chunk): boolean;
static getBiomeDirectly(pos: BlockPos,chunk: Chunk): Biome;
static method_35239(entity: MobEntity,chunk: Chunk): void;
static getEntitySpawnPos(world: WorldView,entityType: EntityType,x: number,z: number): BlockPos;
static method_27814(i: number): SpawnGroup[];
static method_27816(spawnGroup: SpawnGroup): boolean;
static LOGGER: Logger;
static MIN_SPAWN_DISTANCE: number;
static field_30972: number;
static field_30973: number;
static CHUNK_AREA: number;
static SPAWNABLE_GROUPS: SpawnGroup[];
}

//net.minecraft.client.gui.screen.ingame.HandledScreens
class HandledScreens extends JObject{
}
class Static_HandledScreens {
static register(type: ScreenHandlerType,provider: HandledScreens_Provider): void;
static open(type: ScreenHandlerType,client: MinecraftClient,id: number,title: Text): void;
static getProvider(type: ScreenHandlerType): HandledScreens_Provider;
static isMissingScreens(): boolean;
static LOGGER: Logger;
static PROVIDERS: Map;
}

//net.minecraft.network.packet.c2s.play.UpdateSelectedSlotC2SPacket
class UpdateSelectedSlotC2SPacket extends JObject, Packet{
 apply(serverPlayPacketListener: ServerPlayPacketListener): void;
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
 getSelectedSlot(): number;
}

//net.minecraft.world.level.storage.LevelStorage
class LevelStorage extends JObject{
 getBackupsDirectory(): Path;
 getSavesDirectory(): Path;
 getSymlinkFinder(): SymlinkFinder;
 getLevelList(): LevelStorage_LevelList;
 createSession(directoryName: string): LevelStorage_Session;
 isLevelNameValid(name: string): boolean;
 getFormatName(): string;
 levelExists(name: string): boolean;
 createSessionWithoutSymlinkCheck(directoryName: string): LevelStorage_Session;
 loadSummaries(levels: LevelStorage_LevelList): CompletableFuture;
}
class Static_LevelStorage {
static create(path: Path): LevelStorage;
static readDataPackSettings(path: Path,dataFixer: DataFixer): DataConfiguration;
static createLevelDataParser(ops: DynamicOps,dataConfiguration: DataConfiguration,dimensionOptionsRegistry: Registry,lifecycle: Lifecycle): BiFunction;
static method_45553(featureFlag: Dynamic): Stream;
static method_29582(dynamicOps: DynamicOps,dataConfiguration: DataConfiguration,registry: Registry,lifecycle: Lifecycle,path: Path,dataFixer: DataFixer): Pair;
static method_45551(id: Identifier): void;
static readGeneratorProperties(levelData: Dynamic,dataFixer: DataFixer,version: number): DataResult;
static createSymlinkFinder(allowedSymlinksFile: Path): SymlinkFinder;
static loadCompactLevelData(path: Path): NbtElement;
static parseDataPackSettings(dynamic: Dynamic): DataConfiguration;
static parseEnabledFeatures(levelData: Dynamic): FeatureSet;
static method_43419(levelSave: LevelStorage_LevelSave): boolean;
static method_43420(path: Path): boolean;
static method_43495(summaries: List): List;
static LOGGER: Logger;
static TIME_FORMATTER: DateTimeFormatter;
static GENERATOR_OPTION_KEYS: ImmutableList;
static DATA_KEY: string;
static DEFAULT_ALLOWED_SYMLINK_MATCHER: AllowedSymlinkPathMatcher;
static ALLOWED_SYMLINKS_FILE_NAME: string;
}

//net.minecraft.entity.ai.brain.task.FindPointOfInterestTask$RetryMarker
class FindPointOfInterestTask_RetryMarker extends JObject{
 toString(): string;
 setAttemptTime(time: long): void;
 isAttempting(time: long): boolean;
 shouldRetry(time: long): boolean;
}
class Static_FindPointOfInterestTask_RetryMarker {
static MIN_DELAY: number;
static MAX_EXTRA_DELAY: number;
static ATTEMPT_DURATION: number;
}

//net.minecraft.world.gen.feature.GeodeCrackConfig
class GeodeCrackConfig extends JObject{
 generateCrackChance: number;
 baseCrackSize: number;
 crackPointOffset: number;
}
class Static_GeodeCrackConfig {
static method_31894(instance: RecordCodecBuilder_Instance): App;
static method_31895(config: GeodeCrackConfig): Double;
static method_31896(config: GeodeCrackConfig): Double;
static method_31893(config: GeodeCrackConfig): Integer;
static CODEC: Codec;
}

//net.minecraft.network.packet.c2s.play.PlayerInteractEntityC2SPacket$Handler
interface PlayerInteractEntityC2SPacket_Handler extends JObject{
 interact(hand: Hand): void;
 attack(): void;
 interactAt(hand: Hand,pos: Vec3d): void;
}

//net.minecraft.command.argument.ColorArgumentType
class ColorArgumentType extends JObject, ArgumentType{
 parse(reader: StringReader): Object;
 parse(stringReader: StringReader): Formatting;
 getExamples(): Collection;
 listSuggestions(context: CommandContext,builder: SuggestionsBuilder): CompletableFuture;
}
class Static_ColorArgumentType {
static color(): ColorArgumentType;
static method_9278(color: Object): Message;
static getColor(context: CommandContext,name: string): Formatting;
static EXAMPLES: Collection;
static INVALID_COLOR_EXCEPTION: DynamicCommandExceptionType;
}

//net.minecraft.block.AbstractBlock$Offsetter
interface AbstractBlock_Offsetter extends JObject{
 evaluate(state: BlockState,world: BlockView,pos: BlockPos): Vec3d;
}

//net.minecraft.server.world.ChunkHolder$1


//net.minecraft.world.gen.chunk.AquiferSampler$FluidLevel
class AquiferSampler_FluidLevel extends JObject{
 getBlockState(y: number): BlockState;
}

//net.minecraft.client.gui.navigation.GuiNavigationPath
interface GuiNavigationPath extends JObject{
 component(): Element;
 setFocused(focused: boolean): void;
}
class Static_GuiNavigationPath {
static of(leaf: Element,elements: ParentElement[]): GuiNavigationPath;
static of(element: ParentElement,childPath: GuiNavigationPath): GuiNavigationPath;
static of(leaf: Element): GuiNavigationPath;
}

//net.minecraft.client.tutorial.OpenInventoryTutorialStepHandler
class OpenInventoryTutorialStepHandler extends JObject, TutorialStepHandler{
 destroy(): void;
 tick(): void;
 onInventoryOpened(): void;
}
class Static_OpenInventoryTutorialStepHandler {
static DELAY: number;
static TITLE: Text;
static DESCRIPTION: Text;
}

//net.minecraft.entity.ai.brain.task.TaskTriggerer$TaskContext$1


//net.minecraft.entity.ai.brain.task.TaskTriggerer$TaskContext$3


//net.minecraft.entity.ai.brain.task.TaskTriggerer$TaskContext$2


//net.minecraft.entity.ai.brain.task.TaskTriggerer$TaskContext$5


//net.minecraft.client.gl.ShaderProgramSetupView
interface ShaderProgramSetupView extends JObject{
 markUniformsDirty(): void;
 getGlRef(): number;
 getFragmentShader(): ShaderStage;
 getVertexShader(): ShaderStage;
 attachReferencedShaders(): void;
}

//net.minecraft.entity.ai.brain.task.TaskTriggerer$TaskContext$4


//net.minecraft.network.packet.s2c.play.WorldEventS2CPacket
class WorldEventS2CPacket extends JObject, Packet{
 apply(clientPlayPacketListener: ClientPlayPacketListener): void;
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
 getData(): number;
 isGlobal(): boolean;
 getEventId(): number;
 getPos(): BlockPos;
}

//net.minecraft.entity.ai.brain.task.AdmireItemTimeLimitTask
class AdmireItemTimeLimitTask extends JObject{
}
class Static_AdmireItemTimeLimitTask {
static create(cooldown: number,timeLimit: number): Task;
static method_47295(i: number,j: number,context: TaskTriggerer_TaskContext): App;
static method_47297(taskContext: TaskTriggerer_TaskContext,memoryQueryResult: MemoryQueryResult,i: number,memoryQueryResult2: MemoryQueryResult,memoryQueryResult3: MemoryQueryResult,j: number,world: ServerWorld,entity: LivingEntity,time: long): boolean;
static method_47296(taskContext: TaskTriggerer_TaskContext,i: number,j: number,admiringItem: MemoryQueryResult,nearestVisibleWantedItem: MemoryQueryResult,timeTryingToReachAdmireItem: MemoryQueryResult,disableWalkToAdmireItem: MemoryQueryResult): TaskRunnable;
}

//net.minecraft.command.argument.Vec3ArgumentType
class Vec3ArgumentType extends JObject, ArgumentType{
 parse(stringReader: StringReader): PosArgument;
 parse(reader: StringReader): Object;
 getExamples(): Collection;
 listSuggestions(context: CommandContext,builder: SuggestionsBuilder): CompletableFuture;
}
class Static_Vec3ArgumentType {
static vec3(centerIntegers: boolean): Vec3ArgumentType;
static vec3(): Vec3ArgumentType;
static getVec3(context: CommandContext,name: string): Vec3d;
static getPosArgument(context: CommandContext,name: string): PosArgument;
static EXAMPLES: Collection;
static INCOMPLETE_EXCEPTION: SimpleCommandExceptionType;
static MIXED_COORDINATE_EXCEPTION: SimpleCommandExceptionType;
}

//net.minecraft.world.gen.feature.PileConfiguredFeatures
class PileConfiguredFeatures extends JObject{
}
class Static_PileConfiguredFeatures {
static bootstrap(featureRegisterable: Registerable): void;
static PILE_HAY: RegistryKey;
static PILE_MELON: RegistryKey;
static PILE_SNOW: RegistryKey;
static PILE_ICE: RegistryKey;
static PILE_PUMPKIN: RegistryKey;
}

//net.minecraft.network.packet.Packet
interface Packet extends JObject{
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
 isWritingErrorSkippable(): boolean;
}

//net.minecraft.world.BlockLocating$IntBounds
class BlockLocating_IntBounds extends JObject{
 toString(): string;
 min: number;
 max: number;
}

//net.minecraft.network.encryption.NetworkEncryptionUtils$SecureRandomUtil
class NetworkEncryptionUtils_SecureRandomUtil extends JObject{
}
class Static_NetworkEncryptionUtils_SecureRandomUtil {
static nextLong(): long;
static SECURE_RANDOM: SecureRandom;
}

//net.minecraft.util.profiler.ProfileResultImpl$CounterInfo
class ProfileResultImpl_CounterInfo extends JObject{
 add(pathIterator: Iterator,time: long): void;
}
class Static_ProfileResultImpl_CounterInfo {
static method_24266(k: string): ProfileResultImpl_CounterInfo;
}

//net.minecraft.util.profiler.DebugRecorder
class DebugRecorder extends JObject, Recorder{
 stop(): void;
 isActive(): boolean;
 forceStop(): void;
 getProfiler(): Profiler;
 endTick(): void;
 startTick(): void;
}
class Static_DebugRecorder {
static of(source: SamplerSource,timeGetter: LongSupplier,dumpExecutor: Executor,dumper: RecordDumper,resultConsumer: Consumer,dumpConsumer: Consumer): DebugRecorder;
static method_37190(s: Sampler): List;
static setGlobalDumpConsumer(consumer: Consumer): void;
static MAX_DURATION_IN_SECONDS: number;
static globalDumpConsumer: Consumer;
}

//net.minecraft.registry.entry.RegistryEntryListCodec
class RegistryEntryListCodec extends JObject, Codec{
 decode(ops: DynamicOps,input: Object): DataResult;
 encode(entryList: Object,ops: DynamicOps,prefix: Object): DataResult;
 encode(registryEntryList: RegistryEntryList,dynamicOps: DynamicOps,object: Object): DataResult;
}
class Static_RegistryEntryListCodec {
static create(registryRef: RegistryKey,entryCodec: Codec,alwaysSerializeAsList: boolean): Codec;
static method_40380(either: Either): List;
static method_49403(registryEntry: RegistryEntry): string;
static method_49404(registryEntryList: RegistryEntryList): string;
static method_40387(entries: List): Either;
static method_40390(entries: List): List;
static method_40386(registryEntryLookup: RegistryEntryLookup,pair: Pair): Pair;
static method_40381(pair: Pair): DataResult;
static method_40385(registryEntryLookup: RegistryEntryLookup,either: Either): RegistryEntryList;
static createDirectEntryListCodec(entryCodec: Codec,alwaysSerializeAsList: boolean): Codec;
}

//net.minecraft.entity.vehicle.ChestBoatEntity$1


//net.minecraft.client.texture.NativeImage
class NativeImage extends JObject, AutoCloseable{
 toString(): string;
 blend(x: number,y: number,color: number): void;
 getBytes(): byte[];
 apply(operator: IntUnaryOperator): void;
 close(): void;
 copyFrom(image: NativeImage): void;
 writeTo(path: Path): void;
 writeTo(path: File): void;
 setColor(x: number,y: number,color: number): void;
 getFormat(): NativeImage_Format;
 getWidth(): number;
 getHeight(): number;
 upload(level: number,offsetX: number,offsetY: number,close: boolean): void;
 upload(level: number,offsetX: number,offsetY: number,unpackSkipPixels: number,unpackSkipRows: number,width: number,height: number,mipmap: boolean,close: boolean): void;
 upload(level: number,offsetX: number,offsetY: number,unpackSkipPixels: number,unpackSkipRows: number,width: number,height: number,blur: boolean,clamp: boolean,mipmap: boolean,close: boolean): void;
 setLuminance(x: number,y: number,luminance: byte): void;
 makePixelArray(): number[];
 applyToCopy(operator: IntUnaryOperator): NativeImage;
 fillRect(x: number,y: number,width: number,height: number,color: number): void;
 readDepthComponent(unused: number): void;
 drawPixels(): void;
 mirrorVertically(): void;
 copyRect(image: NativeImage,x: number,y: number,destX: number,destY: number,width: number,height: number,flipX: boolean,flipY: boolean): void;
 copyRect(x: number,y: number,translateX: number,translateY: number,width: number,height: number,flipX: boolean,flipY: boolean): void;
 getOpacity(x: number,y: number): byte;
 getBlue(x: number,y: number): byte;
 getGreen(x: number,y: number): byte;
 getRed(x: number,y: number): byte;
 resizeSubRectTo(x: number,y: number,width: number,height: number,targetImage: NativeImage): void;
 untrack(): void;
 getColor(x: number,y: number): number;
 copyPixelsRgba(): number[];
 loadFromTextureImage(level: number,removeAlpha: boolean): void;
 makeGlyphBitmapSubpixel(fontInfo: STBTTFontinfo,glyphIndex: number,width: number,height: number,scaleX: number,scaleY: number,shiftX: number,shiftY: number,startX: number,startY: number): void;
}
class Static_NativeImage {
static read(stream: InputStream): NativeImage;
static read(format: NativeImage_Format,stream: InputStream): NativeImage;
static read(buffer: ByteBuffer): NativeImage;
static read(format: NativeImage_Format,buffer: ByteBuffer): NativeImage;
static read(bytes: byte[]): NativeImage;
static setTextureFilter(blur: boolean,mipmap: boolean): void;
static LOGGER: Logger;
static WRITE_TO_FILE_OPEN_OPTIONS: Set;
}

//net.minecraft.client.gui.hud.spectator.SpectatorMenuCommandGroup
interface SpectatorMenuCommandGroup extends JObject{
 getPrompt(): Text;
 getCommands(): List;
}

//net.minecraft.world.LunarWorldView
interface LunarWorldView extends JObject, WorldView{
 getLunarTime(): long;
 getMoonSize(): number;
 getMoonPhase(): number;
 getSkyAngle(tickDelta: number): number;
}

//net.minecraft.world.WorldEvents
class WorldEvents extends JObject{
}
class Static_WorldEvents {
static DISPENSER_DISPENSES: number;
static DISPENSER_FAILS: number;
static DISPENSER_LAUNCHES_PROJECTILE: number;
static EYE_OF_ENDER_LAUNCHES: number;
static FIREWORK_ROCKET_SHOOTS: number;
static FIRE_EXTINGUISHED: number;
static JUKEBOX_STARTS_PLAYING: number;
static JUKEBOX_STOPS_PLAYING: number;
static GHAST_WARNS: number;
static GHAST_SHOOTS: number;
static ENDER_DRAGON_SHOOTS: number;
static BLAZE_SHOOTS: number;
static ZOMBIE_ATTACKS_WOODEN_DOOR: number;
static ZOMBIE_ATTACKS_IRON_DOOR: number;
static ZOMBIE_BREAKS_WOODEN_DOOR: number;
static WITHER_BREAKS_BLOCK: number;
static WITHER_SPAWNS: number;
static WITHER_SHOOTS: number;
static BAT_TAKES_OFF: number;
static ZOMBIE_INFECTS_VILLAGER: number;
static ZOMBIE_VILLAGER_CURED: number;
static ENDER_DRAGON_DIES: number;
static ANVIL_DESTROYED: number;
static ANVIL_USED: number;
static ANVIL_LANDS: number;
static TRAVEL_THROUGH_PORTAL: number;
static CHORUS_FLOWER_GROWS: number;
static CHORUS_FLOWER_DIES: number;
static BREWING_STAND_BREWS: number;
static END_PORTAL_OPENED: number;
static PHANTOM_BITES: number;
static ZOMBIE_CONVERTS_TO_DROWNED: number;
static HUSK_CONVERTS_TO_ZOMBIE: number;
static GRINDSTONE_USED: number;
static LECTERN_BOOK_PAGE_TURNED: number;
static SMITHING_TABLE_USED: number;
static POINTED_DRIPSTONE_LANDS: number;
static POINTED_DRIPSTONE_DRIPS_LAVA_INTO_CAULDRON: number;
static POINTED_DRIPSTONE_DRIPS_WATER_INTO_CAULDRON: number;
static SKELETON_CONVERTS_TO_STRAY: number;
static COMPOSTER_USED: number;
static LAVA_EXTINGUISHED: number;
static REDSTONE_TORCH_BURNS_OUT: number;
static END_PORTAL_FRAME_FILLED: number;
static POINTED_DRIPSTONE_DRIPS: number;
static BONE_MEAL_USED: number;
static DISPENSER_ACTIVATED: number;
static BLOCK_BROKEN: number;
static SPLASH_POTION_SPLASHED: number;
static EYE_OF_ENDER_BREAKS: number;
static SPAWNER_SPAWNS_MOB: number;
static PLANT_FERTILIZED: number;
static DRAGON_BREATH_CLOUD_SPAWNS: number;
static INSTANT_SPLASH_POTION_SPLASHED: number;
static ENDER_DRAGON_BREAKS_BLOCK: number;
static WET_SPONGE_DRIES_OUT: number;
static END_GATEWAY_SPAWNS: number;
static ENDER_DRAGON_RESURRECTED: number;
static ELECTRICITY_SPARKS: number;
static BLOCK_WAXED: number;
static WAX_REMOVED: number;
static BLOCK_SCRAPED: number;
static SCULK_CHARGE: number;
static SCULK_SHRIEKS: number;
static BLOCK_FINISHED_BRUSHING: number;
static SNIFFER_EGG_CRACKS: number;
}

//net.minecraft.world.gen.blockpredicate.AlwaysTrueBlockPredicate
class AlwaysTrueBlockPredicate extends JObject, BlockPredicate{
 test(world: Object,pos: Object): boolean;
 test(structureWorldAccess: StructureWorldAccess,blockPos: BlockPos): boolean;
 getType(): BlockPredicateType;
}
class Static_AlwaysTrueBlockPredicate {
static method_39016(): AlwaysTrueBlockPredicate;
static instance: AlwaysTrueBlockPredicate;
static CODEC: Codec;
}

//net.minecraft.client.texture.TextureStitcher
class TextureStitcher extends JObject{
 add(info: TextureStitcher_Stitchable): void;
 getWidth(): number;
 getHeight(): number;
 stitch(): void;
 getStitchedSprites(consumer: TextureStitcher_SpriteConsumer): void;
}
class Static_TextureStitcher {
static method_21686(holder: TextureStitcher_Holder): TextureStitcher_Stitchable;
static applyMipLevel(size: number,mipLevel: number): number;
static method_18337(holder: TextureStitcher_Holder): Identifier;
static method_18339(holder: TextureStitcher_Holder): Integer;
static method_18338(holder: TextureStitcher_Holder): Integer;
static COMPARATOR: Comparator;
}

//net.minecraft.predicate.entity.TypeSpecificPredicate$1


//net.minecraft.entity.ai.brain.LookTarget
interface LookTarget extends JObject{
 isSeenBy(entity: LivingEntity): boolean;
 getBlockPos(): BlockPos;
 getPos(): Vec3d;
}

//net.minecraft.client.particle.DamageParticle$Factory
class DamageParticle_Factory extends JObject, ParticleFactory{
 createParticle(defaultParticleType: DefaultParticleType,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
 createParticle(particleEffect: ParticleEffect,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
}

//net.minecraft.entity.Mount
interface Mount extends JObject{
}

//net.minecraft.predicate.entity.PlayerPredicate$AdvancementCriteriaPredicate
class PlayerPredicate_AdvancementCriteriaPredicate extends JObject, PlayerPredicate_AdvancementPredicate{
 test(progress: Object): boolean;
 test(advancementProgress: AdvancementProgress): boolean;
 toJson(): JsonElement;
}

//net.minecraft.util.profiler.Sampler$DeviationChecker
interface Sampler_DeviationChecker extends JObject{
 check(value: number): boolean;
}

//net.minecraft.loot.function.SetAttributesLootFunction$Attribute
class SetAttributesLootFunction_Attribute extends JObject{
 serialize(context: JsonSerializationContext): JsonObject;
}
class Static_SetAttributesLootFunction_Attribute {
static getName(operation: EntityAttributeModifier_Operation): string;
static deserialize(json: JsonObject,context: JsonDeserializationContext): SetAttributesLootFunction_Attribute;
static fromName(name: string): EntityAttributeModifier_Operation;
}

//net.minecraft.entity.ai.brain.task.WantNewItemTask
class WantNewItemTask extends JObject{
}
class Static_WantNewItemTask {
static create(range: number): Task;
static method_47292(taskContext: TaskTriggerer_TaskContext,i: number,admiringItem: MemoryQueryResult,nearestVisibleWantedItem: MemoryQueryResult): TaskRunnable;
static method_47293(taskContext: TaskTriggerer_TaskContext,memoryQueryResult: MemoryQueryResult,i: number,memoryQueryResult2: MemoryQueryResult,world: ServerWorld,entity: LivingEntity,time: long): boolean;
static method_47291(i: number,context: TaskTriggerer_TaskContext): App;
}

//net.minecraft.client.font.FontStorage
class FontStorage extends JObject, AutoCloseable{
 close(): void;
 getGlyph(codePoint: number,validateAdvance: boolean): Glyph;
 setFonts(fonts: List): void;
 getGlyphRenderer(codePoint: number): GlyphRenderer;
 getObfuscatedGlyphRenderer(glyph: Glyph): GlyphRenderer;
 getRectangleRenderer(): GlyphRenderer;
}
class Static_FontStorage {
static method_51639(i: number): GlyphRenderer[];
static method_51638(rowCount: number): GlyphRenderer[][];
static method_51637(i: number): FontStorage_GlyphPair;
static method_51636(rowCount: number): FontStorage_GlyphPair;
static isAdvanceInvalid(glyph: Glyph): boolean;
static method_27546(advance: number): IntList;
static RANDOM: Random;
static MAX_ADVANCE: number;
}

//net.minecraft.server.world.ChunkHolder$MultithreadAction
class ChunkHolder_MultithreadAction extends JObject{
}

//net.minecraft.client.particle.GlowParticle$GlowFactory
class GlowParticle_GlowFactory extends JObject, ParticleFactory{
 createParticle(defaultParticleType: DefaultParticleType,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
 createParticle(particleEffect: ParticleEffect,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
}

//net.minecraft.predicate.BlockPredicate
class BlockPredicate extends JObject{
 test(world: ServerWorld,pos: BlockPos): boolean;
 toJson(): JsonElement;
}
class Static_BlockPredicate {
static method_33185(id: Identifier): JsonSyntaxException;
static fromJson(json: JsonElement): BlockPredicate;
static ANY: BlockPredicate;
}

//net.minecraft.util.TickDurationMonitor
class TickDurationMonitor extends JObject{
 nextProfiler(): Profiler;
 endTick(): void;
}
class Static_TickDurationMonitor {
static create(name: string): TickDurationMonitor;
static tickProfiler(profiler: Profiler,monitor: TickDurationMonitor): Profiler;
static LOGGER: Logger;
}

//net.minecraft.client.report.AbuseReportSender$1


//net.minecraft.server.chase.ChaseServer
class ChaseServer extends JObject{
 start(): void;
 stop(): void;
}
class Static_ChaseServer {
static method_38765(socket: Socket,bs: byte[]): void;
static LOGGER: Logger;
}

//net.minecraft.block.DoubleBlockProperties$PropertySource
interface DoubleBlockProperties_PropertySource extends JObject{
 apply(retriever: DoubleBlockProperties_PropertyRetriever): Object;
}

//net.minecraft.client.gui.hud.spectator.SpectatorMenuState
class SpectatorMenuState extends JObject{
 getCommand(slot: number): SpectatorMenuCommand;
 getSelectedSlot(): number;
}
class Static_SpectatorMenuState {
static field_32444: number;
}

//net.minecraft.entity.ai.brain.sensor.SensorType
class SensorType extends JObject{
 create(): Sensor;
}
class Static_SensorType {
static register(id: string,factory: Supplier): SensorType;
static method_35153(): TemptationsSensor;
static method_33212(): TemptationsSensor;
static method_41351(): TemptationsSensor;
static method_51153(): TemptationsSensor;
static method_45338(): TemptationsSensor;
static DUMMY: SensorType;
static NEAREST_ITEMS: SensorType;
static NEAREST_LIVING_ENTITIES: SensorType;
static NEAREST_PLAYERS: SensorType;
static NEAREST_BED: SensorType;
static HURT_BY: SensorType;
static VILLAGER_HOSTILES: SensorType;
static VILLAGER_BABIES: SensorType;
static SECONDARY_POIS: SensorType;
static GOLEM_DETECTED: SensorType;
static PIGLIN_SPECIFIC_SENSOR: SensorType;
static PIGLIN_BRUTE_SPECIFIC_SENSOR: SensorType;
static HOGLIN_SPECIFIC_SENSOR: SensorType;
static NEAREST_ADULT: SensorType;
static AXOLOTL_ATTACKABLES: SensorType;
static AXOLOTL_TEMPTATIONS: SensorType;
static GOAT_TEMPTATIONS: SensorType;
static FROG_TEMPTATIONS: SensorType;
static CAMEL_TEMPTATIONS: SensorType;
static FROG_ATTACKABLES: SensorType;
static IS_IN_WATER: SensorType;
static WARDEN_ENTITY_SENSOR: SensorType;
static SNIFFER_TEMPTATIONS: SensorType;
}

//net.minecraft.entity.decoration.painting.PaintingVariant
class PaintingVariant extends JObject{
 getWidth(): number;
 getHeight(): number;
}

//net.minecraft.client.resource.ResourceIndex
class ResourceIndex extends JObject{
}
class Static_ResourceIndex {
static buildFileSystem(assetsDir: Path,indexName: string): Path;
static LOGGER: Logger;
static SEPARATOR_SPLITTER: Splitter;
}

//net.minecraft.nbt.NbtOps$IntArrayMerger
class NbtOps_IntArrayMerger extends JObject, NbtOps_Merger{
 merge(nbt: NbtElement): NbtOps_Merger;
 getResult(): NbtElement;
}

//net.minecraft.network.listener.ClientPlayPacketListener
interface ClientPlayPacketListener extends JObject, PacketListener{
 onCooldownUpdate(packet: CooldownUpdateS2CPacket): void;
 onUnlockRecipes(packet: UnlockRecipesS2CPacket): void;
 onUpdateSelectedSlot(packet: UpdateSelectedSlotS2CPacket): void;
 onChunkRenderDistanceCenter(packet: ChunkRenderDistanceCenterS2CPacket): void;
 onBossBar(packet: BossBarS2CPacket): void;
 onGameJoin(packet: GameJoinS2CPacket): void;
 onEntitySpawn(packet: EntitySpawnS2CPacket): void;
 onPlayerSpawn(packet: PlayerSpawnS2CPacket): void;
 onEntitySetHeadYaw(packet: EntitySetHeadYawS2CPacket): void;
 onEntityPosition(packet: EntityPositionS2CPacket): void;
 onEntitiesDestroy(packet: EntitiesDestroyS2CPacket): void;
 onEntity(packet: EntityS2CPacket): void;
 onChunkBiomeData(packet: ChunkBiomeDataS2CPacket): void;
 onChunkDeltaUpdate(packet: ChunkDeltaUpdateS2CPacket): void;
 onChunkData(packet: ChunkDataS2CPacket): void;
 onUnloadChunk(packet: UnloadChunkS2CPacket): void;
 onBlockUpdate(packet: BlockUpdateS2CPacket): void;
 onGameMessage(packet: GameMessageS2CPacket): void;
 onRemoveMessage(packet: RemoveMessageS2CPacket): void;
 onDamageTilt(packet: DamageTiltS2CPacket): void;
 onWorldTimeUpdate(packet: WorldTimeUpdateS2CPacket): void;
 onEntityAnimation(packet: EntityAnimationS2CPacket): void;
 onHealthUpdate(packet: HealthUpdateS2CPacket): void;
 onEntityAttach(packet: EntityAttachS2CPacket): void;
 onEntityDamage(packet: EntityDamageS2CPacket): void;
 onEntityStatus(packet: EntityStatusS2CPacket): void;
 onPlayerRespawn(packet: PlayerRespawnS2CPacket): void;
 onExplosion(packet: ExplosionS2CPacket): void;
 onOpenHorseScreen(packet: OpenHorseScreenS2CPacket): void;
 onOpenScreen(packet: OpenScreenS2CPacket): void;
 onSignEditorOpen(packet: SignEditorOpenS2CPacket): void;
 onInventory(packet: InventoryS2CPacket): void;
 onCloseScreen(packet: CloseScreenS2CPacket): void;
 onGameStateChange(packet: GameStateChangeS2CPacket): void;
 onBlockEvent(packet: BlockEventS2CPacket): void;
 onWorldEvent(packet: WorldEventS2CPacket): void;
 onStopSound(packet: StopSoundS2CPacket): void;
 onMapUpdate(packet: MapUpdateS2CPacket): void;
 onAdvancements(packet: AdvancementUpdateS2CPacket): void;
 onCommandTree(packet: CommandTreeS2CPacket): void;
 onLookAt(packet: LookAtS2CPacket): void;
 onNbtQueryResponse(packet: NbtQueryResponseS2CPacket): void;
 onStatistics(packet: StatisticsS2CPacket): void;
 onEndCombat(packet: EndCombatS2CPacket): void;
 onSynchronizeTags(packet: SynchronizeTagsS2CPacket): void;
 onFeatures(packet: FeaturesS2CPacket): void;
 onTitleClear(packet: ClearTitleS2CPacket): void;
 onServerMetadata(packet: ServerMetadataS2CPacket): void;
 onDeathMessage(packet: DeathMessageS2CPacket): void;
 onDifficulty(packet: DifficultyS2CPacket): void;
 onOverlayMessage(packet: OverlayMessageS2CPacket): void;
 onPlayerListHeader(packet: PlayerListHeaderS2CPacket): void;
 onPlayerRemove(packet: PlayerRemoveS2CPacket): void;
 onTitle(packet: TitleS2CPacket): void;
 onChatSuggestions(packet: ChatSuggestionsS2CPacket): void;
 onPlayerAbilities(packet: PlayerAbilitiesS2CPacket): void;
 onPlaySound(packet: PlaySoundS2CPacket): void;
 onResourcePackSend(packet: ResourcePackSendS2CPacket): void;
 onOpenWrittenBook(packet: OpenWrittenBookS2CPacket): void;
 onTeam(packet: TeamS2CPacket): void;
 onParticle(packet: ParticleS2CPacket): void;
 onEntityAttributes(packet: EntityAttributesS2CPacket): void;
 onSetTradeOffers(packet: SetTradeOffersS2CPacket): void;
 onLightUpdate(packet: LightUpdateS2CPacket): void;
 onBundle(packet: BundleS2CPacket): void;
 onBlockEntityUpdate(packet: BlockEntityUpdateS2CPacket): void;
 onKeepAlive(packet: KeepAliveS2CPacket): void;
 onEnterCombat(packet: EnterCombatS2CPacket): void;
 onVehicleMove(packet: VehicleMoveS2CPacket): void;
 onDisconnect(packet: DisconnectS2CPacket): void;
 onChatMessage(packet: ChatMessageS2CPacket): void;
 onSubtitle(packet: SubtitleS2CPacket): void;
 onPing(packet: PlayPingS2CPacket): void;
 onCustomPayload(packet: CustomPayloadS2CPacket): void;
 onPlayerSpawnPosition(packet: PlayerSpawnPositionS2CPacket): void;
 onScreenHandlerPropertyUpdate(packet: ScreenHandlerPropertyUpdateS2CPacket): void;
 onEntityEquipmentUpdate(packet: EntityEquipmentUpdateS2CPacket): void;
 onBlockBreakingProgress(packet: BlockBreakingProgressS2CPacket): void;
 onScreenHandlerSlotUpdate(packet: ScreenHandlerSlotUpdateS2CPacket): void;
 onEntityVelocityUpdate(packet: EntityVelocityUpdateS2CPacket): void;
 onPlayerPositionLook(packet: PlayerPositionLookS2CPacket): void;
 onProfilelessChatMessage(packet: ProfilelessChatMessageS2CPacket): void;
 onEntityTrackerUpdate(packet: EntityTrackerUpdateS2CPacket): void;
 onExperienceBarUpdate(packet: ExperienceBarUpdateS2CPacket): void;
 onExperienceOrbSpawn(packet: ExperienceOrbSpawnS2CPacket): void;
 onEntityPassengersSet(packet: EntityPassengersSetS2CPacket): void;
 onItemPickupAnimation(packet: ItemPickupAnimationS2CPacket): void;
 onWorldBorderCenterChanged(packet: WorldBorderCenterChangedS2CPacket): void;
 onCommandSuggestions(packet: CommandSuggestionsS2CPacket): void;
 onEntityStatusEffect(packet: EntityStatusEffectS2CPacket): void;
 onSynchronizeRecipes(packet: SynchronizeRecipesS2CPacket): void;
 onWorldBorderWarningTimeChanged(packet: WorldBorderWarningTimeChangedS2CPacket): void;
 onRemoveEntityStatusEffect(packet: RemoveEntityStatusEffectS2CPacket): void;
 onWorldBorderSizeChanged(packet: WorldBorderSizeChangedS2CPacket): void;
 onWorldBorderInterpolateSize(packet: WorldBorderInterpolateSizeS2CPacket): void;
 onPlaySoundFromEntity(packet: PlaySoundFromEntityS2CPacket): void;
 onWorldBorderInitialize(packet: WorldBorderInitializeS2CPacket): void;
 onWorldBorderWarningBlocksChanged(packet: WorldBorderWarningBlocksChangedS2CPacket): void;
 onSelectAdvancementTab(packet: SelectAdvancementTabS2CPacket): void;
 onChunkLoadDistance(packet: ChunkLoadDistanceS2CPacket): void;
 onCraftFailedResponse(packet: CraftFailedResponseS2CPacket): void;
 onSimulationDistance(packet: SimulationDistanceS2CPacket): void;
 onScoreboardPlayerUpdate(packet: ScoreboardPlayerUpdateS2CPacket): void;
 onScoreboardObjectiveUpdate(packet: ScoreboardObjectiveUpdateS2CPacket): void;
 onScoreboardDisplay(packet: ScoreboardDisplayS2CPacket): void;
 onPlayerActionResponse(packet: PlayerActionResponseS2CPacket): void;
 onSetCameraEntity(packet: SetCameraEntityS2CPacket): void;
 onTitleFade(packet: TitleFadeS2CPacket): void;
 onPlayerList(packet: PlayerListS2CPacket): void;
}

//net.minecraft.structure.OceanMonumentGenerator$DoubleXYRoomFactory
class OceanMonumentGenerator_DoubleXYRoomFactory extends JObject, OceanMonumentGenerator_PieceFactory{
 generate(direction: Direction,setting: OceanMonumentGenerator_PieceSetting,random: Random): OceanMonumentGenerator_Piece;
 canGenerate(setting: OceanMonumentGenerator_PieceSetting): boolean;
}

//net.minecraft.command.argument.serialize.IntegerArgumentSerializer
class IntegerArgumentSerializer extends JObject, ArgumentSerializer{
 getArgumentTypeProperties(argumentType: ArgumentType): ArgumentSerializer_ArgumentTypeProperties;
 getArgumentTypeProperties(integerArgumentType: IntegerArgumentType): IntegerArgumentSerializer_Properties;
 fromPacket(buf: PacketByteBuf): ArgumentSerializer_ArgumentTypeProperties;
 fromPacket(packetByteBuf: PacketByteBuf): IntegerArgumentSerializer_Properties;
 writePacket(properties: ArgumentSerializer_ArgumentTypeProperties,buf: PacketByteBuf): void;
 writePacket(properties: IntegerArgumentSerializer_Properties,packetByteBuf: PacketByteBuf): void;
 writeJson(properties: IntegerArgumentSerializer_Properties,jsonObject: JsonObject): void;
 writeJson(properties: ArgumentSerializer_ArgumentTypeProperties,json: JsonObject): void;
}

//net.minecraft.recipe.RecipeMatcher
class RecipeMatcher extends JObject{
 clear(): void;
 match(recipe: Recipe,output: IntList): boolean;
 match(recipe: Recipe,output: IntList,multiplier: number): boolean;
 addInput(stack: ItemStack): void;
 addInput(stack: ItemStack,maxCount: number): void;
 addUnenchantedInput(stack: ItemStack): void;
 countCrafts(recipe: Recipe,limit: number,output: IntList): number;
 countCrafts(recipe: Recipe,output: IntList): number;
 inputs: Int2IntMap;
}
class Static_RecipeMatcher {
static getItemId(stack: ItemStack): number;
static getStackFromId(itemId: number): ItemStack;
static field_30653: number;
}

//net.minecraft.client.render.VertexFormatElement
class VertexFormatElement extends JObject{
 equals(o: Object): boolean;
 toString(): string;
 hashCode(): number;
 getComponentType(): VertexFormatElement_ComponentType;
 getType(): VertexFormatElement_Type;
 getUvIndex(): number;
 isPosition(): boolean;
 getComponentCount(): number;
 getByteLength(): number;
 setupState(elementIndex: number,offset: long,stride: number): void;
 clearState(elementIndex: number): void;
}

//net.minecraft.util.math.PositionImpl
class PositionImpl extends JObject, Position{
 getX(): number;
 getY(): number;
 getZ(): number;
}

//net.minecraft.nbt.NbtOps$LongArrayMerger
class NbtOps_LongArrayMerger extends JObject, NbtOps_Merger{
 merge(nbt: NbtElement): NbtOps_Merger;
 getResult(): NbtElement;
}

//net.minecraft.client.font.BlankFont
class BlankFont extends JObject, Font{
 getGlyph(codePoint: number): Glyph;
 getProvidedGlyphs(): IntSet;
}

//net.minecraft.predicate.entity.EntityFlagsPredicate$Builder
class EntityFlagsPredicate_Builder extends JObject{
 build(): EntityFlagsPredicate;
 sneaking(sneaking: Boolean): EntityFlagsPredicate_Builder;
 onFire(onFire: Boolean): EntityFlagsPredicate_Builder;
 sprinting(sprinting: Boolean): EntityFlagsPredicate_Builder;
 swimming(swimming: Boolean): EntityFlagsPredicate_Builder;
 isBaby(isBaby: Boolean): EntityFlagsPredicate_Builder;
}
class Static_EntityFlagsPredicate_Builder {
static create(): EntityFlagsPredicate_Builder;
}

//net.minecraft.client.gui.widget.CyclingButtonWidget$UpdateCallback
interface CyclingButtonWidget_UpdateCallback extends JObject{
 onValueChange(button: CyclingButtonWidget,value: Object): void;
}

//net.minecraft.datafixer.fix.ChunkPalettedStorageFix$Section
class ChunkPalettedStorageFix_Section extends JObject{
 transform(): Dynamic;
 visit(sidesToUpgrade: number): number;
 setBlock(pos: number,dynamic: Dynamic): void;
 getBlock(index: number): Dynamic;
 y: number;
}
class Static_ChunkPalettedStorageFix_Section {
static method_15646(byteBuffer: ByteBuffer): ChunkPalettedStorageFix_ChunkNibbleArray;
static method_15654(byteBuffer: ByteBuffer): ChunkPalettedStorageFix_ChunkNibbleArray;
}

//net.minecraft.world.event.Vibrations
interface Vibrations extends JObject{
 getVibrationListenerData(): Vibrations_ListenerData;
 getVibrationCallback(): Vibrations_Callback;
}
class Static_Vibrations {
static getSignalStrength(distance: number,range: number): number;
static method_51383(frequencies: Object2IntOpenHashMap): void;
static getResonation(frequency: number): GameEvent;
static getFrequency(event: GameEvent): number;
static RESONATIONS: GameEvent[];
static FREQUENCIES: ToIntFunction;
}

//net.minecraft.util.profiling.jfr.event.PacketEvent$Names
class PacketEvent_Names extends JObject{
}
class Static_PacketEvent_Names {
static REMOTE_ADDRESS: string;
static PROTOCOL_ID: string;
static PACKET_ID: string;
static BYTES: string;
}

//net.minecraft.client.gui.screen.narration.ScreenNarrator$PartIndex
class ScreenNarrator_PartIndex extends JObject{
}

//net.minecraft.client.realms.gui.screen.RealmsConfigureWorldScreen$1


//net.minecraft.world.gen.surfacebuilder.MaterialRules$MaterialRuleContext$SurfacePredicate
class MaterialRules_MaterialRuleContext_SurfacePredicate extends JObject, MaterialRules_BooleanSupplier{
 get(): boolean;
}

//net.minecraft.structure.StructureTemplateManager
class StructureTemplateManager extends JObject{
 getTemplateOrBlank(id: Identifier): StructureTemplate;
 setResourceManager(resourceManager: ResourceManager): void;
 unloadTemplate(id: Identifier): void;
 saveTemplate(id: Identifier): boolean;
 createTemplate(nbt: NbtCompound): StructureTemplate;
 streamTemplates(): Stream;
 getTemplatePath(id: Identifier,extension: string): Path;
 getTemplate(id: Identifier): Optional;
}
class Static_StructureTemplateManager {
static method_44244(path: Path): InputStream;
static method_44227(i: number,filename: string): string;
static method_44233(string: string,path: Path): boolean;
static method_44242(path: Path): boolean;
static method_44229(identifier: Identifier,throwable: Throwable): void;
static method_44232(provider: StructureTemplateManager_Provider): Stream;
static method_44237(path: Path,throwable: Throwable): void;
static getTemplatePath(path: Path,id: Identifier,extension: string): Path;
static getAndCheckTemplatePath(path: Path,id: Identifier,extension: string): Path;
static LOGGER: Logger;
static STRUCTURES_DIRECTORY: string;
static GAME_TEST_STRUCTURES_DIRECTORY: string;
static NBT_FILE_EXTENSION: string;
static SNBT_FILE_EXTENSION: string;
static NBT_FINDER: ResourceFinder;
}

//net.minecraft.class_6567
class class_6567 extends JObject{
}
class Static_class_6567 {
static field_34584: number;
static field_34585: number;
static field_34586: number;
}

//net.minecraft.command.argument.NbtPathArgumentType$NamedNode
class NbtPathArgumentType_NamedNode extends JObject, NbtPathArgumentType_PathNode{
 get(current: NbtElement,results: List): void;
 clear(current: NbtElement): number;
 set(current: NbtElement,source: Supplier): number;
 init(): NbtElement;
 getOrInit(current: NbtElement,source: Supplier,results: List): void;
}

//net.minecraft.client.gui.screen.world.CreateWorldScreen$WorldTab$2


//net.minecraft.resource.featuretoggle.FeatureManager$Builder
class FeatureManager_Builder extends JObject{
 build(): FeatureManager;
 addFlag(feature: Identifier): FeatureFlag;
 addVanillaFlag(feature: string): FeatureFlag;
}

//net.minecraft.client.realms.util.PeriodicRunnerFactory$RunnersManager
class PeriodicRunnerFactory_RunnersManager extends JObject{
 add(runner: PeriodicRunnerFactory_PeriodicRunner,resultListener: Consumer): void;
 forceRunListeners(): void;
 runAll(): void;
 resetAll(): void;
}

//net.minecraft.util.StringIdentifiable$1


//net.minecraft.network.packet.s2c.play.NbtQueryResponseS2CPacket
class NbtQueryResponseS2CPacket extends JObject, Packet{
 apply(clientPlayPacketListener: ClientPlayPacketListener): void;
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
 isWritingErrorSkippable(): boolean;
 getTransactionId(): number;
 getNbt(): NbtCompound;
}

//net.minecraft.client.color.block.BlockColors
class BlockColors extends JObject{
 getProperties(block: Block): Set;
 getColor(state: BlockState,world: BlockRenderView,pos: BlockPos,tintIndex: number): number;
 registerColorProvider(provider: BlockColorProvider,blocks: Block[]): void;
 getParticleColor(state: BlockState,world: World,pos: BlockPos): number;
}
class Static_BlockColors {
static create(): BlockColors;
static method_1685(state: BlockState,world: BlockRenderView,pos: BlockPos,tintIndex: number): number;
static method_49295(state: BlockState,world: BlockRenderView,pos: BlockPos,tintIndex: number): number;
static method_1688(state: BlockState,world: BlockRenderView,pos: BlockPos,tintIndex: number): number;
static method_1695(state: BlockState,world: BlockRenderView,pos: BlockPos,tintIndex: number): number;
static method_1696(state: BlockState,world: BlockRenderView,pos: BlockPos,tintIndex: number): number;
static method_1684(state: BlockState,world: BlockRenderView,pos: BlockPos,tintIndex: number): number;
static method_1686(state: BlockState,world: BlockRenderView,pos: BlockPos,tintIndex: number): number;
static method_1698(state: BlockState,world: BlockRenderView,pos: BlockPos,tintIndex: number): number;
static method_1687(state: BlockState,world: BlockRenderView,pos: BlockPos,tintIndex: number): number;
static method_1694(state: BlockState,world: BlockRenderView,pos: BlockPos,tintIndex: number): number;
static method_1693(state: BlockState,world: BlockRenderView,pos: BlockPos,tintIndex: number): number;
static method_1692(state: BlockState,world: BlockRenderView,pos: BlockPos,tintIndex: number): number;
static NO_COLOR: number;
}

//net.minecraft.client.render.block.entity.DecoratedPotBlockEntityRenderer
class DecoratedPotBlockEntityRenderer extends JObject, BlockEntityRenderer{
 render(decoratedPotBlockEntity: DecoratedPotBlockEntity,f: number,matrixStack: MatrixStack,vertexConsumerProvider: VertexConsumerProvider,i: number,j: number): void;
 render(entity: BlockEntity,tickDelta: number,matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,light: number,overlay: number): void;
}
class Static_DecoratedPotBlockEntityRenderer {
static getTextureIdFromSherd(item: Item): SpriteIdentifier;
static getTopBottomNeckTexturedModelData(): TexturedModelData;
static getSidesTexturedModelData(): TexturedModelData;
static NECK: string;
static FRONT: string;
static BACK: string;
static LEFT: string;
static RIGHT: string;
static TOP: string;
static BOTTOM: string;
}

//net.minecraft.entity.ai.brain.ScheduleBuilder$ActivityEntry
class ScheduleBuilder_ActivityEntry extends JObject{
 getStartTime(): number;
 getActivity(): Activity;
}

//net.minecraft.block.entity.BannerPattern
class BannerPattern extends JObject{
 getId(): string;
}
class Static_BannerPattern {
static method_43719(string: string,pattern: RegistryEntry_Reference): boolean;
static byId(id: string): RegistryEntry;
static getSpriteId(pattern: RegistryKey,banner: boolean): Identifier;
}

//net.minecraft.client.gui.screen.world.EditGameRulesScreen$RuleWidgetFactory
interface EditGameRulesScreen_RuleWidgetFactory extends JObject{
 create(name: Text,description: List,ruleName: string,rule: GameRules_Rule): EditGameRulesScreen_AbstractRuleWidget;
}

//net.minecraft.unused.packageinfo.PackageInfo6250
interface PackageInfo6250 extends JObject{
}

//net.minecraft.client.font.UnihexFont
class UnihexFont extends JObject, Font{
 getGlyph(codePoint: number): Glyph;
 getProvidedGlyphs(): IntSet;
}
class Static_UnihexFont {
static getHexDigitValue(lineNum: number,digit: byte): number;
static getHexDigitValue(lineNum: number,bytes: ByteList,index: number): number;
static addRowPixels(pixelsOut: IntBuffer,row: number,left: number,right: number): void;
static readUntilDelimiter(stream: InputStream,data: ByteList,delimiter: number): boolean;
static addGlyphPixels(pixelsOut: IntBuffer,glyph: UnihexFont_BitmapGlyph,left: number,right: number): void;
static readLines(stream: InputStream,callback: UnihexFont_BitmapGlyphConsumer): void;
static LOGGER: Logger;
static field_44764: number;
static field_44765: number;
static field_44766: number;
static field_44767: number;
static field_44768: number;
static field_44769: number;
}

//net.minecraft.block.sapling.SaplingGenerator
class SaplingGenerator extends JObject{
 generate(world: ServerWorld,chunkGenerator: ChunkGenerator,pos: BlockPos,state: BlockState,random: Random): boolean;
}

//net.minecraft.nbt.NbtEnd
class NbtEnd extends JObject, NbtElement{
 toString(): string;
 write(output: DataOutput): void;
 accept(visitor: NbtElementVisitor): void;
 getType(): byte;
 copy(): NbtElement;
 copy(): NbtEnd;
 getSizeInBytes(): number;
 doAccept(visitor: NbtScanner): NbtScanner_Result;
 getNbtType(): NbtType;
}
class Static_NbtEnd {
static SIZE: number;
static TYPE: NbtType;
static INSTANCE: NbtEnd;
}

//net.minecraft.unused.packageinfo.PackageInfo6254
interface PackageInfo6254 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6253
interface PackageInfo6253 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6252
interface PackageInfo6252 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6251
interface PackageInfo6251 extends JObject{
}

//net.minecraft.util.math.GravityField$Point
class GravityField_Point extends JObject{
 getGravityFactor(pos: BlockPos): number;
}

//net.minecraft.server.world.SleepManager
class SleepManager extends JObject{
 update(players: List): boolean;
 canResetTime(percentage: number,players: List): boolean;
 getSleeping(): number;
 clearSleeping(): void;
 canSkipNight(percentage: number): boolean;
 getNightSkippingRequirement(percentage: number): number;
}

//net.minecraft.client.realms.RealmsPeriodicCheckers
class RealmsPeriodicCheckers extends JObject{
 runnerFactory: PeriodicRunnerFactory;
 notifications: PeriodicRunnerFactory_PeriodicRunner;
 serverList: PeriodicRunnerFactory_PeriodicRunner;
 liveStats: PeriodicRunnerFactory_PeriodicRunner;
 pendingInvitesCount: PeriodicRunnerFactory_PeriodicRunner;
 trialAvailability: PeriodicRunnerFactory_PeriodicRunner;
 news: PeriodicRunnerFactory_PeriodicRunner;
 newsUpdater: RealmsNewsUpdater;
}
class Static_RealmsPeriodicCheckers {
static method_44617(realmsClient: RealmsClient): List;
}

//net.minecraft.client.render.block.entity.EnchantingTableBlockEntityRenderer
class EnchantingTableBlockEntityRenderer extends JObject, BlockEntityRenderer{
 render(enchantingTableBlockEntity: EnchantingTableBlockEntity,f: number,matrixStack: MatrixStack,vertexConsumerProvider: VertexConsumerProvider,i: number,j: number): void;
 render(entity: BlockEntity,tickDelta: number,matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,light: number,overlay: number): void;
}
class Static_EnchantingTableBlockEntityRenderer {
static BOOK_TEXTURE: SpriteIdentifier;
}

//net.minecraft.world.storage.SectorMap
class SectorMap extends JObject{
 allocate(start: number,size: number): void;
 allocate(size: number): number;
 free(start: number,size: number): void;
 getAllocatedBits(): IntSet;
}

//net.minecraft.block.AbstractBlock$ContextPredicate
interface AbstractBlock_ContextPredicate extends JObject{
 test(state: BlockState,world: BlockView,pos: BlockPos): boolean;
}

//net.minecraft.test.TestFunctions
class TestFunctions extends JObject{
}
class Static_TestFunctions {
static register(testClass: Class): void;
static register(method: Method): void;
static getTestClasses(): Collection;
static isInClass(testFunction: TestFunction,testClass: string): boolean;
static method_22194(string: string,testFunction: TestFunction): boolean;
static method_22197(string: string,testFunction: TestFunction): boolean;
static testClassExists(testClass: string): boolean;
static getInvoker(method: Method): Consumer;
static method_36071(method: Method,args: Object): void;
static getTestFunctions(testClass: string): Collection;
static getTestFunctions(): Collection;
static getTestFunction(method: Method): TestFunction;
static getTestFunction(structurePath: string): Optional;
static getCustomTestFunctions(method: Method): Collection;
static getTestFunctionOrThrow(structurePath: string): TestFunction;
static registerBatchConsumers(method: Method,clazz: Class,batchIdFunction: Function,batchConsumerMap: Map): void;
static getFailedTestFunctions(): Collection;
static clearFailedTestFunctions(): void;
static addFailedTestFunction(testFunction: TestFunction): void;
static getBeforeBatchConsumer(batchId: string): Consumer;
static getAfterBatchConsumer(batchId: string): Consumer;
static TEST_FUNCTIONS: Collection;
static TEST_CLASSES: Set;
static BEFORE_BATCH_CONSUMERS: Map;
static AFTER_BATCH_CONSUMERS: Map;
static FAILED_TEST_FUNCTIONS: Collection;
}

//net.minecraft.server.command.CommandOutput
interface CommandOutput extends JObject{
 shouldBroadcastConsoleToOps(): boolean;
 shouldReceiveFeedback(): boolean;
 sendMessage(message: Text): void;
 shouldTrackOutput(): boolean;
 cannotBeSilenced(): boolean;
}
class Static_CommandOutput {
static DUMMY: CommandOutput;
}

//net.minecraft.advancement.AdvancementDisplays$ResultConsumer
interface AdvancementDisplays_ResultConsumer extends JObject{
 accept(advancement: Advancement,shouldDisplay: boolean): void;
}

//net.minecraft.util.WorldSavePath
class WorldSavePath extends JObject{
 toString(): string;
 getRelativePath(): string;
}
class Static_WorldSavePath {
static ADVANCEMENTS: WorldSavePath;
static STATS: WorldSavePath;
static PLAYERDATA: WorldSavePath;
static PLAYERS: WorldSavePath;
static LEVEL_DAT: WorldSavePath;
static LEVEL_DAT_OLD: WorldSavePath;
static ICON_PNG: WorldSavePath;
static SESSION_LOCK: WorldSavePath;
static GENERATED: WorldSavePath;
static DATAPACKS: WorldSavePath;
static RESOURCES_ZIP: WorldSavePath;
static ROOT: WorldSavePath;
}

//net.minecraft.util.collection.SortedArraySet$SetIterator
class SortedArraySet_SetIterator extends JObject, Iterator{
 remove(): void;
 hasNext(): boolean;
 next(): Object;
}

//net.minecraft.world.EntityView
interface EntityView extends JObject{
 getOtherEntities(except: Entity,box: Box,predicate: Predicate): List;
 getOtherEntities(except: Entity,box: Box): List;
 doesNotIntersectEntities(except: Entity,shape: VoxelShape): boolean;
 getEntityCollisions(entity: Entity,box: Box): List;
 getEntitiesByType(filter: TypeFilter,box: Box,predicate: Predicate): List;
 getEntitiesByClass(entityClass: Class,box: Box,predicate: Predicate): List;
 getPlayers(targetPredicate: TargetPredicate,entity: LivingEntity,box: Box): List;
 getPlayers(): List;
 getNonSpectatingEntities(entityClass: Class,box: Box): List;
 getTargets(entityClass: Class,targetPredicate: TargetPredicate,targetingEntity: LivingEntity,box: Box): List;
 isPlayerInRange(x: number,y: number,z: number,range: number): boolean;
 getClosestEntity(entityClass: Class,targetPredicate: TargetPredicate,entity: LivingEntity,x: number,y: number,z: number,box: Box): LivingEntity;
 getClosestEntity(entityList: List,targetPredicate: TargetPredicate,entity: LivingEntity,x: number,y: number,z: number): LivingEntity;
 getClosestPlayer(x: number,y: number,z: number,maxDistance: number,ignoreCreative: boolean): PlayerEntity;
 getClosestPlayer(targetPredicate: TargetPredicate,entity: LivingEntity): PlayerEntity;
 getClosestPlayer(x: number,y: number,z: number,maxDistance: number,targetPredicate: Predicate): PlayerEntity;
 getClosestPlayer(targetPredicate: TargetPredicate,x: number,y: number,z: number): PlayerEntity;
 getClosestPlayer(targetPredicate: TargetPredicate,entity: LivingEntity,x: number,y: number,z: number): PlayerEntity;
 getClosestPlayer(entity: Entity,maxDistance: number): PlayerEntity;
 getPlayerByUuid(uuid: UUID): PlayerEntity;
}
class Static_EntityView {
static method_31591(entityOfClass: LivingEntity): boolean;
static method_31590(livingEntity: LivingEntity): boolean;
}

//net.minecraft.util.profiling.jfr.JfrProfileRecorder$PacketCounter
class JfrProfileRecorder_PacketCounter extends JObject{
 add(bytes: number): void;
 toStatistics(): NetworkIoStatistics_PacketStatistics;
}

//net.minecraft.util.profiler.ProfilerSystem$LocatedInfo
class ProfilerSystem_LocatedInfo extends JObject, ProfileLocationInfo{
 getCounts(): Object2LongMap;
 getTotalTime(): long;
 getVisitCount(): long;
 getMaxTime(): long;
}

//net.minecraft.server.command.TagCommand
class TagCommand extends JObject{
}
class Static_TagCommand {
static register(dispatcher: CommandDispatcher): void;
static method_13703(context: CommandContext): number;
static method_13697(context: CommandContext): number;
static method_52098(string: string,collection: Collection): Text;
static method_52097(string: string,collection: Collection): Text;
static method_13701(context: CommandContext,builder: SuggestionsBuilder): CompletableFuture;
static method_13704(context: CommandContext): number;
static getTags(entities: Collection): Collection;
static method_13705(source: ServerCommandSource): boolean;
static method_52093(string: string,collection: Collection): Text;
static method_52095(string: string,collection: Collection): Text;
static method_52092(entity: Entity,set: Set): Text;
static method_52091(entity: Entity): Text;
static method_52096(collection: Collection): Text;
static method_52094(collection: Collection,set: Set): Text;
static executeRemove(source: ServerCommandSource,targets: Collection,tag: string): number;
static executeList(source: ServerCommandSource,targets: Collection): number;
static executeAdd(source: ServerCommandSource,targets: Collection,tag: string): number;
static ADD_FAILED_EXCEPTION: SimpleCommandExceptionType;
static REMOVE_FAILED_EXCEPTION: SimpleCommandExceptionType;
}

//net.minecraft.unused.packageinfo.PackageInfo6258
interface PackageInfo6258 extends JObject{
}

//net.minecraft.test.GameTestState
class GameTestState extends JObject{
 toString(): string;
 init(pos: BlockPos,i: number): void;
 getSize(): Vec3i;
 fail(throwable: Throwable): void;
 isCompleted(): boolean;
 tick(): void;
 getThrowable(): Throwable;
 addListener(listener: TestListener): void;
 isStarted(): boolean;
 getElapsedMilliseconds(): long;
 isOptional(): boolean;
 isFailed(): boolean;
 isPassed(): boolean;
 getTicksLeft(): number;
 getTemplateName(): string;
 isRequired(): boolean;
 getTemplatePath(): string;
 getWorld(): ServerWorld;
 runAtTick(tick: long,runnable: Runnable): void;
 completeIfSuccessful(): void;
 getBoundingBox(): Box;
 getPos(): BlockPos;
 getRotation(): BlockRotation;
 getRequiredSuccesses(): number;
 isFlaky(): boolean;
 getTestFunction(): TestFunction;
 getMaxAttempts(): number;
 clearArea(): void;
}

//net.minecraft.world.gen.surfacebuilder.MaterialRules$MaterialRule
interface MaterialRules_MaterialRule extends JObject, Function{
 codec(): CodecHolder;
}
class Static_MaterialRules_MaterialRule {
static method_42379(materialRule: MaterialRules_MaterialRule): Codec;
static registerAndGetDefault(registry: Registry): Codec;
static CODEC: Codec;
}

//net.minecraft.registry.SimpleRegistry$2


//net.minecraft.unused.packageinfo.PackageInfo6257
interface PackageInfo6257 extends JObject{
}

//net.minecraft.registry.RegistryBuilder$Registries$1


//net.minecraft.entity.ai.brain.sensor.Sensor
class Sensor extends JObject{
 tick(world: ServerWorld,entity: LivingEntity): void;
 getOutputMemoryModules(): Set;
}
class Static_Sensor {
static testAttackableTargetPredicateIgnoreVisibility(entity: LivingEntity,target: LivingEntity): boolean;
static testAttackableTargetPredicate(entity: LivingEntity,target: LivingEntity): boolean;
static testTargetPredicate(entity: LivingEntity,target: LivingEntity): boolean;
static RANDOM: Random;
static DEFAULT_RUN_TIME: number;
static BASE_MAX_DISTANCE: number;
static TARGET_PREDICATE: TargetPredicate;
static TARGET_PREDICATE_IGNORE_DISTANCE_SCALING: TargetPredicate;
static ATTACKABLE_TARGET_PREDICATE: TargetPredicate;
static ATTACKABLE_TARGET_PREDICATE_IGNORE_DISTANCE_SCALING: TargetPredicate;
static ATTACKABLE_TARGET_PREDICATE_IGNORE_VISIBILITY: TargetPredicate;
static ATTACKABLE_TARGET_PREDICATE_IGNORE_VISIBILITY_OR_DISTANCE_SCALING: TargetPredicate;
}

//net.minecraft.client.network.ServerAddress
class ServerAddress extends JObject{
 equals(o: Object): boolean;
 toString(): string;
 hashCode(): number;
 getAddress(): string;
 getPort(): number;
}
class Static_ServerAddress {
static parse(address: string): ServerAddress;
static isValid(address: string): boolean;
static portOrDefault(port: string): number;
static LOGGER: Logger;
static INVALID: ServerAddress;
}

//net.minecraft.unused.packageinfo.PackageInfo6255
interface PackageInfo6255 extends JObject{
}

//net.minecraft.data.MetadataProvider
class MetadataProvider extends JObject, DataProvider{
 getName(): string;
 run(writer: DataWriter): CompletableFuture;
 add(serializer: ResourceMetadataSerializer,metadata: Object): MetadataProvider;
}
class Static_MetadataProvider {
static create(output: DataOutput,description: Text,requiredFeatures: FeatureSet): MetadataProvider;
static create(output: DataOutput,description: Text): MetadataProvider;
static method_46186(jsonObject: JsonObject,key: string,jsonSupplier: Supplier): void;
static method_46188(resourceMetadataSerializer: ResourceMetadataSerializer,object: Object): JsonElement;
}

//net.minecraft.registry.SimpleRegistry$1


//net.minecraft.util.Clearable
interface Clearable extends JObject{
 clear(): void;
}
class Static_Clearable {
static clear(o: Object): void;
}

//net.minecraft.text.TextReorderingProcessor
class TextReorderingProcessor extends JObject{
 process(start: number,length: number,reverse: boolean): List;
 getString(): string;
}
class Static_TextReorderingProcessor {
static create(visitable: StringVisitable,reverser: Int2IntFunction,shaper: UnaryOperator): TextReorderingProcessor;
static create(visitable: StringVisitable): TextReorderingProcessor;
static method_30941(stringBuilder: StringBuilder,list: List,charIndex: number,stylex: Style,codePoint: number): boolean;
static method_30942(stringBuilder: StringBuilder,list: List,style: Style,text: string): Optional;
static method_36143(string: string): string;
static method_36142(codePoint: number): number;
}

//net.minecraft.unused.packageinfo.PackageInfo6259
interface PackageInfo6259 extends JObject{
}

//net.minecraft.world.BlockLocating$Rectangle
class BlockLocating_Rectangle extends JObject{
 lowerLeft: BlockPos;
 width: number;
 height: number;
}

//net.minecraft.server.command.TriggerCommand
class TriggerCommand extends JObject{
}
class Static_TriggerCommand {
static register(dispatcher: CommandDispatcher): void;
static getScore(player: ServerPlayerEntity,objective: ScoreboardObjective): ScoreboardPlayerScore;
static method_13814(context: CommandContext,builder: SuggestionsBuilder): CompletableFuture;
static method_52135(scoreboardPlayerScore: ScoreboardPlayerScore,i: number): Text;
static method_13815(context: CommandContext): number;
static method_13816(context: CommandContext): number;
static executeSimple(source: ServerCommandSource,score: ScoreboardPlayerScore): number;
static method_52136(scoreboardPlayerScore: ScoreboardPlayerScore,i: number): Text;
static suggestObjectives(source: ServerCommandSource,builder: SuggestionsBuilder): CompletableFuture;
static method_13812(context: CommandContext): number;
static method_52134(scoreboardPlayerScore: ScoreboardPlayerScore): Text;
static executeAdd(source: ServerCommandSource,score: ScoreboardPlayerScore,value: number): number;
static executeSet(source: ServerCommandSource,score: ScoreboardPlayerScore,value: number): number;
static FAILED_UNPRIMED_EXCEPTION: SimpleCommandExceptionType;
static FAILED_INVALID_EXCEPTION: SimpleCommandExceptionType;
}

//net.minecraft.unused.packageinfo.PackageInfo6261
interface PackageInfo6261 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6260
interface PackageInfo6260 extends JObject{
}

//net.minecraft.recipe.CookingRecipeSerializer$RecipeFactory
interface CookingRecipeSerializer_RecipeFactory extends JObject{
 create(id: Identifier,group: string,category: CookingRecipeCategory,input: Ingredient,output: ItemStack,experience: number,cookTime: number): AbstractCookingRecipe;
}

//net.minecraft.unused.packageinfo.PackageInfo6265
interface PackageInfo6265 extends JObject{
}

//net.minecraft.util.math.noise.OctaveSimplexNoiseSampler
class OctaveSimplexNoiseSampler extends JObject{
 sample(x: number,y: number,useOrigin: boolean): number;
}

//net.minecraft.unused.packageinfo.PackageInfo6264
interface PackageInfo6264 extends JObject{
}

//net.minecraft.command.argument.CommandFunctionArgumentType$FunctionArgument
interface CommandFunctionArgumentType_FunctionArgument extends JObject{
 getFunctionOrTag(context: CommandContext): Pair;
 getFunctions(context: CommandContext): Collection;
}

//net.minecraft.unused.packageinfo.PackageInfo6263
interface PackageInfo6263 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6262
interface PackageInfo6262 extends JObject{
}

//net.minecraft.village.SimpleMerchant
class SimpleMerchant extends JObject, Merchant{
 isLeveledMerchant(): boolean;
 getYesSound(): SoundEvent;
 getCustomer(): PlayerEntity;
 setCustomer(customer: PlayerEntity): void;
 getOffers(): TradeOfferList;
 onSellingItem(stack: ItemStack): void;
 getExperience(): number;
 setOffersFromServer(offers: TradeOfferList): void;
 setExperienceFromServer(experience: number): void;
 trade(offer: TradeOffer): void;
 isClient(): boolean;
}

//net.minecraft.world.biome.GenerationSettings
class GenerationSettings extends JObject{
 getCarversForStep(carverStep: GenerationStep_Carver): Iterable;
 getFlowerFeatures(): List;
 isFeatureAllowed(feature: PlacedFeature): boolean;
 getFeatures(): List;
}
class Static_GenerationSettings {
static method_40139(list: List): Set;
static method_40140(list: List): List;
static method_40138(feature: ConfiguredFeature): boolean;
static method_30802(instance: RecordCodecBuilder_Instance): App;
static method_30809(generationSettings: GenerationSettings): List;
static method_30808(generationSettings: GenerationSettings): Map;
static LOGGER: Logger;
static INSTANCE: GenerationSettings;
static CODEC: MapCodec;
}

//net.minecraft.data.server.advancement.vanilla.VanillaStoryTabAdvancementGenerator
class VanillaStoryTabAdvancementGenerator extends JObject, AdvancementTabGenerator{
 accept(lookup: RegistryWrapper_WrapperLookup,exporter: Consumer): void;
}

//net.minecraft.network.packet.s2c.play.BossBarS2CPacket$AddAction
class BossBarS2CPacket_AddAction extends JObject, BossBarS2CPacket_Action{
 accept(uuid: UUID,consumer: BossBarS2CPacket_Consumer): void;
 getType(): BossBarS2CPacket_Type;
 toPacket(buf: PacketByteBuf): void;
}

//net.minecraft.client.Mouse
class Mouse extends JObject{
 setup(window: long): void;
 onResolutionChanged(): void;
 getX(): number;
 getY(): number;
 wasRightButtonClicked(): boolean;
 lockCursor(): void;
 unlockCursor(): void;
 isCursorLocked(): boolean;
 updateMouse(): void;
 wasLeftButtonClicked(): boolean;
 wasMiddleButtonClicked(): boolean;
 setResolutionChanged(): void;
}
class Static_Mouse {
static method_16013(screen: Screen,d: number,e: number): void;
static method_1611(bls: boolean[],screen: Screen,d: number,e: number,i: number): void;
static method_1605(bls: boolean[],screen: Screen,d: number,e: number,i: number): void;
}

//net.minecraft.world.gen.feature.MiscConfiguredFeatures
class MiscConfiguredFeatures extends JObject{
}
class Static_MiscConfiguredFeatures {
static bootstrap(featureRegisterable: Registerable): void;
static ICE_SPIKE: RegistryKey;
static ICE_PATCH: RegistryKey;
static FOREST_ROCK: RegistryKey;
static ICEBERG_PACKED: RegistryKey;
static ICEBERG_BLUE: RegistryKey;
static BLUE_ICE: RegistryKey;
static LAKE_LAVA: RegistryKey;
static DISK_CLAY: RegistryKey;
static DISK_GRAVEL: RegistryKey;
static DISK_SAND: RegistryKey;
static FREEZE_TOP_LAYER: RegistryKey;
static DISK_GRASS: RegistryKey;
static BONUS_CHEST: RegistryKey;
static VOID_START_PLATFORM: RegistryKey;
static DESERT_WELL: RegistryKey;
static SPRING_LAVA_OVERWORLD: RegistryKey;
static SPRING_LAVA_FROZEN: RegistryKey;
static SPRING_WATER: RegistryKey;
}

//net.minecraft.world.gen.feature.VegetationPatchFeatureConfig
class VegetationPatchFeatureConfig extends JObject, FeatureConfig{
 replaceable: TagKey;
 groundState: BlockStateProvider;
 vegetationFeature: RegistryEntry;
 surface: VerticalSurfaceType;
 depth: IntProvider;
 extraBottomBlockChance: number;
 verticalRange: number;
 vegetationChance: number;
 horizontalRadius: IntProvider;
 extraEdgeColumnChance: number;
}
class Static_VegetationPatchFeatureConfig {
static method_34350(config: VegetationPatchFeatureConfig): IntProvider;
static method_34349(config: VegetationPatchFeatureConfig): Float;
static method_34358(config: VegetationPatchFeatureConfig): TagKey;
static method_34353(config: VegetationPatchFeatureConfig): Float;
static method_34355(config: VegetationPatchFeatureConfig): VerticalSurfaceType;
static method_34356(config: VegetationPatchFeatureConfig): RegistryEntry;
static method_34354(config: VegetationPatchFeatureConfig): IntProvider;
static method_34352(config: VegetationPatchFeatureConfig): Integer;
static method_34348(instance: RecordCodecBuilder_Instance): App;
static method_34351(config: VegetationPatchFeatureConfig): Float;
static method_34357(config: VegetationPatchFeatureConfig): BlockStateProvider;
static CODEC: Codec;
}

//net.minecraft.world.gen.noise.NoiseParametersKeys
class NoiseParametersKeys extends JObject{
}
class Static_NoiseParametersKeys {
static of(id: string): RegistryKey;
static createNoiseSampler(noiseParametersLookup: RegistryEntryLookup,splitter: RandomSplitter,key: RegistryKey): DoublePerlinNoiseSampler;
static TEMPERATURE: RegistryKey;
static VEGETATION: RegistryKey;
static CONTINENTALNESS: RegistryKey;
static EROSION: RegistryKey;
static TEMPERATURE_LARGE: RegistryKey;
static VEGETATION_LARGE: RegistryKey;
static CONTINENTALNESS_LARGE: RegistryKey;
static EROSION_LARGE: RegistryKey;
static RIDGE: RegistryKey;
static OFFSET: RegistryKey;
static AQUIFER_BARRIER: RegistryKey;
static AQUIFER_FLUID_LEVEL_FLOODEDNESS: RegistryKey;
static AQUIFER_LAVA: RegistryKey;
static AQUIFER_FLUID_LEVEL_SPREAD: RegistryKey;
static PILLAR: RegistryKey;
static PILLAR_RARENESS: RegistryKey;
static PILLAR_THICKNESS: RegistryKey;
static SPAGHETTI_2D: RegistryKey;
static SPAGHETTI_2D_ELEVATION: RegistryKey;
static SPAGHETTI_2D_MODULATOR: RegistryKey;
static SPAGHETTI_2D_THICKNESS: RegistryKey;
static SPAGHETTI_3D_1: RegistryKey;
static SPAGHETTI_3D_2: RegistryKey;
static SPAGHETTI_3D_RARITY: RegistryKey;
static SPAGHETTI_3D_THICKNESS: RegistryKey;
static SPAGHETTI_ROUGHNESS: RegistryKey;
static SPAGHETTI_ROUGHNESS_MODULATOR: RegistryKey;
static CAVE_ENTRANCE: RegistryKey;
static CAVE_LAYER: RegistryKey;
static CAVE_CHEESE: RegistryKey;
static ORE_VEININESS: RegistryKey;
static ORE_VEIN_A: RegistryKey;
static ORE_VEIN_B: RegistryKey;
static ORE_GAP: RegistryKey;
static NOODLE: RegistryKey;
static NOODLE_THICKNESS: RegistryKey;
static NOODLE_RIDGE_A: RegistryKey;
static NOODLE_RIDGE_B: RegistryKey;
static JAGGED: RegistryKey;
static SURFACE: RegistryKey;
static SURFACE_SECONDARY: RegistryKey;
static CLAY_BANDS_OFFSET: RegistryKey;
static BADLANDS_PILLAR: RegistryKey;
static BADLANDS_PILLAR_ROOF: RegistryKey;
static BADLANDS_SURFACE: RegistryKey;
static ICEBERG_PILLAR: RegistryKey;
static ICEBERG_PILLAR_ROOF: RegistryKey;
static ICEBERG_SURFACE: RegistryKey;
static SURFACE_SWAMP: RegistryKey;
static CALCITE: RegistryKey;
static GRAVEL: RegistryKey;
static POWDER_SNOW: RegistryKey;
static PACKED_ICE: RegistryKey;
static ICE: RegistryKey;
static SOUL_SAND_LAYER: RegistryKey;
static GRAVEL_LAYER: RegistryKey;
static PATCH: RegistryKey;
static NETHERRACK: RegistryKey;
static NETHER_WART: RegistryKey;
static NETHER_STATE_SELECTOR: RegistryKey;
}

//net.minecraft.client.particle.WaterBubbleParticle$Factory
class WaterBubbleParticle_Factory extends JObject, ParticleFactory{
 createParticle(defaultParticleType: DefaultParticleType,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
 createParticle(particleEffect: ParticleEffect,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
}

//net.minecraft.structure.OceanMonumentGenerator$DoubleYRoomFactory
class OceanMonumentGenerator_DoubleYRoomFactory extends JObject, OceanMonumentGenerator_PieceFactory{
 generate(direction: Direction,setting: OceanMonumentGenerator_PieceSetting,random: Random): OceanMonumentGenerator_Piece;
 canGenerate(setting: OceanMonumentGenerator_PieceSetting): boolean;
}

//net.minecraft.unused.packageinfo.PackageInfo6269
interface PackageInfo6269 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6268
interface PackageInfo6268 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6267
interface PackageInfo6267 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6266
interface PackageInfo6266 extends JObject{
}

//net.minecraft.world.gen.blockpredicate.BlockPredicateType
interface BlockPredicateType extends JObject{
 codec(): Codec;
}
class Static_BlockPredicateType {
static register(id: string,codec: Codec): BlockPredicateType;
static method_38888(codec: Codec): Codec;
static MATCHING_BLOCKS: BlockPredicateType;
static MATCHING_BLOCK_TAG: BlockPredicateType;
static MATCHING_FLUIDS: BlockPredicateType;
static HAS_STURDY_FACE: BlockPredicateType;
static SOLID: BlockPredicateType;
static REPLACEABLE: BlockPredicateType;
static WOULD_SURVIVE: BlockPredicateType;
static INSIDE_WORLD_BOUNDS: BlockPredicateType;
static ANY_OF: BlockPredicateType;
static ALL_OF: BlockPredicateType;
static NOT: BlockPredicateType;
static TRUE: BlockPredicateType;
}

//net.minecraft.client.world.BiomeColorCache
class BiomeColorCache extends JObject{
 reset(): void;
 reset(chunkX: number,chunkZ: number): void;
 getBiomeColor(pos: BlockPos): number;
}
class Static_BiomeColorCache {
static MAX_ENTRY_SIZE: number;
}

//net.minecraft.util.annotation.FieldsAreNonnullByDefault
interface FieldsAreNonnullByDefault extends JObject, Annotation{
}

//net.minecraft.network.packet.c2s.play.ButtonClickC2SPacket
class ButtonClickC2SPacket extends JObject, Packet{
 apply(listener: PacketListener): void;
 apply(serverPlayPacketListener: ServerPlayPacketListener): void;
 write(buf: PacketByteBuf): void;
 getSyncId(): number;
 getButtonId(): number;
}

//net.minecraft.client.sound.SoundManager$2


//net.minecraft.unused.packageinfo.PackageInfo6232
interface PackageInfo6232 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6231
interface PackageInfo6231 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo7562
interface PackageInfo7562 extends JObject{
}

//net.minecraft.client.gui.screen.advancement.AdvancementTabType$1


//net.minecraft.loot.condition.TableBonusLootCondition$Serializer
class TableBonusLootCondition_Serializer extends JObject, JsonSerializer{
 fromJson(json: JsonObject,context: JsonDeserializationContext): Object;
 fromJson(jsonObject: JsonObject,jsonDeserializationContext: JsonDeserializationContext): TableBonusLootCondition;
 toJson(jsonObject: JsonObject,tableBonusLootCondition: TableBonusLootCondition,jsonSerializationContext: JsonSerializationContext): void;
 toJson(json: JsonObject,object: Object,context: JsonSerializationContext): void;
}
class Static_TableBonusLootCondition_Serializer {
static method_17936(identifier: Identifier): JsonParseException;
}

//net.minecraft.village.TradeOffers$Factory
interface TradeOffers_Factory extends JObject{
 create(entity: Entity,random: Random): TradeOffer;
}

//net.minecraft.world.level.UnmodifiableLevelProperties
class UnmodifiableLevelProperties extends JObject, ServerWorldProperties{
 getTime(): long;
 setTime(time: long): void;
 getLevelName(): string;
 setTimeOfDay(timeOfDay: long): void;
 getTimeOfDay(): long;
 setInitialized(initialized: boolean): void;
 isInitialized(): boolean;
 isDifficultyLocked(): boolean;
 setSpawnPos(pos: BlockPos,angle: number): void;
 setRaining(raining: boolean): void;
 areCommandsAllowed(): boolean;
 isHardcore(): boolean;
 getDifficulty(): Difficulty;
 setGameMode(gameMode: GameMode): void;
 setWanderingTraderSpawnDelay(wanderingTraderSpawnDelay: number): void;
 getWanderingTraderSpawnDelay(): number;
 getClearWeatherTime(): number;
 getWanderingTraderId(): UUID;
 getWanderingTraderSpawnChance(): number;
 setClearWeatherTime(clearWeatherTime: number): void;
 setWanderingTraderSpawnChance(wanderingTraderSpawnChance: number): void;
 setWanderingTraderId(wanderingTraderId: UUID): void;
 populateCrashReport(reportSection: CrashReportSection,world: HeightLimitView): void;
 getSpawnX(): number;
 getSpawnY(): number;
 setRainTime(rainTime: number): void;
 getSpawnAngle(): number;
 getSpawnZ(): number;
 setSpawnX(spawnX: number): void;
 setThundering(thundering: boolean): void;
 setSpawnZ(spawnZ: number): void;
 getRainTime(): number;
 setSpawnAngle(spawnAngle: number): void;
 setWorldBorder(worldBorder: WorldBorder_Properties): void;
 getThunderTime(): number;
 setThunderTime(thunderTime: number): void;
 getScheduledEvents(): Timer;
 setSpawnY(spawnY: number): void;
 getWorldBorder(): WorldBorder_Properties;
 isRaining(): boolean;
 isThundering(): boolean;
 getGameRules(): GameRules;
 getGameMode(): GameMode;
}

//net.minecraft.util.collection.PackedIntegerArray
class PackedIntegerArray extends JObject, PaletteStorage{
 get(index: number): number;
 set(index: number,value: number): void;
 forEach(action: IntConsumer): void;
 copy(): PaletteStorage;
 getSize(): number;
 swap(index: number,value: number): number;
 getData(): long[];
 writePaletteIndices(out: number[]): void;
 getElementBits(): number;
}
class Static_PackedIntegerArray {
static INDEX_PARAMETERS: number[];
}

//net.minecraft.util.UserCache$1


//net.minecraft.client.gui.hud.PlayerListHud$Heart
class PlayerListHud_Heart extends JObject{
 tick(score: number,currentTick: long): void;
 getPrevScore(): number;
 useHighlighted(currentTick: long): boolean;
}
class Static_PlayerListHud_Heart {
static COOLDOWN_TICKS: long;
static SCORE_DECREASE_HIGHLIGHT_TICKS: long;
static SCORE_INCREASE_HIGHLIGHT_TICKS: long;
}

//net.minecraft.unused.packageinfo.PackageInfo6236
interface PackageInfo6236 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6235
interface PackageInfo6235 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6233
interface PackageInfo6233 extends JObject{
}

//net.minecraft.nbt.NbtOps$BasicMerger
class NbtOps_BasicMerger extends JObject, NbtOps_Merger{
 merge(nbt: NbtElement): NbtOps_Merger;
 getResult(): NbtElement;
}
class Static_NbtOps_BasicMerger {
static EMPTY: NbtOps_BasicMerger;
}

//net.minecraft.block.entity.SculkSpreadManager$Cursor
class SculkSpreadManager_Cursor extends JObject{
 spread(world: WorldAccess,pos: BlockPos,random: Random,spreadManager: SculkSpreadManager,shouldConvertToBlock: boolean): void;
 getCharge(): number;
 getDecay(): number;
 getPos(): BlockPos;
 getFaces(): Set;
}
class Static_SculkSpreadManager_Cursor {
static method_41511(cursor: SculkSpreadManager_Cursor): Integer;
static method_41502(instance: RecordCodecBuilder_Instance): App;
static method_41509(cursor: SculkSpreadManager_Cursor): Optional;
static method_41506(directions: List): Set;
static canSpread(world: WorldAccess,pos: BlockPos,direction: Direction): boolean;
static canSpread(world: WorldAccess,sourcePos: BlockPos,targetPos: BlockPos): boolean;
static getSpreadPos(world: WorldAccess,pos: BlockPos,random: Random): BlockPos;
static shuffleOffsets(random: Random): List;
static getSpreadable(state: BlockState): SculkSpreadable;
static method_41505(objectArrayList: ObjectArrayList): void;
static method_41504(pos: BlockPos): boolean;
static OFFSETS: ObjectArrayList;
static field_37622: number;
static DIRECTION_SET_CODEC: Codec;
static CODEC: Codec;
}

//net.minecraft.client.gui.screen.ingame.CommandBlockScreen$1


//net.minecraft.unused.packageinfo.PackageInfo6243
interface PackageInfo6243 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6242
interface PackageInfo6242 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6241
interface PackageInfo6241 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6240
interface PackageInfo6240 extends JObject{
}

//net.minecraft.recipe.BrewingRecipeRegistry$Recipe
class BrewingRecipeRegistry_Recipe extends JObject{
}

//net.minecraft.command.argument.ArgumentHelper
class ArgumentHelper extends JObject{
}
class Static_ArgumentHelper {
static toJson(dispatcher: CommandDispatcher,rootNode: CommandNode): JsonObject;
static writeArgument(json: JsonObject,argumentType: ArgumentType): void;
static method_41993(set: Set,set2: Set,child: CommandNode): void;
static collectUsedArgumentTypes(node: CommandNode,usedArgumentTypes: Set,visitedNodes: Set): void;
static collectUsedArgumentTypes(rootNode: CommandNode): Set;
static hasMinFlag(flags: byte): boolean;
static hasMaxFlag(flags: byte): boolean;
static getMinMaxFlag(hasMin: boolean,hasMax: boolean): number;
static writeArgumentProperties(json: JsonObject,properties: ArgumentSerializer_ArgumentTypeProperties): void;
static writeArgumentProperties(json: JsonObject,serializer: ArgumentSerializer,properties: ArgumentSerializer_ArgumentTypeProperties): void;
static LOGGER: Logger;
static MIN_FLAG: byte;
static MAX_FLAG: byte;
}

//net.minecraft.screen.ScreenHandlerContext
interface ScreenHandlerContext extends JObject{
 run(fun: BiConsumer): void;
 get(getter: BiFunction,defaultValue: Object): Object;
 get(getter: BiFunction): Optional;
}
class Static_ScreenHandlerContext {
static create(world: World,pos: BlockPos): ScreenHandlerContext;
static method_17394(biConsumer: BiConsumer,world: World,pos: BlockPos): Optional;
static EMPTY: ScreenHandlerContext;
}

//net.minecraft.entity.ai.brain.task.WanderIndoorsTask
class WanderIndoorsTask extends JObject{
}
class Static_WanderIndoorsTask {
static create(speed: number): Task;
static method_46956(serverWorld: ServerWorld,pathAwareEntity: PathAwareEntity,pos: BlockPos): boolean;
static method_46952(serverWorld: ServerWorld,pathAwareEntity: PathAwareEntity,pos: BlockPos): boolean;
static method_46955(memoryQueryResult: MemoryQueryResult,f: number,pos: BlockPos): void;
static method_46951(f: number,walkTarget: MemoryQueryResult): TaskRunnable;
static method_46954(memoryQueryResult: MemoryQueryResult,f: number,world: ServerWorld,entity: PathAwareEntity,time: long): boolean;
static method_46953(serverWorld: ServerWorld,pos: BlockPos): boolean;
static method_46950(f: number,context: TaskTriggerer_TaskContext): App;
}

//net.minecraft.server.world.ServerWorld$ServerEntityHandler
class ServerWorld_ServerEntityHandler extends JObject, EntityHandler{
 destroy(entity: Entity): void;
 destroy(entity: Object): void;
 create(entity: Object): void;
 create(entity: Entity): void;
 startTicking(entity: Entity): void;
 startTicking(entity: Object): void;
 updateLoadStatus(entity: Object): void;
 updateLoadStatus(entity: Entity): void;
 startTracking(entity: Object): void;
 startTracking(entity: Entity): void;
 stopTicking(entity: Object): void;
 stopTicking(entity: Entity): void;
 stopTracking(entity: Entity): void;
 stopTracking(entity: Object): void;
}

//net.minecraft.util.profiler.Recorder
interface Recorder extends JObject{
 stop(): void;
 isActive(): boolean;
 forceStop(): void;
 getProfiler(): Profiler;
 endTick(): void;
 startTick(): void;
}

//net.minecraft.command.argument.GameProfileArgumentType
class GameProfileArgumentType extends JObject, ArgumentType{
 parse(reader: StringReader): Object;
 parse(stringReader: StringReader): GameProfileArgumentType_GameProfileArgument;
 getExamples(): Collection;
 listSuggestions(context: CommandContext,builder: SuggestionsBuilder): CompletableFuture;
}
class Static_GameProfileArgumentType {
static gameProfile(): GameProfileArgumentType;
static method_9328(string: string,source: ServerCommandSource): Collection;
static method_9332(commandContext: CommandContext,builder: SuggestionsBuilder): void;
static getProfileArgument(context: CommandContext,name: string): Collection;
static EXAMPLES: Collection;
static UNKNOWN_PLAYER_EXCEPTION: SimpleCommandExceptionType;
}

//net.minecraft.command.argument.BlockPredicateArgumentType
class BlockPredicateArgumentType extends JObject, ArgumentType{
 parse(reader: StringReader): Object;
 parse(stringReader: StringReader): BlockPredicateArgumentType_BlockPredicate;
 getExamples(): Collection;
 listSuggestions(context: CommandContext,builder: SuggestionsBuilder): CompletableFuture;
}
class Static_BlockPredicateArgumentType {
static parse(registryWrapper: RegistryWrapper,reader: StringReader): BlockPredicateArgumentType_BlockPredicate;
static blockPredicate(commandRegistryAccess: CommandRegistryAccess): BlockPredicateArgumentType;
static getBlockPredicate(context: CommandContext,name: string): Predicate;
static method_41951(result: BlockArgumentParser_BlockResult): BlockPredicateArgumentType_BlockPredicate;
static method_41952(result: BlockArgumentParser_TagResult): BlockPredicateArgumentType_BlockPredicate;
static EXAMPLES: Collection;
}

//net.minecraft.server.function.CommandFunctionManager$Entry
class CommandFunctionManager_Entry extends JObject{
 toString(): string;
 execute(manager: CommandFunctionManager,entries: Deque,maxChainLength: number,tracer: CommandFunctionManager_Tracer): void;
}

//net.minecraft.client.sound.SoundEntry
class SoundEntry extends JObject{
 canReplace(): boolean;
 getSubtitle(): string;
 getSounds(): List;
}

//net.minecraft.unused.packageinfo.PackageInfo6245
interface PackageInfo6245 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo7575
interface PackageInfo7575 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6244
interface PackageInfo6244 extends JObject{
}

//net.minecraft.server.command.DefaultGameModeCommand
class DefaultGameModeCommand extends JObject{
}
class Static_DefaultGameModeCommand {
static register(dispatcher: CommandDispatcher): void;
static execute(source: ServerCommandSource,defaultGameMode: GameMode): number;
static method_13165(commandContext: CommandContext): number;
static method_13168(source: ServerCommandSource): boolean;
static method_51954(gameMode: GameMode): Text;
}

//net.minecraft.unused.packageinfo.PackageInfo6249
interface PackageInfo6249 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6248
interface PackageInfo6248 extends JObject{
}

//net.minecraft.resource.fs.ResourceFile$1


//net.minecraft.resource.fs.ResourceFile$2


//net.minecraft.unused.packageinfo.PackageInfo6210
interface PackageInfo6210 extends JObject{
}

//net.minecraft.client.resource.ResourceReloadLogger$RecoveryEntry
class ResourceReloadLogger_RecoveryEntry extends JObject{
 addRecoverySection(section: CrashReportSection): void;
}

//net.minecraft.network.packet.s2c.play.OpenHorseScreenS2CPacket
class OpenHorseScreenS2CPacket extends JObject, Packet{
 apply(clientPlayPacketListener: ClientPlayPacketListener): void;
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
 getHorseId(): number;
 getSlotCount(): number;
 getSyncId(): number;
}

//net.minecraft.nbt.NbtLongArray$1


//net.minecraft.client.gl.VertexBuffer
class VertexBuffer extends JObject, AutoCloseable{
 close(): void;
 bind(): void;
 upload(buffer: BufferBuilder_BuiltBuffer): void;
 isClosed(): boolean;
 draw(viewMatrix: Matrix4f,projectionMatrix: Matrix4f,program: ShaderProgram): void;
 draw(): void;
 getVertexFormat(): VertexFormat;
}
class Static_VertexBuffer {
static unbind(): void;
}

//net.minecraft.network.packet.s2c.play.ScreenHandlerSlotUpdateS2CPacket
class ScreenHandlerSlotUpdateS2CPacket extends JObject, Packet{
 apply(clientPlayPacketListener: ClientPlayPacketListener): void;
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
 getSlot(): number;
 getItemStack(): ItemStack;
 getSyncId(): number;
 getRevision(): number;
}
class Static_ScreenHandlerSlotUpdateS2CPacket {
static UPDATE_CURSOR_SYNC_ID: number;
static UPDATE_PLAYER_INVENTORY_SYNC_ID: number;
}

//net.minecraft.server.command.TeamMsgCommand
class TeamMsgCommand extends JObject{
}
class Static_TeamMsgCommand {
static register(dispatcher: CommandDispatcher): void;
static execute(source: ServerCommandSource,entity: Entity,team: Team,recipients: List,message: SignedMessage): void;
static method_45154(entity: Entity,team: Team,player: ServerPlayerEntity): boolean;
static method_45155(serverCommandSource: ServerCommandSource,entity: Entity,team: Team,list: List,message: SignedMessage): void;
static method_17601(context: CommandContext): number;
static STYLE: Style;
static NO_TEAM_EXCEPTION: SimpleCommandExceptionType;
}

//net.minecraft.unused.packageinfo.PackageInfo6219
interface PackageInfo6219 extends JObject{
}

//net.minecraft.client.util.telemetry.TelemetrySender
interface TelemetrySender extends JObject{
 decorate(decorationAdder: Consumer): TelemetrySender;
 send(eventType: TelemetryEventType,propertyAdder: Consumer): void;
}
class Static_TelemetrySender {
static method_47717(eventType: TelemetryEventType,propertyAdder: Consumer): void;
static method_47719(consumer: Consumer,consumer2: Consumer,builder: PropertyMap_Builder): void;
static NOOP: TelemetrySender;
}

//net.minecraft.client.render.entity.EntityRenderDispatcher
class EntityRenderDispatcher extends JObject, SynchronousResourceReloader{
 reload(manager: ResourceManager): void;
 render(entity: Entity,x: number,y: number,z: number,yaw: number,tickDelta: number,matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,light: number): void;
 configure(world: World,camera: Camera,target: Entity): void;
 setWorld(world: World): void;
 getRenderer(entity: Entity): EntityRenderer;
 getLight(entity: Entity,tickDelta: number): number;
 setRotation(rotation: Quaternionf): void;
 shouldRender(entity: Entity,frustum: Frustum,x: number,y: number,z: number): boolean;
 getRotation(): Quaternionf;
 setRenderShadows(renderShadows: boolean): void;
 setRenderHitboxes(renderHitboxes: boolean): void;
 shouldRenderHitboxes(): boolean;
 getHeldItemRenderer(): HeldItemRenderer;
 getSquaredDistanceToCamera(entity: Entity): number;
 getSquaredDistanceToCamera(x: number,y: number,z: number): number;
 textureManager: TextureManager;
 camera: Camera;
 targetedEntity: Entity;
 gameOptions: GameOptions;
}
class Static_EntityRenderDispatcher {
static drawFireVertex(entry: MatrixStack_Entry,vertices: VertexConsumer,x: number,y: number,z: number,u: number,v: number): void;
static renderShadowPart(entry: MatrixStack_Entry,vertices: VertexConsumer,chunk: Chunk,world: WorldView,pos: BlockPos,x: number,y: number,z: number,radius: number,opacity: number): void;
static renderHitbox(matrices: MatrixStack,vertices: VertexConsumer,entity: Entity,tickDelta: number): void;
static drawShadowVertex(entry: MatrixStack_Entry,vertices: VertexConsumer,alpha: number,x: number,y: number,z: number,u: number,v: number): void;
static renderShadow(matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,entity: Entity,opacity: number,tickDelta: number,world: WorldView,radius: number): void;
static SHADOW_LAYER: RenderLayer;
static field_43377: number;
static field_43378: number;
}

//net.minecraft.client.render.model.json.ModelTransformation$1


//net.minecraft.unused.packageinfo.PackageInfo6214
interface PackageInfo6214 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6213
interface PackageInfo6213 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6212
interface PackageInfo6212 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6211
interface PackageInfo6211 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6218
interface PackageInfo6218 extends JObject{
}

//net.minecraft.client.network.PendingUpdateManager$PendingUpdate
class PendingUpdateManager_PendingUpdate extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6217
interface PackageInfo6217 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6215
interface PackageInfo6215 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6221
interface PackageInfo6221 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6220
interface PackageInfo6220 extends JObject{
}

//net.minecraft.entity.ai.brain.task.FindInteractionTargetTask
class FindInteractionTargetTask extends JObject{
}
class Static_FindInteractionTargetTask {
static create(type: EntityType,maxDistance: number): Task;
static method_47084(taskContext: TaskTriggerer_TaskContext,i: number,entityType: EntityType,lookTarget: MemoryQueryResult,interactionTarget: MemoryQueryResult,visibleMobs: MemoryQueryResult): TaskRunnable;
static method_47085(taskContext: TaskTriggerer_TaskContext,memoryQueryResult: MemoryQueryResult,i: number,entityType: EntityType,memoryQueryResult2: MemoryQueryResult,memoryQueryResult3: MemoryQueryResult,world: ServerWorld,entity: LivingEntity,time: long): boolean;
static method_47081(i: number,entityType: EntityType,context: TaskTriggerer_TaskContext): App;
static method_47083(livingEntity: LivingEntity,i: number,entityType: EntityType,target: LivingEntity): boolean;
}

//net.minecraft.server.dedicated.command.PerfCommand
class PerfCommand extends JObject{
}
class Static_PerfCommand {
static register(dispatcher: CommandDispatcher): void;
static saveReport(source: ServerCommandSource,tempProfilingDirectory: Path,server: MinecraftServer): void;
static method_37340(source: ServerCommandSource): boolean;
static method_37339(serverCommandSource: ServerCommandSource,result: ProfileResult): void;
static executeStop(source: ServerCommandSource): number;
static method_37337(context: CommandContext): number;
static executeStart(source: ServerCommandSource): number;
static method_37336(serverCommandSource: ServerCommandSource,minecraftServer: MinecraftServer,dumpDirectory: Path): void;
static method_37332(context: CommandContext): number;
static method_52016(): Text;
static method_52018(string: string): Text;
static method_52017(d: number,i: number): Text;
static sendProfilingStoppedMessage(source: ServerCommandSource,result: ProfileResult): void;
static LOGGER: Logger;
static NOT_RUNNING_EXCEPTION: SimpleCommandExceptionType;
static ALREADY_RUNNING_EXCEPTION: SimpleCommandExceptionType;
}

//net.minecraft.server.dedicated.command.PardonIpCommand
class PardonIpCommand extends JObject{
}
class Static_PardonIpCommand {
static register(dispatcher: CommandDispatcher): void;
static method_13479(context: CommandContext,builder: SuggestionsBuilder): CompletableFuture;
static pardonIp(source: ServerCommandSource,target: string): number;
static method_13481(source: ServerCommandSource): boolean;
static method_52014(string: string): Text;
static method_13480(context: CommandContext): number;
static INVALID_IP_EXCEPTION: SimpleCommandExceptionType;
static ALREADY_UNBANNED_EXCEPTION: SimpleCommandExceptionType;
}

//net.minecraft.world.gen.foliage.FoliagePlacerType
class FoliagePlacerType extends JObject{
 getCodec(): Codec;
}
class Static_FoliagePlacerType {
static register(id: string,codec: Codec): FoliagePlacerType;
static BLOB_FOLIAGE_PLACER: FoliagePlacerType;
static SPRUCE_FOLIAGE_PLACER: FoliagePlacerType;
static PINE_FOLIAGE_PLACER: FoliagePlacerType;
static ACACIA_FOLIAGE_PLACER: FoliagePlacerType;
static BUSH_FOLIAGE_PLACER: FoliagePlacerType;
static FANCY_FOLIAGE_PLACER: FoliagePlacerType;
static JUNGLE_FOLIAGE_PLACER: FoliagePlacerType;
static MEGA_PINE_FOLIAGE_PLACER: FoliagePlacerType;
static DARK_OAK_FOLIAGE_PLACER: FoliagePlacerType;
static RANDOM_SPREAD_FOLIAGE_PLACER: FoliagePlacerType;
static CHERRY_FOLIAGE_PLACER: FoliagePlacerType;
}

//net.minecraft.util.BlockMirror$1


//net.minecraft.client.render.chunk.ChunkRendererRegion
class ChunkRendererRegion extends JObject, BlockRenderView{
 getHeight(): number;
 getBlockEntity(pos: BlockPos): BlockEntity;
 getColor(pos: BlockPos,colorResolver: ColorResolver): number;
 getFluidState(pos: BlockPos): FluidState;
 getBlockState(pos: BlockPos): BlockState;
 getLightingProvider(): LightingProvider;
 getBottomY(): number;
 getBrightness(direction: Direction,shaded: boolean): number;
}

//net.minecraft.client.particle.SpellParticle$EntityFactory
class SpellParticle_EntityFactory extends JObject, ParticleFactory{
 createParticle(defaultParticleType: DefaultParticleType,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
 createParticle(particleEffect: ParticleEffect,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
}

//net.minecraft.unused.packageinfo.PackageInfo6225
interface PackageInfo6225 extends JObject{
}

//net.minecraft.client.render.model.json.ItemModelGenerator$1


//net.minecraft.unused.packageinfo.PackageInfo6224
interface PackageInfo6224 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo7554
interface PackageInfo7554 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6223
interface PackageInfo6223 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6222
interface PackageInfo6222 extends JObject{
}

//net.minecraft.structure.rule.blockentity.PassthroughRuleBlockEntityModifier
class PassthroughRuleBlockEntityModifier extends JObject, RuleBlockEntityModifier{
 getType(): RuleBlockEntityModifierType;
 modifyBlockEntityNbt(random: Random,nbt: NbtCompound): NbtCompound;
}
class Static_PassthroughRuleBlockEntityModifier {
static INSTANCE: PassthroughRuleBlockEntityModifier;
static CODEC: Codec;
}

//net.minecraft.server.dedicated.command.BanCommand
class BanCommand extends JObject{
}
class Static_BanCommand {
static register(dispatcher: CommandDispatcher): void;
static method_13024(source: ServerCommandSource): boolean;
static ban(source: ServerCommandSource,targets: Collection,reason: Text): number;
static method_51912(gameProfile: GameProfile,bannedPlayerEntry: BannedPlayerEntry): Text;
static method_13020(context: CommandContext): number;
static method_13023(context: CommandContext): number;
static ALREADY_BANNED_EXCEPTION: SimpleCommandExceptionType;
}

//net.minecraft.unused.packageinfo.PackageInfo6228
interface PackageInfo6228 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6226
interface PackageInfo6226 extends JObject{
}

//net.minecraft.client.realms.RealmsError
class RealmsError extends JObject{
 getErrorMessage(): string;
 getErrorCode(): number;
}
class Static_RealmsError {
static create(error: string): RealmsError;
static LOGGER: Logger;
}

//net.minecraft.inventory.CraftingResultInventory
class CraftingResultInventory extends JObject, Inventory, RecipeUnlocker{
 clear(): void;
 isEmpty(): boolean;
 size(): number;
 getStack(slot: number): ItemStack;
 setStack(slot: number,stack: ItemStack): void;
 removeStack(slot: number,amount: number): ItemStack;
 removeStack(slot: number): ItemStack;
 markDirty(): void;
 canPlayerUse(player: PlayerEntity): boolean;
 setLastRecipe(recipe: Recipe): void;
 getLastRecipe(): Recipe;
}

//net.minecraft.datafixer.fix.BlockEntitySignTextStrictJsonFix$1


//net.minecraft.client.realms.exception.RealmsDefaultUncaughtExceptionHandler
class RealmsDefaultUncaughtExceptionHandler extends JObject, Thread_UncaughtExceptionHandler{
 uncaughtException(t: Thread,e: Throwable): void;
}

//net.minecraft.entity.data.TrackedDataHandlerRegistry
class TrackedDataHandlerRegistry extends JObject{
}
class Static_TrackedDataHandlerRegistry {
static get(id: number): TrackedDataHandler;
static register(handler: TrackedDataHandler): void;
static getId(handler: TrackedDataHandler): number;
static method_43248(buf: PacketByteBuf,byte_: Byte): void;
static DATA_HANDLERS: Int2ObjectBiMap;
static BYTE: TrackedDataHandler;
static INTEGER: TrackedDataHandler;
static LONG: TrackedDataHandler;
static FLOAT: TrackedDataHandler;
static STRING: TrackedDataHandler;
static TEXT_COMPONENT: TrackedDataHandler;
static OPTIONAL_TEXT_COMPONENT: TrackedDataHandler;
static ITEM_STACK: TrackedDataHandler;
static BLOCK_STATE: TrackedDataHandler;
static OPTIONAL_BLOCK_STATE: TrackedDataHandler;
static BOOLEAN: TrackedDataHandler;
static PARTICLE: TrackedDataHandler;
static ROTATION: TrackedDataHandler;
static BLOCK_POS: TrackedDataHandler;
static OPTIONAL_BLOCK_POS: TrackedDataHandler;
static FACING: TrackedDataHandler;
static OPTIONAL_UUID: TrackedDataHandler;
static OPTIONAL_GLOBAL_POS: TrackedDataHandler;
static NBT_COMPOUND: TrackedDataHandler;
static VILLAGER_DATA: TrackedDataHandler;
static OPTIONAL_INT: TrackedDataHandler;
static ENTITY_POSE: TrackedDataHandler;
static CAT_VARIANT: TrackedDataHandler;
static FROG_VARIANT: TrackedDataHandler;
static PAINTING_VARIANT: TrackedDataHandler;
static SNIFFER_STATE: TrackedDataHandler;
static VECTOR3F: TrackedDataHandler;
static QUATERNIONF: TrackedDataHandler;
}

//net.minecraft.network.encryption.SignatureVerifier
interface SignatureVerifier extends JObject{
 validate(updatable: SignatureUpdatable,signatureData: byte[]): boolean;
 validate(signedData: byte[],signatureData: byte[]): boolean;
}
class Static_SignatureVerifier {
static create(servicesKeySet: ServicesKeySet,servicesKeyType: ServicesKeyType): SignatureVerifier;
static create(publicKey: PublicKey,algorithm: string): SignatureVerifier;
static verify(updatable: SignatureUpdatable,signatureData: byte[],signature: Signature): boolean;
static method_44174(string: string,publicKey: PublicKey,updatable: SignatureUpdatable,signatureData: byte[]): boolean;
static method_44176(bs: byte[],updater: SignatureUpdatable_SignatureUpdater): void;
static method_44173(signatureUpdatable: SignatureUpdatable,bs: byte[],keyInfo: ServicesKeyInfo): boolean;
static method_51496(collection: Collection,updatable: SignatureUpdatable,signatureData: byte[]): boolean;
static method_44170(updatable: SignatureUpdatable,signatureData: byte[]): boolean;
static NOOP: SignatureVerifier;
static LOGGER: Logger;
}

//net.minecraft.network.packet.s2c.play.ParticleS2CPacket
class ParticleS2CPacket extends JObject, Packet{
 apply(listener: PacketListener): void;
 apply(clientPlayPacketListener: ClientPlayPacketListener): void;
 write(buf: PacketByteBuf): void;
 getParameters(): ParticleEffect;
 getCount(): number;
 getSpeed(): number;
 isLongDistance(): boolean;
 getX(): number;
 getY(): number;
 getZ(): number;
 getOffsetZ(): number;
 getOffsetX(): number;
 getOffsetY(): number;
}

//net.minecraft.util.shape.SimplePairList
class SimplePairList extends JObject, PairList{
 size(): number;
 getPairs(): DoubleList;
 forEachPair(predicate: PairList_Consumer): boolean;
}
class Static_SimplePairList {
static ZERO: DoubleList;
}

//net.minecraft.client.util.NarratorManager
class NarratorManager extends JObject{
 clear(): void;
 destroy(): void;
 isActive(): boolean;
 onModeChange(mode: NarratorMode): void;
 narrateChatMessage(text: Text): void;
 narrateSystemMessage(text: Text): void;
 narrate(text: Text): void;
 narrate(text: string): void;
 checkNarratorLibrary(narratorEnabled: boolean): void;
}
class Static_NarratorManager {
static EMPTY: Text;
static LOGGER: Logger;
}

//net.minecraft.util.Colors
class Colors extends JObject{
}
class Static_Colors {
static WHITE: number;
static BLACK: number;
static GRAY: number;
static RED: number;
}

//net.minecraft.world.WorldAccess
interface WorldAccess extends JObject, RegistryWorldView, LunarWorldView{
 scheduleFluidTick(pos: BlockPos,fluid: Fluid,delay: number): void;
 scheduleFluidTick(pos: BlockPos,fluid: Fluid,delay: number,priority: TickPriority): void;
 getFluidTickScheduler(): QueryableTickScheduler;
 getBlockTickScheduler(): QueryableTickScheduler;
 addParticle(parameters: ParticleEffect,x: number,y: number,z: number,velocityX: number,velocityY: number,velocityZ: number): void;
 emitGameEvent(event: GameEvent,pos: BlockPos,emitter: GameEvent_Emitter): void;
 emitGameEvent(event: GameEvent,emitterPos: Vec3d,emitter: GameEvent_Emitter): void;
 emitGameEvent(entity: Entity,event: GameEvent,pos: BlockPos): void;
 emitGameEvent(entity: Entity,event: GameEvent,pos: Vec3d): void;
 scheduleBlockTick(pos: BlockPos,block: Block,delay: number): void;
 scheduleBlockTick(pos: BlockPos,block: Block,delay: number,priority: TickPriority): void;
 isChunkLoaded(chunkX: number,chunkZ: number): boolean;
 getDifficulty(): Difficulty;
 updateNeighbors(pos: BlockPos,block: Block): void;
 getLocalDifficulty(pos: BlockPos): LocalDifficulty;
 getLevelProperties(): WorldProperties;
 getChunkManager(): ChunkManager;
 playSound(except: PlayerEntity,pos: BlockPos,sound: SoundEvent,category: SoundCategory,volume: number,pitch: number): void;
 playSound(except: PlayerEntity,pos: BlockPos,sound: SoundEvent,category: SoundCategory): void;
 syncWorldEvent(player: PlayerEntity,eventId: number,pos: BlockPos,data: number): void;
 syncWorldEvent(eventId: number,pos: BlockPos,data: number): void;
 getRandom(): Random;
 getServer(): MinecraftServer;
 replaceWithStateForNeighborUpdate(direction: Direction,neighborState: BlockState,pos: BlockPos,neighborPos: BlockPos,flags: number,maxUpdateDepth: number): void;
 getTickOrder(): long;
 getLunarTime(): long;
}

//net.minecraft.world.chunk.SingularPalette
class SingularPalette extends JObject, Palette{
 index(object: Object): number;
 get(id: number): Object;
 copy(): Palette;
 getSize(): number;
 getPacketSize(): number;
 readPacket(buf: PacketByteBuf): void;
 hasAny(predicate: Predicate): boolean;
 writePacket(buf: PacketByteBuf): void;
}
class Static_SingularPalette {
static create(bitSize: number,idList: IndexedIterable,listener: PaletteResizeListener,entries: List): Palette;
}

//net.minecraft.entity.Saddleable
interface Saddleable extends JObject{
 saddle(sound: SoundCategory): void;
 getSaddleSound(): SoundEvent;
 canBeSaddled(): boolean;
 isSaddled(): boolean;
}

//net.minecraft.world.gen.feature.EndSpikeFeature$Spike
class EndSpikeFeature_Spike extends JObject{
 getHeight(): number;
 getRadius(): number;
 getBoundingBox(): Box;
 getCenterX(): number;
 getCenterZ(): number;
 isInChunk(pos: BlockPos): boolean;
 isGuarded(): boolean;
}
class Static_EndSpikeFeature_Spike {
static method_28653(spike: EndSpikeFeature_Spike): Integer;
static method_28649(instance: RecordCodecBuilder_Instance): App;
static method_28652(spike: EndSpikeFeature_Spike): Integer;
static method_28651(spike: EndSpikeFeature_Spike): Integer;
static method_28650(spike: EndSpikeFeature_Spike): Integer;
static method_28648(spike: EndSpikeFeature_Spike): Boolean;
static CODEC: Codec;
}

//net.minecraft.network.packet.s2c.play.EntityEquipmentUpdateS2CPacket
class EntityEquipmentUpdateS2CPacket extends JObject, Packet{
 apply(clientPlayPacketListener: ClientPlayPacketListener): void;
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
 getId(): number;
 getEquipmentList(): List;
}
class Static_EntityEquipmentUpdateS2CPacket {
static field_33342: byte;
}

//net.minecraft.loot.context.LootContextParameterSet$DynamicDrop
interface LootContextParameterSet_DynamicDrop extends JObject{
 add(lootConsumer: Consumer): void;
}

//net.minecraft.recipe.Ingredient
class Ingredient extends JObject, Predicate, FabricIngredient{
 test(itemStack: ItemStack): boolean;
 test(stack: Object): boolean;
 isEmpty(): boolean;
 write(buf: PacketByteBuf): void;
 getMatchingStacks(): ItemStack[];
 getMatchingItemIds(): IntList;
 toJson(): JsonElement;
}
class Static_Ingredient {
static empty(): Ingredient;
static ofEntries(entries: Stream): Ingredient;
static ofItems(items: ItemConvertible[]): Ingredient;
static ofStacks(stacks: ItemStack[]): Ingredient;
static ofStacks(stacks: Stream): Ingredient;
static fromJson(json: JsonElement): Ingredient;
static fromJson(json: JsonElement,allowAir: boolean): Ingredient;
static fromTag(tag: TagKey): Ingredient;
static fromPacket(buf: PacketByteBuf): Ingredient;
static entryFromJson(json: JsonObject): Ingredient_Entry;
static method_47374(entry: Ingredient_Entry): Stream;
static method_8087(i: number): Ingredient_Entry;
static method_47373(i: number): ItemStack[];
static method_26965(stack: ItemStack): boolean;
static method_8090(jsonElement: JsonElement): Ingredient_Entry;
static EMPTY: Ingredient;
}

//net.minecraft.unused.packageinfo.PackageInfo6209
interface PackageInfo6209 extends JObject{
}

//net.minecraft.structure.StructureTemplate$1


//net.minecraft.unused.packageinfo.PackageInfo6208
interface PackageInfo6208 extends JObject{
}

//net.minecraft.util.profiler.Sampler$RatioDeviationChecker
class Sampler_RatioDeviationChecker extends JObject, Sampler_DeviationChecker{
 check(value: number): boolean;
}

//net.minecraft.world.gen.chunk.ChunkNoiseSampler$ParentedNoiseType
interface ChunkNoiseSampler_ParentedNoiseType extends JObject, DensityFunction{
 maxValue(): number;
 wrapped(): DensityFunction;
 minValue(): number;
}

//net.minecraft.unused.packageinfo.PackageInfo6203
interface PackageInfo6203 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6202
interface PackageInfo6202 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6201
interface PackageInfo6201 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6200
interface PackageInfo6200 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6207
interface PackageInfo6207 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6206
interface PackageInfo6206 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6205
interface PackageInfo6205 extends JObject{
}

//net.minecraft.nbt.NbtShort$1


//net.minecraft.world.poi.PointOfInterestSet
class PointOfInterestSet extends JObject{
 add(pos: BlockPos,type: RegistryEntry): void;
 remove(pos: BlockPos): void;
 get(predicate: Predicate,occupationStatus: PointOfInterestStorage_OccupationStatus): Stream;
 test(pos: BlockPos,predicate: Predicate): boolean;
 getType(pos: BlockPos): Optional;
 updatePointsOfInterest(updater: Consumer): void;
 getFreeTickets(pos: BlockPos): number;
 releaseTicket(pos: BlockPos): boolean;
}
class Static_PointOfInterestSet {
static createCodec(updateListener: Runnable): Codec;
static method_28367(runnable: Runnable): PointOfInterestSet;
static method_28365(runnable: Runnable,instance: RecordCodecBuilder_Instance): App;
static method_19149(entry: Map_Entry): Stream;
static method_19151(predicate: Predicate,entry: Map_Entry): boolean;
static method_43986(key: RegistryKey): string;
static method_19143(type: RegistryEntry): Set;
static method_28366(poiSet: PointOfInterestSet): Boolean;
static method_28363(poiSet: PointOfInterestSet): List;
static LOGGER: Logger;
}

//net.minecraft.unused.packageinfo.PackageInfo8031
interface PackageInfo8031 extends JObject{
}

//net.minecraft.item.DyeableItem
interface DyeableItem extends JObject{
 setColor(stack: ItemStack,color: number): void;
 hasColor(stack: ItemStack): boolean;
 getColor(stack: ItemStack): number;
 removeColor(stack: ItemStack): void;
}
class Static_DyeableItem {
static blendAndSetColor(stack: ItemStack,colors: List): ItemStack;
static COLOR_KEY: string;
static DISPLAY_KEY: string;
static DEFAULT_COLOR: number;
}

//net.minecraft.item.SignChangingItem
interface SignChangingItem extends JObject{
 canUseOnSignText(signText: SignText,player: PlayerEntity): boolean;
 useOnSign(world: World,signBlockEntity: SignBlockEntity,front: boolean,player: PlayerEntity): boolean;
}

//net.minecraft.village.TradeOffers$SellMapFactory
class TradeOffers_SellMapFactory extends JObject, TradeOffers_Factory{
 create(entity: Entity,random: Random): TradeOffer;
}

//net.minecraft.network.packet.s2c.play.CustomPayloadS2CPacket
class CustomPayloadS2CPacket extends JObject, Packet{
 apply(clientPlayPacketListener: ClientPlayPacketListener): void;
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
 getChannel(): Identifier;
 getData(): PacketByteBuf;
}
class Static_CustomPayloadS2CPacket {
static MAX_PAYLOAD_SIZE: number;
static BRAND: Identifier;
static DEBUG_PATH: Identifier;
static DEBUG_NEIGHBORS_UPDATE: Identifier;
static DEBUG_STRUCTURES: Identifier;
static DEBUG_WORLDGEN_ATTEMPT: Identifier;
static DEBUG_POI_TICKET_COUNT: Identifier;
static DEBUG_POI_ADDED: Identifier;
static DEBUG_POI_REMOVED: Identifier;
static DEBUG_VILLAGE_SECTIONS: Identifier;
static DEBUG_GOAL_SELECTOR: Identifier;
static DEBUG_BRAIN: Identifier;
static DEBUG_BEE: Identifier;
static DEBUG_HIVE: Identifier;
static DEBUG_GAME_TEST_ADD_MARKER: Identifier;
static DEBUG_GAME_TEST_CLEAR: Identifier;
static DEBUG_RAIDS: Identifier;
static DEBUG_GAME_EVENT: Identifier;
static DEBUG_GAME_EVENT_LISTENERS: Identifier;
}

//net.minecraft.client.resource.metadata.AnimationFrameResourceMetadata
class AnimationFrameResourceMetadata extends JObject{
 getIndex(): number;
 getTime(defaultTime: number): number;
}
class Static_AnimationFrameResourceMetadata {
static UNDEFINED_TIME: number;
}

//net.minecraft.data.server.tag.TagProvider$TagLookup
interface TagProvider_TagLookup extends JObject, Function{
 contains(tag: TagKey): boolean;
}
class Static_TagProvider_TagLookup {
static empty(): TagProvider_TagLookup;
static method_49664(tag: TagKey): Optional;
}

//net.minecraft.entity.ai.brain.task.PlayDeadTimerTask
class PlayDeadTimerTask extends JObject{
}
class Static_PlayDeadTimerTask {
static create(): Task;
static method_47270(taskContext: TaskTriggerer_TaskContext,playDeadTicks: MemoryQueryResult,hurtByEntity: MemoryQueryResult): TaskRunnable;
static method_47269(context: TaskTriggerer_TaskContext): App;
static method_47271(taskContext: TaskTriggerer_TaskContext,memoryQueryResult: MemoryQueryResult,memoryQueryResult2: MemoryQueryResult,world: ServerWorld,entity: LivingEntity,time: long): boolean;
}

//net.minecraft.client.render.model.BakedQuad
class BakedQuad extends JObject{
 hasColor(): boolean;
 getColorIndex(): number;
 getFace(): Direction;
 getSprite(): Sprite;
 getVertexData(): number[];
 hasShade(): boolean;
}

//net.minecraft.data.client.ItemModelGenerator
class ItemModelGenerator extends JObject{
 register(item: Item,model: Model): void;
 register(): void;
 register(item: Item,texture: Item,model: Model): void;
 register(item: Item,suffix: string,model: Model): void;
 suffixTrim(id: Identifier,trimMaterialName: string): Identifier;
 registerArmor(armor: ArmorItem): void;
 uploadArmor(id: Identifier,layer0: Identifier,layer1: Identifier,layer2: Identifier): void;
 uploadArmor(id: Identifier,layer0: Identifier,layer1: Identifier): void;
 registerCompass(compass: Item): void;
 createArmorJson(id: Identifier,textures: Map,armorMaterial: ArmorMaterial): JsonObject;
 registerClock(clock: Item): void;
 writer: BiConsumer;
}
class Static_ItemModelGenerator {
static TRIM_TYPE: Identifier;
static TRIM_MATERIALS: List;
}

//net.minecraft.resource.SimpleResourceReload
class SimpleResourceReload extends JObject, ResourceReload{
 whenComplete(): CompletableFuture;
 getProgress(): number;
}
class Static_SimpleResourceReload {
static start(manager: ResourceManager,reloaders: List,prepareExecutor: Executor,applyExecutor: Executor,initialStage: CompletableFuture,profiled: boolean): ResourceReload;
static create(manager: ResourceManager,reloaders: List,prepareExecutor: Executor,applyExecutor: Executor,initialStage: CompletableFuture): SimpleResourceReload;
static method_18368(executor: Executor,synchronizer: ResourceReloader_Synchronizer,resourceManager: ResourceManager,reloader: ResourceReloader,prepare: Executor,apply: Executor): CompletableFuture;
static FIRST_PREPARE_APPLY_WEIGHT: number;
static SECOND_PREPARE_APPLY_WEIGHT: number;
static RELOADER_WEIGHT: number;
}

//net.minecraft.entity.ai.brain.task.PlayWithVillagerBabiesTask
class PlayWithVillagerBabiesTask extends JObject{
}
class Static_PlayWithVillagerBabiesTask {
static create(): Task;
static getLeastPopularBabyInteractionTarget(babies: List): Optional;
static getBabyInteractionTargetCounts(babies: List): Map;
static hasInteractionTarget(baby: LivingEntity): boolean;
static isInteractionTargetOf(entity: LivingEntity,baby: LivingEntity): boolean;
static getInteractionTarget(baby: LivingEntity): LivingEntity;
static method_19581(entry: Map_Entry): boolean;
static method_47003(taskContext: TaskTriggerer_TaskContext,visibleVillagerBabies: MemoryQueryResult,walkTarget: MemoryQueryResult,lookTarget: MemoryQueryResult,interactionTarget: MemoryQueryResult): TaskRunnable;
static method_47004(taskContext: TaskTriggerer_TaskContext,memoryQueryResult: MemoryQueryResult,memoryQueryResult2: MemoryQueryResult,memoryQueryResult3: MemoryQueryResult,memoryQueryResult4: MemoryQueryResult,world: ServerWorld,entity: PathAwareEntity,time: long): boolean;
static method_47001(pathAwareEntity: PathAwareEntity,baby: LivingEntity): boolean;
static method_47005(memoryQueryResult: MemoryQueryResult,memoryQueryResult2: MemoryQueryResult,memoryQueryResult3: MemoryQueryResult,baby: LivingEntity): void;
static setPlayTarget(interactionTarget: MemoryQueryResult,lookTarget: MemoryQueryResult,walkTarget: MemoryQueryResult,baby: LivingEntity): void;
static method_19582(map: Map,baby: LivingEntity): void;
static method_19578(target: LivingEntity,count: Integer): Integer;
static method_19587(livingEntity: LivingEntity,target: LivingEntity): boolean;
static method_47002(context: TaskTriggerer_TaskContext): App;
static HORIZONTAL_RANGE: number;
static VERTICAL_RANGE: number;
static WALK_SPEED: number;
static PLAYING_WALK_SPEED: number;
static MAX_BABY_INTERACTION_COUNT: number;
static RUN_CHANCE: number;
}

//net.minecraft.util.profiling.jfr.JfrProfiler$1


//net.minecraft.loot.condition.MatchToolLootCondition
class MatchToolLootCondition extends JObject, LootCondition{
 test(context: Object): boolean;
 test(lootContext: LootContext): boolean;
 getType(): LootConditionType;
 getRequiredParameters(): Set;
}
class Static_MatchToolLootCondition {
static builder(predicate: ItemPredicate_Builder): LootCondition_Builder;
static method_944(builder: ItemPredicate_Builder): LootCondition;
}

//net.minecraft.data.client.BlockStateModelGenerator$LogTexturePool
class BlockStateModelGenerator_LogTexturePool extends JObject{
 log(logBlock: Block): BlockStateModelGenerator_LogTexturePool;
 stem(stemBlock: Block): BlockStateModelGenerator_LogTexturePool;
 wood(woodBlock: Block): BlockStateModelGenerator_LogTexturePool;
 uvLockedLog(logBlock: Block): BlockStateModelGenerator_LogTexturePool;
}

//net.minecraft.world.gen.feature.MultifaceGrowthFeatureConfig
class MultifaceGrowthFeatureConfig extends JObject, FeatureConfig{
 shuffleDirections(random: Random,excluded: Direction): List;
 shuffleDirections(random: Random): List;
 lichen: MultifaceGrowthBlock;
 searchRange: number;
 placeOnFloor: boolean;
 placeOnCeiling: boolean;
 placeOnWalls: boolean;
 spreadChance: number;
 canPlaceOn: RegistryEntryList;
}
class Static_MultifaceGrowthFeatureConfig {
static method_49534(): string;
static validateBlock(block: Block): DataResult;
static method_33398(instance: RecordCodecBuilder_Instance): App;
static method_33400(config: MultifaceGrowthFeatureConfig): Float;
static method_33402(config: MultifaceGrowthFeatureConfig): Boolean;
static method_33404(config: MultifaceGrowthFeatureConfig): Integer;
static method_33399(config: MultifaceGrowthFeatureConfig): RegistryEntryList;
static method_33401(config: MultifaceGrowthFeatureConfig): Boolean;
static method_41574(config: MultifaceGrowthFeatureConfig): MultifaceGrowthBlock;
static method_43297(direction2: Direction,direction: Direction): boolean;
static method_33403(config: MultifaceGrowthFeatureConfig): Boolean;
static CODEC: Codec;
}

//net.minecraft.datafixer.schema.IdentifierNormalizingSchema$1


//net.minecraft.command.argument.BlockArgumentParser
class BlockArgumentParser extends JObject{
}
class Static_BlockArgumentParser {
static block(registryWrapper: RegistryWrapper,reader: StringReader,allowSnbt: boolean): BlockArgumentParser_BlockResult;
static block(registryWrapper: RegistryWrapper,string: string,allowSnbt: boolean): BlockArgumentParser_BlockResult;
static getSuggestions(registryWrapper: RegistryWrapper,builder: SuggestionsBuilder,allowTag: boolean,allowSnbt: boolean): CompletableFuture;
static blockOrTag(registryWrapper: RegistryWrapper,string: string,allowSnbt: boolean): Either;
static blockOrTag(registryWrapper: RegistryWrapper,reader: StringReader,allowSnbt: boolean): Either;
static suggestPropertyValues(builder: SuggestionsBuilder,property: Property): SuggestionsBuilder;
static stringifyBlockState(state: BlockState): string;
static stringifyProperty(builder: StringBuilder,property: Property,value: Comparable): void;
static method_9682(block: Object): Message;
static method_9684(property: Property,builder: SuggestionsBuilder): CompletableFuture;
static method_9686(block: Object,property: Object): Message;
static method_41958(tag: Object): Message;
static method_9691(block: Object,property: Object): Message;
static method_41959(key: RegistryKey): string;
static method_9661(block: Object,property: Object): Message;
static method_9660(block: Object,property: Object,value: Object): Message;
static DISALLOWED_TAG_EXCEPTION: SimpleCommandExceptionType;
static INVALID_BLOCK_ID_EXCEPTION: DynamicCommandExceptionType;
static UNKNOWN_PROPERTY_EXCEPTION: Dynamic2CommandExceptionType;
static DUPLICATE_PROPERTY_EXCEPTION: Dynamic2CommandExceptionType;
static INVALID_PROPERTY_EXCEPTION: Dynamic3CommandExceptionType;
static EMPTY_PROPERTY_EXCEPTION: Dynamic2CommandExceptionType;
static UNCLOSED_PROPERTIES_EXCEPTION: SimpleCommandExceptionType;
static UNKNOWN_BLOCK_TAG_EXCEPTION: DynamicCommandExceptionType;
static PROPERTIES_OPENING: char;
static NBT_OPENING: char;
static PROPERTIES_CLOSING: char;
static PROPERTY_DEFINER: char;
static PROPERTY_SEPARATOR: char;
static TAG_PREFIX: char;
static SUGGEST_DEFAULT: Function;
}

//net.minecraft.command.argument.MessageArgumentType$MessageFormat
class MessageArgumentType_MessageFormat extends JObject{
 format(source: ServerCommandSource,canUseSelectors: boolean): Text;
 getContents(): string;
 getSelectors(): MessageArgumentType_MessageSelector;
}
class Static_MessageArgumentType_MessageFormat {
static parse(reader: StringReader,canUseSelectors: boolean): MessageArgumentType_MessageFormat;
}

//net.minecraft.server.function.CommandFunctionManager$Execution$ReturnValueConsumer
class CommandFunctionManager_Execution_ReturnValueConsumer extends JObject, IntConsumer{
 accept(value: number): void;
}

//net.minecraft.data.client.When$LogicalCondition
class When_LogicalCondition extends JObject, When{
 get(): Object;
 get(): JsonElement;
 validate(stateManager: StateManager): void;
}
class Static_When_LogicalCondition {
static method_25747(stateManager: StateManager,component: When): void;
}

//net.minecraft.block.entity.SculkShriekerBlockEntity$VibrationCallback
class SculkShriekerBlockEntity_VibrationCallback extends JObject, Vibrations_Callback{
 accept(world: ServerWorld,pos: BlockPos,event: GameEvent,sourceEntity: Entity,entity: Entity,distance: number): void;
 getTag(): TagKey;
 getRange(): number;
 requiresTickingChunksAround(): boolean;
 onListen(): void;
 getPositionSource(): PositionSource;
 accepts(world: ServerWorld,pos: BlockPos,event: GameEvent,emitter: GameEvent_Emitter): boolean;
}
class Static_SculkShriekerBlockEntity_VibrationCallback {
static RANGE: number;
}

//net.minecraft.command.argument.ItemPredicateArgumentType
class ItemPredicateArgumentType extends JObject, ArgumentType{
 parse(reader: StringReader): Object;
 parse(stringReader: StringReader): ItemPredicateArgumentType_ItemStackPredicateArgument;
 getExamples(): Collection;
 listSuggestions(context: CommandContext,builder: SuggestionsBuilder): CompletableFuture;
}
class Static_ItemPredicateArgumentType {
static itemPredicate(commandRegistryAccess: CommandRegistryAccess): ItemPredicateArgumentType;
static getItemStackPredicate(context: CommandContext,name: string): Predicate;
static getItemStackPredicate(predicate: Predicate,nbt: NbtCompound): ItemPredicateArgumentType_ItemStackPredicateArgument;
static method_41982(predicate: Predicate,nbtCompound: NbtCompound,stack: ItemStack): boolean;
static method_41977(item: ItemStringReader_ItemResult): ItemPredicateArgumentType_ItemStackPredicateArgument;
static method_41979(tag: ItemStringReader_TagResult): ItemPredicateArgumentType_ItemStackPredicateArgument;
static method_41980(predicate: Predicate,stack: ItemStack): boolean;
static method_41978(itemResult: ItemStringReader_ItemResult,item2: RegistryEntry): boolean;
static EXAMPLES: Collection;
}

//net.minecraft.predicate.item.ItemPredicate
class ItemPredicate extends JObject{
 test(stack: ItemStack): boolean;
 toJson(): JsonElement;
}
class Static_ItemPredicate {
static deserializeAll(el: JsonElement): ItemPredicate[];
static fromJson(el: JsonElement): ItemPredicate;
static method_33267(id: Identifier): JsonSyntaxException;
static method_17872(identifier: Identifier): JsonSyntaxException;
static ANY: ItemPredicate;
}

//net.minecraft.entity.damage.DamageSource
class DamageSource extends JObject{
 getName(): string;
 toString(): string;
 getType(): DamageType;
 getSource(): Entity;
 getPosition(): Vec3d;
 getExhaustion(): number;
 getDeathMessage(killed: LivingEntity): Text;
 isIn(tag: TagKey): boolean;
 isOf(typeKey: RegistryKey): boolean;
 isScaledWithDifficulty(): boolean;
 getTypeRegistryEntry(): RegistryEntry;
 getAttacker(): Entity;
 isSourceCreativePlayer(): boolean;
 getStoredPosition(): Vec3d;
 isIndirect(): boolean;
}

//net.minecraft.client.gui.screen.ingame.BeaconScreen$BeaconButtonWidget
interface BeaconScreen_BeaconButtonWidget extends JObject{
 tick(level: number): void;
}

//net.minecraft.client.sound.SoundManager$SoundList
class SoundManager_SoundList extends JObject{
 reload(sounds: Map,soundResources: Map,system: SoundSystem): void;
}

//net.minecraft.client.gui.hud.PlayerListHud
class PlayerListHud extends JObject{
 clear(): void;
 render(context: DrawContext,scaledWindowWidth: number,scoreboard: Scoreboard,objective: ScoreboardObjective): void;
 setHeader(header: Text): void;
 setFooter(footer: Text): void;
 setVisible(visible: boolean): void;
 getPlayerName(entry: PlayerListEntry): Text;
}
class Static_PlayerListHud {
static method_45595(entry: PlayerListEntry): string;
static method_45594(playerEntry: PlayerListEntry): UUID;
static method_45591(i: number,uuid2: UUID): PlayerListHud_Heart;
static method_45592(entry: PlayerListEntry): number;
static method_45593(set: Set,uuid: UUID): boolean;
static method_46511(entry: PlayerListEntry): string;
static ENTRY_ORDERING: Comparator;
static ICONS_TEXTURE: Identifier;
static MAX_ROWS: number;
static HEART_OUTLINE_U: number;
static BLINKING_HEART_OUTLINE_U: number;
static HEART_U: number;
static HALF_HEART_U: number;
static GOLDEN_HEART_U: number;
static HALF_GOLDEN_HEART_U: number;
static BLINKING_HEART_U: number;
static BLINKING_HALF_HEART_U: number;
}

//net.minecraft.test.TimedTaskRunner$Trigger
class TimedTaskRunner_Trigger extends JObject{
 checkTrigger(): void;
}
class Static_TimedTaskRunner_Trigger {
static UNTRIGGERED_TICK: long;
}

//net.minecraft.client.render.entity.feature.SkinOverlayOwner
interface SkinOverlayOwner extends JObject{
 shouldRenderOverlay(): boolean;
}

//net.minecraft.util.JsonHelper
class JsonHelper extends JObject{
}
class Static_JsonHelper {
static getBoolean(object: JsonObject,element: string): boolean;
static getBoolean(object: JsonObject,element: string,defaultBoolean: boolean): boolean;
static getByte(object: JsonObject,element: string): byte;
static getByte(object: JsonObject,element: string,defaultByte: byte): byte;
static getShort(object: JsonObject,element: string,defaultShort: short): short;
static getShort(object: JsonObject,element: string): short;
static getChar(object: JsonObject,element: string): char;
static getChar(object: JsonObject,element: string,defaultChar: char): char;
static getInt(object: JsonObject,element: string,defaultInt: number): number;
static getInt(object: JsonObject,element: string): number;
static getLong(object: JsonObject,name: string): long;
static getLong(object: JsonObject,element: string,defaultLong: long): long;
static getFloat(object: JsonObject,element: string): number;
static getFloat(object: JsonObject,element: string,defaultFloat: number): number;
static getDouble(object: JsonObject,element: string): number;
static getDouble(object: JsonObject,element: string,defaultDouble: number): number;
static hasArray(object: JsonObject,element: string): boolean;
static getType(element: JsonElement): string;
static getObject(object: JsonObject,element: string): JsonObject;
static getObject(object: JsonObject,element: string,defaultObject: JsonObject): JsonObject;
static sort(entries: Collection,comparator: Comparator): Collection;
static getArray(object: JsonObject,element: string): JsonArray;
static getArray(object: JsonObject,name: string,defaultArray: JsonArray): JsonArray;
static asArray(element: JsonElement,name: string): JsonArray;
static getItem(object: JsonObject,key: string,defaultItem: Item): Item;
static getItem(object: JsonObject,key: string): Item;
static getString(object: JsonObject,element: string): string;
static getString(object: JsonObject,element: string,defaultStr: string): string;
static getElement(object: JsonObject,name: string): JsonElement;
static asInt(element: JsonElement,name: string): number;
static getBigDecimal(object: JsonObject,element: string): BigDecimal;
static getBigDecimal(object: JsonObject,element: string,defaultBigDecimal: BigDecimal): BigDecimal;
static deserialize(gson: Gson,reader: Reader,type: Class): Object;
static deserialize(gson: Gson,content: string,typeToken: TypeToken): Object;
static deserialize(element: JsonElement,name: string,context: JsonDeserializationContext,type: Class): Object;
static deserialize(reader: Reader,lenient: boolean): JsonObject;
static deserialize(gson: Gson,content: string,type: Class): Object;
static deserialize(content: string,lenient: boolean): JsonObject;
static deserialize(gson: Gson,reader: Reader,typeToken: TypeToken,lenient: boolean): Object;
static deserialize(gson: Gson,reader: Reader,type: Class,lenient: boolean): Object;
static deserialize(gson: Gson,content: string,typeToken: TypeToken,lenient: boolean): Object;
static deserialize(gson: Gson,content: string,type: Class,lenient: boolean): Object;
static deserialize(gson: Gson,reader: Reader,typeToken: TypeToken): Object;
static deserialize(object: JsonObject,element: string,context: JsonDeserializationContext,type: Class): Object;
static deserialize(reader: Reader): JsonObject;
static deserialize(content: string): JsonObject;
static deserialize(object: JsonObject,element: string,defaultValue: Object,context: JsonDeserializationContext,type: Class): Object;
static toSortedString(json: JsonElement): string;
static isNumber(element: JsonElement): boolean;
static hasString(object: JsonObject,element: string): boolean;
static asString(element: JsonElement,name: string): string;
static getBigInteger(object: JsonObject,element: string): BigInteger;
static getBigInteger(object: JsonObject,element: string,defaultBigInteger: BigInteger): BigInteger;
static asBoolean(element: JsonElement,name: string): boolean;
static asLong(element: JsonElement,name: string): long;
static writeSorted(writer: JsonWriter,json: JsonElement,comparator: Comparator): void;
static asObject(element: JsonElement,name: string): JsonObject;
static asFloat(element: JsonElement,name: string): number;
static asItem(element: JsonElement,name: string): Item;
static isString(element: JsonElement): boolean;
static deserializeNullable(gson: Gson,reader: Reader,typeToken: TypeToken,lenient: boolean): Object;
static deserializeNullable(gson: Gson,content: string,type: Class,lenient: boolean): Object;
static deserializeNullable(gson: Gson,reader: Reader,type: Class,lenient: boolean): Object;
static asDouble(object: JsonElement,name: string): number;
static hasJsonObject(object: JsonObject,element: string): boolean;
static hasBoolean(object: JsonObject,element: string): boolean;
static method_17995(string: string,string2: string): JsonSyntaxException;
static asByte(element: JsonElement,name: string): byte;
static isBoolean(object: JsonElement): boolean;
static hasNumber(object: JsonObject,element: string): boolean;
static hasPrimitive(object: JsonObject,element: string): boolean;
static hasElement(object: JsonObject,element: string): boolean;
static asChar(element: JsonElement,name: string): char;
static asBigDecimal(element: JsonElement,name: string): BigDecimal;
static asBigInteger(element: JsonElement,name: string): BigInteger;
static asShort(element: JsonElement,name: string): short;
static deserializeArray(content: string): JsonArray;
static deserializeArray(reader: Reader): JsonArray;
static GSON: Gson;
}

//net.minecraft.predicate.entity.EntityPredicates
class EntityPredicates extends JObject{
}
class Static_EntityPredicates {
static maxDistance(x: number,y: number,z: number,max: number): Predicate;
static method_5912(d: number,e: number,f: number,g: number,entity: Entity): boolean;
static method_5910(entity: Entity): boolean;
static rides(entity: Entity): Predicate;
static method_24517(entity: Entity): boolean;
static canBePushedBy(entity: Entity): Predicate;
static method_5915(entity: Entity,abstractTeam: AbstractTeam,collisionRule: AbstractTeam_CollisionRule,entityx: Entity): boolean;
static method_5914(entity: Entity): boolean;
static method_5906(entity: Entity,testedEntity: Entity): boolean;
static method_32878(entity: Entity): boolean;
static method_5908(entity: Entity): boolean;
static VALID_ENTITY: Predicate;
static VALID_LIVING_ENTITY: Predicate;
static NOT_MOUNTED: Predicate;
static VALID_INVENTORIES: Predicate;
static EXCEPT_CREATIVE_OR_SPECTATOR: Predicate;
static EXCEPT_SPECTATOR: Predicate;
static CAN_COLLIDE: Predicate;
}

//net.minecraft.util.logging.LogWriter
class LogWriter extends JObject, Closeable{
 write(object: Object): void;
 close(): void;
 getReader(): LogReader;
}
class Static_LogWriter {
static create(codec: Codec,path: Path): LogWriter;
static GSON: Gson;
}

//net.minecraft.recipe.SmithingTransformRecipe$Serializer
class SmithingTransformRecipe_Serializer extends JObject, RecipeSerializer{
 write(buf: PacketByteBuf,recipe: Recipe): void;
 write(packetByteBuf: PacketByteBuf,smithingTransformRecipe: SmithingTransformRecipe): void;
 read(id: Identifier,json: JsonObject): Recipe;
 read(id: Identifier,buf: PacketByteBuf): Recipe;
 read(identifier: Identifier,jsonObject: JsonObject): SmithingTransformRecipe;
 read(identifier: Identifier,packetByteBuf: PacketByteBuf): SmithingTransformRecipe;
}

//net.minecraft.entity.ai.brain.task.FindPointOfInterestTask
class FindPointOfInterestTask extends JObject{
}
class Static_FindPointOfInterestTask {
static create(poiPredicate: Predicate,poiPosModule: MemoryModuleType,potentialPoiPosModule: MemoryModuleType,onlyRunIfChild: boolean,entityStatus: Optional): Task;
static create(poiPredicate: Predicate,poiPosModule: MemoryModuleType,onlyRunIfChild: boolean,entityStatus: Optional): Task;
static method_46879(context: MemoryModuleType,bl: boolean,mutableLong: MutableLong,long2ObjectMap: Long2ObjectMap,predicate: Predicate,optional: Optional,taskContext: TaskTriggerer_TaskContext): App;
static method_46886(bl: boolean,mutableLong: MutableLong,long2ObjectMap: Long2ObjectMap,predicate: Predicate,optional: Optional,queryResult: MemoryQueryResult): TaskRunnable;
static method_46881(blockPos: BlockPos,registryEntry: RegistryEntry,blockPos2: BlockPos): boolean;
static method_46878(memoryModuleType: MemoryModuleType,singleTickTask: SingleTickTask,context: TaskTriggerer_TaskContext): App;
static method_46877(singleTickTask: SingleTickTask,poiPos: MemoryQueryResult): TaskRunnable;
static method_46885(bl: boolean,mutableLong: MutableLong,long2ObjectMap: Long2ObjectMap,predicate: Predicate,memoryQueryResult: MemoryQueryResult,optional: Optional,world: ServerWorld,entity: PathAwareEntity,time: long): boolean;
static method_46875(serverWorld: ServerWorld,l: long,m: long): FindPointOfInterestTask_RetryMarker;
static method_46880(pointOfInterestStorage: PointOfInterestStorage,predicate: Predicate,blockPos: BlockPos,memoryQueryResult: MemoryQueryResult,serverWorld: ServerWorld,optional: Optional,pathAwareEntity: PathAwareEntity,long2ObjectMap: Long2ObjectMap,poiType: RegistryEntry): void;
static findPathToPoi(entity: MobEntity,pois: Set): Path;
static method_46882(long2ObjectMap: Long2ObjectMap,l: long,pos: BlockPos): boolean;
static method_46874(l: long,entry: Long2ObjectMap_Entry): boolean;
static method_46876(serverWorld: ServerWorld,pathAwareEntity: PathAwareEntity,status: Byte): void;
static POI_SORTING_RADIUS: number;
}

//net.minecraft.client.render.model.Baker
interface Baker extends JObject{
 bake(id: Identifier,settings: ModelBakeSettings): BakedModel;
 getOrLoadModel(id: Identifier): UnbakedModel;
}

//net.minecraft.entity.vehicle.BoatEntity$1


//net.minecraft.unused.packageinfo.PackageInfo8022
interface PackageInfo8022 extends JObject{
}

//net.minecraft.network.packet.c2s.query.QueryPingC2SPacket
class QueryPingC2SPacket extends JObject, Packet{
 apply(serverQueryPacketListener: ServerQueryPacketListener): void;
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
 getStartTime(): long;
}

//net.minecraft.server.function.CommandFunctionManager
class CommandFunctionManager extends JObject{
 execute(fun: CommandFunction,source: ServerCommandSource,tracer: CommandFunctionManager_Tracer): number;
 execute(fun: CommandFunction,source: ServerCommandSource): number;
 getFunction(id: Identifier): Optional;
 getTag(id: Identifier): Collection;
 tick(): void;
 getScheduledCommandSource(): ServerCommandSource;
 getDispatcher(): CommandDispatcher;
 getMaxCommandChainLength(): number;
 setFunctions(loader: FunctionLoader): void;
 getFunctionTags(): Iterable;
 getAllFunctions(): Iterable;
}
class Static_CommandFunctionManager {
static NO_TRACE_IN_FUNCTION_TEXT: Text;
static TICK_TAG_ID: Identifier;
static LOAD_TAG_ID: Identifier;
}

//net.minecraft.network.packet.s2c.play.ExperienceOrbSpawnS2CPacket
class ExperienceOrbSpawnS2CPacket extends JObject, Packet{
 apply(clientPlayPacketListener: ClientPlayPacketListener): void;
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
 getId(): number;
 getExperience(): number;
 getX(): number;
 getY(): number;
 getZ(): number;
}

//net.minecraft.client.render.entity.model.BipedEntityModel$1


//net.minecraft.world.entity.EntityIndex
class EntityIndex extends JObject{
 add(entity: EntityLike): void;
 remove(entity: EntityLike): void;
 get(id: number): EntityLike;
 get(uuid: UUID): EntityLike;
 size(): number;
 forEach(filter: TypeFilter,consumer: LazyIterationConsumer): void;
 iterate(): Iterable;
}
class Static_EntityIndex {
static LOGGER: Logger;
}

//net.minecraft.network.packet.s2c.play.ChunkData$BlockEntityData
class ChunkData_BlockEntityData extends JObject{
}
class Static_ChunkData_BlockEntityData {
static of(blockEntity: BlockEntity): ChunkData_BlockEntityData;
}

//net.minecraft.structure.pool.StructurePools
class StructurePools extends JObject{
}
class Static_StructurePools {
static of(id: string): RegistryKey;
static register(structurePoolsRegisterable: Registerable,id: string,pool: StructurePool): void;
static bootstrap(structurePoolsRegisterable: Registerable): void;
static EMPTY: RegistryKey;
}

//net.minecraft.loot.provider.nbt.ContextLootNbtProvider$Serializer
class ContextLootNbtProvider_Serializer extends JObject, JsonSerializer{
 fromJson(json: JsonObject,context: JsonDeserializationContext): Object;
 fromJson(jsonObject: JsonObject,jsonDeserializationContext: JsonDeserializationContext): ContextLootNbtProvider;
 toJson(jsonObject: JsonObject,contextLootNbtProvider: ContextLootNbtProvider,jsonSerializationContext: JsonSerializationContext): void;
 toJson(json: JsonObject,object: Object,context: JsonSerializationContext): void;
}

//net.minecraft.network.PacketByteBuf$PacketReader
interface PacketByteBuf_PacketReader extends JObject, Function{
 asOptional(): PacketByteBuf_PacketReader;
}

//net.minecraft.client.realms.dto.ValueObject
class ValueObject extends JObject{
 toString(): string;
}
class Static_ValueObject {
static getName(f: Field): string;
static isStatic(f: Field): boolean;
}

//net.minecraft.server.world.EntityTrackingListener
interface EntityTrackingListener extends JObject{
 sendPacket(packet: Packet): void;
 getPlayer(): ServerPlayerEntity;
}

//net.minecraft.server.dedicated.AbstractPropertiesHandler
class AbstractPropertiesHandler extends JObject{
 saveProperties(path: Path): void;
}
class Static_AbstractPropertiesHandler {
static loadProperties(path: Path): Properties;
static method_16733(fun: Function,string: string): Number;
static combineParser(intParser: IntFunction,fallbackParser: Function): Function;
static wrapNumberParser(parser: Function): Function;
static method_16729(intFunction: IntFunction,fun: Function,string: string): Object;
static method_16731(fun: Function,unaryOperator: UnaryOperator,value: string): Object;
static LOGGER: Logger;
}

//net.minecraft.inventory.ContainerLock
class ContainerLock extends JObject{
 writeNbt(nbt: NbtCompound): void;
 canOpen(stack: ItemStack): boolean;
}
class Static_ContainerLock {
static fromNbt(nbt: NbtCompound): ContainerLock;
static EMPTY: ContainerLock;
static LOCK_KEY: string;
}

//net.minecraft.nbt.NbtOps$ByteArrayMerger
class NbtOps_ByteArrayMerger extends JObject, NbtOps_Merger{
 merge(nbt: NbtElement): NbtOps_Merger;
 getResult(): NbtElement;
}

//net.minecraft.unused.packageinfo.PackageInfo6294
interface PackageInfo6294 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6293
interface PackageInfo6293 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6292
interface PackageInfo6292 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6298
interface PackageInfo6298 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6297
interface PackageInfo6297 extends JObject{
}

//net.minecraft.world.gen.blockpredicate.WouldSurviveBlockPredicate
class WouldSurviveBlockPredicate extends JObject, BlockPredicate{
 test(structureWorldAccess: StructureWorldAccess,blockPos: BlockPos): boolean;
 test(world: Object,pos: Object): boolean;
 getType(): BlockPredicateType;
}
class Static_WouldSurviveBlockPredicate {
static method_39018(instance: RecordCodecBuilder_Instance): App;
static method_39020(predicate: WouldSurviveBlockPredicate): Vec3i;
static method_39019(predicate: WouldSurviveBlockPredicate): BlockState;
static CODEC: Codec;
}

//net.minecraft.unused.packageinfo.PackageInfo6296
interface PackageInfo6296 extends JObject{
}

//net.minecraft.loot.LootDataType$Validator
interface LootDataType_Validator extends JObject{
 run(reporter: LootTableReporter,key: LootDataKey,value: Object): void;
}

//net.minecraft.unused.packageinfo.PackageInfo6295
interface PackageInfo6295 extends JObject{
}

//net.minecraft.state.StateManager
class StateManager extends JObject{
 getProperty(name: string): Property;
 toString(): string;
 getProperties(): Collection;
 getOwner(): Object;
 getDefaultState(): State;
 getStates(): ImmutableList;
}
class Static_StateManager {
static method_30039(property: Property,supplier: Supplier): Property_Value;
static method_11666(property: Property,list: List): Stream;
static addFieldToMapCodec(mapCodec: MapCodec,defaultStateGetter: Supplier,key: string,property: Property): MapCodec;
static method_28484(factory: StateManager_Factory,object: Object,mapCodec: MapCodec,map: Map,list: List,list2: List): void;
static method_38859(string: string): void;
static method_28485(fun: Function,object: Object): State;
static method_11661(list: List,property: Property,comparable: Comparable): List;
static method_30038(property: Property,pair: Pair): State;
static method_30037(property: Property,state: State): Pair;
static VALID_NAME_PATTERN: Pattern;
}

//net.minecraft.client.font.TextRenderLayerSet$1


//net.minecraft.loot.function.ApplyBonusLootFunction$FormulaFactory
interface ApplyBonusLootFunction_FormulaFactory extends JObject{
 deserialize(functionJson: JsonObject,context: JsonDeserializationContext): ApplyBonusLootFunction_Formula;
}

//net.minecraft.entity.ai.NoPenaltySolidTargeting
class NoPenaltySolidTargeting extends JObject{
}
class Static_NoPenaltySolidTargeting {
static find(entity: PathAwareEntity,horizontalRange: number,verticalRange: number,startHeight: number,directionX: number,directionZ: number,rangeAngle: number): Vec3d;
static tryMake(entity: PathAwareEntity,horizontalRange: number,verticalRange: number,startHeight: number,directionX: number,directionZ: number,rangeAngle: number,posTargetInRange: boolean): BlockPos;
static method_31507(pathAwareEntity: PathAwareEntity,i: number,j: number,k: number,d: number,e: number,f: number,bl: boolean): BlockPos;
static method_31506(pathAwareEntity: PathAwareEntity,pos: BlockPos): boolean;
}

//net.minecraft.world.gen.densityfunction.DensityFunctionTypes$BinaryOperationLike
interface DensityFunctionTypes_BinaryOperationLike extends JObject, DensityFunction{
 type(): DensityFunctionTypes_BinaryOperationLike_Type;
 getCodecHolder(): CodecHolder;
 argument2(): DensityFunction;
 argument1(): DensityFunction;
}
class Static_DensityFunctionTypes_BinaryOperationLike {
static create(type: DensityFunctionTypes_BinaryOperationLike_Type,argument1: DensityFunction,argument2: DensityFunction): DensityFunctionTypes_BinaryOperationLike;
static LOGGER: Logger;
}

//net.minecraft.resource.Resource
class Resource extends JObject{
 getInputStream(): InputStream;
 getReader(): BufferedReader;
 getResourcePackName(): string;
 isAlwaysStable(): boolean;
 getMetadata(): ResourceMetadata;
 getPack(): ResourcePack;
}

//net.minecraft.structure.StructurePlacementData
class StructurePlacementData extends JObject{
 copy(): StructurePlacementData;
 getPosition(): BlockPos;
 shouldIgnoreEntities(): boolean;
 shouldInitializeMobs(): boolean;
 getRandomBlockInfos(infoLists: List,pos: BlockPos): StructureTemplate_PalettedBlockInfoList;
 shouldUpdateNeighbors(): boolean;
 setRandom(random: Random): StructurePlacementData;
 clearProcessors(): StructurePlacementData;
 addProcessor(processor: StructureProcessor): StructurePlacementData;
 setIgnoreEntities(ignoreEntities: boolean): StructurePlacementData;
 setMirror(mirror: BlockMirror): StructurePlacementData;
 setRotation(rotation: BlockRotation): StructurePlacementData;
 shouldPlaceFluids(): boolean;
 getProcessors(): List;
 getBoundingBox(): BlockBox;
 setPosition(position: BlockPos): StructurePlacementData;
 getMirror(): BlockMirror;
 getRotation(): BlockRotation;
 getRandom(pos: BlockPos): Random;
 setBoundingBox(boundingBox: BlockBox): StructurePlacementData;
 setPlaceFluids(placeFluids: boolean): StructurePlacementData;
 removeProcessor(processor: StructureProcessor): StructurePlacementData;
 setInitializeMobs(initializeMobs: boolean): StructurePlacementData;
 setUpdateNeighbors(updateNeighbors: boolean): StructurePlacementData;
}

//net.minecraft.command.argument.NbtPathArgumentType$AllListElementNode
class NbtPathArgumentType_AllListElementNode extends JObject, NbtPathArgumentType_PathNode{
 get(current: NbtElement,results: List): void;
 clear(current: NbtElement): number;
 set(current: NbtElement,source: Supplier): number;
 init(): NbtElement;
 getOrInit(current: NbtElement,source: Supplier,results: List): void;
}
class Static_NbtPathArgumentType_AllListElementNode {
static INSTANCE: NbtPathArgumentType_AllListElementNode;
}

//net.minecraft.item.ItemGroup$Builder
class ItemGroup_Builder extends JObject{
 entries(entryCollector: ItemGroup_EntryCollector): ItemGroup_Builder;
 build(): ItemGroup;
 displayName(displayName: Text): ItemGroup_Builder;
 special(): ItemGroup_Builder;
 texture(texture: string): ItemGroup_Builder;
 icon(iconSupplier: Supplier): ItemGroup_Builder;
 noScrollbar(): ItemGroup_Builder;
 noRenderedName(): ItemGroup_Builder;
}
class Static_ItemGroup_Builder {
static method_47325(): ItemStack;
static method_47316(displayContext: ItemGroup_DisplayContext,entries: ItemGroup_Entries): void;
static EMPTY_ENTRIES: ItemGroup_EntryCollector;
}

//net.minecraft.util.profiling.jfr.JfrProfiler
class JfrProfiler extends JObject, FlightProfiler{
 start(instanceType: InstanceType): boolean;
 stop(): Path;
 isAvailable(): boolean;
 startChunkGenerationProfiling(chunkPos: ChunkPos,world: RegistryKey,targetStatus: string): Finishable;
 startWorldLoadProfiling(): Finishable;
 isProfiling(): boolean;
 onPacketReceived(protocolId: number,packetId: number,remoteAddress: SocketAddress,bytes: number): void;
 onPacketSent(protocolId: number,packetId: number,remoteAddress: SocketAddress,bytes: number): void;
 onTick(tickTime: number): void;
}
class Static_JfrProfiler {
static getInstance(): JfrProfiler;
static method_37982(instanceType: InstanceType,string: string,recording: Recording): void;
static LOGGER: Logger;
static MINECRAFT: string;
static WORLD_GENERATION: string;
static TICKING: string;
static NETWORK: string;
static EVENTS: List;
static CONFIG_PATH: string;
static DATE_TIME_FORMAT: DateTimeFormatter;
static INSTANCE: JfrProfiler;
}

//net.minecraft.network.packet.s2c.play.PlayerSpawnPositionS2CPacket
class PlayerSpawnPositionS2CPacket extends JObject, Packet{
 apply(clientPlayPacketListener: ClientPlayPacketListener): void;
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
 getAngle(): number;
 getPos(): BlockPos;
}

//net.minecraft.entity.ai.brain.task.LayFrogSpawnTask
class LayFrogSpawnTask extends JObject{
}
class Static_LayFrogSpawnTask {
static create(frogSpawn: Block): Task;
static method_47182(block: Block,memoryQueryResult: MemoryQueryResult,world: ServerWorld,entity: LivingEntity,time: long): boolean;
static method_47181(block: Block,context: TaskTriggerer_TaskContext): App;
static method_47183(block: Block,attackTarget: MemoryQueryResult,walkTarget: MemoryQueryResult,isPregnant: MemoryQueryResult): TaskRunnable;
}

//net.minecraft.entity.ai.brain.Brain
class Brain extends JObject{
 clear(): void;
 encode(ops: DynamicOps): DataResult;
 copy(): Brain;
 tick(world: ServerWorld,entity: LivingEntity): void;
 getSchedule(): Schedule;
 doExclusively(activity: Activity): void;
 hasActivity(activity: Activity): boolean;
 remember(type: MemoryModuleType,value: Object): void;
 remember(type: MemoryModuleType,value: Optional): void;
 remember(type: MemoryModuleType,value: Object,expiry: long): void;
 refreshActivities(timeOfDay: long,time: long): void;
 getFirstPossibleNonCoreActivity(): Optional;
 resetPossibleActivities(activities: List): void;
 resetPossibleActivities(): void;
 getOptionalRegisteredMemory(type: MemoryModuleType): Optional;
 hasMemoryModuleWithValue(type: MemoryModuleType,value: Object): boolean;
 setTaskList(activity: Activity,indexedTasks: ImmutableList,requiredMemories: Set): void;
 setTaskList(activity: Activity,indexedTasks: ImmutableList,requiredMemories: Set,forgettingMemories: Set): void;
 setTaskList(activity: Activity,begin: number,tasks: ImmutableList,memoryType: MemoryModuleType): void;
 setTaskList(activity: Activity,begin: number,list: ImmutableList): void;
 setTaskList(activity: Activity,indexedTasks: ImmutableList): void;
 setDefaultActivity(activity: Activity): void;
 setCoreActivities(coreActivities: Set): void;
 forget(type: MemoryModuleType): void;
 stopAllTasks(world: ServerWorld,entity: LivingEntity): void;
 hasMemoryModule(type: MemoryModuleType): boolean;
 getRunningTasks(): List;
 getMemories(): Map;
 getPossibleActivities(): Set;
 isMemoryInState(type: MemoryModuleType,state: MemoryModuleState): boolean;
 getOptionalMemory(type: MemoryModuleType): Optional;
 setSchedule(schedule: Schedule): void;
 forgetAll(): void;
 getMemoryExpiry(type: MemoryModuleType): long;
}
class Static_Brain {
static createProfile(memoryModules: Collection,sensors: Collection): Brain_Profile;
static method_18910(activity2: Activity): Set;
static method_18887(index: Integer): Map;
static method_29518(object: Object,memoryValue: Object): boolean;
static createBrainCodec(memoryModules: Collection,sensors: Collection): Codec;
static method_28312(entry: Map_Entry): Brain_MemoryEntry;
static LOGGER: Logger;
static ACTIVITY_REFRESH_COOLDOWN: number;
}

//net.minecraft.loot.provider.number.ScoreLootNumberProvider
class ScoreLootNumberProvider extends JObject, LootNumberProvider{
 getType(): LootNumberProviderType;
 nextFloat(context: LootContext): number;
 getRequiredParameters(): Set;
}
class Static_ScoreLootNumberProvider {
static create(target: LootContext_EntityTarget,score: string): ScoreLootNumberProvider;
static create(target: LootContext_EntityTarget,score: string,scale: number): ScoreLootNumberProvider;
}

//net.minecraft.client.realms.UploadStatus
class UploadStatus extends JObject{
 bytesWritten: long;
 totalBytes: long;
}

//net.minecraft.client.sound.RepeatingAudioStream
class RepeatingAudioStream extends JObject, AudioStream{
 close(): void;
 getBuffer(size: number): ByteBuffer;
 getFormat(): AudioFormat;
}

//net.minecraft.unused.packageinfo.PackageInfo6299
interface PackageInfo6299 extends JObject{
}

//net.minecraft.server.command.GameRuleCommand$1


//net.minecraft.client.RunArgs$Network
class RunArgs_Network extends JObject{
 session: Session;
 userProperties: PropertyMap;
 profileProperties: PropertyMap;
 netProxy: Proxy;
}

//net.minecraft.test.StructureTestUtil$1


//net.minecraft.client.texture.TextureStitcher$Slot
class TextureStitcher_Slot extends JObject{
 toString(): string;
 fit(holder: TextureStitcher_Holder): boolean;
 addAllFilledSlots(consumer: TextureStitcher_SpriteConsumer): void;
 getX(): number;
 getY(): number;
}

//net.minecraft.entity.ai.brain.task.ForgetAttackTargetTask
class ForgetAttackTargetTask extends JObject{
}
class Static_ForgetAttackTargetTask {
static create(alternativeCondition: Predicate,forgetCallback: BiConsumer,shouldForgetIfTargetUnreachable: boolean): Task;
static create(): Task;
static create(alternativeCondition: Predicate): Task;
static create(forgetCallback: BiConsumer): Task;
static method_47134(entity: MobEntity,target: LivingEntity): void;
static method_47140(bl: boolean,predicate: Predicate,biConsumer: BiConsumer,context: TaskTriggerer_TaskContext): App;
static method_47133(entity: LivingEntity): boolean;
static method_47141(entity: LivingEntity): boolean;
static cannotReachTarget(livingEntity: LivingEntity,optional: Optional): boolean;
static method_47135(taskContext: TaskTriggerer_TaskContext,memoryQueryResult: MemoryQueryResult,bl: boolean,memoryQueryResult2: MemoryQueryResult,predicate: Predicate,biConsumer: BiConsumer,world: ServerWorld,entity: MobEntity,time: long): boolean;
static method_47142(entity: MobEntity,target: LivingEntity): void;
static method_47136(taskContext: TaskTriggerer_TaskContext,bl: boolean,predicate: Predicate,biConsumer: BiConsumer,attackTarget: MemoryQueryResult,cantReachWalkTargetSince: MemoryQueryResult): TaskRunnable;
static REMEMBER_TIME: number;
}

//net.minecraft.client.render.model.json.ModelElementFace
class ModelElementFace extends JObject{
 cullFace: Direction;
 tintIndex: number;
 textureId: string;
 textureData: ModelElementTexture;
}
class Static_ModelElementFace {
static field_32789: number;
}

//net.minecraft.item.ItemGroup
class ItemGroup extends JObject{
 contains(stack: ItemStack): boolean;
 getType(): ItemGroup_Type;
 getDisplayName(): Text;
 getTexture(): string;
 isSpecial(): boolean;
 shouldDisplay(): boolean;
 reloadSearchProvider(): void;
 getIcon(): ItemStack;
 shouldRenderName(): boolean;
 setSearchProviderReloader(searchProviderReloader: Consumer): void;
 getSearchTabStacks(): Collection;
 getColumn(): number;
 hasScrollbar(): boolean;
 getRow(): ItemGroup_Row;
 hasStacks(): boolean;
 updateEntries(displayContext: ItemGroup_DisplayContext): void;
 getDisplayStacks(): Collection;
}
class Static_ItemGroup {
static create(location: ItemGroup_Row,column: number): ItemGroup_Builder;
}

//net.minecraft.network.packet.s2c.play.OpenWrittenBookS2CPacket
class OpenWrittenBookS2CPacket extends JObject, Packet{
 apply(clientPlayPacketListener: ClientPlayPacketListener): void;
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
 getHand(): Hand;
}

//net.minecraft.unused.packageinfo.PackageInfo8008
interface PackageInfo8008 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6272
interface PackageInfo6272 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6271
interface PackageInfo6271 extends JObject{
}

//net.minecraft.enchantment.Enchantment
class Enchantment extends JObject{
 getName(level: number): Text;
 getMinLevel(): number;
 getMaxLevel(): number;
 isAvailableForRandomSelection(): boolean;
 getProtectionAmount(level: number,source: DamageSource): number;
 getRarity(): Enchantment_Rarity;
 canCombine(other: Enchantment): boolean;
 getAttackDamage(level: number,group: EntityGroup): number;
 isAvailableForEnchantedBookOffer(): boolean;
 isCursed(): boolean;
 getTranslationKey(): string;
 onUserDamaged(user: LivingEntity,attacker: Entity,level: number): void;
 getEquipment(entity: LivingEntity): Map;
 onTargetDamaged(user: LivingEntity,target: Entity,level: number): void;
 isTreasure(): boolean;
 getMinPower(level: number): number;
 isAcceptableItem(stack: ItemStack): boolean;
 getMaxPower(level: number): number;
 target: EnchantmentTarget;
}
class Static_Enchantment {
static byRawId(id: number): Enchantment;
}

//net.minecraft.unused.packageinfo.PackageInfo6270
interface PackageInfo6270 extends JObject{
}

//net.minecraft.util.profiler.RecordDumper
class RecordDumper extends JObject{
 createDump(samplers: Set,deviations: Map,result: ProfileResult): Path;
}
class Static_RecordDumper {
static method_37206(i: number): String[];
static method_37210(dateTimeFormatter: DateTimeFormatter,path: Path,sampler: Sampler,deviation: Deviation): void;
static method_37207(i: number,data: Sampler_Data): string;
static method_37211(dateTimeFormatter: DateTimeFormatter,path: Path,sampler: Sampler,sampleDeviations: List): void;
static DEBUG_PROFILING_DIRECTORY: Path;
static METRICS_DIRECTORY: string;
static DEVIATIONS_DIRECTORY: string;
static FILE_NAME: string;
static LOGGER: Logger;
}

//net.minecraft.unused.packageinfo.PackageInfo6276
interface PackageInfo6276 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6275
interface PackageInfo6275 extends JObject{
}

//net.minecraft.world.BlockLocating
class BlockLocating extends JObject{
}
class Static_BlockLocating {
static getLargestRectangle(center: BlockPos,primaryAxis: Direction_Axis,primaryMaxBlocks: number,secondaryAxis: Direction_Axis,secondaryMaxBlocks: number,predicate: Predicate): BlockLocating_Rectangle;
static findLargestRectangle(heights: number[]): Pair;
static moveWhile(predicate: Predicate,pos: BlockPos_Mutable,direction: Direction,max: number): number;
static findColumnEnd(world: BlockView,pos: BlockPos,intermediateBlock: Block,direction: Direction,endBlock: Block): Optional;
}

//net.minecraft.unused.packageinfo.PackageInfo6274
interface PackageInfo6274 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6273
interface PackageInfo6273 extends JObject{
}

//net.minecraft.client.gui.screen.world.EditGameRulesScreen$RuleListWidget$1


//net.minecraft.client.option.ServerList
class ServerList extends JObject{
 add(serverInfo: ServerInfo,hidden: boolean): void;
 remove(serverInfo: ServerInfo): void;
 get(index: number): ServerInfo;
 get(address: string): ServerInfo;
 size(): number;
 set(index: number,serverInfo: ServerInfo): void;
 loadFile(): void;
 saveFile(): void;
 tryUnhide(address: string): ServerInfo;
 swapEntries(index1: number,index2: number): void;
}
class Static_ServerList {
static replace(serverInfo: ServerInfo,serverInfos: List): boolean;
static updateServerListEntry(serverInfo: ServerInfo): void;
static method_44090(serverInfo: ServerInfo): void;
static LOGGER: Logger;
static IO_EXECUTOR: TaskExecutor;
static MAX_HIDDEN_ENTRIES: number;
}

//net.minecraft.test.TestListener
interface TestListener extends JObject{
 onFailed(test: GameTestState): void;
 onPassed(test: GameTestState): void;
 onStarted(test: GameTestState): void;
}

//net.minecraft.client.texture.SpriteContents$AnimationFrame
class SpriteContents_AnimationFrame extends JObject{
}

//net.minecraft.data.server.loottable.vanilla.VanillaBarterLootTableGenerator
class VanillaBarterLootTableGenerator extends JObject, LootTableGenerator{
 accept(exporter: BiConsumer): void;
}

//net.minecraft.unused.packageinfo.PackageInfo6279
interface PackageInfo6279 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6278
interface PackageInfo6278 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6277
interface PackageInfo6277 extends JObject{
}

//net.minecraft.client.gui.widget.ClickableWidget
class ClickableWidget extends JObject, Drawable, Element, Widget, Selectable{
 getMessage(): Text;
 getType(): Selectable_SelectionType;
 getWidth(): number;
 getHeight(): number;
 setX(x: number): void;
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
 isSelected(): boolean;
 setMessage(message: Text): void;
 isNarratable(): boolean;
 appendNarrations(builder: NarrationMessageBuilder): void;
 setFocused(focused: boolean): void;
 isMouseOver(mouseX: number,mouseY: number): boolean;
 getNavigationFocus(): ScreenRect;
 isFocused(): boolean;
 getNavigationPath(navigation: GuiNavigation): GuiNavigationPath;
 getNavigationOrder(): number;
 getX(): number;
 getY(): number;
 setTooltip(tooltip: Tooltip): void;
 forEachChild(consumer: Consumer): void;
 drawTexture(context: DrawContext,texture: Identifier,x: number,y: number,u: number,v: number,hoveredVOffset: number,width: number,height: number,textureWidth: number,textureHeight: number): void;
 setAlpha(alpha: number): void;
 setY(y: number): void;
 getTooltip(): Tooltip;
 mouseReleased(mouseX: number,mouseY: number,button: number): boolean;
 mouseClicked(mouseX: number,mouseY: number,button: number): boolean;
 mouseDragged(mouseX: number,mouseY: number,button: number,deltaX: number,deltaY: number): boolean;
 isHovered(): boolean;
 setNavigationOrder(navigationOrder: number): void;
 onClick(mouseX: number,mouseY: number): void;
 playDownSound(soundManager: SoundManager): void;
 setTooltipDelay(delay: number): void;
 setWidth(width: number): void;
 onRelease(mouseX: number,mouseY: number): void;
 active: boolean;
 visible: boolean;
}
class Static_ClickableWidget {
static getNarrationMessage(message: Text): MutableText;
static drawScrollableText(context: DrawContext,textRenderer: TextRenderer,text: Text,left: number,top: number,right: number,bottom: number,color: number): void;
static WIDGETS_TEXTURE: Identifier;
static ACCESSIBILITY_TEXTURE: Identifier;
static field_43055: number;
static field_43056: number;
}

//net.minecraft.unused.packageinfo.PackageInfo6283
interface PackageInfo6283 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6282
interface PackageInfo6282 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6281
interface PackageInfo6281 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6280
interface PackageInfo6280 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6287
interface PackageInfo6287 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6286
interface PackageInfo6286 extends JObject{
}

//net.minecraft.world.block.ChainRestrictedNeighborUpdater$Entry
interface ChainRestrictedNeighborUpdater_Entry extends JObject{
 update(world: World): boolean;
}

//net.minecraft.unused.packageinfo.PackageInfo6285
interface PackageInfo6285 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6284
interface PackageInfo6284 extends JObject{
}

//net.minecraft.client.gui.screen.pack.ResourcePackOrganizer$AbstractPack
class ResourcePackOrganizer_AbstractPack extends JObject, ResourcePackOrganizer_Pack{
 getName(): string;
 getSource(): ResourcePackSource;
 getDisplayName(): Text;
 getDescription(): Text;
 isAlwaysEnabled(): boolean;
 isPinned(): boolean;
 getCompatibility(): ResourcePackCompatibility;
 canMoveTowardStart(): boolean;
 moveTowardEnd(): void;
 canMoveTowardEnd(): boolean;
 getIconId(): Identifier;
 moveTowardStart(): void;
}

//net.minecraft.command.argument.serialize.ConstantArgumentSerializer
class ConstantArgumentSerializer extends JObject, ArgumentSerializer{
 getArgumentTypeProperties(argumentType: ArgumentType): ArgumentSerializer_ArgumentTypeProperties;
 getArgumentTypeProperties(argumentType: ArgumentType): ConstantArgumentSerializer_Properties;
 fromPacket(buf: PacketByteBuf): ArgumentSerializer_ArgumentTypeProperties;
 fromPacket(packetByteBuf: PacketByteBuf): ConstantArgumentSerializer_Properties;
 writePacket(properties: ArgumentSerializer_ArgumentTypeProperties,buf: PacketByteBuf): void;
 writePacket(properties: ConstantArgumentSerializer_Properties,packetByteBuf: PacketByteBuf): void;
 writeJson(properties: ArgumentSerializer_ArgumentTypeProperties,json: JsonObject): void;
 writeJson(properties: ConstantArgumentSerializer_Properties,jsonObject: JsonObject): void;
}
class Static_ConstantArgumentSerializer {
static of(typeSupplier: Function): ConstantArgumentSerializer;
static of(typeSupplier: Supplier): ConstantArgumentSerializer;
static method_42000(supplier: Supplier,commandRegistryAccess: CommandRegistryAccess): ArgumentType;
}

//net.minecraft.structure.EndCityGenerator$Part
interface EndCityGenerator_Part extends JObject{
 init(): void;
 create(manager: StructureTemplateManager,depth: number,root: EndCityGenerator_Piece,pos: BlockPos,pieces: List,random: Random): boolean;
}

//net.minecraft.world.gen.surfacebuilder.MaterialRules$BiomeMaterialCondition
class MaterialRules_BiomeMaterialCondition extends JObject, MaterialRules_MaterialCondition{
 equals(object: Object): boolean;
 toString(): string;
 hashCode(): number;
 apply(materialRuleContext: MaterialRules_MaterialRuleContext): MaterialRules_BooleanSupplier;
 apply(context: Object): Object;
 codec(): CodecHolder;
}
class Static_MaterialRules_BiomeMaterialCondition {
static method_40159(biomeMaterialCondition: MaterialRules_BiomeMaterialCondition): List;
static CODEC: CodecHolder;
}

//net.minecraft.client.texture.atlas.AtlasSourceManager
class AtlasSourceManager extends JObject{
}
class Static_AtlasSourceManager {
static register(id: string,codec: Codec): AtlasSourceType;
static method_47679(type: AtlasSourceType): DataResult;
static method_49634(identifier: Identifier): string;
static method_47677(id: Identifier): DataResult;
static method_49635(identifier: Identifier): string;
static SOURCE_TYPE_BY_ID: BiMap;
static SINGLE: AtlasSourceType;
static DIRECTORY: AtlasSourceType;
static FILTER: AtlasSourceType;
static UNSTITCH: AtlasSourceType;
static PALETTED_PERMUTATIONS: AtlasSourceType;
static CODEC: Codec;
static TYPE_CODEC: Codec;
static LIST_CODEC: Codec;
}

//net.minecraft.util.BlockRotation$1


//net.minecraft.entity.ai.brain.task.GoToRememberedPositionTask
class GoToRememberedPositionTask extends JObject{
}
class Static_GoToRememberedPositionTask {
static create(posSource: MemoryModuleType,speed: number,range: number,requiresWalkTarget: boolean,posGetter: Function): SingleTickTask;
static createEntityBased(entityModule: MemoryModuleType,speed: number,range: number,requiresWalkTarget: boolean): SingleTickTask;
static createPosBased(posModule: MemoryModuleType,speed: number,range: number,requiresWalkTarget: boolean): Task;
static method_47089(taskContext: TaskTriggerer_TaskContext,memoryQueryResult: MemoryQueryResult,bl: boolean,fun: Function,memoryQueryResult2: MemoryQueryResult,i: number,f: number,world: ServerWorld,entity: PathAwareEntity,time: long): boolean;
static method_47093(memoryModuleType: MemoryModuleType,bl: boolean,fun: Function,i: number,f: number,context: TaskTriggerer_TaskContext): App;
static method_47090(taskContext: TaskTriggerer_TaskContext,bl: boolean,fun: Function,i: number,f: number,walkTarget: MemoryQueryResult,posSourcex: MemoryQueryResult): TaskRunnable;
}

//net.minecraft.network.packet.c2s.login.LoginQueryResponseC2SPacket
class LoginQueryResponseC2SPacket extends JObject, Packet{
 apply(serverLoginPacketListener: ServerLoginPacketListener): void;
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
 getQueryId(): number;
 getResponse(): PacketByteBuf;
}
class Static_LoginQueryResponseC2SPacket {
static method_43901(buf2: PacketByteBuf): PacketByteBuf;
static method_43900(buf2: PacketByteBuf,response: PacketByteBuf): void;
static MAX_PAYLOAD_SIZE: number;
}

//net.minecraft.unused.packageinfo.PackageInfo6289
interface PackageInfo6289 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6288
interface PackageInfo6288 extends JObject{
}

//net.minecraft.world.gen.WorldPresets$Registrar
class WorldPresets_Registrar extends JObject{
 bootstrap(): void;
}

//net.minecraft.registry.Registry
interface Registry extends JObject, Keyable, IndexedIterable{
 get(id: Identifier): Object;
 get(key: RegistryKey): Object;
 stream(): Stream;
 contains(key: RegistryKey): boolean;
 getKey(): RegistryKey;
 getKey(entry: Object): Optional;
 getId(value: Object): Identifier;
 keys(ops: DynamicOps): Stream;
 freeze(): Registry;
 getEntry(value: Object): RegistryEntry;
 getEntry(rawId: number): Optional;
 getEntry(key: RegistryKey): Optional;
 getKeys(): Set;
 createEntry(value: Object): RegistryEntry_Reference;
 getOrCreateEntryList(tag: TagKey): RegistryEntryList_Named;
 getTagCreatingWrapper(): RegistryWrapper_Impl;
 streamTagsAndEntries(): Stream;
 getCodec(): Codec;
 getLifecycle(): Lifecycle;
 getOrThrow(key: RegistryKey): Object;
 streamEntries(): Stream;
 streamTags(): Stream;
 entryOf(key: RegistryKey): RegistryEntry_Reference;
 createEntryCodec(): Codec;
 getEntryLifecycle(entry: Object): Lifecycle;
 getRandom(random: Random): Optional;
 getOrEmpty(key: RegistryKey): Optional;
 getOrEmpty(id: Identifier): Optional;
 getRawId(value: Object): number;
 getEntrySet(): Set;
 getIds(): Set;
 containsId(id: Identifier): boolean;
 getEntryList(tag: TagKey): Optional;
 clearTags(): void;
 getEntryOwner(): RegistryEntryOwner;
 iterateEntries(tag: TagKey): Iterable;
 populateTags(tagEntries: Map): void;
 getIndexedEntries(): IndexedIterable;
 getReadOnlyWrapper(): RegistryWrapper_Impl;
}
class Static_Registry {
static register(registry: Registry,rawId: number,id: string,entry: Object): Object;
static register(registry: Registry,key: RegistryKey,entry: Object): Object;
static register(registry: Registry,id: Identifier,entry: Object): Object;
static register(registry: Registry,id: string,entry: Object): Object;
static method_34028(dynamicOps: DynamicOps,id: Identifier): Object;
static registerReference(registry: Registry,key: RegistryKey,entry: Object): RegistryEntry_Reference;
static registerReference(registry: Registry,id: Identifier,entry: Object): RegistryEntry_Reference;
}

//net.minecraft.resource.fs.ResourceFile
interface ResourceFile extends JObject{
}
class Static_ResourceFile {
static EMPTY: ResourceFile;
static RELATIVE: ResourceFile;
}

//net.minecraft.resource.SinglePreparationResourceReloader
class SinglePreparationResourceReloader extends JObject, ResourceReloader{
 reload(synchronizer: ResourceReloader_Synchronizer,manager: ResourceManager,prepareProfiler: Profiler,applyProfiler: Profiler,prepareExecutor: Executor,applyExecutor: Executor): CompletableFuture;
}

//net.minecraft.client.render.entity.RabbitEntityRenderer$1


//net.minecraft.client.render.Camera$Projection
class Camera_Projection extends JObject{
 getPosition(factorX: number,factorY: number): Vec3d;
 getBottomLeft(): Vec3d;
 getBottomRight(): Vec3d;
 getTopLeft(): Vec3d;
 getTopRight(): Vec3d;
}

//net.minecraft.client.world.ClientChunkManager$ClientChunkMap
class ClientChunkManager_ClientChunkMap extends JObject{
}

//net.minecraft.world.PersistentStateManager
class PersistentStateManager extends JObject{
 get(readFunction: Function,id: string): PersistentState;
 set(id: string,state: PersistentState): void;
 save(): void;
 getOrCreate(readFunction: Function,supplier: Supplier,id: string): PersistentState;
 readNbt(id: string,dataVersion: number): NbtCompound;
}
class Static_PersistentStateManager {
static LOGGER: Logger;
}

//net.minecraft.client.gl.Framebuffer
class Framebuffer extends JObject{
 clear(getError: boolean): void;
 delete(): void;
 resize(width: number,height: number,getError: boolean): void;
 endRead(): void;
 getColorAttachment(): number;
 endWrite(): void;
 beginWrite(setViewport: boolean): void;
 draw(width: number,height: number,disableBlend: boolean): void;
 draw(width: number,height: number): void;
 checkFramebufferStatus(): void;
 initFbo(width: number,height: number,getError: boolean): void;
 setTexFilter(texFilter: number): void;
 beginRead(): void;
 copyDepthFrom(framebuffer: Framebuffer): void;
 setClearColor(r: number,g: number,b: number,a: number): void;
 getDepthAttachment(): number;
 textureWidth: number;
 textureHeight: number;
 viewportWidth: number;
 viewportHeight: number;
 useDepthAttachment: boolean;
 fbo: number;
 texFilter: number;
}
class Static_Framebuffer {
static method_36809(): number[];
static method_22598(): void;
static field_31901: number;
static field_31902: number;
static field_31903: number;
static field_31904: number;
}

//net.minecraft.client.gui.screen.world.LevelScreenProvider
interface LevelScreenProvider extends JObject{
 createEditScreen(parent: CreateWorldScreen,generatorOptionsHolder: GeneratorOptionsHolder): Screen;
}
class Static_LevelScreenProvider {
static method_41858(createWorldScreen: CreateWorldScreen,config: FlatChunkGeneratorConfig): void;
static method_41857(flatChunkGeneratorConfig: FlatChunkGeneratorConfig,dynamicRegistryManager: DynamicRegistryManager_Immutable,dimensionsRegistryHolder: DimensionOptionsRegistryHolder): DimensionOptionsRegistryHolder;
static createModifier(config: FlatChunkGeneratorConfig): GeneratorOptionsHolder_RegistryAwareModifier;
static createModifier(biomeEntry: RegistryEntry): GeneratorOptionsHolder_RegistryAwareModifier;
static method_41859(parent: CreateWorldScreen,generatorOptionsHolder: GeneratorOptionsHolder): Screen;
static method_41862(registryEntry: RegistryEntry,dynamicRegistryManager: DynamicRegistryManager_Immutable,dimensionsRegistryHolder: DimensionOptionsRegistryHolder): DimensionOptionsRegistryHolder;
static method_41860(createWorldScreen: CreateWorldScreen,biomeEntry: RegistryEntry): void;
static method_41863(parent: CreateWorldScreen,generatorOptionsHolder: GeneratorOptionsHolder): Screen;
static WORLD_PRESET_TO_SCREEN_PROVIDER: Map;
}

//net.minecraft.server.function.FunctionLoader
class FunctionLoader extends JObject, ResourceReloader{
 get(id: Identifier): Optional;
 reload(synchronizer: ResourceReloader_Synchronizer,manager: ResourceManager,prepareProfiler: Profiler,applyProfiler: Profiler,prepareExecutor: Executor,applyExecutor: Executor): CompletableFuture;
 getTags(): Iterable;
 getFunctions(): Map;
 getTagOrEmpty(id: Identifier): Collection;
}
class Static_FunctionLoader {
static readLines(resource: Resource): List;
static method_29457(identifier: Identifier,builder: ImmutableMap_Builder,fun: CommandFunction,ex: Throwable): Object;
static method_29452(builder: ImmutableMap_Builder,id: Identifier,functionFuture: CompletableFuture): void;
static method_45141(resourceManager: ResourceManager): Map;
static method_29455(map: Map,unused: Void,ex: Throwable): Map;
static LOGGER: Logger;
static FINDER: ResourceFinder;
}

//net.minecraft.client.render.debug.RaidCenterDebugRenderer
class RaidCenterDebugRenderer extends JObject, DebugRenderer_Renderer{
 render(matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,cameraX: number,cameraY: number,cameraZ: number): void;
 setRaidCenters(raidCenters: Collection): void;
}
class Static_RaidCenterDebugRenderer {
static drawString(matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,string: string,pos: BlockPos,color: number): void;
static drawRaidCenter(matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,pos: BlockPos): void;
static RANGE: number;
static DRAWN_STRING_SIZE: number;
}

//net.minecraft.server.network.ServerLoginNetworkHandler
class ServerLoginNetworkHandler extends JObject, ServerLoginPacketListener, TickablePacketListener{
 tick(): void;
 disconnect(reason: Text): void;
 onHello(packet: LoginHelloC2SPacket): void;
 isConnectionOpen(): boolean;
 onDisconnected(reason: Text): void;
 acceptPlayer(): void;
 getConnectionInfo(): string;
 onQueryResponse(packet: LoginQueryResponseC2SPacket): void;
 onKey(packet: LoginKeyC2SPacket): void;
}
class Static_ServerLoginNetworkHandler {
static isValidName(name: string): boolean;
static method_40084(c: number): boolean;
static NEXT_AUTHENTICATOR_THREAD_ID: AtomicInteger;
static LOGGER: Logger;
static TIMEOUT_TICKS: number;
static RANDOM: Random;
}

//net.minecraft.world.gen.GenerationStep
class GenerationStep extends JObject{
}

//net.minecraft.client.option.SimpleOption$TooltipFactory
interface SimpleOption_TooltipFactory extends JObject{
 apply(value: Object): Tooltip;
}

//net.minecraft.util.profiling.jfr.FlightProfiler
interface FlightProfiler extends JObject{
 start(instanceType: InstanceType): boolean;
 stop(): Path;
 isAvailable(): boolean;
 startChunkGenerationProfiling(chunkPos: ChunkPos,world: RegistryKey,targetStatus: string): Finishable;
 startWorldLoadProfiling(): Finishable;
 isProfiling(): boolean;
 onPacketReceived(protocolId: number,packetId: number,remoteAddress: SocketAddress,bytes: number): void;
 onPacketSent(protocolId: number,packetId: number,remoteAddress: SocketAddress,bytes: number): void;
 onTick(tickTime: number): void;
}
class Static_FlightProfiler {
static INSTANCE: FlightProfiler;
}

//net.minecraft.block.EntityShapeContext
class EntityShapeContext extends JObject, ShapeContext{
 getEntity(): Entity;
 isDescending(): boolean;
 isAbove(shape: VoxelShape,pos: BlockPos,defaultValue: boolean): boolean;
 canWalkOnFluid(stateAbove: FluidState,state: FluidState): boolean;
 isHolding(item: Item): boolean;
}
class Static_EntityShapeContext {
static method_27868(fluidState: FluidState): boolean;
static method_27867(fluidState: FluidState): boolean;
static ABSENT: ShapeContext;
}

//net.minecraft.registry.RegistryOps$1


//net.minecraft.registry.RegistryOps$2


//net.minecraft.client.gui.hud.DebugHud$1


//net.minecraft.client.render.debug.PathfindingDebugRenderer
class PathfindingDebugRenderer extends JObject, DebugRenderer_Renderer{
 render(matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,cameraX: number,cameraY: number,cameraZ: number): void;
 addPath(id: number,path: Path,nodeSize: number): void;
}
class Static_PathfindingDebugRenderer {
static getManhattanDistance(pos: BlockPos,x: number,y: number,z: number): number;
static drawPath(matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,path: Path,nodeSize: number,drawDebugNodes: boolean,drawLabels: boolean,cameraX: number,cameraY: number,cameraZ: number): void;
static drawPathLines(matrices: MatrixStack,vertexConsumers: VertexConsumer,path: Path,cameraX: number,cameraY: number,cameraZ: number): void;
static MAX_PATH_AGE: long;
static RANGE: number;
static field_32908: boolean;
static field_32909: boolean;
static field_32910: boolean;
static field_32911: boolean;
static field_32912: boolean;
static DRAWN_STRING_SIZE: number;
}

//net.minecraft.test.TestFailureLogger
class TestFailureLogger extends JObject{
}
class Static_TestFailureLogger {
static stop(): void;
static passTest(test: GameTestState): void;
static failTest(test: GameTestState): void;
static setCompletionListener(listener: TestCompletionListener): void;
static completionListener: TestCompletionListener;
}

//net.minecraft.network.listener.ClientLoginPacketListener
interface ClientLoginPacketListener extends JObject, PacketListener{
 onCompression(packet: LoginCompressionS2CPacket): void;
 onHello(packet: LoginHelloS2CPacket): void;
 onDisconnect(packet: LoginDisconnectS2CPacket): void;
 onSuccess(packet: LoginSuccessS2CPacket): void;
 onQueryRequest(packet: LoginQueryRequestS2CPacket): void;
}

//net.minecraft.util.math.random.BaseRandom
interface BaseRandom extends JObject, Random{
 next(bits: number): number;
 nextDouble(): number;
 nextInt(bound: number): number;
 nextInt(): number;
 nextLong(): long;
 nextBoolean(): boolean;
 nextFloat(): number;
}
class Static_BaseRandom {
static FLOAT_MULTIPLIER: number;
static DOUBLE_MULTIPLIER: number;
}

//net.minecraft.block.FluidDrainable
interface FluidDrainable extends JObject{
 tryDrainFluid(world: WorldAccess,pos: BlockPos,state: BlockState): ItemStack;
 getBucketFillSound(): Optional;
}

//net.minecraft.network.packet.s2c.play.StopSoundS2CPacket
class StopSoundS2CPacket extends JObject, Packet{
 apply(listener: PacketListener): void;
 apply(clientPlayPacketListener: ClientPlayPacketListener): void;
 write(buf: PacketByteBuf): void;
 getCategory(): SoundCategory;
 getSoundId(): Identifier;
}
class Static_StopSoundS2CPacket {
static CATEGORY_MASK: number;
static SOUND_ID_MASK: number;
}

//net.minecraft.entity.ai.brain.task.FrogEatEntityTask$1


//net.minecraft.client.item.TooltipContext
interface TooltipContext extends JObject{
 isCreative(): boolean;
 isAdvanced(): boolean;
}
class Static_TooltipContext {
static BASIC: TooltipContext_Default;
static ADVANCED: TooltipContext_Default;
}

//net.minecraft.entity.ai.brain.task.DefeatTargetTask
class DefeatTargetTask extends JObject{
}
class Static_DefeatTargetTask {
static create(celebrationDuration: number,predicate: BiPredicate): Task;
static method_47127(biPredicate: BiPredicate,i: number,context: TaskTriggerer_TaskContext): App;
static method_47125(taskContext: TaskTriggerer_TaskContext,memoryQueryResult: MemoryQueryResult,biPredicate: BiPredicate,memoryQueryResult2: MemoryQueryResult,i: number,memoryQueryResult3: MemoryQueryResult,memoryQueryResult4: MemoryQueryResult,world: ServerWorld,entity: LivingEntity,time: long): boolean;
static method_47126(taskContext: TaskTriggerer_TaskContext,biPredicate: BiPredicate,i: number,attackTarget: MemoryQueryResult,angryAt: MemoryQueryResult,celebrateLocation: MemoryQueryResult,dancing: MemoryQueryResult): TaskRunnable;
}

//net.minecraft.world.MutableWorldProperties
interface MutableWorldProperties extends JObject, WorldProperties{
 setSpawnPos(pos: BlockPos,angle: number): void;
 setSpawnX(spawnX: number): void;
 setSpawnZ(spawnZ: number): void;
 setSpawnAngle(spawnAngle: number): void;
 setSpawnY(spawnY: number): void;
}

//net.minecraft.block.entity.BlockEntityType$Builder
class BlockEntityType_Builder extends JObject{
 build(type: Type): BlockEntityType;
}
class Static_BlockEntityType_Builder {
static create(factory: BlockEntityType_BlockEntityFactory,blocks: Block[]): BlockEntityType_Builder;
}

//net.minecraft.loot.provider.number.UniformLootNumberProvider
class UniformLootNumberProvider extends JObject, LootNumberProvider{
 getType(): LootNumberProviderType;
 nextInt(context: LootContext): number;
 nextFloat(context: LootContext): number;
 getRequiredParameters(): Set;
}
class Static_UniformLootNumberProvider {
static create(min: number,max: number): UniformLootNumberProvider;
}

//net.minecraft.util.logging.LogReader
interface LogReader extends JObject, Closeable{
 read(): Object;
}
class Static_LogReader {
static create(codec: Codec,reader: Reader): LogReader;
}

//net.minecraft.registry.Registries$Initializer
interface Registries_Initializer extends JObject{
 run(registry: Registry): Object;
}

//net.minecraft.client.util.ParticleUtil
class ParticleUtil extends JObject{
}
class Static_ParticleUtil {
static spawnParticles(world: World,pos: BlockPos,effect: ParticleEffect,count: IntProvider,direction: Direction,velocity: Supplier,offsetMultiplier: number): void;
static method_41304(world: World): Vec3d;
static spawnParticle(world: World,pos: BlockPos,random: Random,effect: ParticleEffect): void;
static spawnParticle(axis: Direction_Axis,world: World,pos: BlockPos,variance: number,effect: ParticleEffect,range: UniformIntProvider): void;
static spawnParticle(world: World,pos: BlockPos,effect: ParticleEffect,count: IntProvider): void;
static spawnParticle(world: World,pos: BlockPos,direction: Direction,effect: ParticleEffect,velocity: Vec3d,offsetMultiplier: number): void;
static getRandomVelocity(random: Random): Vec3d;
}

//net.minecraft.command.argument.EntityArgumentType$Serializer
class EntityArgumentType_Serializer extends JObject, ArgumentSerializer{
 getArgumentTypeProperties(argumentType: ArgumentType): ArgumentSerializer_ArgumentTypeProperties;
 getArgumentTypeProperties(entityArgumentType: EntityArgumentType): EntityArgumentType_Serializer_Properties;
 fromPacket(buf: PacketByteBuf): ArgumentSerializer_ArgumentTypeProperties;
 fromPacket(packetByteBuf: PacketByteBuf): EntityArgumentType_Serializer_Properties;
 writePacket(properties: ArgumentSerializer_ArgumentTypeProperties,buf: PacketByteBuf): void;
 writePacket(properties: EntityArgumentType_Serializer_Properties,packetByteBuf: PacketByteBuf): void;
 writeJson(properties: EntityArgumentType_Serializer_Properties,jsonObject: JsonObject): void;
 writeJson(properties: ArgumentSerializer_ArgumentTypeProperties,json: JsonObject): void;
}
class Static_EntityArgumentType_Serializer {
static SINGLE_FLAG: byte;
static PLAYERS_ONLY_FLAG: byte;
}

//net.minecraft.client.gui.screen.world.WorldScreenOptionGrid
class WorldScreenOptionGrid extends JObject{
 refresh(): void;
}
class Static_WorldScreenOptionGrid {
static builder(width: number): WorldScreenOptionGrid_Builder;
static BUTTON_WIDTH: number;
}

//net.minecraft.client.gui.screen.narration.ScreenNarrator$Message
class ScreenNarrator_Message extends JObject{
 setNarration(index: number,narration: Narration): ScreenNarrator_Message;
}

//net.minecraft.client.network.ClientAdvancementManager
class ClientAdvancementManager extends JObject{
 setListener(listener: ClientAdvancementManager_Listener): void;
 getManager(): AdvancementManager;
 selectTab(tab: Advancement,local: boolean): void;
 onAdvancements(packet: AdvancementUpdateS2CPacket): void;
}
class Static_ClientAdvancementManager {
static LOGGER: Logger;
}

//net.minecraft.client.option.SimpleOption$DoubleSliderCallbacks$1


//net.minecraft.client.gl.GlDebug
class GlDebug extends JObject{
}
class Static_GlDebug {
static info(source: number,type: number,id: number,severity: number,messageLength: number,message: long,l: long): void;
static getType(opcode: number): string;
static getSource(opcode: number): string;
static getSeverity(opcode: number): string;
static unknown(opcode: number): string;
static collectDebugMessages(): List;
static isDebugMessageEnabled(): boolean;
static enableDebug(verbosity: number,sync: boolean): void;
static LOGGER: Logger;
static DEBUG_MESSAGE_QUEUE_SIZE: number;
static DEBUG_MESSAGES: Queue;
static lastDebugMessage: GlDebug_DebugMessage;
static KHR_VERBOSITY_LEVELS: List;
static ARB_VERBOSITY_LEVELS: List;
static debugMessageEnabled: boolean;
}

//net.minecraft.block.FluidFillable
interface FluidFillable extends JObject{
 canFillWithFluid(world: BlockView,pos: BlockPos,state: BlockState,fluid: Fluid): boolean;
 tryFillWithFluid(world: WorldAccess,pos: BlockPos,state: BlockState,fluidState: FluidState): boolean;
}

//net.minecraft.util.function.LazyIterationConsumer
interface LazyIterationConsumer extends JObject{
 accept(value: Object): LazyIterationConsumer_NextIteration;
}
class Static_LazyIterationConsumer {
static forConsumer(consumer: Consumer): LazyIterationConsumer;
static method_47542(consumer: Consumer,value: Object): LazyIterationConsumer_NextIteration;
}

//net.minecraft.client.toast.AdvancementToast
class AdvancementToast extends JObject, Toast{
 draw(context: DrawContext,manager: ToastManager,startTime: long): Toast_Visibility;
}
class Static_AdvancementToast {
static DEFAULT_DURATION_MS: number;
}

//net.minecraft.recipe.SmithingTrimRecipe$Serializer
class SmithingTrimRecipe_Serializer extends JObject, RecipeSerializer{
 write(buf: PacketByteBuf,recipe: Recipe): void;
 write(packetByteBuf: PacketByteBuf,smithingTrimRecipe: SmithingTrimRecipe): void;
 read(id: Identifier,json: JsonObject): Recipe;
 read(id: Identifier,buf: PacketByteBuf): Recipe;
 read(identifier: Identifier,jsonObject: JsonObject): SmithingTrimRecipe;
 read(identifier: Identifier,packetByteBuf: PacketByteBuf): SmithingTrimRecipe;
}

//net.minecraft.particle.VibrationParticleEffect
class VibrationParticleEffect extends JObject, ParticleEffect{
 write(buf: PacketByteBuf): void;
 getType(): ParticleType;
 asString(): string;
 getVibration(): PositionSource;
 getArrivalInTicks(): number;
}
class Static_VibrationParticleEffect {
static method_42623(effect: VibrationParticleEffect): Integer;
static method_42622(instance: RecordCodecBuilder_Instance): App;
static method_33124(effect: VibrationParticleEffect): PositionSource;
static CODEC: Codec;
static PARAMETERS_FACTORY: ParticleEffect_Factory;
}

//net.minecraft.world.SpawnHelper$Info
class SpawnHelper_Info extends JObject{
 getSpawningChunkCount(): number;
 getGroupToCount(): Object2IntMap;
}

//net.minecraft.registry.RegistryWrapper$Delegating
class RegistryWrapper_Delegating extends JObject, RegistryWrapper{
 getOptional(key: RegistryKey): Optional;
 getOptional(tag: TagKey): Optional;
 streamEntries(): Stream;
 streamTags(): Stream;
}

//net.minecraft.entity.ai.brain.task.StrollTask
class StrollTask extends JObject{
}
class Static_StrollTask {
static create(speed: number,targetGetter: Function,shouldRun: Predicate): SingleTickTask;
static create(speed: number): SingleTickTask;
static create(speed: number,strollInsideWater: boolean): SingleTickTask;
static create(speed: number,horizontalRadius: number,verticalRadius: number): Task;
static createDynamicRadius(speed: number): Task;
static method_47024(predicate: Predicate,fun: Function,memoryQueryResult: MemoryQueryResult,f: number,world: ServerWorld,entity: PathAwareEntity,time: long): boolean;
static method_47019(i: number,j: number,entity: PathAwareEntity): Vec3d;
static method_47028(entity: PathAwareEntity): Vec3d;
static method_47031(entity: PathAwareEntity): boolean;
static method_47030(entity: PathAwareEntity): boolean;
static method_47032(entity: PathAwareEntity): Vec3d;
static method_47029(entity: PathAwareEntity): boolean;
static findTargetPos(entity: PathAwareEntity,horizontalRadius: number,verticalRadius: number): Vec3d;
static findTargetPos(entity: PathAwareEntity): Vec3d;
static method_47026(entity: PathAwareEntity): boolean;
static method_47022(predicate: Predicate,fun: Function,f: number,context: TaskTriggerer_TaskContext): App;
static method_47023(predicate: Predicate,fun: Function,f: number,walkTarget: MemoryQueryResult): TaskRunnable;
static method_47016(f: number,pos: Vec3d): WalkTarget;
static createSolidTargeting(speed: number): Task;
static DEFAULT_HORIZONTAL_RADIUS: number;
static DEFAULT_VERTICAL_RADIUS: number;
static RADII: number[][];
}

//net.minecraft.block.PressurePlateBlock$1


//net.minecraft.enchantment.EnchantmentHelper$Consumer
interface EnchantmentHelper_Consumer extends JObject{
 accept(enchantment: Enchantment,level: number): void;
}

//net.minecraft.client.render.block.entity.BedBlockEntityRenderer
class BedBlockEntityRenderer extends JObject, BlockEntityRenderer{
 render(entity: BlockEntity,tickDelta: number,matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,light: number,overlay: number): void;
 render(bedBlockEntity: BedBlockEntity,f: number,matrixStack: MatrixStack,vertexConsumerProvider: VertexConsumerProvider,i: number,j: number): void;
}
class Static_BedBlockEntityRenderer {
static getHeadTexturedModelData(): TexturedModelData;
static getFootTexturedModelData(): TexturedModelData;
static method_24188(world: WorldAccess,pos: BlockPos): boolean;
}

//net.minecraft.client.input.KeyCodes
class KeyCodes extends JObject{
}
class Static_KeyCodes {
static isToggle(keyCode: number): boolean;
}

//net.minecraft.client.gui.screen.recipebook.RecipeAlternativesWidget
class RecipeAlternativesWidget extends JObject, Drawable, Element{
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
 getResults(): RecipeResultCollection;
 setFocused(focused: boolean): void;
 isMouseOver(mouseX: number,mouseY: number): boolean;
 isFocused(): boolean;
 isVisible(): boolean;
 setVisible(visible: boolean): void;
 getLastClickedRecipe(): Recipe;
 showAlternativesForResult(client: MinecraftClient,results: RecipeResultCollection,buttonX: number,buttonY: number,areaCenterX: number,areaCenterY: number,delta: number): void;
 mouseClicked(mouseX: number,mouseY: number,button: number): boolean;
}
class Static_RecipeAlternativesWidget {
static BACKGROUND_TEXTURE: Identifier;
static field_32406: number;
static field_32407: number;
static field_33739: number;
static field_42162: number;
}

//net.minecraft.world.gen.chunk.Blender
class Blender extends JObject{
 applyBlendDensity(pos: DensityFunction_NoisePos,density: number): number;
 getBiomeSupplier(biomeSupplier: BiomeSupplier): BiomeSupplier;
 calculate(blockX: number,blockZ: number): Blender_BlendResult;
}
class Static_Blender {
static createCarvingMasks(world: StructureWorldAccess,chunk: ProtoChunk): void;
static getDistance(x1: number,y1: number,z1: number,x2: number,y2: number,z2: number): number;
static tickLeavesAndFluids(chunk: Chunk,pos: BlockPos): void;
static tickLeavesAndFluids(chunkRegion: ChunkRegion,chunk: Chunk): void;
static createClosestDistanceFunction(data: BlendingData,neighborData: Map): Blender_DistanceFunction;
static createDistanceFunction(direction: EightWayDirection,data: BlendingData): Blender_DistanceFunction;
static method_40027(i: number,j: number,mutableDouble: MutableDouble,mutableDouble2: MutableDouble,mutableDouble3: MutableDouble,chunkPos: Long,data: BlendingData): void;
static getBlendOffset(height: number): number;
static method_40026(i: number,j: number,k: number,mutableDouble: MutableDouble,mutableDouble2: MutableDouble,mutableDouble3: MutableDouble,chunkPos: Long,data: BlendingData): void;
static method_39810(maskPredicate: CarvingMask_MaskPredicate,mask: CarvingMask): void;
static method_39811(distanceFunction: Blender_DistanceFunction,offsetX: number,y: number,offsetZ: number): boolean;
static method_39560(i: number,j: number,k: number,mutableDouble: MutableDouble,mutableObject: MutableObject,chunkPos: Long,data: BlendingData): void;
static method_39813(list: List,offsetX: number,y: number,offsetZ: number): number;
static method_39814(list: List,direction: EightWayDirection,datax: BlendingData): void;
static method_39807(d: number,e: number,f: number,g: number,offsetX: number,y: number,offsetZ: number): number;
static method_39341(i: number,j: number,mutableDouble: MutableDouble,mutableDouble2: MutableDouble,mutableDouble3: MutableDouble,biomeX: number,biomeZ: number,height: number): void;
static method_40025(i: number,j: number,mutableDouble: MutableDouble,mutableObject: MutableObject,biomeX: number,biomeZ: number,biome: RegistryEntry): void;
static method_39339(i: number,j: number,k: number,mutableDouble: MutableDouble,mutableDouble2: MutableDouble,mutableDouble3: MutableDouble,biomeX: number,halfSectionY: number,biomeZ: number,collidableBlockDensity: number): void;
static getNoBlending(): Blender;
static getBlender(chunkRegion: ChunkRegion): Blender;
static NO_BLENDING: Blender;
static OFFSET_NOISE: DoublePerlinNoiseSampler;
static BLENDING_BIOME_DISTANCE_THRESHOLD: number;
static BLENDING_CHUNK_DISTANCE_THRESHOLD: number;
static field_35504: number;
static CLOSE_BLENDING_DISTANCE_THRESHOLD: number;
static field_36224: number;
}

//net.minecraft.datafixer.fix.ChunkPalettedStorageFix$1


//net.minecraft.world.biome.source.util.MultiNoiseUtil$FittestPositionFinder
class MultiNoiseUtil_FittestPositionFinder extends JObject{
}
class Static_MultiNoiseUtil_FittestPositionFinder {
static calculateFitness(noises: List,sampler: MultiNoiseUtil_MultiNoiseSampler,x: number,z: number): MultiNoiseUtil_FittestPositionFinder_Result;
}

//net.minecraft.predicate.StatePredicate$Builder
class StatePredicate_Builder extends JObject{
 build(): StatePredicate;
 exactMatch(property: Property,value: number): StatePredicate_Builder;
 exactMatch(property: Property,value: Comparable): StatePredicate_Builder;
 exactMatch(property: Property,value: boolean): StatePredicate_Builder;
 exactMatch(property: Property,valueName: string): StatePredicate_Builder;
}
class Static_StatePredicate_Builder {
static create(): StatePredicate_Builder;
}

//net.minecraft.data.client.ModelProvider
class ModelProvider extends JObject, DataProvider{
 getName(): string;
 run(writer: DataWriter): CompletableFuture;
}
class Static_ModelProvider {
static method_25739(map: Map,blockStateSupplier: BlockStateSupplier): void;
static method_25740(map: Map,id: Identifier,jsonSupplier: Supplier): void;
static method_25738(map: Map,block: Block): boolean;
static method_25741(set: Set,map: Map,block: Block): void;
static method_25742(fun: Function,dataWriter: DataWriter,entry: Map_Entry): CompletableFuture;
static method_46578(i: number): CompletableFuture[];
}

//net.minecraft.server.dedicated.DedicatedServer
interface DedicatedServer extends JObject{
 getProperties(): ServerPropertiesHandler;
 getPort(): number;
 getVersion(): string;
 getLevelName(): string;
 getPlugins(): string;
 getCurrentPlayerCount(): number;
 getMaxPlayerCount(): number;
 getPlayerNames(): String[];
 getHostname(): string;
 getMotd(): string;
 executeRconCommand(command: string): string;
}

//net.minecraft.util.profiler.EmptyProfileResult
class EmptyProfileResult extends JObject, ProfileResult{
 save(path: Path): boolean;
 getEndTime(): long;
 getStartTime(): long;
 getRootTimings(): string;
 getStartTick(): number;
 getTimings(parentPath: string): List;
 getEndTick(): number;
}
class Static_EmptyProfileResult {
static INSTANCE: EmptyProfileResult;
}

//net.minecraft.block.LeverBlock$1


//net.minecraft.world.gen.chunk.AquiferSampler
interface AquiferSampler extends JObject{
 apply(pos: DensityFunction_NoisePos,density: number): BlockState;
 needsFluidTick(): boolean;
}
class Static_AquiferSampler {
static seaLevel(fluidLevelSampler: AquiferSampler_FluidLevelSampler): AquiferSampler;
static aquifer(chunkNoiseSampler: ChunkNoiseSampler,chunkPos: ChunkPos,noiseRouter: NoiseRouter,randomSplitter: RandomSplitter,minimumY: number,height: number,fluidLevelSampler: AquiferSampler_FluidLevelSampler): AquiferSampler;
}

//net.minecraft.structure.WoodlandMansionGenerator$MansionParameters
class WoodlandMansionGenerator_MansionParameters extends JObject{
 findConnectedRoomDirection(layout: WoodlandMansionGenerator_FlagMatrix,i: number,j: number,floor: number,roomId: number): Direction;
 isRoomId(layout: WoodlandMansionGenerator_FlagMatrix,i: number,j: number,floor: number,roomId: number): boolean;
 printFloorLayouts(): void;
}
class Static_WoodlandMansionGenerator_MansionParameters {
static isInsideMansion(layout: WoodlandMansionGenerator_FlagMatrix,i: number,j: number): boolean;
static SIZE: number;
static UNSET: number;
static CORRIDOR: number;
static ROOM: number;
static STAIRCASE: number;
static UNUSED: number;
static OUTSIDE: number;
static SMALL_ROOM_FLAG: number;
static MEDIUM_ROOM_FLAG: number;
static BIG_ROOM_FLAG: number;
static ORIGIN_CELL_FLAG: number;
static ENTRANCE_CELL_FLAG: number;
static STAIRCASE_CELL_FLAG: number;
static CARPET_CELL_FLAG: number;
static ROOM_SIZE_MASK: number;
static ROOM_ID_MASK: number;
}

//net.minecraft.client.particle.SoulParticle$Factory
class SoulParticle_Factory extends JObject, ParticleFactory{
 createParticle(defaultParticleType: DefaultParticleType,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
 createParticle(particleEffect: ParticleEffect,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
}

//net.minecraft.particle.DustColorTransitionParticleEffect$1


//net.minecraft.util.function.ValueLists$1


//net.minecraft.world.gen.densityfunction.DensityFunction$DensityFunctionVisitor
interface DensityFunction_DensityFunctionVisitor extends JObject{
 apply(densityFunction: DensityFunction): DensityFunction;
 apply(noiseDensityFunction: DensityFunction_Noise): DensityFunction_Noise;
}

//net.minecraft.util.collection.PaletteStorage
interface PaletteStorage extends JObject{
 get(index: number): number;
 set(index: number,value: number): void;
 forEach(action: IntConsumer): void;
 copy(): PaletteStorage;
 getSize(): number;
 swap(index: number,value: number): number;
 getData(): long[];
 writePaletteIndices(out: number[]): void;
 getElementBits(): number;
}

//net.minecraft.recipe.ShapedRecipe$Serializer
class ShapedRecipe_Serializer extends JObject, RecipeSerializer{
 write(buf: PacketByteBuf,recipe: Recipe): void;
 write(packetByteBuf: PacketByteBuf,shapedRecipe: ShapedRecipe): void;
 read(id: Identifier,json: JsonObject): Recipe;
 read(id: Identifier,buf: PacketByteBuf): Recipe;
 read(identifier: Identifier,jsonObject: JsonObject): ShapedRecipe;
 read(identifier: Identifier,packetByteBuf: PacketByteBuf): ShapedRecipe;
}

//net.minecraft.util.profiler.SamplerSource
interface SamplerSource extends JObject{
 getSamplers(profilerSupplier: Supplier): Set;
}

//net.minecraft.client.texture.atlas.AtlasSource$SpriteRegion
interface AtlasSource_SpriteRegion extends JObject, Supplier{
 close(): void;
}

//net.minecraft.command.argument.ScoreHolderArgumentType$ScoreHolder
interface ScoreHolderArgumentType_ScoreHolder extends JObject{
 getNames(source: ServerCommandSource,players: Supplier): Collection;
}

//net.minecraft.block.SnowBlock$1


//net.minecraft.client.texture.PlayerSkinProvider$2


//net.minecraft.nbt.NbtOps$ListMerger
class NbtOps_ListMerger extends JObject, NbtOps_Merger{
 merge(nbt: NbtElement): NbtOps_Merger;
 getResult(): NbtElement;
}

//net.minecraft.client.texture.atlas.AtlasLoader$1


//net.minecraft.util.thread.TaskQueue
interface TaskQueue extends JObject{
 add(message: Object): boolean;
 isEmpty(): boolean;
 poll(): Object;
 getSize(): number;
}

//net.minecraft.client.render.model.BakedQuadFactory$1


//net.minecraft.util.collection.IdList
class IdList extends JObject, IndexedIterable{
 add(value: Object): void;
 get(index: number): Object;
 size(): number;
 iterator(): Iterator;
 set(value: Object,id: number): void;
 containsKey(index: number): boolean;
 getRawId(value: Object): number;
}

//net.minecraft.block.ChainBlock$1


//net.minecraft.screen.slot.ForgingSlotsManager
class ForgingSlotsManager extends JObject{
 getInputSlots(): List;
 getInputSlot(index: number): ForgingSlotsManager_ForgingSlot;
 getResultSlot(): ForgingSlotsManager_ForgingSlot;
 getResultSlotIndex(): number;
 getInputSlotCount(): number;
 hasSlotIndex(index: number): boolean;
 getInputSlotIndices(): List;
}
class Static_ForgingSlotsManager {
static create(): ForgingSlotsManager_Builder;
}

//net.minecraft.inventory.RecipeInputInventory
interface RecipeInputInventory extends JObject, Inventory, RecipeInputProvider{
 getWidth(): number;
 getHeight(): number;
 getInputStacks(): List;
}

//net.minecraft.client.render.model.json.OrMultipartModelSelector
class OrMultipartModelSelector extends JObject, MultipartModelSelector{
 getPredicate(stateManager: StateManager): Predicate;
}
class Static_OrMultipartModelSelector {
static method_3539(blockState: BlockState,predicate: Predicate): boolean;
static method_3538(list: List,state: BlockState): boolean;
static method_3540(stateManager: StateManager,selector: MultipartModelSelector): Predicate;
static KEY: string;
}

//net.minecraft.client.particle.CampfireSmokeParticle$CosySmokeFactory
class CampfireSmokeParticle_CosySmokeFactory extends JObject, ParticleFactory{
 createParticle(defaultParticleType: DefaultParticleType,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
 createParticle(particleEffect: ParticleEffect,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
}

//net.minecraft.world.ServerWorldAccess
interface ServerWorldAccess extends JObject, WorldAccess{
 spawnEntityAndPassengers(entity: Entity): void;
 toServerWorld(): ServerWorld;
}

//net.minecraft.resource.DataPackSettings
class DataPackSettings extends JObject{
 getDisabled(): List;
 getEnabled(): List;
}
class Static_DataPackSettings {
static method_29548(settings: DataPackSettings): List;
static method_29549(instance: RecordCodecBuilder_Instance): App;
static method_29551(settings: DataPackSettings): List;
static SAFE_MODE: DataPackSettings;
static CODEC: Codec;
}

//net.minecraft.util.math.WordPackedArray
class WordPackedArray extends JObject{
 get(index: number): number;
 set(index: number,value: number): void;
 getUnitSize(): number;
 getAlignedArray(): long[];
}
class Static_WordPackedArray {
static field_29862: number;
}

//net.minecraft.entity.EntityGroup
class EntityGroup extends JObject{
}
class Static_EntityGroup {
static DEFAULT: EntityGroup;
static UNDEAD: EntityGroup;
static ARTHROPOD: EntityGroup;
static ILLAGER: EntityGroup;
static AQUATIC: EntityGroup;
}

//net.minecraft.block.AbstractBlock$TypedContextPredicate
interface AbstractBlock_TypedContextPredicate extends JObject{
 test(state: BlockState,world: BlockView,pos: BlockPos,type: Object): boolean;
}

//net.minecraft.world.gen.densityfunction.DensityFunctionTypes$Positional
interface DensityFunctionTypes_Positional extends JObject, DensityFunction{
 apply(pos: DensityFunction_NoisePos,density: number): number;
 fill(densities: number[],applier: DensityFunction_EachApplier): void;
 input(): DensityFunction;
 sample(pos: DensityFunction_NoisePos): number;
}

//net.minecraft.client.gl.GlImportProcessor
class GlImportProcessor extends JObject{
 readSource(source: string): List;
 loadImport(inline: boolean,name: string): string;
}
class Static_GlImportProcessor {
static isLineValid(line: string,matcher: Matcher): boolean;
static hasBogusString(string: string,matcher: Matcher,matchEnd: number): boolean;
static MULTI_LINE_COMMENT_PATTERN: string;
static SINGLE_LINE_COMMENT_PATTERN: string;
static MOJ_IMPORT_PATTERN: Pattern;
static IMPORT_VERSION_PATTERN: Pattern;
static TRAILING_WHITESPACE_PATTERN: Pattern;
}

//net.minecraft.client.render.VertexConsumerProvider$Immediate
class VertexConsumerProvider_Immediate extends JObject, VertexConsumerProvider{
 getBuffer(renderLayer: RenderLayer): VertexConsumer;
 drawCurrentLayer(): void;
 draw(layer: RenderLayer): void;
 draw(): void;
}

//net.minecraft.server.dedicated.command.BanListCommand
class BanListCommand extends JObject{
}
class Static_BanListCommand {
static register(dispatcher: CommandDispatcher): void;
static execute(source: ServerCommandSource,targets: Collection): number;
static method_13016(context: CommandContext): number;
static method_51909(): Text;
static method_51910(banEntry: BanEntry): Text;
static method_51911(collection: Collection): Text;
static method_13018(source: ServerCommandSource): boolean;
static method_13013(context: CommandContext): number;
static method_13017(context: CommandContext): number;
}

//net.minecraft.entity.ai.brain.task.TaskTriggerer$K1
class TaskTriggerer_K1 extends JObject, K1{
}

//net.minecraft.world.chunk.WorldChunk$EntityLoader
interface WorldChunk_EntityLoader extends JObject{
 run(chunk: WorldChunk): void;
}

//net.minecraft.client.render.debug.VillageDebugRenderer$PointOfInterest
class VillageDebugRenderer_PointOfInterest extends JObject{
 pos: BlockPos;
 field_18932: string;
 freeTicketCount: number;
}

//net.minecraft.command.EntityDataObject
class EntityDataObject extends JObject, DataCommandObject{
 setNbt(nbt: NbtCompound): void;
 getNbt(): NbtCompound;
 feedbackModify(): Text;
 feedbackGet(path: NbtPathArgumentType_NbtPath,scale: number,result: number): Text;
 feedbackQuery(element: NbtElement): Text;
}
class Static_EntityDataObject {
static method_13927(argumentName: string): DataCommand_ObjectType;
static INVALID_ENTITY_EXCEPTION: SimpleCommandExceptionType;
static TYPE_FACTORY: Function;
}

//net.minecraft.client.gui.widget.Positioner
interface Positioner extends JObject{
 copy(): Positioner;
 relative(x: number,y: number): Positioner;
 toImpl(): Positioner_Impl;
 margin(value: number): Positioner;
 margin(left: number,top: number,right: number,bottom: number): Positioner;
 margin(x: number,y: number): Positioner;
 alignLeft(): Positioner;
 alignRight(): Positioner;
 alignBottom(): Positioner;
 relativeX(relativeX: number): Positioner;
 marginTop(marginTop: number): Positioner;
 alignTop(): Positioner;
 relativeY(relativeY: number): Positioner;
 marginRight(marginRight: number): Positioner;
 marginX(marginX: number): Positioner;
 marginY(marginY: number): Positioner;
 marginBottom(marginBottom: number): Positioner;
 marginLeft(marginLeft: number): Positioner;
 alignVerticalCenter(): Positioner;
 alignHorizontalCenter(): Positioner;
}
class Static_Positioner {
static create(): Positioner;
}

//net.minecraft.client.render.model.json.ModelElement$Deserializer
class ModelElement_Deserializer extends JObject, JsonDeserializer{
 deserialize(json: JsonElement,type: Type,context: JsonDeserializationContext): Object;
 deserialize(jsonElement: JsonElement,type: Type,jsonDeserializationContext: JsonDeserializationContext): ModelElement;
}
class Static_ModelElement_Deserializer {
static DEFAULT_SHADE: boolean;
}

//net.minecraft.client.sound.BiomeEffectSoundPlayer
class BiomeEffectSoundPlayer extends JObject, ClientPlayerTickable{
 tick(): void;
 getMoodPercentage(): number;
}
class Static_BiomeEffectSoundPlayer {
static MAX_STRENGTH: number;
static field_32995: number;
}

//net.minecraft.server.PlayerManager$1


//net.minecraft.client.gui.tooltip.TooltipBackgroundRenderer
class TooltipBackgroundRenderer extends JObject{
}
class Static_TooltipBackgroundRenderer {
static render(context: DrawContext,x: number,y: number,width: number,height: number,z: number): void;
static renderRectangle(context: DrawContext,x: number,y: number,width: number,height: number,z: number,color: number): void;
static renderVerticalLine(context: DrawContext,x: number,y: number,height: number,z: number,color: number): void;
static renderVerticalLine(context: DrawContext,x: number,y: number,height: number,z: number,startColor: number,endColor: number): void;
static renderBorder(context: DrawContext,x: number,y: number,width: number,height: number,z: number,startColor: number,endColor: number): void;
static renderHorizontalLine(context: DrawContext,x: number,y: number,width: number,z: number,color: number): void;
static field_41688: number;
static field_41693: number;
static field_41689: number;
static field_41690: number;
static field_41691: number;
static field_41692: number;
static BACKGROUND_COLOR: number;
static START_Y_BORDER_COLOR: number;
static END_Y_BORDER_COLOR: number;
}

//net.minecraft.client.render.model.json.JsonUnbakedModel
class JsonUnbakedModel extends JObject, UnbakedModel{
 toString(): string;
 getElements(): List;
 setParents(modelLoader: Function): void;
 getTransformations(): ModelTransformation;
 getGuiLight(): JsonUnbakedModel_GuiLight;
 getRootModel(): JsonUnbakedModel;
 useAmbientOcclusion(): boolean;
 needsResolution(): boolean;
 textureExists(name: string): boolean;
 resolveSprite(spriteName: string): SpriteIdentifier;
 getOverrides(): List;
 getModelDependencies(): Collection;
 bake(baker: Baker,textureGetter: Function,rotationContainer: ModelBakeSettings,modelId: Identifier): BakedModel;
 bake(baker: Baker,parent: JsonUnbakedModel,textureGetter: Function,settings: ModelBakeSettings,id: Identifier,hasDepth: boolean): BakedModel;
 id: string;
}
class Static_JsonUnbakedModel {
static deserialize(input: Reader): JsonUnbakedModel;
static deserialize(json: string): JsonUnbakedModel;
static isTextureReference(reference: string): boolean;
static createQuad(element: ModelElement,elementFace: ModelElementFace,sprite: Sprite,side: Direction,settings: ModelBakeSettings,id: Identifier): BakedQuad;
static LOGGER: Logger;
static QUAD_FACTORY: BakedQuadFactory;
static GSON: Gson;
static TEXTURE_REFERENCE_INITIAL: char;
static PARTICLE_KEY: string;
static field_42912: boolean;
}

//net.minecraft.client.font.BuiltinEmptyGlyph$1


//net.minecraft.network.packet.c2s.play.ClientStatusC2SPacket
class ClientStatusC2SPacket extends JObject, Packet{
 apply(serverPlayPacketListener: ServerPlayPacketListener): void;
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
 getMode(): ClientStatusC2SPacket_Mode;
}

//net.minecraft.world.gen.feature.OreConfiguredFeatures
class OreConfiguredFeatures extends JObject{
}
class Static_OreConfiguredFeatures {
static bootstrap(featureRegisterable: Registerable): void;
static ORE_MAGMA: RegistryKey;
static ORE_SOUL_SAND: RegistryKey;
static ORE_NETHER_GOLD: RegistryKey;
static ORE_QUARTZ: RegistryKey;
static ORE_GRAVEL_NETHER: RegistryKey;
static ORE_BLACKSTONE: RegistryKey;
static ORE_DIRT: RegistryKey;
static ORE_GRAVEL: RegistryKey;
static ORE_GRANITE: RegistryKey;
static ORE_DIORITE: RegistryKey;
static ORE_ANDESITE: RegistryKey;
static ORE_TUFF: RegistryKey;
static ORE_COAL: RegistryKey;
static ORE_COAL_BURIED: RegistryKey;
static ORE_IRON: RegistryKey;
static ORE_IRON_SMALL: RegistryKey;
static ORE_GOLD: RegistryKey;
static ORE_GOLD_BURIED: RegistryKey;
static ORE_REDSTONE: RegistryKey;
static ORE_DIAMOND_SMALL: RegistryKey;
static ORE_DIAMOND_LARGE: RegistryKey;
static ORE_DIAMOND_BURIED: RegistryKey;
static ORE_LAPIS: RegistryKey;
static ORE_LAPIS_BURIED: RegistryKey;
static ORE_INFESTED: RegistryKey;
static ORE_EMERALD: RegistryKey;
static ORE_ANCIENT_DEBRIS_LARGE: RegistryKey;
static ORE_ANCIENT_DEBRIS_SMALL: RegistryKey;
static ORE_COPPER_SMALL: RegistryKey;
static ORE_COPPER_LARGE: RegistryKey;
static ORE_CLAY: RegistryKey;
}

//net.minecraft.data.DataCache$CachedDataWriter
class DataCache_CachedDataWriter extends JObject, DataWriter{
 write(path: Path,data: byte[],hashCode: HashCode): void;
 finish(): DataCache_RunResult;
}

//net.minecraft.server.filter.TextFilterer
class TextFilterer extends JObject, AutoCloseable{
 close(): void;
 createFilterer(gameProfile: GameProfile): TextStream;
}
class Static_TextFilterer {
static load(config: string): TextFilterer;
static getValue(json: JsonObject,key: string,fallback: string): string;
static getEndpoint(root: URI,endpoints: JsonObject,key: string,fallback: string): URL;
static method_42112(string: string,string2: string,profile: GameProfile): JsonObject;
static method_42110(i: number,string: string,string2: string,profile: GameProfile,message: string): JsonObject;
static method_42113(string: string,string2: string,string3: string,profile: GameProfile,message: string): JsonObject;
static method_31301(runnable: Runnable): Thread;
static LOGGER: Logger;
static NEXT_WORKER_ID: AtomicInteger;
static THREAD_FACTORY: ThreadFactory;
static CHAT_ENDPOINT: string;
}

//net.minecraft.client.gui.widget.CyclingButtonWidget$Values$1


//net.minecraft.client.gui.widget.CyclingButtonWidget$Values$2


//net.minecraft.client.render.TexturedRenderLayers$1


//net.minecraft.datafixer.schema.Schema705$1


//net.minecraft.client.render.debug.GameEventDebugRenderer$Listener
class GameEventDebugRenderer_Listener extends JObject, GameEventListener{
 listen(world: ServerWorld,event: GameEvent,emitter: GameEvent_Emitter,emitterPos: Vec3d): boolean;
 isTooFar(world: World,pos: Vec3d): boolean;
 getRange(): number;
 getPositionSource(): PositionSource;
 getPos(world: World): Optional;
 positionSource: PositionSource;
 range: number;
}
class Static_GameEventDebugRenderer_Listener {
static method_42601(vec3d: Vec3d,pos2: Vec3d): boolean;
}

//net.minecraft.client.network.SocialInteractionsManager
class SocialInteractionsManager extends JObject{
 setPlayerOffline(uuid: UUID): void;
 setPlayerOnline(player: PlayerListEntry): void;
 getHiddenPlayers(): Set;
 showPlayer(uuid: UUID): void;
 hidePlayer(uuid: UUID): void;
 isPlayerMuted(uuid: UUID): boolean;
 isPlayerHidden(uuid: UUID): boolean;
 unloadBlockList(): void;
 isPlayerBlocked(uuid: UUID): boolean;
 getUuid(playerName: string): UUID;
 loadBlockList(): void;
}

//net.minecraft.client.texture.SpriteAtlasHolder
class SpriteAtlasHolder extends JObject, ResourceReloader, AutoCloseable{
 close(): void;
 reload(synchronizer: ResourceReloader_Synchronizer,manager: ResourceManager,prepareProfiler: Profiler,applyProfiler: Profiler,prepareExecutor: Executor,applyExecutor: Executor): CompletableFuture;
}

//net.minecraft.loot.condition.LootCondition$Builder
interface LootCondition_Builder extends JObject{
 build(): LootCondition;
 or(condition: LootCondition_Builder): AnyOfLootCondition_Builder;
 and(condition: LootCondition_Builder): AllOfLootCondition_Builder;
 invert(): LootCondition_Builder;
}

//net.minecraft.entity.ai.brain.task.MultiTickTask
class MultiTickTask extends JObject, Task{
 getName(): string;
 stop(world: ServerWorld,entity: LivingEntity,time: long): void;
 tick(world: ServerWorld,entity: LivingEntity,time: long): void;
 getStatus(): MultiTickTask_Status;
 tryStarting(world: ServerWorld,entity: LivingEntity,time: long): boolean;
}
class Static_MultiTickTask {
static DEFAULT_RUN_TIME: number;
}

//net.minecraft.client.util.MonitorTracker
class MonitorTracker extends JObject{
 stop(): void;
 getMonitor(window: Window): Monitor;
 getMonitor(pointer: long): Monitor;
}
class Static_MonitorTracker {
static clamp(value: number,min: number,max: number): number;
static LOGGER: Logger;
}

//net.minecraft.registry.entry.RegistryEntryList$ListBacked
class RegistryEntryList_ListBacked extends JObject, RegistryEntryList{
 get(index: number): RegistryEntry;
 size(): number;
 iterator(): Iterator;
 stream(): Stream;
 spliterator(): Spliterator;
 ownerEquals(owner: RegistryEntryOwner): boolean;
 getRandom(random: Random): Optional;
}

//net.minecraft.client.font.GlyphContainer$GlyphConsumer
interface GlyphContainer_GlyphConsumer extends JObject{
 accept(codePoint: number,glyph: Object): void;
}

//net.minecraft.predicate.entity.EntityPredicate
class EntityPredicate extends JObject{
 test(world: ServerWorld,pos: Vec3d,entity: Entity): boolean;
 test(player: ServerPlayerEntity,entity: Entity): boolean;
 toJson(): JsonElement;
}
class Static_EntityPredicate {
static asLootContextPredicate(predicate: EntityPredicate): LootContextPredicate;
static fromJson(json: JsonElement): EntityPredicate;
static contextPredicateFromJson(json: JsonObject,key: string,predicateDeserializer: AdvancementEntityPredicateDeserializer): LootContextPredicate;
static createAdvancementEntityLootContext(player: ServerPlayerEntity,target: Entity): LootContext;
static contextPredicateArrayFromJson(json: JsonObject,key: string,predicateDeserializer: AdvancementEntityPredicateDeserializer): LootContextPredicate[];
static contextPredicateFromJsonElement(key: string,predicateDeserializer: AdvancementEntityPredicateDeserializer,json: JsonElement): LootContextPredicate;
static ANY: EntityPredicate;
}

//net.minecraft.registry.entry.RegistryEntryList
interface RegistryEntryList extends JObject, Iterable{
 get(index: number): RegistryEntry;
 size(): number;
 stream(): Stream;
 contains(entry: RegistryEntry): boolean;
 getStorage(): Either;
 getTagKey(): Optional;
 ownerEquals(owner: RegistryEntryOwner): boolean;
 getRandom(random: Random): Optional;
}
class Static_RegistryEntryList {
static of(entries: RegistryEntry[]): RegistryEntryList_Direct;
static of(owner: RegistryEntryOwner,tagKey: TagKey): RegistryEntryList_Named;
static of(entries: List): RegistryEntryList_Direct;
static of(mapper: Function,values: Object[]): RegistryEntryList_Direct;
static of(mapper: Function,values: List): RegistryEntryList_Direct;
}

//net.minecraft.resource.DependencyTracker$Dependencies
interface DependencyTracker_Dependencies extends JObject{
 forOptionalDependencies(callback: Consumer): void;
 forDependencies(callback: Consumer): void;
}

//net.minecraft.entity.ai.brain.task.TaskTriggerer$Supply$1


//net.minecraft.network.packet.s2c.play.BossBarS2CPacket$UpdateNameAction
class BossBarS2CPacket_UpdateNameAction extends JObject, BossBarS2CPacket_Action{
 accept(uuid: UUID,consumer: BossBarS2CPacket_Consumer): void;
 getType(): BossBarS2CPacket_Type;
 toPacket(buf: PacketByteBuf): void;
}

//net.minecraft.entity.player.PlayerEntity$1


//net.minecraft.registry.tag.TagEntry
class TagEntry extends JObject{
 toString(): string;
 resolve(valueGetter: TagEntry_ValueGetter,idConsumer: Consumer): boolean;
 canAdd(directEntryPredicate: Predicate,tagEntryPredicate: Predicate): boolean;
 forEachOptionalTagId(idConsumer: Consumer): void;
 forEachRequiredTagId(idConsumer: Consumer): void;
}
class Static_TagEntry {
static create(id: Identifier): TagEntry;
static createTag(id: Identifier): TagEntry;
static createOptional(id: Identifier): TagEntry;
static createOptionalTag(id: Identifier): TagEntry;
static method_43946(entry: TagEntry): Boolean;
static method_43943(entry: TagEntry): TagEntry;
static method_43939(id: Codecs_TagEntryId): TagEntry;
static method_43941(instance: RecordCodecBuilder_Instance): App;
static method_43940(either: Either): TagEntry;
static method_43938(entry: TagEntry): Either;
static ENTRY_CODEC: Codec;
static CODEC: Codec;
}

//net.minecraft.loot.LootPool
class LootPool extends JObject{
 validate(reporter: LootTableReporter): void;
 addGeneratedLoot(lootConsumer: Consumer,context: LootContext): void;
 entries: LootPoolEntry[];
 conditions: LootCondition[];
 functions: LootFunction[];
 rolls: LootNumberProvider;
 bonusRolls: LootNumberProvider;
}
class Static_LootPool {
static builder(): LootPool_Builder;
static method_342(lootContext: LootContext,list: List,mutableInt: MutableInt,choice: LootChoice): void;
}

//net.minecraft.world.biome.SpawnSettings$Builder
class SpawnSettings_Builder extends JObject{
 build(): SpawnSettings;
 spawn(spawnGroup: SpawnGroup,spawnEntry: SpawnSettings_SpawnEntry): SpawnSettings_Builder;
 spawnCost(entityType: EntityType,mass: number,gravityLimit: number): SpawnSettings_Builder;
 creatureSpawnProbability(probability: number): SpawnSettings_Builder;
}
class Static_SpawnSettings_Builder {
static method_31010(spawnGroup: SpawnGroup): List;
static method_31013(spawnGroup: SpawnGroup): SpawnGroup;
static method_31012(entry: Map_Entry): Pool;
}

//net.minecraft.server.command.TestCommand
class TestCommand extends JObject{
}
class Static_TestCommand {
static run(source: ServerCommandSource,testFunctions: Collection,rotationSteps: number,i: number): void;
static run(world: ServerWorld,pos: BlockPos,tests: TestSet): void;
static register(dispatcher: CommandDispatcher): void;
static onCompletion(world: ServerWorld,tests: TestSet): void;
static method_29422(context: CommandContext): number;
static method_22293(context: CommandContext): number;
static method_29419(context: CommandContext): number;
static method_22292(context: CommandContext): number;
static method_29421(context: CommandContext): number;
static method_29420(context: CommandContext): number;
static method_22295(context: CommandContext): number;
static method_29423(context: CommandContext): number;
static method_22294(context: CommandContext): number;
static executeRunThis(source: ServerCommandSource): number;
static method_22290(context: CommandContext): number;
static method_29418(context: CommandContext): number;
static method_22271(context: CommandContext): number;
static method_29417(context: CommandContext): number;
static method_22286(context: CommandContext): number;
static method_29416(context: CommandContext): number;
static method_52188(string: string,text: Text): Text;
static method_22274(serverWorld: ServerWorld,testSet: TestSet,pos: BlockPos): void;
static method_22288(context: CommandContext): number;
static method_22287(context: CommandContext): number;
static method_22291(context: CommandContext): number;
static method_29415(context: CommandContext): number;
static method_29414(context: CommandContext): number;
static executeRunThese(source: ServerCommandSource): number;
static method_22279(context: CommandContext): number;
static method_23648(context: CommandContext): number;
static method_22289(context: CommandContext): number;
static method_22283(context: CommandContext): number;
static executePos(source: ServerCommandSource,variableName: string): number;
static executeCreate(source: ServerCommandSource,testName: string,x: number,y: number,z: number): number;
static method_52187(string: string): Text;
static method_22263(formatting: Formatting,string: string,player: ServerPlayerEntity): void;
static executeClearAll(source: ServerCommandSource,radius: number): number;
static executeRerunFailed(source: ServerCommandSource,requiredOnly: boolean,rotationSteps: number,sizeZ: number): number;
static executeRun(source: ServerCommandSource,testFunction: TestFunction,rotationSteps: number): number;
static beforeBatch(testFunction: TestFunction,world: ServerWorld): void;
static method_29412(test: GameTestState): void;
static executeImport(source: ServerCommandSource,testName: string): number;
static method_22276(player: ServerPlayerEntity): boolean;
static executeExport(source: ServerCommandSource): number;
static executeExport(source: ServerCommandSource,testName: string): number;
static executeRunAll(source: ServerCommandSource,testClass: string,rotationSteps: number,sizeZ: number): number;
static executeRunAll(source: ServerCommandSource,rotationSteps: number,sizeZ: number): number;
static sendMessage(world: ServerWorld,message: string,formatting: Formatting): void;
static sendMessage(source: ServerCommandSource,message: string): void;
static field_33178: number;
static field_33179: number;
static field_33180: number;
static field_33181: number;
static field_33182: number;
static field_33183: number;
static field_33184: number;
static field_33185: number;
static field_33186: number;
}

//net.minecraft.entity.SaddledComponent
class SaddledComponent extends JObject{
 boost(random: Random): boolean;
 boost(): void;
 tickBoost(): void;
 setSaddled(saddled: boolean): void;
 readNbt(nbt: NbtCompound): void;
 writeNbt(nbt: NbtCompound): void;
 getMovementSpeedMultiplier(): number;
 isSaddled(): boolean;
}
class Static_SaddledComponent {
static MIN_BOOST_TIME: number;
static field_30061: number;
}

//net.minecraft.village.TradeOffers$EnchantBookFactory
class TradeOffers_EnchantBookFactory extends JObject, TradeOffers_Factory{
 create(entity: Entity,random: Random): TradeOffer;
}

//net.minecraft.client.gui.hud.spectator.TeamTeleportSpectatorMenu
class TeamTeleportSpectatorMenu extends JObject, SpectatorMenuCommandGroup, SpectatorMenuCommand{
 getName(): Text;
 use(menu: SpectatorMenu): void;
 isEnabled(): boolean;
 getPrompt(): Text;
 getCommands(): List;
 renderIcon(context: DrawContext,brightness: number,alpha: number): void;
}
class Static_TeamTeleportSpectatorMenu {
static getCommands(client: MinecraftClient,scoreboard: Scoreboard): List;
static method_47431(minecraftClient: MinecraftClient,team: Team): Stream;
static TEAM_TELEPORT_TEXT: Text;
static PROMPT_TEXT: Text;
}

//net.minecraft.network.packet.s2c.play.SelectAdvancementTabS2CPacket
class SelectAdvancementTabS2CPacket extends JObject, Packet{
 apply(listener: PacketListener): void;
 apply(clientPlayPacketListener: ClientPlayPacketListener): void;
 write(buf: PacketByteBuf): void;
 getTabId(): Identifier;
}

//net.minecraft.entity.ai.pathing.PathNodeNavigator
class PathNodeNavigator extends JObject{
 findPathToAny(world: ChunkCache,mob: MobEntity,positions: Set,followRange: number,distance: number,rangeMultiplier: number): Path;
}
class Static_PathNodeNavigator {
static TARGET_DISTANCE_MULTIPLIER: number;
static field_31808: boolean;
}

//net.minecraft.client.gui.ScreenPos$1


//net.minecraft.client.particle.ParticleGroup
class ParticleGroup extends JObject{
 getMaxCount(): number;
}
class Static_ParticleGroup {
static SPORE_BLOSSOM_AIR: ParticleGroup;
}

//net.minecraft.structure.rule.PosRuleTest
class PosRuleTest extends JObject{
 test(originalPos: BlockPos,currentPos: BlockPos,pivot: BlockPos,random: Random): boolean;
}
class Static_PosRuleTest {
static BASE_CODEC: Codec;
}

//net.minecraft.world.gen.feature.SpringFeatureConfig
class SpringFeatureConfig extends JObject, FeatureConfig{
 state: FluidState;
 requiresBlockBelow: boolean;
 rockCount: number;
 holeCount: number;
 validBlocks: RegistryEntryList;
}
class Static_SpringFeatureConfig {
static method_28794(instance: RecordCodecBuilder_Instance): App;
static method_28798(config: SpringFeatureConfig): FluidState;
static method_28797(config: SpringFeatureConfig): Boolean;
static method_28796(config: SpringFeatureConfig): Integer;
static method_28795(config: SpringFeatureConfig): Integer;
static method_28793(config: SpringFeatureConfig): RegistryEntryList;
static CODEC: Codec;
}

//net.minecraft.client.util.telemetry.TelemetryManager
class TelemetryManager extends JObject, AutoCloseable{
 close(): void;
 getLogManager(): Path;
 createWorldSession(newWorld: boolean,worldLoadTime: Duration,minigameName: string): WorldSession;
 getSender(): TelemetrySender;
}
class Static_TelemetryManager {
static method_47709(manager: Optional): CompletionStage;
static method_38731(runnable: Runnable): Thread;
static method_47708(builder: PropertyMap_Builder,xuid: string): void;
static method_47702(sentTelemetryEvent: SentTelemetryEvent,telemetrySession: TelemetrySession,logger: Optional): void;
static method_47704(manager: Optional): void;
static method_47703(builder: PropertyMap_Builder,clientId: string): void;
static method_47710(): CompletableFuture;
static NEXT_WORKER_ID: AtomicInteger;
static EXECUTOR: Executor;
}

//net.minecraft.advancement.AdvancementCriterion
class AdvancementCriterion extends JObject{
 toPacket(buf: PacketByteBuf): void;
 toJson(): JsonElement;
 getConditions(): CriterionConditions;
}
class Static_AdvancementCriterion {
static method_33899(bufx: PacketByteBuf,criterion: AdvancementCriterion): void;
static criteriaFromPacket(buf: PacketByteBuf): Map;
static criteriaFromJson(obj: JsonObject,predicateDeserializer: AdvancementEntityPredicateDeserializer): Map;
static criteriaToPacket(criteria: Map,buf: PacketByteBuf): void;
static fromJson(obj: JsonObject,predicateDeserializer: AdvancementEntityPredicateDeserializer): AdvancementCriterion;
static fromPacket(buf: PacketByteBuf): AdvancementCriterion;
}

//net.minecraft.client.render.debug.LightDebugRenderer$1


//net.minecraft.client.gui.screen.narration.Narration
class Narration extends JObject{
 equals(o: Object): boolean;
 hashCode(): number;
 forEachSentence(consumer: Consumer): void;
}
class Static_Narration {
static text(text: Text): Narration;
static string(string: string): Narration;
static method_37038(list: List,consumer: Consumer,texts: List): void;
static method_37040(consumer: Consumer,text: Unit): void;
static method_37041(consumer: Consumer,text: Text): void;
static texts(texts: List): Narration;
static EMPTY: Narration;
}

//net.minecraft.server.command.SetBlockCommand$Filter
interface SetBlockCommand_Filter extends JObject{
 filter(box: BlockBox,pos: BlockPos,block: BlockStateArgument,world: ServerWorld): BlockStateArgument;
}

//net.minecraft.util.math.intprovider.IntProviderType
interface IntProviderType extends JObject{
 codec(): Codec;
}
class Static_IntProviderType {
static register(id: string,codec: Codec): IntProviderType;
static method_35013(codec: Codec): Codec;
static CONSTANT: IntProviderType;
static UNIFORM: IntProviderType;
static BIASED_TO_BOTTOM: IntProviderType;
static CLAMPED: IntProviderType;
static WEIGHTED_LIST: IntProviderType;
static CLAMPED_NORMAL: IntProviderType;
}

//net.minecraft.client.gui.DrawContext
class DrawContext extends JObject{
 fill(x1: number,y1: number,x2: number,y2: number,z: number,color: number): void;
 fill(layer: RenderLayer,x1: number,y1: number,x2: number,y2: number,color: number): void;
 fill(x1: number,y1: number,x2: number,y2: number,color: number): void;
 fill(layer: RenderLayer,x1: number,y1: number,x2: number,y2: number,z: number,color: number): void;
 drawSprite(x: number,y: number,z: number,width: number,height: number,sprite: Sprite): void;
 drawSprite(x: number,y: number,z: number,width: number,height: number,sprite: Sprite,red: number,green: number,blue: number,alpha: number): void;
 drawCenteredTextWithShadow(textRenderer: TextRenderer,text: Text,centerX: number,y: number,color: number): void;
 drawCenteredTextWithShadow(textRenderer: TextRenderer,text: string,centerX: number,y: number,color: number): void;
 drawCenteredTextWithShadow(textRenderer: TextRenderer,text: OrderedText,centerX: number,y: number,color: number): void;
 enableScissor(x1: number,y1: number,x2: number,y2: number): void;
 disableScissor(): void;
 fillGradient(startX: number,startY: number,endX: number,endY: number,colorStart: number,colorEnd: number): void;
 fillGradient(startX: number,startY: number,endX: number,endY: number,z: number,colorStart: number,colorEnd: number): void;
 fillGradient(layer: RenderLayer,startX: number,startY: number,endX: number,endY: number,colorStart: number,colorEnd: number,z: number): void;
 getVertexConsumers(): VertexConsumerProvider_Immediate;
 drawTextWrapped(textRenderer: TextRenderer,text: StringVisitable,x: number,y: number,width: number,color: number): void;
 drawItemTooltip(textRenderer: TextRenderer,stack: ItemStack,x: number,y: number): void;
 drawHoverEvent(textRenderer: TextRenderer,style: Style,x: number,y: number): void;
 drawOrderedTooltip(textRenderer: TextRenderer,text: List,x: number,y: number): void;
 drawTextWithShadow(textRenderer: TextRenderer,text: string,x: number,y: number,color: number): number;
 drawTextWithShadow(textRenderer: TextRenderer,text: OrderedText,x: number,y: number,color: number): number;
 drawTextWithShadow(textRenderer: TextRenderer,text: Text,x: number,y: number,color: number): number;
 getMatrices(): MatrixStack;
 drawBorder(x: number,y: number,width: number,height: number,color: number): void;
 getScaledWindowHeight(): number;
 getScaledWindowWidth(): number;
 drawNineSlicedTexture(texture: Identifier,x: number,y: number,width: number,height: number,outerSliceSize: number,centerSliceWidth: number,centerSliceHeight: number,u: number,v: number): void;
 drawNineSlicedTexture(texture: Identifier,x: number,y: number,width: number,height: number,outerSliceWidth: number,outerSliceHeight: number,centerSliceWidth: number,centerSliceHeight: number,u: number,v: number): void;
 drawNineSlicedTexture(texture: Identifier,x: number,y: number,width: number,height: number,leftSliceWidth: number,topSliceHeight: number,rightSliceWidth: number,bottomSliceHeight: number,centerSliceWidth: number,centerSliceHeight: number,u: number,v: number): void;
 drawItemWithoutEntity(stack: ItemStack,x: number,y: number): void;
 drawItemInSlot(textRenderer: TextRenderer,stack: ItemStack,x: number,y: number,countOverride: string): void;
 drawItemInSlot(textRenderer: TextRenderer,stack: ItemStack,x: number,y: number): void;
 drawItem(item: ItemStack,x: number,y: number): void;
 drawItem(entity: LivingEntity,stack: ItemStack,x: number,y: number,seed: number): void;
 drawItem(stack: ItemStack,x: number,y: number,seed: number,z: number): void;
 drawItem(stack: ItemStack,x: number,y: number,seed: number): void;
 drawVerticalLine(layer: RenderLayer,x: number,y1: number,y2: number,color: number): void;
 drawVerticalLine(x: number,y1: number,y2: number,color: number): void;
 drawHorizontalLine(x1: number,x2: number,y: number,color: number): void;
 drawHorizontalLine(layer: RenderLayer,x1: number,x2: number,y: number,color: number): void;
 drawTooltip(textRenderer: TextRenderer,text: List,positioner: TooltipPositioner,x: number,y: number): void;
 drawTooltip(textRenderer: TextRenderer,text: List,data: Optional,x: number,y: number): void;
 drawTooltip(textRenderer: TextRenderer,text: Text,x: number,y: number): void;
 drawTooltip(textRenderer: TextRenderer,text: List,x: number,y: number): void;
 drawTexture(texture: Identifier,x: number,y: number,u: number,v: number,width: number,height: number): void;
 drawTexture(texture: Identifier,x: number,y: number,z: number,u: number,v: number,width: number,height: number,textureWidth: number,textureHeight: number): void;
 drawTexture(texture: Identifier,x: number,y: number,u: number,v: number,width: number,height: number,textureWidth: number,textureHeight: number): void;
 drawTexture(texture: Identifier,x: number,y: number,width: number,height: number,u: number,v: number,regionWidth: number,regionHeight: number,textureWidth: number,textureHeight: number): void;
 draw(): void;
 draw(drawCallback: Runnable): void;
 drawText(textRenderer: TextRenderer,text: OrderedText,x: number,y: number,color: number,shadow: boolean): number;
 drawText(textRenderer: TextRenderer,text: Text,x: number,y: number,color: number,shadow: boolean): number;
 drawText(textRenderer: TextRenderer,text: string,x: number,y: number,color: number,shadow: boolean): number;
 setShaderColor(red: number,green: number,blue: number,alpha: number): void;
 drawRepeatingTexture(texture: Identifier,x: number,y: number,width: number,height: number,u: number,v: number,textureWidth: number,textureHeight: number): void;
}
class Static_DrawContext {
static createDivider(sideLength: number,textureSideLength: number): IntIterator;
static method_51451(itemStack: ItemStack): string;
static method_51442(list: List,data: TooltipData): void;
static method_51444(itemStack: ItemStack): string;
static method_51449(itemStack: ItemStack): string;
static method_51426(itemStack: ItemStack): string;
static field_44931: number;
static field_44932: number;
static field_44655: number;
}

//net.minecraft.command.argument.RegistryEntryPredicateArgumentType$EntryPredicate
interface RegistryEntryPredicateArgumentType_EntryPredicate extends JObject, Predicate{
 getEntry(): Either;
 asString(): string;
 tryCast(registryRef: RegistryKey): Optional;
}

//net.minecraft.util.collection.Pool
class Pool extends JObject{
 isEmpty(): boolean;
 getEntries(): List;
 getOrEmpty(random: Random): Optional;
}
class Static_Pool {
static of(entries: Weighted[]): Pool;
static of(entries: List): Pool;
static empty(): Pool;
static createCodec(entryCodec: Codec): Codec;
}

//net.minecraft.server.command.SetWorldSpawnCommand
class SetWorldSpawnCommand extends JObject{
}
class Static_SetWorldSpawnCommand {
static register(dispatcher: CommandDispatcher): void;
static execute(source: ServerCommandSource,pos: BlockPos,angle: number): number;
static method_13649(source: ServerCommandSource): boolean;
static method_30734(context: CommandContext): number;
static method_52080(blockPos: BlockPos,f: number): Text;
static method_13648(context: CommandContext): number;
static method_13646(context: CommandContext): number;
}

//net.minecraft.client.particle.ParticleTextureSheet
interface ParticleTextureSheet extends JObject{
 begin(builder: BufferBuilder,textureManager: TextureManager): void;
 draw(tessellator: Tessellator): void;
}
class Static_ParticleTextureSheet {
static TERRAIN_SHEET: ParticleTextureSheet;
static PARTICLE_SHEET_OPAQUE: ParticleTextureSheet;
static PARTICLE_SHEET_TRANSLUCENT: ParticleTextureSheet;
static PARTICLE_SHEET_LIT: ParticleTextureSheet;
static CUSTOM: ParticleTextureSheet;
static NO_RENDER: ParticleTextureSheet;
}

//net.minecraft.util.math.random.Xoroshiro128PlusPlusRandom$Splitter
class Xoroshiro128PlusPlusRandom_Splitter extends JObject, RandomSplitter{
 split(seed: string): Random;
 split(x: number,y: number,z: number): Random;
 addDebugInfo(info: StringBuilder): void;
}

//net.minecraft.server.world.PlayerChunkWatchingManager
class PlayerChunkWatchingManager extends JObject{
 add(l: long,player: ServerPlayerEntity,watchDisabled: boolean): void;
 remove(l: long,player: ServerPlayerEntity): void;
 getPlayersWatchingChunk(l: long): Set;
 disableWatch(player: ServerPlayerEntity): void;
 isWatchInactive(player: ServerPlayerEntity): boolean;
 isWatchDisabled(player: ServerPlayerEntity): boolean;
 movePlayer(prevPos: long,currentPos: long,player: ServerPlayerEntity): void;
 enableWatch(player: ServerPlayerEntity): void;
}

//net.minecraft.client.render.debug.ChunkLoadingDebugRenderer
class ChunkLoadingDebugRenderer extends JObject, DebugRenderer_Renderer{
 render(matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,cameraX: number,cameraY: number,cameraZ: number): void;
}

//net.minecraft.client.realms.util.RealmsTextureManager
class RealmsTextureManager extends JObject{
}
class Static_RealmsTextureManager {
static getTextureId(id: string,image: string): Identifier;
static loadImage(image: string): NativeImage;
static getTextureIdInternal(id: string,image: string): Identifier;
static TEXTURES: Map;
static LOGGER: Logger;
static ISLES: Identifier;
}

//net.minecraft.text.Style$1


//net.minecraft.client.realms.gui.screen.RealmsMainScreen$Request
interface RealmsMainScreen_Request extends JObject{
 request(client: RealmsClient): Object;
}

//net.minecraft.registry.Registry$1


//net.minecraft.client.util.ScreenshotRecorder
class ScreenshotRecorder extends JObject{
 finish(): File;
 getIntoBuffer(data: ByteBuffer,startWidth: number,startHeight: number,unitWidth: number,unitHeight: number): void;
 writeToStream(): void;
}
class Static_ScreenshotRecorder {
static saveScreenshot(gameDirectory: File,framebuffer: Framebuffer,messageReceiver: Consumer): void;
static saveScreenshot(gameDirectory: File,fileName: string,framebuffer: Framebuffer,messageReceiver: Consumer): void;
static method_22691(file: File,string: string,framebuffer: Framebuffer,consumer: Consumer): void;
static method_1664(file: File,style: Style): Style;
static method_1661(nativeImage: NativeImage,file: File,consumer: Consumer): void;
static takeScreenshot(framebuffer: Framebuffer): NativeImage;
static saveScreenshotInner(gameDirectory: File,fileName: string,framebuffer: Framebuffer,messageReceiver: Consumer): void;
static getScreenshotFilename(directory: File): File;
static LOGGER: Logger;
static SCREENSHOTS_DIRECTORY: string;
}

//net.minecraft.util.thread.LockHelper
class LockHelper extends JObject{
 lock(): void;
 unlock(): void;
}
class Static_LockHelper {
static crash(message: string,thread: Thread): CrashException;
static formatStackTraceForThread(thread: Thread): string;
static LOGGER: Logger;
}

//net.minecraft.world.gen.chunk.VerticalBlockSample
class VerticalBlockSample extends JObject, BlockColumn{
 getState(y: number): BlockState;
 setState(y: number,state: BlockState): void;
}

//net.minecraft.client.option.GraphicsMode$1


//net.minecraft.world.gen.feature.EndSpikeFeatureConfig
class EndSpikeFeatureConfig extends JObject, FeatureConfig{
 getPos(): BlockPos;
 isCrystalInvulnerable(): boolean;
 getSpikes(): List;
}
class Static_EndSpikeFeatureConfig {
static method_28789(config: EndSpikeFeatureConfig): Optional;
static method_28790(instance: RecordCodecBuilder_Instance): App;
static method_28792(config: EndSpikeFeatureConfig): Boolean;
static method_28791(config: EndSpikeFeatureConfig): List;
static CODEC: Codec;
}

//net.minecraft.client.util.SpriteIdentifier
class SpriteIdentifier extends JObject{
 equals(o: Object): boolean;
 toString(): string;
 hashCode(): number;
 getRenderLayer(layerFactory: Function): RenderLayer;
 getTextureId(): Identifier;
 getVertexConsumer(vertexConsumers: VertexConsumerProvider,layerFactory: Function): VertexConsumer;
 getVertexConsumer(vertexConsumers: VertexConsumerProvider,layerFactory: Function,bl: boolean): VertexConsumer;
 getAtlasId(): Identifier;
 getSprite(): Sprite;
}
class Static_SpriteIdentifier {
static COMPARATOR: Comparator;
}

//net.minecraft.data.server.advancement.AdvancementTabGenerator
interface AdvancementTabGenerator extends JObject{
 accept(lookup: RegistryWrapper_WrapperLookup,exporter: Consumer): void;
}
class Static_AdvancementTabGenerator {
static createEmptyAdvancement(id: string): Advancement;
}

//net.minecraft.nbt.NbtTagSizeTracker
class NbtTagSizeTracker extends JObject{
 add(bytes: long): void;
 getAllocatedBytes(): long;
}
class Static_NbtTagSizeTracker {
static EMPTY: NbtTagSizeTracker;
}

//net.minecraft.world.WorldProperties
interface WorldProperties extends JObject{
 getTime(): long;
 getTimeOfDay(): long;
 isDifficultyLocked(): boolean;
 setRaining(raining: boolean): void;
 isHardcore(): boolean;
 getDifficulty(): Difficulty;
 populateCrashReport(reportSection: CrashReportSection,world: HeightLimitView): void;
 getSpawnX(): number;
 getSpawnY(): number;
 getSpawnAngle(): number;
 getSpawnZ(): number;
 isRaining(): boolean;
 isThundering(): boolean;
 getGameRules(): GameRules;
}

//net.minecraft.client.render.DimensionEffects
class DimensionEffects extends JObject{
 useThickFog(camX: number,camY: number): boolean;
 isDarkened(): boolean;
 adjustFogColor(color: Vec3d,sunHeight: number): Vec3d;
 getCloudsHeight(): number;
 getSkyType(): DimensionEffects_SkyType;
 shouldBrightenLighting(): boolean;
 getFogColorOverride(skyAngle: number,tickDelta: number): number[];
 isAlternateSkyColor(): boolean;
}
class Static_DimensionEffects {
static byDimensionType(dimensionType: DimensionType): DimensionEffects;
static method_29092(map: Object2ObjectArrayMap): void;
static BY_IDENTIFIER: Object2ObjectMap;
}

//net.minecraft.network.packet.s2c.play.SynchronizeTagsS2CPacket
class SynchronizeTagsS2CPacket extends JObject, Packet{
 apply(clientPlayPacketListener: ClientPlayPacketListener): void;
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
 getGroups(): Map;
}
class Static_SynchronizeTagsS2CPacket {
static method_34205(bufx: PacketByteBuf): RegistryKey;
static method_34203(bufx: PacketByteBuf,serializedGroup: TagPacketSerializer_Serialized): void;
static method_34204(bufx: PacketByteBuf,registryKey: RegistryKey): void;
}

//net.minecraft.structure.BastionRemnantGenerator
class BastionRemnantGenerator extends JObject{
}
class Static_BastionRemnantGenerator {
static bootstrap(poolRegisterable: Registerable): void;
static STRUCTURE_POOLS: RegistryKey;
}

//net.minecraft.client.render.BufferBuilder$BuiltBuffer
class BufferBuilder_BuiltBuffer extends JObject{
 isEmpty(): boolean;
 getParameters(): BufferBuilder_DrawParameters;
 release(): void;
 getVertexBuffer(): ByteBuffer;
 getIndexBuffer(): ByteBuffer;
}

//net.minecraft.server.SaveLoading$SaveApplierFactory
interface SaveLoading_SaveApplierFactory extends JObject{
 create(resourceManager: LifecycledResourceManager,dataPackContents: DataPackContents,combinedDynamicRegistries: CombinedDynamicRegistries,loadContext: Object): Object;
}

//net.minecraft.screen.Property
class Property extends JObject{
 get(): number;
 set(value: number): void;
 hasChanged(): boolean;
}
class Static_Property {
static create(): Property;
static create(array: number[],index: number): Property;
static create(delegate: PropertyDelegate,index: number): Property;
}

//net.minecraft.util.thread.GroupAssigningThreadFactory
class GroupAssigningThreadFactory extends JObject, ThreadFactory{
 newThread(r: Runnable): Thread;
}
class Static_GroupAssigningThreadFactory {
static method_34995(runnable: Runnable,thread: Thread,throwable: Throwable): void;
static LOGGER: Logger;
}

//net.minecraft.client.font.TextHandler$LineWrappingConsumer
interface TextHandler_LineWrappingConsumer extends JObject{
 accept(style: Style,start: number,end: number): void;
}

//net.minecraft.world.gen.densityfunction.DensityFunctionTypes
class DensityFunctionTypes extends JObject{
}
class Static_DensityFunctionTypes {
static add(a: DensityFunction,b: DensityFunction): DensityFunction;
static min(a: DensityFunction,b: DensityFunction): DensityFunction;
static max(a: DensityFunction,b: DensityFunction): DensityFunction;
static constant(density: number): DensityFunction;
static register(registry: Registry,id: string,codecHolder: CodecHolder): Codec;
static zero(): DensityFunction;
static shift(noiseParameters: RegistryEntry): DensityFunction;
static mul(a: DensityFunction,b: DensityFunction): DensityFunction;
static registerAndGetDefault(registry: Registry): Codec;
static lerp(delta: DensityFunction,start: DensityFunction,end: DensityFunction): DensityFunction;
static lerp(delta: DensityFunction,start: number,end: DensityFunction): DensityFunction;
static unary(input: DensityFunction,type: DensityFunctionTypes_UnaryOperation_Type): DensityFunction;
static cacheOnce(inputFunction: DensityFunction): DensityFunction;
static shiftA(noiseParameters: RegistryEntry): DensityFunction;
static yClampedGradient(fromY: number,toY: number,fromValue: number,toValue: number): DensityFunction;
static noiseInRange(noiseParameters: RegistryEntry,min: number,max: number): DensityFunction;
static noiseInRange(noiseParameters: RegistryEntry,scaleY: number,min: number,max: number): DensityFunction;
static noiseInRange(noiseParameters: RegistryEntry,scaleXz: number,scaleY: number,min: number,max: number): DensityFunction;
static flatCache(inputFunction: DensityFunction): DensityFunction;
static shiftB(noiseParameters: RegistryEntry): DensityFunction;
static cache2d(inputFunction: DensityFunction): DensityFunction;
static shiftedNoise(shiftX: DensityFunction,shiftZ: DensityFunction,xzScale: number,noiseParameters: RegistryEntry): DensityFunction;
static noise(noiseParameters: RegistryEntry,scaleY: number): DensityFunction;
static noise(noiseParameters: RegistryEntry): DensityFunction;
static noise(noiseParameters: RegistryEntry,scaleXz: number,scaleY: number): DensityFunction;
static endIslands(seed: long): DensityFunction;
static blendOffset(): DensityFunction;
static spline(spline: Spline): DensityFunction;
static weirdScaledSampler(input: DensityFunction,parameters: RegistryEntry,mapper: DensityFunctionTypes_WeirdScaledSampler_RarityValueMapper): DensityFunction;
static rangeChoice(input: DensityFunction,minInclusive: number,maxExclusive: number,whenInRange: DensityFunction,whenOutOfRange: DensityFunction): DensityFunction;
static interpolated(inputFunction: DensityFunction): DensityFunction;
static blendDensity(input: DensityFunction): DensityFunction;
static blendAlpha(): DensityFunction;
static method_41070(fun: Function,function2: Function,biFunction: BiFunction,instance: RecordCodecBuilder_Instance): App;
static mapRange(fun: DensityFunction,min: number,max: number): DensityFunction;
static cacheAllInCell(inputFunction: DensityFunction): DensityFunction;
static holderOf(mapCodec: MapCodec): CodecHolder;
static holderOf(creator: BiFunction,argument1Getter: Function,argument2Getter: Function): CodecHolder;
static holderOf(creator: Function,argumentGetter: Function): CodecHolder;
static holderOf(codec: Codec,creator: Function,argumentGetter: Function): CodecHolder;
static method_42360(densityFunction: DensityFunction): Codec;
static method_41063(either: Either): DensityFunction;
static method_41071(densityFunction: DensityFunction): Either;
static DYNAMIC_RANGE: Codec;
static MAX_CONSTANT_VALUE: number;
static CONSTANT_RANGE: Codec;
static CODEC: Codec;
}

//net.minecraft.client.gui.widget.WrapperWidget
class WrapperWidget extends JObject, LayoutWidget{
 getWidth(): number;
 getHeight(): number;
 setX(x: number): void;
 getX(): number;
 getY(): number;
 setY(y: number): void;
}

//net.minecraft.world.block.ChainRestrictedNeighborUpdater
class ChainRestrictedNeighborUpdater extends JObject, NeighborUpdater{
 updateNeighbors(pos: BlockPos,sourceBlock: Block,except: Direction): void;
 updateNeighbor(pos: BlockPos,sourceBlock: Block,sourcePos: BlockPos): void;
 updateNeighbor(state: BlockState,pos: BlockPos,sourceBlock: Block,sourcePos: BlockPos,notify: boolean): void;
 replaceWithStateForNeighborUpdate(direction: Direction,neighborState: BlockState,pos: BlockPos,neighborPos: BlockPos,flags: number,maxUpdateDepth: number): void;
}
class Static_ChainRestrictedNeighborUpdater {
static LOGGER: Logger;
}

//net.minecraft.resource.ResourceReloader
interface ResourceReloader extends JObject{
 getName(): string;
 reload(synchronizer: ResourceReloader_Synchronizer,manager: ResourceManager,prepareProfiler: Profiler,applyProfiler: Profiler,prepareExecutor: Executor,applyExecutor: Executor): CompletableFuture;
}

//net.minecraft.world.event.Vibrations$ListenerData
class Vibrations_ListenerData extends JObject{
 getSelector(): VibrationSelector;
 setDelay(delay: number): void;
 shouldSpawnParticle(): boolean;
 getVibration(): Vibration;
 tickDelay(): void;
 getDelay(): number;
 setVibration(vibration: Vibration): void;
 setSpawnParticle(spawnParticle: boolean): void;
}
class Static_Vibrations_ListenerData {
static method_51391(listenerData: Vibrations_ListenerData): Optional;
static method_51392(vibration: Optional,selector: VibrationSelector,delay: Integer): Vibrations_ListenerData;
static method_51389(instance: RecordCodecBuilder_Instance): App;
static CODEC: Codec;
static LISTENER_NBT_KEY: string;
}

//net.minecraft.world.gen.chunk.FlatChunkGeneratorConfig
class FlatChunkGeneratorConfig extends JObject{
 with(layers: List,structureOverrides: Optional,biome: RegistryEntry): FlatChunkGeneratorConfig;
 enableLakes(): void;
 enableFeatures(): void;
 getLayerBlocks(): List;
 getBiome(): RegistryEntry;
 getLayers(): List;
 createGenerationSettings(biomeEntry: RegistryEntry): GenerationSettings;
 getStructureOverrides(): Optional;
 updateLayerBlocks(): void;
}
class Static_FlatChunkGeneratorConfig {
static getLavaLakes(featureLookup: RegistryEntryLookup): List;
static getDefaultConfig(biomeLookup: RegistryEntryLookup,structureSetLookup: RegistryEntryLookup,featureLookup: RegistryEntryLookup): FlatChunkGeneratorConfig;
static getBiome(biome: Optional,fallback: RegistryEntry): RegistryEntry;
static method_49537(): string;
static checkHeight(config: FlatChunkGeneratorConfig): DataResult;
static method_30047(config: FlatChunkGeneratorConfig): Boolean;
static method_30046(config: FlatChunkGeneratorConfig): Boolean;
static method_41140(config: FlatChunkGeneratorConfig): Optional;
static method_28913(instance: RecordCodecBuilder_Instance): App;
static method_31182(config: FlatChunkGeneratorConfig): Optional;
static getPlains(biomeLookup: RegistryEntryLookup): RegistryEntry;
static method_34741(state: BlockState): boolean;
static LOGGER: Logger;
static CODEC: Codec;
}

//net.minecraft.entity.attribute.EntityAttributeModifier
class EntityAttributeModifier extends JObject{
 getName(): string;
 equals(o: Object): boolean;
 toString(): string;
 hashCode(): number;
 getValue(): number;
 getId(): UUID;
 toNbt(): NbtCompound;
 getOperation(): EntityAttributeModifier_Operation;
}
class Static_EntityAttributeModifier {
static fromNbt(nbt: NbtCompound): EntityAttributeModifier;
static method_6184(string: string): string;
static method_6183(string: string): string;
static LOGGER: Logger;
}

//net.minecraft.registry.tag.FlatLevelGeneratorPresetTags
class FlatLevelGeneratorPresetTags extends JObject{
}
class Static_FlatLevelGeneratorPresetTags {
static of(id: string): TagKey;
static VISIBLE: TagKey;
}

//net.minecraft.client.gui.tooltip.TooltipPositioner
interface TooltipPositioner extends JObject{
 getPosition(screenWidth: number,screenHeight: number,x: number,y: number,width: number,height: number): Vector2ic;
}

//net.minecraft.client.particle.BlockMarkerParticle$Factory
class BlockMarkerParticle_Factory extends JObject, ParticleFactory{
 createParticle(blockStateParticleEffect: BlockStateParticleEffect,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
 createParticle(particleEffect: ParticleEffect,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
}

//net.minecraft.command.argument.serialize.IntegerArgumentSerializer$Properties
class IntegerArgumentSerializer_Properties extends JObject, ArgumentSerializer_ArgumentTypeProperties{
 createType(commandRegistryAccess: CommandRegistryAccess): ArgumentType;
 createType(commandRegistryAccess: CommandRegistryAccess): IntegerArgumentType;
 getSerializer(): ArgumentSerializer;
}

//net.minecraft.advancement.criterion.AbstractCriterion
class AbstractCriterion extends JObject, Criterion{
 conditionsFromJson(obj: JsonObject,predicateDeserializer: AdvancementEntityPredicateDeserializer): CriterionConditions;
 conditionsFromJson(jsonObject: JsonObject,advancementEntityPredicateDeserializer: AdvancementEntityPredicateDeserializer): AbstractCriterionConditions;
 beginTrackingCondition(manager: PlayerAdvancementTracker,conditions: Criterion_ConditionsContainer): void;
 endTrackingCondition(manager: PlayerAdvancementTracker,conditions: Criterion_ConditionsContainer): void;
 endTracking(tracker: PlayerAdvancementTracker): void;
}
class Static_AbstractCriterion {
static method_22512(managerx: PlayerAdvancementTracker): Set;
}

//net.minecraft.entity.ai.brain.task.HideInHomeTask
class HideInHomeTask extends JObject{
}
class Static_HideInHomeTask {
static create(maxDistance: number,walkSpeed: number,preferredDistance: number): SingleTickTask;
static method_46979(serverWorld: ServerWorld,livingEntity: LivingEntity,i: number): Optional;
static method_46986(poiType: RegistryEntry): boolean;
static method_46976(i: number,j: number,f: number,context: TaskTriggerer_TaskContext): App;
static method_46978(i: number,j: number,taskContext: TaskTriggerer_TaskContext,memoryQueryResult: MemoryQueryResult,memoryQueryResult2: MemoryQueryResult,memoryQueryResult3: MemoryQueryResult,memoryQueryResult4: MemoryQueryResult,memoryQueryResult5: MemoryQueryResult,memoryQueryResult6: MemoryQueryResult,memoryQueryResult7: MemoryQueryResult,f: number,world: ServerWorld,entity: LivingEntity,time: long): boolean;
static method_46977(i: number,j: number,taskContext: TaskTriggerer_TaskContext,f: number,walkTarget: MemoryQueryResult,home: MemoryQueryResult,hidingPlace: MemoryQueryResult,path: MemoryQueryResult,lookTarget: MemoryQueryResult,breedTarget: MemoryQueryResult,interactionTarget: MemoryQueryResult): TaskRunnable;
static method_46980(livingEntity: LivingEntity,i: number,pos: BlockPos): boolean;
static method_46985(pos: BlockPos): boolean;
static method_46981(taskContext: TaskTriggerer_TaskContext,memoryQueryResult: MemoryQueryResult): Optional;
static method_46982(memoryQueryResult: MemoryQueryResult,memoryQueryResult2: MemoryQueryResult,memoryQueryResult3: MemoryQueryResult,memoryQueryResult4: MemoryQueryResult,memoryQueryResult5: MemoryQueryResult,serverWorld: ServerWorld,livingEntity: LivingEntity,i: number,memoryQueryResult6: MemoryQueryResult,f: number,pos: BlockPos): void;
static method_46984(poiType: RegistryEntry): boolean;
static method_46983(pos: BlockPos): boolean;
}

//net.minecraft.world.gen.surfacebuilder.SurfaceBuilder$1


//net.minecraft.world.gen.WorldPreset
class WorldPreset extends JObject{
 getOverworld(): Optional;
 createDimensionsRegistryHolder(): DimensionOptionsRegistryHolder;
}
class Static_WorldPreset {
static validate(preset: WorldPreset): DataResult;
static method_49538(): string;
static method_41586(instance: RecordCodecBuilder_Instance): App;
static method_41588(preset: WorldPreset): Map;
static CODEC: Codec;
static ENTRY_CODEC: Codec;
}

//net.minecraft.client.sound.AudioStream
interface AudioStream extends JObject, Closeable{
 getBuffer(size: number): ByteBuffer;
 getFormat(): AudioFormat;
}

//net.minecraft.world.gen.feature.ReplaceBlobsFeatureConfig
class ReplaceBlobsFeatureConfig extends JObject, FeatureConfig{
 getRadius(): IntProvider;
 target: BlockState;
 state: BlockState;
}
class Static_ReplaceBlobsFeatureConfig {
static method_30409(config: ReplaceBlobsFeatureConfig): BlockState;
static method_30406(instance: RecordCodecBuilder_Instance): App;
static method_30407(config: ReplaceBlobsFeatureConfig): IntProvider;
static method_30408(config: ReplaceBlobsFeatureConfig): BlockState;
static CODEC: Codec;
}

//net.minecraft.loot.function.LootFunction
interface LootFunction extends JObject, LootContextAware, BiFunction{
 getType(): LootFunctionType;
}
class Static_LootFunction {
static apply(itemApplier: BiFunction,lootConsumer: Consumer,context: LootContext): Consumer;
static method_514(consumer: Consumer,biFunction: BiFunction,lootContext: LootContext,stack: ItemStack): void;
}

//net.minecraft.client.sound.SoundEngine$1


//net.minecraft.client.network.Address$1


//net.minecraft.client.util.RawTextureDataLoader
class RawTextureDataLoader extends JObject{
}
class Static_RawTextureDataLoader {
static loadRawTextureData(resourceManager: ResourceManager,id: Identifier): number[];
}

//net.minecraft.client.render.model.json.MultipartModelComponent$Deserializer
class MultipartModelComponent_Deserializer extends JObject, JsonDeserializer{
 deserialize(json: JsonElement,type: Type,context: JsonDeserializationContext): Object;
 deserialize(jsonElement: JsonElement,type: Type,jsonDeserializationContext: JsonDeserializationContext): MultipartModelComponent;
}
class Static_MultipartModelComponent_Deserializer {
static deserializeSelector(object: JsonObject): MultipartModelSelector;
static createStatePropertySelector(entry: Map_Entry): MultipartModelSelector;
static method_3534(json: JsonElement): MultipartModelSelector;
static method_3537(json: JsonElement): MultipartModelSelector;
}

//net.minecraft.predicate.entity.PlayerPredicate$AdvancementPredicate
interface PlayerPredicate_AdvancementPredicate extends JObject, Predicate{
 toJson(): JsonElement;
}

//net.minecraft.entity.EntityStatuses
class EntityStatuses extends JObject{
}
class Static_EntityStatuses {
static ADD_SPRINTING_PARTICLES_OR_RESET_SPAWNER_MINECART_SPAWN_DELAY: byte;
static PLAY_DEATH_SOUND_OR_ADD_PROJECTILE_HIT_PARTICLES: byte;
static PLAY_ATTACK_SOUND: byte;
static field_30030: byte;
static ADD_NEGATIVE_PLAYER_REACTION_PARTICLES: byte;
static ADD_POSITIVE_PLAYER_REACTION_PARTICLES: byte;
static SHAKE_OFF_WATER: byte;
static CONSUME_ITEM: byte;
static SET_SHEEP_EAT_GRASS_TIMER_OR_PRIME_TNT_MINECART: byte;
static LOOK_AT_VILLAGER: byte;
static ADD_VILLAGER_HEART_PARTICLES: byte;
static ADD_VILLAGER_ANGRY_PARTICLES: byte;
static ADD_VILLAGER_HAPPY_PARTICLES: byte;
static ADD_WITCH_PARTICLES: byte;
static PLAY_CURE_ZOMBIE_VILLAGER_SOUND: byte;
static EXPLODE_FIREWORK_CLIENT: byte;
static ADD_BREEDING_PARTICLES: byte;
static RESET_SQUID_THRUST_TIMER: byte;
static PLAY_SPAWN_EFFECTS: byte;
static PLAY_GUARDIAN_ATTACK_SOUND: byte;
static USE_REDUCED_DEBUG_INFO: byte;
static USE_FULL_DEBUG_INFO: byte;
static SET_OP_LEVEL_0: byte;
static SET_OP_LEVEL_1: byte;
static SET_OP_LEVEL_2: byte;
static SET_OP_LEVEL_3: byte;
static SET_OP_LEVEL_4: byte;
static BLOCK_WITH_SHIELD: byte;
static BREAK_SHIELD: byte;
static PULL_HOOKED_ENTITY: byte;
static HIT_ARMOR_STAND: byte;
static STOP_LOOKING_AT_VILLAGER: byte;
static USE_TOTEM_OF_UNDYING: byte;
static ADD_DOLPHIN_HAPPY_VILLAGER_PARTICLES: byte;
static STUN_RAVAGER: byte;
static TAME_OCELOT_FAILED: byte;
static TAME_OCELOT_SUCCESS: byte;
static ADD_SPLASH_PARTICLES: byte;
static ADD_CLOUD_PARTICLES: byte;
static CREATE_EATING_PARTICLES: byte;
static ADD_PORTAL_PARTICLES: byte;
static BREAK_MAINHAND: byte;
static BREAK_OFFHAND: byte;
static BREAK_HEAD: byte;
static BREAK_CHEST: byte;
static BREAK_LEGS: byte;
static BREAK_FEET: byte;
static DRIP_HONEY: byte;
static DRIP_RICH_HONEY: byte;
static SWAP_HANDS: byte;
static RESET_WOLF_SHAKE: byte;
static PREPARE_RAM: byte;
static FINISH_RAM: byte;
static ADD_DEATH_PARTICLES: byte;
static EARS_TWITCH: byte;
static SONIC_BOOM: byte;
static START_DIGGING: byte;
}

//net.minecraft.server.command.JfrCommand
class JfrCommand extends JObject{
}
class Static_JfrCommand {
static register(dispatcher: CommandDispatcher): void;
static executeStop(source: ServerCommandSource): number;
static executeStart(source: ServerCommandSource): number;
static method_39499(path: Path,style: Style): Style;
static method_38616(context: CommandContext): number;
static method_38615(message: Object): Message;
static method_52002(text: Text): Text;
static method_38618(source: ServerCommandSource): boolean;
static method_52001(): Text;
static method_38613(context: CommandContext): number;
static JFR_START_FAILED_EXCEPTION: SimpleCommandExceptionType;
static JFR_DUMP_FAILED_EXCEPTION: DynamicCommandExceptionType;
}

//net.minecraft.client.font.Glyph$EmptyGlyph
interface Glyph_EmptyGlyph extends JObject, Glyph{
 bake(fun: Function): GlyphRenderer;
}

//net.minecraft.client.render.block.entity.EndPortalBlockEntityRenderer
class EndPortalBlockEntityRenderer extends JObject, BlockEntityRenderer{
 render(endPortalBlockEntity: EndPortalBlockEntity,f: number,matrixStack: MatrixStack,vertexConsumerProvider: VertexConsumerProvider,i: number,j: number): void;
 render(entity: BlockEntity,tickDelta: number,matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,light: number,overlay: number): void;
}
class Static_EndPortalBlockEntityRenderer {
static SKY_TEXTURE: Identifier;
static PORTAL_TEXTURE: Identifier;
}

//net.minecraft.loot.condition.LocationCheckLootCondition$Serializer
class LocationCheckLootCondition_Serializer extends JObject, JsonSerializer{
 fromJson(json: JsonObject,context: JsonDeserializationContext): Object;
 fromJson(jsonObject: JsonObject,jsonDeserializationContext: JsonDeserializationContext): LocationCheckLootCondition;
 toJson(jsonObject: JsonObject,locationCheckLootCondition: LocationCheckLootCondition,jsonSerializationContext: JsonSerializationContext): void;
 toJson(json: JsonObject,object: Object,context: JsonSerializationContext): void;
}

//net.minecraft.network.message.SignedCommandArguments
interface SignedCommandArguments extends JObject{
 getMessage(argumentName: string): SignedMessage;
}
class Static_SignedCommandArguments {
static EMPTY: SignedCommandArguments;
}

//net.minecraft.client.color.item.ItemColors
class ItemColors extends JObject{
 register(provider: ItemColorProvider,items: ItemConvertible[]): void;
 getColor(item: ItemStack,tintIndex: number): number;
}
class Static_ItemColors {
static create(blockColors: BlockColors): ItemColors;
static method_1701(stack: ItemStack,tintIndex: number): number;
static method_1700(stack: ItemStack,tintIndex: number): number;
static method_1699(spawnEggItem: SpawnEggItem,stack: ItemStack,tintIndex: number): number;
static method_1705(stack: ItemStack,tintIndex: number): number;
static method_43767(stack: ItemStack,tintIndex: number): number;
static method_1707(stack: ItemStack,tintIndex: number): number;
static method_1702(blockColors: BlockColors,stack: ItemStack,tintIndex: number): number;
static method_1709(stack: ItemStack,tintIndex: number): number;
static method_1703(stack: ItemStack,tintIndex: number): number;
static NO_COLOR: number;
}

//net.minecraft.entity.ai.brain.task.RingBellTask
class RingBellTask extends JObject{
}
class Static_RingBellTask {
static create(): Task;
static method_47047(taskContext: TaskTriggerer_TaskContext,memoryQueryResult: MemoryQueryResult,world: ServerWorld,entity: LivingEntity,time: long): boolean;
static method_47046(taskContext: TaskTriggerer_TaskContext,meetingPoint: MemoryQueryResult): TaskRunnable;
static method_47045(context: TaskTriggerer_TaskContext): App;
static RUN_CHANCE: number;
static MAX_DISTANCE: number;
}

//net.minecraft.client.font.MultilineText$2


//net.minecraft.registry.RegistryLoader$RegistryLoadable
interface RegistryLoader_RegistryLoadable extends JObject{
 load(resourceManager: ResourceManager,registryInfoGetter: RegistryOps_RegistryInfoGetter): void;
}

//net.minecraft.client.font.MultilineText$1


//net.minecraft.world.biome.source.BiomeSource
class BiomeSource extends JObject, BiomeSupplier{
 locateBiome(origin: BlockPos,radius: number,horizontalBlockCheckInterval: number,verticalBlockCheckInterval: number,predicate: Predicate,noiseSampler: MultiNoiseUtil_MultiNoiseSampler,world: WorldView): Pair;
 locateBiome(x: number,y: number,z: number,radius: number,predicate: Predicate,random: Random,noiseSampler: MultiNoiseUtil_MultiNoiseSampler): Pair;
 locateBiome(x: number,y: number,z: number,radius: number,blockCheckInterval: number,predicate: Predicate,random: Random,bl: boolean,noiseSampler: MultiNoiseUtil_MultiNoiseSampler): Pair;
 addDebugInfo(info: List,pos: BlockPos,noiseSampler: MultiNoiseUtil_MultiNoiseSampler): void;
 getBiome(x: number,y: number,z: number,noise: MultiNoiseUtil_MultiNoiseSampler): RegistryEntry;
 getBiomesInArea(x: number,y: number,z: number,radius: number,sampler: MultiNoiseUtil_MultiNoiseSampler): Set;
 getBiomes(): Set;
}
class Static_BiomeSource {
static CODEC: Codec;
}

//net.minecraft.client.font.TextHandler$LineBreakingVisitor
class TextHandler_LineBreakingVisitor extends JObject, CharacterVisitor{
 offset(extraOffset: number): void;
 accept(i: number,style: Style,j: number): boolean;
 getEndingStyle(): Style;
 getEndingIndex(): number;
}

//net.minecraft.client.item.CompassAnglePredicateProvider$AngleInterpolator
class CompassAnglePredicateProvider_AngleInterpolator extends JObject{
}

//net.minecraft.server.DataPackContents
class DataPackContents extends JObject{
 getContents(): List;
 refresh(dynamicRegistryManager: DynamicRegistryManager): void;
 getServerAdvancementLoader(): ServerAdvancementLoader;
 getCommandManager(): CommandManager;
 getRecipeManager(): RecipeManager;
 getLootManager(): LootManager;
 getFunctionLoader(): FunctionLoader;
}
class Static_DataPackContents {
static reload(manager: ResourceManager,dynamicRegistryManager: DynamicRegistryManager_Immutable,enabledFeatures: FeatureSet,environment: CommandManager_RegistrationEnvironment,functionPermissionLevel: number,prepareExecutor: Executor,applyExecutor: Executor): CompletableFuture;
static repopulateTags(dynamicRegistryManager: DynamicRegistryManager,tags: TagManagerLoader_RegistryTags): void;
static method_40423(entry: Map_Entry): List;
static method_40425(dataPackContents: DataPackContents,void_: Object): DataPackContents;
static method_42095(dataPackContents: DataPackContents,void_: Object,throwable: Throwable): void;
static method_40426(dynamicRegistryManager: DynamicRegistryManager,tags: TagManagerLoader_RegistryTags): void;
static method_40424(registryKey: RegistryKey,entry: Map_Entry): TagKey;
static LOGGER: Logger;
static COMPLETED_UNIT: CompletableFuture;
}

//net.minecraft.predicate.entity.EntityPredicates$Equipable
class EntityPredicates_Equipable extends JObject, Predicate{
 test(entity: Entity): boolean;
 test(context: Object): boolean;
}

//net.minecraft.util.shape.PairList$Consumer
interface PairList_Consumer extends JObject{
 merge(x: number,y: number,index: number): boolean;
}

//net.minecraft.client.render.debug.BeeDebugRenderer$Hive
class BeeDebugRenderer_Hive extends JObject{
 pos: BlockPos;
 label: string;
 beeCount: number;
 honeyLevel: number;
 sedated: boolean;
 time: long;
}

//net.minecraft.registry.tag.TagBuilder
class TagBuilder extends JObject{
 add(id: Identifier): TagBuilder;
 add(entry: TagEntry): TagBuilder;
 build(): List;
 addOptional(id: Identifier): TagBuilder;
 addOptionalTag(id: Identifier): TagBuilder;
 addTag(id: Identifier): TagBuilder;
}
class Static_TagBuilder {
static create(): TagBuilder;
}

//net.minecraft.resource.ResourceManager
interface ResourceManager extends JObject, ResourceFactory{
 findResources(startingPath: string,allowedPathPredicate: Predicate): Map;
 streamResourcePacks(): Stream;
 getAllNamespaces(): Set;
 getAllResources(id: Identifier): List;
 findAllResources(startingPath: string,allowedPathPredicate: Predicate): Map;
}

//net.minecraft.test.TestSet
class TestSet extends JObject{
 add(test: GameTestState): void;
 toString(): string;
 isDone(): boolean;
 addListener(onFailed: Consumer): void;
 addListener(listener: TestListener): void;
 getCompletedTestCount(): number;
 failed(): boolean;
 getTestCount(): number;
 getFailedRequiredTestCount(): number;
 hasFailedOptionalTests(): boolean;
 getFailedOptionalTestCount(): number;
 getRequiredTests(): Collection;
 getResultString(): string;
 getOptionalTests(): Collection;
}
class Static_TestSet {
static method_22233(stringBuffer: StringBuffer,test: GameTestState): void;
static method_22232(testListener: TestListener,test: GameTestState): void;
static NOT_STARTED: char;
static RUNNING: char;
static PASS: char;
static OPTIONAL_FAIL: char;
static REQUIRED_FAIL: char;
}

//net.minecraft.world.biome.source.util.MultiNoiseUtil
class MultiNoiseUtil extends JObject{
}
class Static_MultiNoiseUtil {
static createNoiseValuePoint(temperatureNoise: number,humidityNoise: number,continentalnessNoise: number,erosionNoise: number,depth: number,weirdnessNoise: number): MultiNoiseUtil_NoiseValuePoint;
static createEmptyMultiNoiseSampler(): MultiNoiseUtil_MultiNoiseSampler;
static findFittestPosition(noises: List,sampler: MultiNoiseUtil_MultiNoiseSampler): BlockPos;
static toLong(value: number): long;
static toFloat(value: long): number;
static createNoiseHypercube(temperature: MultiNoiseUtil_ParameterRange,humidity: MultiNoiseUtil_ParameterRange,continentalness: MultiNoiseUtil_ParameterRange,erosion: MultiNoiseUtil_ParameterRange,depth: MultiNoiseUtil_ParameterRange,weirdness: MultiNoiseUtil_ParameterRange,offset: number): MultiNoiseUtil_NoiseHypercube;
static createNoiseHypercube(temperature: number,humidity: number,continentalness: number,erosion: number,depth: number,weirdness: number,offset: number): MultiNoiseUtil_NoiseHypercube;
static field_34477: boolean;
static TO_LONG_FACTOR: number;
static HYPERCUBE_DIMENSION: number;
}

//net.minecraft.util.Nameable
interface Nameable extends JObject{
 getName(): Text;
 getDisplayName(): Text;
 hasCustomName(): boolean;
 getCustomName(): Text;
}

//net.minecraft.util.math.BlockBox
class BlockBox extends JObject{
 equals(o: Object): boolean;
 toString(): string;
 hashCode(): number;
 offset(x: number,y: number,z: number): BlockBox;
 contains(x: number,y: number,z: number): boolean;
 contains(pos: Vec3i): boolean;
 expand(offset: number): BlockBox;
 move(dx: number,dy: number,dz: number): BlockBox;
 move(vec: Vec3i): BlockBox;
 getDimensions(): Vec3i;
 getCenter(): BlockPos;
 intersectsXZ(minX: number,minZ: number,maxX: number,maxZ: number): boolean;
 intersects(other: BlockBox): boolean;
 getBlockCountZ(): number;
 getBlockCountX(): number;
 encompass(box: BlockBox): BlockBox;
 encompass(pos: BlockPos): BlockBox;
 getMinX(): number;
 getMaxX(): number;
 getMinY(): number;
 getMaxZ(): number;
 getMinZ(): number;
 getMaxY(): number;
 getBlockCountY(): number;
 forEachVertex(consumer: Consumer): void;
}
class Static_BlockBox {
static create(first: Vec3i,second: Vec3i): BlockBox;
static infinite(): BlockBox;
static rotated(x: number,y: number,z: number,offsetX: number,offsetY: number,offsetZ: number,sizeX: number,sizeY: number,sizeZ: number,facing: Direction): BlockBox;
static encompass(boxes: Iterable): Optional;
static encompassPositions(positions: Iterable): Optional;
static method_34394(box: BlockBox): IntStream;
static method_34393(array: number[]): BlockBox;
static method_34392(values: IntStream): DataResult;
static LOGGER: Logger;
static CODEC: Codec;
}

//net.minecraft.block.PistonBlock$1


//net.minecraft.client.realms.KeyCombo
class KeyCombo extends JObject{
 toString(): string;
 reset(): void;
 keyPressed(key: char): boolean;
}
class Static_KeyCombo {
static method_35680(): void;
}

//net.minecraft.client.color.world.FoliageColors
class FoliageColors extends JObject{
}
class Static_FoliageColors {
static getBirchColor(): number;
static getSpruceColor(): number;
static setColorMap(pixels: number[]): void;
static getDefaultColor(): number;
static getColor(temperature: number,humidity: number): number;
static getMangroveColor(): number;
static colorMap: number[];
}

//net.minecraft.world.event.listener.VibrationSelector
class VibrationSelector extends JObject{
 clear(): void;
 tryAccept(vibration: Vibration,tick: long): void;
 getVibrationToTick(currentTick: long): Optional;
}
class Static_VibrationSelector {
static method_45503(l: long,vibration2: Vibration): Pair;
static method_45504(instance: RecordCodecBuilder_Instance): App;
static method_45506(vibrationSelector: VibrationSelector): Long;
static method_45508(vibrationSelector: VibrationSelector): Optional;
static CODEC: Codec;
}

//net.minecraft.world.gen.treedecorator.TreeDecorator$Generator
class TreeDecorator_Generator extends JObject{
 replace(pos: BlockPos,state: BlockState): void;
 getWorld(): TestableWorld;
 isAir(pos: BlockPos): boolean;
 getRandom(): Random;
 getLeavesPositions(): ObjectArrayList;
 replaceWithVine(pos: BlockPos,faceProperty: BooleanProperty): void;
 getLogPositions(): ObjectArrayList;
 getRootPositions(): ObjectArrayList;
}

//net.minecraft.world.border.WorldBorder$Area
interface WorldBorder_Area extends JObject{
 getSize(): number;
 getBoundNorth(): number;
 onMaxRadiusChanged(): void;
 getAreaInstance(): WorldBorder_Area;
 onCenterChanged(): void;
 getBoundWest(): number;
 getBoundEast(): number;
 getSizeLerpTime(): long;
 getStage(): WorldBorderStage;
 getBoundSouth(): number;
 getSizeLerpTarget(): number;
 getShrinkingSpeed(): number;
 asVoxelShape(): VoxelShape;
}

//net.minecraft.unused.packageinfo.PackageInfo6133
interface PackageInfo6133 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6132
interface PackageInfo6132 extends JObject{
}

//net.minecraft.client.render.model.json.ItemModelGenerator$Frame
class ItemModelGenerator_Frame extends JObject{
 expand(newValue: number): void;
 getMin(): number;
 getMax(): number;
 getLevel(): number;
 getSide(): ItemModelGenerator_Side;
}

//net.minecraft.unused.packageinfo.PackageInfo6131
interface PackageInfo6131 extends JObject{
}

//net.minecraft.block.MapColor
class MapColor extends JObject{
 getRenderColor(brightness: MapColor_Brightness): number;
 getRenderColorByte(brightness: MapColor_Brightness): byte;
 color: number;
 id: number;
}
class Static_MapColor {
static get(id: number): MapColor;
static getUnchecked(id: number): MapColor;
static getRenderColor(colorByte: number): number;
static COLORS: MapColor[];
static CLEAR: MapColor;
static PALE_GREEN: MapColor;
static PALE_YELLOW: MapColor;
static WHITE_GRAY: MapColor;
static BRIGHT_RED: MapColor;
static PALE_PURPLE: MapColor;
static IRON_GRAY: MapColor;
static DARK_GREEN: MapColor;
static WHITE: MapColor;
static LIGHT_BLUE_GRAY: MapColor;
static DIRT_BROWN: MapColor;
static STONE_GRAY: MapColor;
static WATER_BLUE: MapColor;
static OAK_TAN: MapColor;
static OFF_WHITE: MapColor;
static ORANGE: MapColor;
static MAGENTA: MapColor;
static LIGHT_BLUE: MapColor;
static YELLOW: MapColor;
static LIME: MapColor;
static PINK: MapColor;
static GRAY: MapColor;
static LIGHT_GRAY: MapColor;
static CYAN: MapColor;
static PURPLE: MapColor;
static BLUE: MapColor;
static BROWN: MapColor;
static GREEN: MapColor;
static RED: MapColor;
static BLACK: MapColor;
static GOLD: MapColor;
static DIAMOND_BLUE: MapColor;
static LAPIS_BLUE: MapColor;
static EMERALD_GREEN: MapColor;
static SPRUCE_BROWN: MapColor;
static DARK_RED: MapColor;
static TERRACOTTA_WHITE: MapColor;
static TERRACOTTA_ORANGE: MapColor;
static TERRACOTTA_MAGENTA: MapColor;
static TERRACOTTA_LIGHT_BLUE: MapColor;
static TERRACOTTA_YELLOW: MapColor;
static TERRACOTTA_LIME: MapColor;
static TERRACOTTA_PINK: MapColor;
static TERRACOTTA_GRAY: MapColor;
static TERRACOTTA_LIGHT_GRAY: MapColor;
static TERRACOTTA_CYAN: MapColor;
static TERRACOTTA_PURPLE: MapColor;
static TERRACOTTA_BLUE: MapColor;
static TERRACOTTA_BROWN: MapColor;
static TERRACOTTA_GREEN: MapColor;
static TERRACOTTA_RED: MapColor;
static TERRACOTTA_BLACK: MapColor;
static DULL_RED: MapColor;
static DULL_PINK: MapColor;
static DARK_CRIMSON: MapColor;
static TEAL: MapColor;
static DARK_AQUA: MapColor;
static DARK_DULL_PINK: MapColor;
static BRIGHT_TEAL: MapColor;
static DEEPSLATE_GRAY: MapColor;
static RAW_IRON_PINK: MapColor;
static LICHEN_GREEN: MapColor;
}

//net.minecraft.block.AbstractRailBlock$1


//net.minecraft.world.chunk.light.LightStorage$PropagationFlags
class LightStorage_PropagationFlags extends JObject{
}
class Static_LightStorage_PropagationFlags {
static getStatus(packed: byte): LightStorage_Status;
static setReady(packed: byte,ready: boolean): byte;
static withNeighborCount(packed: byte,neighborCount: number): byte;
static getNeighborCount(packed: byte): number;
static isReady(packed: byte): boolean;
static field_44719: byte;
static MIN_NEIGHBOR_COUNT: number;
static MAX_NEIGHBOR_COUNT: number;
static field_44722: byte;
static NEIGHBOR_COUNT_MASK: byte;
}

//net.minecraft.client.sound.BubbleColumnSoundPlayer
class BubbleColumnSoundPlayer extends JObject, ClientPlayerTickable{
 tick(): void;
}
class Static_BubbleColumnSoundPlayer {
static method_29714(state: BlockState): boolean;
}

//net.minecraft.registry.RegistryBuilder$InitializedRegistry$1


//net.minecraft.unused.packageinfo.PackageInfo6135
interface PackageInfo6135 extends JObject{
}

//net.minecraft.client.particle.ElderGuardianAppearanceParticle$Factory
class ElderGuardianAppearanceParticle_Factory extends JObject, ParticleFactory{
 createParticle(defaultParticleType: DefaultParticleType,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
 createParticle(particleEffect: ParticleEffect,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
}

//net.minecraft.client.tutorial.FindTreeTutorialStepHandler
class FindTreeTutorialStepHandler extends JObject, TutorialStepHandler{
 destroy(): void;
 tick(): void;
 onTarget(world: ClientWorld,hitResult: HitResult): void;
 onSlotUpdate(stack: ItemStack): void;
}
class Static_FindTreeTutorialStepHandler {
static hasItem(player: ClientPlayerEntity): boolean;
static hasBrokenTreeBlocks(player: ClientPlayerEntity): boolean;
static method_43340(stack: ItemStack): boolean;
static DELAY: number;
static TITLE: Text;
static DESCRIPTION: Text;
}

//net.minecraft.util.dynamic.Codecs
class Codecs extends JObject{
}
class Static_Codecs {
static validate(codec: Codec,validator: Function): Codec;
static validate(codec: MapCodec,validator: Function): MapCodec;
static string(minLength: number,maxLength: number): Codec;
static instant(formatter: DateTimeFormatter): Codec;
static xor(first: Codec,second: Codec): Codec;
static nonEmptyList(originalCodec: Codec): Codec;
static createContextRetrievalCodec(retriever: Function): MapCodec;
static createCodecForPairObject(codec: Codec,leftFieldName: string,rightFieldName: string,combineFunction: BiFunction,leftFunction: Function,rightFunction: Function): Codec;
static createGameProfileFromPair(pair: Pair): DataResult;
static createPairFromGameProfile(profile: GameProfile): DataResult;
static withLifecycle(originalCodec: Codec,entryLifecycleGetter: Function,lifecycleGetter: Function): Codec;
static orElsePartial(object: Object): Codec_ResultFunction;
static exceptionCatching(codec: Codec): Codec;
static nonEmptyEntryList(originalCodec: Codec): Codec;
static orCompressed(uncompressedCodec: Codec,compressedCodec: Codec): Codec;
static rawIdChecked(elementToRawId: ToIntFunction,rawIdToElement: IntFunction,errorRawId: number): Codec;
static createLazy(supplier: Supplier): Codec;
static optionalLong(codec: MapCodec): MapCodec;
static createEqualTypeChecker(typeGetter: Function): Function;
static method_37939(fun: Function,function2: Function,pair: Object): Either;
static method_37938(biFunction: BiFunction,list: List): DataResult;
static method_37944(fun: Function,function2: Function,pair: Object): List;
static method_37936(biFunction: BiFunction,pair: Pair): DataResult;
static method_37929(either: Either): Object;
static method_37930(codec: Codec,string: string,string2: string,instance: RecordCodecBuilder_Instance): App;
static method_37935(biFunction: BiFunction,either: Either): DataResult;
static method_37943(fun: Function,function2: Function,pair: Object): Pair;
static method_39506(fun: Function,element: Object): DataResult;
static method_39507(fun: Function,id: string): DataResult;
static method_48111(i: number,j: number,fun: Function,value: Integer): DataResult;
static rangedInt(min: number,max: number): Codec;
static rangedInt(min: number,max: number,messageFactory: Function): Codec;
static idChecked(elementToId: Function,idToElement: Function): Codec;
static method_39509(intFunction: IntFunction,rawId: Integer): DataResult;
static method_39510(toIntFunction: ToIntFunction,i: number,element: Object): DataResult;
static method_51494(string: string): DataResult;
static method_48110(i: number,j: number,string: string): DataResult;
static method_51495(string: string): string;
static method_40111(fun: Function,collection: Collection): DataResult;
static method_43533(dateTimeFormatter: DateTimeFormatter,dateTimeString: string): DataResult;
static rangedFloat(min: number,max: number,messageFactory: Function): Codec;
static method_49432(string: string,i: number,j: number,k: number): string;
static method_49437(string: string,i: number,j: number,k: number): string;
static method_48108(f: number,g: number,fun: Function,value: Float): DataResult;
static method_48115(list: List): DataResult;
static method_48767(i: number,j: number,value: Integer): string;
static method_48113(entryList: RegistryEntryList): DataResult;
static method_46372(property: Property): Optional;
static method_46375(propertyMap: PropertyMap,properties: List): void;
static method_46381(key: string,value: string,signature: Optional): Property;
static method_44168(optional: Optional): OptionalLong;
static method_46370(profile: GameProfile,properties: PropertyMap): GameProfile;
static method_46371(gameProfile: GameProfile,key: string,property: Property): void;
static method_46383(optional: Optional): string;
static method_46380(instance: RecordCodecBuilder_Instance): App;
static method_46377(either: Either): PropertyMap;
static method_49430(): string;
static method_46384(stream: LongStream): BitSet;
static method_46382(set: BitSet): LongStream;
static method_48114(string: string): DataResult;
static method_46373(properties: PropertyMap): Either;
static method_46374(propertyMap: PropertyMap,key: string,values: List): void;
static method_46390(optional: Optional): UUID;
static method_44169(optionalLong: OptionalLong): Optional;
static method_43959(tagEntry: string): DataResult;
static method_46376(propertyMap: PropertyMap,map: Map): void;
static method_46388(instance: RecordCodecBuilder_Instance): App;
static method_49443(string: string): string;
static method_43962(encoded: string): DataResult;
static method_49440(): string;
static method_36242(v: Integer): string;
static method_43961(id: Identifier): Codecs_TagEntryId;
static method_49434(fun: Function,float_: Float): string;
static method_49431(object: Object,object2: Object,object3: Object): string;
static method_43960(data: byte[]): string;
static method_49433(string: string,patternSyntaxException: PatternSyntaxException): string;
static method_49436(): string;
static method_37932(v: Float): string;
static method_49435(fun: Function,integer: Integer): string;
static method_43958(id: Identifier): Codecs_TagEntryId;
static method_39513(object: Object): DataResult;
static method_49439(object: Object): string;
static method_39505(string: string): DataResult;
static method_41302(pattern: string): DataResult;
static method_36246(v: Integer): string;
static method_49438(): string;
static method_48771(list: List): DataResult;
static method_49441(integer: Integer): string;
static method_37934(object: Object): Object;
static method_37942(biFunction: BiFunction,listx: List): DataResult;
static method_49442(object: Object): string;
static method_39514(integer: Integer): DataResult;
static method_37937(biFunction: BiFunction,object: Object): DataResult;
static method_48774(either: Either): Quaternionf;
static method_48776(listx: List): Matrix4f;
static method_48769(matrix4f: Matrix4f): List;
static method_48770(quaternion: Quaternionf): Quaternionf;
static method_48772(axisAngle: AxisAngle4f): Float;
static method_48768(axisAngle: AxisAngle4f): Vector3f;
static method_37941(object: Object): Object;
static method_48775(instance: RecordCodecBuilder_Instance): App;
static method_48773(quaternion: Quaternionf): Quaternionf;
static method_46391(listx: List): Vector3f;
static method_48777(quaternion: Quaternionf): List;
static method_48778(list: List): DataResult;
static method_49755(json: string): DataResult;
static method_49754(text: Text): DataResult;
static method_46386(text: Text): DataResult;
static method_46379(dynamic: Dynamic): JsonElement;
static method_48779(listx: List): Quaternionf;
static method_46368(element: JsonElement): DataResult;
static method_46389(list: List): DataResult;
static method_46387(element: JsonElement): Dynamic;
static method_46385(vec3f: Vector3f): List;
static JSON_ELEMENT: Codec;
static TEXT: Codec;
static STRINGIFIED_TEXT: Codec;
static VECTOR_3F: Codec;
static QUATERNIONF: Codec;
static AXIS_ANGLE4F: Codec;
static ROTATION: Codec;
static MATRIX4F: Codec;
static NONNEGATIVE_INT: Codec;
static POSITIVE_INT: Codec;
static POSITIVE_FLOAT: Codec;
static REGULAR_EXPRESSION: Codec;
static INSTANT: Codec;
static BASE_64: Codec;
static TAG_ENTRY_ID: Codec;
static OPTIONAL_OF_LONG_TO_OPTIONAL_LONG: Function;
static OPTIONAL_LONG_TO_OPTIONAL_OF_LONG: Function;
static BIT_SET: Codec;
static GAME_PROFILE_PROPERTY: Codec;
static GAME_PROFILE_PROPERTY_MAP: Codec;
static GAME_PROFILE: Codec;
static NON_EMPTY_STRING: Codec;
static CODEPOINT: Codec;
}

//net.minecraft.unused.packageinfo.PackageInfo6139
interface PackageInfo6139 extends JObject{
}

//net.minecraft.client.particle.CurrentDownParticle$Factory
class CurrentDownParticle_Factory extends JObject, ParticleFactory{
 createParticle(defaultParticleType: DefaultParticleType,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
 createParticle(particleEffect: ParticleEffect,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
}

//net.minecraft.unused.packageinfo.PackageInfo6138
interface PackageInfo6138 extends JObject{
}

//net.minecraft.util.Util$8


//net.minecraft.util.TypedActionResult
class TypedActionResult extends JObject{
 getValue(): Object;
 getResult(): ActionResult;
}
class Static_TypedActionResult {
static fail(data: Object): TypedActionResult;
static pass(data: Object): TypedActionResult;
static consume(data: Object): TypedActionResult;
static success(data: Object): TypedActionResult;
static success(data: Object,swingHand: boolean): TypedActionResult;
}

//net.minecraft.loot.provider.score.ContextLootScoreProvider
class ContextLootScoreProvider extends JObject, LootScoreProvider{
 getName(context: LootContext): string;
 getType(): LootScoreProviderType;
 getRequiredParameters(): Set;
}
class Static_ContextLootScoreProvider {
static create(target: LootContext_EntityTarget): LootScoreProvider;
}

//net.minecraft.client.gui.tooltip.BundleTooltipComponent
class BundleTooltipComponent extends JObject, TooltipComponent{
 getWidth(textRenderer: TextRenderer): number;
 getHeight(): number;
 drawItems(textRenderer: TextRenderer,x: number,y: number,context: DrawContext): void;
}
class Static_BundleTooltipComponent {
static TEXTURE: Identifier;
static field_32381: number;
static field_32382: number;
static TEXTURE_SIZE: number;
static WIDTH_PER_COLUMN: number;
static HEIGHT_PER_ROW: number;
}

//net.minecraft.nbt.NbtType
interface NbtType extends JObject{
 read(input: DataInput,depth: number,tracker: NbtTagSizeTracker): NbtElement;
 accept(input: DataInput,visitor: NbtScanner): void;
 skip(input: DataInput): void;
 skip(input: DataInput,count: number): void;
 isImmutable(): boolean;
 getCommandFeedbackName(): string;
 getCrashReportName(): string;
 doAccept(input: DataInput,visitor: NbtScanner): NbtScanner_Result;
}
class Static_NbtType {
static createInvalid(type: number): NbtType;
}

//net.minecraft.client.recipebook.ClientRecipeBook$1


//net.minecraft.world.gen.feature.size.FeatureSizeType
class FeatureSizeType extends JObject{
 getCodec(): Codec;
}
class Static_FeatureSizeType {
static register(id: string,codec: Codec): FeatureSizeType;
static TWO_LAYERS_FEATURE_SIZE: FeatureSizeType;
static THREE_LAYERS_FEATURE_SIZE: FeatureSizeType;
}

//net.minecraft.command.argument.BlockStateArgumentType
class BlockStateArgumentType extends JObject, ArgumentType{
 parse(stringReader: StringReader): BlockStateArgument;
 parse(reader: StringReader): Object;
 getExamples(): Collection;
 listSuggestions(context: CommandContext,builder: SuggestionsBuilder): CompletableFuture;
}
class Static_BlockStateArgumentType {
static blockState(commandRegistryAccess: CommandRegistryAccess): BlockStateArgumentType;
static getBlockState(context: CommandContext,name: string): BlockStateArgument;
static EXAMPLES: Collection;
}

//net.minecraft.network.packet.s2c.play.StatisticsS2CPacket
class StatisticsS2CPacket extends JObject, Packet{
 apply(clientPlayPacketListener: ClientPlayPacketListener): void;
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
 getStatMap(): Map;
}
class Static_StatisticsS2CPacket {
static write(buf: PacketByteBuf,stat: Stat): void;
static getOrCreateStat(buf: PacketByteBuf,statType: StatType): Stat;
static method_34088(packetByteBuf: PacketByteBuf,bufx: PacketByteBuf): Stat;
}

//net.minecraft.structure.AncientCityGenerator
class AncientCityGenerator extends JObject{
}
class Static_AncientCityGenerator {
static bootstrap(poolRegisterable: Registerable): void;
static CITY_CENTER: RegistryKey;
}

//net.minecraft.util.Util$2


//net.minecraft.predicate.block.BlockStatePredicate
class BlockStatePredicate extends JObject, Predicate{
 test(state: Object): boolean;
 test(blockState: BlockState): boolean;
 with(property: Property,predicate: Predicate): BlockStatePredicate;
}
class Static_BlockStatePredicate {
static forBlock(block: Block): BlockStatePredicate;
static method_11759(state: BlockState): boolean;
static ANY: Predicate;
}

//net.minecraft.util.Util$3


//net.minecraft.unused.packageinfo.PackageInfo6147
interface PackageInfo6147 extends JObject{
}

//net.minecraft.world.gen.blockpredicate.OffsetPredicate
class OffsetPredicate extends JObject, BlockPredicate{
 test(world: Object,pos: Object): boolean;
 test(structureWorldAccess: StructureWorldAccess,blockPos: BlockPos): boolean;
}
class Static_OffsetPredicate {
static registerOffsetField(instance: RecordCodecBuilder_Instance): Products_P1;
static method_39014(predicate: OffsetPredicate): Vec3i;
}

//net.minecraft.unused.packageinfo.PackageInfo6146
interface PackageInfo6146 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6145
interface PackageInfo6145 extends JObject{
}

//net.minecraft.util.Util$6


//net.minecraft.util.Util$7


//net.minecraft.predicate.entity.TypeSpecificPredicate$Deserializers
class TypeSpecificPredicate_Deserializers extends JObject{
}
class Static_TypeSpecificPredicate_Deserializers {
static method_47835(entity: Entity): Optional;
static method_47830(entity: Entity): Optional;
static method_47829(entity: Entity): Optional;
static method_47831(entity: Entity): Optional;
static method_47832(entity: Entity): Optional;
static method_47834(entity: Entity): Optional;
static method_47837(entity: Entity): Optional;
static method_47833(entity: Entity): Optional;
static method_47836(entity: Entity): Optional;
static method_43102(entity: Entity): Optional;
static method_43101(json: JsonObject): TypeSpecificPredicate;
static method_47839(entity: Entity): Optional;
static method_43100(entity: Entity): Optional;
static method_47838(entity: Entity): Optional;
static ANY: TypeSpecificPredicate_Deserializer;
static LIGHTNING: TypeSpecificPredicate_Deserializer;
static FISHING_HOOK: TypeSpecificPredicate_Deserializer;
static PLAYER: TypeSpecificPredicate_Deserializer;
static SLIME: TypeSpecificPredicate_Deserializer;
static CAT: VariantPredicates;
static FROG: VariantPredicates;
static AXOLOTL: VariantPredicates;
static BOAT: VariantPredicates;
static FOX: VariantPredicates;
static MOOSHROOM: VariantPredicates;
static PAINTING: VariantPredicates;
static RABBIT: VariantPredicates;
static HORSE: VariantPredicates;
static LLAMA: VariantPredicates;
static VILLAGER: VariantPredicates;
static PARROT: VariantPredicates;
static TROPICAL_FISH: VariantPredicates;
static TYPES: BiMap;
}

//net.minecraft.command.argument.RegistryPredicateArgumentType$Serializer$Properties
class RegistryPredicateArgumentType_Serializer_Properties extends JObject, ArgumentSerializer_ArgumentTypeProperties{
 createType(commandRegistryAccess: CommandRegistryAccess): ArgumentType;
 createType(commandRegistryAccess: CommandRegistryAccess): RegistryPredicateArgumentType;
 getSerializer(): ArgumentSerializer;
}

//net.minecraft.util.Util$5


//net.minecraft.unused.packageinfo.PackageInfo6149
interface PackageInfo6149 extends JObject{
}

//net.minecraft.item.FoodComponent$Builder
class FoodComponent_Builder extends JObject{
 build(): FoodComponent;
 saturationModifier(saturationModifier: number): FoodComponent_Builder;
 hunger(hunger: number): FoodComponent_Builder;
 snack(): FoodComponent_Builder;
 meat(): FoodComponent_Builder;
 alwaysEdible(): FoodComponent_Builder;
 statusEffect(effect: StatusEffectInstance,chance: number): FoodComponent_Builder;
}

//net.minecraft.client.gui.hud.DebugHud$AllocationRateCalculator
class DebugHud_AllocationRateCalculator extends JObject{
}
class Static_DebugHud_AllocationRateCalculator {
static getCollectionCount(): long;
static INTERVAL: number;
static GARBAGE_COLLECTORS: List;
}

//net.minecraft.unused.packageinfo.PackageInfo6111
interface PackageInfo6111 extends JObject{
}

//net.minecraft.recipe.RecipeUnlocker
interface RecipeUnlocker extends JObject{
 setLastRecipe(recipe: Recipe): void;
 getLastRecipe(): Recipe;
 shouldCraftRecipe(world: World,player: ServerPlayerEntity,recipe: Recipe): boolean;
 unlockLastRecipe(player: PlayerEntity,ingredients: List): void;
}

//net.minecraft.world.gen.feature.LargeDripstoneFeatureConfig
class LargeDripstoneFeatureConfig extends JObject, FeatureConfig{
 floorToCeilingSearchRange: number;
 columnRadius: IntProvider;
 heightScale: FloatProvider;
 maxColumnRadiusToCaveHeightRatio: number;
 stalactiteBluntness: FloatProvider;
 stalagmiteBluntness: FloatProvider;
 windSpeed: FloatProvider;
 minRadiusForWind: number;
 minBluntnessForWind: number;
}
class Static_LargeDripstoneFeatureConfig {
static method_33052(instance: RecordCodecBuilder_Instance): App;
static method_33060(config: LargeDripstoneFeatureConfig): IntProvider;
static method_33057(config: LargeDripstoneFeatureConfig): FloatProvider;
static method_33055(config: LargeDripstoneFeatureConfig): FloatProvider;
static method_33053(config: LargeDripstoneFeatureConfig): Float;
static method_33058(config: LargeDripstoneFeatureConfig): Float;
static method_33059(config: LargeDripstoneFeatureConfig): FloatProvider;
static method_33056(config: LargeDripstoneFeatureConfig): FloatProvider;
static method_33061(config: LargeDripstoneFeatureConfig): Integer;
static method_33054(config: LargeDripstoneFeatureConfig): Integer;
static CODEC: Codec;
}

//net.minecraft.world.gen.feature.EndPlacedFeatures
class EndPlacedFeatures extends JObject{
}
class Static_EndPlacedFeatures {
static bootstrap(featureRegisterable: Registerable): void;
static END_SPIKE: RegistryKey;
static END_GATEWAY_RETURN: RegistryKey;
static CHORUS_PLANT: RegistryKey;
static END_ISLAND_DECORATED: RegistryKey;
}

//net.minecraft.network.packet.s2c.play.BossBarS2CPacket$1


//net.minecraft.recipe.Ingredient$Entry
interface Ingredient_Entry extends JObject{
 toJson(): JsonObject;
 getStacks(): Collection;
}

//net.minecraft.structure.ShipwreckGenerator
class ShipwreckGenerator extends JObject{
}
class Static_ShipwreckGenerator {
static addParts(structureTemplateManager: StructureTemplateManager,pos: BlockPos,rotation: BlockRotation,holder: StructurePiecesHolder,random: Random,beached: boolean): void;
static DEFAULT_POSITION: BlockPos;
static BEACHED_TEMPLATES: Identifier[];
static REGULAR_TEMPLATES: Identifier[];
static LOOT_TABLES: Map;
}

//net.minecraft.unused.packageinfo.PackageInfo6115
interface PackageInfo6115 extends JObject{
}

//net.minecraft.util.collection.Weight
class Weight extends JObject{
 equals(o: Object): boolean;
 toString(): string;
 hashCode(): number;
 getValue(): number;
}
class Static_Weight {
static of(weight: number): Weight;
static validate(weight: number): void;
static CODEC: Codec;
static DEFAULT: Weight;
static LOGGER: Logger;
}

//net.minecraft.unused.packageinfo.PackageInfo6114
interface PackageInfo6114 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6113
interface PackageInfo6113 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6112
interface PackageInfo6112 extends JObject{
}

//net.minecraft.client.util.telemetry.WorldSession
class WorldSession extends JObject{
 tick(): void;
 onUnload(): void;
 setTick(tick: long): void;
 setBrand(brand: string): void;
 setGameMode(gameMode: GameMode,hardcore: boolean): void;
 onAdvancementMade(world: World,advancement: Advancement): void;
 onLoad(): void;
}
class Static_WorldSession {
static method_51801(identifier: Identifier,l: long,properties: PropertyMap_Builder): void;
}

//net.minecraft.unused.packageinfo.PackageInfo6119
interface PackageInfo6119 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6118
interface PackageInfo6118 extends JObject{
}

//net.minecraft.network.packet.s2c.play.ChunkDeltaUpdateS2CPacket
class ChunkDeltaUpdateS2CPacket extends JObject, Packet{
 apply(clientPlayPacketListener: ClientPlayPacketListener): void;
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
 visitUpdates(visitor: BiConsumer): void;
}
class Static_ChunkDeltaUpdateS2CPacket {
static field_33341: number;
}

//net.minecraft.unused.packageinfo.PackageInfo6117
interface PackageInfo6117 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6116
interface PackageInfo6116 extends JObject{
}

//net.minecraft.loot.context.LootContextTypes
class LootContextTypes extends JObject{
}
class Static_LootContextTypes {
static get(id: Identifier): LootContextType;
static register(name: string,type: Consumer): LootContextType;
static getId(type: LootContextType): Identifier;
static method_22577(builder: LootContextType_Builder): void;
static method_22578(builder: LootContextType_Builder): void;
static method_49269(builder: LootContextType_Builder): void;
static method_764(builder: LootContextType_Builder): void;
static method_24800(builder: LootContextType_Builder): void;
static method_756(builder: LootContextType_Builder): void;
static method_760(builder: LootContextType_Builder): void;
static method_763(builder: LootContextType_Builder): void;
static method_51722(builder: LootContextType_Builder): void;
static method_27863(builder: LootContextType_Builder): void;
static method_15970(builder: LootContextType_Builder): void;
static method_755(builder: LootContextType_Builder): void;
static method_758(builder: LootContextType_Builder): void;
static method_49270(builder: LootContextType_Builder): void;
static MAP: BiMap;
static EMPTY: LootContextType;
static CHEST: LootContextType;
static COMMAND: LootContextType;
static SELECTOR: LootContextType;
static FISHING: LootContextType;
static ENTITY: LootContextType;
static ARCHAEOLOGY: LootContextType;
static GIFT: LootContextType;
static BARTER: LootContextType;
static ADVANCEMENT_REWARD: LootContextType;
static ADVANCEMENT_ENTITY: LootContextType;
static ADVANCEMENT_LOCATION: LootContextType;
static GENERIC: LootContextType;
static BLOCK: LootContextType;
}

//net.minecraft.entity.ai.brain.MemoryModuleType
class MemoryModuleType extends JObject{
 toString(): string;
 getCodec(): Optional;
}
class Static_MemoryModuleType {
static register(id: string,codec: Codec): MemoryModuleType;
static register(id: string): MemoryModuleType;
static DUMMY: MemoryModuleType;
static HOME: MemoryModuleType;
static JOB_SITE: MemoryModuleType;
static POTENTIAL_JOB_SITE: MemoryModuleType;
static MEETING_POINT: MemoryModuleType;
static SECONDARY_JOB_SITE: MemoryModuleType;
static MOBS: MemoryModuleType;
static VISIBLE_MOBS: MemoryModuleType;
static VISIBLE_VILLAGER_BABIES: MemoryModuleType;
static NEAREST_PLAYERS: MemoryModuleType;
static NEAREST_VISIBLE_PLAYER: MemoryModuleType;
static NEAREST_VISIBLE_TARGETABLE_PLAYER: MemoryModuleType;
static WALK_TARGET: MemoryModuleType;
static LOOK_TARGET: MemoryModuleType;
static ATTACK_TARGET: MemoryModuleType;
static ATTACK_COOLING_DOWN: MemoryModuleType;
static INTERACTION_TARGET: MemoryModuleType;
static BREED_TARGET: MemoryModuleType;
static RIDE_TARGET: MemoryModuleType;
static PATH: MemoryModuleType;
static INTERACTABLE_DOORS: MemoryModuleType;
static DOORS_TO_CLOSE: MemoryModuleType;
static NEAREST_BED: MemoryModuleType;
static HURT_BY: MemoryModuleType;
static HURT_BY_ENTITY: MemoryModuleType;
static AVOID_TARGET: MemoryModuleType;
static NEAREST_HOSTILE: MemoryModuleType;
static NEAREST_ATTACKABLE: MemoryModuleType;
static HIDING_PLACE: MemoryModuleType;
static HEARD_BELL_TIME: MemoryModuleType;
static CANT_REACH_WALK_TARGET_SINCE: MemoryModuleType;
static GOLEM_DETECTED_RECENTLY: MemoryModuleType;
static LAST_SLEPT: MemoryModuleType;
static LAST_WOKEN: MemoryModuleType;
static LAST_WORKED_AT_POI: MemoryModuleType;
static NEAREST_VISIBLE_ADULT: MemoryModuleType;
static NEAREST_VISIBLE_WANTED_ITEM: MemoryModuleType;
static NEAREST_VISIBLE_NEMESIS: MemoryModuleType;
static PLAY_DEAD_TICKS: MemoryModuleType;
static TEMPTING_PLAYER: MemoryModuleType;
static TEMPTATION_COOLDOWN_TICKS: MemoryModuleType;
static GAZE_COOLDOWN_TICKS: MemoryModuleType;
static IS_TEMPTED: MemoryModuleType;
static LONG_JUMP_COOLING_DOWN: MemoryModuleType;
static LONG_JUMP_MID_JUMP: MemoryModuleType;
static HAS_HUNTING_COOLDOWN: MemoryModuleType;
static RAM_COOLDOWN_TICKS: MemoryModuleType;
static RAM_TARGET: MemoryModuleType;
static IS_IN_WATER: MemoryModuleType;
static IS_PREGNANT: MemoryModuleType;
static IS_PANICKING: MemoryModuleType;
static UNREACHABLE_TONGUE_TARGETS: MemoryModuleType;
static ANGRY_AT: MemoryModuleType;
static UNIVERSAL_ANGER: MemoryModuleType;
static ADMIRING_ITEM: MemoryModuleType;
static TIME_TRYING_TO_REACH_ADMIRE_ITEM: MemoryModuleType;
static DISABLE_WALK_TO_ADMIRE_ITEM: MemoryModuleType;
static ADMIRING_DISABLED: MemoryModuleType;
static HUNTED_RECENTLY: MemoryModuleType;
static CELEBRATE_LOCATION: MemoryModuleType;
static DANCING: MemoryModuleType;
static NEAREST_VISIBLE_HUNTABLE_HOGLIN: MemoryModuleType;
static NEAREST_VISIBLE_BABY_HOGLIN: MemoryModuleType;
static NEAREST_TARGETABLE_PLAYER_NOT_WEARING_GOLD: MemoryModuleType;
static NEARBY_ADULT_PIGLINS: MemoryModuleType;
static NEAREST_VISIBLE_ADULT_PIGLINS: MemoryModuleType;
static NEAREST_VISIBLE_ADULT_HOGLINS: MemoryModuleType;
static NEAREST_VISIBLE_ADULT_PIGLIN: MemoryModuleType;
static NEAREST_VISIBLE_ZOMBIFIED: MemoryModuleType;
static VISIBLE_ADULT_PIGLIN_COUNT: MemoryModuleType;
static VISIBLE_ADULT_HOGLIN_COUNT: MemoryModuleType;
static NEAREST_PLAYER_HOLDING_WANTED_ITEM: MemoryModuleType;
static ATE_RECENTLY: MemoryModuleType;
static NEAREST_REPELLENT: MemoryModuleType;
static PACIFIED: MemoryModuleType;
static ROAR_TARGET: MemoryModuleType;
static DISTURBANCE_LOCATION: MemoryModuleType;
static RECENT_PROJECTILE: MemoryModuleType;
static IS_SNIFFING: MemoryModuleType;
static IS_EMERGING: MemoryModuleType;
static ROAR_SOUND_DELAY: MemoryModuleType;
static DIG_COOLDOWN: MemoryModuleType;
static ROAR_SOUND_COOLDOWN: MemoryModuleType;
static SNIFF_COOLDOWN: MemoryModuleType;
static TOUCH_COOLDOWN: MemoryModuleType;
static VIBRATION_COOLDOWN: MemoryModuleType;
static SONIC_BOOM_COOLDOWN: MemoryModuleType;
static SONIC_BOOM_SOUND_COOLDOWN: MemoryModuleType;
static SONIC_BOOM_SOUND_DELAY: MemoryModuleType;
static LIKED_PLAYER: MemoryModuleType;
static LIKED_NOTEBLOCK: MemoryModuleType;
static LIKED_NOTEBLOCK_COOLDOWN_TICKS: MemoryModuleType;
static ITEM_PICKUP_COOLDOWN_TICKS: MemoryModuleType;
static SNIFFER_EXPLORED_POSITIONS: MemoryModuleType;
static SNIFFER_SNIFFING_TARGET: MemoryModuleType;
static SNIFFER_DIGGING: MemoryModuleType;
static SNIFFER_HAPPY: MemoryModuleType;
}

//net.minecraft.network.packet.c2s.play.PlayPongC2SPacket
class PlayPongC2SPacket extends JObject, Packet{
 apply(serverPlayPacketListener: ServerPlayPacketListener): void;
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
 getParameter(): number;
}

//net.minecraft.entity.vehicle.VehicleInventory$1


//net.minecraft.resource.ResourcePackProvider
interface ResourcePackProvider extends JObject{
 register(profileAdder: Consumer): void;
}

//net.minecraft.client.world.ClientEntityManager
class ClientEntityManager extends JObject{
 getLookup(): EntityLookup;
 addEntity(entity: EntityLike): void;
 startTicking(pos: ChunkPos): void;
 stopTicking(pos: ChunkPos): void;
 getDebugString(): string;
 getEntityCount(): number;
}
class Static_ClientEntityManager {
static method_31876(e: EntityLike): boolean;
static method_31880(e: EntityLike): boolean;
static LOGGER: Logger;
}

//net.minecraft.command.BlockDataObject
class BlockDataObject extends JObject, DataCommandObject{
 setNbt(nbt: NbtCompound): void;
 getNbt(): NbtCompound;
 feedbackModify(): Text;
 feedbackGet(path: NbtPathArgumentType_NbtPath,scale: number,result: number): Text;
 feedbackQuery(element: NbtElement): Text;
}
class Static_BlockDataObject {
static method_13878(argumentName: string): DataCommand_ObjectType;
static INVALID_BLOCK_EXCEPTION: SimpleCommandExceptionType;
static TYPE_FACTORY: Function;
}

//net.minecraft.client.particle.SuspendParticle$EggCrackFactory
class SuspendParticle_EggCrackFactory extends JObject, ParticleFactory{
 createParticle(defaultParticleType: DefaultParticleType,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
 createParticle(particleEffect: ParticleEffect,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
}

//net.minecraft.advancement.Advancement$Builder
class Advancement_Builder extends JObject{
 parent(parentId: Identifier): Advancement_Builder;
 parent(parent: Advancement): Advancement_Builder;
 toString(): string;
 build(id: Identifier): Advancement;
 build(exporter: Consumer,id: string): Advancement;
 display(icon: ItemStack,title: Text,description: Text,background: Identifier,frame: AdvancementFrame,showToast: boolean,announceToChat: boolean,hidden: boolean): Advancement_Builder;
 display(display: AdvancementDisplay): Advancement_Builder;
 display(icon: ItemConvertible,title: Text,description: Text,background: Identifier,frame: AdvancementFrame,showToast: boolean,announceToChat: boolean,hidden: boolean): Advancement_Builder;
 findParent(parentProvider: Function): boolean;
 toPacket(buf: PacketByteBuf): void;
 toJson(): JsonObject;
 requirements(requirements: String[][]): Advancement_Builder;
 rewards(rewards: AdvancementRewards): Advancement_Builder;
 rewards(builder: AdvancementRewards_Builder): Advancement_Builder;
 criteriaMerger(merger: CriterionMerger): Advancement_Builder;
 criterion(name: string,conditions: CriterionConditions): Advancement_Builder;
 criterion(name: string,criterion: AdvancementCriterion): Advancement_Builder;
 getCriteria(): Map;
}
class Static_Advancement_Builder {
static create(): Advancement_Builder;
static createUntelemetered(): Advancement_Builder;
static fromJson(obj: JsonObject,predicateDeserializer: AdvancementEntityPredicateDeserializer): Advancement_Builder;
static fromPacket(buf: PacketByteBuf): Advancement_Builder;
static method_702(idx: Identifier): Advancement;
static method_43662(buf2: PacketByteBuf,display: AdvancementDisplay): void;
}

//net.minecraft.world.chunk.BiMapPalette
class BiMapPalette extends JObject, Palette{
 index(object: Object): number;
 get(id: number): Object;
 copy(): Palette;
 getSize(): number;
 getElements(): List;
 getPacketSize(): number;
 readPacket(buf: PacketByteBuf): void;
 hasAny(predicate: Predicate): boolean;
 writePacket(buf: PacketByteBuf): void;
}
class Static_BiMapPalette {
static create(bits: number,idList: IndexedIterable,listener: PaletteResizeListener,entries: List): Palette;
}

//net.minecraft.entity.ai.brain.task.RangedApproachTask
class RangedApproachTask extends JObject{
}
class Static_RangedApproachTask {
static create(speed: Function): Task;
static create(speed: number): Task;
static method_47099(fun: Function,context: TaskTriggerer_TaskContext): App;
static method_47096(taskContext: TaskTriggerer_TaskContext,memoryQueryResult: MemoryQueryResult,memoryQueryResult2: MemoryQueryResult,memoryQueryResult3: MemoryQueryResult,memoryQueryResult4: MemoryQueryResult,fun: Function,world: ServerWorld,entity: MobEntity,time: long): boolean;
static method_47095(f: number,entity: LivingEntity): Float;
static method_47097(taskContext: TaskTriggerer_TaskContext,fun: Function,walkTarget: MemoryQueryResult,lookTarget: MemoryQueryResult,attackTarget: MemoryQueryResult,visibleMobs: MemoryQueryResult): TaskRunnable;
static WEAPON_REACH_REDUCTION: number;
}

//net.minecraft.predicate.DamagePredicate$Builder
class DamagePredicate_Builder extends JObject{
 type(type: DamageSourcePredicate): DamagePredicate_Builder;
 type(builder: DamageSourcePredicate_Builder): DamagePredicate_Builder;
 build(): DamagePredicate;
 taken(taken: NumberRange_FloatRange): DamagePredicate_Builder;
 blocked(blocked: Boolean): DamagePredicate_Builder;
 dealt(dealt: NumberRange_FloatRange): DamagePredicate_Builder;
 sourceEntity(sourceEntity: EntityPredicate): DamagePredicate_Builder;
}
class Static_DamagePredicate_Builder {
static create(): DamagePredicate_Builder;
}

//net.minecraft.entity.ai.WardenAngerManager$1


//net.minecraft.unused.packageinfo.PackageInfo6126
interface PackageInfo6126 extends JObject{
}

//net.minecraft.data.server.loottable.vanilla.VanillaArchaeologyLootTableGenerator
class VanillaArchaeologyLootTableGenerator extends JObject, LootTableGenerator{
 accept(exporter: BiConsumer): void;
}

//net.minecraft.unused.packageinfo.PackageInfo6125
interface PackageInfo6125 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6129
interface PackageInfo6129 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6128
interface PackageInfo6128 extends JObject{
}

//net.minecraft.server.dedicated.command.WhitelistCommand
class WhitelistCommand extends JObject{
}
class Static_WhitelistCommand {
static register(dispatcher: CommandDispatcher): void;
static executeRemove(source: ServerCommandSource,targets: Collection): number;
static executeList(source: ServerCommandSource): number;
static executeAdd(source: ServerCommandSource,targets: Collection): number;
static method_13851(context: CommandContext): number;
static method_52147(): Text;
static method_13844(player: ServerPlayerEntity): string;
static method_52145(gameProfile: GameProfile): Text;
static method_13834(context: CommandContext): number;
static method_13846(context: CommandContext): number;
static method_13848(context: CommandContext,builder: SuggestionsBuilder): CompletableFuture;
static executeOn(source: ServerCommandSource): number;
static method_52149(): Text;
static executeOff(source: ServerCommandSource): number;
static method_52146(strings: String[]): Text;
static method_13847(source: ServerCommandSource): boolean;
static method_13835(context: CommandContext): number;
static executeReload(source: ServerCommandSource): number;
static method_52150(): Text;
static method_52148(gameProfile: GameProfile): Text;
static method_52144(): Text;
static method_13841(playerManager: PlayerManager,player: ServerPlayerEntity): boolean;
static method_13842(context: CommandContext): number;
static method_13843(context: CommandContext): number;
static method_13849(context: CommandContext,builder: SuggestionsBuilder): CompletableFuture;
static ALREADY_ON_EXCEPTION: SimpleCommandExceptionType;
static ALREADY_OFF_EXCEPTION: SimpleCommandExceptionType;
static ADD_FAILED_EXCEPTION: SimpleCommandExceptionType;
static REMOVE_FAILED_EXCEPTION: SimpleCommandExceptionType;
}

//net.minecraft.client.render.chunk.BlockBufferBuilderStorage
class BlockBufferBuilderStorage extends JObject{
 get(layer: RenderLayer): BufferBuilder;
 clear(): void;
 reset(): void;
}
class Static_BlockBufferBuilderStorage {
static method_22706(renderLayer: RenderLayer): BufferBuilder;
static method_22707(renderLayer: RenderLayer): RenderLayer;
}

//net.minecraft.client.util.VideoMode
class VideoMode extends JObject{
 equals(o: Object): boolean;
 toString(): string;
 hashCode(): number;
 getWidth(): number;
 getHeight(): number;
 asString(): string;
 getRefreshRate(): number;
 getGreenBits(): number;
 getBlueBits(): number;
 getRedBits(): number;
}
class Static_VideoMode {
static fromString(string: string): Optional;
static PATTERN: Pattern;
}

//net.minecraft.loot.condition.KilledByPlayerLootCondition
class KilledByPlayerLootCondition extends JObject, LootCondition{
 test(context: Object): boolean;
 test(lootContext: LootContext): boolean;
 getType(): LootConditionType;
 getRequiredParameters(): Set;
}
class Static_KilledByPlayerLootCondition {
static builder(): LootCondition_Builder;
static method_940(): LootCondition;
static INSTANCE: KilledByPlayerLootCondition;
}

//net.minecraft.world.biome.SpawnSettings
class SpawnSettings extends JObject{
 getCreatureSpawnProbability(): number;
 getSpawnEntries(spawnGroup: SpawnGroup): Pool;
 getSpawnDensity(entityType: EntityType): SpawnSettings_SpawnDensity;
}
class Static_SpawnSettings {
static method_30791(instance: RecordCodecBuilder_Instance): App;
static method_30796(spawnSettings: SpawnSettings): Float;
static method_30795(spawnSettings: SpawnSettings): Map;
static method_30794(spawnSettings: SpawnSettings): Map;
static LOGGER: Logger;
static field_30983: number;
static EMPTY_ENTRY_POOL: Pool;
static INSTANCE: SpawnSettings;
static CODEC: MapCodec;
}

//net.minecraft.client.option.GameOptions$Visitor
interface GameOptions_Visitor extends JObject{
 accept(key: string,option: SimpleOption): void;
 visitObject(key: string,current: Object,decoder: Function,encoder: Function): Object;
 visitInt(key: string,current: number): number;
 visitBoolean(key: string,current: boolean): boolean;
 visitString(key: string,current: string): string;
 visitFloat(key: string,current: number): number;
}

//net.minecraft.unused.packageinfo.PackageInfo7421
interface PackageInfo7421 extends JObject{
}

//net.minecraft.client.util.math.Rect2i
class Rect2i extends JObject{
 contains(x: number,y: number): boolean;
 getWidth(): number;
 getHeight(): number;
 setX(x: number): void;
 getX(): number;
 getY(): number;
 setY(y: number): void;
 intersection(rect: Rect2i): Rect2i;
 setWidth(width: number): void;
 setStartPos(x: number,y: number): void;
 setHeight(height: number): void;
}

//net.minecraft.world.gen.foliage.FoliagePlacer
class FoliagePlacer extends JObject{
 generate(world: TestableWorld,placer: FoliagePlacer_BlockPlacer,random: Random,config: TreeFeatureConfig,trunkHeight: number,treeNode: FoliagePlacer_TreeNode,foliageHeight: number,radius: number): void;
 getRandomRadius(random: Random,baseHeight: number): number;
 getRandomHeight(random: Random,trunkHeight: number,config: TreeFeatureConfig): number;
}
class Static_FoliagePlacer {
static fillFoliagePlacerFields(instance: RecordCodecBuilder_Instance): Products_P2;
static method_30410(placer: FoliagePlacer): IntProvider;
static method_30412(placer: FoliagePlacer): IntProvider;
static placeFoliageBlock(world: TestableWorld,placer: FoliagePlacer_BlockPlacer,random: Random,config: TreeFeatureConfig,chance: number,origin: BlockPos,pos: BlockPos_Mutable): boolean;
static placeFoliageBlock(world: TestableWorld,placer: FoliagePlacer_BlockPlacer,random: Random,config: TreeFeatureConfig,pos: BlockPos): boolean;
static method_42380(fluidState: FluidState): boolean;
static TYPE_CODEC: Codec;
}

//net.minecraft.world.ChunkSectionCache
class ChunkSectionCache extends JObject, AutoCloseable{
 close(): void;
 getBlockState(pos: BlockPos): BlockState;
 getSection(pos: BlockPos): ChunkSection;
}

//net.minecraft.unused.packageinfo.PackageInfo6100
interface PackageInfo6100 extends JObject{
}

//net.minecraft.entity.ai.brain.Brain$MemoryEntry
class Brain_MemoryEntry extends JObject{
 serialize(ops: DynamicOps,builder: RecordBuilder): void;
}
class Static_Brain_MemoryEntry {
static of(type: MemoryModuleType,data: Optional): Brain_MemoryEntry;
}

//net.minecraft.structure.rule.blockentity.RuleBlockEntityModifierType
interface RuleBlockEntityModifierType extends JObject{
 codec(): Codec;
}
class Static_RuleBlockEntityModifierType {
static register(id: string,codec: Codec): RuleBlockEntityModifierType;
static method_49898(codec: Codec): Codec;
static CLEAR: RuleBlockEntityModifierType;
static PASSTHROUGH: RuleBlockEntityModifierType;
static APPEND_STATIC: RuleBlockEntityModifierType;
static APPEND_LOOT: RuleBlockEntityModifierType;
}

//net.minecraft.entity.ai.NavigationConditions
class NavigationConditions extends JObject{
}
class Static_NavigationConditions {
static isHeightInvalid(pos: BlockPos,entity: PathAwareEntity): boolean;
static isInvalidPosition(navigation: EntityNavigation,pos: BlockPos): boolean;
static isWaterAt(entity: PathAwareEntity,pos: BlockPos): boolean;
static isSolidAt(entity: PathAwareEntity,pos: BlockPos): boolean;
static isPositionTargetInRange(entity: PathAwareEntity,extraDistance: number): boolean;
static isPositionTargetOutOfWalkRange(posTargetInRange: boolean,entity: PathAwareEntity,pos: BlockPos): boolean;
static hasPathfindingPenalty(entity: PathAwareEntity,pos: BlockPos): boolean;
static hasMobNavigation(entity: MobEntity): boolean;
}

//net.minecraft.unused.packageinfo.PackageInfo6109
interface PackageInfo6109 extends JObject{
}

//net.minecraft.entity.damage.DamageSources
class DamageSources extends JObject{
 generic(): DamageSource;
 create(key: RegistryKey,source: Entity,attacker: Entity): DamageSource;
 create(key: RegistryKey): DamageSource;
 create(key: RegistryKey,attacker: Entity): DamageSource;
 freeze(): DamageSource;
 thrown(source: Entity,attacker: Entity): DamageSource;
 magic(): DamageSource;
 mobAttack(attacker: LivingEntity): DamageSource;
 inFire(): DamageSource;
 lava(): DamageSource;
 lightningBolt(): DamageSource;
 onFire(): DamageSource;
 hotFloor(): DamageSource;
 inWall(): DamageSource;
 cramming(): DamageSource;
 drown(): DamageSource;
 starve(): DamageSource;
 explosion(explosion: Explosion): DamageSource;
 explosion(source: Entity,attacker: Entity): DamageSource;
 witherSkull(source: WitherSkullEntity,attacker: Entity): DamageSource;
 fallingBlock(attacker: Entity): DamageSource;
 thorns(attacker: Entity): DamageSource;
 dragonBreath(): DamageSource;
 trident(source: Entity,attacker: Entity): DamageSource;
 fireball(source: AbstractFireballEntity,attacker: Entity): DamageSource;
 wither(): DamageSource;
 cactus(): DamageSource;
 flyIntoWall(): DamageSource;
 stalagmite(): DamageSource;
 fall(): DamageSource;
 sweetBerryBush(): DamageSource;
 fallingStalactite(attacker: Entity): DamageSource;
 sting(attacker: LivingEntity): DamageSource;
 fireworks(source: FireworkRocketEntity,attacker: Entity): DamageSource;
 outOfWorld(): DamageSource;
 arrow(source: PersistentProjectileEntity,attacker: Entity): DamageSource;
 indirectMagic(source: Entity,attacker: Entity): DamageSource;
 badRespawnPoint(position: Vec3d): DamageSource;
 outsideBorder(): DamageSource;
 genericKill(): DamageSource;
 sonicBoom(attacker: Entity): DamageSource;
 fallingAnvil(attacker: Entity): DamageSource;
 playerAttack(attacker: PlayerEntity): DamageSource;
 dryOut(): DamageSource;
 mobAttackNoAggro(attacker: LivingEntity): DamageSource;
 mobProjectile(source: Entity,attacker: LivingEntity): DamageSource;
 registry: Registry;
}

//net.minecraft.unused.packageinfo.PackageInfo6104
interface PackageInfo6104 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6103
interface PackageInfo6103 extends JObject{
}

//net.minecraft.client.texture.atlas.Sprite
class Sprite extends JObject{
 read(): NativeImage;
 close(): void;
}

//net.minecraft.unused.packageinfo.PackageInfo6102
interface PackageInfo6102 extends JObject{
}

//net.minecraft.client.particle.EnchantGlyphParticle$NautilusFactory
class EnchantGlyphParticle_NautilusFactory extends JObject, ParticleFactory{
 createParticle(defaultParticleType: DefaultParticleType,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
 createParticle(particleEffect: ParticleEffect,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
}

//net.minecraft.datafixer.mapping.FlatteningBiomeMapping
class FlatteningBiomeMapping extends JObject{
}
class Static_FlatteningBiomeMapping {
static RENAMED_BIOMES: Map;
}

//net.minecraft.network.packet.c2s.play.PickFromInventoryC2SPacket
class PickFromInventoryC2SPacket extends JObject, Packet{
 apply(serverPlayPacketListener: ServerPlayPacketListener): void;
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
 getSlot(): number;
}

//net.minecraft.unused.packageinfo.PackageInfo6106
interface PackageInfo6106 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6105
interface PackageInfo6105 extends JObject{
}

//net.minecraft.network.listener.ServerPlayPacketListener
interface ServerPlayPacketListener extends JObject, ServerPacketListener{
 onUpdateDifficulty(packet: UpdateDifficultyC2SPacket): void;
 onUpdateCommandBlockMinecart(packet: UpdateCommandBlockMinecartC2SPacket): void;
 onSelectMerchantTrade(packet: SelectMerchantTradeC2SPacket): void;
 onRecipeCategoryOptions(packet: RecipeCategoryOptionsC2SPacket): void;
 onPickFromInventory(packet: PickFromInventoryC2SPacket): void;
 onUpdateStructureBlock(packet: UpdateStructureBlockC2SPacket): void;
 onRequestCommandCompletions(packet: RequestCommandCompletionsC2SPacket): void;
 onUpdateCommandBlock(packet: UpdateCommandBlockC2SPacket): void;
 onSpectatorTeleport(packet: SpectatorTeleportC2SPacket): void;
 onUpdatePlayerAbilities(packet: UpdatePlayerAbilitiesC2SPacket): void;
 onUpdateDifficultyLock(packet: UpdateDifficultyLockC2SPacket): void;
 onResourcePackStatus(packet: ResourcePackStatusC2SPacket): void;
 onUpdateSelectedSlot(packet: UpdateSelectedSlotC2SPacket): void;
 onPlayerInteractBlock(packet: PlayerInteractBlockC2SPacket): void;
 onMessageAcknowledgment(packet: MessageAcknowledgmentC2SPacket): void;
 onCreativeInventoryAction(packet: CreativeInventoryActionC2SPacket): void;
 onCloseHandledScreen(packet: CloseHandledScreenC2SPacket): void;
 onPlayerInteractItem(packet: PlayerInteractItemC2SPacket): void;
 onPlayerInteractEntity(packet: PlayerInteractEntityC2SPacket): void;
 onUpdateSign(packet: UpdateSignC2SPacket): void;
 onClientSettings(packet: ClientSettingsC2SPacket): void;
 onKeepAlive(packet: KeepAliveC2SPacket): void;
 onJigsawGenerating(packet: JigsawGeneratingC2SPacket): void;
 onPlayerInput(packet: PlayerInputC2SPacket): void;
 onVehicleMove(packet: VehicleMoveC2SPacket): void;
 onTeleportConfirm(packet: TeleportConfirmC2SPacket): void;
 onRecipeBookData(packet: RecipeBookDataC2SPacket): void;
 onAdvancementTab(packet: AdvancementTabC2SPacket): void;
 onUpdateBeacon(packet: UpdateBeaconC2SPacket): void;
 onRenameItem(packet: RenameItemC2SPacket): void;
 onUpdateJigsaw(packet: UpdateJigsawC2SPacket): void;
 onBookUpdate(packet: BookUpdateC2SPacket): void;
 onPlayerMove(packet: PlayerMoveC2SPacket): void;
 onQueryEntityNbt(packet: QueryEntityNbtC2SPacket): void;
 onQueryBlockNbt(packet: QueryBlockNbtC2SPacket): void;
 onPlayerAction(packet: PlayerActionC2SPacket): void;
 onBoatPaddleState(packet: BoatPaddleStateC2SPacket): void;
 onPong(packet: PlayPongC2SPacket): void;
 onCommandExecution(packet: CommandExecutionC2SPacket): void;
 onChatMessage(packet: ChatMessageC2SPacket): void;
 onHandSwing(packet: HandSwingC2SPacket): void;
 onClientCommand(packet: ClientCommandC2SPacket): void;
 onClickSlot(packet: ClickSlotC2SPacket): void;
 onClientStatus(packet: ClientStatusC2SPacket): void;
 onCraftRequest(packet: CraftRequestC2SPacket): void;
 onPlayerSession(packet: PlayerSessionC2SPacket): void;
 onCustomPayload(packet: CustomPayloadC2SPacket): void;
 onButtonClick(packet: ButtonClickC2SPacket): void;
}

//net.minecraft.entity.decoration.DisplayEntity$ItemDisplayEntity$1


//net.minecraft.client.gui.screen.multiplayer.SocialInteractionsScreen$2


//net.minecraft.stat.StatHandler
class StatHandler extends JObject{
 setStat(player: PlayerEntity,stat: Stat,value: number): void;
 getStat(type: StatType,stat: Object): number;
 getStat(stat: Stat): number;
 increaseStat(player: PlayerEntity,stat: Stat,value: number): void;
}

//net.minecraft.world.gen.feature.FeatureConfig
interface FeatureConfig extends JObject{
 getDecoratedFeatures(): Stream;
}
class Static_FeatureConfig {
static DEFAULT: DefaultFeatureConfig;
}

//net.minecraft.datafixer.fix.ChunkPalettedStorageFix$ChunkNibbleArray
class ChunkPalettedStorageFix_ChunkNibbleArray extends JObject{
 get(x: number,y: number,z: number): number;
}
class Static_ChunkPalettedStorageFix_ChunkNibbleArray {
static CONTENTS_LENGTH: number;
static field_29880: number;
}

//net.minecraft.loot.provider.number.ScoreLootNumberProvider$Serializer
class ScoreLootNumberProvider_Serializer extends JObject, JsonSerializer{
 fromJson(json: JsonObject,context: JsonDeserializationContext): Object;
 fromJson(jsonObject: JsonObject,jsonDeserializationContext: JsonDeserializationContext): ScoreLootNumberProvider;
 toJson(json: JsonObject,object: Object,context: JsonSerializationContext): void;
 toJson(jsonObject: JsonObject,scoreLootNumberProvider: ScoreLootNumberProvider,jsonSerializationContext: JsonSerializationContext): void;
}

//net.minecraft.text.HoverEvent$ItemStackContent
class HoverEvent_ItemStackContent extends JObject{
 equals(o: Object): boolean;
 hashCode(): number;
 asStack(): ItemStack;
}
class Static_HoverEvent_ItemStackContent {
static parse(text: Text): HoverEvent_ItemStackContent;
static parse(json: JsonElement): HoverEvent_ItemStackContent;
}

//net.minecraft.registry.DynamicRegistryManager$1


//net.minecraft.server.command.DataCommand$ModifyArgumentCreator
interface DataCommand_ModifyArgumentCreator extends JObject{
 create(modifier: DataCommand_ModifyOperation): ArgumentBuilder;
}

//net.minecraft.world.ChunkRegion
class ChunkRegion extends JObject, StructureWorldAccess{
 getSeed(): long;
 getHeight(): number;
 getDimension(): DimensionType;
 getGeneratorStoredBiome(biomeX: number,biomeY: number,biomeZ: number): RegistryEntry;
 getOtherEntities(except: Entity,box: Box,predicate: Predicate): List;
 getFluidTickScheduler(): QueryableTickScheduler;
 getBlockTickScheduler(): QueryableTickScheduler;
 getBiomeAccess(): BiomeAccess;
 addParticle(parameters: ParticleEffect,x: number,y: number,z: number,velocityX: number,velocityY: number,velocityZ: number): void;
 emitGameEvent(event: GameEvent,emitterPos: Vec3d,emitter: GameEvent_Emitter): void;
 getEntitiesByType(filter: TypeFilter,box: Box,predicate: Predicate): List;
 getCenterPos(): ChunkPos;
 isChunkLoaded(chunkX: number,chunkZ: number): boolean;
 toServerWorld(): ServerWorld;
 getLocalDifficulty(pos: BlockPos): LocalDifficulty;
 getPlayers(): List;
 setCurrentlyGeneratingStructureName(structureName: Supplier): void;
 getBlockEntity(pos: BlockPos): BlockEntity;
 getFluidState(pos: BlockPos): FluidState;
 getBlockState(pos: BlockPos): BlockState;
 setBlockState(pos: BlockPos,state: BlockState,flags: number,maxUpdateDepth: number): boolean;
 getChunk(chunkX: number,chunkZ: number): Chunk;
 getChunk(chunkX: number,chunkZ: number,leastStatus: ChunkStatus,create: boolean): Chunk;
 getLightingProvider(): LightingProvider;
 breakBlock(pos: BlockPos,drop: boolean,breakingEntity: Entity,maxUpdateDepth: number): boolean;
 getLevelProperties(): WorldProperties;
 getEnabledFeatures(): FeatureSet;
 getBottomY(): number;
 getChunkManager(): ChunkManager;
 getWorldBorder(): WorldBorder;
 getRegistryManager(): DynamicRegistryManager;
 getTopY(heightmap: Heightmap_Type,x: number,z: number): number;
 isValidForSetBlock(pos: BlockPos): boolean;
 testBlockState(pos: BlockPos,state: Predicate): boolean;
 playSound(except: PlayerEntity,pos: BlockPos,sound: SoundEvent,category: SoundCategory,volume: number,pitch: number): void;
 spawnEntity(entity: Entity): boolean;
 syncWorldEvent(player: PlayerEntity,eventId: number,pos: BlockPos,data: number): void;
 getRandom(): Random;
 getBrightness(direction: Direction,shaded: boolean): number;
 getServer(): MinecraftServer;
 isClient(): boolean;
 removeBlock(pos: BlockPos,move: boolean): boolean;
 needsBlending(chunkPos: ChunkPos,checkRadius: number): boolean;
 getTickOrder(): long;
 getAmbientDarkness(): number;
 getClosestPlayer(x: number,y: number,z: number,maxDistance: number,targetPredicate: Predicate): PlayerEntity;
 getSeaLevel(): number;
 testFluidState(pos: BlockPos,state: Predicate): boolean;
}
class Static_ChunkRegion {
static LOGGER: Logger;
static WORLDGEN_REGION_RANDOM_ID: Identifier;
}

//net.minecraft.util.collection.Int2ObjectBiMap
class Int2ObjectBiMap extends JObject, IndexedIterable{
 add(value: Object): number;
 get(index: number): Object;
 put(value: Object,id: number): void;
 clear(): void;
 size(): number;
 iterator(): Iterator;
 contains(value: Object): boolean;
 containsKey(index: number): boolean;
 copy(): Int2ObjectBiMap;
 getRawId(value: Object): number;
}
class Static_Int2ObjectBiMap {
static create(expectedSize: number): Int2ObjectBiMap;
static ABSENT: number;
static EMPTY: Object;
static LOAD_FACTOR: number;
}

//net.minecraft.loot.operator.BoundedIntUnaryOperator
class BoundedIntUnaryOperator extends JObject{
 test(context: LootContext,value: number): boolean;
 apply(context: LootContext,value: number): number;
 getRequiredParameters(): Set;
}
class Static_BoundedIntUnaryOperator {
static create(min: number,max: number): BoundedIntUnaryOperator;
static create(value: number): BoundedIntUnaryOperator;
static method_32395(lootNumberProvider: LootNumberProvider,lootNumberProvider2: LootNumberProvider,context: LootContext,value: number): number;
static method_32397(lootNumberProvider: LootNumberProvider,context: LootContext,value: number): boolean;
static method_32394(lootNumberProvider: LootNumberProvider,context: LootContext,value: number): number;
static method_279(context: LootContext,value: number): number;
static method_32390(lootNumberProvider: LootNumberProvider,context: LootContext,value: number): boolean;
static method_32396(context: LootContext,value: number): boolean;
static method_32398(lootNumberProvider: LootNumberProvider,context: LootContext,value: number): number;
static createMin(min: number): BoundedIntUnaryOperator;
static createMax(max: number): BoundedIntUnaryOperator;
static method_32391(lootNumberProvider: LootNumberProvider,lootNumberProvider2: LootNumberProvider,context: LootContext,value: number): boolean;
}

//net.minecraft.resource.metadata.PackResourceMetadata
class PackResourceMetadata extends JObject{
 getDescription(): Text;
 getPackFormat(): number;
}
class Static_PackResourceMetadata {
static SERIALIZER: ResourceMetadataSerializer;
}

//net.minecraft.server.command.DatapackCommand$PackAdder
interface DatapackCommand_PackAdder extends JObject{
 apply(profiles: List,profile: ResourcePackProfile): void;
}

//net.minecraft.network.packet.s2c.login.LoginSuccessS2CPacket
class LoginSuccessS2CPacket extends JObject, Packet{
 apply(clientLoginPacketListener: ClientLoginPacketListener): void;
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
 getProfile(): GameProfile;
}

//net.minecraft.client.render.debug.StructureDebugRenderer
class StructureDebugRenderer extends JObject, DebugRenderer_Renderer{
 clear(): void;
 render(matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,cameraX: number,cameraY: number,cameraZ: number): void;
 addStructure(boundingBox: BlockBox,piecesBoundingBoxes: List,list: List,dimension: DimensionType): void;
}
class Static_StructureDebugRenderer {
static RANGE: number;
}

//net.minecraft.world.gen.feature.GeodeLayerThicknessConfig
class GeodeLayerThicknessConfig extends JObject{
 filling: number;
 innerLayer: number;
 middleLayer: number;
 outerLayer: number;
}
class Static_GeodeLayerThicknessConfig {
static method_31899(config: GeodeLayerThicknessConfig): Double;
static method_31900(config: GeodeLayerThicknessConfig): Double;
static method_31897(config: GeodeLayerThicknessConfig): Double;
static method_31898(instance: RecordCodecBuilder_Instance): App;
static method_31901(config: GeodeLayerThicknessConfig): Double;
static RANGE: Codec;
static CODEC: Codec;
}

//net.minecraft.command.argument.ScoreHolderArgumentType$SelectorScoreHolder
class ScoreHolderArgumentType_SelectorScoreHolder extends JObject, ScoreHolderArgumentType_ScoreHolder{
 getNames(serverCommandSource: ServerCommandSource,supplier: Supplier): Collection;
}

//net.minecraft.server.world.LevelPrioritizedQueue
class LevelPrioritizedQueue extends JObject{
 toString(): string;
 poll(): Stream;
 hasQueuedElement(): boolean;
}
class Static_LevelPrioritizedQueue {
static method_17277(l: long): List;
static method_17271(i: number): Long2ObjectLinkedOpenHashMap;
static method_17273(l: long): List;
static method_17610(optional: Optional): boolean;
static LEVEL_COUNT: number;
}

//net.minecraft.client.texture.atlas.SingleAtlasSource
class SingleAtlasSource extends JObject, AtlasSource{
 load(resourceManager: ResourceManager,regions: AtlasSource_SpriteRegions): void;
 getType(): AtlasSourceType;
}
class Static_SingleAtlasSource {
static method_47688(singleAtlasSource: SingleAtlasSource): Optional;
static method_47687(instance: RecordCodecBuilder_Instance): App;
static method_47689(singleAtlasSource: SingleAtlasSource): Identifier;
static LOGGER: Logger;
static CODEC: Codec;
}

//net.minecraft.client.gui.screen.Overlay
class Overlay extends JObject, Drawable{
 pausesGame(): boolean;
}

//net.minecraft.client.render.item.HeldItemRenderer$1


//net.minecraft.Bootstrap$1


//net.minecraft.world.tick.WorldTickScheduler$ChunkVisitor
interface WorldTickScheduler_ChunkVisitor extends JObject{
 accept(chunkPos: long,chunkTickScheduler: ChunkTickScheduler): void;
}

//net.minecraft.block.entity.BrewingStandBlockEntity$1


//net.minecraft.client.render.WorldRenderer$RenderableChunks
class WorldRenderer_RenderableChunks extends JObject{
 chunkInfoList: WorldRenderer_ChunkInfoList;
 chunks: LinkedHashSet;
}

//net.minecraft.world.biome.source.BiomeSources
class BiomeSources extends JObject{
}
class Static_BiomeSources {
static registerAndGetDefault(registry: Registry): Codec;
}

//net.minecraft.client.gui.screen.recipebook.RecipeBookWidget
class RecipeBookWidget extends JObject, RecipeGridAligner, Drawable, Element, Selectable, RecipeDisplayListener{
 update(): void;
 isOpen(): boolean;
 initialize(parentWidth: number,parentHeight: number,client: MinecraftClient,narrow: boolean,craftingScreenHandler: AbstractRecipeScreenHandler): void;
 getType(): Selectable_SelectionType;
 reset(): void;
 refresh(): void;
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
 showGhostRecipe(recipe: Recipe,slots: List): void;
 onRecipesDisplayed(recipes: List): void;
 appendNarrations(builder: NarrationMessageBuilder): void;
 isClickOutsideBounds(mouseX: number,mouseY: number,x: number,y: number,backgroundWidth: number,backgroundHeight: number,button: number): boolean;
 setFocused(focused: boolean): void;
 isMouseOver(mouseX: number,mouseY: number): boolean;
 isFocused(): boolean;
 charTyped(chr: char,modifiers: number): boolean;
 toggleOpen(): void;
 slotClicked(slot: Slot): void;
 findLeftEdge(width: number,backgroundWidth: number): number;
 drawGhostSlots(context: DrawContext,x: number,y: number,notInventory: boolean,delta: number): void;
 drawTooltip(context: DrawContext,x: number,y: number,mouseX: number,mouseY: number): void;
 keyPressed(keyCode: number,scanCode: number,modifiers: number): boolean;
 keyReleased(keyCode: number,scanCode: number,modifiers: number): boolean;
 mouseClicked(mouseX: number,mouseY: number,button: number): boolean;
 acceptAlignedInput(inputs: Iterator,slot: number,amount: number,gridX: number,gridY: number): void;
}
class Static_RecipeBookWidget {
static method_2580(resultCollection: RecipeResultCollection): boolean;
static method_2584(resultCollection: RecipeResultCollection): boolean;
static method_2594(resultCollection: ObjectSet,recipeResultCollection: RecipeResultCollection): boolean;
static method_2583(resultCollection: RecipeResultCollection): boolean;
static method_37308(list: List,button: ClickableWidget): void;
static TEXTURE: Identifier;
static SEARCH_HINT_TEXT: Text;
static field_32408: number;
static field_32409: number;
static field_32410: number;
static TOGGLE_CRAFTABLE_RECIPES_TEXT: Text;
static TOGGLE_ALL_RECIPES_TEXT: Text;
}

//net.minecraft.data.server.loottable.vanilla.VanillaLootTableProviders
class VanillaLootTableProviders extends JObject{
}
class Static_VanillaLootTableProviders {
static createVanillaProvider(output: DataOutput): LootTableProvider;
}

//net.minecraft.util.TranslatableOption
interface TranslatableOption extends JObject{
 getId(): number;
 getText(): Text;
 getTranslationKey(): string;
}

//net.minecraft.client.network.BlockListChecker$1


//net.minecraft.resource.DefaultResourcePackBuilder
class DefaultResourcePackBuilder extends JObject{
 build(): DefaultResourcePack;
 withDefaultPaths(): DefaultResourcePackBuilder;
 withPaths(type: ResourceType,clazz: Class): DefaultResourcePackBuilder;
 runCallback(): DefaultResourcePackBuilder;
 withNamespaces(namespaces: String[]): DefaultResourcePackBuilder;
 withMetadataMap(metadataMap: ResourceMetadataMap): DefaultResourcePackBuilder;
 withRoot(root: Path): DefaultResourcePackBuilder;
 withPath(type: ResourceType,path: Path): DefaultResourcePackBuilder;
}
class Static_DefaultResourcePackBuilder {
static reverse(paths: Collection): List;
static toPath(uri: URI): Path;
static method_45199(type2: ResourceType): Set;
static method_45202(builder: DefaultResourcePackBuilder): void;
static method_45213(): ImmutableMap;
static LOGGER: Logger;
static callback: Consumer;
static RESOURCE_TYPE_TO_PATH: Map;
}

//net.minecraft.util.CubicSampler$RgbFetcher
interface CubicSampler_RgbFetcher extends JObject{
 fetch(x: number,y: number,z: number): Vec3d;
}

//net.minecraft.util.annotation.Debug
interface Debug extends JObject, Annotation{
}

//net.minecraft.world.tick.ChunkTickScheduler
class ChunkTickScheduler extends JObject, SerializableTickScheduler, BasicTickScheduler{
 isQueued(pos: BlockPos,type: Object): boolean;
 disable(time: long): void;
 scheduleTick(orderedTick: OrderedTick): void;
 getTickCount(): number;
 peekNextTick(): OrderedTick;
 pollNextTick(): OrderedTick;
 setTickConsumer(tickConsumer: BiConsumer): void;
 removeTicksIf(predicate: Predicate): void;
 getQueueAsStream(): Stream;
 toNbt(time: long,typeToNameFunction: Function): NbtElement;
 toNbt(l: long,fun: Function): NbtList;
}
class Static_ChunkTickScheduler {
static create(tickQueue: NbtList,nameToTypeFunction: Function,pos: ChunkPos): ChunkTickScheduler;
}

//net.minecraft.util.crash.CrashReportSection
class CrashReportSection extends JObject{
 getStackTrace(): StackTraceElement[];
 add(name: string,callable: CrashCallable): CrashReportSection;
 add(name: string,detail: Object): CrashReportSection;
 add(name: string,throwable: Throwable): void;
 shouldGenerateStackTrace(prev: StackTraceElement,next: StackTraceElement): boolean;
 trimStackTraceEnd(callCount: number): void;
 initStackTrace(ignoredCallCount: number): number;
 addStackTrace(crashReportBuilder: StringBuilder): void;
}
class Static_CrashReportSection {
static method_576(heightLimitView: HeightLimitView,blockPos: BlockPos): string;
static createPositionString(world: HeightLimitView,x: number,y: number,z: number): string;
static createPositionString(world: HeightLimitView,x: number,y: number,z: number): string;
static createPositionString(world: HeightLimitView,pos: BlockPos): string;
static addBlockInfo(element: CrashReportSection,world: HeightLimitView,pos: BlockPos,state: BlockState): void;
}

//net.minecraft.loot.provider.number.LootNumberProvider
interface LootNumberProvider extends JObject, LootContextAware{
 getType(): LootNumberProviderType;
 nextInt(context: LootContext): number;
 nextFloat(context: LootContext): number;
}

//net.minecraft.client.render.model.MultipartBakedModel$Builder
class MultipartBakedModel_Builder extends JObject{
 build(): BakedModel;
 addComponent(predicate: Predicate,model: BakedModel): void;
}

//net.minecraft.structure.OceanMonumentGenerator$PieceFactory
interface OceanMonumentGenerator_PieceFactory extends JObject{
 generate(direction: Direction,setting: OceanMonumentGenerator_PieceSetting,random: Random): OceanMonumentGenerator_Piece;
 canGenerate(setting: OceanMonumentGenerator_PieceSetting): boolean;
}

//net.minecraft.data.server.loottable.vanilla.VanillaFishingLootTableGenerator
class VanillaFishingLootTableGenerator extends JObject, LootTableGenerator{
 accept(exporter: BiConsumer): void;
}
class Static_VanillaFishingLootTableGenerator {
static createFishTableBuilder(): LootTable_Builder;
static NEEDS_JUNGLE_BIOME: LootCondition_Builder;
static NEEDS_SPARSE_JUNGLE_BIOME: LootCondition_Builder;
static NEEDS_BAMBOO_JUNGLE_BIOME: LootCondition_Builder;
}

//net.minecraft.util.math.GlobalPos
class GlobalPos extends JObject{
 equals(o: Object): boolean;
 toString(): string;
 hashCode(): number;
 getDimension(): RegistryKey;
 getPos(): BlockPos;
}
class Static_GlobalPos {
static create(dimension: RegistryKey,pos: BlockPos): GlobalPos;
static method_29096(instance: RecordCodecBuilder_Instance): App;
static CODEC: Codec;
}

//net.minecraft.sound.BiomeAdditionsSound
class BiomeAdditionsSound extends JObject{
 getSound(): RegistryEntry;
 getChance(): number;
}
class Static_BiomeAdditionsSound {
static method_28390(sound: BiomeAdditionsSound): Double;
static method_28391(instance: RecordCodecBuilder_Instance): App;
static method_28392(sound: BiomeAdditionsSound): RegistryEntry;
static CODEC: Codec;
}

//net.minecraft.world.biome.BiomeEffects$Builder
class BiomeEffects_Builder extends JObject{
 build(): BiomeEffects;
 waterColor(waterColor: number): BiomeEffects_Builder;
 foliageColor(foliageColor: number): BiomeEffects_Builder;
 moodSound(moodSound: BiomeMoodSound): BiomeEffects_Builder;
 grassColor(grassColor: number): BiomeEffects_Builder;
 skyColor(skyColor: number): BiomeEffects_Builder;
 waterFogColor(waterFogColor: number): BiomeEffects_Builder;
 music(music: MusicSound): BiomeEffects_Builder;
 fogColor(fogColor: number): BiomeEffects_Builder;
 grassColorModifier(grassColorModifier: BiomeEffects_GrassColorModifier): BiomeEffects_Builder;
 particleConfig(particleConfig: BiomeParticleConfig): BiomeEffects_Builder;
 loopSound(loopSound: RegistryEntry): BiomeEffects_Builder;
 additionsSound(additionsSound: BiomeAdditionsSound): BiomeEffects_Builder;
}
class Static_BiomeEffects_Builder {
static method_24394(): IllegalStateException;
static method_24396(): IllegalStateException;
static method_30819(): IllegalStateException;
static method_24398(): IllegalStateException;
}

//net.minecraft.inventory.Inventory
interface Inventory extends JObject, Clearable{
 isEmpty(): boolean;
 size(): number;
 count(item: Item): number;
 getStack(slot: number): ItemStack;
 onClose(player: PlayerEntity): void;
 isValid(slot: number,stack: ItemStack): boolean;
 setStack(slot: number,stack: ItemStack): void;
 removeStack(slot: number): ItemStack;
 removeStack(slot: number,amount: number): ItemStack;
 getMaxCountPerStack(): number;
 markDirty(): void;
 onOpen(player: PlayerEntity): void;
 containsAny(predicate: Predicate): boolean;
 containsAny(items: Set): boolean;
 canPlayerUse(player: PlayerEntity): boolean;
 canTransferTo(hopperInventory: Inventory,slot: number,stack: ItemStack): boolean;
}
class Static_Inventory {
static canPlayerUse(blockEntity: BlockEntity,player: PlayerEntity,range: number): boolean;
static canPlayerUse(blockEntity: BlockEntity,player: PlayerEntity): boolean;
static method_43255(set: Set,stack: ItemStack): boolean;
static MAX_COUNT_PER_STACK: number;
static field_42619: number;
}

//net.minecraft.world.chunk.Palette$Factory
interface Palette_Factory extends JObject{
 create(bits: number,idList: IndexedIterable,listener: PaletteResizeListener,list: List): Palette;
}

//net.minecraft.world.storage.EntityChunkDataAccess
class EntityChunkDataAccess extends JObject, ChunkDataAccess{
 close(): void;
 awaitAll(sync: boolean): void;
 writeChunkData(dataList: ChunkDataList): void;
 readChunkData(pos: ChunkPos): CompletableFuture;
}
class Static_EntityChunkDataAccess {
static emptyDataList(pos: ChunkPos): ChunkDataList;
static putChunkPos(chunkNbt: NbtCompound,pos: ChunkPos): void;
static method_31730(chunkPos: ChunkPos,ex: Throwable): Void;
static method_31734(nbtList: NbtList,entity: Entity): void;
static getChunkPos(chunkNbt: NbtCompound): ChunkPos;
static LOGGER: Logger;
static ENTITIES_KEY: string;
static POSITION_KEY: string;
}

//net.minecraft.client.tutorial.NoneTutorialStepHandler
class NoneTutorialStepHandler extends JObject, TutorialStepHandler{
}

//net.minecraft.server.command.RaidCommand
class RaidCommand extends JObject{
}
class Static_RaidCommand {
static register(dispatcher: CommandDispatcher): void;
static method_36204(context: CommandContext): number;
static method_36202(context: CommandContext): number;
static method_36197(context: CommandContext): number;
static getRaid(player: ServerPlayerEntity): Raid;
static method_36205(source: ServerCommandSource): boolean;
static method_36200(context: CommandContext): number;
static method_36206(context: CommandContext): number;
static method_36207(context: CommandContext): number;
static method_36193(context: CommandContext): number;
static executeGlow(source: ServerCommandSource): number;
static executeSound(source: ServerCommandSource,type: Text): number;
static executeSpawnLeader(source: ServerCommandSource): number;
static method_52031(): Text;
static method_52029(): Text;
static executeSetOmen(source: ServerCommandSource,level: number): number;
static method_52027(i: number,j: number): Text;
static executeCheck(source: ServerCommandSource): number;
static method_52026(): Text;
static method_52030(stringBuilder: StringBuilder): Text;
static method_52028(stringBuilder: StringBuilder): Text;
static executeStop(source: ServerCommandSource): number;
static executeStart(source: ServerCommandSource,level: number): number;
}

//net.minecraft.loot.LootPool$Builder
class LootPool_Builder extends JObject, LootFunctionConsumingBuilder, LootConditionConsumingBuilder, FabricLootPoolBuilder{
 apply(fun: LootFunction_Builder): LootFunctionConsumingBuilder;
 apply(builder: LootFunction_Builder): LootPool_Builder;
 build(): LootPool;
 with(entry: LootPoolEntry_Builder): LootPool_Builder;
 rolls(rolls: LootNumberProvider): LootPool_Builder;
 conditionally(condition: LootCondition_Builder): LootConditionConsumingBuilder;
 conditionally(builder: LootCondition_Builder): LootPool_Builder;
 bonusRolls(bonusRolls: LootNumberProvider): LootPool_Builder;
 getThisFunctionConsumingBuilder(): LootFunctionConsumingBuilder;
 getThisFunctionConsumingBuilder(): LootPool_Builder;
 getThisConditionConsumingBuilder(): LootConditionConsumingBuilder;
}

//net.minecraft.client.sound.AmbientSoundPlayer
class AmbientSoundPlayer extends JObject, ClientPlayerTickable{
 tick(): void;
}
class Static_AmbientSoundPlayer {
static MAX_TICKS_FOR_BASE_SOUND_LOOP: number;
static MAX_TICKS_FOR_RARE_SOUND_LOOP: number;
static MAX_TICKS_FOR_ULTRA_RARE_SOUND_LOOP: number;
static DEFAULT_TICKS_UNTIL_PLAY: number;
}

//net.minecraft.block.Stainable
interface Stainable extends JObject{
 getColor(): DyeColor;
}

//net.minecraft.entity.ai.brain.task.WalkToNearestVisibleWantedItemTask
class WalkToNearestVisibleWantedItemTask extends JObject{
}
class Static_WalkToNearestVisibleWantedItemTask {
static create(startCondition: Predicate,speed: number,requiresWalkTarget: boolean,radius: number): Task;
static create(speed: number,requiresWalkTarget: boolean,radius: number): Task;
static method_46944(entity: LivingEntity): boolean;
static method_46948(bl: boolean,predicate: Predicate,i: number,f: number,context: TaskTriggerer_TaskContext): App;
static method_46946(taskContext: TaskTriggerer_TaskContext,predicate: Predicate,i: number,f: number,lookTarget: MemoryQueryResult,walkTarget: MemoryQueryResult,nearestVisibleWantedItem: MemoryQueryResult,itemPickupCooldownTicks: MemoryQueryResult): TaskRunnable;
static method_46945(taskContext: TaskTriggerer_TaskContext,memoryQueryResult: MemoryQueryResult,memoryQueryResult2: MemoryQueryResult,predicate: Predicate,i: number,f: number,memoryQueryResult3: MemoryQueryResult,memoryQueryResult4: MemoryQueryResult,world: ServerWorld,entity: LivingEntity,time: long): boolean;
}

//net.minecraft.client.sound.OggAudioStream$ChannelList
class OggAudioStream_ChannelList extends JObject{
 getBuffer(): ByteBuffer;
 addChannel(data: number): void;
}

//net.minecraft.util.NameGenerator
class NameGenerator extends JObject{
}
class Static_NameGenerator {
static name(uuid: UUID): string;
static name(entity: Entity): string;
static randomFromUuid(uuid: UUID): Random;
static getRandom(random: Random,options: String[]): string;
static PREFIX: String[];
static SUFFIX: String[];
}

//net.minecraft.util.profiler.DummyRecorder
class DummyRecorder extends JObject, Recorder{
 stop(): void;
 isActive(): boolean;
 forceStop(): void;
 getProfiler(): Profiler;
 endTick(): void;
 startTick(): void;
}
class Static_DummyRecorder {
static INSTANCE: Recorder;
}

//net.minecraft.world.gen.feature.RandomFeatureEntry
class RandomFeatureEntry extends JObject{
 generate(world: StructureWorldAccess,chunkGenerator: ChunkGenerator,random: Random,pos: BlockPos): boolean;
 feature: RegistryEntry;
 chance: number;
}
class Static_RandomFeatureEntry {
static method_28670(config: RandomFeatureEntry): RegistryEntry;
static method_28668(config: RandomFeatureEntry): Float;
static method_28669(instance: RecordCodecBuilder_Instance): App;
static CODEC: Codec;
}

//net.minecraft.entity.ai.WardenAngerManager
class WardenAngerManager extends JObject{
 tick(world: ServerWorld,suspectPredicate: Predicate): void;
 increaseAngerAt(entity: Entity,amount: number): number;
 getPrimeSuspect(): Optional;
 getAngerFor(entity: Entity): number;
 removeSuspect(entity: Entity): void;
}
class Static_WardenAngerManager {
static createCodec(suspectPredicate: Predicate): Codec;
static method_43693(predicate: Predicate,instance: RecordCodecBuilder_Instance): App;
static method_42186(suspect: Entity): LivingEntity;
static method_42177(i: number,suspect: Entity,anger: Integer): Integer;
static method_42188(suspect: Entity): boolean;
static method_43694(predicate: Predicate,suspectUuidsToAngerLevel: List): WardenAngerManager;
static method_43106(suspect: Object2IntMap_Entry): Pair;
static method_43107(instance: RecordCodecBuilder_Instance): App;
static field_38733: number;
static maxAnger: number;
static angerDecreasePerTick: number;
static SUSPECT_CODEC: Codec;
}

//net.minecraft.server.command.SeedCommand
class SeedCommand extends JObject{
}
class Static_SeedCommand {
static register(dispatcher: CommandDispatcher,dedicated: boolean): void;
static method_13617(context: CommandContext): number;
static method_13618(bl: boolean,source: ServerCommandSource): boolean;
static method_52075(text: Text): Text;
}

//net.minecraft.client.render.WorldRenderer$ChunkInfo
class WorldRenderer_ChunkInfo extends JObject{
 equals(o: Object): boolean;
 hashCode(): number;
 addDirection(direction: Direction): void;
 hasAnyDirection(): boolean;
 canCull(from: Direction): boolean;
 updateCullingState(parentCullingState: byte,from: Direction): void;
 isOriginInSection(sectionX: number,sectionY: number,sectionZ: number): boolean;
 hasDirection(ordinal: number): boolean;
}

//net.minecraft.client.gui.CubeMapRenderer
class CubeMapRenderer extends JObject{
 loadTexturesAsync(textureManager: TextureManager,executor: Executor): CompletableFuture;
 draw(client: MinecraftClient,x: number,y: number,alpha: number): void;
}
class Static_CubeMapRenderer {
static FACES_COUNT: number;
}

//net.minecraft.network.packet.c2s.play.RecipeCategoryOptionsC2SPacket
class RecipeCategoryOptionsC2SPacket extends JObject, Packet{
 apply(serverPlayPacketListener: ServerPlayPacketListener): void;
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
 getCategory(): RecipeBookCategory;
 isFilteringCraftable(): boolean;
 isGuiOpen(): boolean;
}

//net.minecraft.client.font.TextHandler$1


//net.minecraft.entity.ai.NoWaterTargeting
class NoWaterTargeting extends JObject{
}
class Static_NoWaterTargeting {
static find(entity: PathAwareEntity,horizontalRange: number,verticalRange: number,startHeight: number,direction: Vec3d,angleRange: number): Vec3d;
static method_31509(pathAwareEntity: PathAwareEntity,i: number,j: number,k: number,vec3d: Vec3d,d: number,bl: boolean): BlockPos;
}

//net.minecraft.server.command.RideCommand
class RideCommand extends JObject{
}
class Static_RideCommand {
static register(dispatcher: CommandDispatcher): void;
static method_52038(entity: Entity,entity2: Entity): Text;
static method_48084(rider: Object,vehicle: Object): Message;
static method_48085(context: CommandContext): number;
static executeDismount(source: ServerCommandSource,rider: Entity): number;
static method_52039(entity: Entity,entity2: Entity): Text;
static method_48083(entity: Object): Message;
static method_48077(entity: Entity,passenger: Entity): boolean;
static method_48079(context: CommandContext): number;
static method_48080(source: ServerCommandSource): boolean;
static executeMount(source: ServerCommandSource,rider: Entity,vehicle: Entity): number;
static method_48086(rider: Object,vehicle: Object): Message;
static NOT_RIDING_EXCEPTION: DynamicCommandExceptionType;
static ALREADY_RIDING_EXCEPTION: Dynamic2CommandExceptionType;
static GENERIC_FAILURE_EXCEPTION: Dynamic2CommandExceptionType;
static CANT_RIDE_PLAYERS_EXCEPTION: SimpleCommandExceptionType;
static RIDE_LOOP_EXCEPTION: SimpleCommandExceptionType;
static WRONG_DIMENSION_EXCEPTION: SimpleCommandExceptionType;
}

//net.minecraft.unused.packageinfo.PackageInfo6195
interface PackageInfo6195 extends JObject{
}

//net.minecraft.network.packet.c2s.play.CloseHandledScreenC2SPacket
class CloseHandledScreenC2SPacket extends JObject, Packet{
 apply(listener: PacketListener): void;
 apply(serverPlayPacketListener: ServerPlayPacketListener): void;
 write(buf: PacketByteBuf): void;
 getSyncId(): number;
}

//net.minecraft.entity.ai.brain.task.UpdateAttackTargetTask
class UpdateAttackTargetTask extends JObject{
}
class Static_UpdateAttackTargetTask {
static create(startCondition: Predicate,targetGetter: Function): Task;
static create(targetGetter: Function): Task;
static method_47118(entity: MobEntity): boolean;
static method_47123(predicate: Predicate,fun: Function,memoryQueryResult: MemoryQueryResult,memoryQueryResult2: MemoryQueryResult,world: ServerWorld,entity: MobEntity,time: long): boolean;
static method_47122(predicate: Predicate,fun: Function,attackTarget: MemoryQueryResult,cantReachWalkTargetSince: MemoryQueryResult): TaskRunnable;
static method_47121(predicate: Predicate,fun: Function,context: TaskTriggerer_TaskContext): App;
}

//net.minecraft.unused.packageinfo.PackageInfo6194
interface PackageInfo6194 extends JObject{
}

//net.minecraft.client.font.GlyphContainer
class GlyphContainer extends JObject{
 remove(codePoint: number): Object;
 get(codePoint: number): Object;
 put(codePoint: number,glyph: Object): Object;
 clear(): void;
 computeIfAbsent(codePoint: number,ifAbsent: IntFunction): Object;
 getProvidedGlyphs(): IntSet;
 forEachGlyph(glyphConsumer: GlyphContainer_GlyphConsumer): void;
}
class Static_GlyphContainer {
static method_51602(intOpenHashSet: IntOpenHashSet,codePoint: number,glyph: Object): void;
static ROW_SHIFT: number;
static ENTRIES_PER_ROW: number;
static LAST_ENTRY_NUM_IN_ROW: number;
static LAST_ROW_NUM: number;
static NUM_ROWS: number;
}

//net.minecraft.client.gui.tab.Tab
interface Tab extends JObject{
 tick(): void;
 getTitle(): Text;
 forEachChild(consumer: Consumer): void;
 refreshGrid(tabArea: ScreenRect): void;
}

//net.minecraft.world.biome.BiomeEffects
class BiomeEffects extends JObject{
 getSkyColor(): number;
 getFoliageColor(): Optional;
 getGrassColor(): Optional;
 getWaterColor(): number;
 getLoopSound(): Optional;
 getMoodSound(): Optional;
 getAdditionsSound(): Optional;
 getWaterFogColor(): number;
 getParticleConfig(): Optional;
 getMusic(): Optional;
 getFogColor(): number;
 getGrassColorModifier(): BiomeEffects_GrassColorModifier;
}
class Static_BiomeEffects {
static method_28446(effects: BiomeEffects): Optional;
static method_28451(effects: BiomeEffects): Integer;
static method_28444(effects: BiomeEffects): Optional;
static method_30815(effects: BiomeEffects): Optional;
static method_30817(effects: BiomeEffects): Integer;
static method_30816(effects: BiomeEffects): Optional;
static method_28445(instance: RecordCodecBuilder_Instance): App;
static method_30813(effects: BiomeEffects): BiomeEffects_GrassColorModifier;
static method_28449(effects: BiomeEffects): Optional;
static method_28447(effects: BiomeEffects): Optional;
static method_28452(effects: BiomeEffects): Integer;
static method_28450(effects: BiomeEffects): Integer;
static method_28448(effects: BiomeEffects): Optional;
static CODEC: Codec;
}

//net.minecraft.unused.packageinfo.PackageInfo6199
interface PackageInfo6199 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6198
interface PackageInfo6198 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6197
interface PackageInfo6197 extends JObject{
}

//net.minecraft.world.entity.EntityTrackingSection
class EntityTrackingSection extends JObject{
 add(entity: EntityLike): void;
 remove(entity: EntityLike): boolean;
 isEmpty(): boolean;
 size(): number;
 stream(): Stream;
 forEach(type: TypeFilter,box: Box,consumer: LazyIterationConsumer): LazyIterationConsumer_NextIteration;
 forEach(box: Box,consumer: LazyIterationConsumer): LazyIterationConsumer_NextIteration;
 getStatus(): EntityTrackingStatus;
 swapStatus(status: EntityTrackingStatus): EntityTrackingStatus;
}
class Static_EntityTrackingSection {
static LOGGER: Logger;
}

//net.minecraft.unused.packageinfo.PackageInfo6196
interface PackageInfo6196 extends JObject{
}

//net.minecraft.command.argument.RegistryKeyArgumentType$Serializer$Properties
class RegistryKeyArgumentType_Serializer_Properties extends JObject, ArgumentSerializer_ArgumentTypeProperties{
 createType(commandRegistryAccess: CommandRegistryAccess): ArgumentType;
 createType(commandRegistryAccess: CommandRegistryAccess): RegistryKeyArgumentType;
 getSerializer(): ArgumentSerializer;
}

//net.minecraft.particle.ParticleEffect
interface ParticleEffect extends JObject{
 write(buf: PacketByteBuf): void;
 getType(): ParticleType;
 asString(): string;
}

//net.minecraft.unused.packageinfo.PackageInfo6191
interface PackageInfo6191 extends JObject{
}

//net.minecraft.command.argument.TimeArgumentType$Serializer$Properties
class TimeArgumentType_Serializer_Properties extends JObject, ArgumentSerializer_ArgumentTypeProperties{
 createType(commandRegistryAccess: CommandRegistryAccess): ArgumentType;
 createType(commandRegistryAccess: CommandRegistryAccess): TimeArgumentType;
 getSerializer(): ArgumentSerializer;
}

//net.minecraft.unused.packageinfo.PackageInfo6190
interface PackageInfo6190 extends JObject{
}

//net.minecraft.data.server.loottable.BlockLootTableGenerator
class BlockLootTableGenerator extends JObject, LootTableGenerator, FabricBlockLootTableGenerator{
 accept(exporter: BiConsumer): void;
 generate(): void;
 shulkerBoxDrops(drop: Block): LootTable_Builder;
 pottedPlantDrops(drop: ItemConvertible): LootTable_Builder;
 copperOreDrops(drop: Block): LootTable_Builder;
 slabDrops(drop: Block): LootTable_Builder;
 dropsWithProperty(drop: Block,property: Property,value: Comparable): LootTable_Builder;
 lapisOreDrops(drop: Block): LootTable_Builder;
 mushroomBlockDrops(dropWithSilkTouch: Block,drop: ItemConvertible): LootTable_Builder;
 oakLeavesDrops(leaves: Block,drop: Block,chance: number[]): LootTable_Builder;
 redstoneOreDrops(drop: Block): LootTable_Builder;
 oreDrops(dropWithSilkTouch: Block,drop: Item): LootTable_Builder;
 bannerDrops(drop: Block): LootTable_Builder;
 cropStemDrops(stem: Block,drop: Item): LootTable_Builder;
 leavesDrops(leaves: Block,drop: Block,chance: number[]): LootTable_Builder;
 grassDrops(dropWithShears: Block): LootTable_Builder;
 cropDrops(crop: Block,product: Item,seeds: Item,condition: LootCondition_Builder): LootTable_Builder;
 addVinePlantDrop(block: Block,drop: Block): void;
 doorDrops(block: Block): LootTable_Builder;
 addDrop(block: Block,drop: ItemConvertible): void;
 addDrop(block: Block,lootTableFunction: Function): void;
 addDrop(block: Block,lootTable: LootTable_Builder): void;
 addDrop(block: Block): void;
 candleDrops(candle: Block): LootTable_Builder;
 tallGrassDrops(tallGrass: Block,grass: Block): LootTable_Builder;
 flowerbedDrops(flowerbed: Block): LootTable_Builder;
 drops(dropWithSilkTouch: Block,drop: ItemConvertible): LootTable_Builder;
 drops(drop: ItemConvertible): LootTable_Builder;
 drops(drop: ItemConvertible,count: LootNumberProvider): LootTable_Builder;
 drops(dropWithSilkTouch: Block,drop: ItemConvertible,count: LootNumberProvider): LootTable_Builder;
 multifaceGrowthDrops(drop: Block,condition: LootCondition_Builder): LootTable_Builder;
 addSurvivesExplosionCondition(drop: ItemConvertible,builder: LootConditionConsumingBuilder): LootConditionConsumingBuilder;
 nameableContainerDrops(drop: Block): LootTable_Builder;
 applyExplosionDecay(drop: ItemConvertible,builder: LootFunctionConsumingBuilder): LootFunctionConsumingBuilder;
 attachedCropStemDrops(stem: Block,drop: Item): LootTable_Builder;
 mangroveLeavesDrops(leaves: Block): LootTable_Builder;
 addDropWithSilkTouch(block: Block): void;
 addDropWithSilkTouch(block: Block,drop: Block): void;
 addPottedPlantDrops(block: Block): void;
}
class Static_BlockLootTableGenerator {
static dropsNothing(): LootTable_Builder;
static dropsWithSilkTouch(drop: ItemConvertible): LootTable_Builder;
static dropsWithSilkTouch(drop: Block,child: LootPoolEntry_Builder): LootTable_Builder;
static dropsWithShears(drop: Block,child: LootPoolEntry_Builder): LootTable_Builder;
static dropsWithShears(drop: ItemConvertible): LootTable_Builder;
static method_46002(block: Block,integer: Integer): LootFunction_Builder;
static method_45992(block: Block,direction: Direction): LootFunction_Builder;
static glowBerryDrops(drop: Block): LootTable_Builder;
static beehiveDrops(drop: Block): LootTable_Builder;
static seagrassDrops(seagrass: Block): LootTable_Builder;
static beeNestDrops(drop: Block): LootTable_Builder;
static method_45993(block: Block,candles: Integer): LootFunction_Builder;
static candleCakeDrops(candleCake: Block): LootTable_Builder;
static method_49357(block: Block,flowerAmount: Integer): LootFunction_Builder;
static drops(drop: Block,conditionBuilder: LootCondition_Builder,child: LootPoolEntry_Builder): LootTable_Builder;
static dropsWithSilkTouchOrShears(drop: Block,child: LootPoolEntry_Builder): LootTable_Builder;
static WITH_SILK_TOUCH: LootCondition_Builder;
static WITHOUT_SILK_TOUCH: LootCondition_Builder;
static WITH_SHEARS: LootCondition_Builder;
static WITH_SILK_TOUCH_OR_SHEARS: LootCondition_Builder;
static WITHOUT_SILK_TOUCH_NOR_SHEARS: LootCondition_Builder;
static SAPLING_DROP_CHANCE: number[];
static LEAVES_STICK_DROP_CHANCE: number[];
}

//net.minecraft.util.profiler.ProfileLocationInfo
interface ProfileLocationInfo extends JObject{
 getCounts(): Object2LongMap;
 getTotalTime(): long;
 getVisitCount(): long;
 getMaxTime(): long;
}

//net.minecraft.world.storage.VersionedChunkStorage
class VersionedChunkStorage extends JObject, AutoCloseable{
 close(): void;
 updateChunkNbt(worldKey: RegistryKey,persistentStateManagerFactory: Supplier,nbt: NbtCompound,generatorCodecKey: Optional): NbtCompound;
 getWorker(): NbtScannable;
 setNbt(chunkPos: ChunkPos,nbt: NbtCompound): void;
 getNbt(chunkPos: ChunkPos): CompletableFuture;
 completeAll(): void;
 needsBlending(chunkPos: ChunkPos,checkRadius: number): boolean;
}
class Static_VersionedChunkStorage {
static saveContextToNbt(nbt: NbtCompound,worldKey: RegistryKey,generatorCodecKey: Optional): void;
static getDataVersion(nbt: NbtCompound): number;
static method_39798(nbtCompound: NbtCompound,key: RegistryKey): void;
static FEATURE_UPDATING_VERSION: number;
}

//net.minecraft.client.render.entity.model.EntityModels
class EntityModels extends JObject{
}
class Static_EntityModels {
static method_32074(builder: ImmutableMap_Builder,texturedModelData: TexturedModelData,signType: WoodType): void;
static method_32075(immutableMap: ImmutableMap,layer: EntityModelLayer): boolean;
static method_45716(builder: ImmutableMap_Builder,texturedModelData: TexturedModelData,signType: WoodType): void;
static getModels(): Map;
static FISH_PATTERN_DILATION: Dilation;
static ARMOR_DILATION: Dilation;
static HAT_DILATION: Dilation;
}

//net.minecraft.client.texture.atlas.UnstitchAtlasSource$SpriteRegion
class UnstitchAtlasSource_SpriteRegion extends JObject, AtlasSource_SpriteRegion{
 get(): Object;
 get(): SpriteContents;
 close(): void;
}

//net.minecraft.client.particle.DragonBreathParticle$Factory
class DragonBreathParticle_Factory extends JObject, ParticleFactory{
 createParticle(defaultParticleType: DefaultParticleType,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
 createParticle(particleEffect: ParticleEffect,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
}

//net.minecraft.client.sound.SoundInstance
interface SoundInstance extends JObject, FabricSoundInstance{
 getId(): Identifier;
 isRelative(): boolean;
 getCategory(): SoundCategory;
 getVolume(): number;
 getSound(): Sound;
 getSoundSet(soundManager: SoundManager): WeightedSoundSet;
 shouldAlwaysPlay(): boolean;
 getAttenuationType(): SoundInstance_AttenuationType;
 canPlay(): boolean;
 getRepeatDelay(): number;
 getX(): number;
 getY(): number;
 isRepeatable(): boolean;
 getZ(): number;
 getPitch(): number;
}
class Static_SoundInstance {
static createRandom(): Random;
}

//net.minecraft.client.util.DefaultSkinHelper
class DefaultSkinHelper extends JObject{
}
class Static_DefaultSkinHelper {
static getModel(uuid: UUID): string;
static getTexture(uuid: UUID): Identifier;
static getTexture(): Identifier;
static getSkin(uuid: UUID): DefaultSkinHelper_Skin;
static SKINS: DefaultSkinHelper_Skin;
}

//net.minecraft.loot.LootTable$Builder
class LootTable_Builder extends JObject, LootFunctionConsumingBuilder, FabricLootTableBuilder{
 type(context: LootContextType): LootTable_Builder;
 apply(fun: LootFunction_Builder): LootFunctionConsumingBuilder;
 apply(builder: LootFunction_Builder): LootTable_Builder;
 build(): LootTable;
 pool(poolBuilder: LootPool_Builder): LootTable_Builder;
 randomSequenceId(randomSequenceId: Identifier): LootTable_Builder;
 getThisFunctionConsumingBuilder(): LootFunctionConsumingBuilder;
 getThisFunctionConsumingBuilder(): LootTable_Builder;
}

//net.minecraft.world.gen.chunk.FlatChunkGeneratorLayer
class FlatChunkGeneratorLayer extends JObject{
 toString(): string;
 getBlockState(): BlockState;
 getThickness(): number;
}
class Static_FlatChunkGeneratorLayer {
static method_28910(layer: FlatChunkGeneratorLayer): Block;
static method_28909(instance: RecordCodecBuilder_Instance): App;
static CODEC: Codec;
}

//net.minecraft.world.gen.treedecorator.TreeDecorator
class TreeDecorator extends JObject{
 generate(generator: TreeDecorator_Generator): void;
}
class Static_TreeDecorator {
static TYPE_CODEC: Codec;
}

//net.minecraft.item.trim.ArmorTrimPatterns
class ArmorTrimPatterns extends JObject{
}
class Static_ArmorTrimPatterns {
static get(registryManager: DynamicRegistryManager,stack: ItemStack): Optional;
static of(id: string): RegistryKey;
static register(registry: Registerable,template: Item,key: RegistryKey): void;
static bootstrap(registry: Registerable): void;
static method_48447(itemStack: ItemStack,pattern: RegistryEntry_Reference): boolean;
static SENTRY: RegistryKey;
static DUNE: RegistryKey;
static COAST: RegistryKey;
static WILD: RegistryKey;
static WARD: RegistryKey;
static EYE: RegistryKey;
static VEX: RegistryKey;
static TIDE: RegistryKey;
static SNOUT: RegistryKey;
static RIB: RegistryKey;
static SPIRE: RegistryKey;
static WAYFINDER: RegistryKey;
static SHAPER: RegistryKey;
static SILENCE: RegistryKey;
static RAISER: RegistryKey;
static HOST: RegistryKey;
}

//net.minecraft.loot.provider.nbt.ContextLootNbtProvider$Target
interface ContextLootNbtProvider_Target extends JObject{
 getName(): string;
 getRequiredParameters(): Set;
 getNbt(context: LootContext): NbtElement;
}

//net.minecraft.structure.StrongholdGenerator$PieceData
class StrongholdGenerator_PieceData extends JObject{
 canGenerate(chainLength: number): boolean;
 canGenerate(): boolean;
 pieceType: Class;
 weight: number;
 generatedCount: number;
 limit: number;
}

//net.minecraft.client.render.VertexConsumer
interface VertexConsumer extends JObject{
 next(): void;
 color(red: number,green: number,blue: number,alpha: number): VertexConsumer;
 color(argb: number): VertexConsumer;
 color(red: number,green: number,blue: number,alpha: number): VertexConsumer;
 normal(matrix: Matrix3f,x: number,y: number,z: number): VertexConsumer;
 normal(x: number,y: number,z: number): VertexConsumer;
 quad(matrixEntry: MatrixStack_Entry,quad: BakedQuad,brightnesses: number[],red: number,green: number,blue: number,lights: number[],overlay: number,useQuadColorData: boolean): void;
 quad(matrixEntry: MatrixStack_Entry,quad: BakedQuad,red: number,green: number,blue: number,light: number,overlay: number): void;
 light(uv: number): VertexConsumer;
 light(u: number,v: number): VertexConsumer;
 overlay(uv: number): VertexConsumer;
 overlay(u: number,v: number): VertexConsumer;
 vertex(matrix: Matrix4f,x: number,y: number,z: number): VertexConsumer;
 vertex(x: number,y: number,z: number,red: number,green: number,blue: number,alpha: number,u: number,v: number,overlay: number,light: number,normalX: number,normalY: number,normalZ: number): void;
 vertex(x: number,y: number,z: number): VertexConsumer;
 texture(u: number,v: number): VertexConsumer;
 unfixColor(): void;
 fixedColor(red: number,green: number,blue: number,alpha: number): void;
}

//net.minecraft.world.event.listener.GameEventDispatcher$DispatchCallback
interface GameEventDispatcher_DispatchCallback extends JObject{
 visit(listener: GameEventListener,listenerPos: Vec3d): void;
}

//net.minecraft.client.particle.TotemParticle$Factory
class TotemParticle_Factory extends JObject, ParticleFactory{
 createParticle(defaultParticleType: DefaultParticleType,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
 createParticle(particleEffect: ParticleEffect,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
}

//net.minecraft.command.argument.IdentifierArgumentType
class IdentifierArgumentType extends JObject, ArgumentType{
 parse(reader: StringReader): Object;
 parse(stringReader: StringReader): Identifier;
 getExamples(): Collection;
}
class Static_IdentifierArgumentType {
static getIdentifier(context: CommandContext,name: string): Identifier;
static identifier(): IdentifierArgumentType;
static getPredicateArgument(context: CommandContext,argumentName: string): LootCondition;
static method_9445(id: Object): Message;
static method_32687(id: Object): Message;
static method_9444(id: Object): Message;
static method_17788(identifier: Identifier): CommandSyntaxException;
static method_9440(id: Object): Message;
static getRecipeArgument(context: CommandContext,argumentName: string): Recipe;
static getAdvancementArgument(context: CommandContext,argumentName: string): Advancement;
static getItemModifierArgument(context: CommandContext,argumentName: string): LootFunction;
static EXAMPLES: Collection;
static UNKNOWN_ADVANCEMENT_EXCEPTION: DynamicCommandExceptionType;
static UNKNOWN_RECIPE_EXCEPTION: DynamicCommandExceptionType;
static UNKNOWN_PREDICATE_EXCEPTION: DynamicCommandExceptionType;
static UNKNOWN_ITEM_MODIFIER_EXCEPTION: DynamicCommandExceptionType;
}

//net.minecraft.server.world.ChunkTicket
class ChunkTicket extends JObject, Comparable{
 equals(o: Object): boolean;
 toString(): string;
 hashCode(): number;
 compareTo(that: Object): number;
 compareTo(chunkTicket: ChunkTicket): number;
 getType(): ChunkTicketType;
 getLevel(): number;
}

//net.minecraft.resource.fs.ResourceFileSystem$Builder
class ResourceFileSystem_Builder extends JObject{
 build(name: string): FileSystem;
 withFile(directories: List,path: Path): ResourceFileSystem_Builder;
 withFile(directories: List,name: string,path: Path): ResourceFileSystem_Builder;
}
class Static_ResourceFileSystem_Builder {
static method_45250(directory: string): ResourceFileSystem_Directory;
}

//net.minecraft.client.particle.GlowParticle$ScrapeFactory
class GlowParticle_ScrapeFactory extends JObject, ParticleFactory{
 createParticle(defaultParticleType: DefaultParticleType,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
 createParticle(particleEffect: ParticleEffect,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
}

//net.minecraft.unused.packageinfo.PackageInfo6173
interface PackageInfo6173 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6172
interface PackageInfo6172 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6171
interface PackageInfo6171 extends JObject{
}

//net.minecraft.nbt.NbtOps$1


//net.minecraft.network.message.LastSeenMessagesCollector
class LastSeenMessagesCollector extends JObject{
 add(signature: MessageSignatureData,displayed: boolean): boolean;
 remove(signature: MessageSignatureData): void;
 collect(): LastSeenMessagesCollector_LastSeenMessages;
 resetMessageCount(): number;
 getMessageCount(): number;
}

//net.minecraft.unused.packageinfo.PackageInfo6170
interface PackageInfo6170 extends JObject{
}

//net.minecraft.registry.DynamicRegistryManager$Immutable
interface DynamicRegistryManager_Immutable extends JObject, DynamicRegistryManager{
}

//net.minecraft.unused.packageinfo.PackageInfo6176
interface PackageInfo6176 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6175
interface PackageInfo6175 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6174
interface PackageInfo6174 extends JObject{
}

//net.minecraft.nbt.AbstractNbtNumber
class AbstractNbtNumber extends JObject, NbtElement{
 toString(): string;
 byteValue(): byte;
 shortValue(): short;
 intValue(): number;
 longValue(): long;
 floatValue(): number;
 doubleValue(): number;
 numberValue(): Number;
}

//net.minecraft.network.packet.s2c.play.TitleS2CPacket
class TitleS2CPacket extends JObject, Packet{
 apply(clientPlayPacketListener: ClientPlayPacketListener): void;
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
 getTitle(): Text;
}

//net.minecraft.entity.ai.brain.task.SeekSkyTask
class SeekSkyTask extends JObject{
}
class Static_SeekSkyTask {
static create(speed: number): SingleTickTask;
static method_46996(f: number,context: TaskTriggerer_TaskContext): App;
static findNearbySky(world: ServerWorld,entity: LivingEntity): Vec3d;
static method_46999(memoryQueryResult: MemoryQueryResult,f: number,pos: Vec3d): void;
static method_46998(memoryQueryResult: MemoryQueryResult,f: number,world: ServerWorld,entity: LivingEntity,time: long): boolean;
static method_46997(f: number,walkTarget: MemoryQueryResult): TaskRunnable;
static isSkyVisible(world: ServerWorld,entity: LivingEntity,pos: BlockPos): boolean;
}

//net.minecraft.block.SlabBlock$1


//net.minecraft.client.gui.AbstractParentElement
class AbstractParentElement extends JObject, ParentElement{
 setFocused(focused: Element): void;
 setDragging(dragging: boolean): void;
 getFocused(): Element;
 isDragging(): boolean;
}

//net.minecraft.nbt.scanner.SimpleNbtScanner
interface SimpleNbtScanner extends JObject, NbtScanner{
 start(rootType: NbtType): NbtScanner_Result;
 visitEnd(): NbtScanner_Result;
 visitInt(value: number): NbtScanner_Result;
 endNested(): NbtScanner_Result;
 startListItem(type: NbtType,index: number): NbtScanner_NestedResult;
 visitListMeta(entryType: NbtType,length: number): NbtScanner_Result;
 visitLong(value: long): NbtScanner_Result;
 visitString(value: string): NbtScanner_Result;
 visitDouble(value: number): NbtScanner_Result;
 visitShort(value: short): NbtScanner_Result;
 visitFloat(value: number): NbtScanner_Result;
 visitByte(value: byte): NbtScanner_Result;
 visitByteArray(value: byte[]): NbtScanner_Result;
 visitLongArray(value: long[]): NbtScanner_Result;
 visitIntArray(value: number[]): NbtScanner_Result;
 startSubNbt(type: NbtType,key: string): NbtScanner_NestedResult;
 visitSubNbtType(type: NbtType): NbtScanner_NestedResult;
}
class Static_SimpleNbtScanner {
static NOOP: SimpleNbtScanner;
}

//net.minecraft.world.GameRules$Acceptor
interface GameRules_Acceptor extends JObject{
 call(consumer: GameRules_Visitor,key: GameRules_Key,type: GameRules_Type): void;
}

//net.minecraft.client.texture.PlayerSkinProvider$SkinTextureAvailableCallback
interface PlayerSkinProvider_SkinTextureAvailableCallback extends JObject{
 onSkinTextureAvailable(type: MinecraftProfileTexture_Type,id: Identifier,texture: MinecraftProfileTexture): void;
}

//net.minecraft.server.command.CloneCommand$BlockInfo
class CloneCommand_BlockInfo extends JObject{
 pos: BlockPos;
 state: BlockState;
 blockEntityNbt: NbtCompound;
}

//net.minecraft.datafixer.mapping.LegacyCoralFanBlockMapping
class LegacyCoralFanBlockMapping extends JObject{
}
class Static_LegacyCoralFanBlockMapping {
static MAP: Map;
}

//net.minecraft.server.command.CloneCommand$ArgumentGetter
interface CloneCommand_ArgumentGetter extends JObject{
 apply(value: Object): Object;
}

//net.minecraft.unused.packageinfo.PackageInfo6183
interface PackageInfo6183 extends JObject{
}

//net.minecraft.registry.tag.EntityTypeTags
class EntityTypeTags extends JObject{
}
class Static_EntityTypeTags {
static of(id: string): TagKey;
static SKELETONS: TagKey;
static RAIDERS: TagKey;
static BEEHIVE_INHABITORS: TagKey;
static ARROWS: TagKey;
static IMPACT_PROJECTILES: TagKey;
static POWDER_SNOW_WALKABLE_MOBS: TagKey;
static AXOLOTL_ALWAYS_HOSTILES: TagKey;
static AXOLOTL_HUNT_TARGETS: TagKey;
static FREEZE_IMMUNE_ENTITY_TYPES: TagKey;
static FREEZE_HURTS_EXTRA_TYPES: TagKey;
static FROG_FOOD: TagKey;
static FALL_DAMAGE_IMMUNE: TagKey;
static DISMOUNTS_UNDERWATER: TagKey;
}

//net.minecraft.unused.packageinfo.PackageInfo6182
interface PackageInfo6182 extends JObject{
}

//net.minecraft.resource.ResourcePackProfile$PackFactory
interface ResourcePackProfile_PackFactory extends JObject{
 open(name: string): ResourcePack;
}

//net.minecraft.text.HoverEvent$EntityContent
class HoverEvent_EntityContent extends JObject{
 equals(o: Object): boolean;
 hashCode(): number;
 asTooltip(): List;
 toJson(): JsonElement;
 entityType: EntityType;
 uuid: UUID;
 name: Text;
}
class Static_HoverEvent_EntityContent {
static parse(json: JsonElement): HoverEvent_EntityContent;
static parse(text: Text): HoverEvent_EntityContent;
}

//net.minecraft.unused.packageinfo.PackageInfo6181
interface PackageInfo6181 extends JObject{
}

//net.minecraft.util.thread.TaskQueue$Simple
class TaskQueue_Simple extends JObject, TaskQueue{
 add(message: Object): boolean;
 isEmpty(): boolean;
 poll(): Object;
 getSize(): number;
}

//net.minecraft.unused.packageinfo.PackageInfo6188
interface PackageInfo6188 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6187
interface PackageInfo6187 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6186
interface PackageInfo6186 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6185
interface PackageInfo6185 extends JObject{
}

//net.minecraft.world.BlockRenderView
interface BlockRenderView extends JObject, BlockView{
 getColor(pos: BlockPos,colorResolver: ColorResolver): number;
 getLightingProvider(): LightingProvider;
 getLightLevel(type: LightType,pos: BlockPos): number;
 getBrightness(direction: Direction,shaded: boolean): number;
 getBaseLightLevel(pos: BlockPos,ambientDarkness: number): number;
 isSkyVisible(pos: BlockPos): boolean;
}

//net.minecraft.client.util.InputUtil
class InputUtil extends JObject{
}
class Static_InputUtil {
static fromTranslationKey(translationKey: string): InputUtil_Key;
static setRawMouseMotionMode(window: long,value: boolean): void;
static setMouseCallbacks(handle: long,cursorPosCallback: GLFWCursorPosCallbackI,mouseButtonCallback: GLFWMouseButtonCallbackI,scrollCallback: GLFWScrollCallbackI,dropCallback: GLFWDropCallbackI): void;
static isKeyPressed(handle: long,code: number): boolean;
static fromKeyCode(keyCode: number,scanCode: number): InputUtil_Key;
static setCursorParameters(handler: long,inputModeValue: number,x: number,y: number): void;
static isRawMouseMotionSupported(): boolean;
static setKeyboardCallbacks(handle: long,keyCallback: GLFWKeyCallbackI,charModsCallback: GLFWCharModsCallbackI): void;
static GLFW_RAW_MOUSE_MOTION_SUPPORTED_HANDLE: MethodHandle;
static GLFW_RAW_MOUSE_MOTION: number;
static GLFW_KEY_0: number;
static GLFW_KEY_1: number;
static GLFW_KEY_2: number;
static GLFW_KEY_3: number;
static GLFW_KEY_4: number;
static GLFW_KEY_5: number;
static GLFW_KEY_6: number;
static GLFW_KEY_7: number;
static GLFW_KEY_8: number;
static GLFW_KEY_9: number;
static GLFW_KEY_A: number;
static GLFW_KEY_B: number;
static GLFW_KEY_C: number;
static GLFW_KEY_D: number;
static GLFW_KEY_E: number;
static GLFW_KEY_F: number;
static GLFW_KEY_G: number;
static GLFW_KEY_H: number;
static GLFW_KEY_I: number;
static GLFW_KEY_J: number;
static GLFW_KEY_K: number;
static GLFW_KEY_L: number;
static GLFW_KEY_M: number;
static GLFW_KEY_N: number;
static GLFW_KEY_O: number;
static GLFW_KEY_P: number;
static GLFW_KEY_Q: number;
static GLFW_KEY_R: number;
static GLFW_KEY_S: number;
static GLFW_KEY_T: number;
static GLFW_KEY_U: number;
static GLFW_KEY_V: number;
static GLFW_KEY_W: number;
static GLFW_KEY_X: number;
static GLFW_KEY_Y: number;
static GLFW_KEY_Z: number;
static GLFW_KEY_F1: number;
static GLFW_KEY_F2: number;
static GLFW_KEY_F3: number;
static GLFW_KEY_F4: number;
static GLFW_KEY_F5: number;
static GLFW_KEY_F6: number;
static GLFW_KEY_F7: number;
static GLFW_KEY_F8: number;
static GLFW_KEY_F9: number;
static GLFW_KEY_F10: number;
static GLFW_KEY_F11: number;
static GLFW_KEY_F12: number;
static GLFW_KEY_F13: number;
static GLFW_KEY_F14: number;
static GLFW_KEY_F15: number;
static GLFW_KEY_F16: number;
static GLFW_KEY_F17: number;
static GLFW_KEY_F18: number;
static GLFW_KEY_F19: number;
static GLFW_KEY_F20: number;
static GLFW_KEY_F21: number;
static GLFW_KEY_F22: number;
static GLFW_KEY_F23: number;
static GLFW_KEY_F24: number;
static GLFW_KEY_F25: number;
static GLFW_KEY_NUM_LOCK: number;
static GLFW_KEY_KP_0: number;
static GLFW_KEY_KP_1: number;
static GLFW_KEY_KP_2: number;
static GLFW_KEY_KP_3: number;
static GLFW_KEY_KP_4: number;
static GLFW_KEY_KP_5: number;
static GLFW_KEY_KP_6: number;
static GLFW_KEY_KP_7: number;
static GLFW_KEY_KP_8: number;
static GLFW_KEY_KP_9: number;
static GLFW_KEY_KP_DECIMAL: number;
static GLFW_KEY_KP_ENTER: number;
static GLFW_KEY_KP_EQUAL: number;
static GLFW_KEY_DOWN: number;
static GLFW_KEY_LEFT: number;
static GLFW_KEY_RIGHT: number;
static GLFW_KEY_UP: number;
static GLFW_KEY_KP_ADD: number;
static GLFW_KEY_APOSTROPHE: number;
static GLFW_KEY_BACKSLASH: number;
static GLFW_KEY_COMMA: number;
static GLFW_KEY_EQUAL: number;
static GLFW_KEY_GRAVE_ACCENT: number;
static GLFW_KEY_LEFT_BRACKET: number;
static GLFW_KEY_MINUS: number;
static GLFW_KEY_KP_MULTIPLY: number;
static GLFW_KEY_PERIOD: number;
static GLFW_KEY_RIGHT_BRACKET: number;
static GLFW_KEY_SEMICOLON: number;
static GLFW_KEY_SLASH: number;
static GLFW_KEY_SPACE: number;
static GLFW_KEY_TAB: number;
static GLFW_KEY_LEFT_ALT: number;
static GLFW_KEY_LEFT_CONTROL: number;
static GLFW_KEY_LEFT_SHIFT: number;
static GLFW_KEY_LEFT_SUPER: number;
static GLFW_KEY_RIGHT_ALT: number;
static GLFW_KEY_RIGHT_CONTROL: number;
static GLFW_KEY_RIGHT_SHIFT: number;
static GLFW_KEY_RIGHT_SUPER: number;
static GLFW_KEY_ENTER: number;
static GLFW_KEY_ESCAPE: number;
static GLFW_KEY_BACKSPACE: number;
static GLFW_KEY_DELETE: number;
static GLFW_KEY_END: number;
static GLFW_KEY_HOME: number;
static GLFW_KEY_INSERT: number;
static GLFW_KEY_PAGE_DOWN: number;
static GLFW_KEY_PAGE_UP: number;
static GLFW_KEY_CAPS_LOCK: number;
static GLFW_KEY_PAUSE: number;
static GLFW_KEY_SCROLL_LOCK: number;
static GLFW_KEY_PRINT_SCREEN: number;
static field_31997: number;
static field_31998: number;
static field_31999: number;
static field_32000: number;
static field_32001: number;
static field_32002: number;
static field_32003: number;
static GLFW_CURSOR: number;
static GLFW_CURSOR_DISABLED: number;
static GLFW_CURSOR_NORMAL: number;
static UNKNOWN_KEY: InputUtil_Key;
}

//net.minecraft.network.packet.s2c.play.WorldBorderWarningTimeChangedS2CPacket
class WorldBorderWarningTimeChangedS2CPacket extends JObject, Packet{
 apply(clientPlayPacketListener: ClientPlayPacketListener): void;
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
 getWarningTime(): number;
}

//net.minecraft.unused.packageinfo.PackageInfo6180
interface PackageInfo6180 extends JObject{
}

//net.minecraft.network.packet.c2s.play.UpdateDifficultyLockC2SPacket
class UpdateDifficultyLockC2SPacket extends JObject, Packet{
 apply(listener: PacketListener): void;
 apply(serverPlayPacketListener: ServerPlayPacketListener): void;
 write(buf: PacketByteBuf): void;
 isDifficultyLocked(): boolean;
}

//net.minecraft.village.TradeOffers$SellPotionHoldingItemFactory
class TradeOffers_SellPotionHoldingItemFactory extends JObject, TradeOffers_Factory{
 create(entity: Entity,random: Random): TradeOffer;
}
class Static_TradeOffers_SellPotionHoldingItemFactory {
static method_19203(potion: Potion): boolean;
}

//net.minecraft.block.entity.SculkCatalystBlockEntity$Listener
class SculkCatalystBlockEntity_Listener extends JObject, GameEventListener{
 listen(world: ServerWorld,event: GameEvent,emitter: GameEvent_Emitter,emitterPos: Vec3d): boolean;
 getRange(): number;
 getTriggerOrder(): GameEventListener_TriggerOrder;
 getPositionSource(): PositionSource;
 getSpreadManager(): SculkSpreadManager;
}
class Static_SculkCatalystBlockEntity_Listener {
static RANGE: number;
}

//net.minecraft.network.message.FilterMask$1


//net.minecraft.client.network.ClientCommandSource$1


//net.minecraft.predicate.entity.PlayerPredicate$Builder
class PlayerPredicate_Builder extends JObject{
 build(): PlayerPredicate;
 recipe(id: Identifier,unlocked: boolean): PlayerPredicate_Builder;
 lookingAt(lookingAt: EntityPredicate): PlayerPredicate_Builder;
 stat(stat: Stat,value: NumberRange_IntRange): PlayerPredicate_Builder;
 gameMode(gameMode: GameMode): PlayerPredicate_Builder;
 experienceLevel(experienceLevel: NumberRange_IntRange): PlayerPredicate_Builder;
 advancement(id: Identifier,done: boolean): PlayerPredicate_Builder;
 advancement(id: Identifier,criteria: Map): PlayerPredicate_Builder;
}
class Static_PlayerPredicate_Builder {
static create(): PlayerPredicate_Builder;
}

//net.minecraft.loot.function.ApplyBonusLootFunction$OreDrops
class ApplyBonusLootFunction_OreDrops extends JObject, ApplyBonusLootFunction_Formula{
 getValue(random: Random,initialCount: number,enchantmentLevel: number): number;
 getId(): Identifier;
 toJson(json: JsonObject,context: JsonSerializationContext): void;
}
class Static_ApplyBonusLootFunction_OreDrops {
static fromJson(json: JsonObject,context: JsonDeserializationContext): ApplyBonusLootFunction_Formula;
static ID: Identifier;
}

//net.minecraft.client.network.BlockListChecker
interface BlockListChecker extends JObject{
 isAllowed(address: ServerAddress): boolean;
 isAllowed(address: Address): boolean;
}
class Static_BlockListChecker {
static create(): BlockListChecker;
}

//net.minecraft.network.PacketByteBuf$1


//net.minecraft.unused.packageinfo.PackageInfo6151
interface PackageInfo6151 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6150
interface PackageInfo6150 extends JObject{
}

//net.minecraft.structure.NetherFortressGenerator
class NetherFortressGenerator extends JObject{
}
class Static_NetherFortressGenerator {
static createPiece(pieceData: NetherFortressGenerator_PieceData,holder: StructurePiecesHolder,random: Random,x: number,y: number,z: number,orientation: Direction,chainLength: number): NetherFortressGenerator_Piece;
static field_31557: number;
static field_31558: number;
static field_34730: number;
static ALL_BRIDGE_PIECES: NetherFortressGenerator_PieceData;
static ALL_CORRIDOR_PIECES: NetherFortressGenerator_PieceData;
}

//net.minecraft.structure.StructureStart
class StructureStart extends JObject{
 getChildren(): List;
 place(world: StructureWorldAccess,structureAccessor: StructureAccessor,chunkGenerator: ChunkGenerator,random: Random,chunkBox: BlockBox,chunkPos: ChunkPos): void;
 hasChildren(): boolean;
 getReferences(): number;
 toNbt(context: StructureContext,chunkPos: ChunkPos): NbtCompound;
 getBoundingBox(): BlockBox;
 getPos(): ChunkPos;
 getStructure(): Structure;
 incrementReferences(): void;
 isNeverReferenced(): boolean;
}
class Static_StructureStart {
static fromNbt(context: StructureContext,nbt: NbtCompound,seed: long): StructureStart;
static INVALID: string;
static DEFAULT: StructureStart;
static LOGGER: Logger;
}

//net.minecraft.world.chunk.PalettedContainer$PaletteProvider
class PalettedContainer_PaletteProvider extends JObject{
 computeIndex(x: number,y: number,z: number): number;
 createDataProvider(idList: IndexedIterable,bits: number): PalettedContainer_DataProvider;
 getContainerSize(): number;
}
class Static_PalettedContainer_PaletteProvider {
static SINGULAR: Palette_Factory;
static ARRAY: Palette_Factory;
static BI_MAP: Palette_Factory;
static ID_LIST: Palette_Factory;
static BLOCK_STATE: PalettedContainer_PaletteProvider;
static BIOME: PalettedContainer_PaletteProvider;
}

//net.minecraft.entity.ItemSteerable
interface ItemSteerable extends JObject{
 consumeOnAStickItem(): boolean;
}

//net.minecraft.unused.packageinfo.PackageInfo6154
interface PackageInfo6154 extends JObject{
}

//net.minecraft.block.entity.BellBlockEntity$Effect
interface BellBlockEntity_Effect extends JObject{
 run(world: World,pos: BlockPos,hearingEntities: List): void;
}

//net.minecraft.predicate.entity.EntityTypePredicate
class EntityTypePredicate extends JObject{
 matches(type: EntityType): boolean;
 toJson(): JsonElement;
}
class Static_EntityTypePredicate {
static create(type: EntityType): EntityTypePredicate;
static create(tag: TagKey): EntityTypePredicate;
static fromJson(json: JsonElement): EntityTypePredicate;
static method_17854(identifier: Identifier): JsonSyntaxException;
static ANY: EntityTypePredicate;
static COMMA_JOINER: Joiner;
}

//net.minecraft.client.util.telemetry.PropertyMap
class PropertyMap extends JObject{
 get(property: TelemetryEventProperty): Object;
 toString(): string;
 keySet(): Set;
}
class Static_PropertyMap {
static builder(): PropertyMap_Builder;
static createCodec(properties: List): Codec;
}

//net.minecraft.loot.LootManager$AndCondition
class LootManager_AndCondition extends JObject, LootCondition{
 test(context: Object): boolean;
 test(lootContext: LootContext): boolean;
 validate(reporter: LootTableReporter): void;
 getType(): LootConditionType;
}

//net.minecraft.network.PacketCallbacks
interface PacketCallbacks extends JObject{
 getFailurePacket(): Packet;
 onSuccess(): void;
}
class Static_PacketCallbacks {
static of(failurePacket: Supplier): PacketCallbacks;
static always(runnable: Runnable): PacketCallbacks;
}

//net.minecraft.world.updater.WorldUpdater
class WorldUpdater extends JObject{
 cancel(): void;
 isDone(): boolean;
 getStatus(): Text;
 getWorlds(): Set;
 getProgress(): number;
 getProgress(world: RegistryKey): number;
 getTotalChunkCount(): number;
 getSkippedChunkCount(): number;
 getUpgradedChunkCount(): number;
}
class Static_WorldUpdater {
static method_17829(directory: File,name: string): boolean;
static LOGGER: Logger;
static UPDATE_THREAD_FACTORY: ThreadFactory;
static REGION_FILE_PATTERN: Pattern;
}

//net.minecraft.util.profiling.jfr.sample.LongRunningSample
interface LongRunningSample extends JObject{
 duration(): Duration;
}

//net.minecraft.loot.provider.nbt.ContextLootNbtProvider
class ContextLootNbtProvider extends JObject, LootNbtProvider{
 getType(): LootNbtProviderType;
 getRequiredParameters(): Set;
 getNbt(context: LootContext): NbtElement;
}
class Static_ContextLootNbtProvider {
static getTarget(entityTarget: LootContext_EntityTarget): ContextLootNbtProvider_Target;
static fromTarget(target: LootContext_EntityTarget): LootNbtProvider;
static fromTarget(target: string): ContextLootNbtProvider;
static BLOCK_ENTITY_TARGET_NAME: string;
static BLOCK_ENTITY_TARGET: ContextLootNbtProvider_Target;
static BLOCK_ENTITY: ContextLootNbtProvider;
}

//net.minecraft.client.render.block.entity.PistonBlockEntityRenderer
class PistonBlockEntityRenderer extends JObject, BlockEntityRenderer{
 render(entity: BlockEntity,tickDelta: number,matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,light: number,overlay: number): void;
 render(pistonBlockEntity: PistonBlockEntity,f: number,matrixStack: MatrixStack,vertexConsumerProvider: VertexConsumerProvider,i: number,j: number): void;
 getRenderDistance(): number;
}

//net.minecraft.world.gen.chunk.AquiferSampler$Impl
class AquiferSampler_Impl extends JObject, AquiferSampler{
 apply(pos: DensityFunction_NoisePos,density: number): BlockState;
 needsFluidTick(): boolean;
}
class Static_AquiferSampler_Impl {
static maxDistance(i: number,a: number): number;
static field_31451: number;
static field_31452: number;
static field_31453: number;
static field_31454: number;
static field_31455: number;
static field_31456: number;
static field_31457: number;
static field_31458: number;
static field_31459: number;
static field_36220: number;
static NEEDS_FLUID_TICK_DISTANCE_THRESHOLD: number;
static CHUNK_POS_OFFSETS: number[][];
}

//net.minecraft.network.message.MessageChainTaskQueue
class MessageChainTaskQueue extends JObject, FutureQueue, AutoCloseable{
 append(futureSupplier: FutureQueue_FutureSupplier): void;
 close(): void;
}
class Static_MessageChainTaskQueue {
static method_44904(throwable: Throwable): Object;
static LOGGER: Logger;
}

//net.minecraft.unused.packageinfo.PackageInfo6162
interface PackageInfo6162 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6161
interface PackageInfo6161 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6160
interface PackageInfo6160 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6166
interface PackageInfo6166 extends JObject{
}

//net.minecraft.world.gen.chunk.ChunkNoiseSampler
class ChunkNoiseSampler extends JObject, DensityFunction_EachApplier, DensityFunction_NoisePos{
 fill(densities: number[],densityFunction: DensityFunction): void;
 at(index: number): DensityFunction_NoisePos;
 at(i: number): ChunkNoiseSampler;
 blockX(): number;
 blockY(): number;
 blockZ(): number;
 swapBuffers(): void;
 interpolateZ(blockZ: number,deltaZ: number): void;
 stopInterpolation(): void;
 interpolateX(blockX: number,deltaX: number): void;
 sampleStartDensity(): void;
 getAquiferSampler(): AquiferSampler;
 sampleEndDensity(cellX: number): void;
 interpolateY(blockY: number,deltaY: number): void;
 estimateSurfaceHeight(blockX: number,blockZ: number): number;
 getBlender(): Blender;
 onSampledCellCorners(cellY: number,cellZ: number): void;
}
class Static_ChunkNoiseSampler {
static create(chunk: Chunk,noiseConfig: NoiseConfig,beardifying: DensityFunctionTypes_Beardifying,chunkGeneratorSettings: ChunkGeneratorSettings,fluidLevelSampler: AquiferSampler_FluidLevelSampler,blender: Blender): ChunkNoiseSampler;
static method_38342(i: number,j: number,interpolator: ChunkNoiseSampler_DensityInterpolator): void;
static method_38356(d: number,interpolator: ChunkNoiseSampler_DensityInterpolator): void;
static method_38350(d: number,interpolator: ChunkNoiseSampler_DensityInterpolator): void;
static method_38338(d: number,interpolator: ChunkNoiseSampler_DensityInterpolator): void;
}

//net.minecraft.particle.ItemStackParticleEffect$1


//net.minecraft.block.pattern.BlockPatternBuilder
class BlockPatternBuilder extends JObject{
 build(): BlockPattern;
 where(key: char,predicate: Predicate): BlockPatternBuilder;
 aisle(pattern: String[]): BlockPatternBuilder;
}
class Static_BlockPatternBuilder {
static start(): BlockPatternBuilder;
static method_38861(pos: CachedBlockPosition): boolean;
static JOINER: Joiner;
}

//net.minecraft.command.argument.SwizzleArgumentType
class SwizzleArgumentType extends JObject, ArgumentType{
 parse(stringReader: StringReader): EnumSet;
 parse(reader: StringReader): Object;
 getExamples(): Collection;
}
class Static_SwizzleArgumentType {
static swizzle(): SwizzleArgumentType;
static getSwizzle(context: CommandContext,name: string): EnumSet;
static EXAMPLES: Collection;
static INVALID_SWIZZLE_EXCEPTION: SimpleCommandExceptionType;
}

//net.minecraft.server.chase.ChaseClient
class ChaseClient extends JObject{
 run(): void;
 start(): void;
 stop(): void;
}
class Static_ChaseClient {
static LOGGER: Logger;
static CONNECTION_RETRY_INTERVAL: number;
}

//net.minecraft.client.gui.widget.EmptyWidget
class EmptyWidget extends JObject, Widget{
 getWidth(): number;
 getHeight(): number;
 setX(x: number): void;
 getX(): number;
 getY(): number;
 forEachChild(consumer: Consumer): void;
 setY(y: number): void;
}
class Static_EmptyWidget {
static ofWidth(width: number): EmptyWidget;
static ofHeight(height: number): EmptyWidget;
}

//net.minecraft.entity.ai.brain.task.WalkTowardsLookTargetTask
class WalkTowardsLookTargetTask extends JObject{
}
class Static_WalkTowardsLookTargetTask {
static create(lookTargetFunction: Function,predicate: Predicate,completionRange: number,searchRange: number,speed: number): Task;
static method_47129(fun: Function,predicate: Predicate,i: number,f: number,j: number,lookTarget: MemoryQueryResult,walkTarget: MemoryQueryResult): TaskRunnable;
static method_47128(fun: Function,predicate: Predicate,i: number,f: number,j: number,context: TaskTriggerer_TaskContext): App;
static method_47131(fun: Function,predicate: Predicate,i: number,memoryQueryResult: MemoryQueryResult,memoryQueryResult2: MemoryQueryResult,f: number,j: number,world: ServerWorld,entity: LivingEntity,time: long): boolean;
}

//net.minecraft.world.SpawnHelper$Checker
interface SpawnHelper_Checker extends JObject{
 test(type: EntityType,pos: BlockPos,chunk: Chunk): boolean;
}

//net.minecraft.client.render.model.json.ModelVariant$Deserializer
class ModelVariant_Deserializer extends JObject, JsonDeserializer{
 deserialize(functionJson: JsonElement,unused: Type,context: JsonDeserializationContext): Object;
 deserialize(jsonElement: JsonElement,type: Type,jsonDeserializationContext: JsonDeserializationContext): ModelVariant;
}
class Static_ModelVariant_Deserializer {
static DEFAULT_UV_LOCK: boolean;
static DEFAULT_WEIGHT: number;
static DEFAULT_X_ROTATION: number;
static DEFAULT_Y_ROTATION: number;
}

//net.minecraft.unused.packageinfo.PackageInfo6169
interface PackageInfo6169 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6168
interface PackageInfo6168 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6167
interface PackageInfo6167 extends JObject{
}

//net.minecraft.sound.BlockSoundGroup
class BlockSoundGroup extends JObject{
 getVolume(): number;
 getHitSound(): SoundEvent;
 getPitch(): number;
 getStepSound(): SoundEvent;
 getPlaceSound(): SoundEvent;
 getFallSound(): SoundEvent;
 getBreakSound(): SoundEvent;
 volume: number;
 pitch: number;
}
class Static_BlockSoundGroup {
static INTENTIONALLY_EMPTY: BlockSoundGroup;
static WOOD: BlockSoundGroup;
static GRAVEL: BlockSoundGroup;
static GRASS: BlockSoundGroup;
static LILY_PAD: BlockSoundGroup;
static STONE: BlockSoundGroup;
static METAL: BlockSoundGroup;
static GLASS: BlockSoundGroup;
static WOOL: BlockSoundGroup;
static SAND: BlockSoundGroup;
static SNOW: BlockSoundGroup;
static POWDER_SNOW: BlockSoundGroup;
static LADDER: BlockSoundGroup;
static ANVIL: BlockSoundGroup;
static SLIME: BlockSoundGroup;
static HONEY: BlockSoundGroup;
static WET_GRASS: BlockSoundGroup;
static CORAL: BlockSoundGroup;
static BAMBOO: BlockSoundGroup;
static BAMBOO_SAPLING: BlockSoundGroup;
static SCAFFOLDING: BlockSoundGroup;
static SWEET_BERRY_BUSH: BlockSoundGroup;
static CROP: BlockSoundGroup;
static STEM: BlockSoundGroup;
static VINE: BlockSoundGroup;
static NETHER_WART: BlockSoundGroup;
static LANTERN: BlockSoundGroup;
static NETHER_STEM: BlockSoundGroup;
static NYLIUM: BlockSoundGroup;
static FUNGUS: BlockSoundGroup;
static ROOTS: BlockSoundGroup;
static SHROOMLIGHT: BlockSoundGroup;
static WEEPING_VINES: BlockSoundGroup;
static WEEPING_VINES_LOW_PITCH: BlockSoundGroup;
static SOUL_SAND: BlockSoundGroup;
static SOUL_SOIL: BlockSoundGroup;
static BASALT: BlockSoundGroup;
static WART_BLOCK: BlockSoundGroup;
static NETHERRACK: BlockSoundGroup;
static NETHER_BRICKS: BlockSoundGroup;
static NETHER_SPROUTS: BlockSoundGroup;
static NETHER_ORE: BlockSoundGroup;
static BONE: BlockSoundGroup;
static NETHERITE: BlockSoundGroup;
static ANCIENT_DEBRIS: BlockSoundGroup;
static LODESTONE: BlockSoundGroup;
static CHAIN: BlockSoundGroup;
static NETHER_GOLD_ORE: BlockSoundGroup;
static GILDED_BLACKSTONE: BlockSoundGroup;
static CANDLE: BlockSoundGroup;
static AMETHYST_BLOCK: BlockSoundGroup;
static AMETHYST_CLUSTER: BlockSoundGroup;
static SMALL_AMETHYST_BUD: BlockSoundGroup;
static MEDIUM_AMETHYST_BUD: BlockSoundGroup;
static LARGE_AMETHYST_BUD: BlockSoundGroup;
static TUFF: BlockSoundGroup;
static CALCITE: BlockSoundGroup;
static DRIPSTONE_BLOCK: BlockSoundGroup;
static POINTED_DRIPSTONE: BlockSoundGroup;
static COPPER: BlockSoundGroup;
static CAVE_VINES: BlockSoundGroup;
static SPORE_BLOSSOM: BlockSoundGroup;
static AZALEA: BlockSoundGroup;
static FLOWERING_AZALEA: BlockSoundGroup;
static MOSS_CARPET: BlockSoundGroup;
static PINK_PETALS: BlockSoundGroup;
static MOSS_BLOCK: BlockSoundGroup;
static BIG_DRIPLEAF: BlockSoundGroup;
static SMALL_DRIPLEAF: BlockSoundGroup;
static ROOTED_DIRT: BlockSoundGroup;
static HANGING_ROOTS: BlockSoundGroup;
static AZALEA_LEAVES: BlockSoundGroup;
static SCULK_SENSOR: BlockSoundGroup;
static SCULK_CATALYST: BlockSoundGroup;
static SCULK: BlockSoundGroup;
static SCULK_VEIN: BlockSoundGroup;
static SCULK_SHRIEKER: BlockSoundGroup;
static GLOW_LICHEN: BlockSoundGroup;
static DEEPSLATE: BlockSoundGroup;
static DEEPSLATE_BRICKS: BlockSoundGroup;
static DEEPSLATE_TILES: BlockSoundGroup;
static POLISHED_DEEPSLATE: BlockSoundGroup;
static FROGLIGHT: BlockSoundGroup;
static FROGSPAWN: BlockSoundGroup;
static MANGROVE_ROOTS: BlockSoundGroup;
static MUDDY_MANGROVE_ROOTS: BlockSoundGroup;
static MUD: BlockSoundGroup;
static MUD_BRICKS: BlockSoundGroup;
static PACKED_MUD: BlockSoundGroup;
static HANGING_SIGN: BlockSoundGroup;
static NETHER_WOOD_HANGING_SIGN: BlockSoundGroup;
static BAMBOO_WOOD_HANGING_SIGN: BlockSoundGroup;
static BAMBOO_WOOD: BlockSoundGroup;
static NETHER_WOOD: BlockSoundGroup;
static CHERRY_WOOD: BlockSoundGroup;
static CHERRY_SAPLING: BlockSoundGroup;
static CHERRY_LEAVES: BlockSoundGroup;
static CHERRY_WOOD_HANGING_SIGN: BlockSoundGroup;
static CHISELED_BOOKSHELF: BlockSoundGroup;
static SUSPICIOUS_SAND: BlockSoundGroup;
static SUSPICIOUS_GRAVEL: BlockSoundGroup;
static DECORATED_POT: BlockSoundGroup;
static DECORATED_POT_SHATTER: BlockSoundGroup;
}

//net.minecraft.client.search.ReloadableSearchProvider
interface ReloadableSearchProvider extends JObject, SearchProvider{
 reload(): void;
}
class Static_ReloadableSearchProvider {
static empty(): ReloadableSearchProvider;
static method_43797(text: string): List;
}

//net.minecraft.block.entity.ShulkerBoxBlockEntity$1


//net.minecraft.client.particle.ExplosionEmitterParticle$Factory
class ExplosionEmitterParticle_Factory extends JObject, ParticleFactory{
 createParticle(defaultParticleType: DefaultParticleType,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
 createParticle(particleEffect: ParticleEffect,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
}

//net.minecraft.loot.provider.nbt.StorageLootNbtProvider$Serializer
class StorageLootNbtProvider_Serializer extends JObject, JsonSerializer{
 fromJson(json: JsonObject,context: JsonDeserializationContext): Object;
 fromJson(jsonObject: JsonObject,jsonDeserializationContext: JsonDeserializationContext): StorageLootNbtProvider;
 toJson(jsonObject: JsonObject,storageLootNbtProvider: StorageLootNbtProvider,jsonSerializationContext: JsonSerializationContext): void;
 toJson(json: JsonObject,object: Object,context: JsonSerializationContext): void;
}

//net.minecraft.client.world.BiomeColorCache$Colors
class BiomeColorCache_Colors extends JObject{
 get(y: number): number[];
 needsCacheRefresh(): boolean;
 setNeedsCacheRefresh(): void;
}
class Static_BiomeColorCache_Colors {
static XZ_COLORS_SIZE: number;
}

//net.minecraft.world.chunk.UpgradeData
class UpgradeData extends JObject{
 isDone(): boolean;
 upgrade(chunk: WorldChunk): void;
 toNbt(): NbtCompound;
}
class Static_UpgradeData {
static method_40460(tick: NbtList,blockTick: Tick): void;
static method_40458(world: World,tick: Tick): void;
static method_40452(world: World,tick: Tick): void;
static method_12353(world: World,logic: UpgradeData_Logic): void;
static upgradeSide(chunk: WorldChunk,side: EightWayDirection): void;
static addNeighborTicks(nbt: NbtCompound,key: string,nameToType: Function,ticks: List): void;
static method_40455(id: string): Optional;
static method_40459(id: string): Optional;
static applyAdjacentBlock(oldState: BlockState,dir: Direction,world: WorldAccess,currentPos: BlockPos,otherPos: BlockPos): BlockState;
static method_40457(tick: NbtList,fluidTick: Tick): void;
static method_40454(fluid: Fluid): string;
static method_40462(): Optional;
static method_40453(block: Block): string;
static method_40461(): Optional;
static LOGGER: Logger;
static NO_UPGRADE_DATA: UpgradeData;
static INDICES_KEY: string;
static EIGHT_WAYS: EightWayDirection[];
static BLOCK_TO_LOGIC: Map;
static CALLBACK_LOGICS: Set;
}

//net.minecraft.util.Nullables
class Nullables extends JObject{
}
class Static_Nullables {
static isEmpty(array: short[]): boolean;
static isEmpty(array: char[]): boolean;
static isEmpty(array: byte[]): boolean;
static isEmpty(array: boolean[]): boolean;
static isEmpty(array: number[]): boolean;
static isEmpty(array: number[]): boolean;
static isEmpty(array: long[]): boolean;
static isEmpty(array: number[]): boolean;
static isEmpty(array: Object[]): boolean;
static map(value: Object,mapper: Function): Object;
static getFirst(collection: Collection): Object;
static mapOrElseGet(value: Object,mapper: Function,getter: Supplier): Object;
static getFirstOrElse(collection: Collection,defaultValue: Object): Object;
static getFirstOrElseGet(collection: Collection,getter: Supplier): Object;
static mapOrElse(value: Object,mapper: Function,other: Object): Object;
}

//net.minecraft.client.item.ModelPredicateProviderRegistry$1


//net.minecraft.util.StringIdentifiable$Codec
class StringIdentifiable_Codec extends JObject, Codec{
 decode(ops: DynamicOps,input: Object): DataResult;
 encode(input: Object,ops: DynamicOps,prefix: Object): DataResult;
 encode(enum_: Enum,dynamicOps: DynamicOps,object: Object): DataResult;
 byId(id: string,fallback: Enum): Enum;
 byId(id: string): Enum;
}
class Static_StringIdentifiable_Codec {
static method_42632(enum_: Object): number;
static method_42635(identifiable: Object): string;
static method_42634(enums: Enum[],ordinal: number): Enum;
}

//net.minecraft.loot.provider.nbt.ContextLootNbtProvider$2


//net.minecraft.server.rcon.RconCommandOutput
class RconCommandOutput extends JObject, CommandOutput{
 clear(): void;
 shouldBroadcastConsoleToOps(): boolean;
 shouldReceiveFeedback(): boolean;
 asString(): string;
 sendMessage(message: Text): void;
 shouldTrackOutput(): boolean;
 createRconCommandSource(): ServerCommandSource;
}
class Static_RconCommandOutput {
static RCON_NAME: string;
static RCON_NAME_TEXT: Text;
}

//net.minecraft.loot.provider.nbt.ContextLootNbtProvider$1


//net.minecraft.network.packet.c2s.play.RequestCommandCompletionsC2SPacket
class RequestCommandCompletionsC2SPacket extends JObject, Packet{
 apply(serverPlayPacketListener: ServerPlayPacketListener): void;
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
 getPartialCommand(): string;
 getCompletionId(): number;
}

//net.minecraft.network.packet.s2c.play.PlayerListHeaderS2CPacket
class PlayerListHeaderS2CPacket extends JObject, Packet{
 apply(clientPlayPacketListener: ClientPlayPacketListener): void;
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
 getHeader(): Text;
 getFooter(): Text;
}

//net.minecraft.util.math.BlockPointerImpl
class BlockPointerImpl extends JObject, BlockPointer{
 getX(): number;
 getY(): number;
 getBlockEntity(): BlockEntity;
 getWorld(): ServerWorld;
 getBlockState(): BlockState;
 getZ(): number;
 getPos(): BlockPos;
}

//net.minecraft.data.server.recipe.SmithingTransformRecipeJsonBuilder
class SmithingTransformRecipeJsonBuilder extends JObject{
 criterion(name: string,conditions: CriterionConditions): SmithingTransformRecipeJsonBuilder;
 offerTo(exporter: Consumer,recipeId: string): void;
 offerTo(exporter: Consumer,recipeId: Identifier): void;
}
class Static_SmithingTransformRecipeJsonBuilder {
static create(template: Ingredient,base: Ingredient,addition: Ingredient,category: RecipeCategory,result: Item): SmithingTransformRecipeJsonBuilder;
}

//net.minecraft.state.property.Property
class Property extends JObject{
 getName(): string;
 name(value: Comparable): string;
 equals(o: Object): boolean;
 toString(): string;
 hashCode(): number;
 stream(): Stream;
 getType(): Class;
 parse(name: string): Optional;
 parse(ops: DynamicOps,state: State,input: Object): DataResult;
 getCodec(): Codec;
 getValues(): Collection;
 computeHashCode(): number;
 getValueCodec(): Codec;
 createValue(value: Comparable): Property_Value;
 createValue(state: State): Property_Value;
}

//net.minecraft.util.math.RotationPropertyHelper
class RotationPropertyHelper extends JObject{
}
class Static_RotationPropertyHelper {
static toDegrees(rotation: number): number;
static getMax(): number;
static fromDirection(direction: Direction): number;
static fromYaw(yaw: number): number;
static toDirection(rotation: number): Optional;
static CALCULATOR: RotationCalculator;
static MAX: number;
static NORTH: number;
static EAST: number;
static SOUTH: number;
static WEST: number;
}

//net.minecraft.command.argument.GameProfileArgumentType$GameProfileArgument
interface GameProfileArgumentType_GameProfileArgument extends JObject{
 getNames(source: ServerCommandSource): Collection;
}

//net.minecraft.util.profiling.jfr.sample.TimedSample
interface TimedSample extends JObject{
 getTime(): Instant;
}

//net.minecraft.entity.AnimationState
class AnimationState extends JObject{
 run(consumer: Consumer): void;
 update(animationProgress: number,speedMultiplier: number): void;
 start(age: number): void;
 stop(): void;
 isRunning(): boolean;
 setRunning(running: boolean,age: number): void;
 getTimeRunning(): long;
 startIfNotRunning(age: number): void;
}
class Static_AnimationState {
static STOPPED: long;
}

//net.minecraft.resource.featuretoggle.ToggleableFeature
interface ToggleableFeature extends JObject{
 isEnabled(enabledFeatures: FeatureSet): boolean;
 getRequiredFeatures(): FeatureSet;
}
class Static_ToggleableFeature {
static FEATURE_ENABLED_REGISTRY_KEYS: Set;
}

//net.minecraft.world.gen.chunk.ChunkNoiseSampler$DensityInterpolator
class ChunkNoiseSampler_DensityInterpolator extends JObject, DensityFunctionTypes_Wrapper, ChunkNoiseSampler_ParentedNoiseType{
 type(): DensityFunctionTypes_Wrapping_Type;
 fill(densities: number[],applier: DensityFunction_EachApplier): void;
 wrapped(): DensityFunction;
 sample(pos: DensityFunction_NoisePos): number;
}

//net.minecraft.client.option.SimpleOption$TypeChangeableCallbacks
interface SimpleOption_TypeChangeableCallbacks extends JObject, SimpleOption_CyclingCallbacks, SimpleOption_SliderCallbacks{
 getWidgetCreator(tooltipFactory: SimpleOption_TooltipFactory,gameOptions: GameOptions,x: number,y: number,width: number,changeCallback: Consumer): Function;
 isCycling(): boolean;
}

//net.minecraft.nbt.NbtLong$1


//net.minecraft.unused.packageinfo.PackageInfo5979
interface PackageInfo5979 extends JObject{
}

//net.minecraft.data.client.BlockStateModelGenerator$StateFactory
interface BlockStateModelGenerator_StateFactory extends JObject{
 create(block: Block,modelId: Identifier,textures: TextureMap,modelCollector: BiConsumer): BlockStateSupplier;
}

//net.minecraft.unused.packageinfo.PackageInfo5978
interface PackageInfo5978 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo5977
interface PackageInfo5977 extends JObject{
}

//net.minecraft.structure.rule.PosRuleTestType
interface PosRuleTestType extends JObject{
 codec(): Codec;
}
class Static_PosRuleTestType {
static register(id: string,codec: Codec): PosRuleTestType;
static method_28983(codec: Codec): Codec;
static ALWAYS_TRUE: PosRuleTestType;
static LINEAR_POS: PosRuleTestType;
static AXIS_ALIGNED_LINEAR_POS: PosRuleTestType;
}

//net.minecraft.data.server.recipe.SingleItemRecipeJsonBuilder
class SingleItemRecipeJsonBuilder extends JObject, CraftingRecipeJsonBuilder{
 group(string: string): SingleItemRecipeJsonBuilder;
 group(group: string): CraftingRecipeJsonBuilder;
 getOutputItem(): Item;
 criterion(name: string,conditions: CriterionConditions): CraftingRecipeJsonBuilder;
 criterion(string: string,criterionConditions: CriterionConditions): SingleItemRecipeJsonBuilder;
 offerTo(exporter: Consumer,recipeId: Identifier): void;
}
class Static_SingleItemRecipeJsonBuilder {
static createStonecutting(input: Ingredient,category: RecipeCategory,output: ItemConvertible): SingleItemRecipeJsonBuilder;
static createStonecutting(input: Ingredient,category: RecipeCategory,output: ItemConvertible,count: number): SingleItemRecipeJsonBuilder;
}

//net.minecraft.unused.packageinfo.PackageInfo5976
interface PackageInfo5976 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo5975
interface PackageInfo5975 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo5974
interface PackageInfo5974 extends JObject{
}

//net.minecraft.loot.LootManager
class LootManager extends JObject, ResourceReloader, LootDataLookup{
 getElement(lootDataKey: LootDataKey): Object;
 reload(synchronizer: ResourceReloader_Synchronizer,manager: ResourceManager,prepareProfiler: Profiler,applyProfiler: Profiler,prepareExecutor: Executor,applyExecutor: Executor): CompletableFuture;
 getIds(type: LootDataType): Collection;
}
class Static_LootManager {
static load(type: LootDataType,resourceManager: ResourceManager,executor: Executor,results: Map): CompletableFuture;
static validate(reporter: LootTableReporter,key: LootDataKey,value: Object): void;
static and(modifiers: LootFunction[]): LootFunction;
static and(predicates: LootCondition[]): LootCondition;
static method_51188(i: number): CompletableFuture[];
static method_51202(lootTableReporter: LootTableReporter,key: LootDataKey,value: Object): void;
static method_51191(builder: ImmutableMap_Builder,builder2: ImmutableMultimap_Builder,type: LootDataType,idToValue: Map): void;
static method_51197(name: string,message: string): void;
static method_51190(resourceManager: ResourceManager,executor: Executor,map: Map,type: LootDataType): CompletableFuture;
static method_51189(resourceManager: ResourceManager,lootDataType: LootDataType,map: Map): void;
static method_51192(builder: ImmutableMap_Builder,lootDataType: LootDataType,builder2: ImmutableMultimap_Builder,id: Identifier,value: Object): void;
static method_51198(map: Map,identifier: Identifier,value: Object): void;
static method_51195(lootDataType: LootDataType,map: Map,id: Identifier,json: JsonElement): void;
static LOGGER: Logger;
static EMPTY_LOOT_TABLE: LootDataKey;
}

//net.minecraft.client.render.entity.feature.WardenFeatureRenderer$AnimationAngleAdjuster
interface WardenFeatureRenderer_AnimationAngleAdjuster extends JObject{
 apply(warden: WardenEntity,tickDelta: number,animationProgress: number): number;
}

//net.minecraft.block.PoweredRailBlock$1


//net.minecraft.client.render.model.WeightedBakedModel
class WeightedBakedModel extends JObject, BakedModel{
 isBuiltin(): boolean;
 useAmbientOcclusion(): boolean;
 hasDepth(): boolean;
 isSideLit(): boolean;
 getParticleSprite(): Sprite;
 getTransformation(): ModelTransformation;
 getOverrides(): ModelOverrideList;
 getQuads(state: BlockState,face: Direction,random: Random): List;
}
class Static_WeightedBakedModel {
static method_33461(blockState: BlockState,direction: Direction,random: Random,present: Weighted_Present): List;
}

//net.minecraft.network.packet.s2c.play.PlaySoundS2CPacket
class PlaySoundS2CPacket extends JObject, Packet{
 apply(clientPlayPacketListener: ClientPlayPacketListener): void;
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
 getSeed(): long;
 getCategory(): SoundCategory;
 getVolume(): number;
 getSound(): RegistryEntry;
 getX(): number;
 getY(): number;
 getZ(): number;
 getPitch(): number;
}
class Static_PlaySoundS2CPacket {
static method_47991(packetByteBuf: PacketByteBuf,soundEvent: SoundEvent): void;
static COORDINATE_SCALE: number;
}

//net.minecraft.command.argument.ItemPredicateArgumentType$ItemStackPredicateArgument
interface ItemPredicateArgumentType_ItemStackPredicateArgument extends JObject, Predicate{
}

//net.minecraft.util.thread.FutureQueue$FutureSupplier
interface FutureQueue_FutureSupplier extends JObject{
 submit(executor: Executor): CompletableFuture;
}

//net.minecraft.particle.BlockStateParticleEffect
class BlockStateParticleEffect extends JObject, ParticleEffect{
 write(buf: PacketByteBuf): void;
 getType(): ParticleType;
 asString(): string;
 getBlockState(): BlockState;
}
class Static_BlockStateParticleEffect {
static createCodec(type: ParticleType): Codec;
static method_29129(particleType: ParticleType,state: BlockState): BlockStateParticleEffect;
static method_29127(effect: BlockStateParticleEffect): BlockState;
static PARAMETERS_FACTORY: ParticleEffect_Factory;
}

//net.minecraft.network.packet.s2c.play.PlayPingS2CPacket
class PlayPingS2CPacket extends JObject, Packet{
 apply(clientPlayPacketListener: ClientPlayPacketListener): void;
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
 getParameter(): number;
}

//net.minecraft.world.RaycastContext
class RaycastContext extends JObject{
 getStart(): Vec3d;
 getEnd(): Vec3d;
 getBlockShape(state: BlockState,world: BlockView,pos: BlockPos): VoxelShape;
 getFluidShape(state: FluidState,world: BlockView,pos: BlockPos): VoxelShape;
}

//net.minecraft.client.particle.NoteParticle$Factory
class NoteParticle_Factory extends JObject, ParticleFactory{
 createParticle(defaultParticleType: DefaultParticleType,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
 createParticle(particleEffect: ParticleEffect,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
}

//net.minecraft.world.gen.densityfunction.DensityFunctionTypes$1


//net.minecraft.world.biome.source.SeedMixer
class SeedMixer extends JObject{
}
class Static_SeedMixer {
static mixSeed(seed: long,salt: long): long;
static field_29842: long;
static field_29843: long;
}

//net.minecraft.client.texture.AbstractTexture
class AbstractTexture extends JObject, AutoCloseable{
 load(manager: ResourceManager): void;
 close(): void;
 setFilter(bilinear: boolean,mipmap: boolean): void;
 registerTexture(textureManager: TextureManager,resourceManager: ResourceManager,id: Identifier,executor: Executor): void;
 bindTexture(): void;
 clearGlId(): void;
 getGlId(): number;
}
class Static_AbstractTexture {
static DEFAULT_ID: number;
}

//net.minecraft.client.particle.DustColorTransitionParticle$Factory
class DustColorTransitionParticle_Factory extends JObject, ParticleFactory{
 createParticle(dustColorTransitionParticleEffect: DustColorTransitionParticleEffect,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
 createParticle(particleEffect: ParticleEffect,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
}

//net.minecraft.data.report.BlockListProvider
class BlockListProvider extends JObject, DataProvider{
 getName(): string;
 run(writer: DataWriter): CompletableFuture;
}

//net.minecraft.world.SaveProperties
interface SaveProperties extends JObject{
 getVersion(): number;
 getLevelName(): string;
 cloneWorldNbt(registryManager: DynamicRegistryManager,playerNbt: NbtCompound): NbtCompound;
 getDataConfiguration(): DataConfiguration;
 setDifficultyLocked(difficultyLocked: boolean): void;
 isDifficultyLocked(): boolean;
 setDifficulty(difficulty: Difficulty): void;
 isDebugWorld(): boolean;
 isFlatWorld(): boolean;
 areCommandsAllowed(): boolean;
 isHardcore(): boolean;
 getDifficulty(): Difficulty;
 setGameMode(gameMode: GameMode): void;
 getCustomBossEvents(): NbtCompound;
 getGeneratorOptions(): GeneratorOptions;
 setCustomBossEvents(customBossEvents: NbtCompound): void;
 getMainWorldProperties(): ServerWorldProperties;
 populateCrashReport(section: CrashReportSection): void;
 updateLevelInfo(dataConfiguration: DataConfiguration): void;
 addServerBrand(brand: string,modded: boolean): void;
 setDragonFight(dragonFight: EnderDragonFight_Data): void;
 getDragonFight(): EnderDragonFight_Data;
 getPlayerData(): NbtCompound;
 isModded(): boolean;
 getRemovedFeatures(): Set;
 getServerBrands(): Set;
 getLevelInfo(): LevelInfo;
 getFormatName(id: number): string;
 getEnabledFeatures(): FeatureSet;
 getLifecycle(): Lifecycle;
 getGameRules(): GameRules;
 getGameMode(): GameMode;
}
class Static_SaveProperties {
static ANVIL_FORMAT_ID: number;
static MCREGION_FORMAT_ID: number;
}

//net.minecraft.world.gen.feature.FossilFeatureConfig
class FossilFeatureConfig extends JObject, FeatureConfig{
 fossilStructures: List;
 overlayStructures: List;
 fossilProcessors: RegistryEntry;
 overlayProcessors: RegistryEntry;
 maxEmptyCorners: number;
}
class Static_FossilFeatureConfig {
static method_34306(config: FossilFeatureConfig): List;
static method_34304(config: FossilFeatureConfig): RegistryEntry;
static method_34305(config: FossilFeatureConfig): List;
static method_34299(instance: RecordCodecBuilder_Instance): App;
static method_34302(config: FossilFeatureConfig): RegistryEntry;
static method_34300(config: FossilFeatureConfig): Integer;
static CODEC: Codec;
}

//net.minecraft.client.render.model.json.WeightedUnbakedModel
class WeightedUnbakedModel extends JObject, UnbakedModel{
 equals(o: Object): boolean;
 hashCode(): number;
 getVariants(): List;
 setParents(modelLoader: Function): void;
 getModelDependencies(): Collection;
 bake(baker: Baker,textureGetter: Function,rotationContainer: ModelBakeSettings,modelId: Identifier): BakedModel;
}
class Static_WeightedUnbakedModel {
static method_45788(fun: Function,id: Identifier): void;
}

//net.minecraft.entity.ai.brain.task.PrepareRamTask$Ram
class PrepareRamTask_Ram extends JObject{
 getEntity(): LivingEntity;
 getStart(): BlockPos;
 getEnd(): BlockPos;
}

//net.minecraft.server.dedicated.command.SaveOffCommand
class SaveOffCommand extends JObject{
}
class Static_SaveOffCommand {
static register(dispatcher: CommandDispatcher): void;
static method_13558(source: ServerCommandSource): boolean;
static method_13557(context: CommandContext): number;
static method_52042(): Text;
static ALREADY_OFF_EXCEPTION: SimpleCommandExceptionType;
}

//net.minecraft.entity.EntityType$1


//net.minecraft.client.network.LanServerQueryManager$LanServerEntryList
class LanServerQueryManager_LanServerEntryList extends JObject{
 addServer(announcement: string,address: InetAddress): void;
 getEntriesIfUpdated(): List;
}

//net.minecraft.command.TranslatableBuiltInExceptions
class TranslatableBuiltInExceptions extends JObject, BuiltInExceptionProvider{
 dispatcherUnknownCommand(): SimpleCommandExceptionType;
 readerExpectedStartOfQuote(): SimpleCommandExceptionType;
 readerInvalidDouble(): DynamicCommandExceptionType;
 readerExpectedDouble(): SimpleCommandExceptionType;
 readerExpectedSymbol(): DynamicCommandExceptionType;
 readerExpectedFloat(): SimpleCommandExceptionType;
 dispatcherUnknownArgument(): SimpleCommandExceptionType;
 dispatcherParseException(): DynamicCommandExceptionType;
 readerInvalidEscape(): DynamicCommandExceptionType;
 readerExpectedEndOfQuote(): SimpleCommandExceptionType;
 dispatcherExpectedArgumentSeparator(): SimpleCommandExceptionType;
 doubleTooLow(): Dynamic2CommandExceptionType;
 doubleTooHigh(): Dynamic2CommandExceptionType;
 readerInvalidBool(): DynamicCommandExceptionType;
 readerInvalidLong(): DynamicCommandExceptionType;
 readerInvalidInt(): DynamicCommandExceptionType;
 readerInvalidFloat(): DynamicCommandExceptionType;
 integerTooLow(): Dynamic2CommandExceptionType;
 readerExpectedLong(): SimpleCommandExceptionType;
 readerExpectedInt(): SimpleCommandExceptionType;
 integerTooHigh(): Dynamic2CommandExceptionType;
 longTooLow(): Dynamic2CommandExceptionType;
 floatTooHigh(): Dynamic2CommandExceptionType;
 readerExpectedBool(): SimpleCommandExceptionType;
 literalIncorrect(): DynamicCommandExceptionType;
 floatTooLow(): Dynamic2CommandExceptionType;
 longTooHigh(): Dynamic2CommandExceptionType;
}
class Static_TranslatableBuiltInExceptions {
static method_9191(character: Object): Message;
static method_9187(found: Object,min: Object): Message;
static method_9181(value: Object): Message;
static method_9188(symbol: Object): Message;
static method_9182(value: Object): Message;
static method_9185(value: Object): Message;
static method_18479(found: Object,max: Object): Message;
static method_18481(value: Object): Message;
static method_9186(found: Object,max: Object): Message;
static method_9179(value: Object): Message;
static method_9189(expected: Object): Message;
static method_18480(found: Object,min: Object): Message;
static method_9190(found: Object,min: Object): Message;
static method_9180(found: Object,min: Object): Message;
static method_9184(message: Object): Message;
static method_9178(found: Object,max: Object): Message;
static method_9183(found: Object,max: Object): Message;
static DOUBLE_TOO_LOW: Dynamic2CommandExceptionType;
static DOUBLE_TOO_HIGH: Dynamic2CommandExceptionType;
static FLOAT_TOO_LOW: Dynamic2CommandExceptionType;
static FLOAT_TOO_HIGH: Dynamic2CommandExceptionType;
static INTEGER_TOO_LOW: Dynamic2CommandExceptionType;
static INTEGER_TOO_HIGH: Dynamic2CommandExceptionType;
static LONG_TOO_LOW: Dynamic2CommandExceptionType;
static LONG_TOO_HIGH: Dynamic2CommandExceptionType;
static LITERAL_INCORRECT: DynamicCommandExceptionType;
static READER_EXPECTED_START_QUOTE: SimpleCommandExceptionType;
static READER_EXPECTED_END_QUOTE: SimpleCommandExceptionType;
static READER_INVALID_ESCAPE: DynamicCommandExceptionType;
static READER_INVALID_BOOL: DynamicCommandExceptionType;
static READER_INVALID_INT: DynamicCommandExceptionType;
static READER_EXPECTED_INT: SimpleCommandExceptionType;
static READER_INVALID_LONG: DynamicCommandExceptionType;
static READER_EXPECTED_LONG: SimpleCommandExceptionType;
static READER_INVALID_DOUBLE: DynamicCommandExceptionType;
static READER_EXPECTED_DOUBLE: SimpleCommandExceptionType;
static READER_INVALID_FLOAT: DynamicCommandExceptionType;
static READER_EXPECTED_FLOAT: SimpleCommandExceptionType;
static READER_EXPECTED_BOOL: SimpleCommandExceptionType;
static READER_EXPECTED_SYMBOL: DynamicCommandExceptionType;
static DISPATCHER_UNKNOWN_COMMAND: SimpleCommandExceptionType;
static DISPATCHER_UNKNOWN_ARGUMENT: SimpleCommandExceptionType;
static DISPATCHER_EXPECTED_ARGUMENT_SEPARATOR: SimpleCommandExceptionType;
static DISPATCHER_PARSE_EXCEPTION: DynamicCommandExceptionType;
}

//net.minecraft.registry.tag.FluidTags
class FluidTags extends JObject{
}
class Static_FluidTags {
static of(id: string): TagKey;
static WATER: TagKey;
static LAVA: TagKey;
}

//net.minecraft.block.LadderBlock$1


//net.minecraft.client.font.GlyphAtlasTexture$Slot
class GlyphAtlasTexture_Slot extends JObject{
}

//net.minecraft.util.collection.WeightedList
class WeightedList extends JObject, Iterable{
 add(data: Object,weight: number): WeightedList;
 toString(): string;
 iterator(): Iterator;
 stream(): Stream;
 shuffle(): WeightedList;
}
class Static_WeightedList {
static createCodec(codec: Codec): Codec;
static method_35090(weightedList: WeightedList): List;
}

//net.minecraft.client.render.item.ItemModels
class ItemModels extends JObject{
 getModel(item: Item): BakedModel;
 getModel(stack: ItemStack): BakedModel;
 getModelManager(): BakedModelManager;
 reloadModels(): void;
 putModel(item: Item,modelId: ModelIdentifier): void;
 modelIds: Int2ObjectMap;
}
class Static_ItemModels {
static getModelId(item: Item): number;
}

//net.minecraft.client.gl.EffectShaderProgram
interface EffectShaderProgram extends JObject, ShaderProgramSetupView{
}

//net.minecraft.world.gen.feature.EmeraldOreFeatureConfig
class EmeraldOreFeatureConfig extends JObject, FeatureConfig{
 targets: List;
}
class Static_EmeraldOreFeatureConfig {
static method_28771(instance: RecordCodecBuilder_Instance): App;
static method_28772(config: EmeraldOreFeatureConfig): List;
static CODEC: Codec;
}

//net.minecraft.item.Item
class Item extends JObject, ToggleableFeature, ItemConvertible, FabricItem{
 getName(stack: ItemStack): Text;
 getName(): Text;
 toString(): string;
 use(world: World,user: PlayerEntity,hand: Hand): TypedActionResult;
 getFoodComponent(): FoodComponent;
 getEnchantability(): number;
 appendTooltip(stack: ItemStack,world: World,tooltip: List,context: TooltipContext): void;
 getMaxUseTime(stack: ItemStack): number;
 getUseAction(stack: ItemStack): UseAction;
 getAttributeModifiers(slot: EquipmentSlot): Multimap;
 getRarity(stack: ItemStack): Rarity;
 getMaxDamage(): number;
 damage(source: DamageSource): boolean;
 hasGlint(stack: ItemStack): boolean;
 getRecipeRemainder(): Item;
 getDefaultStack(): ItemStack;
 hasRecipeRemainder(): boolean;
 isSuitableFor(state: BlockState): boolean;
 getMaxCount(): number;
 isDamageable(): boolean;
 postProcessNbt(nbt: NbtCompound): void;
 getTooltipData(stack: ItemStack): Optional;
 isItemBarVisible(stack: ItemStack): boolean;
 postMine(stack: ItemStack,world: World,state: BlockState,pos: BlockPos,miner: LivingEntity): boolean;
 useOnEntity(stack: ItemStack,user: PlayerEntity,entity: LivingEntity,hand: Hand): ActionResult;
 inventoryTick(stack: ItemStack,world: World,entity: Entity,slot: number,selected: boolean): void;
 onCraft(stack: ItemStack,world: World,player: PlayerEntity): void;
 getItemBarColor(stack: ItemStack): number;
 finishUsing(stack: ItemStack,world: World,user: LivingEntity): ItemStack;
 postHit(stack: ItemStack,target: LivingEntity,attacker: LivingEntity): boolean;
 getItemBarStep(stack: ItemStack): number;
 isUsedOnRelease(stack: ItemStack): boolean;
 onStoppedUsing(stack: ItemStack,world: World,user: LivingEntity,remainingUseTicks: number): void;
 isEnchantable(stack: ItemStack): boolean;
 getDrinkSound(): SoundEvent;
 getEatSound(): SoundEvent;
 usageTick(world: World,user: LivingEntity,stack: ItemStack,remainingUseTicks: number): void;
 getRequiredFeatures(): FeatureSet;
 canMine(state: BlockState,world: World,pos: BlockPos,miner: PlayerEntity): boolean;
 useOnBlock(context: ItemUsageContext): ActionResult;
 onStackClicked(stack: ItemStack,slot: Slot,clickType: ClickType,player: PlayerEntity): boolean;
 onClicked(stack: ItemStack,otherStack: ItemStack,slot: Slot,clickType: ClickType,player: PlayerEntity,cursorStackReference: StackReference): boolean;
 getRegistryEntry(): RegistryEntry_Reference;
 asItem(): Item;
 isFood(): boolean;
 isNetworkSynced(): boolean;
 isNbtSynced(): boolean;
 canRepair(stack: ItemStack,ingredient: ItemStack): boolean;
 canBeNested(): boolean;
 getMiningSpeedMultiplier(stack: ItemStack,state: BlockState): number;
 onItemEntityDestroyed(entity: ItemEntity): void;
 getTranslationKey(stack: ItemStack): string;
 getTranslationKey(): string;
 isFireproof(): boolean;
}
class Static_Item {
static byRawId(id: number): Item;
static fromBlock(block: Block): Item;
static raycast(world: World,player: PlayerEntity,fluidHandling: RaycastContext_FluidHandling): BlockHitResult;
static getRawId(item: Item): number;
static LOGGER: Logger;
static BLOCK_ITEMS: Map;
static ATTACK_DAMAGE_MODIFIER_ID: UUID;
static ATTACK_SPEED_MODIFIER_ID: UUID;
static DEFAULT_MAX_COUNT: number;
static DEFAULT_MAX_USE_TIME: number;
static ITEM_BAR_STEPS: number;
}

//net.minecraft.server.filter.TextFilterer$MessageEncoder
interface TextFilterer_MessageEncoder extends JObject{
 encode(gameProfile: GameProfile,message: string): JsonObject;
}

//net.minecraft.world.explosion.ExplosionBehavior
class ExplosionBehavior extends JObject{
 getBlastResistance(explosion: Explosion,world: BlockView,pos: BlockPos,blockState: BlockState,fluidState: FluidState): Optional;
 canDestroyBlock(explosion: Explosion,world: BlockView,pos: BlockPos,state: BlockState,power: number): boolean;
}

//net.minecraft.predicate.LightPredicate$Builder
class LightPredicate_Builder extends JObject{
 build(): LightPredicate;
 light(light: NumberRange_IntRange): LightPredicate_Builder;
}
class Static_LightPredicate_Builder {
static create(): LightPredicate_Builder;
}

//net.minecraft.network.packet.s2c.play.CommandTreeS2CPacket
class CommandTreeS2CPacket extends JObject, Packet{
 apply(clientPlayPacketListener: ClientPlayPacketListener): void;
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
 getCommandTree(commandRegistryAccess: CommandRegistryAccess): RootCommandNode;
}
class Static_CommandTreeS2CPacket {
static validate(nodeDatas: List): void;
static validate(nodeDatas: List,validator: BiPredicate): void;
static traverse(commandTree: RootCommandNode): Object2IntMap;
static method_34119(buf2: PacketByteBuf,node: CommandTreeS2CPacket_CommandNodeData): void;
static createNodeData(node: CommandNode,nodes: Object2IntMap): CommandTreeS2CPacket_CommandNodeData;
static method_42068(index: BiPredicate,list: List,intSet: IntSet,i: number): boolean;
static collectNodes(nodes: Object2IntMap): List;
static readCommandNode(buf: PacketByteBuf): CommandTreeS2CPacket_CommandNodeData;
static readArgumentBuilder(buf: PacketByteBuf,flags: byte): CommandTreeS2CPacket_SuggestableNode;
static field_33317: byte;
static field_33318: byte;
static field_33319: byte;
static field_33320: byte;
static field_33321: byte;
static field_33322: byte;
static field_33323: byte;
}

//net.minecraft.client.gui.screen.recipebook.RecipeBookProvider
interface RecipeBookProvider extends JObject{
 refreshRecipeBook(): void;
 getRecipeBookWidget(): RecipeBookWidget;
}

//net.minecraft.client.gui.screen.option.TelemetryEventWidget$ContentsBuilder
class TelemetryEventWidget_ContentsBuilder extends JObject{
 build(): TelemetryEventWidget_Contents;
 appendText(textRenderer: TextRenderer,text: Text): void;
 appendSpace(height: number): void;
 appendTitle(textRenderer: TextRenderer,title: Text): void;
 appendTitle(textRenderer: TextRenderer,title: Text,marginBottom: number): void;
}

//net.minecraft.data.client.BlockStateVariantMap$QuintFunction
interface BlockStateVariantMap_QuintFunction extends JObject{
 apply(one: Object,two: Object,three: Object,four: Object,five: Object): Object;
}

//net.minecraft.structure.rule.blockentity.RuleBlockEntityModifier
interface RuleBlockEntityModifier extends JObject{
 getType(): RuleBlockEntityModifierType;
 modifyBlockEntityNbt(random: Random,nbt: NbtCompound): NbtCompound;
}
class Static_RuleBlockEntityModifier {
static TYPE_CODEC: Codec;
}

//net.minecraft.util.JsonSerializing$ElementSerializer
interface JsonSerializing_ElementSerializer extends JObject{
 fromJson(json: JsonElement,context: JsonDeserializationContext): Object;
 toJson(object: Object,context: JsonSerializationContext): JsonElement;
}

//net.minecraft.server.command.BossBarCommand
class BossBarCommand extends JObject{
}
class Static_BossBarCommand {
static getValue(source: ServerCommandSource,bossBar: CommandBossBar): number;
static register(dispatcher: CommandDispatcher): void;
static setName(source: ServerCommandSource,bossBar: CommandBossBar,name: Text): number;
static setValue(source: ServerCommandSource,bossBar: CommandBossBar,value: number): number;
static setColor(source: ServerCommandSource,bossBar: CommandBossBar,color: BossBar_Color): number;
static setStyle(source: ServerCommandSource,bossBar: CommandBossBar,style: BossBar_Style): number;
static getMaxValue(source: ServerCommandSource,bossBar: CommandBossBar): number;
static setMaxValue(source: ServerCommandSource,bossBar: CommandBossBar,value: number): number;
static getBossBar(context: CommandContext): CommandBossBar;
static isVisible(source: ServerCommandSource,bossBar: CommandBossBar): number;
static setVisible(source: ServerCommandSource,bossBar: CommandBossBar,visible: boolean): number;
static getPlayers(source: ServerCommandSource,bossBar: CommandBossBar): number;
static method_13035(source: ServerCommandSource): boolean;
static method_13038(context: CommandContext): number;
static method_13042(context: CommandContext): number;
static method_13064(context: CommandContext): number;
static method_13048(context: CommandContext): number;
static method_13070(context: CommandContext): number;
static method_13061(context: CommandContext): number;
static method_13055(context: CommandContext): number;
static method_13040(context: CommandContext): number;
static method_13034(context: CommandContext): number;
static method_13052(context: CommandContext): number;
static method_13043(context: CommandContext): number;
static method_13046(context: CommandContext): number;
static method_13037(context: CommandContext): number;
static method_13051(context: CommandContext): number;
static method_51930(commandBossBar: CommandBossBar): Text;
static method_13033(context: CommandContext): number;
static method_51928(commandBossBar: CommandBossBar): Text;
static method_13029(context: CommandContext): number;
static method_51926(commandBossBar: CommandBossBar): Text;
static method_51925(commandBossBar: CommandBossBar): Text;
static method_51924(commandBossBar: CommandBossBar): Text;
static method_13072(context: CommandContext): number;
static method_13057(context: CommandContext): number;
static method_13067(context: CommandContext): number;
static method_13032(context: CommandContext): number;
static method_13058(context: CommandContext): number;
static method_51929(commandBossBar: CommandBossBar): Text;
static method_13060(context: CommandContext): number;
static method_13062(context: CommandContext): number;
static method_51927(commandBossBar: CommandBossBar): Text;
static method_51931(commandBossBar: CommandBossBar): Text;
static method_13039(context: CommandContext): number;
static method_13047(context: CommandContext): number;
static method_51919(commandBossBar: CommandBossBar,i: number): Text;
static setPlayers(source: ServerCommandSource,bossBar: CommandBossBar,players: Collection): number;
static method_51923(commandBossBar: CommandBossBar): Text;
static addBossBar(source: ServerCommandSource,name: Identifier,displayName: Text): number;
static method_51920(commandBossBar: CommandBossBar): Text;
static method_51921(commandBossBar: CommandBossBar): Text;
static method_51918(commandBossBar: CommandBossBar): Text;
static method_51913(): Text;
static removeBossBar(source: ServerCommandSource,bossBar: CommandBossBar): number;
static method_51914(commandBossBar: CommandBossBar): Text;
static listBossBars(source: ServerCommandSource): number;
static method_51922(commandBossBar: CommandBossBar): Text;
static method_51915(commandBossBar: CommandBossBar,i: number): Text;
static method_51916(commandBossBar: CommandBossBar,collection: Collection): Text;
static method_51917(collection: Collection): Text;
static method_13063(name: Object): Message;
static method_13044(context: CommandContext,builder: SuggestionsBuilder): CompletableFuture;
static method_13059(name: Object): Message;
static CREATE_FAILED_EXCEPTION: DynamicCommandExceptionType;
static UNKNOWN_EXCEPTION: DynamicCommandExceptionType;
static SET_PLAYERS_UNCHANGED_EXCEPTION: SimpleCommandExceptionType;
static SET_NAME_UNCHANGED_EXCEPTION: SimpleCommandExceptionType;
static SET_COLOR_UNCHANGED_EXCEPTION: SimpleCommandExceptionType;
static SET_STYLE_UNCHANGED_EXCEPTION: SimpleCommandExceptionType;
static SET_VALUE_UNCHANGED_EXCEPTION: SimpleCommandExceptionType;
static SET_MAX_UNCHANGED_EXCEPTION: SimpleCommandExceptionType;
static SET_VISIBILITY_UNCHANGED_HIDDEN_EXCEPTION: SimpleCommandExceptionType;
static SET_VISIBILITY_UNCHANGED_VISIBLE_EXCEPTION: SimpleCommandExceptionType;
static SUGGESTION_PROVIDER: SuggestionProvider;
}

//net.minecraft.world.gen.chunk.ChunkNoiseSampler$BlendOffsetDensityFunction
class ChunkNoiseSampler_BlendOffsetDensityFunction extends JObject, ChunkNoiseSampler_ParentedNoiseType{
 apply(visitor: DensityFunction_DensityFunctionVisitor): DensityFunction;
 fill(densities: number[],applier: DensityFunction_EachApplier): void;
 maxValue(): number;
 wrapped(): DensityFunction;
 sample(pos: DensityFunction_NoisePos): number;
 minValue(): number;
 getCodecHolder(): CodecHolder;
}

//net.minecraft.client.gui.screen.pack.ResourcePackOrganizer
class ResourcePackOrganizer extends JObject{
 apply(): void;
 refresh(): void;
 getDisabledPacks(): Stream;
 getEnabledPacks(): Stream;
}

//net.minecraft.item.Equipment
interface Equipment extends JObject, Vanishable{
 equipAndSwap(item: Item,world: World,user: PlayerEntity,hand: Hand): TypedActionResult;
 getSlotType(): EquipmentSlot;
 getEquipSound(): SoundEvent;
}
class Static_Equipment {
static fromStack(stack: ItemStack): Equipment;
}

//net.minecraft.util.math.RotationAxis
interface RotationAxis extends JObject{
 rotation(rad: number): Quaternionf;
 rotationDegrees(deg: number): Quaternionf;
}
class Static_RotationAxis {
static of(axis: Vector3f): RotationAxis;
static method_46350(vector3f: Vector3f,rad: number): Quaternionf;
static method_46353(rad: number): Quaternionf;
static method_46352(rad: number): Quaternionf;
static method_46354(rad: number): Quaternionf;
static method_46351(rad: number): Quaternionf;
static method_46355(rad: number): Quaternionf;
static method_46349(rad: number): Quaternionf;
static NEGATIVE_X: RotationAxis;
static POSITIVE_X: RotationAxis;
static NEGATIVE_Y: RotationAxis;
static POSITIVE_Y: RotationAxis;
static NEGATIVE_Z: RotationAxis;
static POSITIVE_Z: RotationAxis;
}

//net.minecraft.loot.context.LootContextAware
interface LootContextAware extends JObject{
 validate(reporter: LootTableReporter): void;
 getRequiredParameters(): Set;
}

//net.minecraft.registry.tag.TagEntry$ValueGetter
interface TagEntry_ValueGetter extends JObject{
 direct(id: Identifier): Object;
 tag(id: Identifier): Collection;
}

//net.minecraft.client.font.UnihexFont$Loader
class UnihexFont_Loader extends JObject, FontLoader{
 getType(): FontType;
 build(): Either;
}
class Static_UnihexFont_Loader {
static method_51657(i: number): UnihexFont_UnicodeTextureGlyph;
static method_51660(glyphContainer: GlyphContainer,codePoint: number,glyph: UnihexFont_BitmapGlyph): void;
static method_51661(loader: UnihexFont_Loader): List;
static method_51667(i: number): UnihexFont_BitmapGlyph;
static method_51659(instance: RecordCodecBuilder_Instance): App;
static method_51665(loader: UnihexFont_Loader): Identifier;
static method_51666(rows: number): UnihexFont_BitmapGlyph;
static method_51664(i: number): UnihexFont_UnicodeTextureGlyph;
static CODEC: MapCodec;
}

//net.minecraft.world.level.storage.SessionLock
class SessionLock extends JObject, AutoCloseable{
 close(): void;
 isValid(): boolean;
}
class Static_SessionLock {
static create(path: Path): SessionLock;
static isLocked(path: Path): boolean;
static SESSION_LOCK: string;
static SNOWMAN: ByteBuffer;
}

//net.minecraft.util.path.AllowedSymlinkPathMatcher
class AllowedSymlinkPathMatcher extends JObject, PathMatcher{
 get(fileSystem: FileSystem): PathMatcher;
 matches(path: Path): boolean;
}
class Static_AllowedSymlinkPathMatcher {
static method_52252(path: Path): boolean;
static method_52254(path: Path): boolean;
static method_52253(list: List,path: Path): boolean;
static method_52250(fileSystem: FileSystem,entry: AllowedSymlinkPathMatcher_Entry): PathMatcher;
static method_52248(line: string): Stream;
static fromReader(reader: BufferedReader): AllowedSymlinkPathMatcher;
static LOGGER: Logger;
static COMMENT_LINE_PREFIX: string;
}

//net.minecraft.resource.SimpleResourceReload$Factory
interface SimpleResourceReload_Factory extends JObject{
 create(synchronizer: ResourceReloader_Synchronizer,manager: ResourceManager,reloader: ResourceReloader,prepareExecutor: Executor,applyExecutor: Executor): CompletableFuture;
}

//net.minecraft.client.particle.SpitParticle$Factory
class SpitParticle_Factory extends JObject, ParticleFactory{
 createParticle(defaultParticleType: DefaultParticleType,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
 createParticle(particleEffect: ParticleEffect,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
}

//net.minecraft.client.ClientBrandRetriever
class ClientBrandRetriever extends JObject{
}
class Static_ClientBrandRetriever {
static getClientModName(): string;
static VANILLA: string;
}

//net.minecraft.client.RunArgs$Game
class RunArgs_Game extends JObject{
 demo: boolean;
 version: string;
 versionType: string;
 multiplayerDisabled: boolean;
 onlineChatDisabled: boolean;
}

//net.minecraft.world.gen.chunk.ChunkNoiseSampler$CellCache
class ChunkNoiseSampler_CellCache extends JObject, DensityFunctionTypes_Wrapper, ChunkNoiseSampler_ParentedNoiseType{
 type(): DensityFunctionTypes_Wrapping_Type;
 fill(densities: number[],applier: DensityFunction_EachApplier): void;
 wrapped(): DensityFunction;
 sample(pos: DensityFunction_NoisePos): number;
}

//net.minecraft.registry.tag.ItemTags
class ItemTags extends JObject{
}
class Static_ItemTags {
static of(id: string): TagKey;
static WOOL: TagKey;
static PLANKS: TagKey;
static STONE_BRICKS: TagKey;
static WOODEN_BUTTONS: TagKey;
static STONE_BUTTONS: TagKey;
static BUTTONS: TagKey;
static WOOL_CARPETS: TagKey;
static WOODEN_DOORS: TagKey;
static WOODEN_STAIRS: TagKey;
static WOODEN_SLABS: TagKey;
static WOODEN_FENCES: TagKey;
static FENCE_GATES: TagKey;
static WOODEN_PRESSURE_PLATES: TagKey;
static WOODEN_TRAPDOORS: TagKey;
static DOORS: TagKey;
static SAPLINGS: TagKey;
static LOGS_THAT_BURN: TagKey;
static LOGS: TagKey;
static DARK_OAK_LOGS: TagKey;
static OAK_LOGS: TagKey;
static BIRCH_LOGS: TagKey;
static ACACIA_LOGS: TagKey;
static CHERRY_LOGS: TagKey;
static JUNGLE_LOGS: TagKey;
static SPRUCE_LOGS: TagKey;
static MANGROVE_LOGS: TagKey;
static CRIMSON_STEMS: TagKey;
static WARPED_STEMS: TagKey;
static BAMBOO_BLOCKS: TagKey;
static WART_BLOCKS: TagKey;
static BANNERS: TagKey;
static SAND: TagKey;
static SMELTS_TO_GLASS: TagKey;
static STAIRS: TagKey;
static SLABS: TagKey;
static WALLS: TagKey;
static ANVIL: TagKey;
static RAILS: TagKey;
static LEAVES: TagKey;
static TRAPDOORS: TagKey;
static SMALL_FLOWERS: TagKey;
static BEDS: TagKey;
static FENCES: TagKey;
static TALL_FLOWERS: TagKey;
static FLOWERS: TagKey;
static PIGLIN_REPELLENTS: TagKey;
static PIGLIN_LOVED: TagKey;
static IGNORED_BY_PIGLIN_BABIES: TagKey;
static PIGLIN_FOOD: TagKey;
static FOX_FOOD: TagKey;
static GOLD_ORES: TagKey;
static IRON_ORES: TagKey;
static DIAMOND_ORES: TagKey;
static REDSTONE_ORES: TagKey;
static LAPIS_ORES: TagKey;
static COAL_ORES: TagKey;
static EMERALD_ORES: TagKey;
static COPPER_ORES: TagKey;
static NON_FLAMMABLE_WOOD: TagKey;
static SOUL_FIRE_BASE_BLOCKS: TagKey;
static CANDLES: TagKey;
static DIRT: TagKey;
static TERRACOTTA: TagKey;
static COMPLETES_FIND_TREE_TUTORIAL: TagKey;
static BOATS: TagKey;
static CHEST_BOATS: TagKey;
static FISHES: TagKey;
static SIGNS: TagKey;
static MUSIC_DISCS: TagKey;
static CREEPER_DROP_MUSIC_DISCS: TagKey;
static COALS: TagKey;
static ARROWS: TagKey;
static LECTERN_BOOKS: TagKey;
static BOOKSHELF_BOOKS: TagKey;
static BEACON_PAYMENT_ITEMS: TagKey;
static STONE_TOOL_MATERIALS: TagKey;
static STONE_CRAFTING_MATERIALS: TagKey;
static FREEZE_IMMUNE_WEARABLES: TagKey;
static AXOLOTL_TEMPT_ITEMS: TagKey;
static DAMPENS_VIBRATIONS: TagKey;
static CLUSTER_MAX_HARVESTABLES: TagKey;
static COMPASSES: TagKey;
static HANGING_SIGNS: TagKey;
static CREEPER_IGNITERS: TagKey;
static NOTEBLOCK_TOP_INSTRUMENTS: TagKey;
static TRIMMABLE_ARMOR: TagKey;
static TRIM_MATERIALS: TagKey;
static TRIM_TEMPLATES: TagKey;
static SNIFFER_FOOD: TagKey;
static DECORATED_POT_SHERDS: TagKey;
static DECORATED_POT_INGREDIENTS: TagKey;
static SWORDS: TagKey;
static AXES: TagKey;
static HOES: TagKey;
static PICKAXES: TagKey;
static SHOVELS: TagKey;
static TOOLS: TagKey;
static BREAKS_DECORATED_POTS: TagKey;
static VILLAGER_PLANTABLE_SEEDS: TagKey;
}

//net.minecraft.entity.InteractionObserver
interface InteractionObserver extends JObject{
 onInteractionWith(interaction: EntityInteraction,entity: Entity): void;
}

//net.minecraft.util.math.random.Xoroshiro128PlusPlusRandomImpl
class Xoroshiro128PlusPlusRandomImpl extends JObject{
 next(): long;
}
class Static_Xoroshiro128PlusPlusRandomImpl {
static method_51857(random: Xoroshiro128PlusPlusRandomImpl): LongStream;
static method_51859(seeds: long[]): Xoroshiro128PlusPlusRandomImpl;
static method_51858(stream: LongStream): DataResult;
static CODEC: Codec;
}

//net.minecraft.world.WorldView
interface WorldView extends JObject, BlockRenderView, CollisionView, RedstoneView, BiomeAccess_Storage{
 getHeight(): number;
 getDimension(): DimensionType;
 getGeneratorStoredBiome(biomeX: number,biomeY: number,biomeZ: number): RegistryEntry;
 isSkyVisibleAllowingSea(pos: BlockPos): boolean;
 createCommandRegistryWrapper(registryRef: RegistryKey): RegistryWrapper;
 getStatesInBoxIfLoaded(box: Box): Stream;
 getBiomeAccess(): BiomeAccess;
 getTopPosition(heightmap: Heightmap_Type,pos: BlockPos): BlockPos;
 isChunkLoaded(chunkX: number,chunkZ: number): boolean;
 isChunkLoaded(pos: BlockPos): boolean;
 getBiome(pos: BlockPos): RegistryEntry;
 getColor(pos: BlockPos,colorResolver: ColorResolver): number;
 isAir(pos: BlockPos): boolean;
 getChunk(chunkX: number,chunkZ: number): Chunk;
 getChunk(chunkX: number,chunkZ: number,status: ChunkStatus): Chunk;
 getChunk(chunkX: number,chunkZ: number,leastStatus: ChunkStatus,create: boolean): Chunk;
 getChunk(pos: BlockPos): Chunk;
 getBiomeForNoiseGen(biomeX: number,biomeY: number,biomeZ: number): RegistryEntry;
 isWater(pos: BlockPos): boolean;
 getEnabledFeatures(): FeatureSet;
 getBottomY(): number;
 getChunkAsView(chunkX: number,chunkZ: number): BlockView;
 getRegistryManager(): DynamicRegistryManager;
 getTopY(heightmap: Heightmap_Type,x: number,z: number): number;
 getLightLevel(pos: BlockPos,ambientDarkness: number): number;
 getLightLevel(pos: BlockPos): number;
 getBrightness(pos: BlockPos): number;
 isClient(): boolean;
 isRegionLoaded(minX: number,minZ: number,maxX: number,maxZ: number): boolean;
 isRegionLoaded(min: BlockPos,max: BlockPos): boolean;
 isRegionLoaded(minX: number,minY: number,minZ: number,maxX: number,maxY: number,maxZ: number): boolean;
 getAmbientDarkness(): number;
 containsFluid(box: Box): boolean;
 getSeaLevel(): number;
 getPhototaxisFavor(pos: BlockPos): number;
 isPosLoaded(x: number,z: number): boolean;
}

//net.minecraft.command.argument.AngleArgumentType$Angle
class AngleArgumentType_Angle extends JObject{
 getAngle(source: ServerCommandSource): number;
}

//net.minecraft.entity.VariantHolder
interface VariantHolder extends JObject{
 getVariant(): Object;
 setVariant(variant: Object): void;
}

//net.minecraft.network.packet.c2s.play.TeleportConfirmC2SPacket
class TeleportConfirmC2SPacket extends JObject, Packet{
 apply(serverPlayPacketListener: ServerPlayPacketListener): void;
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
 getTeleportId(): number;
}

//net.minecraft.client.particle.ParticleManager$SpriteAwareFactory
interface ParticleManager_SpriteAwareFactory extends JObject{
 create(spriteProvider: SpriteProvider): ParticleFactory;
}

//net.minecraft.client.particle.WaterSuspendParticle$UnderwaterFactory
class WaterSuspendParticle_UnderwaterFactory extends JObject, ParticleFactory{
 createParticle(defaultParticleType: DefaultParticleType,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
 createParticle(particleEffect: ParticleEffect,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
}

//net.minecraft.client.render.model.json.ModelOverride$Condition
class ModelOverride_Condition extends JObject{
 getType(): Identifier;
 getThreshold(): number;
}

//net.minecraft.potion.PotionUtil
class PotionUtil extends JObject{
}
class Static_PotionUtil {
static getColor(potion: Potion): number;
static getColor(stack: ItemStack): number;
static getColor(effects: Collection): number;
static buildTooltip(stack: ItemStack,list: List,durationMultiplier: number): void;
static buildTooltip(statusEffects: List,list: List,durationMultiplier: number): void;
static getPotionEffects(stack: ItemStack): List;
static getPotionEffects(nbt: NbtCompound): List;
static getPotionEffects(potion: Potion,custom: Collection): List;
static setPotion(stack: ItemStack,potion: Potion): ItemStack;
static getPotion(compound: NbtCompound): Potion;
static getPotion(stack: ItemStack): Potion;
static setCustomPotionEffects(stack: ItemStack,effects: Collection): ItemStack;
static getCustomPotionEffects(nbt: NbtCompound): List;
static getCustomPotionEffects(stack: ItemStack): List;
static getCustomPotionEffects(nbt: NbtCompound,list: List): void;
static CUSTOM_POTION_EFFECTS_KEY: string;
static CUSTOM_POTION_COLOR_KEY: string;
static POTION_KEY: string;
static DEFAULT_COLOR: number;
static NONE_TEXT: Text;
}

//net.minecraft.client.render.BackgroundRenderer$DarknessFogModifier
class BackgroundRenderer_DarknessFogModifier extends JObject, BackgroundRenderer_StatusEffectFogModifier{
 applyColorModifier(entity: LivingEntity,effect: StatusEffectInstance,f: number,tickDelta: number): number;
 getStatusEffect(): StatusEffect;
 applyStartEndModifier(fogData: BackgroundRenderer_FogData,entity: LivingEntity,effect: StatusEffectInstance,viewDistance: number,tickDelta: number): void;
}

//net.minecraft.util.CsvWriter$Header
class CsvWriter_Header extends JObject{
 startBody(writer: Writer): CsvWriter;
 addColumn(name: string): CsvWriter_Header;
}

//net.minecraft.loot.condition.ValueCheckLootCondition$Serializer
class ValueCheckLootCondition_Serializer extends JObject, JsonSerializer{
 fromJson(json: JsonObject,context: JsonDeserializationContext): Object;
 fromJson(jsonObject: JsonObject,jsonDeserializationContext: JsonDeserializationContext): ValueCheckLootCondition;
 toJson(jsonObject: JsonObject,valueCheckLootCondition: ValueCheckLootCondition,jsonSerializationContext: JsonSerializationContext): void;
 toJson(json: JsonObject,object: Object,context: JsonSerializationContext): void;
}

//net.minecraft.network.packet.c2s.play.UpdateCommandBlockMinecartC2SPacket
class UpdateCommandBlockMinecartC2SPacket extends JObject, Packet{
 apply(serverPlayPacketListener: ServerPlayPacketListener): void;
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
 getMinecartCommandExecutor(world: World): CommandBlockExecutor;
 getCommand(): string;
 shouldTrackOutput(): boolean;
}

//net.minecraft.test.GameTest
interface GameTest extends JObject, Annotation{
 duration(): long;
 required(): boolean;
 rotation(): number;
 requiredSuccesses(): number;
 maxAttempts(): number;
 tickLimit(): number;
 templateName(): string;
 batchId(): string;
}

//net.minecraft.client.resource.language.LanguageManager
class LanguageManager extends JObject, SynchronousResourceReloader{
 getLanguage(): string;
 getLanguage(code: string): LanguageDefinition;
 reload(manager: ResourceManager): void;
 setLanguage(languageCode: string): void;
 getAllLanguages(): SortedMap;
}
class Static_LanguageManager {
static loadAvailableLanguages(packs: Stream): Map;
static method_29392(map: Map,pack: ResourcePack): void;
static LOGGER: Logger;
static DEFAULT_LANGUAGE_CODE: string;
static ENGLISH_US: LanguageDefinition;
}

//net.minecraft.server.network.SpawnLocating
class SpawnLocating extends JObject{
}
class Static_SpawnLocating {
static findServerSpawnPoint(world: ServerWorld,chunkPos: ChunkPos): BlockPos;
static findOverworldSpawn(world: ServerWorld,x: number,z: number): BlockPos;
}

//net.minecraft.client.network.LanServerInfo
class LanServerInfo extends JObject{
 getMotd(): string;
 updateLastTime(): void;
 getAddressPort(): string;
}

//net.minecraft.block.pattern.BlockPattern$Result
class BlockPattern_Result extends JObject{
 toString(): string;
 translate(offsetLeft: number,offsetDown: number,offsetForwards: number): CachedBlockPosition;
 getWidth(): number;
 getHeight(): number;
 getDepth(): number;
 getUp(): Direction;
 getFrontTopLeft(): BlockPos;
 getForwards(): Direction;
}

//net.minecraft.client.font.UnihexFont$UnicodeTextureGlyph$1


//net.minecraft.util.hit.HitResult
class HitResult extends JObject{
 getType(): HitResult_Type;
 squaredDistanceTo(entity: Entity): number;
 getPos(): Vec3d;
}

//net.minecraft.util.math.random.RandomSplitter
interface RandomSplitter extends JObject{
 split(x: number,y: number,z: number): Random;
 split(seed: string): Random;
 split(seed: Identifier): Random;
 split(pos: BlockPos): Random;
 addDebugInfo(info: StringBuilder): void;
}

//net.minecraft.entity.SpawnRestriction$Entry
class SpawnRestriction_Entry extends JObject{
}

//net.minecraft.datafixer.mapping.LegacyBiomeMapping
class LegacyBiomeMapping extends JObject{
}
class Static_LegacyBiomeMapping {
static MAP: ImmutableMap;
}

//net.minecraft.world.gen.feature.TreeFeatureConfig
class TreeFeatureConfig extends JObject, FeatureConfig{
 trunkProvider: BlockStateProvider;
 dirtProvider: BlockStateProvider;
 trunkPlacer: TrunkPlacer;
 foliageProvider: BlockStateProvider;
 foliagePlacer: FoliagePlacer;
 rootPlacer: Optional;
 minimumSize: FeatureSize;
 decorators: List;
 ignoreVines: boolean;
 forceDirt: boolean;
}
class Static_TreeFeatureConfig {
static method_28818(config: TreeFeatureConfig): TrunkPlacer;
static method_28819(config: TreeFeatureConfig): BlockStateProvider;
static method_28811(instance: RecordCodecBuilder_Instance): App;
static method_28816(config: TreeFeatureConfig): FoliagePlacer;
static method_28817(config: TreeFeatureConfig): BlockStateProvider;
static method_43164(config: TreeFeatureConfig): Optional;
static method_34344(config: TreeFeatureConfig): Boolean;
static method_37261(config: TreeFeatureConfig): Boolean;
static method_34345(config: TreeFeatureConfig): List;
static method_28815(config: TreeFeatureConfig): BlockStateProvider;
static method_28814(config: TreeFeatureConfig): FeatureSize;
static CODEC: Codec;
}

//net.minecraft.client.item.BundleTooltipData
class BundleTooltipData extends JObject, TooltipData{
 getInventory(): DefaultedList;
 getBundleOccupancy(): number;
}

//net.minecraft.client.model.Model
class Model extends JObject{
 getLayer(texture: Identifier): RenderLayer;
 render(matrices: MatrixStack,vertices: VertexConsumer,light: number,overlay: number,red: number,green: number,blue: number,alpha: number): void;
}

//net.minecraft.client.render.debug.SkyLightDebugRenderer
class SkyLightDebugRenderer extends JObject, DebugRenderer_Renderer{
 render(matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,cameraX: number,cameraY: number,cameraZ: number): void;
}
class Static_SkyLightDebugRenderer {
static RANGE: number;
}

//net.minecraft.registry.RegistryKeys
class RegistryKeys extends JObject{
}
class Static_RegistryKeys {
static of(id: string): RegistryKey;
static toWorldKey(key: RegistryKey): RegistryKey;
static toDimensionKey(key: RegistryKey): RegistryKey;
static ACTIVITY: RegistryKey;
static ATTRIBUTE: RegistryKey;
static BANNER_PATTERN: RegistryKey;
static BIOME_SOURCE: RegistryKey;
static BLOCK: RegistryKey;
static BLOCK_ENTITY_TYPE: RegistryKey;
static BLOCK_PREDICATE_TYPE: RegistryKey;
static BLOCK_STATE_PROVIDER_TYPE: RegistryKey;
static CARVER: RegistryKey;
static CAT_VARIANT: RegistryKey;
static CHUNK_GENERATOR: RegistryKey;
static CHUNK_STATUS: RegistryKey;
static COMMAND_ARGUMENT_TYPE: RegistryKey;
static ITEM_GROUP: RegistryKey;
static CUSTOM_STAT: RegistryKey;
static DAMAGE_TYPE: RegistryKey;
static DENSITY_FUNCTION_TYPE: RegistryKey;
static ENCHANTMENT: RegistryKey;
static ENTITY_TYPE: RegistryKey;
static FEATURE: RegistryKey;
static FEATURE_SIZE_TYPE: RegistryKey;
static FLOAT_PROVIDER_TYPE: RegistryKey;
static FLUID: RegistryKey;
static FOLIAGE_PLACER_TYPE: RegistryKey;
static FROG_VARIANT: RegistryKey;
static GAME_EVENT: RegistryKey;
static HEIGHT_PROVIDER_TYPE: RegistryKey;
static INSTRUMENT: RegistryKey;
static INT_PROVIDER_TYPE: RegistryKey;
static ITEM: RegistryKey;
static LOOT_CONDITION_TYPE: RegistryKey;
static LOOT_FUNCTION_TYPE: RegistryKey;
static LOOT_NBT_PROVIDER_TYPE: RegistryKey;
static LOOT_NUMBER_PROVIDER_TYPE: RegistryKey;
static LOOT_POOL_ENTRY_TYPE: RegistryKey;
static LOOT_SCORE_PROVIDER_TYPE: RegistryKey;
static MATERIAL_CONDITION: RegistryKey;
static MATERIAL_RULE: RegistryKey;
static MEMORY_MODULE_TYPE: RegistryKey;
static SCREEN_HANDLER: RegistryKey;
static STATUS_EFFECT: RegistryKey;
static PAINTING_VARIANT: RegistryKey;
static PARTICLE_TYPE: RegistryKey;
static PLACEMENT_MODIFIER_TYPE: RegistryKey;
static POINT_OF_INTEREST_TYPE: RegistryKey;
static POSITION_SOURCE_TYPE: RegistryKey;
static POS_RULE_TEST: RegistryKey;
static POTION: RegistryKey;
static RECIPE_SERIALIZER: RegistryKey;
static RECIPE_TYPE: RegistryKey;
static ROOT_PLACER_TYPE: RegistryKey;
static RULE_TEST: RegistryKey;
static RULE_BLOCK_ENTITY_MODIFIER: RegistryKey;
static SCHEDULE: RegistryKey;
static SENSOR_TYPE: RegistryKey;
static SOUND_EVENT: RegistryKey;
static STAT_TYPE: RegistryKey;
static STRUCTURE_PIECE: RegistryKey;
static STRUCTURE_PLACEMENT: RegistryKey;
static STRUCTURE_POOL_ELEMENT: RegistryKey;
static STRUCTURE_PROCESSOR: RegistryKey;
static STRUCTURE_TYPE: RegistryKey;
static TREE_DECORATOR_TYPE: RegistryKey;
static TRUNK_PLACER_TYPE: RegistryKey;
static VILLAGER_PROFESSION: RegistryKey;
static VILLAGER_TYPE: RegistryKey;
static DECORATED_POT_PATTERN: RegistryKey;
static BIOME: RegistryKey;
static MESSAGE_TYPE: RegistryKey;
static CONFIGURED_CARVER: RegistryKey;
static CONFIGURED_FEATURE: RegistryKey;
static DENSITY_FUNCTION: RegistryKey;
static DIMENSION_TYPE: RegistryKey;
static FLAT_LEVEL_GENERATOR_PRESET: RegistryKey;
static CHUNK_GENERATOR_SETTINGS: RegistryKey;
static NOISE_PARAMETERS: RegistryKey;
static PLACED_FEATURE: RegistryKey;
static STRUCTURE: RegistryKey;
static PROCESSOR_LIST: RegistryKey;
static STRUCTURE_SET: RegistryKey;
static TEMPLATE_POOL: RegistryKey;
static TRIM_MATERIAL: RegistryKey;
static TRIM_PATTERN: RegistryKey;
static WORLD_PRESET: RegistryKey;
static MULTI_NOISE_BIOME_SOURCE_PARAMETER_LIST: RegistryKey;
static WORLD: RegistryKey;
static DIMENSION: RegistryKey;
}

//net.minecraft.util.profiler.ProfilerTiming
class ProfilerTiming extends JObject, Comparable{
 compareTo(other: Object): number;
 compareTo(profilerTiming: ProfilerTiming): number;
 getColor(): number;
 parentSectionUsagePercentage: number;
 totalUsagePercentage: number;
 visitCount: long;
 name: string;
}

//net.minecraft.util.math.random.RandomSeed
class RandomSeed extends JObject{
}
class Static_RandomSeed {
static getSeed(): long;
static mixStafford13(seed: long): long;
static createXoroshiroSeed(seed: string): RandomSeed_XoroshiroSeed;
static createXoroshiroSeed(seed: long): RandomSeed_XoroshiroSeed;
static createUnmixedXoroshiroSeed(seed: long): RandomSeed_XoroshiroSeed;
static method_39004(seedUniquifier: long): long;
static GOLDEN_RATIO_64: long;
static SILVER_RATIO_64: long;
static MD5_HASH: HashFunction;
static SEED_UNIQUIFIER: AtomicLong;
}

//net.minecraft.world.biome.source.util.VanillaBiomeParameters
class VanillaBiomeParameters extends JObject{
 getContinentalnessDescription(continentalness: number): string;
 getErosionDescription(erosion: number): string;
 getTemperatureDescription(temperature: number): string;
 getHumidityDescription(humidity: number): string;
 getTemperatureParameters(): MultiNoiseUtil_ParameterRange;
 getSpawnSuitabilityNoises(): List;
 getHumidityParameters(): MultiNoiseUtil_ParameterRange;
 getWeirdnessParameters(): MultiNoiseUtil_ParameterRange;
 getErosionParameters(): MultiNoiseUtil_ParameterRange;
 getContinentalnessParameters(): MultiNoiseUtil_ParameterRange;
 method_40015(): MultiNoiseUtil_ParameterRange;
}
class Static_VanillaBiomeParameters {
static getPeaksValleysDescription(weirdness: number): string;
static method_43718(densityFunction: DensityFunction,densityFunction2: DensityFunction,noisePos: DensityFunction_NoisePos): boolean;
static getNoiseRangeIndex(noisePoint: number,noiseRanges: MultiNoiseUtil_ParameterRange): string;
static MAX_VALLEY_WEIRDNESS: number;
static MAX_LOW_WEIRDNESS: number;
static MAX_MID_WEIRDNESS: number;
static MAX_SECOND_HIGH_WEIRDNESS: number;
static field_34501: number;
static MAX_HIGH_WEIRDNESS: number;
static MAX_PEAK_WEIRDNESS: number;
static field_35042: number;
static field_35043: number;
static field_35044: number;
static field_35045: number;
static field_35046: number;
static field_39134: number;
static field_39135: number;
}

//net.minecraft.loot.LootTable$Serializer
class LootTable_Serializer extends JObject, JsonDeserializer, JsonSerializer{
 deserialize(json: JsonElement,unused: Type,context: JsonDeserializationContext): Object;
 deserialize(jsonElement: JsonElement,type: Type,jsonDeserializationContext: JsonDeserializationContext): LootTable;
 serialize(supplier: Object,unused: Type,context: JsonSerializationContext): JsonElement;
 serialize(lootTable: LootTable,type: Type,jsonSerializationContext: JsonSerializationContext): JsonElement;
}

//net.minecraft.world.dimension.DimensionTypeRegistrar
class DimensionTypeRegistrar extends JObject{
}
class Static_DimensionTypeRegistrar {
static bootstrap(dimensionTypeRegisterable: Registerable): void;
}

//net.minecraft.client.render.chunk.ChunkBuilder
class ChunkBuilder extends JObject{
 isEmpty(): boolean;
 stop(): void;
 reset(): void;
 upload(): void;
 setWorld(world: ClientWorld): void;
 rebuild(chunk: ChunkBuilder_BuiltChunk,builder: ChunkRendererRegionBuilder): void;
 send(task: ChunkBuilder_BuiltChunk_Task): void;
 getDebugString(): string;
 getFreeBufferCount(): number;
 getChunksToUpload(): number;
 getToBatchCount(): number;
 getCameraPosition(): Vec3d;
 scheduleUpload(builtBuffer: BufferBuilder_BuiltBuffer,glBuffer: VertexBuffer): CompletableFuture;
 setCameraPosition(cameraPosition: Vec3d): void;
}
class Static_ChunkBuilder {
static method_38555(future: CompletableFuture): CompletionStage;
static method_43610(vertexBuffer: VertexBuffer,builtBuffer: BufferBuilder_BuiltBuffer): void;
static method_22757(task: ChunkBuilder_BuiltChunk_Task,blockBufferBuilderStorage: BlockBufferBuilderStorage): CompletableFuture;
static LOGGER: Logger;
static field_32831: number;
static POSITION_COLOR_TEXTURE_LIGHT_NORMAL: VertexFormat;
static field_35300: number;
}

//net.minecraft.recipe.Ingredient$StackEntry
class Ingredient_StackEntry extends JObject, Ingredient_Entry{
 toJson(): JsonObject;
 getStacks(): Collection;
}

//net.minecraft.entity.ai.FuzzyPositions
class FuzzyPositions extends JObject{
}
class Static_FuzzyPositions {
static upWhile(pos: BlockPos,extraAbove: number,max: number,condition: Predicate): BlockPos;
static upWhile(pos: BlockPos,maxY: number,condition: Predicate): BlockPos;
static guessBest(factory: Supplier,scorer: ToDoubleFunction): Vec3d;
static towardTarget(entity: PathAwareEntity,horizontalRange: number,random: Random,fuzz: BlockPos): BlockPos;
static localFuzz(random: Random,horizontalRange: number,verticalRange: number,startHeight: number,directionX: number,directionZ: number,angleRange: number): BlockPos;
static localFuzz(random: Random,horizontalRange: number,verticalRange: number): BlockPos;
static guessBestPathTarget(entity: PathAwareEntity,factory: Supplier): Vec3d;
static GAUSS_RANGE: number;
}

//net.minecraft.world.gen.feature.LargeDripstoneFeature$WindModifier
class LargeDripstoneFeature_WindModifier extends JObject{
}
class Static_LargeDripstoneFeature_WindModifier {
static create(): LargeDripstoneFeature_WindModifier;
}

//net.minecraft.world.gen.structure.Structure
class Structure extends JObject{
 getType(): StructureType;
 getValidBiomes(): RegistryEntryList;
 getValidStructurePosition(context: Structure_Context): Optional;
 getTerrainAdaptation(): StructureTerrainAdaptation;
 getFeatureGenerationStep(): GenerationStep_Feature;
 createStructureStart(dynamicRegistryManager: DynamicRegistryManager,chunkGenerator: ChunkGenerator,biomeSource: BiomeSource,noiseConfig: NoiseConfig,structureTemplateManager: StructureTemplateManager,seed: long,chunkPos: ChunkPos,references: number,world: HeightLimitView,validBiomes: Predicate): StructureStart;
 postPlace(world: StructureWorldAccess,structureAccessor: StructureAccessor,chunkGenerator: ChunkGenerator,random: Random,box: BlockBox,chunkPos: ChunkPos,pieces: StructurePiecesList): void;
 getStructureSpawns(): Map;
 expandBoxIfShouldAdaptNoise(box: BlockBox): BlockBox;
}
class Static_Structure {
static createCodec(featureCreator: Function): Codec;
static getStructurePosition(context: Structure_Context,heightmap: Heightmap_Type,generator: Consumer): Optional;
static isBiomeValid(result: Structure_StructurePosition,context: Structure_Context): boolean;
static getCornerHeights(context: Structure_Context,x: number,width: number,z: number,height: number): number[];
static method_42700(fun: Function,instance: RecordCodecBuilder_Instance): App;
static configCodecBuilder(instance: RecordCodecBuilder_Instance): RecordCodecBuilder;
static method_47931(context: Structure_Context,position: Structure_StructurePosition): boolean;
static getMinCornerHeight(context: Structure_Context,width: number,height: number): number;
static getMinCornerHeight(context: Structure_Context,x: number,z: number,width: number,height: number): number;
static method_42698(feature: Structure): Structure_Config;
static STRUCTURE_CODEC: Codec;
static ENTRY_CODEC: Codec;
}

//net.minecraft.client.render.BackgroundRenderer
class BackgroundRenderer extends JObject{
}
class Static_BackgroundRenderer {
static render(camera: Camera,tickDelta: number,world: ClientWorld,viewDistance: number,skyDarkness: number): void;
static method_24873(clientWorld: ClientWorld,biomeAccess: BiomeAccess,f: number,x: number,y: number,z: number): Vec3d;
static clearFog(): void;
static applyFog(camera: Camera,fogType: BackgroundRenderer_FogType,viewDistance: number,thickFog: boolean,tickDelta: number): void;
static getFogModifier(entity: Entity,tickDelta: number): BackgroundRenderer_StatusEffectFogModifier;
static method_42589(livingEntity: LivingEntity,f: number,modifier: BackgroundRenderer_StatusEffectFogModifier): boolean;
static setFogBlack(): void;
static field_32685: number;
static FOG_MODIFIERS: List;
static field_32684: number;
static red: number;
static green: number;
static blue: number;
static waterFogColor: number;
static nextWaterFogColor: number;
static lastWaterFogColorUpdateTime: long;
}

//net.minecraft.item.FluidModificationItem
interface FluidModificationItem extends JObject{
 onEmptied(player: PlayerEntity,world: World,stack: ItemStack,pos: BlockPos): void;
 placeFluid(player: PlayerEntity,world: World,pos: BlockPos,hitResult: BlockHitResult): boolean;
}

//net.minecraft.world.block.NeighborUpdater
interface NeighborUpdater extends JObject{
 updateNeighbors(pos: BlockPos,sourceBlock: Block,except: Direction): void;
 updateNeighbor(state: BlockState,pos: BlockPos,sourceBlock: Block,sourcePos: BlockPos,notify: boolean): void;
 updateNeighbor(pos: BlockPos,sourceBlock: Block,sourcePos: BlockPos): void;
 replaceWithStateForNeighborUpdate(direction: Direction,neighborState: BlockState,pos: BlockPos,neighborPos: BlockPos,flags: number,maxUpdateDepth: number): void;
}
class Static_NeighborUpdater {
static tryNeighborUpdate(world: World,state: BlockState,pos: BlockPos,sourceBlock: Block,sourcePos: BlockPos,notify: boolean): void;
static method_41709(block: Block): string;
static replaceWithStateForNeighborUpdate(world: WorldAccess,direction: Direction,neighborState: BlockState,pos: BlockPos,neighborPos: BlockPos,flags: number,maxUpdateDepth: number): void;
static UPDATE_ORDER: Direction[];
}

//net.minecraft.state.property.Properties
class Properties extends JObject{
}
class Static_Properties {
static method_11814(facing: Direction): boolean;
static method_11813(shape: RailShape): boolean;
static ATTACHED: BooleanProperty;
static BOTTOM: BooleanProperty;
static CONDITIONAL: BooleanProperty;
static DISARMED: BooleanProperty;
static DRAG: BooleanProperty;
static ENABLED: BooleanProperty;
static EXTENDED: BooleanProperty;
static EYE: BooleanProperty;
static FALLING: BooleanProperty;
static HANGING: BooleanProperty;
static HAS_BOTTLE_0: BooleanProperty;
static HAS_BOTTLE_1: BooleanProperty;
static HAS_BOTTLE_2: BooleanProperty;
static HAS_RECORD: BooleanProperty;
static HAS_BOOK: BooleanProperty;
static INVERTED: BooleanProperty;
static IN_WALL: BooleanProperty;
static LIT: BooleanProperty;
static LOCKED: BooleanProperty;
static OCCUPIED: BooleanProperty;
static OPEN: BooleanProperty;
static PERSISTENT: BooleanProperty;
static POWERED: BooleanProperty;
static SHORT: BooleanProperty;
static SIGNAL_FIRE: BooleanProperty;
static SNOWY: BooleanProperty;
static TRIGGERED: BooleanProperty;
static UNSTABLE: BooleanProperty;
static WATERLOGGED: BooleanProperty;
static BERRIES: BooleanProperty;
static BLOOM: BooleanProperty;
static SHRIEKING: BooleanProperty;
static CAN_SUMMON: BooleanProperty;
static HORIZONTAL_AXIS: EnumProperty;
static AXIS: EnumProperty;
static UP: BooleanProperty;
static DOWN: BooleanProperty;
static NORTH: BooleanProperty;
static EAST: BooleanProperty;
static SOUTH: BooleanProperty;
static WEST: BooleanProperty;
static FACING: DirectionProperty;
static HOPPER_FACING: DirectionProperty;
static HORIZONTAL_FACING: DirectionProperty;
static FLOWER_AMOUNT: IntProperty;
static ORIENTATION: EnumProperty;
static WALL_MOUNT_LOCATION: EnumProperty;
static ATTACHMENT: EnumProperty;
static EAST_WALL_SHAPE: EnumProperty;
static NORTH_WALL_SHAPE: EnumProperty;
static SOUTH_WALL_SHAPE: EnumProperty;
static WEST_WALL_SHAPE: EnumProperty;
static EAST_WIRE_CONNECTION: EnumProperty;
static NORTH_WIRE_CONNECTION: EnumProperty;
static SOUTH_WIRE_CONNECTION: EnumProperty;
static WEST_WIRE_CONNECTION: EnumProperty;
static DOUBLE_BLOCK_HALF: EnumProperty;
static BLOCK_HALF: EnumProperty;
static RAIL_SHAPE: EnumProperty;
static STRAIGHT_RAIL_SHAPE: EnumProperty;
static AGE_1_MAX: number;
static AGE_2_MAX: number;
static AGE_3_MAX: number;
static AGE_4_MAX: number;
static AGE_5_MAX: number;
static AGE_7_MAX: number;
static AGE_15_MAX: number;
static AGE_25_MAX: number;
static AGE_1: IntProperty;
static AGE_2: IntProperty;
static AGE_3: IntProperty;
static AGE_4: IntProperty;
static AGE_5: IntProperty;
static AGE_7: IntProperty;
static AGE_15: IntProperty;
static AGE_25: IntProperty;
static BITES: IntProperty;
static CANDLES: IntProperty;
static DELAY: IntProperty;
static DISTANCE_1_7_MAX: number;
static DISTANCE_1_7: IntProperty;
static EGGS: IntProperty;
static HATCH: IntProperty;
static LAYERS: IntProperty;
static LEVEL_3_MIN: number;
static LEVEL_1_8_MIN: number;
static LEVEL_3_MAX: number;
static LEVEL_1_8_MAX: number;
static LEVEL_3: IntProperty;
static LEVEL_8: IntProperty;
static LEVEL_1_8: IntProperty;
static HONEY_LEVEL: IntProperty;
static LEVEL_15_MAX: number;
static LEVEL_15: IntProperty;
static MOISTURE: IntProperty;
static NOTE: IntProperty;
static PICKLES: IntProperty;
static POWER: IntProperty;
static STAGE: IntProperty;
static DISTANCE_0_7_MAX: number;
static DISTANCE_0_7: IntProperty;
static CHARGES_MIN: number;
static CHARGES_MAX: number;
static CHARGES: IntProperty;
static ROTATION: IntProperty;
static BED_PART: EnumProperty;
static CHEST_TYPE: EnumProperty;
static COMPARATOR_MODE: EnumProperty;
static DOOR_HINGE: EnumProperty;
static INSTRUMENT: EnumProperty;
static PISTON_TYPE: EnumProperty;
static SLAB_TYPE: EnumProperty;
static STAIR_SHAPE: EnumProperty;
static STRUCTURE_BLOCK_MODE: EnumProperty;
static BAMBOO_LEAVES: EnumProperty;
static TILT: EnumProperty;
static VERTICAL_DIRECTION: DirectionProperty;
static THICKNESS: EnumProperty;
static SCULK_SENSOR_PHASE: EnumProperty;
static SLOT_0_OCCUPIED: BooleanProperty;
static SLOT_1_OCCUPIED: BooleanProperty;
static SLOT_2_OCCUPIED: BooleanProperty;
static SLOT_3_OCCUPIED: BooleanProperty;
static SLOT_4_OCCUPIED: BooleanProperty;
static SLOT_5_OCCUPIED: BooleanProperty;
static DUSTED: IntProperty;
static CRACKED: BooleanProperty;
}

//net.minecraft.util.math.Vec3i
class Vec3i extends JObject, Comparable{
 add(vec: Vec3i): Vec3i;
 add(x: number,y: number,z: number): Vec3i;
 equals(o: Object): boolean;
 toString(): string;
 hashCode(): number;
 compareTo(vec: Object): number;
 compareTo(vec3i: Vec3i): number;
 offset(direction: Direction,distance: number): Vec3i;
 offset(direction: Direction): Vec3i;
 offset(axis: Direction_Axis,distance: number): Vec3i;
 toShortString(): string;
 multiply(scale: number): Vec3i;
 up(): Vec3i;
 up(distance: number): Vec3i;
 down(distance: number): Vec3i;
 down(): Vec3i;
 subtract(vec: Vec3i): Vec3i;
 getManhattanDistance(vec: Vec3i): number;
 crossProduct(vec: Vec3i): Vec3i;
 getSquaredDistanceFromCenter(x: number,y: number,z: number): number;
 getX(): number;
 getY(): number;
 isWithinDistance(pos: Position,distance: number): boolean;
 isWithinDistance(vec: Vec3i,distance: number): boolean;
 getZ(): number;
 getSquaredDistance(vec: Vec3i): number;
 getSquaredDistance(x: number,y: number,z: number): number;
 getSquaredDistance(pos: Position): number;
 south(distance: number): Vec3i;
 south(): Vec3i;
 north(distance: number): Vec3i;
 north(): Vec3i;
 west(distance: number): Vec3i;
 west(): Vec3i;
 east(): Vec3i;
 east(distance: number): Vec3i;
 getComponentAlongAxis(axis: Direction_Axis): number;
}
class Static_Vec3i {
static createOffsetCodec(maxAbsValue: number): Codec;
static method_49647(i: number,vec3i: Vec3i): string;
static method_48305(i: number,vec: Vec3i): DataResult;
static method_29125(stream: IntStream): DataResult;
static method_29124(vec: Vec3i): IntStream;
static method_29126(coordinates: number[]): Vec3i;
static CODEC: Codec;
static ZERO: Vec3i;
}

//net.minecraft.client.render.entity.EntityRendererFactory$Context
class EntityRendererFactory_Context extends JObject{
 getModelManager(): BakedModelManager;
 getTextRenderer(): TextRenderer;
 getBlockRenderManager(): BlockRenderManager;
 getRenderDispatcher(): EntityRenderDispatcher;
 getPart(layer: EntityModelLayer): ModelPart;
 getItemRenderer(): ItemRenderer;
 getResourceManager(): ResourceManager;
 getModelLoader(): EntityModelLoader;
 getHeldItemRenderer(): HeldItemRenderer;
}

//net.minecraft.util.math.Vec3d
class Vec3d extends JObject, Position{
 add(x: number,y: number,z: number): Vec3d;
 add(vec: Vec3d): Vec3d;
 equals(o: Object): boolean;
 length(): number;
 toString(): string;
 hashCode(): number;
 offset(direction: Direction,value: number): Vec3d;
 normalize(): Vec3d;
 multiply(vec: Vec3d): Vec3d;
 multiply(value: number): Vec3d;
 multiply(x: number,y: number,z: number): Vec3d;
 relativize(vec: Vec3d): Vec3d;
 negate(): Vec3d;
 subtract(x: number,y: number,z: number): Vec3d;
 subtract(vec: Vec3d): Vec3d;
 isInRange(pos: Position,radius: number): boolean;
 horizontalLength(): number;
 toVector3f(): Vector3f;
 rotateZ(angle: number): Vec3d;
 floorAlongAxes(axes: EnumSet): Vec3d;
 rotateX(angle: number): Vec3d;
 rotateY(angle: number): Vec3d;
 crossProduct(vec: Vec3d): Vec3d;
 getX(): number;
 getY(): number;
 distanceTo(vec: Vec3d): number;
 dotProduct(vec: Vec3d): number;
 getZ(): number;
 squaredDistanceTo(x: number,y: number,z: number): number;
 squaredDistanceTo(vec: Vec3d): number;
 lengthSquared(): number;
 lerp(to: Vec3d,delta: number): Vec3d;
 horizontalLengthSquared(): number;
 getComponentAlongAxis(axis: Direction_Axis): number;
 addRandom(random: Random,multiplier: number): Vec3d;
 withAxis(axis: Direction_Axis,value: number): Vec3d;
 x: number;
 y: number;
 z: number;
}
class Static_Vec3d {
static add(vec: Vec3i,deltaX: number,deltaY: number,deltaZ: number): Vec3d;
static of(vec: Vec3i): Vec3d;
static ofBottomCenter(vec: Vec3i): Vec3d;
static ofCenter(vec: Vec3i,deltaY: number): Vec3d;
static ofCenter(vec: Vec3i): Vec3d;
static fromPolar(polar: Vec2f): Vec3d;
static fromPolar(pitch: number,yaw: number): Vec3d;
static unpackRgb(rgb: number): Vec3d;
static method_42396(vec: Vec3d): List;
static method_42395(coords: List): Vec3d;
static method_42394(coordinates: List): DataResult;
static CODEC: Codec;
static ZERO: Vec3d;
}

//net.minecraft.client.option.HotbarStorage
class HotbarStorage extends JObject{
 save(): void;
 getSavedHotbar(i: number): HotbarStorageEntry;
}
class Static_HotbarStorage {
static LOGGER: Logger;
static STORAGE_ENTRY_COUNT: number;
}

//net.minecraft.client.gui.widget.ElementListWidget$1


//net.minecraft.client.render.debug.DebugRenderer
class DebugRenderer extends JObject{
 reset(): void;
 render(matrices: MatrixStack,vertexConsumers: VertexConsumerProvider_Immediate,cameraX: number,cameraY: number,cameraZ: number): void;
 toggleShowChunkBorder(): boolean;
 pathfindingDebugRenderer: PathfindingDebugRenderer;
 waterDebugRenderer: DebugRenderer_Renderer;
 chunkBorderDebugRenderer: DebugRenderer_Renderer;
 heightmapDebugRenderer: DebugRenderer_Renderer;
 collisionDebugRenderer: DebugRenderer_Renderer;
 supportingBlockDebugRenderer: DebugRenderer_Renderer;
 neighborUpdateDebugRenderer: DebugRenderer_Renderer;
 structureDebugRenderer: StructureDebugRenderer;
 skyLightDebugRenderer: DebugRenderer_Renderer;
 worldGenAttemptDebugRenderer: DebugRenderer_Renderer;
 blockOutlineDebugRenderer: DebugRenderer_Renderer;
 chunkLoadingDebugRenderer: DebugRenderer_Renderer;
 villageDebugRenderer: VillageDebugRenderer;
 villageSectionsDebugRenderer: VillageSectionsDebugRenderer;
 beeDebugRenderer: BeeDebugRenderer;
 raidCenterDebugRenderer: RaidCenterDebugRenderer;
 goalSelectorDebugRenderer: GoalSelectorDebugRenderer;
 gameTestDebugRenderer: GameTestDebugRenderer;
 gameEventDebugRenderer: GameEventDebugRenderer;
 lightDebugRenderer: LightDebugRenderer;
}
class Static_DebugRenderer {
static getTargetedEntity(entity: Entity,maxDistance: number): Optional;
static drawString(matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,string: string,x: number,y: number,z: number,color: number): void;
static drawString(matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,string: string,x: number,y: number,z: number,color: number): void;
static drawString(matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,string: string,x: number,y: number,z: number,color: number,size: number): void;
static drawString(matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,string: string,x: number,y: number,z: number,color: number,size: number,center: boolean,offset: number,visibleThroughObjects: boolean): void;
static drawBox(matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,pos1: BlockPos,pos2: BlockPos,red: number,green: number,blue: number,alpha: number): void;
static drawBox(matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,pos: BlockPos,expand: number,red: number,green: number,blue: number,alpha: number): void;
static drawBox(matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,box: Box,red: number,green: number,blue: number,alpha: number): void;
static drawBox(matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,minX: number,minY: number,minZ: number,maxX: number,maxY: number,maxZ: number,red: number,green: number,blue: number,alpha: number): void;
static method_23100(entity: Entity): boolean;
}

//net.minecraft.resource.InputSupplier
interface InputSupplier extends JObject{
 get(): Object;
}
class Static_InputSupplier {
static create(path: Path): InputSupplier;
static create(zipFile: ZipFile,zipEntry: ZipEntry): InputSupplier;
static method_45301(path: Path): InputStream;
static method_45302(zipFile: ZipFile,zipEntry: ZipEntry): InputStream;
}

//net.minecraft.loot.provider.score.LootScoreProvider
interface LootScoreProvider extends JObject{
 getName(context: LootContext): string;
 getType(): LootScoreProviderType;
 getRequiredParameters(): Set;
}

//net.minecraft.entity.RideableInventory
interface RideableInventory extends JObject{
 openInventory(player: PlayerEntity): void;
}

//net.minecraft.client.RunArgs
class RunArgs extends JObject{
 network: RunArgs_Network;
 windowSettings: WindowSettings;
 directories: RunArgs_Directories;
 game: RunArgs_Game;
 quickPlay: RunArgs_QuickPlay;
}

//net.minecraft.potion.Potions
class Potions extends JObject{
}
class Static_Potions {
static register(name: string,potion: Potion): Potion;
static register(key: RegistryKey,potion: Potion): Potion;
static EMPTY_KEY: RegistryKey;
static EMPTY: Potion;
static WATER: Potion;
static MUNDANE: Potion;
static THICK: Potion;
static AWKWARD: Potion;
static NIGHT_VISION: Potion;
static LONG_NIGHT_VISION: Potion;
static INVISIBILITY: Potion;
static LONG_INVISIBILITY: Potion;
static LEAPING: Potion;
static LONG_LEAPING: Potion;
static STRONG_LEAPING: Potion;
static FIRE_RESISTANCE: Potion;
static LONG_FIRE_RESISTANCE: Potion;
static SWIFTNESS: Potion;
static LONG_SWIFTNESS: Potion;
static STRONG_SWIFTNESS: Potion;
static SLOWNESS: Potion;
static LONG_SLOWNESS: Potion;
static STRONG_SLOWNESS: Potion;
static TURTLE_MASTER: Potion;
static LONG_TURTLE_MASTER: Potion;
static STRONG_TURTLE_MASTER: Potion;
static WATER_BREATHING: Potion;
static LONG_WATER_BREATHING: Potion;
static HEALING: Potion;
static STRONG_HEALING: Potion;
static HARMING: Potion;
static STRONG_HARMING: Potion;
static POISON: Potion;
static LONG_POISON: Potion;
static STRONG_POISON: Potion;
static REGENERATION: Potion;
static LONG_REGENERATION: Potion;
static STRONG_REGENERATION: Potion;
static STRENGTH: Potion;
static LONG_STRENGTH: Potion;
static STRONG_STRENGTH: Potion;
static WEAKNESS: Potion;
static LONG_WEAKNESS: Potion;
static LUCK: Potion;
static SLOW_FALLING: Potion;
static LONG_SLOW_FALLING: Potion;
}

//net.minecraft.item.BrushItem$1


//net.minecraft.registry.CombinedDynamicRegistries
class CombinedDynamicRegistries extends JObject{
 get(index: Object): DynamicRegistryManager_Immutable;
 with(type: Object,registryManagers: List): CombinedDynamicRegistries;
 with(type: Object,registryManagers: DynamicRegistryManager_Immutable): CombinedDynamicRegistries;
 getSucceedingRegistryManagers(type: Object): DynamicRegistryManager_Immutable;
 getCombinedRegistryManager(): DynamicRegistryManager_Immutable;
 getPrecedingRegistryManagers(type: Object): DynamicRegistryManager_Immutable;
}
class Static_CombinedDynamicRegistries {
static method_45931(list: List): List;
static method_45932(map: Map,entry: DynamicRegistryManager_Entry): void;
static method_45933(map: Map,registryManager: DynamicRegistryManager): void;
static toRegistryMap(registryManagers: Stream): Map;
}

//net.minecraft.loot.condition.MatchToolLootCondition$Serializer
class MatchToolLootCondition_Serializer extends JObject, JsonSerializer{
 fromJson(json: JsonObject,context: JsonDeserializationContext): Object;
 fromJson(jsonObject: JsonObject,jsonDeserializationContext: JsonDeserializationContext): MatchToolLootCondition;
 toJson(jsonObject: JsonObject,matchToolLootCondition: MatchToolLootCondition,jsonSerializationContext: JsonSerializationContext): void;
 toJson(json: JsonObject,object: Object,context: JsonSerializationContext): void;
}

//net.minecraft.util.math.Vec2f
class Vec2f extends JObject{
 add(value: number): Vec2f;
 add(vec: Vec2f): Vec2f;
 equals(other: Vec2f): boolean;
 length(): number;
 dot(vec: Vec2f): number;
 normalize(): Vec2f;
 multiply(value: number): Vec2f;
 negate(): Vec2f;
 distanceSquared(vec: Vec2f): number;
 lengthSquared(): number;
 x: number;
 y: number;
}
class Static_Vec2f {
static ZERO: Vec2f;
static SOUTH_EAST_UNIT: Vec2f;
static EAST_UNIT: Vec2f;
static WEST_UNIT: Vec2f;
static SOUTH_UNIT: Vec2f;
static NORTH_UNIT: Vec2f;
static MAX_SOUTH_EAST: Vec2f;
static MIN_SOUTH_EAST: Vec2f;
}

//net.minecraft.client.font.TextHandler
class TextHandler extends JObject{
 getWidth(text: OrderedText): number;
 getWidth(text: StringVisitable): number;
 getWidth(text: string): number;
 getTrimmedLength(text: string,maxWidth: number,style: Style): number;
 getStyleAt(text: OrderedText,x: number): Style;
 getStyleAt(text: StringVisitable,x: number): Style;
 getLimitedStringLength(text: string,maxWidth: number,style: Style): number;
 trimToWidth(text: string,maxWidth: number,style: Style): string;
 trimToWidth(text: StringVisitable,width: number,style: Style): StringVisitable;
 wrapLines(text: string,maxWidth: number,style: Style): List;
 wrapLines(text: StringVisitable,maxWidth: number,style: Style,lineConsumer: BiConsumer): void;
 wrapLines(text: StringVisitable,maxWidth: number,style: Style): List;
 wrapLines(text: StringVisitable,maxWidth: number,style: Style,wrappedLinePrefix: StringVisitable): List;
 wrapLines(text: string,maxWidth: number,style: Style,retainTrailingWordSplit: boolean,consumer: TextHandler_LineWrappingConsumer): void;
 getEndingIndex(text: string,maxWidth: number,style: Style): number;
 trimToWidthBackwards(text: string,maxWidth: number,style: Style): string;
 limitString(text: string,maxWidth: number,style: Style): string;
}
class Static_TextHandler {
static moveCursorByWords(text: string,offset: number,cursor: number,consumeSpaceOrBreak: boolean): number;
static method_27487(list: List,style: Style,text: string): Optional;
static method_27486(list: List,string: string,style: Style,start: number,end: number): void;
static method_30878(list: List,text: StringVisitable,lastLineWrapped: Boolean): void;
static method_35713(list: List,stringVisitable: StringVisitable,text: StringVisitable,lastLineWrapped: Boolean): void;
static method_30877(widthLimitingVisitor: TextHandler_WidthLimitingVisitor,mutableObject: MutableObject,index: number,style: Style,codePoint: number): boolean;
static method_27480(widthLimitingVisitor: TextHandler_WidthLimitingVisitor,style: Style,text: string): Optional;
}

//net.minecraft.sound.SoundEvent
class SoundEvent extends JObject{
 getId(): Identifier;
 getDistanceToTravel(volume: number): number;
 writeBuf(buf: PacketByteBuf): void;
}
class Static_SoundEvent {
static of(id: Identifier,distanceToTravel: Optional): SoundEvent;
static of(id: Identifier,distanceToTravel: number): SoundEvent;
static of(id: Identifier): SoundEvent;
static fromBuf(buf: PacketByteBuf): SoundEvent;
static method_47955(identifier: Identifier,float_: Float): SoundEvent;
static method_47960(identifier: Identifier): SoundEvent;
static method_47957(instance: RecordCodecBuilder_Instance): App;
static CODEC: Codec;
static ENTRY_CODEC: Codec;
static DEFAULT_DISTANCE_TO_TRAVEL: number;
}

//net.minecraft.advancement.criterion.Criterion
interface Criterion extends JObject{
 getId(): Identifier;
 conditionsFromJson(obj: JsonObject,predicateDeserializer: AdvancementEntityPredicateDeserializer): CriterionConditions;
 beginTrackingCondition(manager: PlayerAdvancementTracker,conditions: Criterion_ConditionsContainer): void;
 endTrackingCondition(manager: PlayerAdvancementTracker,conditions: Criterion_ConditionsContainer): void;
 endTracking(tracker: PlayerAdvancementTracker): void;
}

//net.minecraft.structure.StrongholdGenerator$3


//net.minecraft.structure.BastionHoglinStableData
class BastionHoglinStableData extends JObject{
}
class Static_BastionHoglinStableData {
static bootstrap(poolRegisterable: Registerable): void;
}

//net.minecraft.client.render.debug.HeightmapDebugRenderer$1


//net.minecraft.potion.Potion
class Potion extends JObject{
 finishTranslationKey(prefix: string): string;
 getEffects(): List;
 hasInstantEffect(): boolean;
}
class Static_Potion {
static byId(id: string): Potion;
}

//net.minecraft.server.command.CommandOutput$1


//net.minecraft.server.command.KillCommand
class KillCommand extends JObject{
}
class Static_KillCommand {
static register(dispatcher: CommandDispatcher): void;
static execute(source: ServerCommandSource,targets: Collection): number;
static method_13432(source: ServerCommandSource): boolean;
static method_22832(context: CommandContext): number;
static method_52005(collection: Collection): Text;
static method_52004(collection: Collection): Text;
static method_13431(context: CommandContext): number;
}

//net.minecraft.predicate.NumberRange
class NumberRange extends JObject{
 getMin(): Number;
 getMax(): Number;
 isDummy(): boolean;
 toJson(): JsonElement;
}
class Static_NumberRange {
static map(object: Object,fun: Function): Object;
static parse(commandReader: StringReader,commandFactory: NumberRange_CommandFactory,converter: Function,exceptionTypeSupplier: Supplier,mapper: Function): NumberRange;
static fromJson(json: JsonElement,fallback: NumberRange,asNumber: BiFunction,factory: NumberRange_Factory): NumberRange;
static fromStringReader(reader: StringReader,converter: Function,exceptionTypeSupplier: Supplier): Number;
static isNextCharValid(reader: StringReader): boolean;
static EXCEPTION_EMPTY: SimpleCommandExceptionType;
static EXCEPTION_SWAPPED: SimpleCommandExceptionType;
}

//net.minecraft.inventory.StackReference
interface StackReference extends JObject{
 get(): ItemStack;
 set(stack: ItemStack): boolean;
}
class Static_StackReference {
static of(inventory: Inventory,index: number,stackFilter: Predicate): StackReference;
static of(inventory: Inventory,index: number): StackReference;
static of(entity: LivingEntity,slot: EquipmentSlot): StackReference;
static of(entity: LivingEntity,slot: EquipmentSlot,filter: Predicate): StackReference;
static method_32334(stack: ItemStack): boolean;
static method_32333(stack: ItemStack): boolean;
static EMPTY: StackReference;
}

//net.minecraft.world.chunk.ChunkSection$BlockStateCounter
class ChunkSection_BlockStateCounter extends JObject, PalettedContainer_Counter{
 accept(blockState: BlockState,i: number): void;
 accept(object: Object,i: number): void;
 nonEmptyBlockCount: number;
 randomTickableBlockCount: number;
 nonEmptyFluidCount: number;
}

//net.minecraft.network.packet.s2c.play.KeepAliveS2CPacket
class KeepAliveS2CPacket extends JObject, Packet{
 apply(clientPlayPacketListener: ClientPlayPacketListener): void;
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
 getId(): long;
}

//net.minecraft.world.chunk.ChunkManager
class ChunkManager extends JObject, ChunkProvider, AutoCloseable{
 close(): void;
 tick(shouldKeepTicking: BooleanSupplier,tickChunks: boolean): void;
 setMobSpawnOptions(spawnMonsters: boolean,spawnAnimals: boolean): void;
 getLoadedChunkCount(): number;
 isChunkLoaded(x: number,z: number): boolean;
 getDebugString(): string;
 getChunk(chunkX: number,chunkZ: number): LightSourceView;
 getChunk(x: number,z: number,leastStatus: ChunkStatus,create: boolean): Chunk;
 setChunkForced(pos: ChunkPos,forced: boolean): void;
 getLightingProvider(): LightingProvider;
 getWorldChunk(chunkX: number,chunkZ: number,create: boolean): WorldChunk;
 getWorldChunk(chunkX: number,chunkZ: number): WorldChunk;
}

//net.minecraft.village.TradeOffers$BuyForOneEmeraldFactory
class TradeOffers_BuyForOneEmeraldFactory extends JObject, TradeOffers_Factory{
 create(entity: Entity,random: Random): TradeOffer;
}

//net.minecraft.unused.packageinfo.PackageInfo7728
interface PackageInfo7728 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo7727
interface PackageInfo7727 extends JObject{
}

//net.minecraft.network.packet.c2s.play.KeepAliveC2SPacket
class KeepAliveC2SPacket extends JObject, Packet{
 apply(listener: PacketListener): void;
 apply(serverPlayPacketListener: ServerPlayPacketListener): void;
 write(buf: PacketByteBuf): void;
 getId(): long;
}

//net.minecraft.client.particle.VibrationParticle$Factory
class VibrationParticle_Factory extends JObject, ParticleFactory{
 createParticle(vibrationParticleEffect: VibrationParticleEffect,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
 createParticle(particleEffect: ParticleEffect,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
}

//net.minecraft.client.font.TrueTypeFont$TtfGlyph$1


//net.minecraft.client.realms.util.TextRenderingUtils$Line
class TextRenderingUtils_Line extends JObject{
 equals(o: Object): boolean;
 toString(): string;
 hashCode(): number;
 segments: List;
}

//net.minecraft.server.command.DebugCommand
class DebugCommand extends JObject{
}
class Static_DebugCommand {
static register(dispatcher: CommandDispatcher): void;
static executeStop(source: ServerCommandSource): number;
static executeStart(source: ServerCommandSource): number;
static method_13154(context: CommandContext): number;
static method_36353(context: CommandContext): number;
static method_51952(i: number,collection: Collection,string: string): Text;
static method_13161(serverCommandSource: ServerCommandSource): boolean;
static method_51950(d: number,profileResult: ProfileResult,e: number): Text;
static method_13157(source: ServerCommandSource): boolean;
static method_51949(): Text;
static method_21617(context: CommandContext): number;
static executeFunction(source: ServerCommandSource,functions: Collection): number;
static method_51951(i: number,collection: Collection,string: string): Text;
static LOGGER: Logger;
static NOT_RUNNING_EXCEPTION: SimpleCommandExceptionType;
static ALREADY_RUNNING_EXCEPTION: SimpleCommandExceptionType;
}

//net.minecraft.command.argument.RegistryEntryArgumentType$Serializer
class RegistryEntryArgumentType_Serializer extends JObject, ArgumentSerializer{
 getArgumentTypeProperties(argumentType: ArgumentType): ArgumentSerializer_ArgumentTypeProperties;
 getArgumentTypeProperties(registryEntryArgumentType: RegistryEntryArgumentType): RegistryEntryArgumentType_Serializer_Properties;
 fromPacket(buf: PacketByteBuf): ArgumentSerializer_ArgumentTypeProperties;
 fromPacket(packetByteBuf: PacketByteBuf): RegistryEntryArgumentType_Serializer_Properties;
 writePacket(properties: ArgumentSerializer_ArgumentTypeProperties,buf: PacketByteBuf): void;
 writePacket(properties: RegistryEntryArgumentType_Serializer_Properties,packetByteBuf: PacketByteBuf): void;
 writeJson(properties: RegistryEntryArgumentType_Serializer_Properties,jsonObject: JsonObject): void;
 writeJson(properties: ArgumentSerializer_ArgumentTypeProperties,json: JsonObject): void;
}

//net.minecraft.client.gui.tab.GridScreenTab
class GridScreenTab extends JObject, Tab{
 getTitle(): Text;
 forEachChild(consumer: Consumer): void;
 refreshGrid(tabArea: ScreenRect): void;
}

//net.minecraft.world.biome.ColorResolver
interface ColorResolver extends JObject{
 getColor(biome: Biome,x: number,z: number): number;
}

//net.minecraft.registry.Registries
class Registries extends JObject{
}
class Static_Registries {
static validate(registries: Registry): void;
static init(): void;
static create(key: RegistryKey,initializer: Registries_Initializer): Registry;
static create(key: RegistryKey,registry: MutableRegistry,initializer: Registries_Initializer,lifecycle: Lifecycle): MutableRegistry;
static create(key: RegistryKey,defaultId: string,initializer: Registries_Initializer): DefaultedRegistry;
static create(key: RegistryKey,defaultId: string,lifecycle: Lifecycle,initializer: Registries_Initializer): DefaultedRegistry;
static create(key: RegistryKey,lifecycle: Lifecycle,initializer: Registries_Initializer): Registry;
static bootstrap(): void;
static method_47485(initializer: Registries_Initializer,mutableRegistry: MutableRegistry): Object;
static createIntrusive(key: RegistryKey,defaultId: string,initializer: Registries_Initializer): DefaultedRegistry;
static createIntrusive(key: RegistryKey,defaultId: string,lifecycle: Lifecycle,initializer: Registries_Initializer): DefaultedRegistry;
static freezeRegistries(): void;
static method_47482(id: Identifier,initializer: Supplier): void;
static method_47484(registry2: Registry,registry: Registry): void;
static method_47490(registry: Registry): FrogVariant;
static method_47500(registry: Registry): PlacementModifierType;
static method_47504(registry: Registry): Feature;
static method_47505(registry: Registry): Carver;
static method_47493(registry: Registry): StructureProcessorType;
static method_47506(registry: Registry): BlockPredicateType;
static method_47503(registry: Registry): StructurePlacementType;
static method_47507(registry: Registry): HeightProviderType;
static method_47495(registry: Registry): TreeDecoratorType;
static method_47501(registry: Registry): StructureType;
static method_47508(registry: Registry): IntProviderType;
static method_47509(registry: Registry): FloatProviderType;
static method_47494(registry: Registry): FeatureSizeType;
static method_47498(registry: Registry): FoliagePlacerType;
static method_47502(registry: Registry): StructurePieceType;
static method_47497(registry: Registry): TrunkPlacerType;
static method_47496(registry: Registry): RootPlacerType;
static method_47499(registry: Registry): BlockStateProviderType;
static method_47492(registry: Registry): StructurePoolElementType;
static method_47452(registry: Registry): SensorType;
static method_47456(registry: Registry): StatType;
static method_47514(registry: Registry): LootFunctionType;
static method_47512(registry: Registry): LootNumberProviderType;
static method_47453(registry: Registry): MemoryModuleType;
static method_47454(registry: Registry): VillagerProfession;
static method_47450(registry: Registry): Activity;
static method_47460(registry: Registry): RecipeType;
static method_47461(registry: Registry): ScreenHandlerType;
static method_49927(registry: Registry): RuleBlockEntityModifierType;
static method_47458(registry: Registry): EntityAttribute;
static method_47510(registry: Registry): LootScoreProviderType;
static method_47455(registry: Registry): VillagerType;
static method_47515(registry: Registry): LootPoolEntryType;
static method_47457(registry: Registry): PositionSourceType;
static method_47459(registry: Registry): RecipeSerializer;
static method_47511(registry: Registry): LootNbtProviderType;
static method_47462(registry: Registry): PosRuleTestType;
static method_47513(registry: Registry): LootConditionType;
static method_47463(registry: Registry): RuleTestType;
static method_47451(registry: Registry): Schedule;
static method_47473(registry: Registry): StatusEffect;
static method_47469(registry: Registry): Item;
static method_47472(registry: Registry): Block;
static method_47466(registry: Registry): BlockEntityType;
static method_47468(registry: Registry): Potion;
static method_47465(registry: Registry): Identifier;
static method_47475(registry: Registry): SoundEvent;
static method_47471(registry: Registry): Enchantment;
static method_47474(registry: Registry): Fluid;
static method_47464(registry: Registry): ChunkStatus;
static method_47467(registry: Registry): ParticleType;
static method_47486(registry: Registry): GameEvent;
static method_47470(registry: Registry): EntityType;
static LOGGER: Logger;
static DEFAULT_ENTRIES: Map;
static ROOT_KEY: Identifier;
static ROOT: MutableRegistry;
static GAME_EVENT: DefaultedRegistry;
static SOUND_EVENT: Registry;
static FLUID: DefaultedRegistry;
static STATUS_EFFECT: Registry;
static BLOCK: DefaultedRegistry;
static ENCHANTMENT: Registry;
static ENTITY_TYPE: DefaultedRegistry;
static ITEM: DefaultedRegistry;
static POTION: DefaultedRegistry;
static PARTICLE_TYPE: Registry;
static BLOCK_ENTITY_TYPE: Registry;
static PAINTING_VARIANT: DefaultedRegistry;
static CUSTOM_STAT: Registry;
static CHUNK_STATUS: DefaultedRegistry;
static RULE_TEST: Registry;
static RULE_BLOCK_ENTITY_MODIFIER: Registry;
static POS_RULE_TEST: Registry;
static SCREEN_HANDLER: Registry;
static RECIPE_TYPE: Registry;
static RECIPE_SERIALIZER: Registry;
static ATTRIBUTE: Registry;
static POSITION_SOURCE_TYPE: Registry;
static COMMAND_ARGUMENT_TYPE: Registry;
static STAT_TYPE: Registry;
static VILLAGER_TYPE: DefaultedRegistry;
static VILLAGER_PROFESSION: DefaultedRegistry;
static POINT_OF_INTEREST_TYPE: Registry;
static MEMORY_MODULE_TYPE: DefaultedRegistry;
static SENSOR_TYPE: DefaultedRegistry;
static SCHEDULE: Registry;
static ACTIVITY: Registry;
static LOOT_POOL_ENTRY_TYPE: Registry;
static LOOT_FUNCTION_TYPE: Registry;
static LOOT_CONDITION_TYPE: Registry;
static LOOT_NUMBER_PROVIDER_TYPE: Registry;
static LOOT_NBT_PROVIDER_TYPE: Registry;
static LOOT_SCORE_PROVIDER_TYPE: Registry;
static FLOAT_PROVIDER_TYPE: Registry;
static INT_PROVIDER_TYPE: Registry;
static HEIGHT_PROVIDER_TYPE: Registry;
static BLOCK_PREDICATE_TYPE: Registry;
static CARVER: Registry;
static FEATURE: Registry;
static STRUCTURE_PLACEMENT: Registry;
static STRUCTURE_PIECE: Registry;
static STRUCTURE_TYPE: Registry;
static PLACEMENT_MODIFIER_TYPE: Registry;
static BLOCK_STATE_PROVIDER_TYPE: Registry;
static FOLIAGE_PLACER_TYPE: Registry;
static TRUNK_PLACER_TYPE: Registry;
static ROOT_PLACER_TYPE: Registry;
static TREE_DECORATOR_TYPE: Registry;
static FEATURE_SIZE_TYPE: Registry;
static BIOME_SOURCE: Registry;
static CHUNK_GENERATOR: Registry;
static MATERIAL_CONDITION: Registry;
static MATERIAL_RULE: Registry;
static DENSITY_FUNCTION_TYPE: Registry;
static STRUCTURE_PROCESSOR: Registry;
static STRUCTURE_POOL_ELEMENT: Registry;
static CAT_VARIANT: Registry;
static FROG_VARIANT: Registry;
static BANNER_PATTERN: Registry;
static INSTRUMENT: Registry;
static DECORATED_POT_PATTERN: Registry;
static ITEM_GROUP: Registry;
static REGISTRIES: Registry;
}

//net.minecraft.world.biome.BiomeKeys
class BiomeKeys extends JObject{
}
class Static_BiomeKeys {
static register(name: string): RegistryKey;
static THE_VOID: RegistryKey;
static PLAINS: RegistryKey;
static SUNFLOWER_PLAINS: RegistryKey;
static SNOWY_PLAINS: RegistryKey;
static ICE_SPIKES: RegistryKey;
static DESERT: RegistryKey;
static SWAMP: RegistryKey;
static MANGROVE_SWAMP: RegistryKey;
static FOREST: RegistryKey;
static FLOWER_FOREST: RegistryKey;
static BIRCH_FOREST: RegistryKey;
static DARK_FOREST: RegistryKey;
static OLD_GROWTH_BIRCH_FOREST: RegistryKey;
static OLD_GROWTH_PINE_TAIGA: RegistryKey;
static OLD_GROWTH_SPRUCE_TAIGA: RegistryKey;
static TAIGA: RegistryKey;
static SNOWY_TAIGA: RegistryKey;
static SAVANNA: RegistryKey;
static SAVANNA_PLATEAU: RegistryKey;
static WINDSWEPT_HILLS: RegistryKey;
static WINDSWEPT_GRAVELLY_HILLS: RegistryKey;
static WINDSWEPT_FOREST: RegistryKey;
static WINDSWEPT_SAVANNA: RegistryKey;
static JUNGLE: RegistryKey;
static SPARSE_JUNGLE: RegistryKey;
static BAMBOO_JUNGLE: RegistryKey;
static BADLANDS: RegistryKey;
static ERODED_BADLANDS: RegistryKey;
static WOODED_BADLANDS: RegistryKey;
static MEADOW: RegistryKey;
static CHERRY_GROVE: RegistryKey;
static GROVE: RegistryKey;
static SNOWY_SLOPES: RegistryKey;
static FROZEN_PEAKS: RegistryKey;
static JAGGED_PEAKS: RegistryKey;
static STONY_PEAKS: RegistryKey;
static RIVER: RegistryKey;
static FROZEN_RIVER: RegistryKey;
static BEACH: RegistryKey;
static SNOWY_BEACH: RegistryKey;
static STONY_SHORE: RegistryKey;
static WARM_OCEAN: RegistryKey;
static LUKEWARM_OCEAN: RegistryKey;
static DEEP_LUKEWARM_OCEAN: RegistryKey;
static OCEAN: RegistryKey;
static DEEP_OCEAN: RegistryKey;
static COLD_OCEAN: RegistryKey;
static DEEP_COLD_OCEAN: RegistryKey;
static FROZEN_OCEAN: RegistryKey;
static DEEP_FROZEN_OCEAN: RegistryKey;
static MUSHROOM_FIELDS: RegistryKey;
static DRIPSTONE_CAVES: RegistryKey;
static LUSH_CAVES: RegistryKey;
static DEEP_DARK: RegistryKey;
static NETHER_WASTES: RegistryKey;
static WARPED_FOREST: RegistryKey;
static CRIMSON_FOREST: RegistryKey;
static SOUL_SAND_VALLEY: RegistryKey;
static BASALT_DELTAS: RegistryKey;
static THE_END: RegistryKey;
static END_HIGHLANDS: RegistryKey;
static END_MIDLANDS: RegistryKey;
static SMALL_END_ISLANDS: RegistryKey;
static END_BARRENS: RegistryKey;
}

//net.minecraft.util.math.Box
class Box extends JObject{
 equals(o: Object): boolean;
 toString(): string;
 hashCode(): number;
 offset(blockPos: BlockPos): Box;
 offset(vec: Vec3d): Box;
 offset(x: number,y: number,z: number): Box;
 contains(pos: Vec3d): boolean;
 contains(x: number,y: number,z: number): boolean;
 isNaN(): boolean;
 expand(x: number,y: number,z: number): Box;
 expand(value: number): Box;
 getMin(axis: Direction_Axis): number;
 getMax(axis: Direction_Axis): number;
 union(box: Box): Box;
 getXLength(): number;
 getZLength(): number;
 getCenter(): Vec3d;
 getAverageSideLength(): number;
 intersects(pos1: Vec3d,pos2: Vec3d): boolean;
 intersects(minX: number,minY: number,minZ: number,maxX: number,maxY: number,maxZ: number): boolean;
 intersects(box: Box): boolean;
 contract(value: number): Box;
 contract(x: number,y: number,z: number): Box;
 stretch(x: number,y: number,z: number): Box;
 stretch(scale: Vec3d): Box;
 raycast(min: Vec3d,max: Vec3d): Optional;
 squaredMagnitude(pos: Vec3d): number;
 intersection(box: Box): Box;
 shrink(x: number,y: number,z: number): Box;
 withMinY(minY: number): Box;
 withMinZ(minZ: number): Box;
 withMaxX(maxX: number): Box;
 withMaxZ(maxZ: number): Box;
 withMaxY(maxY: number): Box;
 withMinX(minX: number): Box;
 getYLength(): number;
 minX: number;
 minY: number;
 minZ: number;
 maxX: number;
 maxY: number;
 maxZ: number;
}
class Static_Box {
static of(center: Vec3d,dx: number,dy: number,dz: number): Box;
static from(pos: Vec3d): Box;
static from(mutable: BlockBox): Box;
static raycast(boxes: Iterable,from: Vec3d,to: Vec3d,pos: BlockPos): BlockHitResult;
static traceCollisionSide(box: Box,intersectingVector: Vec3d,traceDistanceResult: number[],approachDirection: Direction,deltaX: number,deltaY: number,deltaZ: number): Direction;
static traceCollisionSide(traceDistanceResult: number[],approachDirection: Direction,deltaX: number,deltaY: number,deltaZ: number,begin: number,minX: number,maxX: number,minZ: number,maxZ: number,resultDirection: Direction,startX: number,startY: number,startZ: number): Direction;
static EPSILON: number;
}

//net.minecraft.client.font.FontLoader
interface FontLoader extends JObject{
 getType(): FontType;
 build(): Either;
}
class Static_FontLoader {
static method_51757(fontType: FontType): Codec;
static CODEC: Codec;
}

//net.minecraft.world.gen.chunk.AquiferSampler$FluidLevelSampler
interface AquiferSampler_FluidLevelSampler extends JObject{
 getFluidLevel(x: number,y: number,z: number): AquiferSampler_FluidLevel;
}

//net.minecraft.resource.ProfiledResourceReload$Summary
class ProfiledResourceReload_Summary extends JObject{
}

//net.minecraft.client.render.debug.BeeDebugRenderer
class BeeDebugRenderer extends JObject, DebugRenderer_Renderer{
 clear(): void;
 render(matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,cameraX: number,cameraY: number,cameraZ: number): void;
 addHive(hive: BeeDebugRenderer_Hive): void;
 addBee(bee: BeeDebugRenderer_Bee): void;
 removeBee(id: number): void;
}
class Static_BeeDebugRenderer {
static toString(bees: Collection): string;
static drawString(matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,pos: Position,line: number,string: string,color: number,size: number): void;
static drawString(matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,string: string,pos: BlockPos,line: number,color: number): void;
static drawString(matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,string: string,hive: BeeDebugRenderer_Hive,line: number,color: number): void;
static method_35795(i: number,bee: BeeDebugRenderer_Bee): boolean;
static drawHive(matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,pos: BlockPos): void;
static method_23818(map: Map,bee: BeeDebugRenderer_Bee): void;
static method_23817(matrixStack: MatrixStack,vertexConsumerProvider: VertexConsumerProvider,entry: Map_Entry): void;
static method_24082(map: Map,bee: BeeDebugRenderer_Bee): void;
static method_23803(l: long,hive: Map_Entry): boolean;
static method_24083(map: Map,bee: BeeDebugRenderer_Bee,pos: BlockPos): void;
static method_30110(flower: BlockPos): Set;
static method_30109(hive: BlockPos): List;
static method_23810(blockPos: BlockPos,bee: BeeDebugRenderer_Bee): boolean;
static method_30111(pos2: BlockPos): Set;
static field_32841: boolean;
static field_32842: boolean;
static field_32843: boolean;
static field_32844: boolean;
static field_32845: boolean;
static field_32846: boolean;
static field_32847: boolean;
static field_32848: boolean;
static field_32849: boolean;
static field_32850: boolean;
static field_32851: boolean;
static field_32852: boolean;
static field_32853: boolean;
static field_32854: boolean;
static HIVE_RANGE: number;
static BEE_RANGE: number;
static TARGET_ENTITY_RANGE: number;
static field_32858: number;
static DEFAULT_DRAWN_STRING_SIZE: number;
static WHITE: number;
static YELLOW: number;
static ORANGE: number;
static GREEN: number;
static GRAY: number;
static PINK: number;
static RED: number;
}

//net.minecraft.client.font.TrueTypeFont
class TrueTypeFont extends JObject, Font{
 close(): void;
 getGlyph(codePoint: number): Glyph;
 getProvidedGlyphs(): IntSet;
}

//net.minecraft.block.InventoryProvider
interface InventoryProvider extends JObject{
 getInventory(state: BlockState,world: WorldAccess,pos: BlockPos): SidedInventory;
}

//net.minecraft.client.option.KeyBinding
class KeyBinding extends JObject, Comparable{
 equals(other: KeyBinding): boolean;
 compareTo(keyBinding: KeyBinding): number;
 compareTo(other: Object): number;
 isDefault(): boolean;
 matchesKey(keyCode: number,scanCode: number): boolean;
 getCategory(): string;
 setBoundKey(boundKey: InputUtil_Key): void;
 getBoundKeyTranslationKey(): string;
 isPressed(): boolean;
 getBoundKeyLocalizedText(): Text;
 setPressed(pressed: boolean): void;
 isUnbound(): boolean;
 wasPressed(): boolean;
 matchesMouse(code: number): boolean;
 getDefaultKey(): InputUtil_Key;
 getTranslationKey(): string;
}
class Static_KeyBinding {
static getLocalizedName(id: string): Supplier;
static updateKeysByCode(): void;
static setKeyPressed(key: InputUtil_Key,pressed: boolean): void;
static onKeyPressed(key: InputUtil_Key): void;
static unpressAll(): void;
static untoggleStickyKeys(): void;
static method_1418(map: HashMap): void;
static method_27465(string: string): Text;
static updatePressedStates(): void;
static KEYS_BY_ID: Map;
static KEY_TO_BINDINGS: Map;
static KEY_CATEGORIES: Set;
static MOVEMENT_CATEGORY: string;
static MISC_CATEGORY: string;
static MULTIPLAYER_CATEGORY: string;
static GAMEPLAY_CATEGORY: string;
static INVENTORY_CATEGORY: string;
static UI_CATEGORY: string;
static CREATIVE_CATEGORY: string;
static CATEGORY_ORDER_MAP: Map;
}

//net.minecraft.predicate.entity.SlimePredicate
class SlimePredicate extends JObject, TypeSpecificPredicate{
 test(entity: Entity,world: ServerWorld,pos: Vec3d): boolean;
 getDeserializer(): TypeSpecificPredicate_Deserializer;
 typeSpecificToJson(): JsonObject;
}
class Static_SlimePredicate {
static of(size: NumberRange_IntRange): SlimePredicate;
static fromJson(json: JsonObject): SlimePredicate;
}

//net.minecraft.world.gen.surfacebuilder.MaterialRules$MaterialCondition
interface MaterialRules_MaterialCondition extends JObject, Function{
 codec(): CodecHolder;
}
class Static_MaterialRules_MaterialCondition {
static registerAndGetDefault(registry: Registry): Codec;
static method_42378(materialCondition: MaterialRules_MaterialCondition): Codec;
static CODEC: Codec;
}

//net.minecraft.world.gen.chunk.placement.StructurePlacement
class StructurePlacement extends JObject{
 getType(): StructurePlacementType;
 shouldGenerate(calculator: StructurePlacementCalculator,chunkX: number,chunkZ: number): boolean;
 getLocatePos(chunkPos: ChunkPos): BlockPos;
}
class Static_StructurePlacement {
static buildCodec(instance: RecordCodecBuilder_Instance): Products_P5;
static defaultShouldGenerate(seed: long,salt: number,chunkX: number,chunkZ: number,frequency: number): boolean;
static legacyType3ShouldGenerate(seed: long,salt: number,chunkX: number,chunkZ: number,frequency: number): boolean;
static legacyType2ShouldGenerate(seed: long,salt: number,chunkX: number,chunkZ: number,frequency: number): boolean;
static legacyType1ShouldGenerate(seed: long,salt: number,chunkX: number,chunkZ: number,frequency: number): boolean;
static TYPE_CODEC: Codec;
static ARBITRARY_SALT: number;
}

//net.minecraft.loot.function.ApplyBonusLootFunction$BinomialWithBonusCount
class ApplyBonusLootFunction_BinomialWithBonusCount extends JObject, ApplyBonusLootFunction_Formula{
 getValue(random: Random,initialCount: number,enchantmentLevel: number): number;
 getId(): Identifier;
 toJson(json: JsonObject,context: JsonSerializationContext): void;
}
class Static_ApplyBonusLootFunction_BinomialWithBonusCount {
static fromJson(json: JsonObject,context: JsonDeserializationContext): ApplyBonusLootFunction_Formula;
static ID: Identifier;
}

//net.minecraft.client.render.model.json.WeightedUnbakedModel$Deserializer
class WeightedUnbakedModel_Deserializer extends JObject, JsonDeserializer{
 deserialize(jsonElement: JsonElement,type: Type,jsonDeserializationContext: JsonDeserializationContext): WeightedUnbakedModel;
 deserialize(functionJson: JsonElement,unused: Type,context: JsonDeserializationContext): Object;
}

//net.minecraft.text.KeybindTextContent
class KeybindTextContent extends JObject, TextContent{
 equals(o: Object): boolean;
 toString(): string;
 hashCode(): number;
 getKey(): string;
 visit(visitor: StringVisitable_StyledVisitor,style: Style): Optional;
 visit(visitor: StringVisitable_Visitor): Optional;
}

//net.minecraft.command.argument.Vec2ArgumentType
class Vec2ArgumentType extends JObject, ArgumentType{
 parse(stringReader: StringReader): PosArgument;
 parse(reader: StringReader): Object;
 getExamples(): Collection;
 listSuggestions(context: CommandContext,builder: SuggestionsBuilder): CompletableFuture;
}
class Static_Vec2ArgumentType {
static vec2(centerIntegers: boolean): Vec2ArgumentType;
static vec2(): Vec2ArgumentType;
static getVec2(context: CommandContext,name: string): Vec2f;
static EXAMPLES: Collection;
static INCOMPLETE_EXCEPTION: SimpleCommandExceptionType;
}

//net.minecraft.network.listener.TickablePacketListener
interface TickablePacketListener extends JObject, PacketListener{
 tick(): void;
}

//net.minecraft.server.command.WardenSpawnTrackerCommand
class WardenSpawnTrackerCommand extends JObject{
}
class Static_WardenSpawnTrackerCommand {
static register(dispatcher: CommandDispatcher): void;
static setWarningLevel(source: ServerCommandSource,players: Collection,warningCount: number): number;
static method_42105(context: CommandContext): number;
static method_42101(context: CommandContext): number;
static method_45156(i: number,warningManager: SculkShriekerWarningManager): void;
static method_42102(source: ServerCommandSource): boolean;
static method_52140(collection: Collection): Text;
static method_52137(collection: Collection): Text;
static method_52139(collection: Collection): Text;
static clearTracker(source: ServerCommandSource,players: Collection): number;
static method_52138(collection: Collection): Text;
}

//net.minecraft.loot.LootManager$AndFunction
class LootManager_AndFunction extends JObject, LootFunction{
 apply(stack: Object,context: Object): Object;
 apply(itemStack: ItemStack,lootContext: LootContext): ItemStack;
 validate(reporter: LootTableReporter): void;
 getType(): LootFunctionType;
}

//net.minecraft.nbt.scanner.SimpleNbtScanner$1


//net.minecraft.advancement.criterion.CriterionProgress
class CriterionProgress extends JObject{
 toString(): string;
 reset(): void;
 toPacket(buf: PacketByteBuf): void;
 toJson(): JsonElement;
 isObtained(): boolean;
 obtain(): void;
 getObtainedDate(): Date;
}
class Static_CriterionProgress {
static obtainedAt(datetime: string): CriterionProgress;
static fromPacket(buf: PacketByteBuf): CriterionProgress;
static FORMAT: SimpleDateFormat;
}

//net.minecraft.client.render.BackgroundRenderer$BlindnessFogModifier
class BackgroundRenderer_BlindnessFogModifier extends JObject, BackgroundRenderer_StatusEffectFogModifier{
 getStatusEffect(): StatusEffect;
 applyStartEndModifier(fogData: BackgroundRenderer_FogData,entity: LivingEntity,effect: StatusEffectInstance,viewDistance: number,tickDelta: number): void;
}

//net.minecraft.client.gui.tooltip.Tooltip
class Tooltip extends JObject, Narratable{
 getLines(client: MinecraftClient): List;
 appendNarrations(builder: NarrationMessageBuilder): void;
}
class Static_Tooltip {
static of(content: Text): Tooltip;
static of(content: Text,narration: Text): Tooltip;
static wrapLines(client: MinecraftClient,text: Text): List;
static ROW_LENGTH: number;
}

//net.minecraft.client.render.entity.EntityRendererFactory
interface EntityRendererFactory extends JObject{
 create(ctx: EntityRendererFactory_Context): EntityRenderer;
}

//net.minecraft.entity.ai.brain.Brain$Profile
class Brain_Profile extends JObject{
 deserialize(data: Dynamic): Brain;
}

//net.minecraft.unused.packageinfo.PackageInfo7702
interface PackageInfo7702 extends JObject{
}

//net.minecraft.client.gui.screen.pack.PackScreen$DirectoryWatcher
class PackScreen_DirectoryWatcher extends JObject, AutoCloseable{
 close(): void;
 pollForChange(): boolean;
}
class Static_PackScreen_DirectoryWatcher {
static create(path: Path): PackScreen_DirectoryWatcher;
}

//net.minecraft.entity.ai.brain.task.TaskTriggerer
class TaskTriggerer extends JObject, App{
}
class Static_TaskTriggerer {
static cast(app: App): TaskTriggerer;
static of(fun: TaskTriggerer_TaskFunction): TaskTriggerer;
static getFunction(app: App): TaskTriggerer_TaskFunction;
static newContext(): TaskTriggerer_TaskContext;
static predicate(predicate: Predicate): SingleTickTask;
static predicate(predicate: BiPredicate): SingleTickTask;
static task(creator: Function): SingleTickTask;
static runIf(predicate: Predicate,task: SingleTickTask): SingleTickTask;
static runIf(predicate: TaskRunnable,task: TaskRunnable): SingleTickTask;
static method_47218(taskRunnable: TaskRunnable,taskRunnable2: TaskRunnable,context: TaskTriggerer_TaskContext): App;
static method_47228(predicate: Predicate,context: TaskTriggerer_TaskContext): App;
static method_47223(biPredicate: BiPredicate,context: TaskTriggerer_TaskContext): App;
static method_47219(taskRunnable: TaskRunnable,unit: Unit): TaskRunnable;
static method_47226(predicate: Predicate,world: ServerWorld,entity: LivingEntity,time: long): boolean;
static method_47222(biPredicate: BiPredicate,world: ServerWorld,entity: LivingEntity,time: long): boolean;
}

//net.minecraft.inventory.StackReference$2


//net.minecraft.client.gui.widget.IconButtonWidget$Builder
class IconButtonWidget_Builder extends JObject{
 build(): IconButtonWidget;
 uv(u: number,v: number): IconButtonWidget_Builder;
 xyOffset(xOffset: number,yOffset: number): IconButtonWidget_Builder;
 textureSize(textureWidth: number,textureHeight: number): IconButtonWidget_Builder;
 iconSize(iconWidth: number,iconHeight: number): IconButtonWidget_Builder;
 hoveredVOffset(hoveredVOffset: number): IconButtonWidget_Builder;
}

//net.minecraft.inventory.StackReference$1


//net.minecraft.nbt.StringNbtReader
class StringNbtReader extends JObject{
 parseElement(): NbtElement;
 parseCompound(): NbtCompound;
}
class Static_StringNbtReader {
static parse(string: string): NbtCompound;
static method_10724(receivedType: Object,expectedType: Object): Message;
static method_10730(receivedType: Object,expectedType: Object): Message;
static method_10720(type: Object): Message;
static TRAILING: SimpleCommandExceptionType;
static EXPECTED_KEY: SimpleCommandExceptionType;
static EXPECTED_VALUE: SimpleCommandExceptionType;
static LIST_MIXED: Dynamic2CommandExceptionType;
static ARRAY_MIXED: Dynamic2CommandExceptionType;
static ARRAY_INVALID: DynamicCommandExceptionType;
static COMMA: char;
static COLON: char;
static SQUARE_OPEN_BRACKET: char;
static SQUARE_CLOSE_BRACKET: char;
static RIGHT_CURLY_BRACKET: char;
static LEFT_CURLY_BRACKET: char;
static DOUBLE_PATTERN_IMPLICIT: Pattern;
static DOUBLE_PATTERN: Pattern;
static FLOAT_PATTERN: Pattern;
static BYTE_PATTERN: Pattern;
static LONG_PATTERN: Pattern;
static SHORT_PATTERN: Pattern;
static INT_PATTERN: Pattern;
}

//net.minecraft.entity.ai.brain.task.StartRaidTask
class StartRaidTask extends JObject{
}
class Static_StartRaidTask {
static create(): Task;
static method_47088(context: TaskTriggerer_TaskContext): App;
static method_47087(world: ServerWorld,entity: LivingEntity,time: long): boolean;
}

//net.minecraft.entity.attribute.EntityAttributeInstance
class EntityAttributeInstance extends JObject{
 getModifiers(operation: EntityAttributeModifier_Operation): Set;
 getModifiers(): Set;
 getValue(): number;
 getAttribute(): EntityAttribute;
 addPersistentModifier(modifier: EntityAttributeModifier): void;
 setFrom(other: EntityAttributeInstance): void;
 getBaseValue(): number;
 setBaseValue(baseValue: number): void;
 toNbt(): NbtCompound;
 clearModifiers(): void;
 addTemporaryModifier(modifier: EntityAttributeModifier): void;
 readNbt(nbt: NbtCompound): void;
 hasModifier(modifier: EntityAttributeModifier): boolean;
 getModifier(uuid: UUID): EntityAttributeModifier;
 removeModifier(modifier: EntityAttributeModifier): void;
 removeModifier(uuid: UUID): void;
 tryRemoveModifier(uuid: UUID): boolean;
}
class Static_EntityAttributeInstance {
static method_26836(operationx: EntityAttributeModifier_Operation): Set;
}

//net.minecraft.inventory.StackReference$3


//net.minecraft.client.render.OverlayTexture
class OverlayTexture extends JObject, AutoCloseable{
 close(): void;
 teardownOverlayColor(): void;
 setupOverlayColor(): void;
}
class Static_OverlayTexture {
static getU(whiteOverlayProgress: number): number;
static getV(hurt: boolean): number;
static packUv(u: number,v: number): number;
static getUv(whiteOverlayProgress: number,hurt: boolean): number;
static field_32956: number;
static field_32953: number;
static field_32954: number;
static field_32955: number;
static DEFAULT_UV: number;
}

//net.minecraft.command.argument.TestClassArgumentType
class TestClassArgumentType extends JObject, ArgumentType{
 parse(stringReader: StringReader): string;
 parse(reader: StringReader): Object;
 getExamples(): Collection;
 listSuggestions(context: CommandContext,builder: SuggestionsBuilder): CompletableFuture;
}
class Static_TestClassArgumentType {
static testClass(): TestClassArgumentType;
static getTestClass(context: CommandContext,name: string): string;
static EXAMPLES: Collection;
}

//net.minecraft.network.packet.s2c.play.WorldTimeUpdateS2CPacket
class WorldTimeUpdateS2CPacket extends JObject, Packet{
 apply(clientPlayPacketListener: ClientPlayPacketListener): void;
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
 getTime(): long;
 getTimeOfDay(): long;
}

//net.minecraft.registry.RegistryBuilder$BootstrapFunction
interface RegistryBuilder_BootstrapFunction extends JObject{
 run(registerable: Registerable): void;
}

//net.minecraft.server.integrated.IntegratedServerLoader
class IntegratedServerLoader extends JObject{
 start(parent: Screen,levelName: string): void;
 start(session: LevelStorage_Session,dataPackContents: DataPackContents,dynamicRegistryManager: CombinedDynamicRegistries,saveProperties: SaveProperties): void;
 createAndStart(levelName: string,levelInfo: LevelInfo,dynamicRegistryManager: GeneratorOptions,dimensionsRegistrySupplier: Function): void;
 createSaveLoader(session: LevelStorage_Session,safeMode: boolean): SaveLoader;
 loadForRecreation(session: LevelStorage_Session): Pair;
}
class Static_IntegratedServerLoader {
static close(session: LevelStorage_Session,levelName: string): void;
static method_45698(fun: Function,levelInfo: LevelInfo,generatorOptions: GeneratorOptions,context: SaveLoading_LoadContextSupplierContext): SaveLoading_LoadContext;
static method_45697(session: LevelStorage_Session,context: SaveLoading_LoadContextSupplierContext): SaveLoading_LoadContext;
static method_45699(session: LevelStorage_Session,context: SaveLoading_LoadContextSupplierContext): SaveLoading_LoadContext;
static method_45695(resourceManager: LifecycledResourceManager,dataPackContents: DataPackContents,combinedRegistryManager: CombinedDynamicRegistries,currentSettings: IntegratedServerLoader_CurrentSettings): Pair;
static method_43328(void_: Void): Boolean;
static method_41893(runnable: Runnable,minecraftClient: MinecraftClient,createWorldScreen: CreateWorldScreen,confirmed: boolean): void;
static tryLoad(client: MinecraftClient,parent: CreateWorldScreen,lifecycle: Lifecycle,loader: Runnable,bypassWarnings: boolean): void;
static LOGGER: Logger;
}

//net.minecraft.network.packet.c2s.play.BoatPaddleStateC2SPacket
class BoatPaddleStateC2SPacket extends JObject, Packet{
 apply(serverPlayPacketListener: ServerPlayPacketListener): void;
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
 isRightPaddling(): boolean;
 isLeftPaddling(): boolean;
}

//net.minecraft.network.packet.c2s.play.UpdateSignC2SPacket
class UpdateSignC2SPacket extends JObject, Packet{
 apply(serverPlayPacketListener: ServerPlayPacketListener): void;
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
 getText(): String[];
 isFront(): boolean;
 getPos(): BlockPos;
}
class Static_UpdateSignC2SPacket {
static MAX_LINE_LENGTH: number;
}

//net.minecraft.screen.slot.Slot
class Slot extends JObject{
 getIndex(): number;
 getStack(): ItemStack;
 isEnabled(): boolean;
 setStack(stack: ItemStack): void;
 takeStackRange(min: number,max: number,player: PlayerEntity): ItemStack;
 setStackNoCallbacks(stack: ItemStack): void;
 getBackgroundSprite(): Pair;
 getMaxItemCount(): number;
 getMaxItemCount(stack: ItemStack): number;
 canInsert(stack: ItemStack): boolean;
 hasStack(): boolean;
 markDirty(): void;
 onTakeItem(player: PlayerEntity,stack: ItemStack): void;
 canTakeItems(playerEntity: PlayerEntity): boolean;
 tryTakeStackRange(min: number,max: number,player: PlayerEntity): Optional;
 insertStack(stack: ItemStack,count: number): ItemStack;
 insertStack(stack: ItemStack): ItemStack;
 takeStack(amount: number): ItemStack;
 canBeHighlighted(): boolean;
 onQuickTransfer(newItem: ItemStack,original: ItemStack): void;
 canTakePartial(player: PlayerEntity): boolean;
 inventory: Inventory;
 id: number;
 x: number;
 y: number;
}

//net.minecraft.util.annotation.MethodsReturnNonnullByDefault
interface MethodsReturnNonnullByDefault extends JObject, Annotation{
}

//net.minecraft.server.command.ListCommand
class ListCommand extends JObject{
}
class Static_ListCommand {
static register(dispatcher: CommandDispatcher): void;
static execute(source: ServerCommandSource,nameProvider: Function): number;
static executeNames(source: ServerCommandSource): number;
static method_30310(player: ServerPlayerEntity): Text;
static method_52006(list: List,playerManager: PlayerManager,text: Text): Text;
static executeUuids(source: ServerCommandSource): number;
static method_13438(context: CommandContext): number;
static method_13433(context: CommandContext): number;
}

//net.minecraft.unused.packageinfo.PackageInfo5989
interface PackageInfo5989 extends JObject{
}

//net.minecraft.client.realms.util.PeriodicRunnerFactory$ResultListenableRunner
class PeriodicRunnerFactory_ResultListenableRunner extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo5988
interface PackageInfo5988 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo5983
interface PackageInfo5983 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo5982
interface PackageInfo5982 extends JObject{
}

//net.minecraft.predicate.entity.EntityPredicate$Builder
class EntityPredicate_Builder extends JObject{
 type(type: EntityTypePredicate): EntityPredicate_Builder;
 type(tag: TagKey): EntityPredicate_Builder;
 type(type: EntityType): EntityPredicate_Builder;
 flags(flags: EntityFlagsPredicate): EntityPredicate_Builder;
 location(location: LocationPredicate): EntityPredicate_Builder;
 distance(distance: DistancePredicate): EntityPredicate_Builder;
 build(): EntityPredicate;
 team(team: string): EntityPredicate_Builder;
 steppingOn(location: LocationPredicate): EntityPredicate_Builder;
 targetedEntity(targetedEntity: EntityPredicate): EntityPredicate_Builder;
 effects(effects: EntityEffectPredicate): EntityPredicate_Builder;
 equipment(equipment: EntityEquipmentPredicate): EntityPredicate_Builder;
 nbt(nbt: NbtPredicate): EntityPredicate_Builder;
 typeSpecific(typeSpecific: TypeSpecificPredicate): EntityPredicate_Builder;
 vehicle(vehicle: EntityPredicate): EntityPredicate_Builder;
 passenger(passenger: EntityPredicate): EntityPredicate_Builder;
}
class Static_EntityPredicate_Builder {
static create(): EntityPredicate_Builder;
}

//net.minecraft.client.particle.SpellParticle$InstantFactory
class SpellParticle_InstantFactory extends JObject, ParticleFactory{
 createParticle(defaultParticleType: DefaultParticleType,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
 createParticle(particleEffect: ParticleEffect,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
}

//net.minecraft.unused.packageinfo.PackageInfo5987
interface PackageInfo5987 extends JObject{
}

//net.minecraft.client.particle.SuspendParticle$Factory
class SuspendParticle_Factory extends JObject, ParticleFactory{
 createParticle(defaultParticleType: DefaultParticleType,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
 createParticle(particleEffect: ParticleEffect,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
}

//net.minecraft.unused.packageinfo.PackageInfo5986
interface PackageInfo5986 extends JObject{
}

//net.minecraft.client.util.ProfileKeys
interface ProfileKeys extends JObject{
 isExpired(): boolean;
 fetchKeyPair(): CompletableFuture;
}
class Static_ProfileKeys {
static create(userApiService: UserApiService,session: Session,root: Path): ProfileKeys;
static MISSING: ProfileKeys;
}

//net.minecraft.unused.packageinfo.PackageInfo5985
interface PackageInfo5985 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo5984
interface PackageInfo5984 extends JObject{
}

//net.minecraft.block.HopperBlock$1


//net.minecraft.nbt.NbtInt$Cache
class NbtInt_Cache extends JObject{
}
class Static_NbtInt_Cache {
static MAX: number;
static MIN: number;
static VALUES: NbtInt[];
}

//net.minecraft.server.MinecraftServer$DebugStart$1


//net.minecraft.unused.packageinfo.PackageInfo5990
interface PackageInfo5990 extends JObject{
}

//net.minecraft.client.particle.RainSplashParticle$Factory
class RainSplashParticle_Factory extends JObject, ParticleFactory{
 createParticle(defaultParticleType: DefaultParticleType,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
 createParticle(particleEffect: ParticleEffect,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
}

//net.minecraft.network.packet.s2c.play.EntityS2CPacket
class EntityS2CPacket extends JObject, Packet{
 toString(): string;
 apply(listener: PacketListener): void;
 apply(clientPlayPacketListener: ClientPlayPacketListener): void;
 getEntity(world: World): Entity;
 getDeltaY(): short;
 isPositionChanged(): boolean;
 getDeltaX(): short;
 getDeltaZ(): short;
 hasRotation(): boolean;
 isOnGround(): boolean;
 getPitch(): byte;
 getYaw(): byte;
}

//net.minecraft.network.message.SignedCommandArguments$1


//net.minecraft.client.render.chunk.RenderedChunk
class RenderedChunk extends JObject{
 getBlockEntity(pos: BlockPos): BlockEntity;
 getBlockState(pos: BlockPos): BlockState;
}

//net.minecraft.entity.ai.brain.task.GoToIfNearbyTask
class GoToIfNearbyTask extends JObject{
}
class Static_GoToIfNearbyTask {
static create(posModule: MemoryModuleType,walkSpeed: number,maxDistance: number): SingleTickTask;
static method_47154(memoryModuleType: MemoryModuleType,i: number,mutableLong: MutableLong,f: number,context: TaskTriggerer_TaskContext): App;
static method_47152(taskContext: TaskTriggerer_TaskContext,memoryQueryResult: MemoryQueryResult,i: number,mutableLong: MutableLong,memoryQueryResult2: MemoryQueryResult,f: number,world: ServerWorld,entity: PathAwareEntity,time: long): boolean;
static method_47151(taskContext: TaskTriggerer_TaskContext,i: number,mutableLong: MutableLong,f: number,walkTarget: MemoryQueryResult,pos: MemoryQueryResult): TaskRunnable;
static method_47150(f: number,targetPos: Vec3d): WalkTarget;
static UPDATE_INTERVAL: number;
static HORIZONTAL_RANGE: number;
static VERTICAL_RANGE: number;
}

//net.minecraft.command.argument.OperationArgumentType
class OperationArgumentType extends JObject, ArgumentType{
 parse(reader: StringReader): Object;
 parse(stringReader: StringReader): OperationArgumentType_Operation;
 getExamples(): Collection;
 listSuggestions(context: CommandContext,builder: SuggestionsBuilder): CompletableFuture;
}
class Static_OperationArgumentType {
static operation(): OperationArgumentType;
static getOperation(context: CommandContext,name: string): OperationArgumentType_Operation;
static getOperator(operator: string): OperationArgumentType_Operation;
static method_9410(a: ScoreboardPlayerScore,b: ScoreboardPlayerScore): void;
static getIntOperator(operator: string): OperationArgumentType_IntOperator;
static method_9406(a: number,b: number): number;
static method_9415(a: number,b: number): number;
static method_9414(a: number,b: number): number;
static method_9405(a: number,b: number): number;
static method_9411(a: number,b: number): number;
static method_9408(a: number,b: number): number;
static EXAMPLES: Collection;
static INVALID_OPERATION: SimpleCommandExceptionType;
static DIVISION_ZERO_EXCEPTION: SimpleCommandExceptionType;
}

//net.minecraft.command.argument.RegistryEntryArgumentType
class RegistryEntryArgumentType extends JObject, ArgumentType{
 parse(stringReader: StringReader): RegistryEntry_Reference;
 parse(reader: StringReader): Object;
 getExamples(): Collection;
 listSuggestions(context: CommandContext,builder: SuggestionsBuilder): CompletableFuture;
}
class Static_RegistryEntryArgumentType {
static getEntityType(context: CommandContext,name: string): RegistryEntry_Reference;
static getConfiguredFeature(context: CommandContext,name: string): RegistryEntry_Reference;
static getStatusEffect(context: CommandContext,name: string): RegistryEntry_Reference;
static getRegistryEntry(context: CommandContext,name: string,registryRef: RegistryKey): RegistryEntry_Reference;
static registryEntry(registryAccess: CommandRegistryAccess,registryRef: RegistryKey): RegistryEntryArgumentType;
static getStructure(context: CommandContext,name: string): RegistryEntry_Reference;
static method_45606(element: Object,type: Object,expectedType: Object): Message;
static getEnchantment(context: CommandContext,name: string): RegistryEntry_Reference;
static method_45604(id: Object): Message;
static method_45605(element: Object,type: Object): Message;
static getEntityAttribute(context: CommandContext,name: string): RegistryEntry_Reference;
static getSummonableEntityType(context: CommandContext,name: string): RegistryEntry_Reference;
static EXAMPLES: Collection;
static NOT_SUMMONABLE_EXCEPTION: DynamicCommandExceptionType;
static NOT_FOUND_EXCEPTION: Dynamic2CommandExceptionType;
static INVALID_TYPE_EXCEPTION: Dynamic3CommandExceptionType;
}

//net.minecraft.entity.Shearable
interface Shearable extends JObject{
 isShearable(): boolean;
 sheared(shearedSoundCategory: SoundCategory): void;
}

//net.minecraft.entity.effect.StatusEffectInstance$FactorCalculationData
class StatusEffectInstance_FactorCalculationData extends JObject{
 update(effect: StatusEffectInstance): void;
 lerp(entity: LivingEntity,tickDelta: number): number;
}
class Static_StatusEffectInstance_FactorCalculationData {
static method_42140(data: StatusEffectInstance_FactorCalculationData): Float;
static method_42139(data: StatusEffectInstance_FactorCalculationData): Integer;
static method_42137(instance: RecordCodecBuilder_Instance): App;
static method_42142(data: StatusEffectInstance_FactorCalculationData): Integer;
static method_42141(data: StatusEffectInstance_FactorCalculationData): Float;
static method_43685(data: StatusEffectInstance_FactorCalculationData): Float;
static method_42135(data: StatusEffectInstance_FactorCalculationData): Boolean;
static method_42138(data: StatusEffectInstance_FactorCalculationData): Float;
static CODEC: Codec;
}

//net.minecraft.client.gui.screen.narration.ScreenNarrator
class ScreenNarrator extends JObject{
 buildNarrations(builderConsumer: Consumer): void;
 buildNarratorText(includeUnchanged: boolean): string;
}
class Static_ScreenNarrator {
static method_37043(partIndex: ScreenNarrator_PartIndex): Integer;
static method_37047(partIndex: ScreenNarrator_PartIndex): NarrationPart;
}

//net.minecraft.unused.packageinfo.PackageInfo5994
interface PackageInfo5994 extends JObject{
}

//net.minecraft.block.entity.SignText
class SignText extends JObject{
 getMessage(line: number,filtered: boolean): Text;
 getMessages(filtered: boolean): Text[];
 getOrderedMessages(filtered: boolean,messageOrderer: Function): OrderedText[];
 hasRunCommandClickEvent(player: PlayerEntity): boolean;
 withColor(color: DyeColor): SignText;
 getColor(): DyeColor;
 isGlowing(): boolean;
 withGlowing(glowing: boolean): SignText;
 withMessage(line: number,message: Text,filteredMessage: Text): SignText;
 withMessage(line: number,message: Text): SignText;
 hasText(player: PlayerEntity): boolean;
}
class Static_SignText {
static create(messages: Text[],filteredMessages: Optional,color: DyeColor,glowing: boolean): SignText;
static getDefaultText(): Text[];
static method_49863(instance: RecordCodecBuilder_Instance): App;
static method_49866(text: Text): boolean;
static copyMessages(from: Text[],to: Text[]): void;
static method_49879(signText: SignText): Text[];
static method_49875(signText: SignText): DyeColor;
static method_49864(signText: SignText): Boolean;
static method_49865(messages: List): DataResult;
static method_49869(messages: Text[]): List;
static method_49876(list: List): Text[];
static MESSAGES_CODEC: Codec;
static CODEC: Codec;
static field_43299: number;
}

//net.minecraft.unused.packageinfo.PackageInfo5993
interface PackageInfo5993 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo5992
interface PackageInfo5992 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo5991
interface PackageInfo5991 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo5998
interface PackageInfo5998 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo5997
interface PackageInfo5997 extends JObject{
}

//net.minecraft.world.gen.chunk.BlendingData$BiomeConsumer
interface BlendingData_BiomeConsumer extends JObject{
 consume(biomeX: number,biomeZ: number,biome: RegistryEntry): void;
}

//net.minecraft.world.chunk.Palette
interface Palette extends JObject{
 index(object: Object): number;
 get(id: number): Object;
 copy(): Palette;
 getSize(): number;
 getPacketSize(): number;
 readPacket(buf: PacketByteBuf): void;
 hasAny(predicate: Predicate): boolean;
 writePacket(buf: PacketByteBuf): void;
}

//net.minecraft.client.render.RenderPhase$Textures$Builder
class RenderPhase_Textures_Builder extends JObject{
 add(id: Identifier,blur: boolean,mipmap: boolean): RenderPhase_Textures_Builder;
 build(): RenderPhase_Textures;
}

//net.minecraft.predicate.entity.VariantPredicates$1


//net.minecraft.world.gen.blockpredicate.BlockPredicate
interface BlockPredicate extends JObject, BiPredicate{
 getType(): BlockPredicateType;
}
class Static_BlockPredicate {
static not(predicate: BlockPredicate): BlockPredicate;
static allOf(predicates: List): BlockPredicate;
static allOf(predicates: BlockPredicate[]): BlockPredicate;
static anyOf(predicates: List): BlockPredicate;
static anyOf(predicates: BlockPredicate[]): BlockPredicate;
static matchingBlocks(offset: Vec3i,blocks: Block[]): BlockPredicate;
static matchingBlocks(blocks: Block[]): BlockPredicate;
static matchingBlocks(blocks: List): BlockPredicate;
static matchingBlocks(offset: Vec3i,blocks: List): BlockPredicate;
static bothOf(first: BlockPredicate,second: BlockPredicate): BlockPredicate;
static eitherOf(first: BlockPredicate,second: BlockPredicate): BlockPredicate;
static matchingBlockTag(offset: Vec3i,tag: TagKey): BlockPredicate;
static matchingBlockTag(offset: TagKey): BlockPredicate;
static alwaysTrue(): BlockPredicate;
static matchingFluids(offset: Vec3i,fluids: Fluid[]): BlockPredicate;
static matchingFluids(offset: Vec3i,fluids: List): BlockPredicate;
static matchingFluids(fluids: Fluid[]): BlockPredicate;
static wouldSurvive(state: BlockState,offset: Vec3i): BlockPredicate;
static replaceable(offset: Vec3i): BlockPredicate;
static replaceable(): BlockPredicate;
static noFluid(offset: Vec3i): BlockPredicate;
static noFluid(): BlockPredicate;
static insideWorldBounds(offset: Vec3i): BlockPredicate;
static solid(): BlockPredicate;
static solid(offset: Vec3i): BlockPredicate;
static hasSturdyFace(offset: Vec3i,face: Direction): BlockPredicate;
static hasSturdyFace(face: Direction): BlockPredicate;
static BASE_CODEC: Codec;
static IS_AIR: BlockPredicate;
static IS_AIR_OR_WATER: BlockPredicate;
}

//net.minecraft.resource.ResourcePack
interface ResourcePack extends JObject, AutoCloseable{
 getName(): string;
 findResources(type: ResourceType,namespace: string,prefix: string,consumer: ResourcePack_ResultConsumer): void;
 close(): void;
 open(type: ResourceType,id: Identifier): InputSupplier;
 openRoot(segments: String[]): InputSupplier;
 isAlwaysStable(): boolean;
 getNamespaces(type: ResourceType): Set;
 parseMetadata(metaReader: ResourceMetadataReader): Object;
}
class Static_ResourcePack {
static METADATA_PATH_SUFFIX: string;
static PACK_METADATA_NAME: string;
}

//net.minecraft.resource.ResourceFinder
class ResourceFinder extends JObject{
 findResources(resourceManager: ResourceManager): Map;
 toResourcePath(id: Identifier): Identifier;
 toResourceId(path: Identifier): Identifier;
 findAllResources(resourceManager: ResourceManager): Map;
}
class Static_ResourceFinder {
static json(directoryName: string): ResourceFinder;
}

//net.minecraft.entity.ai.brain.task.FindWalkTargetTask
class FindWalkTargetTask extends JObject{
}
class Static_FindWalkTargetTask {
static create(walkSpeed: number,horizontalRange: number,verticalRange: number): SingleTickTask;
static create(walkSpeed: number): SingleTickTask;
static method_47196(i: number,j: number,memoryQueryResult: MemoryQueryResult,f: number,world: ServerWorld,entity: PathAwareEntity,time: long): boolean;
static method_47193(f: number,pos: Vec3d): WalkTarget;
static method_47194(i: number,j: number,f: number,context: TaskTriggerer_TaskContext): App;
static method_47195(i: number,j: number,f: number,walkTarget: MemoryQueryResult): TaskRunnable;
static DEFAULT_HORIZONTAL_RANGE: number;
static DEFAULT_VERTICAL_RANGE: number;
}

//net.minecraft.world.gen.feature.GeodeFeatureConfig
class GeodeFeatureConfig extends JObject, FeatureConfig{
 layerConfig: GeodeLayerConfig;
 layerThicknessConfig: GeodeLayerThicknessConfig;
 crackConfig: GeodeCrackConfig;
 usePotentialPlacementsChance: number;
 useAlternateLayer0Chance: number;
 placementsRequireLayer0Alternate: boolean;
 outerWallDistance: IntProvider;
 distributionPoints: IntProvider;
 pointOffset: IntProvider;
 minGenOffset: number;
 maxGenOffset: number;
 noiseMultiplier: number;
 invalidBlocksThreshold: number;
}
class Static_GeodeFeatureConfig {
static method_31916(config: GeodeFeatureConfig): GeodeCrackConfig;
static method_36299(instance: RecordCodecBuilder_Instance): App;
static method_31918(config: GeodeFeatureConfig): GeodeLayerConfig;
static method_31915(config: GeodeFeatureConfig): Double;
static method_31917(config: GeodeFeatureConfig): GeodeLayerThicknessConfig;
static method_36301(config: GeodeFeatureConfig): IntProvider;
static method_31909(config: GeodeFeatureConfig): Integer;
static method_31906(config: GeodeFeatureConfig): Integer;
static method_36300(config: GeodeFeatureConfig): Double;
static method_36303(config: GeodeFeatureConfig): IntProvider;
static method_31908(config: GeodeFeatureConfig): Integer;
static method_36302(config: GeodeFeatureConfig): IntProvider;
static method_31913(config: GeodeFeatureConfig): Boolean;
static method_31914(config: GeodeFeatureConfig): Double;
static RANGE: Codec;
static CODEC: Codec;
}

//net.minecraft.server.dedicated.AbstractPropertiesHandler$PropertyAccessor
class AbstractPropertiesHandler_PropertyAccessor extends JObject, Supplier{
 get(): Object;
 set(registryManager: DynamicRegistryManager,value: Object): AbstractPropertiesHandler;
}

//net.minecraft.server.command.TeleportCommand$LookTarget
class TeleportCommand_LookTarget extends JObject{
 look(source: ServerCommandSource,entity: Entity): void;
}

//net.minecraft.network.packet.s2c.play.CommandTreeS2CPacket$CommandNodeData
class CommandTreeS2CPacket_CommandNodeData extends JObject{
 write(buf: PacketByteBuf): void;
 validateRedirectNodeIndex(indices: IntSet): boolean;
 validateChildNodeIndices(indices: IntSet): boolean;
}

//net.minecraft.loot.provider.score.ContextLootScoreProvider$Serializer
class ContextLootScoreProvider_Serializer extends JObject, JsonSerializer{
 fromJson(json: JsonObject,context: JsonDeserializationContext): Object;
 fromJson(jsonObject: JsonObject,jsonDeserializationContext: JsonDeserializationContext): ContextLootScoreProvider;
 toJson(jsonObject: JsonObject,contextLootScoreProvider: ContextLootScoreProvider,jsonSerializationContext: JsonSerializationContext): void;
 toJson(json: JsonObject,object: Object,context: JsonSerializationContext): void;
}

//net.minecraft.util.profiling.jfr.Finishable
interface Finishable extends JObject{
 finish(): void;
}

//net.minecraft.server.command.ExecuteCommand$ExistsCondition
interface ExecuteCommand_ExistsCondition extends JObject{
 test(context: CommandContext): number;
}

//net.minecraft.network.packet.s2c.play.ItemPickupAnimationS2CPacket
class ItemPickupAnimationS2CPacket extends JObject, Packet{
 apply(clientPlayPacketListener: ClientPlayPacketListener): void;
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
 getStackAmount(): number;
 getEntityId(): number;
 getCollectorEntityId(): number;
}

//net.minecraft.world.storage.SerializingRegionBasedStorage
class SerializingRegionBasedStorage extends JObject, AutoCloseable{
 close(): void;
 hasUnsavedElements(): boolean;
 saveChunk(pos: ChunkPos): void;
}
class Static_SerializingRegionBasedStorage {
static getDataVersion(dynamic: Dynamic): number;
static chunkSectionPosAsLong(chunkPos: ChunkPos,y: number): long;
static method_43412(chunkPos: ChunkPos,throwable: Throwable): Optional;
static method_28512(map: Map,dynamicOps: DynamicOps,string: string,object: Object): void;
static LOGGER: Logger;
static SECTIONS_KEY: string;
}

//net.minecraft.loot.condition.LootCondition
interface LootCondition extends JObject, LootContextAware, Predicate{
 getType(): LootConditionType;
}

//net.minecraft.command.argument.ScoreboardObjectiveArgumentType
class ScoreboardObjectiveArgumentType extends JObject, ArgumentType{
 parse(stringReader: StringReader): string;
 parse(reader: StringReader): Object;
 getExamples(): Collection;
 listSuggestions(context: CommandContext,builder: SuggestionsBuilder): CompletableFuture;
}
class Static_ScoreboardObjectiveArgumentType {
static scoreboardObjective(): ScoreboardObjectiveArgumentType;
static getWritableObjective(context: CommandContext,name: string): ScoreboardObjective;
static getObjective(context: CommandContext,name: string): ScoreboardObjective;
static method_9392(name: Object): Message;
static method_9397(name: Object): Message;
static EXAMPLES: Collection;
static UNKNOWN_OBJECTIVE_EXCEPTION: DynamicCommandExceptionType;
static READONLY_OBJECTIVE_EXCEPTION: DynamicCommandExceptionType;
}

//net.minecraft.network.packet.BundleSplitterPacket
class BundleSplitterPacket extends JObject, Packet{
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
}

//net.minecraft.client.texture.atlas.AtlasLoader
class AtlasLoader extends JObject{
 loadSources(resourceManager: ResourceManager): List;
}
class Static_AtlasLoader {
static of(resourceManager: ResourceManager,id: Identifier): AtlasLoader;
static method_47669(resourceManager: ResourceManager,spriteRegions: AtlasSource_SpriteRegions,source: AtlasSource): void;
static LOGGER: Logger;
static FINDER: ResourceFinder;
}

//net.minecraft.entity.ai.brain.task.EndRaidTask
class EndRaidTask extends JObject{
}
class Static_EndRaidTask {
static create(): Task;
static method_47043(context: TaskTriggerer_TaskContext): App;
static method_47042(world: ServerWorld,entity: LivingEntity,time: long): boolean;
}

//net.minecraft.structure.rule.RuleTest
class RuleTest extends JObject{
 test(state: BlockState,random: Random): boolean;
}
class Static_RuleTest {
static TYPE_CODEC: Codec;
}

//net.minecraft.client.render.VertexFormatElement$Type$ClearTask
interface VertexFormatElement_Type_ClearTask extends JObject{
 clearBufferState(uvIndex: number,elementIndex: number): void;
}

//net.minecraft.client.render.block.entity.BeaconBlockEntityRenderer
class BeaconBlockEntityRenderer extends JObject, BlockEntityRenderer{
 render(beaconBlockEntity: BeaconBlockEntity,f: number,matrixStack: MatrixStack,vertexConsumerProvider: VertexConsumerProvider,i: number,j: number): void;
 render(entity: BlockEntity,tickDelta: number,matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,light: number,overlay: number): void;
 rendersOutsideBoundingBox(beaconBlockEntity: BeaconBlockEntity): boolean;
 rendersOutsideBoundingBox(blockEntity: BlockEntity): boolean;
 getRenderDistance(): number;
 isInRenderDistance(blockEntity: BlockEntity,pos: Vec3d): boolean;
 isInRenderDistance(beaconBlockEntity: BeaconBlockEntity,vec3d: Vec3d): boolean;
}
class Static_BeaconBlockEntityRenderer {
static renderBeamVertex(positionMatrix: Matrix4f,normalMatrix: Matrix3f,vertices: VertexConsumer,red: number,green: number,blue: number,alpha: number,y: number,x: number,z: number,u: number,v: number): void;
static renderBeam(matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,tickDelta: number,worldTime: long,yOffset: number,maxY: number,color: number[]): void;
static renderBeam(matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,textureId: Identifier,tickDelta: number,heightScale: number,worldTime: long,yOffset: number,maxY: number,color: number[],innerRadius: number,outerRadius: number): void;
static renderBeamLayer(matrices: MatrixStack,vertices: VertexConsumer,red: number,green: number,blue: number,alpha: number,yOffset: number,height: number,x1: number,z1: number,x2: number,z2: number,x3: number,z3: number,x4: number,z4: number,u1: number,u2: number,v1: number,v2: number): void;
static renderBeamFace(positionMatrix: Matrix4f,normalMatrix: Matrix3f,vertices: VertexConsumer,red: number,green: number,blue: number,alpha: number,yOffset: number,height: number,x1: number,z1: number,x2: number,z2: number,u1: number,u2: number,v1: number,v2: number): void;
static BEAM_TEXTURE: Identifier;
static MAX_BEAM_HEIGHT: number;
}

//net.minecraft.util.WinNativeModuleUtil
class WinNativeModuleUtil extends JObject{
}
class Static_WinNativeModuleUtil {
static query(pointer: Pointer,path: string,lengthPointer: IntByReference): Pointer;
static getEnglishTranslationIndex(indices: number[]): OptionalInt;
static getStringFileInfoPath(key: string,languageId: number,codePage: number): string;
static createNativeModuleInfo(path: string): Optional;
static collectNativeModules(): List;
static queryString(pointer: Pointer,path: string,lengthPointer: IntByReference): string;
static addDetailTo(section: CrashReportSection): void;
static method_37969(module: WinNativeModuleUtil_NativeModule): string;
static method_37962(moduleName: WinNativeModuleUtil_NativeModule): string;
static method_37968(): string;
static LOGGER: Logger;
static CODE_PAGE_MASK: number;
static EN_US_CODE_PAGE: number;
static LANGUAGE_ID_MASK: number;
static LANGUAGE_ID: number;
}

//net.minecraft.network.packet.c2s.login.LoginKeyC2SPacket
class LoginKeyC2SPacket extends JObject, Packet{
 apply(serverLoginPacketListener: ServerLoginPacketListener): void;
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
 verifySignedNonce(nonce: byte[],privateKey: PrivateKey): boolean;
 decryptSecretKey(privateKey: PrivateKey): SecretKey;
}

//net.minecraft.server.function.CommandFunction$FunctionElement
class CommandFunction_FunctionElement extends JObject, CommandFunction_Element{
 toString(): string;
 execute(commandFunctionManager: CommandFunctionManager,serverCommandSource: ServerCommandSource,deque: Deque,i: number,j: number,tracer: CommandFunctionManager_Tracer): void;
}
class Static_CommandFunction_FunctionElement {
static method_17914(tracer: CommandFunctionManager_Tracer,i: number,j: number,deque: Deque,serverCommandSource: ServerCommandSource,f: CommandFunction): void;
}

//net.minecraft.block.pattern.BlockPattern
class BlockPattern extends JObject{
 getWidth(): number;
 getHeight(): number;
 getDepth(): number;
 getPattern(): Predicate[][][];
 searchAround(world: WorldView,pos: BlockPos): BlockPattern_Result;
 testTransform(world: WorldView,frontTopLeft: BlockPos,forwards: Direction,up: Direction): BlockPattern_Result;
}
class Static_BlockPattern {
static translate(pos: BlockPos,forwards: Direction,up: Direction,offsetLeft: number,offsetDown: number,offsetForwards: number): BlockPos;
static makeCache(world: WorldView,forceLoad: boolean): LoadingCache;
}

//net.minecraft.registry.RegistryBuilder$EntryListCreatingLookup
class RegistryBuilder_EntryListCreatingLookup extends JObject, RegistryEntryLookup{
 getOptional(tag: TagKey): Optional;
}

//net.minecraft.client.gui.screen.recipebook.RecipeResultCollection
class RecipeResultCollection extends JObject{
 initialize(recipeBook: RecipeBook): void;
 isInitialized(): boolean;
 getResults(craftableOnly: boolean): List;
 hasCraftableRecipes(): boolean;
 getRecipes(craftable: boolean): List;
 computeCraftables(recipeFinder: RecipeMatcher,gridWidth: number,gridHeight: number,recipeBook: RecipeBook): void;
 hasFittingRecipes(): boolean;
 isCraftable(recipe: Recipe): boolean;
 getRegistryManager(): DynamicRegistryManager;
 getAllRecipes(): List;
 hasSingleOutput(): boolean;
}
class Static_RecipeResultCollection {
static shouldHaveSingleOutput(registryManager: DynamicRegistryManager,recipes: List): boolean;
}

//net.minecraft.entity.ai.brain.task.WalkTowardsPosTask
class WalkTowardsPosTask extends JObject{
}
class Static_WalkTowardsPosTask {
static create(posModule: MemoryModuleType,completionRange: number,speed: number): SingleTickTask;
static fuzz(random: Random): number;
static fuzz(mob: MobEntity,pos: BlockPos): BlockPos;
static method_46942(memoryModuleType: MemoryModuleType,i: number,f: number,context: TaskTriggerer_TaskContext): App;
static method_46939(taskContext: TaskTriggerer_TaskContext,i: number,f: number,pos: MemoryQueryResult,attackTarget: MemoryQueryResult,walkTarget: MemoryQueryResult,lookTarget: MemoryQueryResult): TaskRunnable;
static method_46940(taskContext: TaskTriggerer_TaskContext,memoryQueryResult: MemoryQueryResult,i: number,f: number,world: ServerWorld,entity: MobEntity,time: long): boolean;
}

//net.minecraft.advancement.criterion.Criteria
class Criteria extends JObject{
}
class Static_Criteria {
static register(object: Criterion): Criterion;
static getById(id: Identifier): Criterion;
static getCriteria(): Iterable;
static VALUES: Map;
static IMPOSSIBLE: ImpossibleCriterion;
static PLAYER_KILLED_ENTITY: OnKilledCriterion;
static ENTITY_KILLED_PLAYER: OnKilledCriterion;
static ENTER_BLOCK: EnterBlockCriterion;
static INVENTORY_CHANGED: InventoryChangedCriterion;
static RECIPE_UNLOCKED: RecipeUnlockedCriterion;
static PLAYER_HURT_ENTITY: PlayerHurtEntityCriterion;
static ENTITY_HURT_PLAYER: EntityHurtPlayerCriterion;
static ENCHANTED_ITEM: EnchantedItemCriterion;
static FILLED_BUCKET: FilledBucketCriterion;
static BREWED_POTION: BrewedPotionCriterion;
static CONSTRUCT_BEACON: ConstructBeaconCriterion;
static USED_ENDER_EYE: UsedEnderEyeCriterion;
static SUMMONED_ENTITY: SummonedEntityCriterion;
static BRED_ANIMALS: BredAnimalsCriterion;
static LOCATION: TickCriterion;
static SLEPT_IN_BED: TickCriterion;
static CURED_ZOMBIE_VILLAGER: CuredZombieVillagerCriterion;
static VILLAGER_TRADE: VillagerTradeCriterion;
static ITEM_DURABILITY_CHANGED: ItemDurabilityChangedCriterion;
static LEVITATION: LevitationCriterion;
static CHANGED_DIMENSION: ChangedDimensionCriterion;
static TICK: TickCriterion;
static TAME_ANIMAL: TameAnimalCriterion;
static PLACED_BLOCK: ItemCriterion;
static CONSUME_ITEM: ConsumeItemCriterion;
static EFFECTS_CHANGED: EffectsChangedCriterion;
static USED_TOTEM: UsedTotemCriterion;
static NETHER_TRAVEL: TravelCriterion;
static FISHING_ROD_HOOKED: FishingRodHookedCriterion;
static CHANNELED_LIGHTNING: ChanneledLightningCriterion;
static SHOT_CROSSBOW: ShotCrossbowCriterion;
static KILLED_BY_CROSSBOW: KilledByCrossbowCriterion;
static HERO_OF_THE_VILLAGE: TickCriterion;
static VOLUNTARY_EXILE: TickCriterion;
static SLIDE_DOWN_BLOCK: SlideDownBlockCriterion;
static BEE_NEST_DESTROYED: BeeNestDestroyedCriterion;
static TARGET_HIT: TargetHitCriterion;
static ITEM_USED_ON_BLOCK: ItemCriterion;
static PLAYER_GENERATES_CONTAINER_LOOT: PlayerGeneratesContainerLootCriterion;
static THROWN_ITEM_PICKED_UP_BY_ENTITY: ThrownItemPickedUpByEntityCriterion;
static THROWN_ITEM_PICKED_UP_BY_PLAYER: ThrownItemPickedUpByEntityCriterion;
static PLAYER_INTERACTED_WITH_ENTITY: PlayerInteractedWithEntityCriterion;
static STARTED_RIDING: StartedRidingCriterion;
static LIGHTNING_STRIKE: LightningStrikeCriterion;
static USING_ITEM: UsingItemCriterion;
static FALL_FROM_HEIGHT: TravelCriterion;
static RIDE_ENTITY_IN_LAVA: TravelCriterion;
static KILL_MOB_NEAR_SCULK_CATALYST: OnKilledCriterion;
static ALLAY_DROP_ITEM_ON_BLOCK: ItemCriterion;
static AVOID_VIBRATION: TickCriterion;
static RECIPE_CRAFTED: RecipeCraftedCriterion;
}

//net.minecraft.text.Text
interface Text extends JObject, Message, StringVisitable{
 contains(text: Text): boolean;
 copy(): MutableText;
 getContent(): TextContent;
 visit(styledVisitor: StringVisitable_StyledVisitor,style: Style): Optional;
 visit(visitor: StringVisitable_Visitor): Optional;
 getString(): string;
 getSiblings(): List;
 asOrderedText(): OrderedText;
 getStyle(): Style;
 copyContentOnly(): MutableText;
 asTruncatedString(length: number): string;
 withoutStyle(): List;
 getWithStyle(style: Style): List;
}
class Static_Text {
static of(string: string): Text;
static empty(): MutableText;
static literal(string: string): MutableText;
static selector(pattern: string,separator: Optional): MutableText;
static keybind(string: string): MutableText;
static score(name: string,objective: string): MutableText;
static nbt(rawPath: string,interpret: boolean,separator: Optional,dataSource: NbtDataSource): MutableText;
static translatable(key: string,args: Object[]): MutableText;
static translatable(key: string): MutableText;
static method_27655(i: number,stringBuilder: StringBuilder,string: string): Optional;
static method_36135(list: List,styleOverride: Style,text: string): Optional;
static translatableWithFallback(key: string,fallback: string): MutableText;
static translatableWithFallback(key: string,fallback: string,args: Object[]): MutableText;
}

//net.minecraft.client.gui.screen.ingame.ScreenHandlerProvider
interface ScreenHandlerProvider extends JObject{
 getScreenHandler(): ScreenHandler;
}

//net.minecraft.network.packet.s2c.play.ScoreboardObjectiveUpdateS2CPacket
class ScoreboardObjectiveUpdateS2CPacket extends JObject, Packet{
 getName(): string;
 apply(listener: PacketListener): void;
 apply(clientPlayPacketListener: ClientPlayPacketListener): void;
 write(buf: PacketByteBuf): void;
 getType(): ScoreboardCriterion_RenderType;
 getDisplayName(): Text;
 getMode(): number;
}
class Static_ScoreboardObjectiveUpdateS2CPacket {
static ADD_MODE: number;
static REMOVE_MODE: number;
static UPDATE_MODE: number;
}

//net.minecraft.entity.ai.brain.task.LookAtDisturbanceTask
class LookAtDisturbanceTask extends JObject{
}
class Static_LookAtDisturbanceTask {
static create(): Task;
static method_47261(taskContext: TaskTriggerer_TaskContext,memoryQueryResult: MemoryQueryResult): Optional;
static method_47260(context: TaskTriggerer_TaskContext): App;
static method_47263(taskContext: TaskTriggerer_TaskContext,lookTarget: MemoryQueryResult,disturbanceLocation: MemoryQueryResult,roarTarget: MemoryQueryResult,attackTarget: MemoryQueryResult): TaskRunnable;
static method_47262(taskContext: TaskTriggerer_TaskContext,memoryQueryResult: MemoryQueryResult,memoryQueryResult2: MemoryQueryResult,memoryQueryResult3: MemoryQueryResult,world: ServerWorld,entity: LivingEntity,time: long): boolean;
}

//net.minecraft.client.gui.hud.spectator.SpectatorMenu
class SpectatorMenu extends JObject{
 close(): void;
 getCommands(): List;
 selectElement(group: SpectatorMenuCommandGroup): void;
 getCommand(slot: number): SpectatorMenuCommand;
 getSelectedSlot(): number;
 getCurrentGroup(): SpectatorMenuCommandGroup;
 useCommand(slot: number): void;
 getSelectedCommand(): SpectatorMenuCommand;
 getCurrentState(): SpectatorMenuState;
}
class Static_SpectatorMenu {
static CLOSE_COMMAND: SpectatorMenuCommand;
static PREVIOUS_PAGE_COMMAND: SpectatorMenuCommand;
static NEXT_PAGE_COMMAND: SpectatorMenuCommand;
static DISABLED_NEXT_PAGE_COMMAND: SpectatorMenuCommand;
static CLOSE_SLOT: number;
static CLOSE_TEXT: Text;
static PREVIOUS_PAGE_TEXT: Text;
static NEXT_PAGE_TEXT: Text;
static BLANK_COMMAND: SpectatorMenuCommand;
}

//net.minecraft.network.packet.s2c.play.PlayerListS2CPacket$Action$Reader
interface PlayerListS2CPacket_Action_Reader extends JObject{
 read(serialized: PlayerListS2CPacket_Serialized,buf: PacketByteBuf): void;
}

//net.minecraft.entity.ai.brain.LivingTargetCache
class LivingTargetCache extends JObject{
 stream(predicate: Predicate): Stream;
 contains(entity: LivingEntity): boolean;
 anyMatch(predicate: Predicate): boolean;
 findFirst(predicate: Predicate): Optional;
 iterate(predicate: Predicate): Iterable;
}
class Static_LivingTargetCache {
static empty(): LivingTargetCache;
static method_38977(entity: LivingEntity): boolean;
static method_38974(object2BooleanOpenHashMap: Object2BooleanOpenHashMap,predicate: Predicate,entity: LivingEntity): boolean;
static method_38973(livingEntity: LivingEntity,entity: LivingEntity): boolean;
static EMPTY: LivingTargetCache;
}

//net.minecraft.client.texture.MissingSprite
class MissingSprite extends JObject{
}
class Static_MissingSprite {
static getMissingSpriteId(): Identifier;
static getMissingSpriteTexture(): NativeImageBackedTexture;
static createImage(width: number,height: number): NativeImage;
static createSpriteContents(): SpriteContents;
static WIDTH: number;
static HEIGHT: number;
static MISSINGNO_ID: string;
static MISSINGNO: Identifier;
static METADATA: AnimationResourceMetadata;
static texture: NativeImageBackedTexture;
}

//net.minecraft.util.collection.Weighting
class Weighting extends JObject{
}
class Static_Weighting {
static getWeightSum(pool: List): number;
static getAt(pool: List,totalWeight: number): Optional;
static getRandom(random: Random,pool: List): Optional;
static getRandom(random: Random,pool: List,totalWeight: number): Optional;
}

//net.minecraft.world.entity.EntityLookup
interface EntityLookup extends JObject{
 get(id: number): EntityLike;
 get(uuid: UUID): EntityLike;
 forEach(filter: TypeFilter,consumer: LazyIterationConsumer): void;
 iterate(): Iterable;
 forEachIntersects(box: Box,action: Consumer): void;
 forEachIntersects(filter: TypeFilter,box: Box,consumer: LazyIterationConsumer): void;
}

//net.minecraft.entity.damage.DamageSource$1


//net.minecraft.data.client.VariantsBlockStateSupplier
class VariantsBlockStateSupplier extends JObject, BlockStateSupplier{
 get(): Object;
 get(): JsonElement;
 coordinate(map: BlockStateVariantMap): VariantsBlockStateSupplier;
 getBlock(): Block;
}
class Static_VariantsBlockStateSupplier {
static create(block: Block): VariantsBlockStateSupplier;
static create(block: Block,variants: BlockStateVariant[]): VariantsBlockStateSupplier;
static create(block: Block,variant: BlockStateVariant): VariantsBlockStateSupplier;
static method_25774(pair: Pair,entry: Map_Entry): Pair;
static method_25779(map: Map,pair: Pair): void;
static method_25773(builder: ImmutableList_Builder,blockStateVariant: BlockStateVariant,rightVariant: BlockStateVariant): void;
static method_25781(map: Map,pair: Pair): Stream;
static intersect(left: List,right: List): List;
static method_25778(map: Map,json: JsonObject): void;
static method_25776(list: List,builder: ImmutableList_Builder,leftVariant: BlockStateVariant): void;
}

//net.minecraft.client.render.model.BuiltinBakedModel
class BuiltinBakedModel extends JObject, BakedModel{
 isBuiltin(): boolean;
 useAmbientOcclusion(): boolean;
 hasDepth(): boolean;
 isSideLit(): boolean;
 getParticleSprite(): Sprite;
 getTransformation(): ModelTransformation;
 getOverrides(): ModelOverrideList;
 getQuads(state: BlockState,face: Direction,random: Random): List;
}

//net.minecraft.predicate.entity.TypeSpecificPredicate$Deserializer
interface TypeSpecificPredicate_Deserializer extends JObject{
 deserialize(json: JsonObject): TypeSpecificPredicate;
}

//net.minecraft.network.packet.c2s.play.PlayerInputC2SPacket
class PlayerInputC2SPacket extends JObject, Packet{
 apply(serverPlayPacketListener: ServerPlayPacketListener): void;
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
 isSneaking(): boolean;
 isJumping(): boolean;
 getSideways(): number;
 getForward(): number;
}
class Static_PlayerInputC2SPacket {
static JUMPING_MASK: number;
static SNEAKING_MASK: number;
}

//net.minecraft.item.ItemUsage
class ItemUsage extends JObject{
}
class Static_ItemUsage {
static method_33265(world: World,itemEntity: ItemEntity,stack: ItemStack): void;
static spawnItemContents(itemEntity: ItemEntity,contents: Stream): void;
static consumeHeldItem(world: World,player: PlayerEntity,hand: Hand): TypedActionResult;
static exchangeStack(inputStack: ItemStack,player: PlayerEntity,outputStack: ItemStack): ItemStack;
static exchangeStack(inputStack: ItemStack,player: PlayerEntity,outputStack: ItemStack,creativeOverride: boolean): ItemStack;
}

//net.minecraft.util.math.EulerAngle
class EulerAngle extends JObject{
 equals(o: Object): boolean;
 toNbt(): NbtList;
 getWrappedRoll(): number;
 getWrappedYaw(): number;
 getWrappedPitch(): number;
 getRoll(): number;
 getPitch(): number;
 getYaw(): number;
}

//net.minecraft.server.filter.TextFilterer$Impl
class TextFilterer_Impl extends JObject, TextStream{
 filterText(text: string): CompletableFuture;
 onConnect(): void;
 filterTexts(texts: List): CompletableFuture;
 onDisconnect(): void;
}
class Static_TextFilterer_Impl {
static method_33809(throwable: Throwable): List;
}

//net.minecraft.loot.provider.score.ContextLootScoreProvider$CustomSerializer
class ContextLootScoreProvider_CustomSerializer extends JObject, JsonSerializing_ElementSerializer{
 fromJson(json: JsonElement,context: JsonDeserializationContext): Object;
 fromJson(jsonElement: JsonElement,jsonDeserializationContext: JsonDeserializationContext): ContextLootScoreProvider;
 toJson(contextLootScoreProvider: ContextLootScoreProvider,jsonSerializationContext: JsonSerializationContext): JsonElement;
 toJson(object: Object,context: JsonSerializationContext): JsonElement;
}

//net.minecraft.predicate.block.BlockPredicate
class BlockPredicate extends JObject, Predicate{
 test(context: Object): boolean;
 test(blockState: BlockState): boolean;
}
class Static_BlockPredicate {
static make(block: Block): BlockPredicate;
}

//net.minecraft.client.render.block.entity.ChestBlockEntityRenderer
class ChestBlockEntityRenderer extends JObject, BlockEntityRenderer{
 render(entity: BlockEntity,tickDelta: number,matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,light: number,overlay: number): void;
}
class Static_ChestBlockEntityRenderer {
static getSingleTexturedModelData(): TexturedModelData;
static getLeftDoubleTexturedModelData(): TexturedModelData;
static getRightDoubleTexturedModelData(): TexturedModelData;
static BASE: string;
static LID: string;
static LATCH: string;
}

//net.minecraft.world.MobSpawnerLogic
class MobSpawnerLogic extends JObject{
 handleStatus(world: World,status: number): boolean;
 serverTick(world: ServerWorld,pos: BlockPos): void;
 setEntityId(type: EntityType,world: World,random: Random,pos: BlockPos): void;
 clientTick(world: World,pos: BlockPos): void;
 sendStatus(world: World,pos: BlockPos,status: number): void;
 getRotation(): number;
 readNbt(world: World,pos: BlockPos,nbt: NbtCompound): void;
 writeNbt(nbt: NbtCompound): NbtCompound;
 getRenderedEntity(world: World,random: Random,pos: BlockPos): Entity;
 getLastRotation(): number;
}
class Static_MobSpawnerLogic {
static method_38080(error: string): void;
static method_18085(d: number,e: number,f: number,entity: Entity): Entity;
static method_46405(string: string): void;
static method_38081(): IllegalStateException;
static SPAWN_DATA_KEY: string;
static LOGGER: Logger;
static field_30951: number;
}

//net.minecraft.client.render.entity.animation.FrogAnimations
class FrogAnimations extends JObject{
}
class Static_FrogAnimations {
static CROAKING: Animation;
static WALKING: Animation;
static LONG_JUMPING: Animation;
static USING_TONGUE: Animation;
static SWIMMING: Animation;
static IDLING_IN_WATER: Animation;
}

//net.minecraft.client.render.debug.BlockOutlineDebugRenderer
class BlockOutlineDebugRenderer extends JObject, DebugRenderer_Renderer{
 render(matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,cameraX: number,cameraY: number,cameraZ: number): void;
}

//net.minecraft.client.network.LanServerQueryManager
class LanServerQueryManager extends JObject{
}
class Static_LanServerQueryManager {
static THREAD_ID: AtomicInteger;
static LOGGER: Logger;
}

//net.minecraft.client.option.SimpleOption
class SimpleOption extends JObject{
 toString(): string;
 getValue(): Object;
 setValue(value: Object): void;
 createWidget(options: GameOptions,x: number,y: number,width: number): ClickableWidget;
 createWidget(options: GameOptions,x: number,y: number,width: number,changeCallback: Consumer): ClickableWidget;
 getCallbacks(): SimpleOption_Callbacks;
 getCodec(): Codec;
}
class Static_SimpleOption {
static constantTooltip(text: Text): SimpleOption_TooltipFactory;
static ofBoolean(key: string,defaultValue: boolean,changeCallback: Consumer): SimpleOption;
static ofBoolean(key: string,tooltipFactory: SimpleOption_TooltipFactory,valueTextGetter: SimpleOption_ValueTextGetter,defaultValue: boolean,changeCallback: Consumer): SimpleOption;
static ofBoolean(key: string,tooltipFactory: SimpleOption_TooltipFactory,defaultValue: boolean): SimpleOption;
static ofBoolean(key: string,defaultValue: boolean): SimpleOption;
static ofBoolean(key: string,tooltipFactory: SimpleOption_TooltipFactory,defaultValue: boolean,changeCallback: Consumer): SimpleOption;
static emptyTooltip(): SimpleOption_TooltipFactory;
static enumValueText(): SimpleOption_ValueTextGetter;
static method_42405(value: Boolean): void;
static method_41752(value: Boolean): void;
static method_47606(value: Object): void;
static method_42718(optionText: Text,value: TranslatableOption): Text;
static method_47394(value: Object): Tooltip;
static method_47393(text: Text,value: Object): Tooltip;
static method_47605(optionText: Text,value: Boolean): Text;
static LOGGER: Logger;
static BOOLEAN: SimpleOption_PotentialValuesBasedCallbacks;
static BOOLEAN_TEXT_GETTER: SimpleOption_ValueTextGetter;
}

//net.minecraft.world.gen.noise.NoiseConfig$LegacyNoiseDensityFunctionVisitor
class NoiseConfig_LegacyNoiseDensityFunctionVisitor extends JObject, DensityFunction_DensityFunctionVisitor{
 apply(densityFunction: DensityFunction): DensityFunction;
 apply(noiseDensityFunction: DensityFunction_Noise): DensityFunction_Noise;
}

//net.minecraft.world.gen.feature.DripstoneClusterFeatureConfig
class DripstoneClusterFeatureConfig extends JObject, FeatureConfig{
 floorToCeilingSearchRange: number;
 height: IntProvider;
 radius: IntProvider;
 maxStalagmiteStalactiteHeightDiff: number;
 heightDeviation: number;
 dripstoneBlockLayerThickness: IntProvider;
 density: FloatProvider;
 wetness: FloatProvider;
 chanceOfDripstoneColumnAtMaxDistanceFromCenter: number;
 maxDistanceFromCenterAffectingChanceOfDripstoneColumn: number;
 maxDistanceFromCenterAffectingHeightBias: number;
}
class Static_DripstoneClusterFeatureConfig {
static method_33987(instance: RecordCodecBuilder_Instance): App;
static method_33048(config: DripstoneClusterFeatureConfig): Integer;
static method_33050(config: DripstoneClusterFeatureConfig): IntProvider;
static method_33989(config: DripstoneClusterFeatureConfig): Integer;
static method_33045(config: DripstoneClusterFeatureConfig): FloatProvider;
static method_33046(config: DripstoneClusterFeatureConfig): IntProvider;
static method_33043(config: DripstoneClusterFeatureConfig): Float;
static method_33988(config: DripstoneClusterFeatureConfig): Integer;
static method_33049(config: DripstoneClusterFeatureConfig): IntProvider;
static method_33051(config: DripstoneClusterFeatureConfig): Integer;
static method_33044(config: DripstoneClusterFeatureConfig): FloatProvider;
static method_33047(config: DripstoneClusterFeatureConfig): Integer;
static CODEC: Codec;
}

//net.minecraft.client.font.FontManager
class FontManager extends JObject, ResourceReloader, AutoCloseable{
 close(): void;
 reload(synchronizer: ResourceReloader_Synchronizer,manager: ResourceManager,prepareProfiler: Profiler,applyProfiler: Profiler,prepareExecutor: Executor,applyExecutor: Executor): CompletableFuture;
 setIdOverrides(idOverrides: Map): void;
 createTextRenderer(): TextRenderer;
 createAdvanceValidatingTextRenderer(): TextRenderer;
}
class Static_FontManager {
static method_51616(loadable: FontLoader_Loadable,resourceManager: ResourceManager,fontKey: FontManager_FontKey): Optional;
static method_51609(dependencyTracker: DependencyTracker,entry: FontManager_FontEntry): void;
static method_51624(map: Map,dependent: Identifier,fontEntry: FontManager_FontEntry): void;
static method_27540(fontStorage: FontStorage): void;
static method_51618(list: List,codePoint: number): void;
static method_51625(map: Map,identifier: Identifier,fonts: List): void;
static method_51605(i: number): CompletableFuture[];
static loadFontProviders(fontResources: List,id: Identifier): List;
static method_51622(list: List,map: Map,ignored: Void): FontManager_ProviderIndex;
static method_51615(fontEntry: FontManager_FontEntry,fontKey: FontManager_FontKey,reference: FontLoader_Reference): void;
static LOGGER: Logger;
static FONTS_JSON: string;
static MISSING_STORAGE_ID: Identifier;
static FINDER: ResourceFinder;
static GSON: Gson;
}

//net.minecraft.util.crash.CrashMemoryReserve
class CrashMemoryReserve extends JObject{
}
class Static_CrashMemoryReserve {
static reserveMemory(): void;
static releaseMemory(): void;
static reservedMemory: byte[];
}

//net.minecraft.registry.RegistryWrapper
interface RegistryWrapper extends JObject, RegistryEntryLookup{
 filter(filter: Predicate): RegistryWrapper;
 streamKeys(): Stream;
 streamTagKeys(): Stream;
 streamEntries(): Stream;
 streamTags(): Stream;
}

//net.minecraft.loot.provider.number.ConstantLootNumberProvider$Serializer
class ConstantLootNumberProvider_Serializer extends JObject, JsonSerializer{
 fromJson(json: JsonObject,context: JsonDeserializationContext): Object;
 fromJson(jsonObject: JsonObject,jsonDeserializationContext: JsonDeserializationContext): ConstantLootNumberProvider;
 toJson(jsonObject: JsonObject,constantLootNumberProvider: ConstantLootNumberProvider,jsonSerializationContext: JsonSerializationContext): void;
 toJson(json: JsonObject,object: Object,context: JsonSerializationContext): void;
}

//net.minecraft.nbt.NbtTypes
class NbtTypes extends JObject{
}
class Static_NbtTypes {
static byId(id: number): NbtType;
static VALUES: NbtType[];
}

//net.minecraft.util.UserCache$Entry
class UserCache_Entry extends JObject{
 getProfile(): GameProfile;
 setLastAccessed(lastAccessed: long): void;
 getLastAccessed(): long;
 getExpirationDate(): Date;
}

//net.minecraft.world.tick.QueryableTickScheduler
interface QueryableTickScheduler extends JObject, TickScheduler{
 isTicking(pos: BlockPos,type: Object): boolean;
}

//net.minecraft.recipe.Recipe
interface Recipe extends JObject{
 isEmpty(): boolean;
 matches(inventory: Inventory,world: World): boolean;
 getId(): Identifier;
 getType(): RecipeType;
 isIgnoredInRecipeBook(): boolean;
 getOutput(registryManager: DynamicRegistryManager): ItemStack;
 getRemainder(inventory: Inventory): DefaultedList;
 getGroup(): string;
 craft(inventory: Inventory,registryManager: DynamicRegistryManager): ItemStack;
 getIngredients(): DefaultedList;
 fits(width: number,height: number): boolean;
 showNotification(): boolean;
 createIcon(): ItemStack;
 getSerializer(): RecipeSerializer;
}
class Static_Recipe {
static method_31583(ingredient: Ingredient): boolean;
}

//net.minecraft.structure.StructurePiecesHolder
interface StructurePiecesHolder extends JObject{
 getIntersecting(box: BlockBox): StructurePiece;
 addPiece(piece: StructurePiece): void;
}

//net.minecraft.client.gui.screen.Screen$SelectedElementNarrationData
class Screen_SelectedElementNarrationData extends JObject{
 selectable: Selectable;
 index: number;
 selectType: Selectable_SelectionType;
}

//net.minecraft.world.gen.noise.BuiltinNoiseParameters
class BuiltinNoiseParameters extends JObject{
}
class Static_BuiltinNoiseParameters {
static register(noiseParametersRegisterable: Registerable,key: RegistryKey,firstOctave: number,firstAmplitude: number,amplitudes: number[]): void;
static register(noiseParametersRegisterable: Registerable,octaveOffset: number,temperatureKey: RegistryKey,vegetationKey: RegistryKey,continentalnessKey: RegistryKey,erosionKey: RegistryKey): void;
static bootstrap(noiseParametersRegisterable: Registerable): void;
static OFFSET: DoublePerlinNoiseSampler_NoiseParameters;
}

//net.minecraft.nbt.NbtString$1


//net.minecraft.server.command.SetBlockCommand
class SetBlockCommand extends JObject{
}
class Static_SetBlockCommand {
static register(dispatcher: CommandDispatcher,commandRegistryAccess: CommandRegistryAccess): void;
static execute(source: ServerCommandSource,pos: BlockPos,block: BlockStateArgument,mode: SetBlockCommand_Mode,condition: Predicate): number;
static method_13626(context: CommandContext): number;
static method_13621(context: CommandContext): number;
static method_13624(pos: CachedBlockPosition): boolean;
static method_13627(source: ServerCommandSource): boolean;
static method_13625(context: CommandContext): number;
static method_13622(context: CommandContext): number;
static method_52076(blockPos: BlockPos): Text;
static FAILED_EXCEPTION: SimpleCommandExceptionType;
}

//net.minecraft.registry.tag.BannerPatternTags
class BannerPatternTags extends JObject{
}
class Static_BannerPatternTags {
static of(id: string): TagKey;
static NO_ITEM_REQUIRED: TagKey;
static FLOWER_PATTERN_ITEM: TagKey;
static CREEPER_PATTERN_ITEM: TagKey;
static SKULL_PATTERN_ITEM: TagKey;
static MOJANG_PATTERN_ITEM: TagKey;
static GLOBE_PATTERN_ITEM: TagKey;
static PIGLIN_PATTERN_ITEM: TagKey;
}

//net.minecraft.client.gui.screen.world.WorldCreator
class WorldCreator extends JObject{
 update(): void;
 isDebug(): boolean;
 setSeed(seed: string): void;
 getSeed(): string;
 addListener(listener: Consumer): void;
 shouldGenerateStructures(): boolean;
 setDifficulty(difficulty: Difficulty): void;
 setWorldName(worldName: string): void;
 getWorldName(): string;
 setCheatsEnabled(cheatsEnabled: boolean): void;
 areCheatsEnabled(): boolean;
 setWorldType(worldType: WorldCreator_WorldType): void;
 setGameRules(gameRules: GameRules): void;
 getWorldType(): WorldCreator_WorldType;
 isBonusChestEnabled(): boolean;
 setBonusChestEnabled(bonusChestEnabled: boolean): void;
 getLevelScreenProvider(): LevelScreenProvider;
 getWorldDirectoryName(): string;
 getGeneratorOptionsHolder(): GeneratorOptionsHolder;
 setGeneratorOptionsHolder(generatorOptionsHolder: GeneratorOptionsHolder): void;
 setGenerateStructures(generateStructures: boolean): void;
 isHardcore(): boolean;
 getDifficulty(): Difficulty;
 setGameMode(gameMode: WorldCreator_Mode): void;
 getGameRules(): GameRules;
 getGameMode(): WorldCreator_Mode;
 applyModifier(modifier: GeneratorOptionsHolder_RegistryAwareModifier): void;
 getExtendedWorldTypes(): List;
 getNormalWorldTypes(): List;
}
class Static_WorldCreator {
static method_48714(bl: boolean,options: GeneratorOptions): GeneratorOptions;
static getWorldPreset(generatorOptionsHolder: GeneratorOptionsHolder,key: Optional): Optional;
static method_48718(bl: boolean,options: GeneratorOptions): GeneratorOptions;
static method_48706(registryEntry: RegistryEntry,registryManager: DynamicRegistryManager_Immutable,registryHolder: DimensionOptionsRegistryHolder): DimensionOptionsRegistryHolder;
static method_48702(generatorOptionsHolder: GeneratorOptionsHolder,key2: RegistryKey): Optional;
static method_48708(registry: Registry): List;
static method_48707(entryList: RegistryEntryList_Named): List;
static method_48711(list: List): boolean;
static getWorldPresetList(registry: Registry,tag: TagKey): Optional;
static NEW_WORLD_NAME: Text;
}

//net.minecraft.command.argument.NumberRangeArgumentType$FloatRangeArgumentType
class NumberRangeArgumentType_FloatRangeArgumentType extends JObject, NumberRangeArgumentType{
 parse(reader: StringReader): Object;
 parse(stringReader: StringReader): NumberRange_FloatRange;
 getExamples(): Collection;
}
class Static_NumberRangeArgumentType_FloatRangeArgumentType {
static getRangeArgument(context: CommandContext,name: string): NumberRange_FloatRange;
static EXAMPLES: Collection;
}

//net.minecraft.structure.SavannaVillageData
class SavannaVillageData extends JObject{
}
class Static_SavannaVillageData {
static bootstrap(poolRegisterable: Registerable): void;
static TOWN_CENTERS_KEY: RegistryKey;
static TERMINATORS_KEY: RegistryKey;
static ZOMBIE_TERMINATORS_KEY: RegistryKey;
}

//net.minecraft.world.chunk.light.ChunkSkyLight
class ChunkSkyLight extends JObject{
 get(localX: number,localZ: number): number;
 refreshSurfaceY(chunk: Chunk): void;
 getMaxSurfaceY(): number;
 isSkyLightAccessible(blockView: BlockView,localX: number,y: number,localZ: number): boolean;
}
class Static_ChunkSkyLight {
static getPackedIndex(localX: number,localZ: number): number;
static faceBlocksLight(blockView: BlockView,upperPos: BlockPos,upperState: BlockState,lowerPos: BlockPos,lowerState: BlockState): boolean;
static field_44711: number;
static field_44710: number;
}

//net.minecraft.network.packet.s2c.play.BossBarS2CPacket$Action
interface BossBarS2CPacket_Action extends JObject{
 accept(uuid: UUID,consumer: BossBarS2CPacket_Consumer): void;
 getType(): BossBarS2CPacket_Type;
 toPacket(buf: PacketByteBuf): void;
}

//net.minecraft.unused.packageinfo.PackageInfo7787
interface PackageInfo7787 extends JObject{
}

//net.minecraft.world.gen.noise.NoiseConfig
class NoiseConfig extends JObject{
 getOrCreateRandomDeriver(id: Identifier): RandomSplitter;
 getOrCreateSampler(noiseParametersKey: RegistryKey): DoublePerlinNoiseSampler;
 getSurfaceBuilder(): SurfaceBuilder;
 getMultiNoiseSampler(): MultiNoiseUtil_MultiNoiseSampler;
 getNoiseRouter(): NoiseRouter;
 getAquiferRandomDeriver(): RandomSplitter;
 getOreRandomDeriver(): RandomSplitter;
}
class Static_NoiseConfig {
static create(registryLookup: RegistryEntryLookup_RegistryLookup,chunkGeneratorSettingsKey: RegistryKey,legacyWorldSeed: long): NoiseConfig;
static create(chunkGeneratorSettings: ChunkGeneratorSettings,noiseParametersLookup: RegistryEntryLookup,legacyWorldSeed: long): NoiseConfig;
}

//net.minecraft.loot.condition.ValueCheckLootCondition
class ValueCheckLootCondition extends JObject, LootCondition{
 test(context: Object): boolean;
 test(lootContext: LootContext): boolean;
 getType(): LootConditionType;
 getRequiredParameters(): Set;
}
class Static_ValueCheckLootCondition {
static builder(value: LootNumberProvider,range: BoundedIntUnaryOperator): LootCondition_Builder;
static method_35563(lootNumberProvider: LootNumberProvider,boundedIntUnaryOperator: BoundedIntUnaryOperator): LootCondition;
}

//net.minecraft.client.particle.ReversePortalParticle$Factory
class ReversePortalParticle_Factory extends JObject, ParticleFactory{
 createParticle(defaultParticleType: DefaultParticleType,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
 createParticle(particleEffect: ParticleEffect,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
}

//net.minecraft.command.suggestion.SuggestionProviders$LocalProvider
class SuggestionProviders_LocalProvider extends JObject, SuggestionProvider{
 getSuggestions(context: CommandContext,builder: SuggestionsBuilder): CompletableFuture;
}

//net.minecraft.world.SpawnHelper$Runner
interface SpawnHelper_Runner extends JObject{
 run(entity: MobEntity,chunk: Chunk): void;
}

//net.minecraft.scoreboard.AbstractTeam
class AbstractTeam extends JObject{
 getName(): string;
 isEqual(team: AbstractTeam): boolean;
 getPlayerList(): Collection;
 getCollisionRule(): AbstractTeam_CollisionRule;
 getDeathMessageVisibilityRule(): AbstractTeam_VisibilityRule;
 isFriendlyFireAllowed(): boolean;
 decorateName(name: Text): MutableText;
 getColor(): Formatting;
 getNameTagVisibilityRule(): AbstractTeam_VisibilityRule;
 shouldShowFriendlyInvisibles(): boolean;
}

//net.minecraft.util.math.Spline$Builder
class Spline_Builder extends JObject{
 add(location: number,value: number,derivative: number): Spline_Builder;
 add(location: number,value: Spline): Spline_Builder;
 add(location: number,value: number): Spline_Builder;
 build(): Spline;
}

//net.minecraft.particle.ShriekParticleEffect
class ShriekParticleEffect extends JObject, ParticleEffect{
 write(buf: PacketByteBuf): void;
 getType(): ParticleType;
 asString(): string;
 getDelay(): number;
}
class Static_ShriekParticleEffect {
static method_42617(instance: RecordCodecBuilder_Instance): App;
static method_42618(particleEffect: ShriekParticleEffect): Integer;
static CODEC: Codec;
static FACTORY: ParticleEffect_Factory;
}

//net.minecraft.command.argument.NbtPathArgumentType$NbtPath
class NbtPathArgumentType_NbtPath extends JObject{
 remove(element: NbtElement): number;
 get(element: NbtElement): List;
 put(element: NbtElement,source: NbtElement): number;
 toString(): string;
 insert(index: number,compound: NbtCompound,elements: List): number;
 count(element: NbtElement): number;
 getOrInit(element: NbtElement,source: Supplier): List;
}
class Static_NbtPathArgumentType_NbtPath {
static forEach(elements: List,operation: Function): number;
static method_9370(a: Integer,b: Integer): Integer;
static method_47974(mutableBoolean: MutableBoolean,nbtElement: NbtElement): NbtElement;
static method_47973(pathNode: NbtPathArgumentType_PathNode,mutableBoolean: MutableBoolean,nbtElement: NbtElement,nbtElement2: NbtElement): Integer;
static isTooDeep(element: NbtElement,depth: number): boolean;
}

//net.minecraft.nbt.NbtType$OfVariableSize
interface NbtType_OfVariableSize extends JObject, NbtType{
 skip(input: DataInput,count: number): void;
}

//net.minecraft.util.logging.LogFileCompressor
class LogFileCompressor extends JObject{
 getAll(): LogFileCompressor_LogFileIterable;
 createLogFile(date: LocalDate): LogFileCompressor_Uncompressed;
}
class Static_LogFileCompressor {
static compress(from: Path,to: Path): void;
static compress(source: ReadableByteChannel,outputPath: Path): void;
static create(directory: Path,extension: string): LogFileCompressor;
static method_47555(path: Path): boolean;
static LOGGER: Logger;
static COMPRESSION_BUFFER_SIZE: number;
static GZ_EXTENSION: string;
}

//net.minecraft.client.resource.metadata.AnimationResourceMetadata
class AnimationResourceMetadata extends JObject{
 getSize(defaultWidth: number,defaultHeight: number): SpriteDimensions;
 forEachFrame(consumer: AnimationResourceMetadata_FrameConsumer): void;
 shouldInterpolate(): boolean;
 getDefaultFrameTime(): number;
}
class Static_AnimationResourceMetadata {
static READER: AnimationResourceMetadataReader;
static KEY: string;
static EMPTY_FRAME_TIME: number;
static UNDEFINED: number;
static EMPTY: AnimationResourceMetadata;
}

//net.minecraft.server.world.ThreadedAnvilChunkStorage$EntityTracker
class ThreadedAnvilChunkStorage_EntityTracker extends JObject{
 equals(o: Object): boolean;
 hashCode(): number;
 sendToOtherNearbyPlayers(packet: Packet): void;
 sendToNearbyPlayers(packet: Packet): void;
 stopTracking(): void;
 stopTracking(player: ServerPlayerEntity): void;
 updateTrackedStatus(players: List): void;
 updateTrackedStatus(player: ServerPlayerEntity): void;
}

//net.minecraft.world.gen.stateprovider.BlockStateProvider
class BlockStateProvider extends JObject{
 get(random: Random,pos: BlockPos): BlockState;
}
class Static_BlockStateProvider {
static of(block: Block): SimpleBlockStateProvider;
static of(state: BlockState): SimpleBlockStateProvider;
static TYPE_CODEC: Codec;
}

//net.minecraft.resource.metadata.ResourceMetadata$2


//net.minecraft.unused.packageinfo.PackageInfo7797
interface PackageInfo7797 extends JObject{
}

//net.minecraft.world.gen.densityfunction.DensityFunctionTypes$Beardifying
interface DensityFunctionTypes_Beardifying extends JObject, DensityFunction_Base{
 getCodecHolder(): CodecHolder;
}
class Static_DensityFunctionTypes_Beardifying {
static CODEC_HOLDER: CodecHolder;
}

//net.minecraft.command.FloatRangeArgument
class FloatRangeArgument extends JObject{
 getMin(): Float;
 getMax(): Float;
 isInRange(value: number): boolean;
 isInSquaredRange(value: number): boolean;
 toJson(): JsonElement;
}
class Static_FloatRangeArgument {
static parseFloat(reader: StringReader,allowFloats: boolean): Float;
static parse(reader: StringReader,allowFloats: boolean,transform: Function): FloatRangeArgument;
static parse(reader: StringReader,allowFloats: boolean): FloatRangeArgument;
static between(min: number,max: number): FloatRangeArgument;
static peekDigit(reader: StringReader,allowFloats: boolean): boolean;
static method_35405(value: Float): Float;
static mapFloat(value: Float,fun: Function): Float;
static fromJson(json: JsonElement): FloatRangeArgument;
static atMost(value: number): FloatRangeArgument;
static atLeast(value: number): FloatRangeArgument;
static exactly(value: number): FloatRangeArgument;
static ANY: FloatRangeArgument;
static ONLY_INTS_EXCEPTION: SimpleCommandExceptionType;
}

//net.minecraft.unused.packageinfo.PackageInfo7795
interface PackageInfo7795 extends JObject{
}

//net.minecraft.client.render.model.json.ModelElementTexture
class ModelElementTexture extends JObject{
 getDirectionIndex(offset: number): number;
 getU(rotation: number): number;
 getV(rotation: number): number;
 setUvs(uvs: number[]): void;
 uvs: number[];
 rotation: number;
}

//net.minecraft.util.collection.Weighted$Absent
class Weighted_Absent extends JObject, Weighted{
 getWeight(): Weight;
}

//net.minecraft.resource.metadata.ResourceMetadata$1


//net.minecraft.client.util.Bans
class Bans extends JObject{
}
class Static_Bans {
static getDurationText(banDetails: BanDetails): Text;
static getTitle(banDetails: BanDetails): Text;
static getDescriptionText(banDetails: BanDetails): Text;
static createBanScreen(callback: BooleanConsumer,banDetails: BanDetails): ConfirmLinkScreen;
static isTemporary(banDetails: BanDetails): boolean;
static getReasonText(banDetails: BanDetails): Text;
static getTemporaryBanDurationText(banDetails: BanDetails): Text;
static TEMPORARY_TITLE: Text;
static PERMANENT_TITLE: Text;
}

//net.minecraft.client.util.telemetry.SampleEvent
class SampleEvent extends JObject{
 start(): void;
 tick(sender: TelemetrySender): void;
 sample(): void;
 send(sender: TelemetrySender): void;
 shouldSend(): boolean;
 shouldSample(): boolean;
 disableSampling(): void;
}
class Static_SampleEvent {
static INTERVAL_IN_MILLIS: number;
static BATCH_SIZE: number;
}

//net.minecraft.server.Main
class Main extends JObject{
}
class Static_Main {
static main(args: String[]): void;
static method_28126(): boolean;
static writePidFile(path: Path): void;
static forceUpgradeWorld(session: LevelStorage_Session,dataFixer: DataFixer,eraseCache: boolean,continueCheck: BooleanSupplier,dimensionOptionsRegistry: Registry): void;
static createServerConfig(serverPropertiesHandler: ServerPropertiesHandler,session: LevelStorage_Session,safeMode: boolean,dataPackManager: ResourcePackManager): SaveLoading_ServerConfig;
static method_43612(serverConfig: SaveLoading_ServerConfig,session: LevelStorage_Session,optionSet: OptionSet,optionSpec: OptionSpec,serverPropertiesLoader: ServerPropertiesLoader,optionSpec2: OptionSpec,applyExecutor: Executor): CompletableFuture;
static method_29734(session: LevelStorage_Session,resourcePackManager: ResourcePackManager,saveLoader: SaveLoader,serverPropertiesLoader: ServerPropertiesLoader,apiServices: ApiServices,optionSet: OptionSet,optionSpec: OptionSpec,optionSpec2: OptionSpec,optionSpec3: OptionSpec,optionSpec4: OptionSpec,optionSpec5: OptionSpec,optionSpec6: OptionSpec,thread: Thread): MinecraftDedicatedServer;
static method_43613(session: LevelStorage_Session,optionSet: OptionSet,optionSpec: OptionSpec,serverPropertiesLoader: ServerPropertiesLoader,optionSpec2: OptionSpec,context: SaveLoading_LoadContextSupplierContext): SaveLoading_LoadContext;
static LOGGER: Logger;
}

//net.minecraft.loot.condition.BlockStatePropertyLootCondition$Serializer
class BlockStatePropertyLootCondition_Serializer extends JObject, JsonSerializer{
 fromJson(json: JsonObject,context: JsonDeserializationContext): Object;
 fromJson(jsonObject: JsonObject,jsonDeserializationContext: JsonDeserializationContext): BlockStatePropertyLootCondition;
 toJson(json: JsonObject,object: Object,context: JsonSerializationContext): void;
 toJson(jsonObject: JsonObject,blockStatePropertyLootCondition: BlockStatePropertyLootCondition,jsonSerializationContext: JsonSerializationContext): void;
}
class Static_BlockStatePropertyLootCondition_Serializer {
static method_22585(block: Block,propertyName: string): void;
static method_17937(identifier: Identifier): IllegalArgumentException;
}

//net.minecraft.network.packet.s2c.play.CloseScreenS2CPacket
class CloseScreenS2CPacket extends JObject, Packet{
 apply(clientPlayPacketListener: ClientPlayPacketListener): void;
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
 getSyncId(): number;
}

//net.minecraft.client.texture.Sprite
class Sprite extends JObject{
 toString(): string;
 getContents(): SpriteContents;
 upload(): void;
 createAnimation(): Sprite_TickableAnimation;
 getFrameU(frame: number): number;
 getFrameV(frame: number): number;
 getAnimationFrameDelta(): number;
 getFrameFromU(u: number): number;
 getFrameFromV(v: number): number;
 getX(): number;
 getY(): number;
 getAtlasId(): Identifier;
 getMinV(): number;
 getMaxV(): number;
 getMaxU(): number;
 getMinU(): number;
 getTextureSpecificVertexConsumer(consumer: VertexConsumer): VertexConsumer;
}

//net.minecraft.command.CommandRegistryAccess
interface CommandRegistryAccess extends JObject{
 createWrapper(registryRef: RegistryKey): RegistryWrapper;
}
class Static_CommandRegistryAccess {
static of(wrapperLookup: RegistryWrapper_WrapperLookup,enabledFeatures: FeatureSet): CommandRegistryAccess;
static of(registryManager: DynamicRegistryManager,enabledFeatures: FeatureSet): CommandRegistryAccess_EntryListCreationPolicySettable;
}

//net.minecraft.test.TestFunction
class TestFunction extends JObject{
 toString(): string;
 start(context: TestContext): void;
 getDuration(): long;
 getTickLimit(): number;
 getTemplateName(): string;
 isRequired(): boolean;
 getTemplatePath(): string;
 getRotation(): BlockRotation;
 getRequiredSuccesses(): number;
 isFlaky(): boolean;
 getMaxAttempts(): number;
 getBatchId(): string;
}

//net.minecraft.world.gen.feature.UndergroundPlacedFeatures
class UndergroundPlacedFeatures extends JObject{
}
class Static_UndergroundPlacedFeatures {
static bootstrap(featureRegisterable: Registerable): void;
static MONSTER_ROOM: RegistryKey;
static MONSTER_ROOM_DEEP: RegistryKey;
static FOSSIL_UPPER: RegistryKey;
static FOSSIL_LOWER: RegistryKey;
static DRIPSTONE_CLUSTER: RegistryKey;
static LARGE_DRIPSTONE: RegistryKey;
static POINTED_DRIPSTONE: RegistryKey;
static UNDERWATER_MAGMA: RegistryKey;
static GLOW_LICHEN: RegistryKey;
static ROOTED_AZALEA_TREE: RegistryKey;
static CAVE_VINES: RegistryKey;
static LUSH_CAVES_VEGETATION: RegistryKey;
static LUSH_CAVES_CLAY: RegistryKey;
static LUSH_CAVES_CEILING_VEGETATION: RegistryKey;
static SPORE_BLOSSOM: RegistryKey;
static CLASSIC_VINES_CAVE_FEATURE: RegistryKey;
static AMETHYST_GEODE: RegistryKey;
static SCULK_PATCH_DEEP_DARK: RegistryKey;
static SCULK_PATCH_ANCIENT_CITY: RegistryKey;
static SCULK_VEIN: RegistryKey;
}

//net.minecraft.client.particle.EmotionParticle$AngryVillagerFactory
class EmotionParticle_AngryVillagerFactory extends JObject, ParticleFactory{
 createParticle(defaultParticleType: DefaultParticleType,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
 createParticle(particleEffect: ParticleEffect,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
}

//net.minecraft.client.resource.language.ReorderingUtil
class ReorderingUtil extends JObject{
}
class Static_ReorderingUtil {
static reorder(text: StringVisitable,rightToLeft: boolean): OrderedText;
static shapeArabic(string: string): string;
}

//net.minecraft.data.dev.NbtProvider
class NbtProvider extends JObject, DataProvider{
 getName(): string;
 run(writer: DataWriter): CompletableFuture;
}
class Static_NbtProvider {
static getLocation(inputPath: Path,filePath: Path): string;
static writeTo(writer: DataWriter,path: Path,content: string): void;
static method_10495(path: Path): boolean;
static method_46582(path: Path,dataWriter: DataWriter,path2: Path): CompletableFuture;
static method_46583(future: CompletableFuture): CompletionStage;
static method_46581(dataWriter: DataWriter,path2: Path,path3: Path,path: Path): CompletableFuture;
static method_46584(i: number): CompletableFuture[];
static method_46580(i: number): CompletableFuture[];
static method_10494(dataWriter: DataWriter,path: Path,path2: Path,path3: Path): void;
static convertNbtToSnbt(writer: DataWriter,inputPath: Path,filename: string,outputPath: Path): Path;
static LOGGER: Logger;
}

//net.minecraft.network.packet.c2s.play.VehicleMoveC2SPacket
class VehicleMoveC2SPacket extends JObject, Packet{
 apply(serverPlayPacketListener: ServerPlayPacketListener): void;
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
 getX(): number;
 getY(): number;
 getZ(): number;
 getPitch(): number;
 getYaw(): number;
}

//net.minecraft.world.storage.ChunkDataAccess
interface ChunkDataAccess extends JObject, AutoCloseable{
 close(): void;
 awaitAll(sync: boolean): void;
 writeChunkData(dataList: ChunkDataList): void;
 readChunkData(pos: ChunkPos): CompletableFuture;
}

//net.minecraft.util.math.AffineTransformation
class AffineTransformation extends JObject{
 equals(o: Object): boolean;
 hashCode(): number;
 multiply(other: AffineTransformation): AffineTransformation;
 interpolate(target: AffineTransformation,factor: number): AffineTransformation;
 getScale(): Vector3f;
 getLeftRotation(): Quaternionf;
 getRightRotation(): Quaternionf;
 getMatrix(): Matrix4f;
 invert(): AffineTransformation;
 getTranslation(): Vector3f;
}
class Static_AffineTransformation {
static identity(): AffineTransformation;
static setup(translation: Vector3f,leftRotation: Quaternionf,scale: Vector3f,rightRotation: Quaternionf): Matrix4f;
static method_49065(affineTransformation: AffineTransformation): Vector3f;
static method_49058(either: Either): AffineTransformation;
static method_49064(affineTransformation: AffineTransformation): Quaternionf;
static method_49063(affineTransformation: AffineTransformation): Vector3f;
static method_49062(affineTransformation: AffineTransformation): Quaternionf;
static method_22939(): AffineTransformation;
static method_49060(affineTransformation: AffineTransformation): AffineTransformation;
static method_49059(instance: RecordCodecBuilder_Instance): App;
static method_49061(affineTransformation: AffineTransformation): AffineTransformation;
static CODEC: Codec;
static ANY_CODEC: Codec;
static IDENTITY: AffineTransformation;
}

//net.minecraft.server.command.ExecuteCommand$Condition
interface ExecuteCommand_Condition extends JObject{
 test(context: CommandContext): boolean;
}

//net.minecraft.state.StateManager$Builder
class StateManager_Builder extends JObject{
 add(properties: Property[]): StateManager_Builder;
 build(defaultStateGetter: Function,factory: StateManager_Factory): StateManager;
}

//net.minecraft.world.GameRules$Rule
class GameRules_Rule extends JObject{
 toString(): string;
 set(context: CommandContext,name: string): void;
 setValue(rule: GameRules_Rule,server: MinecraftServer): void;
 serialize(): string;
 getCommandResult(): number;
}

//net.minecraft.client.font.MultilineText
interface MultilineText extends JObject{
 count(): number;
 getMaxWidth(): number;
 drawCenterWithShadow(context: DrawContext,x: number,y: number,lineHeight: number,color: number): number;
 drawCenterWithShadow(context: DrawContext,x: number,y: number): number;
 draw(context: DrawContext,x: number,y: number,lineHeight: number,color: number): number;
 drawWithShadow(context: DrawContext,x: number,y: number,lineHeight: number,color: number): number;
 fillBackground(context: DrawContext,centerX: number,centerY: number,lineHeight: number,padding: number,color: number): void;
}
class Static_MultilineText {
static create(textRenderer: TextRenderer,lines: List): MultilineText;
static create(renderer: TextRenderer,text: StringVisitable,width: number): MultilineText;
static create(renderer: TextRenderer,text: StringVisitable,width: number,maxLines: number): MultilineText;
static create(renderer: TextRenderer,texts: Text[]): MultilineText;
static method_30898(textRenderer: TextRenderer,text: OrderedText): MultilineText_Line;
static createFromTexts(renderer: TextRenderer,texts: List): MultilineText;
static method_30894(textRenderer: TextRenderer,text: OrderedText): MultilineText_Line;
static method_30897(textRenderer: TextRenderer,text: OrderedText): MultilineText_Line;
static method_35725(textRenderer: TextRenderer,text: OrderedText): MultilineText_Line;
static EMPTY: MultilineText;
}

//net.minecraft.client.particle.Particle
class Particle extends JObject{
 toString(): string;
 scale(scale: number): Particle;
 isAlive(): boolean;
 getType(): ParticleTextureSheet;
 move(speed: number): Particle;
 move(dx: number,dy: number,dz: number): void;
 setColor(red: number,green: number,blue: number): void;
 tick(): void;
 setMaxAge(maxAge: number): void;
 getMaxAge(): number;
 buildGeometry(vertexConsumer: VertexConsumer,camera: Camera,tickDelta: number): void;
 setPos(x: number,y: number,z: number): void;
 markDead(): void;
 getGroup(): Optional;
 getBoundingBox(): Box;
 setVelocity(velocityX: number,velocityY: number,velocityZ: number): void;
 setBoundingBox(boundingBox: Box): void;
}
class Static_Particle {
static EMPTY_BOUNDING_BOX: Box;
static MAX_SQUARED_COLLISION_CHECK_DISTANCE: number;
}

//net.minecraft.item.ItemGroup$EntriesImpl
class ItemGroup_EntriesImpl extends JObject, ItemGroup_Entries{
 add(stack: ItemStack,visibility: ItemGroup_StackVisibility): void;
 parentTabStacks: Collection;
 searchTabStacks: Set;
}

//net.minecraft.client.toast.ToastManager$Entry
class ToastManager_Entry extends JObject{
 getInstance(): Toast;
 draw(x: number,context: DrawContext): boolean;
}
class Static_ToastManager_Entry {
static DISAPPEAR_TIME: long;
}

//net.minecraft.client.render.BlockBreakingInfo
class BlockBreakingInfo extends JObject, Comparable{
 equals(o: Object): boolean;
 hashCode(): number;
 compareTo(blockBreakingInfo: BlockBreakingInfo): number;
 compareTo(other: Object): number;
 setLastUpdateTick(lastUpdateTick: number): void;
 setStage(stage: number): void;
 getActorId(): number;
 getLastUpdateTick(): number;
 getStage(): number;
 getPos(): BlockPos;
}

//net.minecraft.world.biome.Biome
class Biome extends JObject{
 getSkyColor(): number;
 getFoliageColor(): number;
 getGrassColorAt(x: number,z: number): number;
 getPrecipitation(pos: BlockPos): Biome_Precipitation;
 shouldGenerateLowerFrozenOceanSurface(pos: BlockPos): boolean;
 getWaterColor(): number;
 hasPrecipitation(): boolean;
 canSetSnow(world: WorldView,pos: BlockPos): boolean;
 doesNotSnow(pos: BlockPos): boolean;
 isCold(pos: BlockPos): boolean;
 canSetIce(world: WorldView,pos: BlockPos,doWaterCheck: boolean): boolean;
 canSetIce(world: WorldView,blockPos: BlockPos): boolean;
 getTemperature(): number;
 getLoopSound(): Optional;
 getMoodSound(): Optional;
 getAdditionsSound(): Optional;
 getWaterFogColor(): number;
 getParticleConfig(): Optional;
 getMusic(): Optional;
 getFogColor(): number;
 getEffects(): BiomeEffects;
 getGenerationSettings(): GenerationSettings;
 getSpawnSettings(): SpawnSettings;
}
class Static_Biome {
static method_30971(biome: Biome): BiomeEffects;
static method_30776(instance: RecordCodecBuilder_Instance): App;
static method_38104(instance: RecordCodecBuilder_Instance): App;
static method_28423(biome: Biome): Biome_Weather;
static method_28418(biome: Biome): GenerationSettings;
static method_38103(weather: Biome_Weather,effects: BiomeEffects): Biome;
static method_28421(biome: Biome): BiomeEffects;
static method_28417(biome: Biome): SpawnSettings;
static method_28409(biome: Biome): Biome_Weather;
static CODEC: Codec;
static NETWORK_CODEC: Codec;
static REGISTRY_CODEC: Codec;
static REGISTRY_ENTRY_LIST_CODEC: Codec;
static TEMPERATURE_NOISE: OctaveSimplexNoiseSampler;
static FROZEN_OCEAN_NOISE: OctaveSimplexNoiseSampler;
static FOLIAGE_NOISE: OctaveSimplexNoiseSampler;
static MAX_TEMPERATURE_CACHE_SIZE: number;
}

//net.minecraft.item.ItemGroups
class ItemGroups extends JObject{
}
class Static_ItemGroups {
static collect(): void;
static stream(): Stream;
static register(id: string): RegistryKey;
static getGroups(): List;
static getSearchGroup(): ItemGroup;
static method_51334(displayContext: ItemGroup_DisplayContext,entries: ItemGroup_Entries): void;
static method_51336(displayContext: ItemGroup_DisplayContext,entries: ItemGroup_Entries): void;
static method_51330(displayContext: ItemGroup_DisplayContext,entries: ItemGroup_Entries): void;
static method_51346(): ItemStack;
static method_51328(displayContext: ItemGroup_DisplayContext,entries: ItemGroup_Entries): void;
static method_51345(): ItemStack;
static method_51332(displayContext: ItemGroup_DisplayContext,entries: ItemGroup_Entries): void;
static method_51316(registry: Registry,displayContext: ItemGroup_DisplayContext,entries: ItemGroup_Entries): void;
static method_51339(): ItemStack;
static method_51325(displayContext: ItemGroup_DisplayContext,entries: ItemGroup_Entries): void;
static method_51337(): ItemStack;
static method_51344(): ItemStack;
static method_51347(): ItemStack;
static method_51343(): ItemStack;
static method_51342(): ItemStack;
static method_51340(): ItemStack;
static method_51338(displayContext: ItemGroup_DisplayContext,entries: ItemGroup_Entries): void;
static method_51341(): ItemStack;
static method_51311(displayContext: ItemGroup_DisplayContext,entries: ItemGroup_Entries): void;
static method_48940(item: Item,entry: RegistryEntry_Reference): ItemStack;
static getDefaultTab(): ItemGroup;
static method_51329(): ItemStack;
static method_51335(): ItemStack;
static method_51318(displayContext: ItemGroup_DisplayContext,entries: ItemGroup_Entries): void;
static method_51321(displayContext: ItemGroup_DisplayContext,entries: ItemGroup_Entries): void;
static addPotions(entries: ItemGroup_Entries,registryWrapper: RegistryWrapper,item: Item,visibility: ItemGroup_StackVisibility): void;
static method_48952(entries: ItemGroup_Entries,stackVisibility: ItemGroup_StackVisibility,stack: ItemStack): void;
static method_51333(): ItemStack;
static method_48946(set: Set,enchantment: Enchantment): boolean;
static method_48954(entries: ItemGroup_Entries,stackVisibility: ItemGroup_StackVisibility,stack: ItemStack): void;
static method_48944(entry: RegistryEntry_Reference): boolean;
static method_48951(set: Set,enchantment: Enchantment): boolean;
static method_51323(displayContext: ItemGroup_DisplayContext,entries: ItemGroup_Entries): void;
static method_48949(enchantment: Enchantment): ItemStack;
static method_51331(): ItemStack;
static method_48942(enchantment: Enchantment): Stream;
static method_47338(displayContext: ItemGroup_DisplayContext,group: ItemGroup): void;
static addFireworkRockets(entries: ItemGroup_Entries,visibility: ItemGroup_StackVisibility): void;
static method_48947(entries: ItemGroup_Entries,stackVisibility: ItemGroup_StackVisibility,stack: ItemStack): void;
static method_47340(group: ItemGroup): boolean;
static method_48941(item: Item,instrument: RegistryEntry): ItemStack;
static addPaintings(entries: ItemGroup_Entries,registryWrapper: RegistryWrapper_Impl,predicate: Predicate,visibility: ItemGroup_StackVisibility): void;
static addSuspiciousStews(entries: ItemGroup_Entries,visibility: ItemGroup_StackVisibility): void;
static method_48935(entries: ItemGroup_Entries,stackVisibility: ItemGroup_StackVisibility,variant: RegistryEntry_Reference): void;
static getGroupsToDisplay(): List;
static method_47331(displayContext: ItemGroup_DisplayContext,group: ItemGroup): void;
static addInstruments(entries: ItemGroup_Entries,registryWrapper: RegistryWrapper,item: Item,instrumentTag: TagKey,visibility: ItemGroup_StackVisibility): void;
static method_47333(group: ItemGroup): boolean;
static method_48939(item: Item,entries: ItemGroup_Entries,stackVisibility: ItemGroup_StackVisibility,entryList: RegistryEntryList_Named): void;
static method_51313(entries: ItemGroup_Entries,set: Set,wrapper: RegistryWrapper_Impl): void;
static method_51326(entries: ItemGroup_Entries,wrapper: RegistryWrapper_Impl): void;
static method_51322(entries: ItemGroup_Entries,wrapper: RegistryWrapper_Impl): void;
static method_48943(enchantment: Enchantment,level: number): ItemStack;
static method_51320(registryEntry: RegistryEntry): boolean;
static method_51312(entries: ItemGroup_Entries,wrapper: RegistryWrapper_Impl): void;
static method_51324(entries: ItemGroup_Entries,wrapper: RegistryWrapper_Impl): void;
static method_48933(paintingVariant: PaintingVariant): number;
static method_51319(entries: ItemGroup_Entries,wrapper: RegistryWrapper_Impl): void;
static method_48934(entries: ItemGroup_Entries,stackVisibility: ItemGroup_StackVisibility,stack: ItemStack): void;
static method_51314(registryEntry: RegistryEntry): boolean;
static addAllLevelEnchantedBooks(entries: ItemGroup_Entries,registryWrapper: RegistryWrapper,enchantmentTargets: Set,visibility: ItemGroup_StackVisibility): void;
static updateDisplayContext(enabledFeatures: FeatureSet,operatorEnabled: boolean,lookup: RegistryWrapper_WrapperLookup): boolean;
static addMaxLevelEnchantedBooks(entries: ItemGroup_Entries,registryWrapper: RegistryWrapper,enchantmentTargets: Set,visibility: ItemGroup_StackVisibility): void;
static registerAndGetDefault(registry: Registry): ItemGroup;
static updateEntries(displayContext: ItemGroup_DisplayContext): void;
static BUILDING_BLOCKS: RegistryKey;
static COLORED_BLOCKS: RegistryKey;
static NATURAL: RegistryKey;
static FUNCTIONAL: RegistryKey;
static REDSTONE: RegistryKey;
static HOTBAR: RegistryKey;
static SEARCH: RegistryKey;
static TOOLS: RegistryKey;
static COMBAT: RegistryKey;
static FOOD_AND_DRINK: RegistryKey;
static INGREDIENTS: RegistryKey;
static SPAWN_EGGS: RegistryKey;
static OPERATOR: RegistryKey;
static INVENTORY: RegistryKey;
static PAINTING_VARIANT_COMPARATOR: Comparator;
static displayContext: ItemGroup_DisplayContext;
}

//net.minecraft.server.command.DataCommand$ModifyOperation
interface DataCommand_ModifyOperation extends JObject{
 modify(context: CommandContext,sourceNbt: NbtCompound,path: NbtPathArgumentType_NbtPath,elements: List): number;
}

//net.minecraft.client.model.ModelUtil
class ModelUtil extends JObject{
}
class Static_ModelUtil {
static interpolateAngle(angle1: number,angle2: number,progress: number): number;
}

//net.minecraft.world.WorldSaveHandler
class WorldSaveHandler extends JObject{
 savePlayerData(player: PlayerEntity): void;
 getSavedPlayerIds(): String[];
 loadPlayerData(player: PlayerEntity): NbtCompound;
}
class Static_WorldSaveHandler {
static LOGGER: Logger;
}

//net.minecraft.advancement.AdvancementDisplays
class AdvancementDisplays extends JObject{
}
class Static_AdvancementDisplays {
static getStatus(advancement: Advancement,force: boolean): AdvancementDisplays_Status;
static shouldDisplay(advancement: Advancement,statuses: Stack,donePredicate: Predicate,consumer: AdvancementDisplays_ResultConsumer): boolean;
static shouldDisplay(statuses: Stack): boolean;
static calculateDisplay(advancement: Advancement,donePredicate: Predicate,consumer: AdvancementDisplays_ResultConsumer): void;
static DISPLAY_DEPTH: number;
}

//net.minecraft.world.gen.feature.SmallDripstoneFeatureConfig
class SmallDripstoneFeatureConfig extends JObject, FeatureConfig{
 chanceOfTallerDripstone: number;
 chanceOfDirectionalSpread: number;
 chanceOfSpreadRadius2: number;
 chanceOfSpreadRadius3: number;
}
class Static_SmallDripstoneFeatureConfig {
static method_39176(config: SmallDripstoneFeatureConfig): Float;
static method_39178(config: SmallDripstoneFeatureConfig): Float;
static method_33063(config: SmallDripstoneFeatureConfig): Float;
static method_39177(config: SmallDripstoneFeatureConfig): Float;
static method_33062(instance: RecordCodecBuilder_Instance): App;
static CODEC: Codec;
}

//net.minecraft.client.particle.CloudParticle$CloudFactory
class CloudParticle_CloudFactory extends JObject, ParticleFactory{
 createParticle(defaultParticleType: DefaultParticleType,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
 createParticle(particleEffect: ParticleEffect,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
}

//net.minecraft.nbt.NbtType$2


//net.minecraft.world.FeatureUpdater
class FeatureUpdater extends JObject{
 markResolved(chunkPos: long): void;
 getUpdatedReferences(nbt: NbtCompound): NbtCompound;
}
class Static_FeatureUpdater {
static create(world: RegistryKey,persistentStateManager: PersistentStateManager): FeatureUpdater;
static method_14742(map: HashMap): void;
static method_14739(map: HashMap): void;
static method_14736(string: string): Long2ObjectMap;
static OLD_TO_NEW: Map;
static ANCIENT_TO_OLD: Map;
static NEW_STRUCTURE_NAMES: Set;
}

//net.minecraft.structure.StructurePiecesGenerator
interface StructurePiecesGenerator extends JObject{
 generatePieces(collector: StructurePiecesCollector,context: StructurePiecesGenerator_Context): void;
}

//net.minecraft.client.option.SimpleOption$Callbacks
interface SimpleOption_Callbacks extends JObject{
 validate(value: Object): Optional;
 codec(): Codec;
 getWidgetCreator(tooltipFactory: SimpleOption_TooltipFactory,gameOptions: GameOptions,x: number,y: number,width: number,changeCallback: Consumer): Function;
}

//net.minecraft.registry.tag.BiomeTags
class BiomeTags extends JObject{
}
class Static_BiomeTags {
static of(id: string): TagKey;
static IS_DEEP_OCEAN: TagKey;
static IS_OCEAN: TagKey;
static IS_BEACH: TagKey;
static IS_RIVER: TagKey;
static IS_MOUNTAIN: TagKey;
static IS_BADLANDS: TagKey;
static IS_HILL: TagKey;
static IS_TAIGA: TagKey;
static IS_JUNGLE: TagKey;
static IS_FOREST: TagKey;
static IS_SAVANNA: TagKey;
static IS_OVERWORLD: TagKey;
static IS_NETHER: TagKey;
static IS_END: TagKey;
static STRONGHOLD_BIASED_TO: TagKey;
static BURIED_TREASURE_HAS_STRUCTURE: TagKey;
static DESERT_PYRAMID_HAS_STRUCTURE: TagKey;
static IGLOO_HAS_STRUCTURE: TagKey;
static JUNGLE_TEMPLE_HAS_STRUCTURE: TagKey;
static MINESHAFT_HAS_STRUCTURE: TagKey;
static MINESHAFT_MESA_HAS_STRUCTURE: TagKey;
static OCEAN_MONUMENT_HAS_STRUCTURE: TagKey;
static OCEAN_RUIN_COLD_HAS_STRUCTURE: TagKey;
static OCEAN_RUIN_WARM_HAS_STRUCTURE: TagKey;
static PILLAGER_OUTPOST_HAS_STRUCTURE: TagKey;
static RUINED_PORTAL_DESERT_HAS_STRUCTURE: TagKey;
static RUINED_PORTAL_JUNGLE_HAS_STRUCTURE: TagKey;
static RUINED_PORTAL_OCEAN_HAS_STRUCTURE: TagKey;
static RUINED_PORTAL_SWAMP_HAS_STRUCTURE: TagKey;
static RUINED_PORTAL_MOUNTAIN_HAS_STRUCTURE: TagKey;
static RUINED_PORTAL_STANDARD_HAS_STRUCTURE: TagKey;
static SHIPWRECK_BEACHED_HAS_STRUCTURE: TagKey;
static SHIPWRECK_HAS_STRUCTURE: TagKey;
static STRONGHOLD_HAS_STRUCTURE: TagKey;
static SWAMP_HUT_HAS_STRUCTURE: TagKey;
static VILLAGE_DESERT_HAS_STRUCTURE: TagKey;
static VILLAGE_PLAINS_HAS_STRUCTURE: TagKey;
static VILLAGE_SAVANNA_HAS_STRUCTURE: TagKey;
static VILLAGE_SNOWY_HAS_STRUCTURE: TagKey;
static VILLAGE_TAIGA_HAS_STRUCTURE: TagKey;
static TRAIL_RUINS_HAS_STRUCTURE: TagKey;
static WOODLAND_MANSION_HAS_STRUCTURE: TagKey;
static NETHER_FORTRESS_HAS_STRUCTURE: TagKey;
static NETHER_FOSSIL_HAS_STRUCTURE: TagKey;
static BASTION_REMNANT_HAS_STRUCTURE: TagKey;
static ANCIENT_CITY_HAS_STRUCTURE: TagKey;
static RUINED_PORTAL_NETHER_HAS_STRUCTURE: TagKey;
static END_CITY_HAS_STRUCTURE: TagKey;
static REQUIRED_OCEAN_MONUMENT_SURROUNDING: TagKey;
static MINESHAFT_BLOCKING: TagKey;
static PLAYS_UNDERWATER_MUSIC: TagKey;
static HAS_CLOSER_WATER_FOG: TagKey;
static WATER_ON_MAP_OUTLINES: TagKey;
static PRODUCES_CORALS_FROM_BONEMEAL: TagKey;
static INCREASED_FIRE_BURNOUT: TagKey;
static SNOW_GOLEM_MELTS: TagKey;
static WITHOUT_ZOMBIE_SIEGES: TagKey;
static WITHOUT_PATROL_SPAWNS: TagKey;
static WITHOUT_WANDERING_TRADER_SPAWNS: TagKey;
static SPAWNS_COLD_VARIANT_FROGS: TagKey;
static SPAWNS_WARM_VARIANT_FROGS: TagKey;
static SPAWNS_GOLD_RABBITS: TagKey;
static SPAWNS_WHITE_RABBITS: TagKey;
static REDUCE_WATER_AMBIENT_SPAWNS: TagKey;
static ALLOWS_TROPICAL_FISH_SPAWNS_AT_ANY_HEIGHT: TagKey;
static POLAR_BEARS_SPAWN_ON_ALTERNATE_BLOCKS: TagKey;
static MORE_FREQUENT_DROWNED_SPAWNS: TagKey;
static ALLOWS_SURFACE_SLIME_SPAWNS: TagKey;
static SPAWNS_SNOW_FOXES: TagKey;
}

//net.minecraft.data.family.BlockFamily$Builder
class BlockFamily_Builder extends JObject{
 group(group: string): BlockFamily_Builder;
 sign(block: Block,wallBlock: Block): BlockFamily_Builder;
 build(): BlockFamily;
 requires(features: FeatureFlag[]): BlockFamily_Builder;
 fence(block: Block): BlockFamily_Builder;
 wall(block: Block): BlockFamily_Builder;
 cut(block: Block): BlockFamily_Builder;
 polished(block: Block): BlockFamily_Builder;
 cracked(block: Block): BlockFamily_Builder;
 noGenerateRecipes(): BlockFamily_Builder;
 noGenerateModels(): BlockFamily_Builder;
 unlockCriterionName(unlockCriterionName: string): BlockFamily_Builder;
 slab(block: Block): BlockFamily_Builder;
 stairs(block: Block): BlockFamily_Builder;
 door(block: Block): BlockFamily_Builder;
 trapdoor(block: Block): BlockFamily_Builder;
 pressurePlate(block: Block): BlockFamily_Builder;
 fenceGate(block: Block): BlockFamily_Builder;
 customFence(block: Block): BlockFamily_Builder;
 chiseled(block: Block): BlockFamily_Builder;
 button(block: Block): BlockFamily_Builder;
 mosaic(block: Block): BlockFamily_Builder;
 customFenceGate(block: Block): BlockFamily_Builder;
}

//net.minecraft.advancement.CriterionMerger
interface CriterionMerger extends JObject{
 createRequirements(criteriaNames: Collection): String[][];
}
class Static_CriterionMerger {
static method_16773(criteriaNames: Collection): String[][];
static method_16774(criteriaNames: Collection): String[][];
static AND: CriterionMerger;
static OR: CriterionMerger;
}

//net.minecraft.block.TripwireHookBlock$1


//net.minecraft.client.render.block.entity.BlockEntityRenderDispatcher
class BlockEntityRenderDispatcher extends JObject, SynchronousResourceReloader{
 get(blockEntity: BlockEntity): BlockEntityRenderer;
 reload(manager: ResourceManager): void;
 render(blockEntity: BlockEntity,tickDelta: number,matrices: MatrixStack,vertexConsumers: VertexConsumerProvider): void;
 configure(world: World,camera: Camera,crosshairTarget: HitResult): void;
 setWorld(world: World): void;
 renderEntity(entity: BlockEntity,matrix: MatrixStack,vertexConsumerProvider: VertexConsumerProvider,light: number,overlay: number): boolean;
 world: World;
 camera: Camera;
 crosshairTarget: HitResult;
}
class Static_BlockEntityRenderDispatcher {
static render(renderer: BlockEntityRenderer,blockEntity: BlockEntity,tickDelta: number,matrices: MatrixStack,vertexConsumers: VertexConsumerProvider): void;
static runReported(blockEntity: BlockEntity,runnable: Runnable): void;
static method_23080(blockEntityRenderer: BlockEntityRenderer,blockEntity: BlockEntity,matrixStack: MatrixStack,vertexConsumerProvider: VertexConsumerProvider,i: number,j: number): void;
static method_23081(blockEntityRenderer: BlockEntityRenderer,blockEntity: BlockEntity,f: number,matrixStack: MatrixStack,vertexConsumerProvider: VertexConsumerProvider): void;
}

//net.minecraft.nbt.NbtType$1


//net.minecraft.server.command.EnchantCommand
class EnchantCommand extends JObject{
}
class Static_EnchantCommand {
static register(dispatcher: CommandDispatcher,registryAccess: CommandRegistryAccess): void;
static execute(source: ServerCommandSource,targets: Collection,enchantment: RegistryEntry,level: number): number;
static method_13246(source: ServerCommandSource): boolean;
static method_13245(context: CommandContext): number;
static method_51964(enchantment: Enchantment,i: number,collection: Collection): Text;
static method_13240(context: CommandContext): number;
static method_51963(enchantment: Enchantment,i: number,collection: Collection): Text;
static method_13242(entityName: Object): Message;
static method_13248(level: Object,maxLevel: Object): Message;
static method_13244(itemName: Object): Message;
static method_13247(entityName: Object): Message;
static FAILED_ENTITY_EXCEPTION: DynamicCommandExceptionType;
static FAILED_ITEMLESS_EXCEPTION: DynamicCommandExceptionType;
static FAILED_INCOMPATIBLE_EXCEPTION: DynamicCommandExceptionType;
static FAILED_LEVEL_EXCEPTION: Dynamic2CommandExceptionType;
static FAILED_EXCEPTION: SimpleCommandExceptionType;
}

//net.minecraft.predicate.NumberRange$CommandFactory
interface NumberRange_CommandFactory extends JObject{
 create(reader: StringReader,min: Number,max: Number): NumberRange;
}

//net.minecraft.util.ThrowableDeliverer
class ThrowableDeliverer extends JObject{
 add(throwable: Throwable): void;
 deliver(): void;
}

//net.minecraft.loot.LootGsons
class LootGsons extends JObject{
}
class Static_LootGsons {
static getConditionGsonBuilder(): GsonBuilder;
static getTableGsonBuilder(): GsonBuilder;
static getFunctionGsonBuilder(): GsonBuilder;
}

//net.minecraft.world.entity.EntityChangeListener
interface EntityChangeListener extends JObject{
 remove(reason: Entity_RemovalReason): void;
 updateEntityPosition(): void;
}
class Static_EntityChangeListener {
static NONE: EntityChangeListener;
}

//net.minecraft.client.render.block.entity.BlockEntityRendererFactory
interface BlockEntityRendererFactory extends JObject{
 create(ctx: BlockEntityRendererFactory_Context): BlockEntityRenderer;
}

//net.minecraft.client.color.block.BlockColorProvider
interface BlockColorProvider extends JObject{
 getColor(state: BlockState,world: BlockRenderView,pos: BlockPos,tintIndex: number): number;
}

//net.minecraft.client.network.ClientLoginNetworkHandler
class ClientLoginNetworkHandler extends JObject, ClientLoginPacketListener{
 onCompression(packet: LoginCompressionS2CPacket): void;
 setMinigameName(minigameName: string): void;
 onHello(packet: LoginHelloS2CPacket): void;
 isConnectionOpen(): boolean;
 onDisconnect(packet: LoginDisconnectS2CPacket): void;
 onDisconnected(reason: Text): void;
 onSuccess(packet: LoginSuccessS2CPacket): void;
 onQueryRequest(packet: LoginQueryRequestS2CPacket): void;
}
class Static_ClientLoginNetworkHandler {
static LOGGER: Logger;
}

//net.minecraft.util.Identifier$Serializer
class Identifier_Serializer extends JObject, JsonDeserializer, JsonSerializer{
 deserialize(json: JsonElement,type: Type,context: JsonDeserializationContext): Object;
 deserialize(jsonElement: JsonElement,type: Type,jsonDeserializationContext: JsonDeserializationContext): Identifier;
 serialize(id: Object,type: Type,context: JsonSerializationContext): JsonElement;
 serialize(identifier: Identifier,type: Type,jsonSerializationContext: JsonSerializationContext): JsonElement;
}

//net.minecraft.client.model.Dilation
class Dilation extends JObject{
 add(radiusX: number,radiusY: number,radiusZ: number): Dilation;
 add(radius: number): Dilation;
}
class Static_Dilation {
static NONE: Dilation;
}

//net.minecraft.client.option.GameOptions$4


//net.minecraft.client.option.GameOptions$3


//net.minecraft.util.math.random.CheckedRandom
class CheckedRandom extends JObject, BaseRandom{
 split(): Random;
 next(bits: number): number;
 nextGaussian(): number;
 setSeed(seed: long): void;
 nextSplitter(): RandomSplitter;
}
class Static_CheckedRandom {
static INT_BITS: number;
static SEED_MASK: long;
static MULTIPLIER: long;
static INCREMENT: long;
}

//net.minecraft.client.option.GameOptions$2


//net.minecraft.entity.ai.pathing.PathMinHeap
class PathMinHeap extends JObject{
 clear(): void;
 isEmpty(): boolean;
 push(node: PathNode): PathNode;
 pop(): PathNode;
 getCount(): number;
 popNode(node: PathNode): void;
 setNodeWeight(node: PathNode,weight: number): void;
 getStart(): PathNode;
 getNodes(): PathNode[];
}

//net.minecraft.structure.pool.StructurePoolBasedGenerator$ShapedPoolStructurePiece
class StructurePoolBasedGenerator_ShapedPoolStructurePiece extends JObject{
}

//net.minecraft.client.render.debug.ChunkLoadingDebugRenderer$ChunkLoadingStatus
class ChunkLoadingDebugRenderer_ChunkLoadingStatus extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo8250
interface PackageInfo8250 extends JObject{
}

//net.minecraft.network.packet.s2c.play.BossBarS2CPacket$UpdatePropertiesAction
class BossBarS2CPacket_UpdatePropertiesAction extends JObject, BossBarS2CPacket_Action{
 accept(uuid: UUID,consumer: BossBarS2CPacket_Consumer): void;
 getType(): BossBarS2CPacket_Type;
 toPacket(buf: PacketByteBuf): void;
}

//net.minecraft.util.profiling.jfr.JfrJsonReport
class JfrJsonReport extends JObject{
 toString(profile: JfrProfile): string;
}
class Static_JfrJsonReport {
static method_38027(jsonObject: JsonObject,quantile: Integer,value: Double): void;
static method_38011(sample: ChunkGenerationSample): JsonElement;
static method_38018(jsonObject: JsonObject,json: JsonArray): void;
static method_38017(jsonArray: JsonArray,threadName: string,allocation: Double): void;
static method_38664(sample: ServerTickTimeSample): number;
static method_38021(pair: Pair): number;
static method_38020(jsonObject: JsonObject,quantile: Integer,value: Double): void;
static method_38019(jsonObject: JsonObject,json: JsonObject): void;
static method_38022(string: string,double_: Double,json: JsonObject): void;
static method_38024(samplesx: List,valueGetter: ToDoubleFunction): JsonObject;
static method_38016(jsonArray: JsonArray,pair: Pair): void;
static method_38026(jsonArray: JsonArray,pair: Pair): void;
static BYTES_PER_SECOND: string;
static COUNT: string;
static DURATION_NANOS_TOTAL: string;
static TOTAL_BYTES: string;
static COUNT_PER_SECOND: string;
}

//net.minecraft.command.argument.BlockPredicateArgumentType$BlockPredicate
interface BlockPredicateArgumentType_BlockPredicate extends JObject, Predicate{
 hasNbt(): boolean;
}

//net.minecraft.client.gui.widget.ThreePartsLayoutWidget
class ThreePartsLayoutWidget extends JObject, LayoutWidget{
 getWidth(): number;
 getHeight(): number;
 setX(x: number): void;
 setHeaderHeight(headerHeight: number): void;
 getHeaderHeight(): number;
 addHeader(widget: Widget): Widget;
 addHeader(widget: Widget,positioner: Positioner): Widget;
 addFooter(widget: Widget): Widget;
 addFooter(widget: Widget,positioner: Positioner): Widget;
 copyBodyPositioner(): Positioner;
 addBody(widget: Widget): Widget;
 addBody(widget: Widget,positioner: Positioner): Widget;
 setFooterHeight(footerHeight: number): void;
 getFooterHeight(): number;
 refreshPositions(): void;
 copyHeaderPositioner(): Positioner;
 copyFooterPositioner(): Positioner;
 getX(): number;
 getY(): number;
 setY(y: number): void;
 forEachElement(consumer: Consumer): void;
}
class Static_ThreePartsLayoutWidget {
static DEFAULT_HEADER_FOOTER_HEIGHT: number;
static FOOTER_MARGIN_TOP: number;
}

//net.minecraft.entity.attribute.EntityAttribute
class EntityAttribute extends JObject{
 getDefaultValue(): number;
 setTracked(tracked: boolean): EntityAttribute;
 clamp(value: number): number;
 isTracked(): boolean;
 getTranslationKey(): string;
}
class Static_EntityAttribute {
static field_30097: number;
}

//net.minecraft.client.gui.Narratable
interface Narratable extends JObject{
 appendNarrations(builder: NarrationMessageBuilder): void;
}

//net.minecraft.network.packet.s2c.play.TeamS2CPacket
class TeamS2CPacket extends JObject, Packet{
 apply(listener: PacketListener): void;
 apply(clientPlayPacketListener: ClientPlayPacketListener): void;
 write(buf: PacketByteBuf): void;
 getTeamOperation(): TeamS2CPacket_Operation;
 getPlayerNames(): Collection;
 getTeamName(): string;
 getTeam(): Optional;
 getPlayerListOperation(): TeamS2CPacket_Operation;
}
class Static_TeamS2CPacket {
static containsPlayers(packetType: number): boolean;
static containsTeamInfo(packetType: number): boolean;
static changePlayerTeam(team: Team,playerName: string,operation: TeamS2CPacket_Operation): TeamS2CPacket;
static updateTeam(team: Team,updatePlayers: boolean): TeamS2CPacket;
static updateRemovedTeam(team: Team): TeamS2CPacket;
static ADD: number;
static REMOVE: number;
static UPDATE: number;
static ADD_PLAYERS: number;
static REMOVE_PLAYERS: number;
static FIRST_MAX_VISIBILITY_OR_COLLISION_RULE_LENGTH: number;
static SECOND_MAX_VISIBILITY_OR_COLLISION_RULE_LENGTH: number;
}

//net.minecraft.network.ClientConnection$QueuedPacket
class ClientConnection_QueuedPacket extends JObject{
}

//net.minecraft.network.packet.s2c.play.EntityAnimationS2CPacket
class EntityAnimationS2CPacket extends JObject, Packet{
 apply(clientPlayPacketListener: ClientPlayPacketListener): void;
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
 getId(): number;
 getAnimationId(): number;
}
class Static_EntityAnimationS2CPacket {
static SWING_MAIN_HAND: number;
static WAKE_UP: number;
static SWING_OFF_HAND: number;
static CRIT: number;
static ENCHANTED_HIT: number;
}

//net.minecraft.client.particle.ParticleFactory
interface ParticleFactory extends JObject{
 createParticle(parameters: ParticleEffect,world: ClientWorld,x: number,y: number,z: number,velocityX: number,velocityY: number,velocityZ: number): Particle;
}

//net.minecraft.block.cauldron.CauldronBehavior
interface CauldronBehavior extends JObject{
 interact(state: BlockState,world: World,pos: BlockPos,player: PlayerEntity,hand: Hand,stack: ItemStack): ActionResult;
}
class Static_CauldronBehavior {
static createMap(): Object2ObjectOpenHashMap;
static method_32221(state: BlockState,world: World,pos: BlockPos,player: PlayerEntity,hand: Hand,stack: ItemStack): ActionResult;
static method_32222(state: BlockState,world: World,pos: BlockPos,player: PlayerEntity,hand: Hand,stack: ItemStack): ActionResult;
static method_32211(map: Object2ObjectOpenHashMap): void;
static method_32698(state: BlockState,world: World,pos: BlockPos,player: PlayerEntity,hand: Hand,stack: ItemStack): ActionResult;
static emptyCauldron(state: BlockState,world: World,pos: BlockPos,player: PlayerEntity,hand: Hand,stack: ItemStack,output: ItemStack,fullPredicate: Predicate,soundEvent: SoundEvent): ActionResult;
static method_32219(state: BlockState,world: World,pos: BlockPos,player: PlayerEntity,hand: Hand,stack: ItemStack): ActionResult;
static fillCauldron(world: World,pos: BlockPos,player: PlayerEntity,hand: Hand,stack: ItemStack,state: BlockState,soundEvent: SoundEvent): ActionResult;
static method_32218(state: BlockState,world: World,pos: BlockPos,player: PlayerEntity,hand: Hand,stack: ItemStack): ActionResult;
static method_32209(state: BlockState,world: World,pos: BlockPos,player: PlayerEntity,hand: Hand,stack: ItemStack): ActionResult;
static method_32220(state: BlockState,world: World,pos: BlockPos,player: PlayerEntity,hand: Hand,stack: ItemStack): ActionResult;
static method_32696(statex: BlockState): boolean;
static method_32217(state: BlockState,world: World,pos: BlockPos,player: PlayerEntity,hand: Hand,stack: ItemStack): ActionResult;
static method_32697(state: BlockState,world: World,pos: BlockPos,player: PlayerEntity,hand: Hand,stack: ItemStack): ActionResult;
static method_32214(state: BlockState,world: World,pos: BlockPos,player: PlayerEntity,hand: Hand,stack: ItemStack): ActionResult;
static method_32215(state: BlockState,world: World,pos: BlockPos,player: PlayerEntity,hand: Hand,stack: ItemStack): ActionResult;
static method_32216(state: BlockState,world: World,pos: BlockPos,player: PlayerEntity,hand: Hand,stack: ItemStack): ActionResult;
static method_32208(statex: BlockState): boolean;
static method_32213(statex: BlockState): boolean;
static method_32223(state: BlockState,world: World,pos: BlockPos,player: PlayerEntity,hand: Hand,stack: ItemStack): ActionResult;
static registerBucketBehavior(behavior: Map): void;
static registerBehavior(): void;
static EMPTY_CAULDRON_BEHAVIOR: Map;
static WATER_CAULDRON_BEHAVIOR: Map;
static LAVA_CAULDRON_BEHAVIOR: Map;
static POWDER_SNOW_CAULDRON_BEHAVIOR: Map;
static FILL_WITH_WATER: CauldronBehavior;
static FILL_WITH_LAVA: CauldronBehavior;
static FILL_WITH_POWDER_SNOW: CauldronBehavior;
static CLEAN_SHULKER_BOX: CauldronBehavior;
static CLEAN_BANNER: CauldronBehavior;
static CLEAN_DYEABLE_ITEM: CauldronBehavior;
}

//net.minecraft.server.world.ChunkTicketType
class ChunkTicketType extends JObject{
 toString(): string;
 getExpiryTicks(): long;
 getArgumentComparator(): Comparator;
}
class Static_ChunkTicketType {
static create(name: string,argumentComparator: Comparator): ChunkTicketType;
static create(name: string,argumentComparator: Comparator,expiryTicks: number): ChunkTicketType;
static method_17315(a: Unit,b: Unit): number;
static method_17316(a: Unit,b: Unit): number;
static START: ChunkTicketType;
static DRAGON: ChunkTicketType;
static PLAYER: ChunkTicketType;
static FORCED: ChunkTicketType;
static LIGHT: ChunkTicketType;
static PORTAL: ChunkTicketType;
static POST_TELEPORT: ChunkTicketType;
static UNKNOWN: ChunkTicketType;
}

//net.minecraft.predicate.entity.DamageSourcePredicate
class DamageSourcePredicate extends JObject{
 test(world: ServerWorld,pos: Vec3d,damageSource: DamageSource): boolean;
 test(player: ServerPlayerEntity,damageSource: DamageSource): boolean;
 toJson(): JsonElement;
}
class Static_DamageSourcePredicate {
static fromJson(json: JsonElement): DamageSourcePredicate;
static EMPTY: DamageSourcePredicate;
}

//net.minecraft.data.client.TexturedModel$Factory
interface TexturedModel_Factory extends JObject{
 get(block: Block): TexturedModel;
 andThen(consumer: Consumer): TexturedModel_Factory;
 upload(block: Block,suffix: string,writer: BiConsumer): Identifier;
 upload(block: Block,writer: BiConsumer): Identifier;
}

//net.minecraft.server.command.SayCommand
class SayCommand extends JObject{
}
class Static_SayCommand {
static register(dispatcher: CommandDispatcher): void;
static method_13564(source: ServerCommandSource): boolean;
static method_43657(commandContext: CommandContext,message: SignedMessage): void;
static method_13563(context: CommandContext): number;
}

//net.minecraft.world.gen.feature.NetherPlacedFeatures
class NetherPlacedFeatures extends JObject{
}
class Static_NetherPlacedFeatures {
static bootstrap(featureRegisterable: Registerable): void;
static DELTA: RegistryKey;
static SMALL_BASALT_COLUMNS: RegistryKey;
static LARGE_BASALT_COLUMNS: RegistryKey;
static BASALT_BLOBS: RegistryKey;
static BLACKSTONE_BLOBS: RegistryKey;
static GLOWSTONE_EXTRA: RegistryKey;
static GLOWSTONE: RegistryKey;
static CRIMSON_FOREST_VEGETATION: RegistryKey;
static WARPED_FOREST_VEGETATION: RegistryKey;
static NETHER_SPROUTS: RegistryKey;
static TWISTING_VINES: RegistryKey;
static WEEPING_VINES: RegistryKey;
static PATCH_CRIMSON_ROOTS: RegistryKey;
static BASALT_PILLAR: RegistryKey;
static SPRING_DELTA: RegistryKey;
static SPRING_CLOSED: RegistryKey;
static SPRING_CLOSED_DOUBLE: RegistryKey;
static SPRING_OPEN: RegistryKey;
static PATCH_SOUL_FIRE: RegistryKey;
static PATCH_FIRE: RegistryKey;
}

//net.minecraft.entity.ai.RangedAttackMob
interface RangedAttackMob extends JObject{
 attack(target: LivingEntity,pullProgress: number): void;
}

//net.minecraft.entity.ai.brain.EntityLookTarget
class EntityLookTarget extends JObject, LookTarget{
 toString(): string;
 getEntity(): Entity;
 isSeenBy(entity: LivingEntity): boolean;
 getBlockPos(): BlockPos;
 getPos(): Vec3d;
}

//net.minecraft.client.sound.WeightedSoundSet
class WeightedSoundSet extends JObject, SoundContainer{
 add(container: SoundContainer): void;
 getSound(random: Random): Object;
 getSound(random: Random): Sound;
 getSubtitle(): Text;
 getWeight(): number;
 preload(soundSystem: SoundSystem): void;
}

//net.minecraft.network.packet.c2s.play.SelectMerchantTradeC2SPacket
class SelectMerchantTradeC2SPacket extends JObject, Packet{
 apply(serverPlayPacketListener: ServerPlayPacketListener): void;
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
 getTradeId(): number;
}

//net.minecraft.client.render.model.ModelBakeSettings
interface ModelBakeSettings extends JObject{
 getRotation(): AffineTransformation;
 isUvLocked(): boolean;
}

//net.minecraft.command.argument.TeamArgumentType
class TeamArgumentType extends JObject, ArgumentType{
 parse(reader: StringReader): Object;
 parse(stringReader: StringReader): string;
 getExamples(): Collection;
 listSuggestions(context: CommandContext,builder: SuggestionsBuilder): CompletableFuture;
}
class Static_TeamArgumentType {
static team(): TeamArgumentType;
static method_9481(name: Object): Message;
static getTeam(context: CommandContext,name: string): Team;
static EXAMPLES: Collection;
static UNKNOWN_TEAM_EXCEPTION: DynamicCommandExceptionType;
}

//net.minecraft.server.WorldGenerationProgressListenerFactory
interface WorldGenerationProgressListenerFactory extends JObject{
 create(radius: number): WorldGenerationProgressListener;
}

//net.minecraft.client.font.RenderableGlyph
interface RenderableGlyph extends JObject{
 getWidth(): number;
 getHeight(): number;
 upload(x: number,y: number): void;
 hasColor(): boolean;
 getYMin(): number;
 getAscent(): number;
 getYMax(): number;
 getOversample(): number;
 getBearingX(): number;
 getXMin(): number;
 getXMax(): number;
}

//net.minecraft.predicate.StatePredicate
class StatePredicate extends JObject{
 test(state: FluidState): boolean;
 test(state: BlockState): boolean;
 test(stateManager: StateManager,container: State): boolean;
 check(factory: StateManager,reporter: Consumer): void;
 toJson(): JsonElement;
}
class Static_StatePredicate {
static createPredicate(key: string,json: JsonElement): StatePredicate_Condition;
static method_22517(stateManager: StateManager,consumer: Consumer,condition: StatePredicate_Condition): void;
static asNullableString(json: JsonElement): string;
static method_22520(jsonObject: JsonObject,condition: StatePredicate_Condition): void;
static fromJson(json: JsonElement): StatePredicate;
static ANY: StatePredicate;
}

//net.minecraft.structure.OceanMonumentGenerator$SimpleRoomTopFactory
class OceanMonumentGenerator_SimpleRoomTopFactory extends JObject, OceanMonumentGenerator_PieceFactory{
 generate(direction: Direction,setting: OceanMonumentGenerator_PieceSetting,random: Random): OceanMonumentGenerator_Piece;
 canGenerate(setting: OceanMonumentGenerator_PieceSetting): boolean;
}

//net.minecraft.fluid.Fluids
class Fluids extends JObject{
}
class Static_Fluids {
static register(id: string,value: Fluid): Fluid;
static EMPTY: Fluid;
static FLOWING_WATER: FlowableFluid;
static WATER: FlowableFluid;
static FLOWING_LAVA: FlowableFluid;
static LAVA: FlowableFluid;
}

//net.minecraft.structure.OceanMonumentGenerator$DoubleYZRoomFactory
class OceanMonumentGenerator_DoubleYZRoomFactory extends JObject, OceanMonumentGenerator_PieceFactory{
 generate(direction: Direction,setting: OceanMonumentGenerator_PieceSetting,random: Random): OceanMonumentGenerator_Piece;
 canGenerate(setting: OceanMonumentGenerator_PieceSetting): boolean;
}

//net.minecraft.world.chunk.WorldChunk$DirectBlockEntityTickInvoker
class WorldChunk_DirectBlockEntityTickInvoker extends JObject, BlockEntityTickInvoker{
 getName(): string;
 toString(): string;
 tick(): void;
 isRemoved(): boolean;
 getPos(): BlockPos;
}

//net.minecraft.loot.condition.AlternativeLootCondition$Builder
class AlternativeLootCondition_Builder extends JObject, LootCondition_Builder{
 add(builder: LootCondition_Builder): void;
 build(): LootCondition;
}
class Static_AlternativeLootCondition_Builder {
static method_51729(i: number): LootCondition[];
}

//net.minecraft.client.particle.FlameParticle$Factory
class FlameParticle_Factory extends JObject, ParticleFactory{
 createParticle(defaultParticleType: DefaultParticleType,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
 createParticle(particleEffect: ParticleEffect,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
}

//net.minecraft.client.model.ModelData
class ModelData extends JObject{
 getRoot(): ModelPartData;
}

//net.minecraft.server.network.EntityTrackerEntry
class EntityTrackerEntry extends JObject{
 tick(): void;
 sendPackets(player: ServerPlayerEntity,sender: Consumer): void;
 startTracking(player: ServerPlayerEntity): void;
 stopTracking(player: ServerPlayerEntity): void;
}
class Static_EntityTrackerEntry {
static method_49426(passenger: Entity): void;
static method_49752(list: List,passenger: Entity): boolean;
static streamChangedPassengers(passengers: List,lastPassengers: List): Stream;
static LOGGER: Logger;
static field_29767: number;
}

//net.minecraft.client.toast.ToastManager
class ToastManager extends JObject{
 add(toast: Toast): void;
 clear(): void;
 draw(context: DrawContext): void;
 getClient(): MinecraftClient;
 getNotificationDisplayTimeMultiplier(): number;
 getToast(toastClass: Class,type: Object): Toast;
}
class Static_ToastManager {
static SPACES: number;
static ALL_OCCUPIED: number;
}

//net.minecraft.structure.processor.StructureProcessorRule
class StructureProcessorRule extends JObject{
 test(input: BlockState,currentState: BlockState,originalPos: BlockPos,currentPos: BlockPos,pivot: BlockPos,random: Random): boolean;
 getOutputState(): BlockState;
 getOutputNbt(random: Random,nbt: NbtCompound): NbtCompound;
}
class Static_StructureProcessorRule {
static method_28989(rule: StructureProcessorRule): RuleTest;
static method_28987(rule: StructureProcessorRule): PosRuleTest;
static method_28986(rule: StructureProcessorRule): BlockState;
static method_28985(rule: StructureProcessorRule): RuleBlockEntityModifier;
static method_28988(rule: StructureProcessorRule): RuleTest;
static method_28984(instance: RecordCodecBuilder_Instance): App;
static DEFAULT_BLOCK_ENTITY_MODIFIER: PassthroughRuleBlockEntityModifier;
static CODEC: Codec;
}

//net.minecraft.screen.slot.ForgingSlotsManager$Builder
class ForgingSlotsManager_Builder extends JObject{
 input(slotId: number,x: number,y: number,mayPlace: Predicate): ForgingSlotsManager_Builder;
 build(): ForgingSlotsManager;
 output(slotId: number,x: number,y: number): ForgingSlotsManager_Builder;
}
class Static_ForgingSlotsManager_Builder {
static method_48375(stack: ItemStack): boolean;
}

//net.minecraft.nbt.NbtType$OfFixedSize
interface NbtType_OfFixedSize extends JObject, NbtType{
 skip(input: DataInput): void;
 skip(input: DataInput,count: number): void;
 getSizeInBytes(): number;
}

//net.minecraft.network.packet.c2s.play.UpdateBeaconC2SPacket
class UpdateBeaconC2SPacket extends JObject, Packet{
 apply(serverPlayPacketListener: ServerPlayPacketListener): void;
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
 getSecondaryEffectId(): Optional;
 getPrimaryEffectId(): Optional;
}
class Static_UpdateBeaconC2SPacket {
static method_43367(buf2: PacketByteBuf): StatusEffect;
static method_43366(buf2: PacketByteBuf,primaryEffectId: StatusEffect): void;
static method_43364(buf2: PacketByteBuf,secondaryEffectId: StatusEffect): void;
static method_43365(buf2: PacketByteBuf): StatusEffect;
}

//net.minecraft.command.argument.NbtPathArgumentType$FilteredNamedNode
class NbtPathArgumentType_FilteredNamedNode extends JObject, NbtPathArgumentType_PathNode{
 get(current: NbtElement,results: List): void;
 clear(current: NbtElement): number;
 set(current: NbtElement,source: Supplier): number;
 init(): NbtElement;
 getOrInit(current: NbtElement,source: Supplier,results: List): void;
}

//net.minecraft.inventory.InventoryChangedListener
interface InventoryChangedListener extends JObject{
 onInventoryChanged(sender: Inventory): void;
}

//net.minecraft.util.profiling.jfr.event.ServerTickTimeEvent$Names
class ServerTickTimeEvent_Names extends JObject{
}
class Static_ServerTickTimeEvent_Names {
static AVERAGE_TICK_DURATION: string;
}

//net.minecraft.predicate.StatePredicate$Condition
class StatePredicate_Condition extends JObject{
 test(stateManager: StateManager,state: State): boolean;
 getKey(): string;
 reportMissing(factory: StateManager,reporter: Consumer): void;
 toJson(): JsonElement;
}

//net.minecraft.client.render.chunk.ChunkBuilder$BuiltChunk$Task
class ChunkBuilder_BuiltChunk_Task extends JObject, Comparable{
 run(buffers: BlockBufferBuilderStorage): CompletableFuture;
 compareTo(other: Object): number;
 compareTo(task: ChunkBuilder_BuiltChunk_Task): number;
 cancel(): void;
}

//net.minecraft.command.argument.RegistryPredicateArgumentType$RegistryPredicate
interface RegistryPredicateArgumentType_RegistryPredicate extends JObject, Predicate{
 getKey(): Either;
 asString(): string;
 tryCast(registryRef: RegistryKey): Optional;
}

//net.minecraft.predicate.entity.DistancePredicate
class DistancePredicate extends JObject{
 test(x0: number,y0: number,z0: number,x1: number,y1: number,z1: number): boolean;
 toJson(): JsonElement;
}
class Static_DistancePredicate {
static y(y: NumberRange_FloatRange): DistancePredicate;
static absolute(absolute: NumberRange_FloatRange): DistancePredicate;
static fromJson(json: JsonElement): DistancePredicate;
static horizontal(horizontal: NumberRange_FloatRange): DistancePredicate;
static ANY: DistancePredicate;
}

//net.minecraft.world.gen.FlatLevelGeneratorPresets
class FlatLevelGeneratorPresets extends JObject{
}
class Static_FlatLevelGeneratorPresets {
static of(id: string): RegistryKey;
static bootstrap(presetRegisterable: Registerable): void;
static CLASSIC_FLAT: RegistryKey;
static TUNNELERS_DREAM: RegistryKey;
static WATER_WORLD: RegistryKey;
static OVERWORLD: RegistryKey;
static SNOWY_KINGDOM: RegistryKey;
static BOTTOMLESS_PIT: RegistryKey;
static DESERT: RegistryKey;
static REDSTONE_READY: RegistryKey;
static THE_VOID: RegistryKey;
}

//net.minecraft.network.packet.s2c.play.BlockBreakingProgressS2CPacket
class BlockBreakingProgressS2CPacket extends JObject, Packet{
 apply(clientPlayPacketListener: ClientPlayPacketListener): void;
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
 getEntityId(): number;
 getProgress(): number;
 getPos(): BlockPos;
}

//net.minecraft.entity.ai.brain.task.WalkHomeTask
class WalkHomeTask extends JObject{
}
class Static_WalkHomeTask {
static create(speed: number): Task;
static method_47054(mutableLong: MutableLong,long2LongMap: Long2LongMap,memoryQueryResult: MemoryQueryResult,f: number,world: ServerWorld,entity: PathAwareEntity,time: long): boolean;
static method_47050(long2LongMap: Long2LongMap,mutableInt: MutableInt,mutableLong: MutableLong,pos: BlockPos): boolean;
static method_47052(context: MutableLong,long2LongMap: Long2LongMap,f: number,taskContext: TaskTriggerer_TaskContext): App;
static method_47055(poiType: RegistryEntry): boolean;
static method_47051(mutableLong: MutableLong,entry: Long2LongMap_Entry): boolean;
static method_47053(mutableLong: MutableLong,long2LongMap: Long2LongMap,f: number,walkTarget: MemoryQueryResult,home: MemoryQueryResult): TaskRunnable;
static method_47049(poiType: RegistryEntry): boolean;
static POI_EXPIRY: number;
static MAX_TRIES: number;
static RUN_TIME: number;
static MAX_DISTANCE: number;
}

//net.minecraft.server.world.ChunkHolder$PlayersWatchingChunkProvider
interface ChunkHolder_PlayersWatchingChunkProvider extends JObject{
 getPlayersWatchingChunk(chunkPos: ChunkPos,onlyOnWatchDistanceEdge: boolean): List;
}

//net.minecraft.block.BellBlock$1


//net.minecraft.entity.ai.brain.task.TaskTriggerer$QueryMemory$1


//net.minecraft.loot.function.LootFunction$Builder
interface LootFunction_Builder extends JObject{
 build(): LootFunction;
}

//net.minecraft.client.render.entity.feature.FeatureRenderer
class FeatureRenderer extends JObject{
 render(matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,light: number,entity: Entity,limbAngle: number,limbDistance: number,tickDelta: number,animationProgress: number,headYaw: number,headPitch: number): void;
 getContextModel(): EntityModel;
}
class Static_FeatureRenderer {
static render(contextModel: EntityModel,model: EntityModel,texture: Identifier,matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,light: number,entity: LivingEntity,limbAngle: number,limbDistance: number,age: number,headYaw: number,headPitch: number,tickDelta: number,red: number,green: number,blue: number): void;
static renderModel(model: EntityModel,texture: Identifier,matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,light: number,entity: LivingEntity,red: number,green: number,blue: number): void;
}

//net.minecraft.resource.LifecycledResourceManager
interface LifecycledResourceManager extends JObject, ResourceManager, AutoCloseable{
 close(): void;
}

//net.minecraft.client.realms.Request
class Request extends JObject{
 text(): string;
 getHeader(header: string): string;
 responseCode(): number;
 cookie(key: string,value: string): void;
 withHeader(name: string,value: string): Request;
 getRetryAfterHeader(): number;
}
class Static_Request {
static get(url: string): Request;
static get(url: string,connectTimeoutMillis: number,readTimeoutMillis: number): Request;
static put(url: string,content: string,connectTimeoutMillis: number,readTimeoutMillis: number): Request;
static put(url: string,content: string): Request;
static delete(url: string): Request;
static getHeader(connection: HttpURLConnection,header: string): string;
static post(uri: string,content: string,connectTimeoutMillis: number,readTimeoutMillis: number): Request;
static post(uri: string,content: string): Request;
static cookie(connection: HttpURLConnection,key: string,value: string): void;
static getRetryAfterHeader(connection: HttpURLConnection): number;
static READ_TIMEOUT: number;
static CONNECT_TIMEOUT: number;
}

//net.minecraft.block.RailPlacementHelper
class RailPlacementHelper extends JObject{
 getNeighbors(): List;
 updateBlockState(powered: boolean,forceUpdate: boolean,railShape: RailShape): RailPlacementHelper;
 getBlockState(): BlockState;
}

//net.minecraft.client.gui.hud.DebugHud
class DebugHud extends JObject{
 render(context: DrawContext): void;
 resetChunk(): void;
}
class Static_DebugHud {
static method_27870(object2IntMap: Object2IntMap,group: SpawnGroup): string;
static getBiomeString(biome: RegistryEntry): string;
static method_40203(tag: TagKey): string;
static toMiB(bytes: long): long;
static method_40204(biome_: Biome): string;
static method_40207(tag: TagKey): string;
static method_20541(either: Either): WorldChunk;
static method_40206(biomeKey: RegistryKey): string;
static method_20542(unloaded: ChunkHolder_Unloaded): WorldChunk;
static method_20540(chunk: Chunk): WorldChunk;
static method_20455(types: EnumMap): void;
static TEXT_COLOR: number;
static field_32188: number;
static field_32189: number;
static field_32190: number;
static HEIGHT_MAP_TYPES: Map;
static METRICS_RED: number;
static METRICS_YELLOW: number;
static METRICS_GREEN: number;
}

//net.minecraft.world.gen.densityfunction.DensityFunctionTypes$Unary
interface DensityFunctionTypes_Unary extends JObject, DensityFunction{
 apply(density: number): number;
 fill(densities: number[],applier: DensityFunction_EachApplier): void;
 input(): DensityFunction;
 sample(pos: DensityFunction_NoisePos): number;
}

//net.minecraft.network.packet.s2c.play.EntityAttachS2CPacket
class EntityAttachS2CPacket extends JObject, Packet{
 apply(clientPlayPacketListener: ClientPlayPacketListener): void;
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
 getHoldingEntityId(): number;
 getAttachedEntityId(): number;
}

//net.minecraft.client.texture.SpriteContents
class SpriteContents extends JObject, TextureStitcher_Stitchable, AutoCloseable{
 toString(): string;
 getId(): Identifier;
 close(): void;
 getWidth(): number;
 getHeight(): number;
 upload(x: number,y: number): void;
 isPixelTransparent(frame: number,x: number,y: number): boolean;
 generateMipmaps(mipmapLevels: number): void;
 getDistinctFrameCount(): IntStream;
 createAnimator(): Animator;
}
class Static_SpriteContents {
static method_45814(list: List,index: number,frameTime: number): void;
static method_45813(frameIndex: IntSet,i: number): boolean;
static LOGGER: Logger;
}

//net.minecraft.util.logging.LogReader$1


//net.minecraft.loot.function.ApplyBonusLootFunction$Formula
interface ApplyBonusLootFunction_Formula extends JObject{
 getValue(random: Random,initialCount: number,enchantmentLevel: number): number;
 getId(): Identifier;
 toJson(json: JsonObject,context: JsonSerializationContext): void;
}

//net.minecraft.client.realms.util.RealmsUtil
class RealmsUtil extends JObject{
}
class Static_RealmsUtil {
static uuidToName(uuid: string): string;
static drawPlayerHead(context: DrawContext,x: number,y: number,size: number,uuid: string): void;
static uuidToProfile(uuid: string): GameProfile;
static convertToAgePresentation(milliseconds: long): Text;
static convertToAgePresentation(date: Date): Text;
static SESSION_SERVICE: MinecraftSessionService;
static NOW_TEXT: Text;
static gameProfileCache: LoadingCache;
static SECONDS_PER_MINUTE: number;
static SECONDS_PER_HOUR: number;
static SECONDS_PER_DAY: number;
}

//net.minecraft.data.client.TextureMap
class TextureMap extends JObject{
 put(key: TextureKey,id: Identifier): TextureMap;
 register(key: TextureKey,id: Identifier): TextureMap;
 copy(parent: TextureKey,child: TextureKey): TextureMap;
 getTexture(key: TextureKey): Identifier;
 inherit(parent: TextureKey,child: TextureKey): TextureMap;
 getInherited(): Stream;
 copyAndAdd(key: TextureKey,id: Identifier): TextureMap;
}
class Static_TextureMap {
static of(key: TextureKey,id: Identifier): TextureMap;
static getId(block: Block): Identifier;
static getId(item: Item): Identifier;
static top(top: Block): TextureMap;
static pattern(block: Block): TextureMap;
static all(id: Identifier): TextureMap;
static all(block: Block): TextureMap;
static plant(block: Block): TextureMap;
static plant(id: Identifier): TextureMap;
static particle(item: Item): TextureMap;
static particle(id: Identifier): TextureMap;
static particle(block: Block): TextureMap;
static topBottom(top: Identifier,bottom: Identifier): TextureMap;
static topBottom(block: Block): TextureMap;
static fire1(block: Block): TextureMap;
static sideFrontBack(block: Block): TextureMap;
static fire0(block: Block): TextureMap;
static stemAndUpper(stem: Block,upper: Block): TextureMap;
static pottedAzaleaBush(block: Block): TextureMap;
static textureSideTop(block: Block): TextureMap;
static sideFrontEnd(block: Block): TextureMap;
static frontTopSide(frontTopSideBlock: Block,downBlock: Block): TextureMap;
static paneAndTopForEdge(block: Block,top: Block): TextureMap;
static sculkShrieker(canSummon: boolean): TextureMap;
static method_46198(string: string,path: string): string;
static snifferEgg(age: string): TextureMap;
static method_46199(string: string,path: string): string;
static cross(id: Identifier): TextureMap;
static cross(block: Block): TextureMap;
static stem(block: Block): TextureMap;
static layer0(item: Item): TextureMap;
static layer0(block: Block): TextureMap;
static layer0(id: Identifier): TextureMap;
static crop(id: Identifier): TextureMap;
static flowerbed(block: Block): TextureMap;
static wool(block: Block): TextureMap;
static wool(id: Identifier): TextureMap;
static fan(block: Block): TextureMap;
static torch(block: Block): TextureMap;
static torch(id: Identifier): TextureMap;
static rail(id: Identifier): TextureMap;
static rail(block: Block): TextureMap;
static cauldron(content: Identifier): TextureMap;
static candleCake(block: Block,lit: boolean): TextureMap;
static frontSideWithCustomBottom(block: Block,bottom: Block): TextureMap;
static sideEnd(side: Identifier,end: Identifier): TextureMap;
static sideEnd(block: Block): TextureMap;
static sideTopBottom(block: Block): TextureMap;
static sideAndTop(block: Block): TextureMap;
static sideFrontTop(block: Block): TextureMap;
static sideFrontTopBottom(block: Block): TextureMap;
static sideAndEndForTop(block: Block): TextureMap;
static wallSideEnd(block: Block): TextureMap;
static wallSideTopBottom(block: Block): TextureMap;
static texture(block: Block): TextureMap;
static texture(id: Identifier): TextureMap;
static campfire(block: Block): TextureMap;
static lantern(block: Block): TextureMap;
static layered(layer0: Identifier,layer1: Identifier,layer2: Identifier): TextureMap;
static layered(layer0: Identifier,layer1: Identifier): TextureMap;
static getSubId(item: Item,suffix: string): Identifier;
static getSubId(block: Block,suffix: string): Identifier;
static textureParticle(block: Block): TextureMap;
}

//net.minecraft.client.render.VertexFormat$1


//net.minecraft.entity.EntityData
interface EntityData extends JObject{
}

//net.minecraft.world.gen.heightprovider.HeightProvider
class HeightProvider extends JObject{
 get(random: Random,context: HeightContext): number;
 getType(): HeightProviderType;
}
class Static_HeightProvider {
static method_35390(provider: HeightProvider): Either;
static method_35392(provider: HeightProvider): HeightProvider;
static method_35389(either: Either): HeightProvider;
static OFFSET_OR_HEIGHT_CODEC: Codec;
static CODEC: Codec;
}

//net.minecraft.scoreboard.ScoreboardCriterion
class ScoreboardCriterion extends JObject{
 getName(): string;
 isReadOnly(): boolean;
 getDefaultRenderType(): ScoreboardCriterion_RenderType;
}
class Static_ScoreboardCriterion {
static create(name: string,readOnly: boolean,defaultRenderType: ScoreboardCriterion_RenderType): ScoreboardCriterion;
static create(name: string): ScoreboardCriterion;
static getOrCreateStatCriterion(statType: StatType,id: Identifier): Optional;
static getOrCreateStatCriterion(name: string): Optional;
static getAllSimpleCriteria(): Set;
static method_17948(string: string,i: number,type: StatType): Optional;
static SIMPLE_CRITERIA: Map;
static CRITERIA: Map;
static DUMMY: ScoreboardCriterion;
static TRIGGER: ScoreboardCriterion;
static DEATH_COUNT: ScoreboardCriterion;
static PLAYER_KILL_COUNT: ScoreboardCriterion;
static TOTAL_KILL_COUNT: ScoreboardCriterion;
static HEALTH: ScoreboardCriterion;
static FOOD: ScoreboardCriterion;
static AIR: ScoreboardCriterion;
static ARMOR: ScoreboardCriterion;
static XP: ScoreboardCriterion;
static LEVEL: ScoreboardCriterion;
static TEAM_KILLS: ScoreboardCriterion[];
static KILLED_BY_TEAMS: ScoreboardCriterion[];
}

//net.minecraft.data.DataCache$Runner
interface DataCache_Runner extends JObject{
 update(writer: DataWriter): CompletableFuture;
}

//net.minecraft.entity.LargeEntitySpawnHelper
class LargeEntitySpawnHelper extends JObject{
}
class Static_LargeEntitySpawnHelper {
static trySpawnAt(entityType: EntityType,reason: SpawnReason,world: ServerWorld,pos: BlockPos,tries: number,horizontalRange: number,verticalRange: number,requirements: LargeEntitySpawnHelper_Requirements): Optional;
static findSpawnPos(world: ServerWorld,verticalRange: number,pos: BlockPos_Mutable,requirements: LargeEntitySpawnHelper_Requirements): boolean;
}

//net.minecraft.structure.StructurePiece$BlockRandomizer
class StructurePiece_BlockRandomizer extends JObject{
 setBlock(random: Random,x: number,y: number,z: number,placeBlock: boolean): void;
 getBlock(): BlockState;
}

//net.minecraft.client.realms.gui.screen.RealmsNotificationsScreen$2


//net.minecraft.client.realms.gui.screen.RealmsNotificationsScreen$3


//net.minecraft.util.shape.VoxelSet
class VoxelSet extends JObject{
 isEmpty(): boolean;
 contains(x: number,y: number,z: number): boolean;
 contains(cycle: AxisCycleDirection,x: number,y: number,z: number): boolean;
 set(x: number,y: number,z: number): void;
 getSize(axis: Direction_Axis): number;
 getMin(axis: Direction_Axis): number;
 getMax(axis: Direction_Axis): number;
 getYSize(): number;
 getXSize(): number;
 getZSize(): number;
 getStartingAxisCoord(axis: Direction_Axis,from: number,to: number): number;
 inBoundsAndContains(x: number,y: number,z: number): boolean;
 inBoundsAndContains(cycle: AxisCycleDirection,x: number,y: number,z: number): boolean;
 forEachDirection(positionConsumer: VoxelSet_PositionConsumer): void;
 forEachEdge(callback: VoxelSet_PositionBiConsumer,coalesce: boolean): void;
 forEachBox(consumer: VoxelSet_PositionBiConsumer,coalesce: boolean): void;
 getEndingAxisCoord(axis: Direction_Axis,from: number,to: number): number;
}
class Static_VoxelSet {
static AXES: Direction_Axis;
}

//net.minecraft.client.particle.DamageParticle$DefaultFactory
class DamageParticle_DefaultFactory extends JObject, ParticleFactory{
 createParticle(defaultParticleType: DefaultParticleType,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
 createParticle(particleEffect: ParticleEffect,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
}

//net.minecraft.screen.ScreenHandlerSyncHandler
interface ScreenHandlerSyncHandler extends JObject{
 updateState(handler: ScreenHandler,stacks: DefaultedList,cursorStack: ItemStack,properties: number[]): void;
 updateSlot(handler: ScreenHandler,slot: number,stack: ItemStack): void;
 updateProperty(handler: ScreenHandler,property: number,value: number): void;
 updateCursorStack(handler: ScreenHandler,stack: ItemStack): void;
}

//net.minecraft.client.particle.SweepAttackParticle$Factory
class SweepAttackParticle_Factory extends JObject, ParticleFactory{
 createParticle(defaultParticleType: DefaultParticleType,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
 createParticle(particleEffect: ParticleEffect,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
}

//net.minecraft.world.gen.feature.ConfiguredFeatures
class ConfiguredFeatures extends JObject{
}
class Static_ConfiguredFeatures {
static of(id: string): RegistryKey;
static register(registerable: Registerable,key: RegistryKey,feature: Feature): void;
static register(registerable: Registerable,key: RegistryKey,feature: Feature,config: FeatureConfig): void;
static bootstrap(featureRegisterable: Registerable): void;
static createRandomPatchFeatureConfig(feature: Feature,config: FeatureConfig,predicateBlocks: List): RandomPatchFeatureConfig;
static createRandomPatchFeatureConfig(feature: Feature,config: FeatureConfig): RandomPatchFeatureConfig;
static createRandomPatchFeatureConfig(tries: number,feature: RegistryEntry): RandomPatchFeatureConfig;
static createRandomPatchFeatureConfig(feature: Feature,config: FeatureConfig,predicateBlocks: List,tries: number): RandomPatchFeatureConfig;
static createBlockPredicate(validGround: List): BlockPredicate;
}

//net.minecraft.client.gui.screen.ingame.BookScreen$WritableBookContents
class BookScreen_WritableBookContents extends JObject, BookScreen_Contents{
 getPageCount(): number;
 getPageUnchecked(index: number): StringVisitable;
}
class Static_BookScreen_WritableBookContents {
static getPages(stack: ItemStack): List;
}

//net.minecraft.entity.ai.brain.BlockPosLookTarget
class BlockPosLookTarget extends JObject, LookTarget{
 toString(): string;
 isSeenBy(entity: LivingEntity): boolean;
 getBlockPos(): BlockPos;
 getPos(): Vec3d;
}

//net.minecraft.client.gui.screen.world.EditGameRulesScreen$RuleCategoryWidget$1


//net.minecraft.client.gui.screen.StatsListener
interface StatsListener extends JObject{
 onStatsReady(): void;
}
class Static_StatsListener {
static PROGRESS_BAR_STAGES: String[];
}

//net.minecraft.client.gui.widget.CyclingButtonWidget$Builder
class CyclingButtonWidget_Builder extends JObject{
 values(defaults: List,alternatives: List): CyclingButtonWidget_Builder;
 values(alternativeToggle: BooleanSupplier,defaults: List,alternatives: List): CyclingButtonWidget_Builder;
 values(values: CyclingButtonWidget_Values): CyclingButtonWidget_Builder;
 values(values: Object[]): CyclingButtonWidget_Builder;
 values(values: Collection): CyclingButtonWidget_Builder;
 build(x: number,y: number,width: number,height: number,optionText: Text,callback: CyclingButtonWidget_UpdateCallback): CyclingButtonWidget;
 build(x: number,y: number,width: number,height: number,optionText: Text): CyclingButtonWidget;
 narration(narrationMessageFactory: Function): CyclingButtonWidget_Builder;
 omitKeyText(): CyclingButtonWidget_Builder;
 tooltip(tooltipFactory: SimpleOption_TooltipFactory): CyclingButtonWidget_Builder;
 initially(value: Object): CyclingButtonWidget_Builder;
}
class Static_CyclingButtonWidget_Builder {
static method_32625(value: Object): Tooltip;
static method_35724(button: CyclingButtonWidget,value: Object): void;
}

//net.minecraft.command.argument.NbtElementArgumentType
class NbtElementArgumentType extends JObject, ArgumentType{
 parse(stringReader: StringReader): NbtElement;
 parse(reader: StringReader): Object;
 getExamples(): Collection;
}
class Static_NbtElementArgumentType {
static nbtElement(): NbtElementArgumentType;
static getNbtElement(context: CommandContext,name: string): NbtElement;
static EXAMPLES: Collection;
}

//net.minecraft.world.GameRules$Key
class GameRules_Key extends JObject{
 getName(): string;
 equals(o: Object): boolean;
 toString(): string;
 hashCode(): number;
 getCategory(): GameRules_Category;
 getTranslationKey(): string;
}

//net.minecraft.server.ServerConfigList
class ServerConfigList extends JObject{
 add(entry: ServerConfigEntry): void;
 remove(entry: ServerConfigEntry): void;
 remove(key: Object): void;
 get(key: Object): ServerConfigEntry;
 values(): Collection;
 load(): void;
 isEmpty(): boolean;
 save(): void;
 getFile(): File;
 getNames(): String[];
}
class Static_ServerConfigList {
static method_24897(entry: ServerConfigEntry): JsonObject;
static LOGGER: Logger;
static GSON: Gson;
}

//net.minecraft.predicate.entity.VariantPredicates
class VariantPredicates extends JObject{
 createPredicate(variant: Object): TypeSpecificPredicate;
 getDeserializer(): TypeSpecificPredicate_Deserializer;
}
class Static_VariantPredicates {
static create(registry: Registry,variantGetter: Function): VariantPredicates;
static create(codec: Codec,variantGetter: Function): VariantPredicates;
static VARIANT_KEY: string;
}

//net.minecraft.unused.packageinfo.PackageInfo8091
interface PackageInfo8091 extends JObject{
}

//net.minecraft.util.PathUtil
class PathUtil extends JObject{
}
class Static_PathUtil {
static split(path: string): DataResult;
static getPath(root: Path,paths: List): Path;
static createDirectories(path: Path): void;
static getNextUniqueName(path: Path,name: string,extension: string): string;
static getResourcePath(path: Path,resourceName: string,extension: string): Path;
static method_49680(string: string,string2: string): string;
static method_49681(string: string,string2: string): string;
static normalizeToPosix(path: string): string;
static isFileNameValid(name: string): boolean;
static method_49682(string: string): string;
static method_49683(string: string): string;
static isAllowedName(path: Path): boolean;
static isNormal(path: Path): boolean;
static validatePath(paths: String[]): void;
static getPosixFullPath(path: string): string;
static FILE_NAME_WITH_COUNT: Pattern;
static MAX_NAME_LENGTH: number;
static RESERVED_WINDOWS_NAMES: Pattern;
static VALID_FILE_NAME: Pattern;
}

//net.minecraft.loot.provider.number.UniformLootNumberProvider$Serializer
class UniformLootNumberProvider_Serializer extends JObject, JsonSerializer{
 fromJson(json: JsonObject,context: JsonDeserializationContext): Object;
 fromJson(jsonObject: JsonObject,jsonDeserializationContext: JsonDeserializationContext): UniformLootNumberProvider;
 toJson(json: JsonObject,object: Object,context: JsonSerializationContext): void;
 toJson(jsonObject: JsonObject,uniformLootNumberProvider: UniformLootNumberProvider,jsonSerializationContext: JsonSerializationContext): void;
}

//net.minecraft.client.particle.ParticleTextureData
class ParticleTextureData extends JObject{
 getTextureList(): List;
}
class Static_ParticleTextureData {
static load(json: JsonObject): ParticleTextureData;
static method_18827(texture: JsonElement): string;
}

//net.minecraft.world.gen.root.RootPlacerType
class RootPlacerType extends JObject{
 getCodec(): Codec;
}
class Static_RootPlacerType {
static register(id: string,codec: Codec): RootPlacerType;
static MANGROVE_ROOT_PLACER: RootPlacerType;
}

//net.minecraft.command.argument.GameModeArgumentType
class GameModeArgumentType extends JObject, ArgumentType{
 parse(reader: StringReader): Object;
 parse(stringReader: StringReader): GameMode;
 getExamples(): Collection;
 listSuggestions(context: CommandContext,builder: SuggestionsBuilder): CompletableFuture;
}
class Static_GameModeArgumentType {
static gameMode(): GameModeArgumentType;
static method_47386(gameMode: Object): Message;
static getGameMode(context: CommandContext,name: string): GameMode;
static EXAMPLES: Collection;
static VALUES: GameMode[];
static INVALID_GAME_MODE_EXCEPTION: DynamicCommandExceptionType;
}

//net.minecraft.client.network.ClientCommandSource
class ClientCommandSource extends JObject, CommandSource{
 getWorldKeys(): Set;
 getChatSuggestions(): Collection;
 onChatSuggestions(action: ChatSuggestionsS2CPacket_Action,suggestions: List): void;
 getPlayerNames(): Collection;
 getTeamNames(): Collection;
 hasPermissionLevel(level: number): boolean;
 getCompletions(context: CommandContext): CompletableFuture;
 getSoundIds(): Stream;
 getRecipeIds(): Stream;
 listIdSuggestions(registryRef: RegistryKey,suggestedIdType: CommandSource_SuggestedIdType,builder: SuggestionsBuilder,context: CommandContext): CompletableFuture;
 onCommandSuggestions(completionId: number,suggestions: Suggestions): void;
 getBlockPositionSuggestions(): Collection;
 getEnabledFeatures(): FeatureSet;
 getRegistryManager(): DynamicRegistryManager;
 getPositionSuggestions(): Collection;
 getEntitySuggestions(): Collection;
}
class Static_ClientCommandSource {
static format(i: number): string;
static format(d: number): string;
}

//net.minecraft.item.map.MapBannerMarker
class MapBannerMarker extends JObject{
 getName(): Text;
 equals(o: Object): boolean;
 hashCode(): number;
 getKey(): string;
 getIconType(): MapIcon_Type;
 getColor(): DyeColor;
 getNbt(): NbtCompound;
 getPos(): BlockPos;
}
class Static_MapBannerMarker {
static fromWorldBlock(blockView: BlockView,blockPos: BlockPos): MapBannerMarker;
static fromNbt(nbt: NbtCompound): MapBannerMarker;
}

//net.minecraft.block.piston.PistonHandler
class PistonHandler extends JObject{
 getMotionDirection(): Direction;
 getBrokenBlocks(): List;
 calculatePush(): boolean;
 getMovedBlocks(): List;
}
class Static_PistonHandler {
static isBlockSticky(state: BlockState): boolean;
static isAdjacentBlockStuck(state: BlockState,adjacentState: BlockState): boolean;
static MAX_MOVABLE_BLOCKS: number;
}

//net.minecraft.util.collection.DataPool$Builder
class DataPool_Builder extends JObject{
 add(object: Object,weight: number): DataPool_Builder;
 build(): DataPool;
}

//net.minecraft.item.map.MapState$UpdateData
class MapState_UpdateData extends JObject{
 setColorsTo(mapState: MapState): void;
 startX: number;
 startZ: number;
 width: number;
 height: number;
 colors: byte[];
}

//net.minecraft.village.TradeOffers
class TradeOffers extends JObject{
}
class Static_TradeOffers {
static copyToFastUtilMap(map: ImmutableMap): Int2ObjectMap;
static method_16929(map: HashMap): void;
static DEFAULT_MAX_USES: number;
static COMMON_MAX_USES: number;
static RARE_MAX_USES: number;
static NOVICE_SELL_XP: number;
static NOVICE_BUY_XP: number;
static APPRENTICE_SELL_XP: number;
static APPRENTICE_BUY_XP: number;
static JOURNEYMAN_SELL_XP: number;
static JOURNEYMAN_BUY_XP: number;
static EXPERT_SELL_XP: number;
static EXPERT_BUY_XP: number;
static MASTER_TRADE_XP: number;
static LOW_PRICE_MULTIPLIER: number;
static HIGH_PRICE_MULTIPLIER: number;
static PROFESSION_TO_LEVELED_TRADE: Map;
static WANDERING_TRADER_TRADES: Int2ObjectMap;
}

//net.minecraft.client.realms.gui.screen.RealmsAcceptRejectButton
class RealmsAcceptRejectButton extends JObject{
 render(context: DrawContext,x: number,y: number,mouseX: number,mouseY: number): void;
 handleClick(index: number): void;
 getRight(): number;
 getBottom(): number;
 width: number;
 height: number;
 x: number;
 y: number;
}
class Static_RealmsAcceptRejectButton {
static render(context: DrawContext,buttons: List,selectionList: RealmsObjectSelectionList,x: number,y: number,mouseX: number,mouseY: number): void;
static handleClick(selectionList: RealmsObjectSelectionList,entry: AlwaysSelectedEntryListWidget_Entry,buttons: List,button: number,mouseX: number,mouseY: number): void;
}

//net.minecraft.data.server.recipe.RecipeJsonProvider
interface RecipeJsonProvider extends JObject{
 serialize(json: JsonObject): void;
 getRecipeId(): Identifier;
 getAdvancementId(): Identifier;
 toAdvancementJson(): JsonObject;
 toJson(): JsonObject;
 getSerializer(): RecipeSerializer;
}

//net.minecraft.block.entity.BeaconBlockEntity$BeamSegment
class BeaconBlockEntity_BeamSegment extends JObject{
 getHeight(): number;
 getColor(): number[];
}

//net.minecraft.client.WindowEventHandler
interface WindowEventHandler extends JObject{
 onCursorEnterChanged(): void;
 onWindowFocusChanged(focused: boolean): void;
 onResolutionChanged(): void;
}

//net.minecraft.data.family.BlockFamily
class BlockFamily extends JObject{
 getVariant(variant: BlockFamily_Variant): Block;
 getVariants(): Map;
 getBaseBlock(): Block;
 shouldGenerateModels(): boolean;
 getGroup(): Optional;
 getUnlockCriterionName(): Optional;
 shouldGenerateRecipes(enabledFeatures: FeatureSet): boolean;
}

//net.minecraft.network.packet.s2c.play.LightUpdateS2CPacket
class LightUpdateS2CPacket extends JObject, Packet{
 apply(clientPlayPacketListener: ClientPlayPacketListener): void;
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
 getData(): LightData;
 getChunkX(): number;
 getChunkZ(): number;
}

//net.minecraft.client.render.Camera
class Camera extends JObject{
 update(area: BlockView,focusedEntity: Entity,thirdPerson: boolean,inverseView: boolean,tickDelta: number): void;
 reset(): void;
 isThirdPerson(): boolean;
 getDiagonalPlane(): Vector3f;
 getVerticalPlane(): Vector3f;
 getBlockPos(): BlockPos;
 updateEyeHeight(): void;
 getSubmersionType(): CameraSubmersionType;
 getPos(): Vec3d;
 getRotation(): Quaternionf;
 getPitch(): number;
 getYaw(): number;
 getProjection(): Camera_Projection;
 getFocusedEntity(): Entity;
 getHorizontalPlane(): Vector3f;
 isReady(): boolean;
}
class Static_Camera {
static field_32133: number;
}

//net.minecraft.network.packet.s2c.play.DifficultyS2CPacket
class DifficultyS2CPacket extends JObject, Packet{
 apply(clientPlayPacketListener: ClientPlayPacketListener): void;
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
 isDifficultyLocked(): boolean;
 getDifficulty(): Difficulty;
}

//net.minecraft.world.event.BlockPositionSource$Type
class BlockPositionSource_Type extends JObject, PositionSourceType{
 readFromBuf(buf: PacketByteBuf): PositionSource;
 readFromBuf(packetByteBuf: PacketByteBuf): BlockPositionSource;
 writeToBuf(buf: PacketByteBuf,positionSource: PositionSource): void;
 writeToBuf(packetByteBuf: PacketByteBuf,blockPositionSource: BlockPositionSource): void;
 getCodec(): Codec;
}

//net.minecraft.world.border.WorldBorder
class WorldBorder extends JObject{
 load(properties: WorldBorder_Properties): void;
 contains(box: Box): boolean;
 contains(pos: ChunkPos): boolean;
 contains(pos: BlockPos): boolean;
 contains(x: number,z: number,margin: number): boolean;
 contains(x: number,z: number): boolean;
 write(): WorldBorder_Properties;
 getSize(): number;
 setSize(size: number): void;
 tick(): void;
 removeListener(listener: WorldBorderListener): void;
 addListener(listener: WorldBorderListener): void;
 setWarningTime(warningTime: number): void;
 setMaxRadius(maxRadius: number): void;
 interpolateSize(fromSize: number,toSize: number,time: long): void;
 setWarningBlocks(warningBlocks: number): void;
 getMaxRadius(): number;
 setCenter(x: number,z: number): void;
 getDistanceInsideBorder(x: number,z: number): number;
 getDistanceInsideBorder(entity: Entity): number;
 getWarningTime(): number;
 getWarningBlocks(): number;
 clamp(x: number,y: number,z: number): BlockPos;
 getCenterX(): number;
 getBoundNorth(): number;
 getCenterZ(): number;
 getBoundWest(): number;
 getBoundEast(): number;
 getSizeLerpTime(): long;
 getStage(): WorldBorderStage;
 getBoundSouth(): number;
 getSizeLerpTarget(): number;
 getShrinkingSpeed(): number;
 asVoxelShape(): VoxelShape;
 canCollide(entity: Entity,box: Box): boolean;
 getSafeZone(): number;
 getDamagePerBlock(): number;
 setDamagePerBlock(damagePerBlock: number): void;
 setSafeZone(safeZone: number): void;
}
class Static_WorldBorder {
static STATIC_AREA_SIZE: number;
static MAX_CENTER_COORDINATES: number;
static DEFAULT_BORDER: WorldBorder_Properties;
}

//net.minecraft.util.math.BlockPointer
interface BlockPointer extends JObject, Position{
 getX(): number;
 getY(): number;
 getBlockEntity(): BlockEntity;
 getWorld(): ServerWorld;
 getBlockState(): BlockState;
 getZ(): number;
 getPos(): BlockPos;
}

//net.minecraft.util.math.AffineTransformations
class AffineTransformations extends JObject{
}
class Static_AffineTransformations {
static method_23222(map: EnumMap): void;
static method_35829(transformation: AffineTransformation): AffineTransformation;
static setupUvLock(transformation: AffineTransformation): AffineTransformation;
static method_23223(map: EnumMap): void;
static uvLock(transformation: AffineTransformation,dir: Direction,warning: Supplier): AffineTransformation;
static LOGGER: Logger;
static DIRECTION_ROTATIONS: Map;
static INVERTED_DIRECTION_ROTATIONS: Map;
}

//net.minecraft.entity.ai.brain.task.RemoveOffHandItemTask
class RemoveOffHandItemTask extends JObject{
}
class Static_RemoveOffHandItemTask {
static create(): Task;
static method_47300(context: TaskTriggerer_TaskContext): App;
static method_47299(world: ServerWorld,entity: PiglinEntity,time: long): boolean;
static method_47301(admiringItem: MemoryQueryResult): TaskRunnable;
}

//net.minecraft.client.Keyboard
class Keyboard extends JObject{
 setup(window: long): void;
 pollDebugCrash(): void;
 getClipboard(): string;
 setClipboard(clipboard: string): void;
 onKey(window: long,key: number,scancode: number,action: number,modifiers: number): void;
}
class Static_Keyboard {
static method_49711(path: Path,style: Style): Style;
static method_1454(i: number,screen: Screen,bls: boolean[],j: number,k: number,l: number): void;
static method_1458(element: Element,i: number,j: number): void;
static method_1473(element: Element,c: char,i: number): void;
static DEBUG_CRASH_TIME: number;
}

//net.minecraft.world.chunk.ArrayPalette
class ArrayPalette extends JObject, Palette{
 index(object: Object): number;
 get(id: number): Object;
 copy(): Palette;
 getSize(): number;
 getPacketSize(): number;
 readPacket(buf: PacketByteBuf): void;
 hasAny(predicate: Predicate): boolean;
 writePacket(buf: PacketByteBuf): void;
}
class Static_ArrayPalette {
static create(bits: number,idList: IndexedIterable,listener: PaletteResizeListener,list: List): Palette;
}

//net.minecraft.entity.decoration.DisplayEntity$1


//net.minecraft.client.report.AbuseReportSender
interface AbuseReportSender extends JObject{
 canSendReports(): boolean;
 send(id: UUID,report: AbuseReport): CompletableFuture;
 getLimits(): AbuseReportLimits;
}
class Static_AbuseReportSender {
static create(environment: ReporterEnvironment,userApiService: UserApiService): AbuseReportSender;
}

//net.minecraft.block.dispenser.DispenserBehavior
interface DispenserBehavior extends JObject{
 dispense(pointer: BlockPointer,stack: ItemStack): ItemStack;
}
class Static_DispenserBehavior {
static registerDefaults(): void;
static setEntityPosition(pointer: BlockPointer,entity: Entity,direction: Direction): void;
static doDispense(pointer: BlockPointer,stack: ItemStack): ItemStack;
static LOGGER: Logger;
static NOOP: DispenserBehavior;
}

//net.minecraft.client.render.block.FluidRenderer$1


//net.minecraft.structure.StructureTemplate$PalettedBlockInfoList
class StructureTemplate_PalettedBlockInfoList extends JObject{
 getAll(): List;
 getAllOf(block: Block): List;
}
class Static_StructureTemplate_PalettedBlockInfoList {
static method_27127(block: Block,info: StructureTemplate_StructureBlockInfo): boolean;
}

//net.minecraft.structure.BastionBridgeData
class BastionBridgeData extends JObject{
}
class Static_BastionBridgeData {
static bootstrap(poolRegisterable: Registerable): void;
}

//net.minecraft.world.gen.feature.GeodeLayerConfig
class GeodeLayerConfig extends JObject{
 fillingProvider: BlockStateProvider;
 innerLayerProvider: BlockStateProvider;
 alternateInnerLayerProvider: BlockStateProvider;
 middleLayerProvider: BlockStateProvider;
 outerLayerProvider: BlockStateProvider;
 innerBlocks: List;
 cannotReplace: TagKey;
 invalidBlocks: TagKey;
}
class Static_GeodeLayerConfig {
static method_31890(config: GeodeLayerConfig): BlockStateProvider;
static method_31891(config: GeodeLayerConfig): BlockStateProvider;
static method_31888(config: GeodeLayerConfig): BlockStateProvider;
static method_31889(config: GeodeLayerConfig): BlockStateProvider;
static method_31892(config: GeodeLayerConfig): BlockStateProvider;
static method_36995(config: GeodeLayerConfig): TagKey;
static method_37255(config: GeodeLayerConfig): TagKey;
static method_31886(config: GeodeLayerConfig): List;
static method_31887(instance: RecordCodecBuilder_Instance): App;
static CODEC: Codec;
}

//net.minecraft.world.chunk.BelowZeroRetrogen
class BelowZeroRetrogen extends JObject{
 isColumnMissingBedrock(x: number,z: number): boolean;
 hasMissingBedrock(): boolean;
 fillColumnsWithAirIfMissingBedrock(chunk: ProtoChunk): void;
 getTargetStatus(): ChunkStatus;
}
class Static_BelowZeroRetrogen {
static method_39471(protoChunk: ProtoChunk,pos: BlockPos): void;
static method_49529(): string;
static method_39323(belowZeroRetrogen: BelowZeroRetrogen): Optional;
static method_39322(status: ChunkStatus): DataResult;
static method_39768(biomeSupplier: BiomeSupplier,predicate: Predicate,chunk: Chunk,x: number,y: number,z: number,noise: MultiNoiseUtil_MultiNoiseSampler): RegistryEntry;
static method_39324(bedrockBitSet: BitSet): LongStream;
static method_39321(instance: RecordCodecBuilder_Instance): App;
static method_39325(serializedBedrockBitSet: LongStream): BitSet;
static method_39896(protoChunk: ProtoChunk,pos: BlockPos): void;
static replaceOldBedrock(chunk: ProtoChunk): void;
static fromNbt(nbt: NbtCompound): BelowZeroRetrogen;
static getBiomeSupplier(biomeSupplier: BiomeSupplier,chunk: Chunk): BiomeSupplier;
static EMPTY_MISSING_BEDROCK_BIT_SET: BitSet;
static MISSING_BEDROCK_CODEC: Codec;
static STATUS_CODEC: Codec;
static CODEC: Codec;
static CAVE_BIOMES: Set;
static BELOW_ZERO_VIEW: HeightLimitView;
}

//net.minecraft.nbt.NbtOps$Merger
interface NbtOps_Merger extends JObject{
 merge(nbts: Stream): NbtOps_Merger;
 merge(nbts: Iterable): NbtOps_Merger;
 merge(nbt: NbtElement): NbtOps_Merger;
 getResult(): NbtElement;
}

//net.minecraft.loot.LootManager$1


//net.minecraft.structure.OceanMonumentGenerator$DoubleZRoomFactory
class OceanMonumentGenerator_DoubleZRoomFactory extends JObject, OceanMonumentGenerator_PieceFactory{
 generate(direction: Direction,setting: OceanMonumentGenerator_PieceSetting,random: Random): OceanMonumentGenerator_Piece;
 canGenerate(setting: OceanMonumentGenerator_PieceSetting): boolean;
}

//net.minecraft.client.render.LightmapTextureManager
class LightmapTextureManager extends JObject, AutoCloseable{
 update(delta: number): void;
 close(): void;
 enable(): void;
 tick(): void;
 disable(): void;
}
class Static_LightmapTextureManager {
static pack(block: number,sky: number): number;
static getBlockLightCoordinates(light: number): number;
static getSkyLightCoordinates(light: number): number;
static clamp(vec: Vector3f): void;
static getBrightness(type: DimensionType,lightLevel: number): number;
static MAX_LIGHT_COORDINATE: number;
static MAX_SKY_LIGHT_COORDINATE: number;
static MAX_BLOCK_LIGHT_COORDINATE: number;
}

//net.minecraft.client.texture.Sprite$TickableAnimation
interface Sprite_TickableAnimation extends JObject, AutoCloseable{
 close(): void;
 tick(): void;
}

//net.minecraft.world.gen.chunk.placement.StructurePlacementType
interface StructurePlacementType extends JObject{
 codec(): Codec;
}
class Static_StructurePlacementType {
static register(id: string,codec: Codec): StructurePlacementType;
static method_40176(codec: Codec): Codec;
static RANDOM_SPREAD: StructurePlacementType;
static CONCENTRIC_RINGS: StructurePlacementType;
}

//net.minecraft.world.timer.TimerCallbackSerializer
class TimerCallbackSerializer extends JObject{
 deserialize(nbt: NbtCompound): TimerCallback;
 registerSerializer(serializer: TimerCallback_Serializer): TimerCallbackSerializer;
 serialize(callback: TimerCallback): NbtCompound;
}
class Static_TimerCallbackSerializer {
static LOGGER: Logger;
static INSTANCE: TimerCallbackSerializer;
}

//net.minecraft.world.chunk.light.LightSourceView
interface LightSourceView extends JObject, BlockView{
 getChunkSkyLight(): ChunkSkyLight;
 forEachLightSource(callback: BiConsumer): void;
}

//net.minecraft.client.font.BitmapFont$BitmapFontGlyph$1


//net.minecraft.unused.packageinfo.PackageInfo8058
interface PackageInfo8058 extends JObject{
}

//net.minecraft.client.particle.FishingParticle$Factory
class FishingParticle_Factory extends JObject, ParticleFactory{
 createParticle(defaultParticleType: DefaultParticleType,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
 createParticle(particleEffect: ParticleEffect,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
}

//net.minecraft.client.render.entity.model.ModelWithWaterPatch
interface ModelWithWaterPatch extends JObject{
 getWaterPatch(): ModelPart;
}

//net.minecraft.data.server.recipe.RecipeJsonBuilder$CraftingRecipeJsonProvider
class RecipeJsonBuilder_CraftingRecipeJsonProvider extends JObject, RecipeJsonProvider{
 serialize(json: JsonObject): void;
}

//net.minecraft.client.gui.screen.narration.ScreenNarrator$MessageBuilder
class ScreenNarrator_MessageBuilder extends JObject, NarrationMessageBuilder{
 put(part: NarrationPart,narration: Narration): void;
 nextMessage(): NarrationMessageBuilder;
}
class Static_ScreenNarrator_MessageBuilder {
static method_37050(partIndex: ScreenNarrator_PartIndex): ScreenNarrator_Message;
}

//net.minecraft.world.poi.PointOfInterest
class PointOfInterest extends JObject{
 equals(o: Object): boolean;
 hashCode(): number;
 getType(): RegistryEntry;
 hasSpace(): boolean;
 isOccupied(): boolean;
 getPos(): BlockPos;
 getFreeTickets(): number;
}
class Static_PointOfInterest {
static createCodec(updateListener: Runnable): Codec;
static method_28360(runnable: Runnable,instance: RecordCodecBuilder_Instance): App;
static method_28358(poi: PointOfInterest): Integer;
static method_28361(poi: PointOfInterest): RegistryEntry;
static method_28362(poi: PointOfInterest): BlockPos;
}

//net.minecraft.client.render.block.entity.BlockEntityRendererFactory$Context
class BlockEntityRendererFactory_Context extends JObject{
 getLayerRenderDispatcher(): EntityModelLoader;
 getTextRenderer(): TextRenderer;
 getRenderDispatcher(): BlockEntityRenderDispatcher;
 getItemRenderer(): ItemRenderer;
 getEntityRenderDispatcher(): EntityRenderDispatcher;
 getLayerModelPart(modelLayer: EntityModelLayer): ModelPart;
 getRenderManager(): BlockRenderManager;
}

//net.minecraft.scoreboard.ScoreboardPlayerScore
class ScoreboardPlayerScore extends JObject{
 isLocked(): boolean;
 clearScore(): void;
 setScore(score: number): void;
 getObjective(): ScoreboardObjective;
 getScoreboard(): Scoreboard;
 getScore(): number;
 getPlayerName(): string;
 setLocked(locked: boolean): void;
 incrementScore(): void;
 incrementScore(amount: number): void;
}
class Static_ScoreboardPlayerScore {
static method_1123(a: ScoreboardPlayerScore,b: ScoreboardPlayerScore): number;
static COMPARATOR: Comparator;
}

//net.minecraft.util.profiling.jfr.FlightProfiler$NoopProfiler
class FlightProfiler_NoopProfiler extends JObject, FlightProfiler{
 start(instanceType: InstanceType): boolean;
 stop(): Path;
 isAvailable(): boolean;
 startChunkGenerationProfiling(chunkPos: ChunkPos,world: RegistryKey,targetStatus: string): Finishable;
 startWorldLoadProfiling(): Finishable;
 isProfiling(): boolean;
 onPacketReceived(protocolId: number,packetId: number,remoteAddress: SocketAddress,bytes: number): void;
 onPacketSent(protocolId: number,packetId: number,remoteAddress: SocketAddress,bytes: number): void;
 onTick(tickTime: number): void;
}
class Static_FlightProfiler_NoopProfiler {
static method_38662(): void;
static LOGGER: Logger;
static NOOP: Finishable;
}

//net.minecraft.world.gen.chunk.ChunkNoiseSampler$FlatCache
class ChunkNoiseSampler_FlatCache extends JObject, DensityFunctionTypes_Wrapper, ChunkNoiseSampler_ParentedNoiseType{
 type(): DensityFunctionTypes_Wrapping_Type;
 fill(densities: number[],applier: DensityFunction_EachApplier): void;
 wrapped(): DensityFunction;
 sample(pos: DensityFunction_NoisePos): number;
}

//net.minecraft.entity.ai.brain.task.Task
interface Task extends JObject{
 getName(): string;
 stop(world: ServerWorld,entity: LivingEntity,time: long): void;
 tick(world: ServerWorld,entity: LivingEntity,time: long): void;
 getStatus(): MultiTickTask_Status;
 tryStarting(world: ServerWorld,entity: LivingEntity,time: long): boolean;
}

//net.minecraft.client.texture.atlas.PalettedPermutationsAtlasSource
class PalettedPermutationsAtlasSource extends JObject, AtlasSource{
 load(resourceManager: ResourceManager,regions: AtlasSource_SpriteRegions): void;
 getType(): AtlasSourceType;
}
class Static_PalettedPermutationsAtlasSource {
static method_48490(map: Map,supplier: Supplier,resourceManager: ResourceManager,string: string,identifier: Identifier): void;
static method_48492(is: number[],js: number[]): IntUnaryOperator;
static method_48489(int2IntMap: Int2IntMap,i: number): number;
static method_48493(palettedPermutationsAtlasSource: PalettedPermutationsAtlasSource): Identifier;
static method_48486(resourceManager: ResourceManager,identifier: Identifier): number[];
static method_48494(palettedPermutationsAtlasSource: PalettedPermutationsAtlasSource): List;
static method_48491(supplier: Supplier,resourceManager: ResourceManager,identifier: Identifier): IntUnaryOperator;
static method_48488(palettedPermutationsAtlasSource: PalettedPermutationsAtlasSource): Map;
static method_48487(instance: RecordCodecBuilder_Instance): App;
static LOGGER: Logger;
static CODEC: Codec;
}

//net.minecraft.loot.condition.EntityScoresLootCondition$Builder
class EntityScoresLootCondition_Builder extends JObject, LootCondition_Builder{
 build(): LootCondition;
 score(name: string,value: BoundedIntUnaryOperator): EntityScoresLootCondition_Builder;
}

//net.minecraft.client.particle.FireSmokeParticle$Factory
class FireSmokeParticle_Factory extends JObject, ParticleFactory{
 createParticle(defaultParticleType: DefaultParticleType,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
 createParticle(particleEffect: ParticleEffect,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
}

//net.minecraft.util.Lazy
class Lazy extends JObject{
 get(): Object;
}

//net.minecraft.network.packet.c2s.play.ClientCommandC2SPacket
class ClientCommandC2SPacket extends JObject, Packet{
 apply(listener: PacketListener): void;
 apply(serverPlayPacketListener: ServerPlayPacketListener): void;
 write(buf: PacketByteBuf): void;
 getMode(): ClientCommandC2SPacket_Mode;
 getEntityId(): number;
 getMountJumpHeight(): number;
}

//net.minecraft.world.gen.feature.EndConfiguredFeatures
class EndConfiguredFeatures extends JObject{
}
class Static_EndConfiguredFeatures {
static bootstrap(featureRegisterable: Registerable): void;
static END_SPIKE: RegistryKey;
static END_GATEWAY_RETURN: RegistryKey;
static END_GATEWAY_DELAYED: RegistryKey;
static CHORUS_PLANT: RegistryKey;
static END_ISLAND: RegistryKey;
}

//net.minecraft.client.report.ReporterEnvironment$Server
interface ReporterEnvironment_Server extends JObject{
}

//net.minecraft.world.gen.chunk.ChunkNoiseSampler$BlendAlphaDensityFunction
class ChunkNoiseSampler_BlendAlphaDensityFunction extends JObject, ChunkNoiseSampler_ParentedNoiseType{
 apply(visitor: DensityFunction_DensityFunctionVisitor): DensityFunction;
 fill(densities: number[],applier: DensityFunction_EachApplier): void;
 maxValue(): number;
 wrapped(): DensityFunction;
 sample(pos: DensityFunction_NoisePos): number;
 minValue(): number;
 getCodecHolder(): CodecHolder;
}

//net.minecraft.command.CommandRegistryAccess$3


//net.minecraft.command.CommandRegistryAccess$2


//net.minecraft.client.model.ModelPart$Cuboid
class ModelPart_Cuboid extends JObject{
 renderCuboid(entry: MatrixStack_Entry,vertexConsumer: VertexConsumer,light: number,overlay: number,red: number,green: number,blue: number,alpha: number): void;
 minX: number;
 minY: number;
 minZ: number;
 maxX: number;
 maxY: number;
 maxZ: number;
}

//net.minecraft.command.CommandRegistryAccess$1


//net.minecraft.server.dedicated.PendingServerCommand
class PendingServerCommand extends JObject{
 command: string;
 source: ServerCommandSource;
}

//net.minecraft.registry.RegistryLoader
class RegistryLoader extends JObject{
}
class Static_RegistryLoader {
static load(resourceManager: ResourceManager,baseRegistryManager: DynamicRegistryManager,entries: List): DynamicRegistryManager_Immutable;
static load(registryInfoGetter: RegistryOps_RegistryInfoGetter,resourceManager: ResourceManager,registryRef: RegistryKey,newRegistry: MutableRegistry,decoder: Decoder,exceptions: Map): void;
static getPath(id: Identifier): string;
static method_45120(resourceManager: ResourceManager,registryInfoGetter: RegistryOps_RegistryInfoGetter,loader: Pair): void;
static method_45128(map: Map,loader: Pair): void;
static method_45127(map: Map,entry: RegistryLoader_Entry): Pair;
static method_45130(entry: Map_Entry): Identifier;
static method_45123(printWriter: PrintWriter,entry: Map_Entry): void;
static method_46622(map: Map,entry: DynamicRegistryManager_Entry): void;
static method_45124(error: string): void;
static method_45125(entry: Map_Entry): Identifier;
static method_46621(map: Map,pair: Pair): void;
static writeLoadingError(exceptions: Map): void;
static method_45129(printWriter: PrintWriter,elementEntry: Map_Entry): void;
static createInfo(registry: MutableRegistry): RegistryOps_RegistryInfo;
static createInfo(registry: Registry): RegistryOps_RegistryInfo;
static createInfoGetter(baseRegistryManager: DynamicRegistryManager,additionalRegistries: List): RegistryOps_RegistryInfoGetter;
static LOGGER: Logger;
static DYNAMIC_REGISTRIES: List;
static DIMENSION_REGISTRIES: List;
}

//net.minecraft.screen.ScreenHandlerType$Factory
interface ScreenHandlerType_Factory extends JObject{
 create(syncId: number,playerInventory: PlayerInventory): ScreenHandler;
}

//net.minecraft.util.LowercaseEnumTypeAdapterFactory
class LowercaseEnumTypeAdapterFactory extends JObject, TypeAdapterFactory{
 create(gson: Gson,typeToken: TypeToken): TypeAdapter;
}

//net.minecraft.client.font.FontLoader$Loadable
interface FontLoader_Loadable extends JObject{
 load(resourceManager: ResourceManager): Font;
}

//net.minecraft.client.texture.PlayerSkinProvider
class PlayerSkinProvider extends JObject{
 loadSkin(profile: GameProfile): Identifier;
 loadSkin(profile: GameProfile,callback: PlayerSkinProvider_SkinTextureAvailableCallback,requireSecure: boolean): void;
 loadSkin(profileTexture: MinecraftProfileTexture,type: MinecraftProfileTexture_Type): Identifier;
 getTextures(profile: GameProfile): Map;
}
class Static_PlayerSkinProvider {
static getSkinId(skinType: MinecraftProfileTexture_Type,hash: string): Identifier;
static method_22817(skinTextureAvailableCallback: PlayerSkinProvider_SkinTextureAvailableCallback,type: MinecraftProfileTexture_Type,identifier: Identifier,minecraftProfileTexture: MinecraftProfileTexture): void;
static TEXTURES: string;
}

//net.minecraft.data.server.BiomeParametersProvider
class BiomeParametersProvider extends JObject, DataProvider{
 getName(): string;
 run(writer: DataWriter): CompletableFuture;
}
class Static_BiomeParametersProvider {
static write(path: Path,writer: DataWriter,ops: DynamicOps,codec: Encoder,biomeSource: Object): CompletableFuture;
static method_46576(i: number): CompletableFuture[];
static method_42031(path: Path,error: string): void;
static LOGGER: Logger;
static BIOME_KEY_CODEC: MapCodec;
static BIOME_ENTRY_CODEC: Codec;
}

//net.minecraft.world.border.WorldBorderListener
interface WorldBorderListener extends JObject{
 onInterpolateSize(border: WorldBorder,fromSize: number,toSize: number,time: long): void;
 onSizeChange(border: WorldBorder,size: number): void;
 onSafeZoneChanged(border: WorldBorder,safeZoneRadius: number): void;
 onCenterChanged(border: WorldBorder,centerX: number,centerZ: number): void;
 onDamagePerBlockChanged(border: WorldBorder,damagePerBlock: number): void;
 onWarningBlocksChanged(border: WorldBorder,warningBlockDistance: number): void;
 onWarningTimeChanged(border: WorldBorder,warningTime: number): void;
}

//net.minecraft.command.argument.ScoreHolderArgumentType$Serializer$Properties
class ScoreHolderArgumentType_Serializer_Properties extends JObject, ArgumentSerializer_ArgumentTypeProperties{
 createType(commandRegistryAccess: CommandRegistryAccess): ArgumentType;
 createType(commandRegistryAccess: CommandRegistryAccess): ScoreHolderArgumentType;
 getSerializer(): ArgumentSerializer;
}

//net.minecraft.entity.ai.brain.task.SeekWaterTask
class SeekWaterTask extends JObject{
}
class Static_SeekWaterTask {
static create(range: number,speed: number): Task;
static method_47177(mutableLong: MutableLong,i: number,f: number,context: TaskTriggerer_TaskContext): App;
static method_47179(mutableLong: MutableLong,i: number,memoryQueryResult: MemoryQueryResult,memoryQueryResult2: MemoryQueryResult,f: number,world: ServerWorld,entity: PathAwareEntity,time: long): boolean;
static method_47178(mutableLong: MutableLong,i: number,f: number,attackTarget: MemoryQueryResult,walkTarget: MemoryQueryResult,lookTarget: MemoryQueryResult): TaskRunnable;
}

//net.minecraft.SaveVersion
class SaveVersion extends JObject{
 getId(): number;
 isNotMainSeries(): boolean;
 getSeries(): string;
 isAvailableTo(other: SaveVersion): boolean;
}
class Static_SaveVersion {
static MAIN_SERIES: string;
}

//net.minecraft.client.render.model.BakedQuadFactory
class BakedQuadFactory extends JObject{
 transformVertex(vertex: Vector3f,transformation: AffineTransformation): void;
 bake(from: Vector3f,to: Vector3f,face: ModelElementFace,texture: Sprite,side: Direction,settings: ModelBakeSettings,rotation: ModelRotation,shade: boolean,modelId: Identifier): BakedQuad;
}
class Static_BakedQuadFactory {
static decodeDirection(rotationMatrix: number[]): Direction;
static method_23074(identifier: Identifier): string;
static uvLock(texture: ModelElementTexture,orientation: Direction,rotation: AffineTransformation,modelId: Identifier): ModelElementTexture;
static field_32796: number;
static MIN_SCALE: number;
static MAX_SCALE: number;
static field_32797: number;
static field_32799: number;
static field_32798: number;
}

//net.minecraft.world.gen.surfacebuilder.MaterialRules$BooleanSupplier
interface MaterialRules_BooleanSupplier extends JObject{
 get(): boolean;
}

//net.minecraft.util.Language
class Language extends JObject{
 get(key: string): string;
 get(key: string,fallback: string): string;
 reorder(texts: List): List;
 reorder(text: StringVisitable): OrderedText;
 hasTranslation(key: string): boolean;
 isRightToLeft(): boolean;
}
class Static_Language {
static load(entryConsumer: BiConsumer,path: string): void;
static load(inputStream: InputStream,entryConsumer: BiConsumer): void;
static getInstance(): Language;
static create(): Language;
static setInstance(language: Language): void;
static LOGGER: Logger;
static GSON: Gson;
static TOKEN_PATTERN: Pattern;
static DEFAULT_LANGUAGE: string;
static instance: Language;
}

//net.minecraft.resource.fs.ResourceFileSystemProvider$1


//net.minecraft.resource.fs.ResourceFileSystemProvider$2


//net.minecraft.world.gen.feature.VegetationConfiguredFeatures
class VegetationConfiguredFeatures extends JObject{
}
class Static_VegetationConfiguredFeatures {
static bootstrap(featureRegisterable: Registerable): void;
static createRandomPatchFeatureConfig(block: BlockStateProvider,tries: number): RandomPatchFeatureConfig;
static BAMBOO_NO_PODZOL: RegistryKey;
static BAMBOO_SOME_PODZOL: RegistryKey;
static VINES: RegistryKey;
static PATCH_BROWN_MUSHROOM: RegistryKey;
static PATCH_RED_MUSHROOM: RegistryKey;
static PATCH_SUNFLOWER: RegistryKey;
static PATCH_PUMPKIN: RegistryKey;
static PATCH_BERRY_BUSH: RegistryKey;
static PATCH_TAIGA_GRASS: RegistryKey;
static PATCH_GRASS: RegistryKey;
static PATCH_GRASS_JUNGLE: RegistryKey;
static SINGLE_PIECE_OF_GRASS: RegistryKey;
static PATCH_DEAD_BUSH: RegistryKey;
static PATCH_MELON: RegistryKey;
static PATCH_WATERLILY: RegistryKey;
static PATCH_TALL_GRASS: RegistryKey;
static PATCH_LARGE_FERN: RegistryKey;
static PATCH_CACTUS: RegistryKey;
static PATCH_SUGAR_CANE: RegistryKey;
static FLOWER_DEFAULT: RegistryKey;
static FLOWER_FLOWER_FOREST: RegistryKey;
static FLOWER_SWAMP: RegistryKey;
static FLOWER_PLAIN: RegistryKey;
static FLOWER_MEADOW: RegistryKey;
static FLOWER_CHERRY: RegistryKey;
static FOREST_FLOWERS: RegistryKey;
static DARK_FOREST_VEGETATION: RegistryKey;
static TREES_FLOWER_FOREST: RegistryKey;
static MEADOW_TREES: RegistryKey;
static TREES_TAIGA: RegistryKey;
static TREES_GROVE: RegistryKey;
static TREES_SAVANNA: RegistryKey;
static BIRCH_TALL: RegistryKey;
static TREES_WINDSWEPT_HILLS: RegistryKey;
static TREES_WATER: RegistryKey;
static TREES_BIRCH_AND_OAK: RegistryKey;
static TREES_PLAINS: RegistryKey;
static TREES_SPARSE_JUNGLE: RegistryKey;
static TREES_OLD_GROWTH_SPRUCE_TAIGA: RegistryKey;
static TREES_OLD_GROWTH_PINE_TAIGA: RegistryKey;
static TREES_JUNGLE: RegistryKey;
static BAMBOO_VEGETATION: RegistryKey;
static MUSHROOM_ISLAND_VEGETATION: RegistryKey;
static MANGROVE_VEGETATION: RegistryKey;
}

//net.minecraft.util.CubicSampler
class CubicSampler extends JObject{
}
class Static_CubicSampler {
static sampleColor(pos: Vec3d,rgbFetcher: CubicSampler_RgbFetcher): Vec3d;
static FIRST_SEGMENT_OFFSET: number;
static NUM_SEGMENTS: number;
static DENSITY_CURVE: number[];
}

//net.minecraft.village.raid.Raid
class Raid extends JObject{
 start(player: PlayerEntity): void;
 isActive(): boolean;
 tick(): void;
 invalidate(): void;
 getCenter(): BlockPos;
 getEnchantmentChance(): number;
 hasStarted(): boolean;
 getMaxWaves(difficulty: Difficulty): number;
 addRaider(wave: number,raider: RaiderEntity,pos: BlockPos,existing: boolean): void;
 setWaveCaptain(wave: number,entity: RaiderEntity): void;
 removeFromWave(entity: RaiderEntity,countHealth: boolean): void;
 updateBar(): void;
 addToWave(wave: number,entity: RaiderEntity,countHealth: boolean): boolean;
 removeLeader(wave: number): void;
 getRaidId(): number;
 addHero(entity: Entity): void;
 getCaptain(wave: number): RaiderEntity;
 getCurrentRaiderHealth(): number;
 getMaxAcceptableBadOmenLevel(): number;
 getAllRaiders(): Set;
 getBadOmenLevel(): number;
 setBadOmenLevel(badOmenLevel: number): void;
 getGroupsSpawned(): number;
 getRaiderCount(): number;
 getTotalHealth(): number;
 isFinished(): boolean;
 getWorld(): World;
 writeNbt(nbt: NbtCompound): NbtCompound;
 hasSpawned(): boolean;
 isPreRaid(): boolean;
 hasStopped(): boolean;
 hasWon(): boolean;
 hasLost(): boolean;
}
class Static_Raid {
static method_16508(wavex: Integer): Set;
static getOminousBanner(): ItemStack;
static field_30676: number;
static field_30677: number;
static field_30678: number;
static field_30679: number;
static field_30680: number;
static field_30681: number;
static field_30682: number;
static OMINOUS_BANNER_TRANSLATION_KEY: string;
static RAIDERS_REMAINING_TRANSLATION_KEY: string;
static field_30669: number;
static field_30685: number;
static DEFAULT_PRE_RAID_TICKS: number;
static MAX_DESPAWN_COUNTER: number;
static field_30671: number;
static field_30687: number;
static field_30672: number;
static field_30673: number;
static field_30688: number;
static EVENT_TEXT: Text;
static VICTORY_SUFFIX_TEXT: Text;
static DEFEAT_SUFFIX_TEXT: Text;
static VICTORY_TITLE: Text;
static DEFEAT_TITLE: Text;
static MAX_ACTIVE_TICKS: number;
static field_30674: number;
static SQUARED_MAX_RAIDER_DISTANCE: number;
}

//net.minecraft.client.render.VertexFormats
class VertexFormats extends JObject{
}
class Static_VertexFormats {
static POSITION_ELEMENT: VertexFormatElement;
static COLOR_ELEMENT: VertexFormatElement;
static TEXTURE_ELEMENT: VertexFormatElement;
static OVERLAY_ELEMENT: VertexFormatElement;
static LIGHT_ELEMENT: VertexFormatElement;
static NORMAL_ELEMENT: VertexFormatElement;
static PADDING_ELEMENT: VertexFormatElement;
static UV_ELEMENT: VertexFormatElement;
static BLIT_SCREEN: VertexFormat;
static POSITION_COLOR_TEXTURE_LIGHT_NORMAL: VertexFormat;
static POSITION_COLOR_TEXTURE_OVERLAY_LIGHT_NORMAL: VertexFormat;
static POSITION_TEXTURE_COLOR_LIGHT: VertexFormat;
static POSITION: VertexFormat;
static POSITION_COLOR: VertexFormat;
static LINES: VertexFormat;
static POSITION_COLOR_LIGHT: VertexFormat;
static POSITION_TEXTURE: VertexFormat;
static POSITION_COLOR_TEXTURE: VertexFormat;
static POSITION_TEXTURE_COLOR: VertexFormat;
static POSITION_COLOR_TEXTURE_LIGHT: VertexFormat;
static POSITION_TEXTURE_LIGHT_COLOR: VertexFormat;
static POSITION_TEXTURE_COLOR_NORMAL: VertexFormat;
}

//net.minecraft.world.chunk.light.LightStorage
class LightStorage extends JObject{
 getStatus(sectionPos: long): LightStorage_Status;
 setRetainColumn(sectionPos: long,retain: boolean): void;
 getLightSection(sectionPos: long): ChunkNibbleArray;
}

//net.minecraft.advancement.AdvancementManager$Listener
interface AdvancementManager_Listener extends JObject{
 onDependentRemoved(dependent: Advancement): void;
 onClear(): void;
 onRootRemoved(root: Advancement): void;
 onRootAdded(root: Advancement): void;
 onDependentAdded(dependent: Advancement): void;
}

//net.minecraft.client.render.BufferVertexConsumer
interface BufferVertexConsumer extends JObject, VertexConsumer{
 putByte(index: number,value: byte): void;
 putShort(index: number,value: short): void;
 putFloat(index: number,value: number): void;
 nextElement(): void;
 color(red: number,green: number,blue: number,alpha: number): VertexConsumer;
 normal(x: number,y: number,z: number): VertexConsumer;
 uv(u: short,v: short,index: number): VertexConsumer;
 getCurrentElement(): VertexFormatElement;
 light(u: number,v: number): VertexConsumer;
 overlay(u: number,v: number): VertexConsumer;
 vertex(x: number,y: number,z: number): VertexConsumer;
 texture(u: number,v: number): VertexConsumer;
}
class Static_BufferVertexConsumer {
static packByte(f: number): byte;
}

//net.minecraft.world.RegistryWorldView
interface RegistryWorldView extends JObject, EntityView, WorldView, ModifiableTestableWorld{
 doesNotIntersectEntities(except: Entity,shape: VoxelShape): boolean;
 getEntityCollisions(entity: Entity,box: Box): List;
 getTopPosition(heightmap: Heightmap_Type,pos: BlockPos): BlockPos;
 getBlockEntity(pos: BlockPos,type: BlockEntityType): Optional;
}

//net.minecraft.client.render.MapRenderer$MapTexture
class MapRenderer_MapTexture extends JObject, AutoCloseable{
 close(): void;
 setNeedsUpdate(): void;
}

//net.minecraft.server.function.CommandFunctionManager$Execution
class CommandFunctionManager_Execution extends JObject{
 reportError(message: string): void;
}

//net.minecraft.text.TextColor
class TextColor extends JObject{
 getName(): string;
 equals(o: Object): boolean;
 toString(): string;
 hashCode(): number;
 getHexCode(): string;
 getRgb(): number;
}
class Static_TextColor {
static parse(name: string): TextColor;
static method_27720(textColor: TextColor): string;
static method_43879(color: string): DataResult;
static method_49684(): string;
static method_27722(formatting: Formatting): TextColor;
static fromRgb(rgb: number): TextColor;
static fromFormatting(formatting: Formatting): TextColor;
static RGB_PREFIX: string;
static CODEC: Codec;
static FORMATTING_TO_COLOR: Map;
static BY_NAME: Map;
}

//net.minecraft.util.math.Spline
interface Spline extends JObject, ToFloatFunction{
 apply(visitor: Spline_Visitor): Spline;
 getDebugString(): string;
}
class Static_Spline {
static builder(locationFunction: ToFloatFunction): Spline_Builder;
static builder(locationFunction: ToFloatFunction,amplifier: ToFloatFunction): Spline_Builder;
static createCodec(locationFunctionCodec: Codec): Codec;
static method_39231(either: Either): Spline;
static method_39229(spline: Spline): Either;
static method_39233(codec: Codec,codec2: Codec,instance: RecordCodecBuilder_Instance): App;
static method_39234(mutableObject: MutableObject,instance: RecordCodecBuilder_Instance): App;
static fixedFloatFunction(value: number): Spline;
static method_39227(spline: Spline_Implementation): Record;
static method_39226(location: number,value: Spline,derivative: number): Spline_Serialized;
static method_39235(spline: Spline_Implementation): List;
static method_39230(locationFunction: ToFloatFunction,splines: List): Spline_Implementation;
static method_39228(implementation: Spline_Implementation,index: number): Spline_Serialized;
}

//net.minecraft.client.render.debug.WaterDebugRenderer
class WaterDebugRenderer extends JObject, DebugRenderer_Renderer{
 render(matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,cameraX: number,cameraY: number,cameraZ: number): void;
}

//net.minecraft.unused.packageinfo.PackageInfo6309
interface PackageInfo6309 extends JObject{
}

//net.minecraft.data.SnbtProvider$Tweaker
interface SnbtProvider_Tweaker extends JObject{
 write(name: string,nbt: NbtCompound): NbtCompound;
}

//net.minecraft.network.NetworkThreadUtils
class NetworkThreadUtils extends JObject{
}
class Static_NetworkThreadUtils {
static method_11072(packetListener: PacketListener,packet: Packet): void;
static forceMainThread(packet: Packet,listener: PacketListener,world: ServerWorld): void;
static forceMainThread(packet: Packet,listener: PacketListener,engine: ThreadExecutor): void;
static LOGGER: Logger;
}

//net.minecraft.client.model.ModelPart$CuboidConsumer
interface ModelPart_CuboidConsumer extends JObject{
 accept(matrix: MatrixStack_Entry,path: string,index: number,cuboid: ModelPart_Cuboid): void;
}

//net.minecraft.unused.packageinfo.PackageInfo6305
interface PackageInfo6305 extends JObject{
}

//net.minecraft.entity.ai.brain.task.TaskTriggerer$TaskFunction
interface TaskTriggerer_TaskFunction extends JObject{
 run(world: ServerWorld,entity: LivingEntity,time: long): Object;
 asString(): string;
}

//net.minecraft.network.packet.s2c.play.EntitySetHeadYawS2CPacket
class EntitySetHeadYawS2CPacket extends JObject, Packet{
 apply(clientPlayPacketListener: ClientPlayPacketListener): void;
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
 getEntity(world: World): Entity;
 getHeadYaw(): byte;
}

//net.minecraft.client.search.TextSearcher
interface TextSearcher extends JObject{
 search(text: string): List;
}
class Static_TextSearcher {
static of(): TextSearcher;
static of(values: List,textsGetter: Function): TextSearcher;
static method_43795(text: string): List;
static method_43794(suffixArray: SuffixArray,object: Object,text: string): void;
}

//net.minecraft.client.util.Session
class Session extends JObject{
 getSessionId(): string;
 getUuidOrNull(): UUID;
 getAccessToken(): string;
 getXuid(): Optional;
 getClientId(): Optional;
 getUsername(): string;
 getProfile(): GameProfile;
 getAccountType(): Session_AccountType;
 getUuid(): string;
}

//net.minecraft.registry.tag.WorldPresetTags
class WorldPresetTags extends JObject{
}
class Static_WorldPresetTags {
static of(id: string): TagKey;
static NORMAL: TagKey;
static EXTENDED: TagKey;
}

//net.minecraft.util.path.AllowedSymlinkPathMatcher$EntryType
interface AllowedSymlinkPathMatcher_EntryType extends JObject{
 compile(fileSystem: FileSystem,pattern: string): PathMatcher;
}
class Static_AllowedSymlinkPathMatcher_EntryType {
static method_52261(fileSystem: FileSystem,prefix: string): PathMatcher;
static method_52260(string: string,path: Path): boolean;
static DEFAULT: AllowedSymlinkPathMatcher_EntryType;
static PREFIX: AllowedSymlinkPathMatcher_EntryType;
}

//net.minecraft.client.toast.RecipeToast
class RecipeToast extends JObject, Toast{
 draw(context: DrawContext,manager: ToastManager,startTime: long): Toast_Visibility;
}
class Static_RecipeToast {
static show(manager: ToastManager,recipes: Recipe): void;
static DEFAULT_DURATION_MS: long;
static TITLE: Text;
static DESCRIPTION: Text;
}

//net.minecraft.client.tutorial.TutorialStepHandler
interface TutorialStepHandler extends JObject{
 destroy(): void;
 tick(): void;
 onBlockBreaking(client: ClientWorld,pos: BlockPos,state: BlockState,progress: number): void;
 onMouseUpdate(deltaX: number,deltaY: number): void;
 onMovement(input: Input): void;
 onInventoryOpened(): void;
 onTarget(world: ClientWorld,hitResult: HitResult): void;
 onSlotUpdate(stack: ItemStack): void;
}

//net.minecraft.block.StructureBlock$1


//net.minecraft.server.command.AttributeCommand
class AttributeCommand extends JObject{
}
class Static_AttributeCommand {
static getName(attribute: RegistryEntry): Text;
static register(dispatcher: CommandDispatcher,registryAccess: CommandRegistryAccess): void;
static getLivingEntityWithAttribute(entity: Entity,attribute: RegistryEntry): LivingEntity;
static executeBaseValueSet(source: ServerCommandSource,target: Entity,attribute: RegistryEntry,value: number): number;
static getAttributeInstance(entity: Entity,attribute: RegistryEntry): EntityAttributeInstance;
static executeModifierValueGet(source: ServerCommandSource,target: Entity,attribute: RegistryEntry,uuid: UUID,multiplier: number): number;
static executeModifierRemove(source: ServerCommandSource,target: Entity,attribute: RegistryEntry,uuid: UUID): number;
static executeBaseValueGet(source: ServerCommandSource,target: Entity,attribute: RegistryEntry,multiplier: number): number;
static method_27759(context: CommandContext): number;
static method_27752(context: CommandContext): number;
static method_27747(context: CommandContext): number;
static method_27757(context: CommandContext): number;
static method_27750(context: CommandContext): number;
static method_27736(context: CommandContext): number;
static method_27738(source: ServerCommandSource): boolean;
static method_27756(context: CommandContext): number;
static method_27758(context: CommandContext): number;
static method_27755(context: CommandContext): number;
static method_27754(context: CommandContext): number;
static method_27753(context: CommandContext): number;
static method_27745(entityName: Object,attributeName: Object,uuid: Object): Message;
static method_51901(registryEntry: RegistryEntry,entity: Entity,d: number): Text;
static getLivingEntity(entity: Entity): LivingEntity;
static method_51906(registryEntry: RegistryEntry,entity: Entity,d: number): Text;
static executeValueGet(source: ServerCommandSource,target: Entity,attribute: RegistryEntry,multiplier: number): number;
static method_27749(entityName: Object,attributeName: Object,uuid: Object): Message;
static method_51904(registryEntry: RegistryEntry,entity: Entity,d: number): Text;
static method_27743(name: Object): Message;
static method_27744(entityName: Object,attributeName: Object): Message;
static method_51903(uUID: UUID,registryEntry: RegistryEntry,entity: Entity,d: number): Text;
static method_51902(uUID: UUID,registryEntry: RegistryEntry,entity: Entity): Text;
static method_51905(uUID: UUID,registryEntry: RegistryEntry,entity: Entity): Text;
static executeModifierAdd(source: ServerCommandSource,target: Entity,attribute: RegistryEntry,uuid: UUID,name: string,value: number,operation: EntityAttributeModifier_Operation): number;
static ENTITY_FAILED_EXCEPTION: DynamicCommandExceptionType;
static NO_ATTRIBUTE_EXCEPTION: Dynamic2CommandExceptionType;
static NO_MODIFIER_EXCEPTION: Dynamic3CommandExceptionType;
static MODIFIER_ALREADY_PRESENT_EXCEPTION: Dynamic3CommandExceptionType;
}

//net.minecraft.entity.ai.pathing.Path
class Path extends JObject{
 toString(): string;
 getLength(): number;
 next(): void;
 setLength(length: number): void;
 getTarget(): BlockPos;
 getNode(index: number): PathNode;
 setNode(index: number,node: PathNode): void;
 setCurrentNodeIndex(nodeIndex: number): void;
 getNodePosition(entity: Entity,index: number): Vec3d;
 getNodePosition(entity: Entity): Vec3d;
 equalsPath(o: Path): boolean;
 isFinished(): boolean;
 getCurrentNode(): PathNode;
 getNodePos(index: number): BlockPos;
 getCurrentNodePos(): BlockPos;
 reachesTarget(): boolean;
 getCurrentNodeIndex(): number;
 getEnd(): PathNode;
 getDebugSecondNodes(): PathNode[];
 getManhattanDistanceFromTarget(): number;
 getDebugNodes(): PathNode[];
 toBuffer(buffer: PacketByteBuf): void;
 isStart(): boolean;
 getLastNode(): PathNode;
}
class Static_Path {
static method_35499(packetByteBuf: PacketByteBuf,targetPathNode: TargetPathNode): void;
static fromBuffer(buffer: PacketByteBuf): Path;
}

//net.minecraft.client.render.block.entity.BellBlockEntityRenderer
class BellBlockEntityRenderer extends JObject, BlockEntityRenderer{
 render(entity: BlockEntity,tickDelta: number,matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,light: number,overlay: number): void;
 render(bellBlockEntity: BellBlockEntity,f: number,matrixStack: MatrixStack,vertexConsumerProvider: VertexConsumerProvider,i: number,j: number): void;
}
class Static_BellBlockEntityRenderer {
static getTexturedModelData(): TexturedModelData;
static BELL_BODY_TEXTURE: SpriteIdentifier;
static BELL_BODY: string;
}

//net.minecraft.registry.tag.TagPacketSerializer$Serialized
class TagPacketSerializer_Serialized extends JObject{
 isEmpty(): boolean;
 writeBuf(buf: PacketByteBuf): void;
}
class Static_TagPacketSerializer_Serialized {
static fromBuf(buf: PacketByteBuf): TagPacketSerializer_Serialized;
}

//net.minecraft.util.function.BooleanBiFunction
interface BooleanBiFunction extends JObject{
 apply(a: boolean,b: boolean): boolean;
}
class Static_BooleanBiFunction {
static method_16783(a: boolean,b: boolean): boolean;
static method_16793(a: boolean,b: boolean): boolean;
static method_16791(a: boolean,b: boolean): boolean;
static method_16784(a: boolean,b: boolean): boolean;
static method_16788(a: boolean,b: boolean): boolean;
static method_16795(a: boolean,b: boolean): boolean;
static method_16781(a: boolean,b: boolean): boolean;
static method_16796(a: boolean,b: boolean): boolean;
static method_16792(a: boolean,b: boolean): boolean;
static method_16785(a: boolean,b: boolean): boolean;
static method_16786(a: boolean,b: boolean): boolean;
static method_16794(a: boolean,b: boolean): boolean;
static method_16787(a: boolean,b: boolean): boolean;
static method_16789(a: boolean,b: boolean): boolean;
static method_16782(a: boolean,b: boolean): boolean;
static method_16790(a: boolean,b: boolean): boolean;
static FALSE: BooleanBiFunction;
static NOT_OR: BooleanBiFunction;
static ONLY_SECOND: BooleanBiFunction;
static NOT_FIRST: BooleanBiFunction;
static ONLY_FIRST: BooleanBiFunction;
static NOT_SECOND: BooleanBiFunction;
static NOT_SAME: BooleanBiFunction;
static NOT_AND: BooleanBiFunction;
static AND: BooleanBiFunction;
static SAME: BooleanBiFunction;
static SECOND: BooleanBiFunction;
static CAUSES: BooleanBiFunction;
static FIRST: BooleanBiFunction;
static CAUSED_BY: BooleanBiFunction;
static OR: BooleanBiFunction;
static TRUE: BooleanBiFunction;
}

//net.minecraft.client.resource.ResourceReloadLogger$ReloadState
class ResourceReloadLogger_ReloadState extends JObject{
 addReloadSection(section: CrashReportSection): void;
}

//net.minecraft.client.particle.FlameParticle$SmallFactory
class FlameParticle_SmallFactory extends JObject, ParticleFactory{
 createParticle(defaultParticleType: DefaultParticleType,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
 createParticle(particleEffect: ParticleEffect,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
}

//net.minecraft.resource.metadata.ResourceFilter
class ResourceFilter extends JObject{
 isNamespaceBlocked(namespace: string): boolean;
 isPathBlocked(namespace: string): boolean;
}
class Static_ResourceFilter {
static method_41282(string: string,block: BlockEntry): boolean;
static method_41280(string: string,block: BlockEntry): boolean;
static method_41277(filter: ResourceFilter): List;
static method_41278(instance: RecordCodecBuilder_Instance): App;
static CODEC: Codec;
static SERIALIZER: ResourceMetadataSerializer;
}

//net.minecraft.network.packet.c2s.play.CreativeInventoryActionC2SPacket
class CreativeInventoryActionC2SPacket extends JObject, Packet{
 apply(listener: PacketListener): void;
 apply(serverPlayPacketListener: ServerPlayPacketListener): void;
 write(buf: PacketByteBuf): void;
 getSlot(): number;
 getItemStack(): ItemStack;
}

//net.minecraft.datafixer.Schemas
class Schemas extends JObject{
}
class Static_Schemas {
static create(requiredTypes: Set): DataFixer;
static build(builder: DataFixerBuilder): void;
static getFixer(): DataFixer;
static method_15449(id: string): string;
static replacing(replacements: Map): UnaryOperator;
static replacing(old: string,current: string): UnaryOperator;
static method_15455(id: string): string;
static method_15459(id: string): string;
static method_43062(catVariants: Int2ObjectOpenHashMap): void;
static method_43061(frogVariants: Int2ObjectOpenHashMap): void;
static method_44184(map: Map,string: string): string;
static method_43060(immutableMap: ImmutableMap,string: string): string;
static method_51289(string: string): string;
static method_30069(string2: string,string3: string,string: string): string;
static method_30071(map: Map,string: string): string;
static EMPTY: BiFunction;
static EMPTY_IDENTIFIER_NORMALIZE: BiFunction;
static FIXER: DataFixer;
static field_38844: number;
}

//net.minecraft.entity.data.DataTracker
class DataTracker extends JObject{
 get(data: TrackedData): Object;
 isEmpty(): boolean;
 set(key: TrackedData,value: Object): void;
 set(key: TrackedData,value: Object,force: boolean): void;
 containsKey(key: TrackedData): boolean;
 isDirty(): boolean;
 getDirtyEntries(): List;
 getChangedEntries(): List;
 startTracking(key: TrackedData,initialValue: Object): void;
 writeUpdatedEntries(entries: List): void;
}
class Static_DataTracker {
static registerData(entityClass: Class,dataHandler: TrackedDataHandler): TrackedData;
static LOGGER: Logger;
static TRACKED_ENTITIES: Object2IntMap;
static MAX_DATA_VALUE_ID: number;
}

//net.minecraft.village.MerchantInventory
class MerchantInventory extends JObject, Inventory{
 clear(): void;
 isEmpty(): boolean;
 size(): number;
 getStack(slot: number): ItemStack;
 setStack(slot: number,stack: ItemStack): void;
 removeStack(slot: number): ItemStack;
 removeStack(slot: number,amount: number): ItemStack;
 getMerchantRewardedExperience(): number;
 markDirty(): void;
 canPlayerUse(player: PlayerEntity): boolean;
 updateOffers(): void;
 setOfferIndex(index: number): void;
 getTradeOffer(): TradeOffer;
}

//net.minecraft.util.collection.Weighted
interface Weighted extends JObject{
 getWeight(): Weight;
}
class Static_Weighted {
static of(data: Object,weight: number): Weighted_Present;
}

//net.minecraft.network.packet.s2c.play.WorldBorderWarningBlocksChangedS2CPacket
class WorldBorderWarningBlocksChangedS2CPacket extends JObject, Packet{
 apply(clientPlayPacketListener: ClientPlayPacketListener): void;
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
 getWarningBlocks(): number;
}

//net.minecraft.structure.OceanMonumentGenerator$PieceSetting
class OceanMonumentGenerator_PieceSetting extends JObject{
 checkNeighborStates(): void;
 countNeighbors(): number;
 setNeighbor(orientation: Direction,setting: OceanMonumentGenerator_PieceSetting): void;
 method_14783(i: number): boolean;
 isAboveLevelThree(): boolean;
}

//net.minecraft.world.TestableWorld
interface TestableWorld extends JObject{
 getTopPosition(heightmap: Heightmap_Type,pos: BlockPos): BlockPos;
 getBlockEntity(pos: BlockPos,type: BlockEntityType): Optional;
 testBlockState(pos: BlockPos,state: Predicate): boolean;
 testFluidState(pos: BlockPos,state: Predicate): boolean;
}

//net.minecraft.client.render.chunk.ChunkOcclusionDataBuilder$1


//net.minecraft.client.search.SearchManager$Instance
class SearchManager_Instance extends JObject{
}

//net.minecraft.server.command.DataCommand$ObjectType
interface DataCommand_ObjectType extends JObject{
 getObject(context: CommandContext): DataCommandObject;
 addArgumentsToBuilder(argument: ArgumentBuilder,argumentAdder: Function): ArgumentBuilder;
}

//net.minecraft.command.StorageDataObject$1


//net.minecraft.network.packet.s2c.play.LookAtS2CPacket
class LookAtS2CPacket extends JObject, Packet{
 apply(listener: PacketListener): void;
 apply(clientPlayPacketListener: ClientPlayPacketListener): void;
 write(buf: PacketByteBuf): void;
 getSelfAnchor(): EntityAnchorArgumentType_EntityAnchor;
 getTargetPosition(world: World): Vec3d;
}

//net.minecraft.registry.tag.TagPacketSerializer
class TagPacketSerializer extends JObject{
}
class Static_TagPacketSerializer {
static serializeTags(registry: Registry): TagPacketSerializer_Serialized;
static serializeTags(dynamicRegistryManager: CombinedDynamicRegistries): Map;
static loadTags(registryKey: RegistryKey,registry: Registry,serialized: TagPacketSerializer_Serialized,loader: TagPacketSerializer_Loader): void;
static method_40104(registry: DynamicRegistryManager_Entry): Pair;
static method_40101(pair: Pair): boolean;
static method_40107(registryKey: RegistryKey,registry: Registry,loader: TagPacketSerializer_Loader,tagId: Identifier,rawIds: IntList): void;
static method_40103(registry: Registry,map: Map,pair: Pair): void;
}

//net.minecraft.structure.BastionUnitsData
class BastionUnitsData extends JObject{
}
class Static_BastionUnitsData {
static bootstrap(poolRegisterable: Registerable): void;
}

//net.minecraft.client.render.WorldRenderer
class WorldRenderer extends JObject, SynchronousResourceReloader, AutoCloseable{
 close(): void;
 reload(): void;
 reload(manager: ResourceManager): void;
 tick(): void;
 render(matrices: MatrixStack,tickDelta: number,limitTime: long,renderBlockOutline: boolean,camera: Camera,gameRenderer: GameRenderer,lightmapTextureManager: LightmapTextureManager,projectionMatrix: Matrix4f): void;
 setWorld(world: ClientWorld): void;
 updateNoCullingBlockEntities(removed: Collection,added: Collection): void;
 reloadTransparencyPostProcessor(): void;
 loadEntityOutlinePostProcessor(): void;
 killFrustum(): void;
 captureFrustum(): void;
 renderClouds(matrices: MatrixStack,projectionMatrix: Matrix4f,tickDelta: number,cameraX: number,cameraY: number,cameraZ: number): void;
 scheduleTerrainUpdate(): void;
 getCloudsFramebuffer(): Framebuffer;
 getParticlesFramebuffer(): Framebuffer;
 getEntityFramebuffer(): Framebuffer;
 getWeatherFramebuffer(): Framebuffer;
 getEntityOutlinesFramebuffer(): Framebuffer;
 getTranslucentFramebuffer(): Framebuffer;
 addParticle(parameters: ParticleEffect,shouldAlwaysSpawn: boolean,important: boolean,x: number,y: number,z: number,velocityX: number,velocityY: number,velocityZ: number): void;
 addParticle(parameters: ParticleEffect,shouldAlwaysSpawn: boolean,x: number,y: number,z: number,velocityX: number,velocityY: number,velocityZ: number): void;
 getEntitiesDebugString(): string;
 getChunksDebugString(): string;
 scheduleBlockRerenderIfNeeded(pos: BlockPos,old: BlockState,updated: BlockState): void;
 tickRainSplashing(camera: Camera): void;
 onResized(width: number,height: number): void;
 setupFrustum(matrices: MatrixStack,pos: Vec3d,projectionMatrix: Matrix4f): void;
 getViewDistance(): number;
 setBlockBreakingInfo(entityId: number,pos: BlockPos,stage: number): void;
 scheduleBlockRenders(x: number,y: number,z: number): void;
 scheduleBlockRenders(minX: number,minY: number,minZ: number,maxX: number,maxY: number,maxZ: number): void;
 scheduleBlockRender(x: number,y: number,z: number): void;
 getCompletedChunkCount(): number;
 isTerrainRenderComplete(): boolean;
 drawEntityOutlinesFramebuffer(): void;
 getChunkCount(): number;
 getChunkBuilder(): ChunkBuilder;
 renderSky(matrices: MatrixStack,projectionMatrix: Matrix4f,tickDelta: number,camera: Camera,thickFog: boolean,fogCallback: Runnable): void;
 addBuiltChunk(chunk: ChunkBuilder_BuiltChunk): void;
 isRenderingReady(pos: BlockPos): boolean;
 updateBlock(world: BlockView,pos: BlockPos,oldState: BlockState,newState: BlockState,flags: number): void;
 cleanUp(): void;
 processGlobalEvent(eventId: number,pos: BlockPos,data: number): void;
 processWorldEvent(eventId: number,pos: BlockPos,data: number): void;
 playSong(song: SoundEvent,songPosition: BlockPos): void;
}
class Static_WorldRenderer {
static drawCuboidShapeOutline(matrices: MatrixStack,vertexConsumer: VertexConsumer,shape: VoxelShape,offsetX: number,offsetY: number,offsetZ: number,red: number,green: number,blue: number,alpha: number): void;
static getMaxIntensityColor(hue: number): Vec3d;
static getLightmapCoordinates(world: BlockRenderView,state: BlockState,pos: BlockPos): number;
static getLightmapCoordinates(world: BlockRenderView,pos: BlockPos): number;
static renderFilledBox(matrices: MatrixStack,vertexConsumer: VertexConsumer,minX: number,minY: number,minZ: number,maxX: number,maxY: number,maxZ: number,red: number,green: number,blue: number,alpha: number): void;
static renderFilledBox(matrices: MatrixStack,vertexConsumer: VertexConsumer,minX: number,minY: number,minZ: number,maxX: number,maxY: number,maxZ: number,red: number,green: number,blue: number,alpha: number): void;
static drawBox(vertexConsumer: VertexConsumer,x1: number,y1: number,z1: number,x2: number,y2: number,z2: number,red: number,green: number,blue: number,alpha: number): void;
static drawBox(matrices: MatrixStack,vertexConsumer: VertexConsumer,box: Box,red: number,green: number,blue: number,alpha: number): void;
static drawBox(matrices: MatrixStack,vertexConsumer: VertexConsumer,x1: number,y1: number,z1: number,x2: number,y2: number,z2: number,red: number,green: number,blue: number,alpha: number,xAxisRed: number,yAxisGreen: number,zAxisBlue: number): void;
static drawBox(matrices: MatrixStack,vertexConsumer: VertexConsumer,x1: number,y1: number,z1: number,x2: number,y2: number,z2: number,red: number,green: number,blue: number,alpha: number): void;
static drawShapeOutline(matrices: MatrixStack,vertexConsumer: VertexConsumer,shape: VoxelShape,offsetX: number,offsetY: number,offsetZ: number,red: number,green: number,blue: number,alpha: number,colorize: boolean): void;
static method_41949(resourcePack: ResourcePack): MutableText;
static renderSky(builder: BufferBuilder,f: number): BufferBuilder_BuiltBuffer;
static method_38552(blockPos: BlockPos,chunkInfo: WorldRenderer_ChunkInfo): number;
static method_22986(immediate: VertexConsumerProvider_Immediate,vertexConsumer: VertexConsumer,renderLayer: RenderLayer): VertexConsumer;
static method_37365(camera: Camera,f: number,bl: boolean,g: number): void;
static method_3248(renderLayer: RenderLayer): string;
static shiftHue(red: number,green: number,blue: number,hueOffset: number): Vec3d;
static method_3278(vertexConsumer: VertexConsumer,entry: MatrixStack_Entry,d: number,e: number,f: number,g: number,h: number,i: number,j: number,minX: number,minY: number,minZ: number,maxX: number,maxY: number,maxZ: number): void;
static method_41950(random: Random): Vec3d;
static method_22988(l: long): SortedSet;
static LOGGER: Logger;
static field_32759: number;
static field_34812: number;
static field_32762: number;
static field_34813: number;
static field_34814: number;
static field_32763: number;
static field_32764: number;
static field_32765: number;
static field_32766: number;
static field_34815: number;
static MOON_PHASES: Identifier;
static SUN: Identifier;
static CLOUDS: Identifier;
static END_SKY: Identifier;
static FORCEFIELD: Identifier;
static RAIN: Identifier;
static SNOW: Identifier;
static DIRECTIONS: Direction[];
}

//net.minecraft.server.world.ChunkTicketManager
class ChunkTicketManager extends JObject{
 tick(chunkStorage: ThreadedAnvilChunkStorage): boolean;
 removePersistentTickets(): void;
 getTickedChunkCount(): number;
 removeTicketWithLevel(type: ChunkTicketType,pos: ChunkPos,level: number,argument: Object): void;
 setSimulationDistance(simulationDistance: number): void;
 shouldTick(chunkPos: long): boolean;
 addTicket(type: ChunkTicketType,pos: ChunkPos,radius: number,argument: Object): void;
 shouldTickEntities(chunkPos: long): boolean;
 shouldTickBlocks(chunkPos: long): boolean;
 removeTicket(type: ChunkTicketType,pos: ChunkPos,radius: number,argument: Object): void;
 shouldDelayShutdown(): boolean;
 handleChunkEnter(pos: ChunkSectionPos,player: ServerPlayerEntity): void;
 handleChunkLeave(pos: ChunkSectionPos,player: ServerPlayerEntity): void;
 addTicketWithLevel(type: ChunkTicketType,pos: ChunkPos,level: number,argument: Object): void;
 toDumpString(): string;
}
class Static_ChunkTicketManager {
static getLevel(tickets: SortedArraySet): number;
static method_14041(pos: long): SortedArraySet;
static method_14040(ticket: ChunkTicket): boolean;
static method_17655(sectionPos: long): ObjectSet;
static method_17652(): void;
static LOGGER: Logger;
static NEARBY_PLAYER_TICKET_LEVEL: number;
static field_29765: number;
}

//net.minecraft.registry.RegistryWrapper$WrapperLookup$1


//net.minecraft.server.dedicated.command.PardonCommand
class PardonCommand extends JObject{
}
class Static_PardonCommand {
static register(dispatcher: CommandDispatcher): void;
static method_13475(context: CommandContext): number;
static pardon(source: ServerCommandSource,targets: Collection): number;
static method_13474(context: CommandContext,builder: SuggestionsBuilder): CompletableFuture;
static method_52013(gameProfile: GameProfile): Text;
static method_13476(source: ServerCommandSource): boolean;
static ALREADY_UNBANNED_EXCEPTION: SimpleCommandExceptionType;
}

//net.minecraft.world.entity.SectionedEntityCache
class SectionedEntityCache extends JObject{
 removeSection(sectionPos: long): void;
 findTrackingSection(sectionPos: long): EntityTrackingSection;
 getTrackingSections(chunkPos: long): Stream;
 getTrackingSection(sectionPos: long): EntityTrackingSection;
 getChunkPositions(): LongSet;
 sectionCount(): number;
 getSections(chunkPos: long): LongStream;
 forEachIntersects(box: Box,consumer: LazyIterationConsumer): void;
 forEachIntersects(filter: TypeFilter,box: Box,consumer: LazyIterationConsumer): void;
 forEachInBox(box: Box,consumer: LazyIterationConsumer): void;
}
class Static_SectionedEntityCache {
static chunkPosFromSectionPos(sectionPos: long): long;
static method_31778(typeFilter: TypeFilter,box: Box,lazyIterationConsumer: LazyIterationConsumer,section: EntityTrackingSection): LazyIterationConsumer_NextIteration;
static method_39465(box: Box,lazyIterationConsumer: LazyIterationConsumer,section: EntityTrackingSection): LazyIterationConsumer_NextIteration;
static method_31780(trackingSection: LongSet,sectionPos: long): void;
}

//net.minecraft.registry.RegistryWrapper$WrapperLookup$2


//net.minecraft.server.dedicated.ServerMBean
class ServerMBean extends JObject, DynamicMBean{
 invoke(actionName: string,params: Object[],signature: String[]): Object;
 getAttributes(attributes: String[]): AttributeList;
 setAttribute(attribute: Attribute): void;
 getAttribute(attribute: string): Object;
 getMBeanInfo(): MBeanInfo;
 setAttributes(attributes: AttributeList): AttributeList;
}
class Static_ServerMBean {
static register(server: MinecraftServer): void;
static method_27183(entry: ServerMBean_Entry): string;
static method_27178(i: number): MBeanAttributeInfo[];
static method_27179(entry: ServerMBean_Entry): Attribute;
static LOGGER: Logger;
}

//net.minecraft.entity.attribute.DefaultAttributeContainer$Builder
class DefaultAttributeContainer_Builder extends JObject{
 add(attribute: EntityAttribute,baseValue: number): DefaultAttributeContainer_Builder;
 add(attribute: EntityAttribute): DefaultAttributeContainer_Builder;
 build(): DefaultAttributeContainer;
}

//net.minecraft.util.math.MathConstants
class MathConstants extends JObject{
}
class Static_MathConstants {
static PI: number;
static DEGREES_PER_RADIAN: number;
static RADIANS_PER_DEGREE: number;
static EPSILON: number;
}

//net.minecraft.entity.ai.brain.task.ForgetCompletedPointOfInterestTask
class ForgetCompletedPointOfInterestTask extends JObject{
}
class Static_ForgetCompletedPointOfInterestTask {
static create(poiTypePredicate: Predicate,poiPosModule: MemoryModuleType): Task;
static isBedOccupiedByOthers(world: ServerWorld,pos: BlockPos,entity: LivingEntity): boolean;
static method_47189(memoryModuleType: MemoryModuleType,predicate: Predicate,context: TaskTriggerer_TaskContext): App;
static method_47188(taskContext: TaskTriggerer_TaskContext,predicate: Predicate,poiPos: MemoryQueryResult): TaskRunnable;
static method_47187(taskContext: TaskTriggerer_TaskContext,memoryQueryResult: MemoryQueryResult,predicate: Predicate,world: ServerWorld,entity: LivingEntity,time: long): boolean;
static MAX_RANGE: number;
}

//net.minecraft.client.gui.DrawContext$ScissorStack
class DrawContext_ScissorStack extends JObject{
 push(rect: ScreenRect): ScreenRect;
 pop(): ScreenRect;
}

//net.minecraft.client.tutorial.MovementTutorialStepHandler
class MovementTutorialStepHandler extends JObject, TutorialStepHandler{
 destroy(): void;
 tick(): void;
 onMouseUpdate(deltaX: number,deltaY: number): void;
 onMovement(input: Input): void;
}
class Static_MovementTutorialStepHandler {
static field_33029: number;
static field_33030: number;
static field_33031: number;
static field_33032: number;
static field_33033: number;
static MOVE_TITLE: Text;
static MOVE_DESCRIPTION: Text;
static LOOK_TITLE: Text;
static LOOK_DESCRIPTION: Text;
}

//net.minecraft.client.gl.Uniform
class Uniform extends JObject{
 set(value1: number,value2: number,value3: number,value4: number): void;
 set(value1: number,value2: number,value3: number,value4: number,value5: number,value6: number): void;
 set(value1: number,value2: number,value3: number,value4: number,value5: number,value6: number,value7: number,value8: number): void;
 set(vec: Vector4f): void;
 set(vector: Vector3f): void;
 set(values: number[]): void;
 set(values: Matrix3f): void;
 set(values: Matrix4f): void;
 set(value1: number,value2: number,value3: number,value4: number,value5: number,value6: number,value7: number,value8: number,value9: number,value10: number,value11: number,value12: number,value13: number,value14: number,value15: number,value16: number): void;
 set(value1: number,value2: number,value3: number,value4: number,value5: number,value6: number,value7: number,value8: number,value9: number,value10: number,value11: number,value12: number): void;
 set(value1: number,value2: number,value3: number,value4: number,value5: number,value6: number,value7: number,value8: number,value9: number): void;
 set(value: number): void;
 set(value1: number): void;
 set(value1: number,value2: number,value3: number): void;
 set(value1: number,value2: number): void;
 set(value1: number,value2: number): void;
 set(value1: number,value2: number,value3: number): void;
 set(value1: number,value2: number,value3: number,value4: number): void;
 setForDataType(value1: number,value2: number,value3: number,value4: number): void;
 setForDataType(value1: number,value2: number,value3: number,value4: number): void;
 setAndFlip(value1: number,value2: number,value3: number,value4: number): void;
 method_35654(value1: number,value2: number,value3: number,value4: number,value5: number,value6: number,value7: number,value8: number): void;
 method_35653(value1: number,value2: number,value3: number,value4: number,value5: number,value6: number): void;
 method_35655(value1: number,value2: number,value3: number,value4: number,value5: number,value6: number,value7: number,value8: number,value9: number,value10: number,value11: number,value12: number): void;
}

//net.minecraft.data.client.BlockStateModelGenerator
class BlockStateModelGenerator extends JObject{
 register(): void;
 registerOrientableTrapdoor(trapdoorBlock: Block): void;
 registerParentedItemModel(block: Block,parentModelId: Identifier): void;
 registerParentedItemModel(item: Item,parentModelId: Identifier): void;
 registerNorthDefaultHorizontalRotated(block: Block,modelFactory: TexturedModel_Factory): void;
 registerSouthDefaultHorizontalFacing(modelFactory: TexturedModel_Factory,blocks: Block[]): void;
 registerNorthDefaultHorizontalRotation(block: Block): void;
 registerNorthDefaultHorizontalRotatable(block: Block,texture: TextureMap): void;
 registerTintableCrossBlockStateWithStages(block: Block,tintType: BlockStateModelGenerator_TintType,stageProperty: Property,stages: number[]): void;
 excludeFromSimpleItemModelGeneration(block: Block): void;
 registerSimpleCubeAll(block: Block): void;
 registerTintableCross(block: Block,tintType: BlockStateModelGenerator_TintType): void;
 registerTintableCross(block: Block,tintType: BlockStateModelGenerator_TintType,texture: TextureMap): void;
 registerFlowerPotPlant(plantBlock: Block,flowerPotBlock: Block,tintType: BlockStateModelGenerator_TintType): void;
 registerHangingSign(strippedLog: Block,hangingSign: Block,wallHangingSign: Block): void;
 registerDoubleBlock(doubleBlock: Block,tintType: BlockStateModelGenerator_TintType): void;
 registerDoubleBlock(block: Block,upperHalfModelId: Identifier,lowerHalfModelId: Identifier): void;
 registerSimpleState(block: Block): void;
 registerBrushableBlock(block: Block): void;
 registerCubeAllModelTexturePool(block: Block): BlockStateModelGenerator_BlockTexturePool;
 registerStateWithModelReference(block: Block,modelReference: Block): void;
 registerTintableCrossBlockState(block: Block,tintType: BlockStateModelGenerator_TintType,crossTexture: TextureMap): void;
 registerTintableCrossBlockState(block: Block,tintType: BlockStateModelGenerator_TintType): void;
 registerAxisRotated(block: Block,modelFactory: TexturedModel_Factory): void;
 registerAxisRotated(block: Block,verticalModelFactory: TexturedModel_Factory,horizontalModelFactory: TexturedModel_Factory): void;
 registerAxisRotated(block: Block,modelId: Identifier): void;
 registerCommandBlock(commandBlock: Block): void;
 getDripstoneVariant(direction: Direction,thickness: Thickness): BlockStateVariant;
 createUpDefaultFacingVariantMap(): BlockStateVariantMap;
 supplyChiseledBookshelfModels(blockStateSupplier: MultipartBlockStateSupplier,facingCondition: When_PropertyCondition,rotation: VariantSettings_Rotation): void;
 supplyChiseledBookshelfModel(blockStateSupplier: MultipartBlockStateSupplier,facingCondition: When_PropertyCondition,rotation: VariantSettings_Rotation,property: BooleanProperty,model: Model,occupied: boolean): void;
 registerWoolAndCarpet(wool: Block,carpet: Block): void;
 getBambooBlockStateVariants(age: number): List;
 registerCubeWithCustomTextures(block: Block,otherTextureSource: Block,texturesFactory: BiFunction): void;
 registerWeightedPressurePlate(weightedPressurePlate: Block,textureSource: Block): void;
 registerNetherrackBottomCustomTop(block: Block): void;
 addJigsawOrientationToVariant(orientation: JigsawOrientation,variant: BlockStateVariant): BlockStateVariant;
 registerDispenserLikeOrientable(block: Block): void;
 registerBuiltinWithParticle(block: Block,particleSource: Item): void;
 registerBuiltinWithParticle(block: Block,particleSource: Identifier): void;
 registerMushroomBlock(mushroomBlock: Block): void;
 registerStraightRail(rail: Block): void;
 registerTurnableRail(rail: Block): void;
 registerPottedAzaleaBush(block: Block): void;
 registerRandomHorizontalRotations(modelFactory: TexturedModel_Factory,blocks: Block[]): void;
 registerMirrorable(block: Block): void;
 registerRotatable(block: Block): void;
 registerSingleton(block: Block,modelFactory: TexturedModel_Factory): void;
 registerSingleton(block: Block,textures: TextureMap,model: Model): void;
 createSubModel(block: Block,suffix: string,model: Model,texturesFactory: Function): Identifier;
 registerGourd(stemBlock: Block,attachedStemBlock: Block): void;
 registerLog(logBlock: Block): BlockStateModelGenerator_LogTexturePool;
 registerCoralFan(coralFanBlock: Block,coralWallFanBlock: Block): void;
 registerCoral(coral: Block,deadCoral: Block,coralBlock: Block,deadCoralBlock: Block,coralFan: Block,deadCoralFan: Block,coralWallFan: Block,deadCoralWallFan: Block): void;
 registerGlassPane(glass: Block,glassPane: Block): void;
 registerBuiltin(block: Block,particleBlock: Block): BlockStateModelGenerator_BuiltinModelPool;
 registerBuiltin(modelId: Identifier,particleBlock: Block): BlockStateModelGenerator_BuiltinModelPool;
 registerFlowerbed(flowerbed: Block): void;
 registerBeehive(beehive: Block,texturesFactory: Function): void;
 registerAnvil(anvil: Block): void;
 registerCrop(crop: Block,ageProperty: Property,ageTextureIndices: number[]): void;
 registerCampfire(blocks: Block[]): void;
 registerCooker(cooker: Block,modelFactory: TexturedModel_Factory): void;
 registerAzalea(block: Block): void;
 method_51463(block: Block): void;
 registerAmethyst(block: Block): void;
 registerRod(block: Block): void;
 getFireFloorModels(texture: Block): List;
 registerLantern(lantern: Block): void;
 getFireUpModels(texture: Block): List;
 getFireSideModels(texture: Block): List;
 registerTopSoil(topSoil: Block,modelId: Identifier,snowyVariant: BlockStateVariant): void;
 registerParented(modelSource: Block,child: Block): void;
 registerPiston(piston: Block,extendedModelId: Identifier,textures: TextureMap): void;
 registerTorch(torch: Block,wallTorch: Block): void;
 getTurtleEggModel(eggs: Integer,hatch: Integer): Identifier;
 getTurtleEggModel(eggs: number,prefix: string,textures: TextureMap): Identifier;
 registerWallPlant(block: Block): void;
 registerCandle(candle: Block,cake: Block): void;
 registerRoots(root: Block,pottedRoot: Block): void;
 registerPlantPart(plant: Block,plantStem: Block,tintType: BlockStateModelGenerator_TintType): void;
 registerShulkerBox(shulkerBox: Block): void;
 registerBed(bed: Block,particleSource: Block): void;
 registerItemModel(block: Block): void;
 registerItemModel(item: Item): void;
 registerItemModel(block: Block,textureSuffix: string): void;
 registerDoor(doorBlock: Block): void;
 registerTrapdoor(trapdoorBlock: Block): void;
 blockStateCollector: Consumer;
 modelCollector: BiConsumer;
}
class Static_BlockStateModelGenerator {
static createCustomFenceBlockState(customFenceBlock: Block,postModelId: Identifier,northModelId: Identifier,eastModelId: Identifier,southModelId: Identifier,westModelId: Identifier): BlockStateSupplier;
static createFenceGateBlockState(fenceGateBlock: Block,openModelId: Identifier,closedModelId: Identifier,openWallModelId: Identifier,closedWallModelId: Identifier,uvlock: boolean): BlockStateSupplier;
static createButtonBlockState(buttonBlock: Block,regularModelId: Identifier,pressedModelId: Identifier): BlockStateSupplier;
static createFenceBlockState(fenceBlock: Block,postModelId: Identifier,sideModelId: Identifier): BlockStateSupplier;
static createPressurePlateBlockState(pressurePlateBlock: Block,upModelId: Identifier,downModelId: Identifier): BlockStateSupplier;
static createWallBlockState(wallBlock: Block,postModelId: Identifier,lowSideModelId: Identifier,tallSideModelId: Identifier): BlockStateSupplier;
static createSlabBlockState(slabBlock: Block,bottomModelId: Identifier,topModelId: Identifier,fullModelId: Identifier): BlockStateSupplier;
static createStairsBlockState(stairsBlock: Block,innerModelId: Identifier,regularModelId: Identifier,outerModelId: Identifier): BlockStateSupplier;
static createNorthDefaultHorizontalRotationStates(): BlockStateVariantMap;
static createSouthDefaultHorizontalRotationStates(): BlockStateVariantMap;
static createModelVariantWithRandomHorizontalRotations(modelId: Identifier): BlockStateVariant[];
static createEastDefaultHorizontalRotationStates(): BlockStateVariantMap;
static createBlockStateWithTwoModelAndRandomInversion(block: Block,firstModelId: Identifier,secondModelId: Identifier): VariantsBlockStateSupplier;
static createBlockStateWithRandomHorizontalRotations(block: Block,modelId: Identifier): VariantsBlockStateSupplier;
static createDoorBlockState(doorBlock: Block,bottomLeftHingeClosedModelId: Identifier,bottomLeftHingeOpenModelId: Identifier,bottomRightHingeClosedModelId: Identifier,bottomRightHingeOpenModelId: Identifier,topLeftHingeClosedModelId: Identifier,topLeftHingeOpenModelId: Identifier,topRightHingeClosedModelId: Identifier,topRightHingeOpenModelId: Identifier): BlockStateSupplier;
static createBooleanModelMap(property: BooleanProperty,trueModel: Identifier,falseModel: Identifier): BlockStateVariantMap;
static createMudBrickState(block: Block,modelId: Identifier,textures: TextureMap,modelCollector: BiConsumer): BlockStateSupplier;
static createOrientableTrapdoorBlockState(trapdoorBlock: Block,topModelId: Identifier,bottomModelId: Identifier,openModelId: Identifier): BlockStateSupplier;
static createNorthDefaultRotationStates(): BlockStateVariantMap;
static createAxisRotatedVariantMap(): BlockStateVariantMap;
static createTrapdoorBlockState(trapdoorBlock: Block,topModelId: Identifier,bottomModelId: Identifier,openModelId: Identifier): BlockStateSupplier;
static createDeepslateState(block: Block,modelId: Identifier,textures: TextureMap,modelCollector: BiConsumer): BlockStateSupplier;
static buildBlockStateVariants(modelIds: List,processor: UnaryOperator): List;
static createValueFencedModelMap(property: Property,fence: Comparable,higherOrEqualModelId: Identifier,lowerModelId: Identifier): BlockStateVariantMap;
static createSingletonBlockState(block: Block,modelId: Identifier): VariantsBlockStateSupplier;
static createAxisRotatedBlockState(block: Block,modelId: Identifier): BlockStateSupplier;
static createAxisRotatedBlockState(block: Block,verticalModelId: Identifier,horizontalModelId: Identifier): BlockStateSupplier;
static createUvLockedColumnBlockState(block: Block,textureMap: TextureMap,modelCollector: BiConsumer): BlockStateSupplier;
static method_33509(textureMap: TextureMap): void;
static method_34623(textures: TextureMap): void;
static method_34643(textureMap: TextureMap): void;
static method_33512(textureMap: TextureMap): void;
static method_34636(textures: TextureMap): void;
static createStoneState(block: Block,modelId: Identifier,textures: TextureMap,modelCollector: BiConsumer): BlockStateSupplier;
static fillDoorVariantMap(variantMap: BlockStateVariantMap_QuadrupleProperty,targetHalf: DoubleBlockHalf,leftHingeClosedModelId: Identifier,leftHingeOpenModelId: Identifier,rightHingeClosedModelId: Identifier,rightHingeOpenModelId: Identifier): BlockStateVariantMap_QuadrupleProperty;
static method_49986(block: Block,age: Integer,half: DoubleBlockHalf): BlockStateVariant;
static method_34628(identifier: Identifier,identifier2: Identifier,identifier3: Identifier,identifier4: Identifier,identifier5: Identifier,identifier6: Identifier,on: Boolean,shape: RailShape): BlockStateVariant;
static method_34650(identifier: Identifier,textureMap: TextureMap): void;
static method_34637(textureMap: TextureMap,id: Identifier): TextureMap;
static method_34617(comparable: Comparable,blockStateVariant: BlockStateVariant,blockStateVariant2: BlockStateVariant,comparable2: Comparable): BlockStateVariant;
static method_34621(string: string,i: number): BlockStateVariant;
static method_34645(identifier: Identifier,textures: TextureMap): void;
static method_34624(textureMap: TextureMap,id: Identifier): TextureMap;
static method_34633(blockStateVariant: BlockStateVariant): BlockStateVariant;
static method_34615(blockStateVariant: BlockStateVariant): BlockStateVariant;
static method_34657(modelId: Identifier): BlockStateVariant;
static method_34651(blockStateVariant: BlockStateVariant): BlockStateVariant;
static method_34655(blockStateVariant: BlockStateVariant): BlockStateVariant;
static method_25656(blockStateVariant: BlockStateVariant): BlockStateVariant;
static method_34659(blockStateVariant: BlockStateVariant): BlockStateVariant;
static method_34653(blockStateVariant: BlockStateVariant): BlockStateVariant;
static method_34647(blockStateVariant: BlockStateVariant): BlockStateVariant;
static method_34656(blockStateVariant: BlockStateVariant): BlockStateVariant;
static method_34658(blockStateVariant: BlockStateVariant): BlockStateVariant;
static method_34641(blockStateVariant: BlockStateVariant): BlockStateVariant;
static method_34639(identifier: Identifier,textures: TextureMap): void;
static method_34626(identifier: Identifier,textures: TextureMap): void;
static method_49985(identifier: Identifier,identifier2: Identifier,phase: SculkSensorPhase): BlockStateVariant;
static method_34619(tick: Integer,locked: Boolean,on: Boolean): BlockStateVariant;
static method_34627(identifier: Identifier,identifier2: Identifier,phase: SculkSensorPhase): BlockStateVariant;
static method_34625(identifier: Identifier,height: Integer): BlockStateVariant;
static method_34616(boolean_: Boolean,boolean2: Boolean): BlockStateVariant;
static method_37366(block: Block,propertyCondition: When_PropertyCondition): void;
static method_49988(fun: Function,hatch: Integer): BlockStateVariant;
static method_42036(identifier: Identifier,identifier2: Identifier,bloom: Boolean): BlockStateVariant;
static method_34630(identifiers: Identifier[],charges: Integer): BlockStateVariant;
static method_43823(model: Identifier): BlockStateVariant;
static method_34605(block: Block,propertyCondition: When_PropertyCondition,property: BooleanProperty): void;
static method_43821(model: Identifier): BlockStateVariant;
static method_43819(model: Identifier): BlockStateVariant;
static method_43820(model: Identifier): BlockStateVariant;
static method_43818(model: Identifier): BlockStateVariant;
static method_43822(model: Identifier): BlockStateVariant;
static VARIANT_POOL_FUNCTIONS: Map;
static CONNECTION_VARIANT_FUNCTIONS: List;
static CHISELED_BOOKSHELF_MODEL_CACHE: Map;
}

//net.minecraft.world.event.listener.GameEventListener
interface GameEventListener extends JObject{
 listen(world: ServerWorld,event: GameEvent,emitter: GameEvent_Emitter,emitterPos: Vec3d): boolean;
 getRange(): number;
 getTriggerOrder(): GameEventListener_TriggerOrder;
 getPositionSource(): PositionSource;
}

//net.minecraft.util.collection.IndexedIterable
interface IndexedIterable extends JObject, Iterable{
 get(index: number): Object;
 size(): number;
 getOrThrow(index: number): Object;
 getRawId(value: Object): number;
}
class Static_IndexedIterable {
static ABSENT_RAW_ID: number;
}

//net.minecraft.test.TimedTaskRunner
class TimedTaskRunner extends JObject{
 fail(exceptionSupplier: Supplier): void;
 runReported(tick: long): void;
 runSilently(tick: long): void;
 expectMinDurationOrRun(minDuration: number,task: Runnable): TimedTaskRunner;
 createAndAddReported(task: Runnable): TimedTaskRunner;
 createAndAddTrigger(): TimedTaskRunner_Trigger;
 createAndAdd(task: Runnable): TimedTaskRunner;
 createAndAdd(duration: long,task: Runnable): TimedTaskRunner;
 completeIfSuccessful(): void;
 expectMinDurationAndRun(minDuration: number,task: Runnable): TimedTaskRunner;
 expectMinDuration(minDuration: number): TimedTaskRunner;
}
class Static_TimedTaskRunner {
static method_36087(): void;
}

//net.minecraft.world.ChunkSerializer
class ChunkSerializer extends JObject{
}
class Static_ChunkSerializer {
static deserialize(world: ServerWorld,poiStorage: PointOfInterestStorage,chunkPos: ChunkPos,nbt: NbtCompound): ProtoChunk;
static createCodec(biomeRegistry: Registry): Codec;
static serialize(world: ServerWorld,chunk: Chunk): NbtCompound;
static getChunkType(nbt: NbtCompound): ChunkStatus_ChunkType;
static toNbt(lists: ShortList[]): NbtList;
static getList(nbt: NbtCompound,key: string): NbtList;
static readStructureReferences(registryManager: DynamicRegistryManager,pos: ChunkPos,nbt: NbtCompound): Map;
static getEntityLoadingCallback(world: ServerWorld,nbt: NbtCompound): WorldChunk_EntityLoader;
static logRecoverableError(chunkPos: ChunkPos,y: number,message: string): void;
static readStructureStarts(context: StructureContext,nbt: NbtCompound,worldSeed: long): Map;
static method_39037(chunkPos: ChunkPos,i: number,errorMessage: string): void;
static method_39317(id: string): Optional;
static method_39318(id: string): Optional;
static method_39038(chunkPos: ChunkPos,i: number,errorMessage: string): void;
static method_39314(id: string): Optional;
static method_39316(id: string): Optional;
static method_39312(block: Block): string;
static method_39313(fluid: Fluid): string;
static method_39797(nbtList: NbtList,serverWorld: ServerWorld,nbtList2: NbtList,chunk: WorldChunk): void;
static writeStructures(context: StructureContext,pos: ChunkPos,starts: Map,references: Map): NbtCompound;
static method_39315(nbtCompound: NbtCompound,nbtElement: NbtElement): void;
static method_24029(chunkPos: ChunkPos,identifier: Identifier,packedPos: long): boolean;
static serializeTicks(world: ServerWorld,nbt: NbtCompound,tickSchedulers: Chunk_TickSchedulers): void;
static method_39539(nbtCompound: NbtCompound,nbtElement: NbtElement): void;
static CODEC: Codec;
static LOGGER: Logger;
static UPGRADE_DATA_KEY: string;
static BLOCK_TICKS: string;
static FLUID_TICKS: string;
static X_POS_KEY: string;
static Z_POS_KEY: string;
static HEIGHTMAPS_KEY: string;
static IS_LIGHT_ON_KEY: string;
static SECTIONS_KEY: string;
static BLOCK_LIGHT_KEY: string;
static SKY_LIGHT_KEY: string;
}

//net.minecraft.client.texture.atlas.FilterAtlasSource
class FilterAtlasSource extends JObject, AtlasSource{
 load(resourceManager: ResourceManager,regions: AtlasSource_SpriteRegions): void;
 getType(): AtlasSourceType;
}
class Static_FilterAtlasSource {
static method_47691(filterAtlasSource: FilterAtlasSource): BlockEntry;
static method_47690(instance: RecordCodecBuilder_Instance): App;
static CODEC: Codec;
}

//net.minecraft.client.render.entity.feature.FeatureRendererContext
interface FeatureRendererContext extends JObject{
 getModel(): EntityModel;
 getTexture(entity: Entity): Identifier;
}

//net.minecraft.entity.ai.brain.task.WalkTowardsWaterTask
class WalkTowardsWaterTask extends JObject{
}
class Static_WalkTowardsWaterTask {
static create(range: number,speed: number): Task;
static method_47173(mutableLong: MutableLong,i: number,f: number,context: TaskTriggerer_TaskContext): App;
static method_47175(mutableLong: MutableLong,i: number,memoryQueryResult: MemoryQueryResult,memoryQueryResult2: MemoryQueryResult,f: number,world: ServerWorld,entity: PathAwareEntity,time: long): boolean;
static method_47174(mutableLong: MutableLong,i: number,f: number,attackTarget: MemoryQueryResult,walkTarget: MemoryQueryResult,lookTarget: MemoryQueryResult): TaskRunnable;
}

//net.minecraft.resource.DefaultResourcePack
class DefaultResourcePack extends JObject, ResourcePack{
 getName(): string;
 getFactory(): ResourceFactory;
 findResources(type: ResourceType,namespace: string,prefix: string,consumer: ResourcePack_ResultConsumer): void;
 close(): void;
 open(type: ResourceType,id: Identifier): InputSupplier;
 openRoot(segments: String[]): InputSupplier;
 isAlwaysStable(): boolean;
 getNamespaces(type: ResourceType): Set;
 forEachNamespacedPath(type: ResourceType,path: Identifier,consumer: Consumer): void;
 parseMetadata(metaReader: ResourceMetadataReader): Object;
}
class Static_DefaultResourcePack {
static method_45196(identifier: Identifier,result: DataResult_PartialResult): void;
static method_45195(string: string,result: DataResult_PartialResult): void;
static method_45191(identifier: Identifier,result: DataResult_PartialResult): InputSupplier;
static collectIdentifiers(consumer: ResourcePack_ResultConsumer,namespace: string,root: Path,prefixSegments: List): void;
static LOGGER: Logger;
}

//net.minecraft.client.sound.SoundEngine$SourceSetImpl
class SoundEngine_SourceSetImpl extends JObject, SoundEngine_SourceSet{
 close(): void;
 release(source: Source): boolean;
 createSource(): Source;
 getMaxSourceCount(): number;
 getSourceCount(): number;
}

//net.minecraft.util.collection.Weighted$Present
class Weighted_Present extends JObject, Weighted{
 getData(): Object;
 getWeight(): Weight;
}
class Static_Weighted_Present {
static createCodec(dataCodec: Codec): Codec;
static method_34982(codec: Codec,instance: RecordCodecBuilder_Instance): App;
}

//net.minecraft.network.message.ArgumentSignatureDataMap$ArgumentSigner
interface ArgumentSignatureDataMap_ArgumentSigner extends JObject{
 sign(value: string): MessageSignatureData;
}

//net.minecraft.client.gl.GlDebug$DebugMessage
class GlDebug_DebugMessage extends JObject{
 toString(): string;
}

//net.minecraft.network.packet.s2c.play.ExperienceBarUpdateS2CPacket
class ExperienceBarUpdateS2CPacket extends JObject, Packet{
 apply(clientPlayPacketListener: ClientPlayPacketListener): void;
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
 getExperience(): number;
 getExperienceLevel(): number;
 getBarProgress(): number;
}

//net.minecraft.nbt.visitor.StringNbtWriter
class StringNbtWriter extends JObject, NbtElementVisitor{
 apply(element: NbtElement): string;
 visitEnd(element: NbtEnd): void;
 visitInt(element: NbtInt): void;
 visitLong(element: NbtLong): void;
 visitString(element: NbtString): void;
 visitDouble(element: NbtDouble): void;
 visitShort(element: NbtShort): void;
 visitFloat(element: NbtFloat): void;
 visitByte(element: NbtByte): void;
 visitByteArray(element: NbtByteArray): void;
 visitLongArray(element: NbtLongArray): void;
 visitCompound(compound: NbtCompound): void;
 visitIntArray(element: NbtIntArray): void;
 visitList(element: NbtList): void;
}
class Static_StringNbtWriter {
static escapeName(name: string): string;
static SIMPLE_NAME: Pattern;
}

//net.minecraft.client.render.debug.GameEventDebugRenderer
class GameEventDebugRenderer extends JObject, DebugRenderer_Renderer{
 addListener(positionSource: PositionSource,range: number): void;
 render(matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,cameraX: number,cameraY: number,cameraZ: number): void;
 addEvent(event: GameEvent,pos: Vec3d): void;
}
class Static_GameEventDebugRenderer {
static drawBoxIfCameraReady(matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,box: Box,red: number,green: number,blue: number,alpha: number): void;
static method_33091(listener: GameEventDebugRenderer_Listener,matrixStack: MatrixStack,vertexConsumer: VertexConsumer,d: number,e: number,f: number,pos: Vec3d): void;
static method_33092(matrixStack: MatrixStack,vertexConsumerProvider: VertexConsumerProvider,pos: Vec3d): void;
static method_33090(matrixStack: MatrixStack,vertexConsumer: VertexConsumer,d: number,e: number,f: number,pos: Vec3d): void;
static method_33086(world: World,vec3d: Vec3d,listener: GameEventDebugRenderer_Listener): boolean;
static field_32899: number;
static field_32900: number;
}

//net.minecraft.network.packet.s2c.play.CommandSuggestionsS2CPacket
class CommandSuggestionsS2CPacket extends JObject, Packet{
 apply(clientPlayPacketListener: ClientPlayPacketListener): void;
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
 getCompletionId(): number;
 getSuggestions(): Suggestions;
}
class Static_CommandSuggestionsS2CPacket {
static method_34117(stringRange: StringRange,buf2: PacketByteBuf): Suggestion;
static method_43880(buf3: PacketByteBuf,tooltip: Message): void;
static method_34118(buf2: PacketByteBuf,suggestion: Suggestion): void;
}

//net.minecraft.util.profiler.ProfilerSystem
class ProfilerSystem extends JObject, ReadableProfiler{
 swap(locationGetter: Supplier): void;
 swap(location: string): void;
 push(locationGetter: Supplier): void;
 push(location: string): void;
 pop(): void;
 getResult(): ProfileResult;
 visit(marker: string,num: number): void;
 visit(markerGetter: Supplier,num: number): void;
 getInfo(name: string): ProfilerSystem_LocatedInfo;
 markSampleType(type: SampleType): void;
 getSampleTargets(): Set;
 endTick(): void;
 startTick(): void;
}
class Static_ProfilerSystem {
static method_24245(k: string): ProfilerSystem_LocatedInfo;
static method_21718(l: long): Object;
static TIMEOUT_NANOSECONDS: long;
static LOGGER: Logger;
}

//net.minecraft.client.network.DataQueryHandler
class DataQueryHandler extends JObject{
 queryBlockNbt(pos: BlockPos,callback: Consumer): void;
 queryEntityNbt(entityNetworkId: number,callback: Consumer): void;
 handleQueryResponse(transactionId: number,nbt: NbtCompound): boolean;
}

//net.minecraft.client.texture.TextureManager
class TextureManager extends JObject, ResourceReloader, TextureTickListener, AutoCloseable{
 close(): void;
 getOrDefault(id: Identifier,fallback: AbstractTexture): AbstractTexture;
 reload(synchronizer: ResourceReloader_Synchronizer,manager: ResourceManager,prepareProfiler: Profiler,applyProfiler: Profiler,prepareExecutor: Executor,applyExecutor: Executor): CompletableFuture;
 tick(): void;
 getTexture(id: Identifier): AbstractTexture;
 registerTexture(id: Identifier,texture: AbstractTexture): void;
 registerDynamicTexture(prefix: string,texture: NativeImageBackedTexture): Identifier;
 bindTexture(id: Identifier): void;
 destroyTexture(id: Identifier): void;
 loadTextureAsync(id: Identifier,executor: Executor): CompletableFuture;
 dumpDynamicTextures(path: Path): void;
}
class Static_TextureManager {
static method_4621(abstractTexture: AbstractTexture): string;
static runOnRenderThread(runnable: Runnable): void;
static method_49716(path: Path,id: Identifier,texture: AbstractTexture): void;
static method_45854(completableFuture: CompletableFuture): void;
static method_22814(runnable: Runnable): void;
static method_22815(runnable: Runnable): void;
static LOGGER: Logger;
static MISSING_IDENTIFIER: Identifier;
}

//net.minecraft.client.render.entity.animation.Transformation$Target
interface Transformation_Target extends JObject{
 apply(modelPart: ModelPart,vec: Vector3f): void;
}

//net.minecraft.data.server.recipe.RecipeJsonBuilder$1


//net.minecraft.data.report.DynamicRegistriesProvider
class DynamicRegistriesProvider extends JObject, DataProvider{
 getName(): string;
 run(writer: DataWriter): CompletableFuture;
}
class Static_DynamicRegistriesProvider {
static writeToPath(path: Path,cache: DataWriter,json: DynamicOps,encoder: Encoder,value: Object): CompletableFuture;
static method_46592(pathResolver: DataOutput_PathResolver,dataWriter: DataWriter,dynamicOps: DynamicOps,entry2: RegistryLoader_Entry,entry: RegistryEntry_Reference): CompletableFuture;
static method_40362(path: Path,error: string): void;
static method_46591(i: number): CompletableFuture[];
static method_46815(i: number): CompletableFuture[];
static LOGGER: Logger;
}

//net.minecraft.world.gen.chunk.BlockColumn
interface BlockColumn extends JObject{
 getState(y: number): BlockState;
 setState(y: number,state: BlockState): void;
}

//net.minecraft.world.gen.ProbabilityConfig
class ProbabilityConfig extends JObject, FeatureConfig{
 probability: number;
}
class Static_ProbabilityConfig {
static method_28748(instance: RecordCodecBuilder_Instance): App;
static method_28747(probabilityConfig: ProbabilityConfig): Float;
static CODEC: Codec;
}

//net.minecraft.entity.EntityType$EntityFactory
interface EntityType_EntityFactory extends JObject{
 create(type: EntityType,world: World): Entity;
}

//net.minecraft.predicate.entity.TypeSpecificPredicate
interface TypeSpecificPredicate extends JObject{
 test(entity: Entity,world: ServerWorld,pos: Vec3d): boolean;
 getDeserializer(): TypeSpecificPredicate_Deserializer;
 typeSpecificToJson(): JsonObject;
 toJson(): JsonElement;
}
class Static_TypeSpecificPredicate {
static cat(variant: CatVariant): TypeSpecificPredicate;
static fromJson(json: JsonElement): TypeSpecificPredicate;
static frog(variant: FrogVariant): TypeSpecificPredicate;
static ANY: TypeSpecificPredicate;
}

//net.minecraft.structure.DesertVillageData
class DesertVillageData extends JObject{
}
class Static_DesertVillageData {
static bootstrap(poolRegisterable: Registerable): void;
static TOWN_CENTERS_KEY: RegistryKey;
static TERMINATORS_KEY: RegistryKey;
static ZOMBIE_TERMINATORS_KEY: RegistryKey;
}

//net.minecraft.item.FoodComponents
class FoodComponents extends JObject{
}
class Static_FoodComponents {
static createStew(hunger: number): FoodComponent_Builder;
static APPLE: FoodComponent;
static BAKED_POTATO: FoodComponent;
static BEEF: FoodComponent;
static BEETROOT: FoodComponent;
static BEETROOT_SOUP: FoodComponent;
static BREAD: FoodComponent;
static CARROT: FoodComponent;
static CHICKEN: FoodComponent;
static CHORUS_FRUIT: FoodComponent;
static COD: FoodComponent;
static COOKED_BEEF: FoodComponent;
static COOKED_CHICKEN: FoodComponent;
static COOKED_COD: FoodComponent;
static COOKED_MUTTON: FoodComponent;
static COOKED_PORKCHOP: FoodComponent;
static COOKED_RABBIT: FoodComponent;
static COOKED_SALMON: FoodComponent;
static COOKIE: FoodComponent;
static DRIED_KELP: FoodComponent;
static ENCHANTED_GOLDEN_APPLE: FoodComponent;
static GOLDEN_APPLE: FoodComponent;
static GOLDEN_CARROT: FoodComponent;
static HONEY_BOTTLE: FoodComponent;
static MELON_SLICE: FoodComponent;
static MUSHROOM_STEW: FoodComponent;
static MUTTON: FoodComponent;
static POISONOUS_POTATO: FoodComponent;
static PORKCHOP: FoodComponent;
static POTATO: FoodComponent;
static PUFFERFISH: FoodComponent;
static PUMPKIN_PIE: FoodComponent;
static RABBIT: FoodComponent;
static RABBIT_STEW: FoodComponent;
static ROTTEN_FLESH: FoodComponent;
static SALMON: FoodComponent;
static SPIDER_EYE: FoodComponent;
static SUSPICIOUS_STEW: FoodComponent;
static SWEET_BERRIES: FoodComponent;
static GLOW_BERRIES: FoodComponent;
static TROPICAL_FISH: FoodComponent;
}

//net.minecraft.world.level.ServerWorldProperties
interface ServerWorldProperties extends JObject, MutableWorldProperties{
 setTime(time: long): void;
 getLevelName(): string;
 setTimeOfDay(timeOfDay: long): void;
 setInitialized(initialized: boolean): void;
 isInitialized(): boolean;
 areCommandsAllowed(): boolean;
 setGameMode(gameMode: GameMode): void;
 setWanderingTraderSpawnDelay(wanderingTraderSpawnDelay: number): void;
 getWanderingTraderSpawnDelay(): number;
 getClearWeatherTime(): number;
 getWanderingTraderId(): UUID;
 getWanderingTraderSpawnChance(): number;
 setClearWeatherTime(clearWeatherTime: number): void;
 setWanderingTraderSpawnChance(wanderingTraderSpawnChance: number): void;
 setWanderingTraderId(wanderingTraderId: UUID): void;
 populateCrashReport(reportSection: CrashReportSection,world: HeightLimitView): void;
 setRainTime(rainTime: number): void;
 setThundering(thundering: boolean): void;
 getRainTime(): number;
 setWorldBorder(worldBorder: WorldBorder_Properties): void;
 getThunderTime(): number;
 setThunderTime(thunderTime: number): void;
 getScheduledEvents(): Timer;
 getWorldBorder(): WorldBorder_Properties;
 getGameMode(): GameMode;
}

//net.minecraft.client.gui.tooltip.WidgetTooltipPositioner
class WidgetTooltipPositioner extends JObject, TooltipPositioner{
 getPosition(screenWidth: number,screenHeight: number,x: number,y: number,width: number,height: number): Vector2ic;
}
class Static_WidgetTooltipPositioner {
static getOffsetY(tooltipY: number,widgetY: number,widgetHeight: number): number;
static field_42159: number;
static field_42160: number;
static field_42157: number;
static field_42158: number;
}

//net.minecraft.client.realms.util.PeriodicRunnerFactory$PeriodicRunner
class PeriodicRunnerFactory_PeriodicRunner extends JObject{
 reset(): void;
}

//net.minecraft.client.render.entity.animation.SnifferAnimations
class SnifferAnimations extends JObject{
}
class Static_SnifferAnimations {
static BABY_GROWTH: Animation;
static SCENTING: Animation;
static SNIFFING: Animation;
static WALKING: Animation;
static SEARCHING: Animation;
static DIGGING: Animation;
static RISING: Animation;
static field_42872: Animation;
static FEELING_HAPPY: Animation;
}

//net.minecraft.util.InvalidHierarchicalFileException$File
class InvalidHierarchicalFileException_File extends JObject{
 getName(): string;
 toString(): string;
 joinKeys(): string;
}

//net.minecraft.world.gen.WorldPresets
class WorldPresets extends JObject{
}
class Static_WorldPresets {
static of(id: string): RegistryKey;
static bootstrap(presetRegisterable: Registerable): void;
static getWorldPreset(registry: Registry): Optional;
static createDemoOptions(dynamicRegistryManager: DynamicRegistryManager): DimensionOptionsRegistryHolder;
static getDefaultOverworldOptions(dynamicRegistryManager: DynamicRegistryManager): DimensionOptions;
static method_45547(overworld: DimensionOptions): Optional;
static DEFAULT: RegistryKey;
static FLAT: RegistryKey;
static LARGE_BIOMES: RegistryKey;
static AMPLIFIED: RegistryKey;
static SINGLE_BIOME_SURFACE: RegistryKey;
static DEBUG_ALL_BLOCK_STATES: RegistryKey;
}

//net.minecraft.nbt.NbtCompound$1


//net.minecraft.client.render.model.WeightedBakedModel$Builder
class WeightedBakedModel_Builder extends JObject{
 add(model: BakedModel,weight: number): WeightedBakedModel_Builder;
 build(): BakedModel;
}

//net.minecraft.nbt.NbtCompound$2


//net.minecraft.data.server.loottable.EntityLootTableGenerator
class EntityLootTableGenerator extends JObject, LootTableGenerator{
 accept(exporter: BiConsumer): void;
 generate(): void;
}
class Static_EntityLootTableGenerator {
static createForSheep(item: ItemConvertible): LootTable_Builder;
static shouldCheck(entityType: EntityType): boolean;
static method_46035(type: EntityType): Map;
static method_46032(set: Set,reference: RegistryEntry_Reference,biConsumer: BiConsumer,lootTableId: Identifier,lootTableBuilder: LootTable_Builder): void;
static NEEDS_ENTITY_ON_FIRE: EntityPredicate_Builder;
static ENTITY_TYPES_IN_MISC_GROUP_TO_CHECK: Set;
}

//net.minecraft.network.message.FilterMask
class FilterMask extends JObject{
 equals(o: Object): boolean;
 hashCode(): number;
 filter(raw: string): string;
 isPassThrough(): boolean;
 isFullyFiltered(): boolean;
 getFilteredText(message: string): Text;
 markFiltered(index: number): void;
}
class Static_FilterMask {
static readMask(buf: PacketByteBuf): FilterMask;
static writeMask(buf: PacketByteBuf,mask: FilterMask): void;
static CODEC: Codec;
static FULLY_FILTERED: FilterMask;
static PASS_THROUGH: FilterMask;
static FILTERED_STYLE: Style;
static PASS_THROUGH_CODEC: Codec;
static FULLY_FILTERED_CODEC: Codec;
static PARTIALLY_FILTERED_CODEC: Codec;
static FILTERED: char;
}

//net.minecraft.client.gui.navigation.GuiNavigation
interface GuiNavigation extends JObject{
 getDirection(): NavigationDirection;
}

//net.minecraft.unused.packageinfo.PackageInfo6372
interface PackageInfo6372 extends JObject{
}

//net.minecraft.loot.provider.score.FixedLootScoreProvider$Serializer
class FixedLootScoreProvider_Serializer extends JObject, JsonSerializer{
 fromJson(json: JsonObject,context: JsonDeserializationContext): Object;
 fromJson(jsonObject: JsonObject,jsonDeserializationContext: JsonDeserializationContext): FixedLootScoreProvider;
 toJson(jsonObject: JsonObject,fixedLootScoreProvider: FixedLootScoreProvider,jsonSerializationContext: JsonSerializationContext): void;
 toJson(json: JsonObject,object: Object,context: JsonSerializationContext): void;
}

//net.minecraft.resource.VanillaResourcePackProvider
class VanillaResourcePackProvider extends JObject, ResourcePackProvider{
 register(profileAdder: Consumer): void;
 getResourcePack(): DefaultResourcePack;
}
class Static_VanillaResourcePackProvider {
static getFileName(path: Path): string;
static method_45266(consumer: Consumer,fileName: string,packFactory: Function): void;
static LOGGER: Logger;
static VANILLA_KEY: string;
}

//net.minecraft.server.world.ChunkTaskPrioritySystem$UnblockingMessage
class ChunkTaskPrioritySystem_UnblockingMessage extends JObject{
}

//net.minecraft.util.profiler.Sampler$Builder
class Sampler_Builder extends JObject{
 build(): Sampler;
 startAction(action: Consumer): Sampler_Builder;
 deviationChecker(deviationChecker: Sampler_DeviationChecker): Sampler_Builder;
}
class Static_Sampler_Builder {
static method_34790(toDoubleFunction: ToDoubleFunction,object: Object): number;
}

//net.minecraft.loot.context.LootContextParameter
class LootContextParameter extends JObject{
 toString(): string;
 getId(): Identifier;
}

//net.minecraft.advancement.AdvancementRewards$Builder
class AdvancementRewards_Builder extends JObject{
 build(): AdvancementRewards;
 setExperience(experience: number): AdvancementRewards_Builder;
 addLoot(loot: Identifier): AdvancementRewards_Builder;
 setFunction(fun: Identifier): AdvancementRewards_Builder;
 addRecipe(recipe: Identifier): AdvancementRewards_Builder;
}
class Static_AdvancementRewards_Builder {
static function(fun: Identifier): AdvancementRewards_Builder;
static recipe(recipe: Identifier): AdvancementRewards_Builder;
static loot(loot: Identifier): AdvancementRewards_Builder;
static experience(experience: number): AdvancementRewards_Builder;
}

//net.minecraft.world.gen.CountConfig
class CountConfig extends JObject, FeatureConfig{
 getCount(): IntProvider;
}
class Static_CountConfig {
static CODEC: Codec;
}

//net.minecraft.registry.tag.TagManagerLoader
class TagManagerLoader extends JObject, ResourceReloader{
 reload(synchronizer: ResourceReloader_Synchronizer,manager: ResourceManager,prepareProfiler: Profiler,applyProfiler: Profiler,prepareExecutor: Executor,applyExecutor: Executor): CompletableFuture;
 getRegistryTags(): List;
}
class Static_TagManagerLoader {
static getPath(registry: RegistryKey): string;
static method_40097(registry: Registry,registryKey: RegistryKey,id: Identifier): Optional;
static method_33181(registryKey: RegistryKey,tagGroupLoader: TagGroupLoader,resourceManager: ResourceManager): TagManagerLoader_RegistryTags;
static method_33177(i: number): CompletableFuture[];
static DIRECTORIES: Map;
}

//net.minecraft.data.Main
class Main extends JObject{
}
class Static_Main {
static main(args: String[]): void;
static create(output: Path,inputs: Collection,includeClient: boolean,includeServer: boolean,includeDev: boolean,includeReports: boolean,validate: boolean,gameVersion: GameVersion,ignoreCache: boolean): DataGenerator;
static method_46598(collection: Collection,outputx: DataOutput): SnbtProvider;
static method_46840(biFunction: BiFunction,completableFuture: CompletableFuture,output: DataOutput): DataProvider;
static method_4967(input: string): Path;
static method_46599(completableFuture: CompletableFuture,tagProvider: TagProvider,outputx: DataOutput): VanillaItemTagProvider;
static toFactory(baseFactory: BiFunction,registryLookupFuture: CompletableFuture): DataProvider_Factory;
static method_46595(collection: Collection,outputx: DataOutput): NbtProvider;
static method_46597(outputx: DataOutput): MetadataProvider;
}

//net.minecraft.text.Decoration$Parameter$Selector
interface Decoration_Parameter_Selector extends JObject{
 select(content: Text,params: MessageType_Parameters): Text;
}

//net.minecraft.client.render.model.json.ModelOverride$Deserializer
class ModelOverride_Deserializer extends JObject, JsonDeserializer{
 deserialize(jsonElement: JsonElement,type: Type,jsonDeserializationContext: JsonDeserializationContext): ModelOverride;
 deserialize(functionJson: JsonElement,unused: Type,context: JsonDeserializationContext): Object;
}
class Static_ModelOverride_Deserializer {
static method_33691(entry: Map_Entry): ModelOverride_Condition;
}

//net.minecraft.nbt.NbtLong$Cache
class NbtLong_Cache extends JObject{
}
class Static_NbtLong_Cache {
static MAX: number;
static MIN: number;
static VALUES: NbtLong[];
}

//net.minecraft.data.client.MultipartBlockStateSupplier$Multipart
class MultipartBlockStateSupplier_Multipart extends JObject, Supplier{
 get(): JsonElement;
 get(): Object;
 validate(stateManager: StateManager): void;
 extraToJson(json: JsonObject): void;
}

//net.minecraft.advancement.AdvancementPositioner
class AdvancementPositioner extends JObject{
}
class Static_AdvancementPositioner {
static arrangeForTree(root: Advancement): void;
}

//net.minecraft.structure.StructureGeneratorFactory
interface StructureGeneratorFactory extends JObject{
 createGenerator(context: StructureGeneratorFactory_Context): Optional;
}
class Static_StructureGeneratorFactory {
static simple(predicate: Predicate,generator: StructurePiecesGenerator): StructureGeneratorFactory;
static method_39845(predicate: Predicate,optional: Optional,context: StructureGeneratorFactory_Context): Optional;
static checkForBiomeOnTop(heightmapType: Heightmap_Type): Predicate;
static method_39844(type: Heightmap_Type,context: StructureGeneratorFactory_Context): boolean;
}

//net.minecraft.unused.packageinfo.PackageInfo6389
interface PackageInfo6389 extends JObject{
}

//net.minecraft.client.gui.navigation.NavigationAxis$1


//net.minecraft.client.particle.WhiteAshParticle$Factory
class WhiteAshParticle_Factory extends JObject, ParticleFactory{
 createParticle(defaultParticleType: DefaultParticleType,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
 createParticle(particleEffect: ParticleEffect,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
}

//net.minecraft.world.gen.placementmodifier.PlacementModifierType
interface PlacementModifierType extends JObject{
 codec(): Codec;
}
class Static_PlacementModifierType {
static register(id: string,codec: Codec): PlacementModifierType;
static method_39654(codec: Codec): Codec;
static BLOCK_PREDICATE_FILTER: PlacementModifierType;
static RARITY_FILTER: PlacementModifierType;
static SURFACE_RELATIVE_THRESHOLD_FILTER: PlacementModifierType;
static SURFACE_WATER_DEPTH_FILTER: PlacementModifierType;
static BIOME: PlacementModifierType;
static COUNT: PlacementModifierType;
static NOISE_BASED_COUNT: PlacementModifierType;
static NOISE_THRESHOLD_COUNT: PlacementModifierType;
static COUNT_ON_EVERY_LAYER: PlacementModifierType;
static ENVIRONMENT_SCAN: PlacementModifierType;
static HEIGHTMAP: PlacementModifierType;
static HEIGHT_RANGE: PlacementModifierType;
static IN_SQUARE: PlacementModifierType;
static RANDOM_OFFSET: PlacementModifierType;
static CARVING_MASK: PlacementModifierType;
}

//net.minecraft.client.render.model.UnbakedModel
interface UnbakedModel extends JObject{
 setParents(modelLoader: Function): void;
 getModelDependencies(): Collection;
 bake(baker: Baker,textureGetter: Function,rotationContainer: ModelBakeSettings,modelId: Identifier): BakedModel;
}

//net.minecraft.world.border.WorldBorderListener$WorldBorderSyncer
class WorldBorderListener_WorldBorderSyncer extends JObject, WorldBorderListener{
 onInterpolateSize(border: WorldBorder,fromSize: number,toSize: number,time: long): void;
 onSizeChange(border: WorldBorder,size: number): void;
 onSafeZoneChanged(border: WorldBorder,safeZoneRadius: number): void;
 onCenterChanged(border: WorldBorder,centerX: number,centerZ: number): void;
 onDamagePerBlockChanged(border: WorldBorder,damagePerBlock: number): void;
 onWarningBlocksChanged(border: WorldBorder,warningBlockDistance: number): void;
 onWarningTimeChanged(border: WorldBorder,warningTime: number): void;
}

//net.minecraft.entity.SpawnRestriction
class SpawnRestriction extends JObject{
}
class Static_SpawnRestriction {
static getLocation(type: EntityType): SpawnRestriction_Location;
static register(type: EntityType,location: SpawnRestriction_Location,heightmapType: Heightmap_Type,predicate: SpawnRestriction_SpawnPredicate): void;
static canSpawn(type: EntityType,world: ServerWorldAccess,spawnReason: SpawnReason,pos: BlockPos,random: Random): boolean;
static getHeightmapType(type: EntityType): Heightmap_Type;
static RESTRICTIONS: Map;
}

//net.minecraft.entity.LargeEntitySpawnHelper$Requirements
interface LargeEntitySpawnHelper_Requirements extends JObject{
 canSpawnOn(world: ServerWorld,pos: BlockPos,state: BlockState,abovePos: BlockPos,aboveState: BlockState): boolean;
}
class Static_LargeEntitySpawnHelper_Requirements {
static method_44182(world: ServerWorld,pos: BlockPos,state: BlockState,abovePos: BlockPos,aboveState: BlockState): boolean;
static method_44183(world: ServerWorld,pos: BlockPos,state: BlockState,abovePos: BlockPos,aboveState: BlockState): boolean;
static IRON_GOLEM: LargeEntitySpawnHelper_Requirements;
static WARDEN: LargeEntitySpawnHelper_Requirements;
}

//net.minecraft.server.rcon.DataStreamHelper
class DataStreamHelper extends JObject{
 bytes(): byte[];
 write(values: byte[]): void;
 write(value: number): void;
 writeInt(value: number): void;
 reset(): void;
 writeBytes(value: string): void;
 writeFloat(value: number): void;
 writeShort(value: short): void;
}

//net.minecraft.world.tick.MultiTickScheduler
class MultiTickScheduler extends JObject, QueryableTickScheduler{
 isQueued(pos: BlockPos,type: Object): boolean;
 scheduleTick(orderedTick: OrderedTick): void;
 getTickCount(): number;
 isTicking(pos: BlockPos,type: Object): boolean;
}

//net.minecraft.client.render.entity.model.EntityModelLayer
class EntityModelLayer extends JObject{
 getName(): string;
 equals(o: Object): boolean;
 toString(): string;
 hashCode(): number;
 getId(): Identifier;
}

//net.minecraft.client.sound.SoundInstanceListener
interface SoundInstanceListener extends JObject{
 onSoundPlayed(sound: SoundInstance,soundSet: WeightedSoundSet): void;
}

//net.minecraft.stat.Stats
class Stats extends JObject{
}
class Static_Stats {
static register(id: string,formatter: StatFormatter): Identifier;
static registerType(id: string,registry: Registry): StatType;
static MINED: StatType;
static CRAFTED: StatType;
static USED: StatType;
static BROKEN: StatType;
static PICKED_UP: StatType;
static DROPPED: StatType;
static KILLED: StatType;
static KILLED_BY: StatType;
static CUSTOM: StatType;
static LEAVE_GAME: Identifier;
static PLAY_TIME: Identifier;
static TOTAL_WORLD_TIME: Identifier;
static TIME_SINCE_DEATH: Identifier;
static TIME_SINCE_REST: Identifier;
static SNEAK_TIME: Identifier;
static WALK_ONE_CM: Identifier;
static CROUCH_ONE_CM: Identifier;
static SPRINT_ONE_CM: Identifier;
static WALK_ON_WATER_ONE_CM: Identifier;
static FALL_ONE_CM: Identifier;
static CLIMB_ONE_CM: Identifier;
static FLY_ONE_CM: Identifier;
static WALK_UNDER_WATER_ONE_CM: Identifier;
static MINECART_ONE_CM: Identifier;
static BOAT_ONE_CM: Identifier;
static PIG_ONE_CM: Identifier;
static HORSE_ONE_CM: Identifier;
static AVIATE_ONE_CM: Identifier;
static SWIM_ONE_CM: Identifier;
static STRIDER_ONE_CM: Identifier;
static JUMP: Identifier;
static DROP: Identifier;
static DAMAGE_DEALT: Identifier;
static DAMAGE_DEALT_ABSORBED: Identifier;
static DAMAGE_DEALT_RESISTED: Identifier;
static DAMAGE_TAKEN: Identifier;
static DAMAGE_BLOCKED_BY_SHIELD: Identifier;
static DAMAGE_ABSORBED: Identifier;
static DAMAGE_RESISTED: Identifier;
static DEATHS: Identifier;
static MOB_KILLS: Identifier;
static ANIMALS_BRED: Identifier;
static PLAYER_KILLS: Identifier;
static FISH_CAUGHT: Identifier;
static TALKED_TO_VILLAGER: Identifier;
static TRADED_WITH_VILLAGER: Identifier;
static EAT_CAKE_SLICE: Identifier;
static FILL_CAULDRON: Identifier;
static USE_CAULDRON: Identifier;
static CLEAN_ARMOR: Identifier;
static CLEAN_BANNER: Identifier;
static CLEAN_SHULKER_BOX: Identifier;
static INTERACT_WITH_BREWINGSTAND: Identifier;
static INTERACT_WITH_BEACON: Identifier;
static INSPECT_DROPPER: Identifier;
static INSPECT_HOPPER: Identifier;
static INSPECT_DISPENSER: Identifier;
static PLAY_NOTEBLOCK: Identifier;
static TUNE_NOTEBLOCK: Identifier;
static POT_FLOWER: Identifier;
static TRIGGER_TRAPPED_CHEST: Identifier;
static OPEN_ENDERCHEST: Identifier;
static ENCHANT_ITEM: Identifier;
static PLAY_RECORD: Identifier;
static INTERACT_WITH_FURNACE: Identifier;
static INTERACT_WITH_CRAFTING_TABLE: Identifier;
static OPEN_CHEST: Identifier;
static SLEEP_IN_BED: Identifier;
static OPEN_SHULKER_BOX: Identifier;
static OPEN_BARREL: Identifier;
static INTERACT_WITH_BLAST_FURNACE: Identifier;
static INTERACT_WITH_SMOKER: Identifier;
static INTERACT_WITH_LECTERN: Identifier;
static INTERACT_WITH_CAMPFIRE: Identifier;
static INTERACT_WITH_CARTOGRAPHY_TABLE: Identifier;
static INTERACT_WITH_LOOM: Identifier;
static INTERACT_WITH_STONECUTTER: Identifier;
static BELL_RING: Identifier;
static RAID_TRIGGER: Identifier;
static RAID_WIN: Identifier;
static INTERACT_WITH_ANVIL: Identifier;
static INTERACT_WITH_GRINDSTONE: Identifier;
static TARGET_HIT: Identifier;
static INTERACT_WITH_SMITHING_TABLE: Identifier;
}

//net.minecraft.world.gen.surfacebuilder.SurfaceBuilder
class SurfaceBuilder extends JObject{
 buildSurface(noiseConfig: NoiseConfig,biomeAccess: BiomeAccess,biomeRegistry: Registry,useLegacyRandom: boolean,heightContext: HeightContext,chunk: Chunk,chunkNoiseSampler: ChunkNoiseSampler,materialRule: MaterialRules_MaterialRule): void;
 applyMaterialRule(rule: MaterialRules_MaterialRule,context: CarverContext,posToBiome: Function,chunk: Chunk,chunkNoiseSampler: ChunkNoiseSampler,pos: BlockPos,hasFluid: boolean): Optional;
}
class Static_SurfaceBuilder {
static createTerracottaBands(random: Random): BlockState[];
static addTerracottaBands(random: Random,terracottaBands: BlockState[],minBandSize: number,state: BlockState): void;
static WHITE_TERRACOTTA: BlockState;
static ORANGE_TERRACOTTA: BlockState;
static TERRACOTTA: BlockState;
static YELLOW_TERRACOTTA: BlockState;
static BROWN_TERRACOTTA: BlockState;
static RED_TERRACOTTA: BlockState;
static LIGHT_GRAY_TERRACOTTA: BlockState;
static PACKED_ICE: BlockState;
static SNOW_BLOCK: BlockState;
}

//net.minecraft.unused.packageinfo.PackageInfo7694
interface PackageInfo7694 extends JObject{
}

//net.minecraft.entity.ai.brain.MemoryQuery
interface MemoryQuery extends JObject{
 getState(): MemoryModuleState;
 toQueryResult(brain: Brain,value: Optional): MemoryQueryResult;
 memory(): MemoryModuleType;
}

//net.minecraft.client.realms.util.RealmsPersistence$RealmsPersistenceData
class RealmsPersistence_RealmsPersistenceData extends JObject, RealmsSerializable{
 newsLink: string;
 hasUnreadNews: boolean;
}

//net.minecraft.client.render.model.json.ModelOverride
class ModelOverride extends JObject{
 getModelId(): Identifier;
 streamConditions(): Stream;
}

//net.minecraft.client.render.block.entity.CampfireBlockEntityRenderer
class CampfireBlockEntityRenderer extends JObject, BlockEntityRenderer{
 render(campfireBlockEntity: CampfireBlockEntity,f: number,matrixStack: MatrixStack,vertexConsumerProvider: VertexConsumerProvider,i: number,j: number): void;
 render(entity: BlockEntity,tickDelta: number,matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,light: number,overlay: number): void;
}
class Static_CampfireBlockEntityRenderer {
static SCALE: number;
}

//net.minecraft.village.VillagerGossips$Reputation
class VillagerGossips_Reputation extends JObject{
 remove(gossipType: VillageGossipType): void;
 isObsolete(): boolean;
 decay(): void;
 getValueFor(gossipTypeFilter: Predicate): number;
 entriesFor(target: UUID): Stream;
 clamp(gossipType: VillageGossipType): void;
}
class Static_VillagerGossips_Reputation {
static method_19082(predicate: Predicate,entry: Object2IntMap_Entry): boolean;
static method_19078(entry: Object2IntMap_Entry): number;
static method_19080(uUID: UUID,entry: Object2IntMap_Entry): VillagerGossips_GossipEntry;
}

//net.minecraft.command.argument.ItemStackArgument
class ItemStackArgument extends JObject, Predicate{
 test(stack: Object): boolean;
 test(itemStack: ItemStack): boolean;
 getItem(): Item;
 asString(): string;
 createStack(amount: number,checkOverstack: boolean): ItemStack;
}
class Static_ItemStackArgument {
static method_9784(item: Object,maxCount: Object): Message;
static OVERSTACKED_EXCEPTION: Dynamic2CommandExceptionType;
}

//net.minecraft.world.gen.feature.VegetationPlacedFeatures
class VegetationPlacedFeatures extends JObject{
}
class Static_VegetationPlacedFeatures {
static modifiers(count: number): List;
static bootstrap(featureRegisterable: Registerable): void;
static treeModifiersBuilder(countModifier: PlacementModifier): ImmutableList_Builder;
static treeModifiersWithWouldSurvive(modifier: PlacementModifier,block: Block): List;
static mushroomModifiers(chance: number,modifier: PlacementModifier): List;
static treeModifiers(modifier: PlacementModifier): List;
static BAMBOO_LIGHT: RegistryKey;
static BAMBOO: RegistryKey;
static VINES: RegistryKey;
static PATCH_SUNFLOWER: RegistryKey;
static PATCH_PUMPKIN: RegistryKey;
static PATCH_GRASS_PLAIN: RegistryKey;
static PATCH_GRASS_FOREST: RegistryKey;
static PATCH_GRASS_BADLANDS: RegistryKey;
static PATCH_GRASS_SAVANNA: RegistryKey;
static PATCH_GRASS_NORMAL: RegistryKey;
static PATCH_GRASS_TAIGA_2: RegistryKey;
static PATCH_GRASS_TAIGA: RegistryKey;
static PATCH_GRASS_JUNGLE: RegistryKey;
static GRASS_BONEMEAL: RegistryKey;
static PATCH_DEAD_BUSH_2: RegistryKey;
static PATCH_DEAD_BUSH: RegistryKey;
static PATCH_DEAD_BUSH_BADLANDS: RegistryKey;
static PATCH_MELON: RegistryKey;
static PATCH_MELON_SPARSE: RegistryKey;
static PATCH_BERRY_COMMON: RegistryKey;
static PATCH_BERRY_RARE: RegistryKey;
static PATCH_WATERLILY: RegistryKey;
static PATCH_TALL_GRASS_2: RegistryKey;
static PATCH_TALL_GRASS: RegistryKey;
static PATCH_LARGE_FERN: RegistryKey;
static PATCH_CACTUS_DESERT: RegistryKey;
static PATCH_CACTUS_DECORATED: RegistryKey;
static PATCH_SUGAR_CANE_SWAMP: RegistryKey;
static PATCH_SUGAR_CANE_DESERT: RegistryKey;
static PATCH_SUGAR_CANE_BADLANDS: RegistryKey;
static PATCH_SUGAR_CANE: RegistryKey;
static BROWN_MUSHROOM_NETHER: RegistryKey;
static RED_MUSHROOM_NETHER: RegistryKey;
static BROWN_MUSHROOM_NORMAL: RegistryKey;
static RED_MUSHROOM_NORMAL: RegistryKey;
static BROWN_MUSHROOM_TAIGA: RegistryKey;
static RED_MUSHROOM_TAIGA: RegistryKey;
static BROWN_MUSHROOM_OLD_GROWTH: RegistryKey;
static RED_MUSHROOM_OLD_GROWTH: RegistryKey;
static BROWN_MUSHROOM_SWAMP: RegistryKey;
static RED_MUSHROOM_SWAMP: RegistryKey;
static FLOWER_WARM: RegistryKey;
static FLOWER_DEFAULT: RegistryKey;
static FLOWER_FLOWER_FOREST: RegistryKey;
static FLOWER_SWAMP: RegistryKey;
static FLOWER_PLAIN: RegistryKey;
static FLOWER_MEADOW: RegistryKey;
static FLOWER_CHERRY: RegistryKey;
static TREES_PLAINS: RegistryKey;
static DARK_FOREST_VEGETATION: RegistryKey;
static FLOWER_FOREST_FLOWERS: RegistryKey;
static FOREST_FLOWERS: RegistryKey;
static TREES_FLOWER_FOREST: RegistryKey;
static TREES_MEADOW: RegistryKey;
static TREES_CHERRY: RegistryKey;
static TREES_TAIGA: RegistryKey;
static TREES_GROVE: RegistryKey;
static TREES_BADLANDS: RegistryKey;
static TREES_SNOWY: RegistryKey;
static TREES_SWAMP: RegistryKey;
static TREES_WINDSWEPT_SAVANNA: RegistryKey;
static TREES_SAVANNA: RegistryKey;
static BIRCH_TALL: RegistryKey;
static TREES_BIRCH: RegistryKey;
static TREES_WINDSWEPT_FOREST: RegistryKey;
static TREES_WINDSWEPT_HILLS: RegistryKey;
static TREES_WATER: RegistryKey;
static TREES_BIRCH_AND_OAK: RegistryKey;
static TREES_SPARSE_JUNGLE: RegistryKey;
static TREES_OLD_GROWTH_SPRUCE_TAIGA: RegistryKey;
static TREES_OLD_GROWTH_PINE_TAIGA: RegistryKey;
static TREES_JUNGLE: RegistryKey;
static BAMBOO_VEGETATION: RegistryKey;
static MUSHROOM_ISLAND_VEGETATION: RegistryKey;
static TREES_MANGROVE: RegistryKey;
static NOT_IN_SURFACE_WATER_MODIFIER: PlacementModifier;
}

//net.minecraft.server.MinecraftServer$1


//net.minecraft.registry.tag.PointOfInterestTypeTags
class PointOfInterestTypeTags extends JObject{
}
class Static_PointOfInterestTypeTags {
static of(id: string): TagKey;
static ACQUIRABLE_JOB_SITE: TagKey;
static VILLAGE: TagKey;
static BEE_HOME: TagKey;
}

//net.minecraft.server.command.LootCommand$SourceConstructor
interface LootCommand_SourceConstructor extends JObject{
 construct(builder: ArgumentBuilder,target: LootCommand_Target): ArgumentBuilder;
}

//net.minecraft.client.render.block.BlockModelRenderer$AmbientOcclusionCalculator
class BlockModelRenderer_AmbientOcclusionCalculator extends JObject{
 apply(world: BlockRenderView,state: BlockState,pos: BlockPos,direction: Direction,box: number[],flags: BitSet,shaded: boolean): void;
}

//net.minecraft.network.packet.s2c.play.WorldBorderCenterChangedS2CPacket
class WorldBorderCenterChangedS2CPacket extends JObject, Packet{
 apply(clientPlayPacketListener: ClientPlayPacketListener): void;
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
 getCenterX(): number;
 getCenterZ(): number;
}

//net.minecraft.loot.condition.DamageSourcePropertiesLootCondition
class DamageSourcePropertiesLootCondition extends JObject, LootCondition{
 test(context: Object): boolean;
 test(lootContext: LootContext): boolean;
 getType(): LootConditionType;
 getRequiredParameters(): Set;
}
class Static_DamageSourcePropertiesLootCondition {
static builder(builder: DamageSourcePredicate_Builder): LootCondition_Builder;
static method_836(builder: DamageSourcePredicate_Builder): LootCondition;
}

//net.minecraft.predicate.entity.AdvancementEntityPredicateDeserializer
class AdvancementEntityPredicateDeserializer extends JObject{
 loadConditions(array: JsonArray,key: string,contextType: LootContextType): LootCondition[];
 getAdvancementId(): Identifier;
}
class Static_AdvancementEntityPredicateDeserializer {
static method_27797(string: string,name: string,message: string): void;
static LOGGER: Logger;
}

//net.minecraft.client.gui.screen.narration.NarrationMessageBuilder
interface NarrationMessageBuilder extends JObject{
 put(part: NarrationPart,narration: Narration): void;
 put(part: NarrationPart,texts: Text[]): void;
 put(part: NarrationPart,string: string): void;
 put(part: NarrationPart,text: Text): void;
 nextMessage(): NarrationMessageBuilder;
}

//net.minecraft.world.gen.surfacebuilder.MaterialRules$MaterialRuleContext
class MaterialRules_MaterialRuleContext extends JObject{
}
class Static_MaterialRules_MaterialRuleContext {
static blockToChunkCoord(blockCoord: number): number;
static chunkToBlockCoord(chunkCoord: number): number;
static field_36274: number;
static field_36275: number;
static field_36276: number;
static field_36277: number;
}

//net.minecraft.screen.SimpleNamedScreenHandlerFactory
class SimpleNamedScreenHandlerFactory extends JObject, NamedScreenHandlerFactory{
 getDisplayName(): Text;
 createMenu(i: number,playerInventory: PlayerInventory,playerEntity: PlayerEntity): ScreenHandler;
}

//net.minecraft.registry.tag.BlockTags
class BlockTags extends JObject{
}
class Static_BlockTags {
static of(id: string): TagKey;
static WOOL: TagKey;
static PLANKS: TagKey;
static STONE_BRICKS: TagKey;
static WOODEN_BUTTONS: TagKey;
static STONE_BUTTONS: TagKey;
static BUTTONS: TagKey;
static WOOL_CARPETS: TagKey;
static WOODEN_DOORS: TagKey;
static WOODEN_STAIRS: TagKey;
static WOODEN_SLABS: TagKey;
static WOODEN_FENCES: TagKey;
static PRESSURE_PLATES: TagKey;
static WOODEN_PRESSURE_PLATES: TagKey;
static STONE_PRESSURE_PLATES: TagKey;
static WOODEN_TRAPDOORS: TagKey;
static DOORS: TagKey;
static SAPLINGS: TagKey;
static LOGS_THAT_BURN: TagKey;
static OVERWORLD_NATURAL_LOGS: TagKey;
static LOGS: TagKey;
static DARK_OAK_LOGS: TagKey;
static OAK_LOGS: TagKey;
static BIRCH_LOGS: TagKey;
static ACACIA_LOGS: TagKey;
static CHERRY_LOGS: TagKey;
static JUNGLE_LOGS: TagKey;
static SPRUCE_LOGS: TagKey;
static MANGROVE_LOGS: TagKey;
static CRIMSON_STEMS: TagKey;
static WARPED_STEMS: TagKey;
static BAMBOO_BLOCKS: TagKey;
static WART_BLOCKS: TagKey;
static BANNERS: TagKey;
static SAND: TagKey;
static SMELTS_TO_GLASS: TagKey;
static STAIRS: TagKey;
static SLABS: TagKey;
static WALLS: TagKey;
static ANVIL: TagKey;
static RAILS: TagKey;
static LEAVES: TagKey;
static TRAPDOORS: TagKey;
static SMALL_FLOWERS: TagKey;
static BEDS: TagKey;
static FENCES: TagKey;
static TALL_FLOWERS: TagKey;
static FLOWERS: TagKey;
static PIGLIN_REPELLENTS: TagKey;
static GOLD_ORES: TagKey;
static IRON_ORES: TagKey;
static DIAMOND_ORES: TagKey;
static REDSTONE_ORES: TagKey;
static LAPIS_ORES: TagKey;
static COAL_ORES: TagKey;
static EMERALD_ORES: TagKey;
static COPPER_ORES: TagKey;
static CANDLES: TagKey;
static DIRT: TagKey;
static TERRACOTTA: TagKey;
static COMPLETES_FIND_TREE_TUTORIAL: TagKey;
static FLOWER_POTS: TagKey;
static ENDERMAN_HOLDABLE: TagKey;
static ICE: TagKey;
static VALID_SPAWN: TagKey;
static IMPERMEABLE: TagKey;
static UNDERWATER_BONEMEALS: TagKey;
static CORAL_BLOCKS: TagKey;
static WALL_CORALS: TagKey;
static CORAL_PLANTS: TagKey;
static CORALS: TagKey;
static BAMBOO_PLANTABLE_ON: TagKey;
static STANDING_SIGNS: TagKey;
static WALL_SIGNS: TagKey;
static SIGNS: TagKey;
static CEILING_HANGING_SIGNS: TagKey;
static WALL_HANGING_SIGNS: TagKey;
static ALL_HANGING_SIGNS: TagKey;
static ALL_SIGNS: TagKey;
static DRAGON_IMMUNE: TagKey;
static DRAGON_TRANSPARENT: TagKey;
static WITHER_IMMUNE: TagKey;
static WITHER_SUMMON_BASE_BLOCKS: TagKey;
static BEEHIVES: TagKey;
static CROPS: TagKey;
static BEE_GROWABLES: TagKey;
static PORTALS: TagKey;
static FIRE: TagKey;
static NYLIUM: TagKey;
static BEACON_BASE_BLOCKS: TagKey;
static SOUL_SPEED_BLOCKS: TagKey;
static WALL_POST_OVERRIDE: TagKey;
static CLIMBABLE: TagKey;
static FALL_DAMAGE_RESETTING: TagKey;
static SHULKER_BOXES: TagKey;
static HOGLIN_REPELLENTS: TagKey;
static SOUL_FIRE_BASE_BLOCKS: TagKey;
static STRIDER_WARM_BLOCKS: TagKey;
static CAMPFIRES: TagKey;
static GUARDED_BY_PIGLINS: TagKey;
static PREVENT_MOB_SPAWNING_INSIDE: TagKey;
static FENCE_GATES: TagKey;
static UNSTABLE_BOTTOM_CENTER: TagKey;
static MUSHROOM_GROW_BLOCK: TagKey;
static INFINIBURN_OVERWORLD: TagKey;
static INFINIBURN_NETHER: TagKey;
static INFINIBURN_END: TagKey;
static BASE_STONE_OVERWORLD: TagKey;
static STONE_ORE_REPLACEABLES: TagKey;
static DEEPSLATE_ORE_REPLACEABLES: TagKey;
static BASE_STONE_NETHER: TagKey;
static OVERWORLD_CARVER_REPLACEABLES: TagKey;
static NETHER_CARVER_REPLACEABLES: TagKey;
static CANDLE_CAKES: TagKey;
static CAULDRONS: TagKey;
static CRYSTAL_SOUND_BLOCKS: TagKey;
static INSIDE_STEP_SOUND_BLOCKS: TagKey;
static COMBINATION_STEP_SOUND_BLOCKS: TagKey;
static OCCLUDES_VIBRATION_SIGNALS: TagKey;
static DAMPENS_VIBRATIONS: TagKey;
static DRIPSTONE_REPLACEABLE_BLOCKS: TagKey;
static CAVE_VINES: TagKey;
static MOSS_REPLACEABLE: TagKey;
static LUSH_GROUND_REPLACEABLE: TagKey;
static AZALEA_ROOT_REPLACEABLE: TagKey;
static SMALL_DRIPLEAF_PLACEABLE: TagKey;
static BIG_DRIPLEAF_PLACEABLE: TagKey;
static SNOW: TagKey;
static AXE_MINEABLE: TagKey;
static HOE_MINEABLE: TagKey;
static PICKAXE_MINEABLE: TagKey;
static SHOVEL_MINEABLE: TagKey;
static SWORD_EFFICIENT: TagKey;
static NEEDS_DIAMOND_TOOL: TagKey;
static NEEDS_IRON_TOOL: TagKey;
static NEEDS_STONE_TOOL: TagKey;
static FEATURES_CANNOT_REPLACE: TagKey;
static LAVA_POOL_STONE_CANNOT_REPLACE: TagKey;
static GEODE_INVALID_BLOCKS: TagKey;
static FROG_PREFER_JUMP_TO: TagKey;
static SCULK_REPLACEABLE: TagKey;
static SCULK_REPLACEABLE_WORLD_GEN: TagKey;
static ANCIENT_CITY_REPLACEABLE: TagKey;
static VIBRATION_RESONATORS: TagKey;
static ANIMALS_SPAWNABLE_ON: TagKey;
static AXOLOTLS_SPAWNABLE_ON: TagKey;
static GOATS_SPAWNABLE_ON: TagKey;
static MOOSHROOMS_SPAWNABLE_ON: TagKey;
static PARROTS_SPAWNABLE_ON: TagKey;
static POLAR_BEARS_SPAWNABLE_ON_ALTERNATE: TagKey;
static RABBITS_SPAWNABLE_ON: TagKey;
static FOXES_SPAWNABLE_ON: TagKey;
static WOLVES_SPAWNABLE_ON: TagKey;
static FROGS_SPAWNABLE_ON: TagKey;
static AZALEA_GROWS_ON: TagKey;
static CONVERTABLE_TO_MUD: TagKey;
static MANGROVE_LOGS_CAN_GROW_THROUGH: TagKey;
static MANGROVE_ROOTS_CAN_GROW_THROUGH: TagKey;
static DEAD_BUSH_MAY_PLACE_ON: TagKey;
static SNAPS_GOAT_HORN: TagKey;
static REPLACEABLE_BY_TREES: TagKey;
static SNOW_LAYER_CANNOT_SURVIVE_ON: TagKey;
static SNOW_LAYER_CAN_SURVIVE_ON: TagKey;
static INVALID_SPAWN_INSIDE: TagKey;
static SNIFFER_DIGGABLE_BLOCK: TagKey;
static SNIFFER_EGG_HATCH_BOOST: TagKey;
static TRAIL_RUINS_REPLACEABLE: TagKey;
static REPLACEABLE: TagKey;
static ENCHANTMENT_POWER_PROVIDER: TagKey;
static ENCHANTMENT_POWER_TRANSMITTER: TagKey;
static MAINTAINS_FARMLAND: TagKey;
}

//net.minecraft.client.gui.widget.LayoutWidget
interface LayoutWidget extends JObject, Widget{
 refreshPositions(): void;
 forEachChild(consumer: Consumer): void;
 forEachElement(consumer: Consumer): void;
}
class Static_LayoutWidget {
static method_49004(element: Widget): void;
static method_49005(consumer: Consumer,element: Widget): void;
}

//net.minecraft.server.ServerConfigEntry
class ServerConfigEntry extends JObject{
}

//net.minecraft.registry.RegistryEntryLookup$RegistryLookup
interface RegistryEntryLookup_RegistryLookup extends JObject{
 getOptional(registryRef: RegistryKey): Optional;
 getOrThrow(registryRef: RegistryKey): RegistryEntryLookup;
}
class Static_RegistryEntryLookup_RegistryLookup {
static method_46752(registryKey: RegistryKey): IllegalStateException;
}

//net.minecraft.block.entity.BlockEntityType$BlockEntityFactory
interface BlockEntityType_BlockEntityFactory extends JObject{
 create(pos: BlockPos,state: BlockState): BlockEntity;
}

//net.minecraft.client.search.SuffixArray
class SuffixArray extends JObject{
 add(object: Object,text: string): void;
 build(): void;
 findAll(text: string): List;
}
class Static_SuffixArray {
static method_4803(is: number[],js: number[],ks: number[],i: number,j: number): void;
static method_38937(is: number[],js: number[],a: number,b: number): number;
static PRINT_COMPARISONS: boolean;
static PRINT_ARRAY: boolean;
static LOGGER: Logger;
static field_33013: number;
static field_33014: number;
}

//net.minecraft.client.model.TexturedModelData
class TexturedModelData extends JObject{
 createModel(): ModelPart;
}
class Static_TexturedModelData {
static of(partData: ModelData,textureWidth: number,textureHeight: number): TexturedModelData;
}

//net.minecraft.network.PacketBundleHandler$1


//net.minecraft.network.PacketBundleHandler$2


//net.minecraft.server.dedicated.EulaReader
class EulaReader extends JObject{
 isEulaAgreedTo(): boolean;
}
class Static_EulaReader {
static LOGGER: Logger;
}

//net.minecraft.entity.ai.brain.Schedule
class Schedule extends JObject{
 getActivityForTime(time: number): Activity;
}
class Static_Schedule {
static register(id: string): ScheduleBuilder;
static method_19214(i: number,rule: Map_Entry): number;
static method_19216(activity: Activity,rule: Map_Entry): boolean;
static WORK_TIME: number;
static field_30693: number;
static EMPTY: Schedule;
static SIMPLE: Schedule;
static VILLAGER_BABY: Schedule;
static VILLAGER_DEFAULT: Schedule;
}

//net.minecraft.recipe.SmithingTrimRecipe
class SmithingTrimRecipe extends JObject, SmithingRecipe{
 isEmpty(): boolean;
 matches(inventory: Inventory,world: World): boolean;
 getId(): Identifier;
 getOutput(registryManager: DynamicRegistryManager): ItemStack;
 craft(inventory: Inventory,registryManager: DynamicRegistryManager): ItemStack;
 getSerializer(): RecipeSerializer;
 testAddition(stack: ItemStack): boolean;
 testTemplate(stack: ItemStack): boolean;
 testBase(stack: ItemStack): boolean;
}

//net.minecraft.client.util.Backoff$1


//net.minecraft.data.client.BlockStateVariant
class BlockStateVariant extends JObject, Supplier{
 get(): Object;
 get(): JsonElement;
 put(key: VariantSetting,value: Object): BlockStateVariant;
}
class Static_BlockStateVariant {
static create(): BlockStateVariant;
static union(first: BlockStateVariant,second: BlockStateVariant): BlockStateVariant;
static toJson(variants: List): JsonElement;
static method_25826(jsonObject: JsonObject,value: VariantSetting_Value): void;
static method_25825(jsonArray: JsonArray,variant: BlockStateVariant): void;
}

//net.minecraft.client.util.Backoff$2


//net.minecraft.network.listener.ServerPacketListener
interface ServerPacketListener extends JObject, PacketListener{
 shouldCrashOnException(): boolean;
}

//net.minecraft.server.function.CommandFunction
class CommandFunction extends JObject{
 getId(): Identifier;
 getElements(): CommandFunction_Element;
}
class Static_CommandFunction {
static create(id: Identifier,dispatcher: CommandDispatcher,source: ServerCommandSource,lines: List): CommandFunction;
}

//net.minecraft.unused.packageinfo.PackageInfo7676
interface PackageInfo7676 extends JObject{
}

//net.minecraft.world.gen.feature.DefaultFeatureConfig
class DefaultFeatureConfig extends JObject, FeatureConfig{
}
class Static_DefaultFeatureConfig {
static method_28737(): DefaultFeatureConfig;
static CODEC: Codec;
static INSTANCE: DefaultFeatureConfig;
}

//net.minecraft.predicate.entity.EntityEffectPredicate$EffectData
class EntityEffectPredicate_EffectData extends JObject{
 test(statusEffectInstance: StatusEffectInstance): boolean;
 toJson(): JsonElement;
}
class Static_EntityEffectPredicate_EffectData {
static fromJson(json: JsonObject): EntityEffectPredicate_EffectData;
}

//net.minecraft.network.packet.s2c.play.RemoveEntityStatusEffectS2CPacket
class RemoveEntityStatusEffectS2CPacket extends JObject, Packet{
 apply(clientPlayPacketListener: ClientPlayPacketListener): void;
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
 getEntity(world: World): Entity;
 getEffectType(): StatusEffect;
}

//net.minecraft.client.gui.screen.ingame.CreativeInventoryListener
class CreativeInventoryListener extends JObject, ScreenHandlerListener{
 onSlotUpdate(handler: ScreenHandler,slotId: number,stack: ItemStack): void;
 onPropertyUpdate(handler: ScreenHandler,property: number,value: number): void;
}

//net.minecraft.item.map.MapBannerMarker$1


//net.minecraft.unused.packageinfo.PackageInfo6318
interface PackageInfo6318 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6313
interface PackageInfo6313 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6312
interface PackageInfo6312 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6311
interface PackageInfo6311 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6310
interface PackageInfo6310 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6317
interface PackageInfo6317 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6316
interface PackageInfo6316 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6315
interface PackageInfo6315 extends JObject{
}

//net.minecraft.client.realms.util.Realms32BitWarningChecker
class Realms32BitWarningChecker extends JObject{
 showWarningIfNeeded(parent: Screen): void;
}
class Static_Realms32BitWarningChecker {
static LOGGER: Logger;
}

//net.minecraft.loot.context.LootContextParameterSet
class LootContextParameterSet extends JObject{
 get(parameter: LootContextParameter): Object;
 contains(parameter: LootContextParameter): boolean;
 getWorld(): ServerWorld;
 getOptional(parameter: LootContextParameter): Object;
 getLuck(): number;
 method_51868(parameter: LootContextParameter): Object;
 addDynamicDrops(id: Identifier,lootConsumer: Consumer): void;
}

//net.minecraft.unused.packageinfo.PackageInfo6314
interface PackageInfo6314 extends JObject{
}

//net.minecraft.particle.BlockStateParticleEffect$1


//net.minecraft.command.argument.TextArgumentType
class TextArgumentType extends JObject, ArgumentType{
 parse(reader: StringReader): Object;
 parse(stringReader: StringReader): Text;
 getExamples(): Collection;
}
class Static_TextArgumentType {
static text(): TextArgumentType;
static getTextArgument(context: CommandContext,name: string): Text;
static method_9282(text: Object): Message;
static EXAMPLES: Collection;
static INVALID_COMPONENT_EXCEPTION: DynamicCommandExceptionType;
}

//net.minecraft.unused.packageinfo.PackageInfo6320
interface PackageInfo6320 extends JObject{
}

//net.minecraft.text.CharacterVisitor
interface CharacterVisitor extends JObject{
 accept(index: number,style: Style,codePoint: number): boolean;
}

//net.minecraft.client.search.SearchProvider
interface SearchProvider extends JObject{
 findAll(text: string): List;
}

//net.minecraft.util.JsonSerializing$SerializerBuilder
class JsonSerializing_SerializerBuilder extends JObject{
 build(): Object;
 defaultType(defaultType: JsonSerializableType): JsonSerializing_SerializerBuilder;
 elementSerializer(type: JsonSerializableType,serializer: JsonSerializing_ElementSerializer): JsonSerializing_SerializerBuilder;
}

//net.minecraft.server.command.SpawnArmorTrimsCommand
class SpawnArmorTrimsCommand extends JObject{
}
class Static_SpawnArmorTrimsCommand {
static register(dispatcher: CommandDispatcher): void;
static execute(source: ServerCommandSource,player: PlayerEntity): number;
static method_48335(source: ServerCommandSource): boolean;
static method_52081(): Text;
static method_48340(registry: Registry,defaultedList: DefaultedList,registry2: Registry,pattern: ArmorTrimPattern): void;
static method_48337(defaultedList: DefaultedList,registry: Registry,registry2: Registry,armorTrimPattern: ArmorTrimPattern,material: ArmorTrimMaterial): void;
static method_48334(context: CommandContext): number;
static method_48339(registry: Registry,pattern: ArmorTrimPattern): Integer;
static method_48338(registry: Registry,material: ArmorTrimMaterial): Integer;
static method_48341(map: HashMap): void;
static ARMOR_PIECES: Map;
static PATTERNS: List;
static MATERIALS: List;
static PATTERN_INDEX_GETTER: ToIntFunction;
static MATERIAL_INDEX_GETTER: ToIntFunction;
}

//net.minecraft.data.server.loottable.LootTableGenerator
interface LootTableGenerator extends JObject{
 accept(exporter: BiConsumer): void;
}

//net.minecraft.command.argument.ScoreHolderArgumentType
class ScoreHolderArgumentType extends JObject, ArgumentType{
 parse(stringReader: StringReader): ScoreHolderArgumentType_ScoreHolder;
 parse(reader: StringReader): Object;
 getExamples(): Collection;
}
class Static_ScoreHolderArgumentType {
static getScoreboardScoreHolders(context: CommandContext,name: string): Collection;
static scoreHolders(): ScoreHolderArgumentType;
static scoreHolder(): ScoreHolderArgumentType;
static getScoreHolder(context: CommandContext,name: string): string;
static method_9455(context: CommandContext,builder: SuggestionsBuilder): CompletableFuture;
static method_9448(commandContext: CommandContext,builderx: SuggestionsBuilder): void;
static method_9457(source: ServerCommandSource,players: Supplier): Collection;
static getScoreHolders(context: CommandContext,name: string): Collection;
static getScoreHolders(context: CommandContext,name: string,players: Supplier): Collection;
static method_9456(collection: Collection,source: ServerCommandSource,players: Supplier): Collection;
static SUGGESTION_PROVIDER: SuggestionProvider;
static EXAMPLES: Collection;
static EMPTY_SCORE_HOLDER_EXCEPTION: SimpleCommandExceptionType;
}

//net.minecraft.client.render.debug.GoalSelectorDebugRenderer$GoalSelector
class GoalSelectorDebugRenderer_GoalSelector extends JObject{
 pos: BlockPos;
 field_18783: number;
 name: string;
 field_18785: boolean;
}

//net.minecraft.network.packet.c2s.play.RecipeBookDataC2SPacket
class RecipeBookDataC2SPacket extends JObject, Packet{
 apply(serverPlayPacketListener: ServerPlayPacketListener): void;
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
 getRecipeId(): Identifier;
}

//net.minecraft.command.argument.RegistryPredicateArgumentType
class RegistryPredicateArgumentType extends JObject, ArgumentType{
 parse(reader: StringReader): Object;
 parse(stringReader: StringReader): RegistryPredicateArgumentType_RegistryPredicate;
 getExamples(): Collection;
 listSuggestions(context: CommandContext,builder: SuggestionsBuilder): CompletableFuture;
}
class Static_RegistryPredicateArgumentType {
static registryPredicate(registryRef: RegistryKey): RegistryPredicateArgumentType;
static getPredicate(context: CommandContext,name: string,registryRef: RegistryKey,invalidException: DynamicCommandExceptionType): RegistryPredicateArgumentType_RegistryPredicate;
static method_41167(dynamicCommandExceptionType: DynamicCommandExceptionType,registryPredicate: RegistryPredicateArgumentType_RegistryPredicate): CommandSyntaxException;
static EXAMPLES: Collection;
}

//net.minecraft.unused.packageinfo.PackageInfo6324
interface PackageInfo6324 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6323
interface PackageInfo6323 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6322
interface PackageInfo6322 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6321
interface PackageInfo6321 extends JObject{
}

//net.minecraft.unused.packageinfo.PackageInfo6325
interface PackageInfo6325 extends JObject{
}

//net.minecraft.world.GameRules
class GameRules extends JObject{
 get(key: GameRules_Key): GameRules_Rule;
 getBoolean(rule: GameRules_Key): boolean;
 getInt(rule: GameRules_Key): number;
 copy(): GameRules;
 toNbt(): NbtCompound;
 setAllValues(rules: GameRules,server: MinecraftServer): void;
}
class Static_GameRules {
static register(name: string,category: GameRules_Category,type: GameRules_Type): GameRules_Key;
static accept(consumer: GameRules_Visitor,key: GameRules_Key,type: GameRules_Type): void;
static accept(visitor: GameRules_Visitor): void;
static method_20748(e: Map_Entry): GameRules_Rule;
static method_27324(entry: Map_Entry): GameRules_Rule;
static method_20750(visitor: GameRules_Visitor,key: GameRules_Key,type: GameRules_Type): void;
static method_20751(nbtCompound: NbtCompound,key: GameRules_Key,rule: GameRules_Rule): void;
static method_20747(dynamicLike: DynamicLike,key: GameRules_Key,rule: GameRules_Rule): void;
static method_20752(key: GameRules_Key): string;
static method_8361(server: MinecraftServer,rule: GameRules_BooleanRule): void;
static method_22386(server: MinecraftServer,rule: GameRules_BooleanRule): void;
static DEFAULT_RANDOM_TICK_SPEED: number;
static LOGGER: Logger;
static RULE_TYPES: Map;
static DO_FIRE_TICK: GameRules_Key;
static DO_MOB_GRIEFING: GameRules_Key;
static KEEP_INVENTORY: GameRules_Key;
static DO_MOB_SPAWNING: GameRules_Key;
static DO_MOB_LOOT: GameRules_Key;
static DO_TILE_DROPS: GameRules_Key;
static DO_ENTITY_DROPS: GameRules_Key;
static COMMAND_BLOCK_OUTPUT: GameRules_Key;
static NATURAL_REGENERATION: GameRules_Key;
static DO_DAYLIGHT_CYCLE: GameRules_Key;
static LOG_ADMIN_COMMANDS: GameRules_Key;
static SHOW_DEATH_MESSAGES: GameRules_Key;
static RANDOM_TICK_SPEED: GameRules_Key;
static SEND_COMMAND_FEEDBACK: GameRules_Key;
static REDUCED_DEBUG_INFO: GameRules_Key;
static SPECTATORS_GENERATE_CHUNKS: GameRules_Key;
static SPAWN_RADIUS: GameRules_Key;
static DISABLE_ELYTRA_MOVEMENT_CHECK: GameRules_Key;
static MAX_ENTITY_CRAMMING: GameRules_Key;
static DO_WEATHER_CYCLE: GameRules_Key;
static DO_LIMITED_CRAFTING: GameRules_Key;
static MAX_COMMAND_CHAIN_LENGTH: GameRules_Key;
static COMMAND_MODIFICATION_BLOCK_LIMIT: GameRules_Key;
static ANNOUNCE_ADVANCEMENTS: GameRules_Key;
static DISABLE_RAIDS: GameRules_Key;
static DO_INSOMNIA: GameRules_Key;
static DO_IMMEDIATE_RESPAWN: GameRules_Key;
static DROWNING_DAMAGE: GameRules_Key;
static FALL_DAMAGE: GameRules_Key;
static FIRE_DAMAGE: GameRules_Key;
static FREEZE_DAMAGE: GameRules_Key;
static DO_PATROL_SPAWNING: GameRules_Key;
static DO_TRADER_SPAWNING: GameRules_Key;
static DO_WARDEN_SPAWNING: GameRules_Key;
static FORGIVE_DEAD_PLAYERS: GameRules_Key;
static UNIVERSAL_ANGER: GameRules_Key;
static PLAYERS_SLEEPING_PERCENTAGE: GameRules_Key;
static BLOCK_EXPLOSION_DROP_DECAY: GameRules_Key;
static MOB_EXPLOSION_DROP_DECAY: GameRules_Key;
static TNT_EXPLOSION_DROP_DECAY: GameRules_Key;
static SNOW_ACCUMULATION_HEIGHT: GameRules_Key;
static WATER_SOURCE_CONVERSION: GameRules_Key;
static LAVA_SOURCE_CONVERSION: GameRules_Key;
static GLOBAL_SOUND_EVENTS: GameRules_Key;
static DO_VINES_SPREAD: GameRules_Key;
}

//net.minecraft.data.server.tag.TagProvider
class TagProvider extends JObject, DataProvider{
 getName(): string;
 run(writer: DataWriter): CompletableFuture;
 getTagLookupFuture(): CompletableFuture;
}
class Static_TagProvider {
static method_49657(lookup: RegistryWrapper_WrapperLookup,parent: TagProvider_TagLookup): TagProvider_RegistryInfo;
static method_49658(predicate: Predicate,predicate2: Predicate,tagEntry: TagEntry): boolean;
static method_46590(i: number): CompletableFuture[];
static method_27170(id: Identifier): TagBuilder;
static LOGGER: Logger;
}

//net.minecraft.world.gen.chunk.BlendingData
class BlendingData extends JObject{
 getOldHeightLimit(): HeightLimitView;
}
class Static_BlendingData {
static validate(data: BlendingData): DataResult;
static getAboveCollidableBlockValue(chunk: Chunk,mutablePos: BlockPos_Mutable): number;
static getCollidableBlockDensityBelow(chunk: Chunk,mutablePos: BlockPos_Mutable): number;
static isCollidableAndNotTreeAt(chunk: Chunk,pos: BlockPos): boolean;
static getAdjacentChunksWithNoise(access: StructureWorldAccess,chunkX: number,chunkZ: number,oldNoise: boolean): Set;
static getX(index: number): number;
static getZ(index: number): number;
static getBlendingData(chunkRegion: ChunkRegion,chunkX: number,chunkZ: number): BlendingData;
static method_49533(): string;
static method_39574(heights2: number[]): void;
static getNorthWestIndex(chunkBiomeX: number,chunkBiomeZ: number): number;
static getSouthEastIndex(chunkBiomeX: number,chunkBiomeZ: number): number;
static method_39580(blendingData: BlendingData): Optional;
static method_41569(blendingData: BlendingData): Integer;
static method_39355(i: number): number;
static method_39571(instance: RecordCodecBuilder_Instance): App;
static method_41568(blendingData: BlendingData): Integer;
static method_39567(height: number): boolean;
static field_35514: number;
static field_36280: number;
static field_35511: number;
static field_36281: number;
static field_37704: number;
static field_37705: number;
static field_35516: number;
static BIOMES_PER_CHUNK: number;
static LAST_CHUNK_BIOME_INDEX: number;
static CHUNK_BIOME_END_INDEX: number;
static NORTH_WEST_END_INDEX: number;
static SOUTH_EAST_END_INDEX_PART: number;
static HORIZONTAL_BIOME_COUNT: number;
static SURFACE_BLOCKS: List;
static field_35513: number;
static DOUBLE_ARRAY_CODEC: Codec;
static CODEC: Codec;
}

//net.minecraft.block.entity.BeaconBlockEntity$1


//net.minecraft.client.sound.SoundSystem
class SoundSystem extends JObject{
 stop(sound: SoundInstance): void;
 stop(): void;
 tick(paused: boolean): void;
 registerListener(listener: SoundInstanceListener): void;
 getSoundDevices(): List;
 reloadSounds(): void;
 updateSoundVolume(category: SoundCategory,volume: number): void;
 playNextTick(sound: TickableSoundInstance): void;
 stopSounds(id: Identifier,category: SoundCategory): void;
 unregisterListener(listener: SoundInstanceListener): void;
 getDebugString(): string;
 play(sound: SoundInstance,delay: number): void;
 play(sound: SoundInstance): void;
 isPlaying(sound: SoundInstance): boolean;
 stopAll(): void;
 resumeAll(): void;
 pauseAll(): void;
 updateListenerPosition(camera: Camera): void;
 addPreloadedSound(sound: Sound): void;
}
class Static_SoundSystem {
static method_19756(source: Channel_SourceManager): void;
static method_19757(sourceManager: Channel_SourceManager,sound: StaticSound): void;
static method_19760(sources: Stream): void;
static method_19759(sources: Stream): void;
static canRepeatInstantly(sound: SoundInstance): boolean;
static method_19748(f: number,g: number,vec3d: Vec3d,source: Source): void;
static method_19749(f: number,g: number,attenuationType: SoundInstance_AttenuationType,h: number,bl: boolean,bl2: boolean,vec3d: Vec3d,bl3: boolean,source: Source): void;
static isRepeatDelayed(sound: SoundInstance): boolean;
static method_19758(sourceManager: Channel_SourceManager,stream: AudioStream): void;
static method_19752(staticSound: StaticSound,source: Source): void;
static method_19755(audioStream: AudioStream,source: Source): void;
static method_19750(f: number,source: Source): void;
static shouldRepeatInstantly(sound: SoundInstance): boolean;
static MARKER: Marker;
static LOGGER: Logger;
static MIN_PITCH: number;
static MAX_PITCH: number;
static MIN_VOLUME: number;
static MAX_VOLUME: number;
static field_33025: number;
static UNKNOWN_SOUNDS: Set;
static MIN_TIME_INTERVAL_TO_RELOAD_SOUNDS: long;
static FOR_THE_DEBUG: string;
static OPENAL_SOFT_ON: string;
static OPENAL_SOFT_ON_LENGTH: number;
}

//net.minecraft.loot.condition.EntityScoresLootCondition$Serializer
class EntityScoresLootCondition_Serializer extends JObject, JsonSerializer{
 fromJson(json: JsonObject,context: JsonDeserializationContext): Object;
 fromJson(jsonObject: JsonObject,jsonDeserializationContext: JsonDeserializationContext): EntityScoresLootCondition;
 toJson(jsonObject: JsonObject,entityScoresLootCondition: EntityScoresLootCondition,jsonSerializationContext: JsonSerializationContext): void;
 toJson(json: JsonObject,object: Object,context: JsonSerializationContext): void;
}

//net.minecraft.client.render.model.json.ItemModelGenerator
class ItemModelGenerator extends JObject{
 create(textureGetter: Function,blockModel: JsonUnbakedModel): JsonUnbakedModel;
}
class Static_ItemModelGenerator {
static LAYERS: List;
static field_32806: number;
static field_32807: number;
}

//net.minecraft.util.profiling.jfr.JfrProfileRecorder$1


//net.minecraft.world.gen.placementmodifier.PlacementModifier
class PlacementModifier extends JObject{
 getType(): PlacementModifierType;
 getPositions(context: FeaturePlacementContext,random: Random,pos: BlockPos): Stream;
}
class Static_PlacementModifier {
static CODEC: Codec;
}

//net.minecraft.loot.provider.number.LootNumberProviderTypes
class LootNumberProviderTypes extends JObject{
}
class Static_LootNumberProviderTypes {
static register(id: string,jsonSerializer: JsonSerializer): LootNumberProviderType;
static createGsonSerializer(): Object;
static CONSTANT: LootNumberProviderType;
static UNIFORM: LootNumberProviderType;
static BINOMIAL: LootNumberProviderType;
static SCORE: LootNumberProviderType;
}

//net.minecraft.block.FenceGateBlock$1


//net.minecraft.network.packet.c2s.play.HandSwingC2SPacket
class HandSwingC2SPacket extends JObject, Packet{
 apply(serverPlayPacketListener: ServerPlayPacketListener): void;
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
 getHand(): Hand;
}

//net.minecraft.client.util.Backoff
interface Backoff extends JObject{
 fail(): long;
 success(): long;
}
class Static_Backoff {
static exponential(maxSkippableCycles: number): Backoff;
static ONE_CYCLE: Backoff;
}

//net.minecraft.inventory.SidedInventory
interface SidedInventory extends JObject, Inventory{
 canInsert(slot: number,stack: ItemStack,dir: Direction): boolean;
 canExtract(slot: number,stack: ItemStack,dir: Direction): boolean;
 getAvailableSlots(side: Direction): number[];
}

//net.minecraft.world.Heightmap
class Heightmap extends JObject{
 get(x: number,z: number): number;
 asLongArray(): long[];
 setTo(chunk: Chunk,type: Heightmap_Type,values: long[]): void;
 method_35334(x: number,z: number): number;
 trackUpdate(x: number,y: number,z: number,state: BlockState): boolean;
}
class Static_Heightmap {
static toIndex(x: number,z: number): number;
static populateHeightmaps(chunk: Chunk,types: Set): void;
static method_16682(state: BlockState): boolean;
static LOGGER: Logger;
static NOT_AIR: Predicate;
static SUFFOCATES: Predicate;
}

//net.minecraft.client.sound.StaticSound
class StaticSound extends JObject{
 close(): void;
 takeStreamBufferPointer(): OptionalInt;
}

//net.minecraft.registry.tag.TagGroupLoader$1


//net.minecraft.client.render.debug.GameTestDebugRenderer$Marker
class GameTestDebugRenderer_Marker extends JObject{
 getBlue(): number;
 getGreen(): number;
 getRed(): number;
 getAlpha(): number;
 color: number;
 message: string;
 removalTime: long;
}

//net.minecraft.data.SnbtProvider
class SnbtProvider extends JObject, DataProvider{
 getName(): string;
 run(writer: DataWriter): CompletableFuture;
 addWriter(tweaker: SnbtProvider_Tweaker): SnbtProvider;
}
class Static_SnbtProvider {
static method_46589(future: CompletableFuture): CompletionStage;
static method_10499(path: Path): boolean;
static method_46585(i: number): CompletableFuture[];
static DEBUG_OUTPUT_DIRECTORY: Path;
static LOGGER: Logger;
}

//net.minecraft.client.font.UnihexFont$BitmapGlyph
interface UnihexFont_BitmapGlyph extends JObject{
 bitWidth(): number;
 getPixels(y: number): number;
 getNonemptyColumnBitmask(): number;
 getPackedDimensions(): number;
}

//net.minecraft.world.TeleportTarget
class TeleportTarget extends JObject{
 position: Vec3d;
 velocity: Vec3d;
 yaw: number;
 pitch: number;
}

//net.minecraft.resource.featuretoggle.FeatureFlag
class FeatureFlag extends JObject{
}

//net.minecraft.network.packet.s2c.login.LoginQueryRequestS2CPacket
class LoginQueryRequestS2CPacket extends JObject, Packet{
 apply(clientLoginPacketListener: ClientLoginPacketListener): void;
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
 getPayload(): PacketByteBuf;
 getChannel(): Identifier;
 getQueryId(): number;
}
class Static_LoginQueryRequestS2CPacket {
static MAX_PAYLOAD_SIZE: number;
}

//net.minecraft.client.sound.AlUtil
class AlUtil extends JObject{
}
class Static_AlUtil {
static getErrorMessage(errorCode: number): string;
static checkAlcErrors(deviceHandle: long,sectionName: string): boolean;
static checkErrors(sectionName: string): boolean;
static getFormatId(format: AudioFormat): number;
static getAlcErrorMessage(errorCode: number): string;
static LOGGER: Logger;
}

//net.minecraft.block.enums.ChestType$1


//net.minecraft.util.math.random.RandomSequence
class RandomSequence extends JObject{
 getSource(): Random;
}
class Static_RandomSequence {
static createSeed(id: Identifier): RandomSeed_XoroshiroSeed;
static createSource(seed: long,id: Identifier): Xoroshiro128PlusPlusRandom;
static method_51840(sequence: RandomSequence): Xoroshiro128PlusPlusRandom;
static method_51841(instance: RecordCodecBuilder_Instance): App;
static CODEC: Codec;
}

//net.minecraft.resource.ResourceReload
interface ResourceReload extends JObject{
 throwException(): void;
 whenComplete(): CompletableFuture;
 isComplete(): boolean;
 getProgress(): number;
}

//net.minecraft.client.gui.hud.spectator.SpectatorMenu$ChangePageSpectatorMenuCommand
class SpectatorMenu_ChangePageSpectatorMenuCommand extends JObject, SpectatorMenuCommand{
 getName(): Text;
 use(menu: SpectatorMenu): void;
 isEnabled(): boolean;
 renderIcon(context: DrawContext,brightness: number,alpha: number): void;
}

//net.minecraft.block.TrapdoorBlock$1


//net.minecraft.client.render.BackgroundRenderer$FogData
class BackgroundRenderer_FogData extends JObject{
 fogType: BackgroundRenderer_FogType;
 fogStart: number;
 fogEnd: number;
 fogShape: FogShape;
}

//net.minecraft.world.gen.feature.NetherConfiguredFeatures
class NetherConfiguredFeatures extends JObject{
}
class Static_NetherConfiguredFeatures {
static bootstrap(featureRegisterable: Registerable): void;
static DELTA: RegistryKey;
static SMALL_BASALT_COLUMNS: RegistryKey;
static SMALL_BASALT_COLUMNS_TEMP: RegistryKey;
static BASALT_BLOBS: RegistryKey;
static BLACKSTONE_BLOBS: RegistryKey;
static GLOWSTONE_EXTRA: RegistryKey;
static CRIMSON_FOREST_VEGETATION: RegistryKey;
static CRIMSON_FOREST_VEGETATION_BONEMEAL: RegistryKey;
static WARPED_FOREST_VEGETATION: RegistryKey;
static WARPED_FOREST_VEGETATION_BONEMEAL: RegistryKey;
static NETHER_SPROUTS: RegistryKey;
static NETHER_SPROUTS_BONEMEAL: RegistryKey;
static TWISTING_VINES: RegistryKey;
static TWISTING_VINES_BONEMEAL: RegistryKey;
static WEEPING_VINES: RegistryKey;
static PATCH_CRIMSON_ROOTS: RegistryKey;
static BASALT_PILLAR: RegistryKey;
static SPRING_LAVA_NETHER: RegistryKey;
static SPRING_NETHER_CLOSED: RegistryKey;
static SPRING_NETHER_OPEN: RegistryKey;
static PATCH_FIRE: RegistryKey;
static PATCH_SOUL_FIRE: RegistryKey;
}

//net.minecraft.village.TradeOffers$SellEnchantedToolFactory
class TradeOffers_SellEnchantedToolFactory extends JObject, TradeOffers_Factory{
 create(entity: Entity,random: Random): TradeOffer;
}

//net.minecraft.server.dedicated.command.StopCommand
class StopCommand extends JObject{
}
class Static_StopCommand {
static register(dispatcher: CommandDispatcher): void;
static method_13677(source: ServerCommandSource): boolean;
static method_52085(): Text;
static method_13676(context: CommandContext): number;
}

//net.minecraft.client.network.message.MessageTrustStatus$1


//net.minecraft.server.network.ServerPlayerInteractionManager
class ServerPlayerInteractionManager extends JObject{
 update(): void;
 setWorld(world: ServerWorld): void;
 processBlockBreakingAction(pos: BlockPos,action: PlayerActionC2SPacket_Action,direction: Direction,worldHeight: number,sequence: number): void;
 isCreative(): boolean;
 interactItem(player: ServerPlayerEntity,world: World,stack: ItemStack,hand: Hand): ActionResult;
 interactBlock(player: ServerPlayerEntity,world: World,stack: ItemStack,hand: Hand,hitResult: BlockHitResult): ActionResult;
 changeGameMode(gameMode: GameMode): boolean;
 getPreviousGameMode(): GameMode;
 isSurvivalLike(): boolean;
 getGameMode(): GameMode;
 tryBreakBlock(pos: BlockPos): boolean;
 finishMining(pos: BlockPos,sequence: number,reason: string): void;
}
class Static_ServerPlayerInteractionManager {
static LOGGER: Logger;
}

//net.minecraft.registry.tag.GameEventTags
class GameEventTags extends JObject{
}
class Static_GameEventTags {
static of(id: string): TagKey;
static VIBRATIONS: TagKey;
static WARDEN_CAN_LISTEN: TagKey;
static SHRIEKER_CAN_LISTEN: TagKey;
static IGNORE_VIBRATIONS_SNEAKING: TagKey;
static ALLAY_CAN_LISTEN: TagKey;
}

//net.minecraft.client.gui.widget.WrapperWidget$WrappedElement
class WrapperWidget_WrappedElement extends JObject{
 getWidth(): number;
 getHeight(): number;
 setX(left: number,right: number): void;
 setY(top: number,bottom: number): void;
 widget: Widget;
 positioner: Positioner_Impl;
}

//net.minecraft.server.ServerNetworkIo$DelayingChannelInboundHandler$Packet
class ServerNetworkIo_DelayingChannelInboundHandler_Packet extends JObject{
 context: ChannelHandlerContext;
 message: Object;
}

//net.minecraft.world.biome.BiomeParticleConfig
class BiomeParticleConfig extends JObject{
 getParticle(): ParticleEffect;
 shouldAddParticle(random: Random): boolean;
}
class Static_BiomeParticleConfig {
static method_28398(config: BiomeParticleConfig): Float;
static method_28399(instance: RecordCodecBuilder_Instance): App;
static method_28400(config: BiomeParticleConfig): ParticleEffect;
static CODEC: Codec;
}

//net.minecraft.entity.data.TrackedDataHandler$1


//net.minecraft.world.gen.feature.LargeDripstoneFeature$DripstoneGenerator
class LargeDripstoneFeature_DripstoneGenerator extends JObject{
}

//net.minecraft.util.profiler.Sampler
class Sampler extends JObject{
 getName(): string;
 equals(o: Object): boolean;
 hashCode(): number;
 start(): void;
 stop(): void;
 getType(): SampleType;
 sample(tick: number): void;
 hasDeviated(): boolean;
 collectData(): Sampler_Data;
}
class Static_Sampler {
static builder(name: string,type: SampleType,retriever: ToDoubleFunction,context: Object): Sampler_Builder;
static create(name: string,type: SampleType,retriever: DoubleSupplier): Sampler;
static create(name: string,type: SampleType,context: Object,retriever: ToDoubleFunction): Sampler;
}

//net.minecraft.network.packet.s2c.play.OpenScreenS2CPacket
class OpenScreenS2CPacket extends JObject, Packet{
 getName(): Text;
 apply(listener: PacketListener): void;
 apply(clientPlayPacketListener: ClientPlayPacketListener): void;
 write(buf: PacketByteBuf): void;
 getSyncId(): number;
 getScreenHandlerType(): ScreenHandlerType;
}

//net.minecraft.structure.OceanMonumentGenerator$SimpleRoomFactory
class OceanMonumentGenerator_SimpleRoomFactory extends JObject, OceanMonumentGenerator_PieceFactory{
 generate(direction: Direction,setting: OceanMonumentGenerator_PieceSetting,random: Random): OceanMonumentGenerator_Piece;
 canGenerate(setting: OceanMonumentGenerator_PieceSetting): boolean;
}

//net.minecraft.loot.context.LootContext$Builder
class LootContext_Builder extends JObject{
 random(seed: long): LootContext_Builder;
 build(randomSequenceId: Identifier): LootContext;
 getWorld(): ServerWorld;
}

//net.minecraft.client.realms.RepeatedNarrator
class RepeatedNarrator extends JObject{
 narrate(narratorManager: NarratorManager,text: Text): void;
}

//net.minecraft.util.math.floatprovider.MultipliedFloatSupplier
class MultipliedFloatSupplier extends JObject, FloatSupplier{
 get(random: Random): number;
 toString(): string;
}

//net.minecraft.client.render.entity.model.ModelWithHead
interface ModelWithHead extends JObject{
 getHead(): ModelPart;
}

//net.minecraft.client.render.debug.ChunkBorderDebugRenderer
class ChunkBorderDebugRenderer extends JObject, DebugRenderer_Renderer{
 render(matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,cameraX: number,cameraY: number,cameraZ: number): void;
}
class Static_ChunkBorderDebugRenderer {
static DARK_CYAN: number;
static YELLOW: number;
}

//net.minecraft.world.gen.chunk.Blender$BlendingSampler
interface Blender_BlendingSampler extends JObject{
 get(data: BlendingData,biomeX: number,biomeY: number,biomeZ: number): number;
}

//net.minecraft.client.render.entity.model.ParrotEntityModel$1


//net.minecraft.entity.SpawnRestriction$SpawnPredicate
interface SpawnRestriction_SpawnPredicate extends JObject{
 test(type: EntityType,world: ServerWorldAccess,spawnReason: SpawnReason,pos: BlockPos,random: Random): boolean;
}

//net.minecraft.entity.EntityType
class EntityType extends JObject, ToggleableFeature, TypeFilter{
 getName(): Text;
 toString(): string;
 create(world: World): Entity;
 create(world: ServerWorld,itemNbt: NbtCompound,afterConsumer: Consumer,pos: BlockPos,reason: SpawnReason,alignPosition: boolean,invertY: boolean): Entity;
 getDimensions(): EntityDimensions;
 getWidth(): number;
 getHeight(): number;
 isSpawnableFarFromPlayer(): boolean;
 createSimpleBoundingBox(feetX: number,feetY: number,feetZ: number): Box;
 isFireImmune(): boolean;
 alwaysUpdateVelocity(): boolean;
 getMaxTrackDistance(): number;
 isIn(tag: TagKey): boolean;
 isInvalidSpawn(state: BlockState): boolean;
 getUntranslatedName(): string;
 getRequiredFeatures(): FeatureSet;
 getSpawnGroup(): SpawnGroup;
 getRegistryEntry(): RegistryEntry_Reference;
 isSaveable(): boolean;
 getLootTableId(): Identifier;
 spawn(world: ServerWorld,pos: BlockPos,reason: SpawnReason): Entity;
 spawn(world: ServerWorld,itemNbt: NbtCompound,afterConsumer: Consumer,pos: BlockPos,reason: SpawnReason,alignPosition: boolean,invertY: boolean): Entity;
 downcast(entity: Entity): Entity;
 downcast(obj: Object): Object;
 getBaseClass(): Class;
 getTranslationKey(): string;
 isSummonable(): boolean;
 spawnFromItemStack(world: ServerWorld,stack: ItemStack,player: PlayerEntity,pos: BlockPos,spawnReason: SpawnReason,alignPosition: boolean,invertY: boolean): Entity;
 getTrackTickInterval(): number;
}
class Static_EntityType {
static get(id: string): Optional;
static register(id: string,type: EntityType_Builder): EntityType;
static getId(type: EntityType): Identifier;
static copier(world: ServerWorld,stack: ItemStack,player: PlayerEntity): Consumer;
static copier(chained: Consumer,world: ServerWorld,stack: ItemStack,player: PlayerEntity): Consumer;
static streamFromNbt(entityNbtList: List,world: World): Stream;
static getEntityFromNbt(nbt: NbtCompound,world: World): Optional;
static fromNbt(nbt: NbtCompound): Optional;
static loadEntityWithPassengers(nbt: NbtCompound,world: World,entityProcessor: Function): Entity;
static method_47823(entity: Entity): void;
static method_48008(serverWorld: ServerWorld,playerEntity: PlayerEntity,nbtCompound: NbtCompound,entity: Entity): void;
static method_17847(nbtCompound: NbtCompound): void;
static loadEntityFromNbt(nbt: NbtCompound,world: World): Optional;
static customNameCopier(chained: Consumer,stack: ItemStack): Consumer;
static loadFromEntityNbt(world: World,player: PlayerEntity,entity: Entity,itemNbt: NbtCompound): void;
static method_17843(nbtCompound: NbtCompound,world: World,fun: Function,entity: Entity): Entity;
static method_17839(nbtCompound: NbtCompound,entity: Entity): void;
static method_48013(entity: Entity): void;
static method_48010(itemStack: ItemStack,entity: Entity): void;
static method_17846(world: World,entityType: EntityType): Entity;
static nbtCopier(chained: Consumer,world: ServerWorld,stack: ItemStack,player: PlayerEntity): Consumer;
static getOriginY(world: WorldView,pos: BlockPos,invertY: boolean,boundingBox: Box): number;
static LOGGER: Logger;
static ENTITY_TAG_KEY: string;
static field_30054: number;
static field_42459: number;
static ALLAY: EntityType;
static AREA_EFFECT_CLOUD: EntityType;
static ARMOR_STAND: EntityType;
static ARROW: EntityType;
static AXOLOTL: EntityType;
static BAT: EntityType;
static BEE: EntityType;
static BLAZE: EntityType;
static BLOCK_DISPLAY: EntityType;
static BOAT: EntityType;
static CAMEL: EntityType;
static CAT: EntityType;
static CAVE_SPIDER: EntityType;
static CHEST_BOAT: EntityType;
static CHEST_MINECART: EntityType;
static CHICKEN: EntityType;
static COD: EntityType;
static COMMAND_BLOCK_MINECART: EntityType;
static COW: EntityType;
static CREEPER: EntityType;
static DOLPHIN: EntityType;
static DONKEY: EntityType;
static DRAGON_FIREBALL: EntityType;
static DROWNED: EntityType;
static EGG: EntityType;
static ELDER_GUARDIAN: EntityType;
static END_CRYSTAL: EntityType;
static ENDER_DRAGON: EntityType;
static ENDER_PEARL: EntityType;
static ENDERMAN: EntityType;
static ENDERMITE: EntityType;
static EVOKER: EntityType;
static EVOKER_FANGS: EntityType;
static EXPERIENCE_BOTTLE: EntityType;
static EXPERIENCE_ORB: EntityType;
static EYE_OF_ENDER: EntityType;
static FALLING_BLOCK: EntityType;
static FIREWORK_ROCKET: EntityType;
static FOX: EntityType;
static FROG: EntityType;
static FURNACE_MINECART: EntityType;
static GHAST: EntityType;
static GIANT: EntityType;
static GLOW_ITEM_FRAME: EntityType;
static GLOW_SQUID: EntityType;
static GOAT: EntityType;
static GUARDIAN: EntityType;
static HOGLIN: EntityType;
static HOPPER_MINECART: EntityType;
static HORSE: EntityType;
static HUSK: EntityType;
static ILLUSIONER: EntityType;
static INTERACTION: EntityType;
static IRON_GOLEM: EntityType;
static ITEM: EntityType;
static ITEM_DISPLAY: EntityType;
static ITEM_FRAME: EntityType;
static FIREBALL: EntityType;
static LEASH_KNOT: EntityType;
static LIGHTNING_BOLT: EntityType;
static LLAMA: EntityType;
static LLAMA_SPIT: EntityType;
static MAGMA_CUBE: EntityType;
static MARKER: EntityType;
static MINECART: EntityType;
static MOOSHROOM: EntityType;
static MULE: EntityType;
static OCELOT: EntityType;
static PAINTING: EntityType;
static PANDA: EntityType;
static PARROT: EntityType;
static PHANTOM: EntityType;
static PIG: EntityType;
static PIGLIN: EntityType;
static PIGLIN_BRUTE: EntityType;
static PILLAGER: EntityType;
static POLAR_BEAR: EntityType;
static POTION: EntityType;
static PUFFERFISH: EntityType;
static RABBIT: EntityType;
static RAVAGER: EntityType;
static SALMON: EntityType;
static SHEEP: EntityType;
static SHULKER: EntityType;
static SHULKER_BULLET: EntityType;
static SILVERFISH: EntityType;
static SKELETON: EntityType;
static SKELETON_HORSE: EntityType;
static SLIME: EntityType;
static SMALL_FIREBALL: EntityType;
static SNIFFER: EntityType;
static SNOW_GOLEM: EntityType;
static SNOWBALL: EntityType;
static SPAWNER_MINECART: EntityType;
static SPECTRAL_ARROW: EntityType;
static SPIDER: EntityType;
static SQUID: EntityType;
static STRAY: EntityType;
static STRIDER: EntityType;
static TADPOLE: EntityType;
static TEXT_DISPLAY: EntityType;
static TNT: EntityType;
static TNT_MINECART: EntityType;
static TRADER_LLAMA: EntityType;
static TRIDENT: EntityType;
static TROPICAL_FISH: EntityType;
static TURTLE: EntityType;
static VEX: EntityType;
static VILLAGER: EntityType;
static VINDICATOR: EntityType;
static WANDERING_TRADER: EntityType;
static WARDEN: EntityType;
static WITCH: EntityType;
static WITHER: EntityType;
static WITHER_SKELETON: EntityType;
static WITHER_SKULL: EntityType;
static WOLF: EntityType;
static ZOGLIN: EntityType;
static ZOMBIE: EntityType;
static ZOMBIE_HORSE: EntityType;
static ZOMBIE_VILLAGER: EntityType;
static ZOMBIFIED_PIGLIN: EntityType;
static PLAYER: EntityType;
static FISHING_BOBBER: EntityType;
}

//net.minecraft.block.RedstoneWireBlock$1


//net.minecraft.world.gen.feature.TreeConfiguredFeatures
class TreeConfiguredFeatures extends JObject{
}
class Static_TreeConfiguredFeatures {
static builder(log: Block,leaves: Block,baseHeight: number,firstRandomHeight: number,secondRandomHeight: number,radius: number): TreeFeatureConfig_Builder;
static bootstrap(featureRegisterable: Registerable): void;
static birch(): TreeFeatureConfig_Builder;
static oak(): TreeFeatureConfig_Builder;
static jungle(): TreeFeatureConfig_Builder;
static superBirch(): TreeFeatureConfig_Builder;
static fancyOak(): TreeFeatureConfig_Builder;
static cherry(): TreeFeatureConfig_Builder;
static CRIMSON_FUNGUS: RegistryKey;
static CRIMSON_FUNGUS_PLANTED: RegistryKey;
static WARPED_FUNGUS: RegistryKey;
static WARPED_FUNGUS_PLANTED: RegistryKey;
static HUGE_BROWN_MUSHROOM: RegistryKey;
static HUGE_RED_MUSHROOM: RegistryKey;
static OAK: RegistryKey;
static DARK_OAK: RegistryKey;
static BIRCH: RegistryKey;
static ACACIA: RegistryKey;
static SPRUCE: RegistryKey;
static PINE: RegistryKey;
static JUNGLE_TREE: RegistryKey;
static FANCY_OAK: RegistryKey;
static JUNGLE_TREE_NO_VINE: RegistryKey;
static MEGA_JUNGLE_TREE: RegistryKey;
static MEGA_SPRUCE: RegistryKey;
static MEGA_PINE: RegistryKey;
static SUPER_BIRCH_BEES_0002: RegistryKey;
static SUPER_BIRCH_BEES: RegistryKey;
static SWAMP_OAK: RegistryKey;
static JUNGLE_BUSH: RegistryKey;
static AZALEA_TREE: RegistryKey;
static MANGROVE: RegistryKey;
static TALL_MANGROVE: RegistryKey;
static CHERRY: RegistryKey;
static OAK_BEES_0002: RegistryKey;
static OAK_BEES_002: RegistryKey;
static OAK_BEES_005: RegistryKey;
static BIRCH_BEES_0002: RegistryKey;
static BIRCH_BEES_002: RegistryKey;
static BIRCH_BEES_005: RegistryKey;
static FANCY_OAK_BEES_0002: RegistryKey;
static FANCY_OAK_BEES_002: RegistryKey;
static FANCY_OAK_BEES_005: RegistryKey;
static FANCY_OAK_BEES: RegistryKey;
static CHERRY_BEES_005: RegistryKey;
}

//net.minecraft.client.gui.screen.GameModeSelectionScreen$1


//net.minecraft.world.gen.carver.Carver
class Carver extends JObject{
 configure(config: CarverConfig): ConfiguredCarver;
 carve(context: CarverContext,config: CarverConfig,chunk: Chunk,posToBiome: Function,random: Random,aquiferSampler: AquiferSampler,pos: ChunkPos,mask: CarvingMask): boolean;
 getCodec(): Codec;
 getBranchFactor(): number;
 shouldCarve(config: CarverConfig,random: Random): boolean;
}
class Static_Carver {
static register(name: string,carver: Carver): Carver;
static isDebug(config: CarverConfig): boolean;
static method_39116(chunk: Chunk,mutable: BlockPos_Mutable,state: BlockState): void;
static getDebugState(config: CarverConfig,state: BlockState): BlockState;
static canCarveBranch(pos: ChunkPos,x: number,z: number,branchIndex: number,branchCount: number,baseWidth: number): boolean;
static CAVE: Carver;
static NETHER_CAVE: Carver;
static RAVINE: Carver;
static AIR: BlockState;
static CAVE_AIR: BlockState;
static WATER: FluidState;
static LAVA: FluidState;
}

//net.minecraft.command.argument.PosArgument
interface PosArgument extends JObject{
 toAbsolutePos(source: ServerCommandSource): Vec3d;
 isZRelative(): boolean;
 isXRelative(): boolean;
 isYRelative(): boolean;
 toAbsoluteRotation(source: ServerCommandSource): Vec2f;
 toAbsoluteBlockPos(source: ServerCommandSource): BlockPos;
}

//net.minecraft.nbt.scanner.NbtCollector
class NbtCollector extends JObject, NbtScanner{
 start(rootType: NbtType): NbtScanner_Result;
 getRoot(): NbtElement;
 visitEnd(): NbtScanner_Result;
 visitInt(value: number): NbtScanner_Result;
 endNested(): NbtScanner_Result;
 startListItem(type: NbtType,index: number): NbtScanner_NestedResult;
 visitListMeta(entryType: NbtType,length: number): NbtScanner_Result;
 visitLong(value: long): NbtScanner_Result;
 visitString(value: string): NbtScanner_Result;
 visitDouble(value: number): NbtScanner_Result;
 visitShort(value: short): NbtScanner_Result;
 visitFloat(value: number): NbtScanner_Result;
 visitByte(value: byte): NbtScanner_Result;
 visitByteArray(value: byte[]): NbtScanner_Result;
 visitLongArray(value: long[]): NbtScanner_Result;
 visitIntArray(value: number[]): NbtScanner_Result;
 startSubNbt(type: NbtType,key: string): NbtScanner_NestedResult;
 visitSubNbtType(type: NbtType): NbtScanner_NestedResult;
}

//net.minecraft.loot.provider.nbt.ContextLootNbtProvider$CustomSerializer
class ContextLootNbtProvider_CustomSerializer extends JObject, JsonSerializing_ElementSerializer{
 fromJson(json: JsonElement,context: JsonDeserializationContext): Object;
 fromJson(jsonElement: JsonElement,jsonDeserializationContext: JsonDeserializationContext): ContextLootNbtProvider;
 toJson(contextLootNbtProvider: ContextLootNbtProvider,jsonSerializationContext: JsonSerializationContext): JsonElement;
 toJson(object: Object,context: JsonSerializationContext): JsonElement;
}

//net.minecraft.entity.ai.brain.task.Tasks
class Tasks extends JObject{
}
class Static_Tasks {
static pickRandomly(weightedTasks: List): SingleTickTask;
static weighted(weightedTasks: List,order: CompositeTask_Order,runMode: CompositeTask_RunMode): SingleTickTask;
static method_47165(weightedList: WeightedList,task: Pair): void;
static method_47164(order: CompositeTask_Order,weightedList: WeightedList,runMode: CompositeTask_RunMode,context: TaskTriggerer_TaskContext): App;
static method_47163(order: CompositeTask_Order,weightedList: WeightedList,runMode: CompositeTask_RunMode,world: ServerWorld,entity: LivingEntity,time: long): boolean;
}

//net.minecraft.world.gen.carver.ConfiguredCarvers
class ConfiguredCarvers extends JObject{
}
class Static_ConfiguredCarvers {
static register(id: string): RegistryKey;
static bootstrap(carverRegisterable: Registerable): void;
static CAVE: RegistryKey;
static CAVE_EXTRA_UNDERGROUND: RegistryKey;
static CANYON: RegistryKey;
static NETHER_CAVE: RegistryKey;
}

//net.minecraft.world.gen.BlockSource
interface BlockSource extends JObject{
 apply(sampler: ChunkNoiseSampler,x: number,y: number,z: number): BlockState;
}

//net.minecraft.client.gui.screen.option.ControlsListWidget$CategoryEntry$1


//net.minecraft.client.render.model.json.ModelOverrideList$BakedOverride
class ModelOverrideList_BakedOverride extends JObject{
}

//net.minecraft.loot.entry.CombinedEntry$Factory
interface CombinedEntry_Factory extends JObject{
 create(children: LootPoolEntry[],conditions: LootCondition[]): CombinedEntry;
}

//net.minecraft.recipe.RecipeGridAligner
interface RecipeGridAligner extends JObject{
 alignRecipeToGrid(gridWidth: number,gridHeight: number,gridOutputSlot: number,recipe: Recipe,inputs: Iterator,amount: number): void;
 acceptAlignedInput(inputs: Iterator,slot: number,amount: number,gridX: number,gridY: number): void;
}

//net.minecraft.client.gui.screen.ingame.BookEditScreen$Line
class BookEditScreen_Line extends JObject{
}

//net.minecraft.structure.VillageGenerator
class VillageGenerator extends JObject{
}
class Static_VillageGenerator {
static bootstrap(poolRegisterable: Registerable): void;
}

//net.minecraft.client.realms.util.RealmsPersistence
class RealmsPersistence extends JObject{
 load(): RealmsPersistence_RealmsPersistenceData;
 save(data: RealmsPersistence_RealmsPersistenceData): void;
}
class Static_RealmsPersistence {
static getFile(): Path;
static readFile(): RealmsPersistence_RealmsPersistenceData;
static writeFile(data: RealmsPersistence_RealmsPersistenceData): void;
static FILE_NAME: string;
static CHECKED_GSON: CheckedGson;
static LOGGER: Logger;
}

//net.minecraft.world.event.listener.GameEventListener$Holder
interface GameEventListener_Holder extends JObject{
 getEventListener(): GameEventListener;
}

//net.minecraft.world.chunk.WorldChunk$1


//net.minecraft.entity.vehicle.AbstractMinecartEntity$1


//net.minecraft.client.render.model.SpriteAtlasManager$AtlasPreparation
class SpriteAtlasManager_AtlasPreparation extends JObject{
 upload(): void;
 whenComplete(): CompletableFuture;
 getSprite(id: Identifier): Sprite;
 getMissingSprite(): Sprite;
}

//net.minecraft.command.argument.EntityArgumentType
class EntityArgumentType extends JObject, ArgumentType{
 parse(stringReader: StringReader): EntitySelector;
 parse(reader: StringReader): Object;
 getExamples(): Collection;
 listSuggestions(context: CommandContext,builder: SuggestionsBuilder): CompletableFuture;
}
class Static_EntityArgumentType {
static getEntities(context: CommandContext,name: string): Collection;
static entities(): EntityArgumentType;
static entity(): EntityArgumentType;
static getEntity(context: CommandContext,name: string): Entity;
static getOptionalEntities(context: CommandContext,name: string): Collection;
static getPlayers(context: CommandContext,name: string): Collection;
static player(): EntityArgumentType;
static getPlayer(context: CommandContext,name: string): ServerPlayerEntity;
static players(): EntityArgumentType;
static getOptionalPlayers(context: CommandContext,name: string): Collection;
static EXAMPLES: Collection;
static TOO_MANY_ENTITIES_EXCEPTION: SimpleCommandExceptionType;
static TOO_MANY_PLAYERS_EXCEPTION: SimpleCommandExceptionType;
static PLAYER_SELECTOR_HAS_ENTITIES_EXCEPTION: SimpleCommandExceptionType;
static ENTITY_NOT_FOUND_EXCEPTION: SimpleCommandExceptionType;
static PLAYER_NOT_FOUND_EXCEPTION: SimpleCommandExceptionType;
static NOT_ALLOWED_EXCEPTION: SimpleCommandExceptionType;
}

//net.minecraft.network.packet.s2c.query.QueryPongS2CPacket
class QueryPongS2CPacket extends JObject, Packet{
 apply(clientQueryPacketListener: ClientQueryPacketListener): void;
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
 getStartTime(): long;
}

//net.minecraft.client.render.entity.EntityRenderer
class EntityRenderer extends JObject{
 render(entity: Entity,yaw: number,tickDelta: number,matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,light: number): void;
 getTexture(entity: Entity): Identifier;
 getTextRenderer(): TextRenderer;
 getLight(entity: Entity,tickDelta: number): number;
 shouldRender(entity: Entity,frustum: Frustum,x: number,y: number,z: number): boolean;
 getPositionOffset(entity: Entity,tickDelta: number): Vec3d;
}
class Static_EntityRenderer {
static field_32921: number;
}

//net.minecraft.client.particle.SonicBoomParticle$Factory
class SonicBoomParticle_Factory extends JObject, ParticleFactory{
 createParticle(defaultParticleType: DefaultParticleType,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
 createParticle(particleEffect: ParticleEffect,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
}

//net.minecraft.world.tick.SimpleTickScheduler
class SimpleTickScheduler extends JObject, SerializableTickScheduler, BasicTickScheduler{
 isQueued(pos: BlockPos,type: Object): boolean;
 scheduleTick(orderedTick: OrderedTick): void;
 getTickCount(): number;
 toNbt(time: long,typeToNameFunction: Function): NbtElement;
 getTicks(): List;
}
class Static_SimpleTickScheduler {
static tick(tickList: NbtList,typeToNameFunction: Function,pos: ChunkPos): SimpleTickScheduler;
}

//net.minecraft.server.rcon.BufferHelper
class BufferHelper extends JObject{
}
class Static_BufferHelper {
static getString(buf: byte[],i: number,j: number): string;
static getIntLE(buf: byte[],start: number,limit: number): number;
static getIntLE(buf: byte[],start: number): number;
static getIntBE(buf: byte[],start: number,limit: number): number;
static toHex(b: byte): string;
static field_29792: number;
static HEX_CHARS_LOOKUP: char[];
}

//net.minecraft.client.font.TextHandler$WidthLimitingVisitor
class TextHandler_WidthLimitingVisitor extends JObject, CharacterVisitor{
 getLength(): number;
 accept(i: number,style: Style,j: number): boolean;
 resetLength(): void;
}

//net.minecraft.network.packet.s2c.play.PlaySoundFromEntityS2CPacket
class PlaySoundFromEntityS2CPacket extends JObject, Packet{
 apply(listener: PacketListener): void;
 apply(clientPlayPacketListener: ClientPlayPacketListener): void;
 write(buf: PacketByteBuf): void;
 getSeed(): long;
 getCategory(): SoundCategory;
 getVolume(): number;
 getSound(): RegistryEntry;
 getEntityId(): number;
 getPitch(): number;
}
class Static_PlaySoundFromEntityS2CPacket {
static method_48005(packetByteBuf: PacketByteBuf,soundEvent: SoundEvent): void;
}

//net.minecraft.network.packet.s2c.play.SignEditorOpenS2CPacket
class SignEditorOpenS2CPacket extends JObject, Packet{
 apply(clientPlayPacketListener: ClientPlayPacketListener): void;
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
 isFront(): boolean;
 getPos(): BlockPos;
}

//net.minecraft.particle.VibrationParticleEffect$1


//net.minecraft.unused.packageinfo.PackageInfo6391
interface PackageInfo6391 extends JObject{
}

//net.minecraft.network.packet.s2c.play.EndCombatS2CPacket
class EndCombatS2CPacket extends JObject, Packet{
 apply(clientPlayPacketListener: ClientPlayPacketListener): void;
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
}

//net.minecraft.recipe.RecipeSerializer
interface RecipeSerializer extends JObject{
 write(buf: PacketByteBuf,recipe: Recipe): void;
 read(id: Identifier,buf: PacketByteBuf): Recipe;
 read(id: Identifier,json: JsonObject): Recipe;
}
class Static_RecipeSerializer {
static register(id: string,serializer: RecipeSerializer): RecipeSerializer;
static SHAPED: RecipeSerializer;
static SHAPELESS: RecipeSerializer;
static ARMOR_DYE: RecipeSerializer;
static BOOK_CLONING: RecipeSerializer;
static MAP_CLONING: RecipeSerializer;
static MAP_EXTENDING: RecipeSerializer;
static FIREWORK_ROCKET: RecipeSerializer;
static FIREWORK_STAR: RecipeSerializer;
static FIREWORK_STAR_FADE: RecipeSerializer;
static TIPPED_ARROW: RecipeSerializer;
static BANNER_DUPLICATE: RecipeSerializer;
static SHIELD_DECORATION: RecipeSerializer;
static SHULKER_BOX: RecipeSerializer;
static SUSPICIOUS_STEW: RecipeSerializer;
static REPAIR_ITEM: RecipeSerializer;
static SMELTING: RecipeSerializer;
static BLASTING: RecipeSerializer;
static SMOKING: RecipeSerializer;
static CAMPFIRE_COOKING: RecipeSerializer;
static STONECUTTING: RecipeSerializer;
static SMITHING_TRANSFORM: RecipeSerializer;
static SMITHING_TRIM: RecipeSerializer;
static CRAFTING_DECORATED_POT: RecipeSerializer;
}

//net.minecraft.network.packet.c2s.play.UpdateStructureBlockC2SPacket
class UpdateStructureBlockC2SPacket extends JObject, Packet{
 apply(serverPlayPacketListener: ServerPlayPacketListener): void;
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
 getSize(): Vec3i;
 getOffset(): BlockPos;
 getSeed(): long;
 getAction(): StructureBlockBlockEntity_Action;
 shouldIgnoreEntities(): boolean;
 getMode(): StructureBlockMode;
 shouldShowBoundingBox(): boolean;
 getMetadata(): string;
 getIntegrity(): number;
 getTemplateName(): string;
 getPos(): BlockPos;
 getMirror(): BlockMirror;
 getRotation(): BlockRotation;
 shouldShowAir(): boolean;
}
class Static_UpdateStructureBlockC2SPacket {
static IGNORE_ENTITIES_MASK: number;
static SHOW_AIR_MASK: number;
static SHOW_BOUNDING_BOX_MASK: number;
}

//net.minecraft.text.ClickEvent
class ClickEvent extends JObject{
 equals(o: Object): boolean;
 toString(): string;
 hashCode(): number;
 getValue(): string;
 getAction(): ClickEvent_Action;
}

//net.minecraft.loot.provider.number.ConstantLootNumberProvider$CustomSerializer
class ConstantLootNumberProvider_CustomSerializer extends JObject, JsonSerializing_ElementSerializer{
 fromJson(json: JsonElement,context: JsonDeserializationContext): Object;
 fromJson(jsonElement: JsonElement,jsonDeserializationContext: JsonDeserializationContext): ConstantLootNumberProvider;
 toJson(constantLootNumberProvider: ConstantLootNumberProvider,jsonSerializationContext: JsonSerializationContext): JsonElement;
 toJson(object: Object,context: JsonSerializationContext): JsonElement;
}

//net.minecraft.text.MutableText
class MutableText extends JObject, Text{
 equals(o: Object): boolean;
 toString(): string;
 append(text: string): MutableText;
 append(text: Text): MutableText;
 hashCode(): number;
 formatted(formatting: Formatting): MutableText;
 formatted(formattings: Formatting[]): MutableText;
 getContent(): TextContent;
 getSiblings(): List;
 setStyle(style: Style): MutableText;
 asOrderedText(): OrderedText;
 getStyle(): Style;
 fillStyle(styleOverride: Style): MutableText;
 styled(styleUpdater: UnaryOperator): MutableText;
}
class Static_MutableText {
static of(content: TextContent): MutableText;
}

//net.minecraft.resource.metadata.PackResourceMetadataReader
class PackResourceMetadataReader extends JObject, ResourceMetadataSerializer{
 getKey(): string;
 fromJson(json: JsonObject): Object;
 fromJson(jsonObject: JsonObject): PackResourceMetadata;
 toJson(packResourceMetadata: PackResourceMetadata): JsonObject;
 toJson(metadata: Object): JsonObject;
}

//net.minecraft.command.EntitySelectorOptions
class EntitySelectorOptions extends JObject{
}
class Static_EntitySelectorOptions {
static register(): void;
static getHandler(reader: EntitySelectorReader,option: string,restoreCursor: number): EntitySelectorOptions_SelectorHandler;
static suggestOptions(reader: EntitySelectorReader,suggestionBuilder: SuggestionsBuilder): void;
static method_9980(reader: EntitySelectorReader): void;
static method_9942(reader: EntitySelectorReader): boolean;
static method_9981(reader: EntitySelectorReader): void;
static method_9925(reader: EntitySelectorReader): boolean;
static method_9982(reader: EntitySelectorReader): void;
static method_9947(reader: EntitySelectorReader): boolean;
static method_9963(reader: EntitySelectorReader): void;
static method_9945(reader: EntitySelectorReader): boolean;
static putOption(id: string,handler: EntitySelectorOptions_SelectorHandler,condition: Predicate,description: Text): void;
static method_9943(reader: EntitySelectorReader): boolean;
static method_9978(reader: EntitySelectorReader): void;
static method_9979(reader: EntitySelectorReader): void;
static method_9977(reader: EntitySelectorReader): void;
static method_9962(reader: EntitySelectorReader): void;
static method_9928(reader: EntitySelectorReader): boolean;
static method_9944(reader: EntitySelectorReader): boolean;
static method_9934(reader: EntitySelectorReader): boolean;
static method_9941(reader: EntitySelectorReader): boolean;
static method_9975(reader: EntitySelectorReader): void;
static method_9955(reader: EntitySelectorReader): boolean;
static method_9953(reader: EntitySelectorReader): void;
static method_9940(reader: EntitySelectorReader): boolean;
static method_9973(reader: EntitySelectorReader): void;
static method_9935(reader: EntitySelectorReader): boolean;
static method_9949(reader: EntitySelectorReader): boolean;
static method_9939(reader: EntitySelectorReader): boolean;
static method_9938(reader: EntitySelectorReader): boolean;
static method_9974(reader: EntitySelectorReader): void;
static method_9933(reader: EntitySelectorReader): boolean;
static method_9968(reader: EntitySelectorReader): void;
static method_9926(reader: EntitySelectorReader): boolean;
static method_9952(reader: EntitySelectorReader): boolean;
static method_9972(reader: EntitySelectorReader): void;
static method_9927(reader: EntitySelectorReader): boolean;
static method_9971(reader: EntitySelectorReader): void;
static method_9970(reader: EntitySelectorReader): void;
static method_9969(reader: EntitySelectorReader): void;
static method_9954(reader: EntitySelectorReader): boolean;
static method_9948(reader: EntitySelectorReader): void;
static method_9951(reader: EntitySelectorReader): void;
static method_9966(reader: EntitySelectorReader): void;
static method_9919(entityType: EntityType,bl: boolean,entity: Entity): boolean;
static method_9965(string: string,bl: boolean,entity: Entity): boolean;
static method_22823(identifier: Identifier,bl: boolean,entity: Entity): boolean;
static method_9937(map: Map,entity: Entity): boolean;
static method_17961(entitySelectorReader: EntitySelectorReader,i: number,identifier: Identifier): CommandSyntaxException;
static method_9922(string: string,bl: boolean,entity: Entity): boolean;
static method_9936(bl: boolean,advancementProgress: AdvancementProgress): boolean;
static method_9950(tagKey: TagKey,bl: boolean,entity: Entity): boolean;
static method_9931(bl: boolean,criterionProgress: CriterionProgress): boolean;
static method_9958(map: Map,entity: Entity): boolean;
static method_9957(nbtCompound: NbtCompound,bl: boolean,entity: Entity): boolean;
static method_22824(reader: EntitySelectorReader): void;
static method_22822(reader: EntitySelectorReader): boolean;
static method_9921(entitySelectorReader: EntitySelectorReader,builder: SuggestionsBuilder,consumer: Consumer): CompletableFuture;
static method_9929(map: Map,advancementProgress: AdvancementProgress): boolean;
static method_9964(entity: Object): Message;
static method_9967(builder: SuggestionsBuilder,consumer: Consumer): CompletableFuture;
static method_9920(string: string,bl: boolean,readerx: Entity): boolean;
static method_9932(gameMode: Object): Message;
static method_9946(entitySelectorReader: EntitySelectorReader,builder: SuggestionsBuilder,consumer: Consumer): CompletableFuture;
static method_9956(sortType: Object): Message;
static method_9923(option: Object): Message;
static method_9959(option: Object): Message;
static method_9924(bl: boolean,gameMode: GameMode,entity: Entity): boolean;
static OPTIONS: Map;
static UNKNOWN_OPTION_EXCEPTION: DynamicCommandExceptionType;
static INAPPLICABLE_OPTION_EXCEPTION: DynamicCommandExceptionType;
static NEGATIVE_DISTANCE_EXCEPTION: SimpleCommandExceptionType;
static NEGATIVE_LEVEL_EXCEPTION: SimpleCommandExceptionType;
static TOO_SMALL_LEVEL_EXCEPTION: SimpleCommandExceptionType;
static IRREVERSIBLE_SORT_EXCEPTION: DynamicCommandExceptionType;
static INVALID_MODE_EXCEPTION: DynamicCommandExceptionType;
static INVALID_TYPE_EXCEPTION: DynamicCommandExceptionType;
}

//net.minecraft.util.annotation.FieldsAreNonnullByDefault2
interface FieldsAreNonnullByDefault2 extends JObject, Annotation{
}

//net.minecraft.client.gui.tooltip.HoveredTooltipPositioner
class HoveredTooltipPositioner extends JObject, TooltipPositioner{
 getPosition(screenWidth: number,screenHeight: number,x: number,y: number,width: number,height: number): Vector2ic;
}
class Static_HoveredTooltipPositioner {
static INSTANCE: TooltipPositioner;
}

//net.minecraft.test.TestCompletionListener
interface TestCompletionListener extends JObject{
 onTestPassed(test: GameTestState): void;
 onTestFailed(test: GameTestState): void;
 onStopped(): void;
}

//net.minecraft.data.client.PropertiesMap
class PropertiesMap extends JObject{
 equals(o: Object): boolean;
 toString(): string;
 hashCode(): number;
 copyOf(propertiesMap: PropertiesMap): PropertiesMap;
 asString(): string;
 withValue(value: Property_Value): PropertiesMap;
}
class Static_PropertiesMap {
static empty(): PropertiesMap;
static withValues(values: Property_Value): PropertiesMap;
static method_25823(value: Property_Value): string;
static EMPTY: PropertiesMap;
static COMPARATOR: Comparator;
}

//net.minecraft.test.TestRunner$1


//net.minecraft.data.server.recipe.RecipeJsonBuilder
class RecipeJsonBuilder extends JObject{
}
class Static_RecipeJsonBuilder {
static getCraftingCategory(category: RecipeCategory): CraftingRecipeCategory;
}

//net.minecraft.client.sound.SoundContainer
interface SoundContainer extends JObject{
 getSound(random: Random): Object;
 getWeight(): number;
 preload(soundSystem: SoundSystem): void;
}

//net.minecraft.client.item.ClampedModelPredicateProvider
interface ClampedModelPredicateProvider extends JObject, ModelPredicateProvider{
 call(itemStack: ItemStack,clientWorld: ClientWorld,livingEntity: LivingEntity,i: number): number;
 unclampedCall(stack: ItemStack,world: ClientWorld,entity: LivingEntity,seed: number): number;
}

//net.minecraft.util.Identifier$ExtraData
interface Identifier_ExtraData extends JObject{
}

//net.minecraft.util.math.intprovider.WeightedListIntProvider
class WeightedListIntProvider extends IntProvider{
 get(random: Random): number;
 getType(): IntProviderType;
 getMin(): number;
 getMax(): number;
}
class Static_WeightedListIntProvider {
static method_38844(provider: WeightedListIntProvider): DataPool;
static method_38845(instance: RecordCodecBuilder_Instance): App;
static CODEC: Codec;
}

//net.minecraft.util.math.intprovider.UniformIntProvider
class UniformIntProvider extends IntProvider{
 get(random: Random): number;
 toString(): string;
 getType(): IntProviderType;
 getMin(): number;
 getMax(): number;
}
class Static_UniformIntProvider {
static create(min: number,max: number): UniformIntProvider;
static method_49475(uniformIntProvider: UniformIntProvider): string;
static method_35018(provider: UniformIntProvider): Integer;
static method_35019(provider: UniformIntProvider): Integer;
static method_35016(instance: RecordCodecBuilder_Instance): App;
static method_35015(provider: UniformIntProvider): DataResult;
static CODEC: Codec;
}

//net.minecraft.util.math.intprovider.ClampedIntProvider
class ClampedIntProvider extends IntProvider{
 get(random: Random): number;
 getType(): IntProviderType;
 getMin(): number;
 getMax(): number;
}
class Static_ClampedIntProvider {
static create(source: IntProvider,min: number,max: number): ClampedIntProvider;
static method_36259(provider: ClampedIntProvider): IntProvider;
static method_36254(provider: ClampedIntProvider): DataResult;
static method_49465(clampedIntProvider: ClampedIntProvider): string;
static method_36257(provider: ClampedIntProvider): Integer;
static method_36256(instance: RecordCodecBuilder_Instance): App;
static method_36258(provider: ClampedIntProvider): Integer;
static CODEC: Codec;
}

//net.minecraft.util.math.intprovider.ConstantIntProvider
class ConstantIntProvider extends IntProvider{
 get(random: Random): number;
 toString(): string;
 getValue(): number;
 getType(): IntProviderType;
 getMin(): number;
 getMax(): number;
}
class Static_ConstantIntProvider {
static create(value: number): ConstantIntProvider;
static method_35001(instance: RecordCodecBuilder_Instance): App;
static method_35002(provider: ConstantIntProvider): ConstantIntProvider;
static method_35000(either: Either): ConstantIntProvider;
static method_35003(provider: ConstantIntProvider): Integer;
static method_34999(provider: ConstantIntProvider): Either;
static ZERO: ConstantIntProvider;
static CODEC: Codec;
}

//net.minecraft.util.math.intprovider.BiasedToBottomIntProvider
class BiasedToBottomIntProvider extends IntProvider{
 get(random: Random): number;
 toString(): string;
 getType(): IntProviderType;
 getMin(): number;
 getMax(): number;
}
class Static_BiasedToBottomIntProvider {
static create(min: number,max: number): BiasedToBottomIntProvider;
static method_49464(biasedToBottomIntProvider: BiasedToBottomIntProvider): string;
static method_36251(instance: RecordCodecBuilder_Instance): App;
static method_36252(provider: BiasedToBottomIntProvider): Integer;
static method_36250(provider: BiasedToBottomIntProvider): DataResult;
static method_36253(provider: BiasedToBottomIntProvider): Integer;
static CODEC: Codec;
}

//net.minecraft.util.math.intprovider.ClampedNormalIntProvider
class ClampedNormalIntProvider extends IntProvider{
 get(random: Random): number;
 toString(): string;
 getType(): IntProviderType;
 getMin(): number;
 getMax(): number;
}
class Static_ClampedNormalIntProvider {
static next(random: Random,mean: number,deviation: number,min: number,max: number): number;
static of(mean: number,deviation: number,min: number,max: number): ClampedNormalIntProvider;
static method_39163(provider: ClampedNormalIntProvider): Float;
static method_39161(provider: ClampedNormalIntProvider): Integer;
static method_49467(clampedNormalIntProvider: ClampedNormalIntProvider): string;
static method_39158(instance: RecordCodecBuilder_Instance): App;
static method_39157(provider: ClampedNormalIntProvider): DataResult;
static method_39160(provider: ClampedNormalIntProvider): Integer;
static method_39162(provider: ClampedNormalIntProvider): Float;
static CODEC: Codec;
}

//net.minecraft.block.SculkVeinBlock$SculkVeinGrowChecker
class SculkVeinBlock_SculkVeinGrowChecker extends LichenGrower_LichenGrowChecker{
 getGrowTypes(): LichenGrower_GrowType;
 canGrow(world: BlockView,pos: BlockPos,growPos: BlockPos,direction: Direction,state: BlockState): boolean;
 canGrow(state: BlockState): boolean;
}

//net.minecraft.screen.Generic3x3ContainerScreenHandler
class Generic3x3ContainerScreenHandler extends ScreenHandler{
 canUse(player: PlayerEntity): boolean;
 quickMove(player: PlayerEntity,slot: number): ItemStack;
 onClosed(player: PlayerEntity): void;
}
class Static_Generic3x3ContainerScreenHandler {
static CONTAINER_SIZE: number;
static INVENTORY_START: number;
static INVENTORY_END: number;
static HOTBAR_START: number;
static HOTBAR_END: number;
}

//net.minecraft.screen.ForgingScreenHandler
class ForgingScreenHandler extends ScreenHandler{
 canUse(player: PlayerEntity): boolean;
 getResultSlotIndex(): number;
 quickMove(player: PlayerEntity,slot: number): ItemStack;
 onClosed(player: PlayerEntity): void;
 onContentChanged(inventory: Inventory): void;
 getSlotFor(stack: ItemStack): number;
 updateResult(): void;
}
class Static_ForgingScreenHandler {
static field_41901: number;
static field_41902: number;
}

//net.minecraft.screen.HorseScreenHandler
class HorseScreenHandler extends ScreenHandler{
 canUse(player: PlayerEntity): boolean;
 quickMove(player: PlayerEntity,slot: number): ItemStack;
 onClosed(player: PlayerEntity): void;
}

//net.minecraft.client.gui.screen.ingame.CreativeInventoryScreen$CreativeScreenHandler
class CreativeInventoryScreen_CreativeScreenHandler extends ScreenHandler{
 canUse(player: PlayerEntity): boolean;
 getCursorStack(): ItemStack;
 quickMove(player: PlayerEntity,slot: number): ItemStack;
 canInsertIntoSlot(stack: ItemStack,slot: Slot): boolean;
 canInsertIntoSlot(slot: Slot): boolean;
 setCursorStack(stack: ItemStack): void;
 shouldShowScrollbar(): boolean;
 scrollItems(position: number): void;
 itemList: DefaultedList;
}

//net.minecraft.screen.HopperScreenHandler
class HopperScreenHandler extends ScreenHandler{
 canUse(player: PlayerEntity): boolean;
 quickMove(player: PlayerEntity,slot: number): ItemStack;
 onClosed(player: PlayerEntity): void;
}
class Static_HopperScreenHandler {
static SLOT_COUNT: number;
}

//net.minecraft.screen.StonecutterScreenHandler
class StonecutterScreenHandler extends ScreenHandler{
 canUse(player: PlayerEntity): boolean;
 getType(): ScreenHandlerType;
 quickMove(player: PlayerEntity,slot: number): ItemStack;
 onButtonClick(player: PlayerEntity,id: number): boolean;
 canInsertIntoSlot(stack: ItemStack,slot: Slot): boolean;
 onClosed(player: PlayerEntity): void;
 onContentChanged(inventory: Inventory): void;
 getAvailableRecipeCount(): number;
 setContentsChangedListener(contentsChangedListener: Runnable): void;
 getAvailableRecipes(): List;
 getSelectedRecipe(): number;
 canCraft(): boolean;
 input: Inventory;
}
class Static_StonecutterScreenHandler {
static method_17867(): void;
static INPUT_ID: number;
static OUTPUT_ID: number;
static INVENTORY_START: number;
static INVENTORY_END: number;
static OUTPUT_START: number;
static OUTPUT_END: number;
}

//net.minecraft.screen.LecternScreenHandler
class LecternScreenHandler extends ScreenHandler{
 setProperty(id: number,value: number): void;
 canUse(player: PlayerEntity): boolean;
 quickMove(player: PlayerEntity,slot: number): ItemStack;
 onButtonClick(player: PlayerEntity,id: number): boolean;
 getPage(): number;
 getBookItem(): ItemStack;
}
class Static_LecternScreenHandler {
static field_30824: number;
static field_30825: number;
static PREVIOUS_PAGE_BUTTON_ID: number;
static NEXT_PAGE_BUTTON_ID: number;
static TAKE_BOOK_BUTTON_ID: number;
static BASE_JUMP_TO_PAGE_BUTTON_ID: number;
}

//net.minecraft.screen.CartographyTableScreenHandler
class CartographyTableScreenHandler extends ScreenHandler{
 canUse(player: PlayerEntity): boolean;
 quickMove(player: PlayerEntity,slot: number): ItemStack;
 canInsertIntoSlot(stack: ItemStack,slot: Slot): boolean;
 onClosed(player: PlayerEntity): void;
 onContentChanged(inventory: Inventory): void;
 inventory: Inventory;
}
class Static_CartographyTableScreenHandler {
static MAP_SLOT_INDEX: number;
static MATERIAL_SLOT_INDEX: number;
static RESULT_SLOT_INDEX: number;
static INVENTORY_START: number;
static INVENTORY_END: number;
static HOTBAR_START: number;
static HOTBAR_END: number;
}

//net.minecraft.screen.BeaconScreenHandler
class BeaconScreenHandler extends ScreenHandler{
 setProperty(id: number,value: number): void;
 getProperties(): number;
 canUse(player: PlayerEntity): boolean;
 getPrimaryEffect(): StatusEffect;
 getSecondaryEffect(): StatusEffect;
 setEffects(primary: Optional,secondary: Optional): void;
 quickMove(player: PlayerEntity,slot: number): ItemStack;
 onClosed(player: PlayerEntity): void;
 hasPayment(): boolean;
}
class Static_BeaconScreenHandler {
static PAYMENT_SLOT_ID: number;
static BEACON_INVENTORY_SIZE: number;
static PROPERTY_COUNT: number;
static INVENTORY_START: number;
static INVENTORY_END: number;
static HOTBAR_START: number;
static HOTBAR_END: number;
}

//net.minecraft.screen.EnchantmentScreenHandler
class EnchantmentScreenHandler extends ScreenHandler{
 canUse(player: PlayerEntity): boolean;
 getSeed(): number;
 quickMove(player: PlayerEntity,slot: number): ItemStack;
 onButtonClick(player: PlayerEntity,id: number): boolean;
 onClosed(player: PlayerEntity): void;
 onContentChanged(inventory: Inventory): void;
 getLapisCount(): number;
 enchantmentPower: number[];
 enchantmentId: number[];
 enchantmentLevel: number[];
}

//net.minecraft.screen.GrindstoneScreenHandler
class GrindstoneScreenHandler extends ScreenHandler{
 canUse(player: PlayerEntity): boolean;
 quickMove(player: PlayerEntity,slot: number): ItemStack;
 onClosed(player: PlayerEntity): void;
 onContentChanged(inventory: Inventory): void;
}
class Static_GrindstoneScreenHandler {
static method_16694(entry: Map_Entry): boolean;
static field_30793: number;
static INPUT_1_ID: number;
static INPUT_2_ID: number;
static OUTPUT_ID: number;
static INVENTORY_START: number;
static INVENTORY_END: number;
static HOTBAR_START: number;
static HOTBAR_END: number;
}

//net.minecraft.screen.LoomScreenHandler
class LoomScreenHandler extends ScreenHandler{
 canUse(player: PlayerEntity): boolean;
 quickMove(player: PlayerEntity,slot: number): ItemStack;
 onButtonClick(player: PlayerEntity,id: number): boolean;
 onClosed(player: PlayerEntity): void;
 onContentChanged(inventory: Inventory): void;
 setInventoryChangeListener(inventoryChangeListener: Runnable): void;
 getSelectedPattern(): number;
 getOutputSlot(): Slot;
 getPatternSlot(): Slot;
 getBannerSlot(): Slot;
 getDyeSlot(): Slot;
 getBannerPatterns(): List;
}
class Static_LoomScreenHandler {
static method_17432(): void;
static NO_PATTERN: number;
static INVENTORY_START: number;
static INVENTORY_END: number;
static HOTBAR_START: number;
static HOTBAR_END: number;
}

//net.minecraft.screen.BrewingStandScreenHandler
class BrewingStandScreenHandler extends ScreenHandler{
 canUse(player: PlayerEntity): boolean;
 quickMove(player: PlayerEntity,slot: number): ItemStack;
 getBrewTime(): number;
 getFuel(): number;
}
class Static_BrewingStandScreenHandler {
static field_30763: number;
static field_30764: number;
static INGREDIENT_SLOT_ID: number;
static FUEL_SLOT_ID: number;
static BREWING_STAND_INVENTORY_SIZE: number;
static PROPERTY_COUNT: number;
static INVENTORY_START: number;
static INVENTORY_END: number;
static HOTBAR_START: number;
static HOTBAR_END: number;
}

//net.minecraft.screen.AbstractRecipeScreenHandler
class AbstractRecipeScreenHandler extends ScreenHandler{
 matches(recipe: Recipe): boolean;
 getCategory(): RecipeBookCategory;
 fillInputSlots(craftAll: boolean,recipe: Recipe,player: ServerPlayerEntity): void;
 canInsertIntoSlot(index: number): boolean;
 clearCraftingSlots(): void;
 getCraftingWidth(): number;
 getCraftingHeight(): number;
 getCraftingResultSlotIndex(): number;
 populateRecipeFinder(finder: RecipeMatcher): void;
 getCraftingSlotCount(): number;
}

//net.minecraft.screen.ShulkerBoxScreenHandler
class ShulkerBoxScreenHandler extends ScreenHandler{
 canUse(player: PlayerEntity): boolean;
 quickMove(player: PlayerEntity,slot: number): ItemStack;
 onClosed(player: PlayerEntity): void;
}
class Static_ShulkerBoxScreenHandler {
static INVENTORY_SIZE: number;
}

//net.minecraft.screen.MerchantScreenHandler
class MerchantScreenHandler extends ScreenHandler{
 canUse(player: PlayerEntity): boolean;
 getExperience(): number;
 canRefreshTrades(): boolean;
 setExperienceFromServer(experience: number): void;
 getMerchantRewardedExperience(): number;
 getRecipes(): TradeOfferList;
 setOffers(offers: TradeOfferList): void;
 getLevelProgress(): number;
 isLeveled(): boolean;
 setLevelProgress(levelProgress: number): void;
 setLeveled(leveled: boolean): void;
 setRecipeIndex(index: number): void;
 switchTo(recipeIndex: number): void;
 quickMove(player: PlayerEntity,slot: number): ItemStack;
 canInsertIntoSlot(stack: ItemStack,slot: Slot): boolean;
 setCanRefreshTrades(canRefreshTrades: boolean): void;
 onClosed(player: PlayerEntity): void;
 onContentChanged(inventory: Inventory): void;
}
class Static_MerchantScreenHandler {
static INPUT_1_ID: number;
static INPUT_2_ID: number;
static OUTPUT_ID: number;
static INVENTORY_START: number;
static INVENTORY_END: number;
static HOTBAR_START: number;
static HOTBAR_END: number;
static INPUT_1_X: number;
static INPUT_2_X: number;
static OUTPUT_X: number;
static SLOT_Y: number;
}

//net.minecraft.screen.GenericContainerScreenHandler
class GenericContainerScreenHandler extends ScreenHandler{
 canUse(player: PlayerEntity): boolean;
 quickMove(player: PlayerEntity,slot: number): ItemStack;
 getInventory(): Inventory;
 onClosed(player: PlayerEntity): void;
 getRows(): number;
}
class Static_GenericContainerScreenHandler {
static createGeneric9x1(syncId: number,playerInventory: PlayerInventory): GenericContainerScreenHandler;
static createGeneric9x2(syncId: number,playerInventory: PlayerInventory): GenericContainerScreenHandler;
static createGeneric9x4(syncId: number,playerInventory: PlayerInventory): GenericContainerScreenHandler;
static createGeneric9x6(syncId: number,playerInventory: PlayerInventory): GenericContainerScreenHandler;
static createGeneric9x6(syncId: number,playerInventory: PlayerInventory,inventory: Inventory): GenericContainerScreenHandler;
static createGeneric9x5(syncId: number,playerInventory: PlayerInventory): GenericContainerScreenHandler;
static createGeneric9x3(syncId: number,playerInventory: PlayerInventory,inventory: Inventory): GenericContainerScreenHandler;
static createGeneric9x3(syncId: number,playerInventory: PlayerInventory): GenericContainerScreenHandler;
static NUM_COLUMNS: number;
}

//net.minecraft.util.shape.SimpleVoxelShape
class SimpleVoxelShape extends VoxelShape{
}

//net.minecraft.util.shape.ArrayVoxelShape
class ArrayVoxelShape extends VoxelShape{
}

//net.minecraft.util.shape.SlicedVoxelShape
class SlicedVoxelShape extends VoxelShape{
}
class Static_SlicedVoxelShape {
static createVoxelSet(voxelSet: VoxelSet,axis: Direction_Axis,sliceWidth: number): VoxelSet;
static POINTS: DoubleList;
}

//net.minecraft.advancement.criterion.TickCriterion$Conditions
class TickCriterion_Conditions extends AbstractCriterionConditions{
}
class Static_TickCriterion_Conditions {
static createAvoidVibration(): TickCriterion_Conditions;
static createHeroOfTheVillage(): TickCriterion_Conditions;
static createSleptInBed(): TickCriterion_Conditions;
static createLocation(block: Block,item: Item): TickCriterion_Conditions;
static createLocation(location: LocationPredicate): TickCriterion_Conditions;
static createLocation(entity: EntityPredicate): TickCriterion_Conditions;
static createTick(): TickCriterion_Conditions;
}

//net.minecraft.advancement.criterion.PlayerHurtEntityCriterion$Conditions
class PlayerHurtEntityCriterion_Conditions extends AbstractCriterionConditions{
 matches(player: ServerPlayerEntity,entityContext: LootContext,source: DamageSource,dealt: number,taken: number,blocked: boolean): boolean;
 toJson(predicateSerializer: AdvancementEntityPredicateSerializer): JsonObject;
}
class Static_PlayerHurtEntityCriterion_Conditions {
static create(damagePredicate: DamagePredicate,hurtEntityPredicate: EntityPredicate): PlayerHurtEntityCriterion_Conditions;
static create(hurtEntityPredicate: EntityPredicate): PlayerHurtEntityCriterion_Conditions;
static create(damagePredicateBuilder: DamagePredicate_Builder,hurtEntityPredicate: EntityPredicate): PlayerHurtEntityCriterion_Conditions;
static create(): PlayerHurtEntityCriterion_Conditions;
static create(damagePredicate: DamagePredicate): PlayerHurtEntityCriterion_Conditions;
static create(damagePredicateBuilder: DamagePredicate_Builder): PlayerHurtEntityCriterion_Conditions;
}

//net.minecraft.advancement.criterion.SlideDownBlockCriterion$Conditions
class SlideDownBlockCriterion_Conditions extends AbstractCriterionConditions{
 test(state: BlockState): boolean;
 toJson(predicateSerializer: AdvancementEntityPredicateSerializer): JsonObject;
}
class Static_SlideDownBlockCriterion_Conditions {
static create(block: Block): SlideDownBlockCriterion_Conditions;
}

//net.minecraft.advancement.criterion.EntityHurtPlayerCriterion$Conditions
class EntityHurtPlayerCriterion_Conditions extends AbstractCriterionConditions{
 matches(player: ServerPlayerEntity,source: DamageSource,dealt: number,taken: number,blocked: boolean): boolean;
 toJson(predicateSerializer: AdvancementEntityPredicateSerializer): JsonObject;
}
class Static_EntityHurtPlayerCriterion_Conditions {
static create(damageBuilder: DamagePredicate_Builder): EntityHurtPlayerCriterion_Conditions;
static create(predicate: DamagePredicate): EntityHurtPlayerCriterion_Conditions;
static create(): EntityHurtPlayerCriterion_Conditions;
}

//net.minecraft.advancement.criterion.LevitationCriterion$Conditions
class LevitationCriterion_Conditions extends AbstractCriterionConditions{
 matches(player: ServerPlayerEntity,startPos: Vec3d,duration: number): boolean;
 toJson(predicateSerializer: AdvancementEntityPredicateSerializer): JsonObject;
}
class Static_LevitationCriterion_Conditions {
static create(distance: DistancePredicate): LevitationCriterion_Conditions;
}

//net.minecraft.advancement.criterion.TameAnimalCriterion$Conditions
class TameAnimalCriterion_Conditions extends AbstractCriterionConditions{
 matches(tamedEntityContext: LootContext): boolean;
 toJson(predicateSerializer: AdvancementEntityPredicateSerializer): JsonObject;
}
class Static_TameAnimalCriterion_Conditions {
static create(entity: EntityPredicate): TameAnimalCriterion_Conditions;
static any(): TameAnimalCriterion_Conditions;
}

//net.minecraft.advancement.criterion.FishingRodHookedCriterion$Conditions
class FishingRodHookedCriterion_Conditions extends AbstractCriterionConditions{
 matches(rod: ItemStack,hookedEntityContext: LootContext,fishingLoots: Collection): boolean;
 toJson(predicateSerializer: AdvancementEntityPredicateSerializer): JsonObject;
}
class Static_FishingRodHookedCriterion_Conditions {
static create(rod: ItemPredicate,bobber: EntityPredicate,item: ItemPredicate): FishingRodHookedCriterion_Conditions;
}

//net.minecraft.advancement.criterion.ChangedDimensionCriterion$Conditions
class ChangedDimensionCriterion_Conditions extends AbstractCriterionConditions{
 matches(from: RegistryKey,to: RegistryKey): boolean;
 toJson(predicateSerializer: AdvancementEntityPredicateSerializer): JsonObject;
}
class Static_ChangedDimensionCriterion_Conditions {
static to(to: RegistryKey): ChangedDimensionCriterion_Conditions;
static from(from: RegistryKey): ChangedDimensionCriterion_Conditions;
static create(): ChangedDimensionCriterion_Conditions;
static create(from: RegistryKey,to: RegistryKey): ChangedDimensionCriterion_Conditions;
}

//net.minecraft.advancement.criterion.CuredZombieVillagerCriterion$Conditions
class CuredZombieVillagerCriterion_Conditions extends AbstractCriterionConditions{
 matches(zombieContext: LootContext,villagerContext: LootContext): boolean;
 toJson(predicateSerializer: AdvancementEntityPredicateSerializer): JsonObject;
}
class Static_CuredZombieVillagerCriterion_Conditions {
static any(): CuredZombieVillagerCriterion_Conditions;
}

//net.minecraft.advancement.criterion.ConstructBeaconCriterion$Conditions
class ConstructBeaconCriterion_Conditions extends AbstractCriterionConditions{
 matches(level: number): boolean;
 toJson(predicateSerializer: AdvancementEntityPredicateSerializer): JsonObject;
}
class Static_ConstructBeaconCriterion_Conditions {
static create(): ConstructBeaconCriterion_Conditions;
static level(level: NumberRange_IntRange): ConstructBeaconCriterion_Conditions;
}

//net.minecraft.advancement.criterion.ConsumeItemCriterion$Conditions
class ConsumeItemCriterion_Conditions extends AbstractCriterionConditions{
 matches(stack: ItemStack): boolean;
 toJson(predicateSerializer: AdvancementEntityPredicateSerializer): JsonObject;
}
class Static_ConsumeItemCriterion_Conditions {
static predicate(predicate: ItemPredicate): ConsumeItemCriterion_Conditions;
static item(item: ItemConvertible): ConsumeItemCriterion_Conditions;
static any(): ConsumeItemCriterion_Conditions;
}

//net.minecraft.advancement.criterion.StartedRidingCriterion$Conditions
class StartedRidingCriterion_Conditions extends AbstractCriterionConditions{
}
class Static_StartedRidingCriterion_Conditions {
static create(player: EntityPredicate_Builder): StartedRidingCriterion_Conditions;
}

//net.minecraft.advancement.criterion.LightningStrikeCriterion$Conditions
class LightningStrikeCriterion_Conditions extends AbstractCriterionConditions{
 test(lightning: LootContext,bystanders: List): boolean;
 toJson(predicateSerializer: AdvancementEntityPredicateSerializer): JsonObject;
}
class Static_LightningStrikeCriterion_Conditions {
static create(lightning: EntityPredicate,bystander: EntityPredicate): LightningStrikeCriterion_Conditions;
}

//net.minecraft.advancement.criterion.FilledBucketCriterion$Conditions
class FilledBucketCriterion_Conditions extends AbstractCriterionConditions{
 matches(stack: ItemStack): boolean;
 toJson(predicateSerializer: AdvancementEntityPredicateSerializer): JsonObject;
}
class Static_FilledBucketCriterion_Conditions {
static create(item: ItemPredicate): FilledBucketCriterion_Conditions;
}

//net.minecraft.advancement.criterion.InventoryChangedCriterion$Conditions
class InventoryChangedCriterion_Conditions extends AbstractCriterionConditions{
 matches(inventory: PlayerInventory,stack: ItemStack,full: number,empty: number,occupied: number): boolean;
 toJson(predicateSerializer: AdvancementEntityPredicateSerializer): JsonObject;
}
class Static_InventoryChangedCriterion_Conditions {
static items(items: ItemPredicate[]): InventoryChangedCriterion_Conditions;
static items(items: ItemConvertible[]): InventoryChangedCriterion_Conditions;
static method_24363(itemStack: ItemStack,item: ItemPredicate): boolean;
}

//net.minecraft.advancement.criterion.OnKilledCriterion$Conditions
class OnKilledCriterion_Conditions extends AbstractCriterionConditions{
 test(player: ServerPlayerEntity,killedEntityContext: LootContext,killingBlow: DamageSource): boolean;
 toJson(predicateSerializer: AdvancementEntityPredicateSerializer): JsonObject;
}
class Static_OnKilledCriterion_Conditions {
static createEntityKilledPlayer(killerEntityPredicate: EntityPredicate): OnKilledCriterion_Conditions;
static createEntityKilledPlayer(): OnKilledCriterion_Conditions;
static createEntityKilledPlayer(killerEntityPredicate: EntityPredicate,damageSourcePredicate: DamageSourcePredicate): OnKilledCriterion_Conditions;
static createEntityKilledPlayer(killerEntityPredicateBuilder: EntityPredicate_Builder,damageSourcePredicate: DamageSourcePredicate): OnKilledCriterion_Conditions;
static createEntityKilledPlayer(killerEntityPredicate: EntityPredicate,damageSourcePredicateBuilder: DamageSourcePredicate_Builder): OnKilledCriterion_Conditions;
static createEntityKilledPlayer(killerEntityPredicateBuilder: EntityPredicate_Builder,damageSourcePredicateBuilder: DamageSourcePredicate_Builder): OnKilledCriterion_Conditions;
static createEntityKilledPlayer(killerEntityPredicateBuilder: EntityPredicate_Builder): OnKilledCriterion_Conditions;
static createPlayerKilledEntity(killedEntityPredicateBuilder: EntityPredicate_Builder,damageSourcePredicate: DamageSourcePredicate): OnKilledCriterion_Conditions;
static createPlayerKilledEntity(killedEntityPredicate: EntityPredicate,damageSourcePredicate: DamageSourcePredicate): OnKilledCriterion_Conditions;
static createPlayerKilledEntity(): OnKilledCriterion_Conditions;
static createPlayerKilledEntity(killedEntityPredicate: EntityPredicate): OnKilledCriterion_Conditions;
static createPlayerKilledEntity(killedEntityPredicateBuilder: EntityPredicate_Builder): OnKilledCriterion_Conditions;
static createPlayerKilledEntity(killedEntityPredicateBuilder: EntityPredicate_Builder,killingBlowBuilder: DamageSourcePredicate_Builder): OnKilledCriterion_Conditions;
static createPlayerKilledEntity(killedEntityPredicate: EntityPredicate,damageSourcePredicateBuilder: DamageSourcePredicate_Builder): OnKilledCriterion_Conditions;
static createKillMobNearSculkCatalyst(): OnKilledCriterion_Conditions;
}

//net.minecraft.advancement.criterion.UsedEnderEyeCriterion$Conditions
class UsedEnderEyeCriterion_Conditions extends AbstractCriterionConditions{
 matches(distance: number): boolean;
}

//net.minecraft.advancement.criterion.RecipeUnlockedCriterion$Conditions
class RecipeUnlockedCriterion_Conditions extends AbstractCriterionConditions{
 matches(recipe: Recipe): boolean;
 toJson(predicateSerializer: AdvancementEntityPredicateSerializer): JsonObject;
}

//net.minecraft.advancement.criterion.UsedTotemCriterion$Conditions
class UsedTotemCriterion_Conditions extends AbstractCriterionConditions{
 matches(stack: ItemStack): boolean;
 toJson(predicateSerializer: AdvancementEntityPredicateSerializer): JsonObject;
}
class Static_UsedTotemCriterion_Conditions {
static create(item: ItemConvertible): UsedTotemCriterion_Conditions;
static create(itemPredicate: ItemPredicate): UsedTotemCriterion_Conditions;
}

//net.minecraft.advancement.criterion.EffectsChangedCriterion$Conditions
class EffectsChangedCriterion_Conditions extends AbstractCriterionConditions{
 matches(player: ServerPlayerEntity,context: LootContext): boolean;
 toJson(predicateSerializer: AdvancementEntityPredicateSerializer): JsonObject;
}
class Static_EffectsChangedCriterion_Conditions {
static create(source: EntityPredicate): EffectsChangedCriterion_Conditions;
static create(effects: EntityEffectPredicate): EffectsChangedCriterion_Conditions;
}

//net.minecraft.advancement.criterion.ItemDurabilityChangedCriterion$Conditions
class ItemDurabilityChangedCriterion_Conditions extends AbstractCriterionConditions{
 matches(stack: ItemStack,durability: number): boolean;
 toJson(predicateSerializer: AdvancementEntityPredicateSerializer): JsonObject;
}
class Static_ItemDurabilityChangedCriterion_Conditions {
static create(player: LootContextPredicate,item: ItemPredicate,durability: NumberRange_IntRange): ItemDurabilityChangedCriterion_Conditions;
static create(item: ItemPredicate,durability: NumberRange_IntRange): ItemDurabilityChangedCriterion_Conditions;
}

//net.minecraft.advancement.criterion.TargetHitCriterion$Conditions
class TargetHitCriterion_Conditions extends AbstractCriterionConditions{
 test(projectileContext: LootContext,hitPos: Vec3d,signalStrength: number): boolean;
 toJson(predicateSerializer: AdvancementEntityPredicateSerializer): JsonObject;
}
class Static_TargetHitCriterion_Conditions {
static create(signalStrength: NumberRange_IntRange,projectile: LootContextPredicate): TargetHitCriterion_Conditions;
}

//net.minecraft.advancement.criterion.EnchantedItemCriterion$Conditions
class EnchantedItemCriterion_Conditions extends AbstractCriterionConditions{
 matches(stack: ItemStack,levels: number): boolean;
 toJson(predicateSerializer: AdvancementEntityPredicateSerializer): JsonObject;
}
class Static_EnchantedItemCriterion_Conditions {
static any(): EnchantedItemCriterion_Conditions;
}

//net.minecraft.advancement.criterion.ItemCriterion$Conditions
class ItemCriterion_Conditions extends AbstractCriterionConditions{
 test(context: LootContext): boolean;
 toJson(predicateSerializer: AdvancementEntityPredicateSerializer): JsonObject;
}
class Static_ItemCriterion_Conditions {
static create(location: LocationPredicate_Builder,item: ItemPredicate_Builder,id: Identifier): ItemCriterion_Conditions;
static createItemUsedOnBlock(location: LocationPredicate_Builder,item: ItemPredicate_Builder): ItemCriterion_Conditions;
static createAllayDropItemOnBlock(location: LocationPredicate_Builder,item: ItemPredicate_Builder): ItemCriterion_Conditions;
static createPlacedBlock(block: Block): ItemCriterion_Conditions;
static createPlacedBlock(locationConditions: LootCondition_Builder): ItemCriterion_Conditions;
static method_51708(i: number): LootCondition[];
}

//net.minecraft.advancement.criterion.BeeNestDestroyedCriterion$Conditions
class BeeNestDestroyedCriterion_Conditions extends AbstractCriterionConditions{
 test(state: BlockState,stack: ItemStack,count: number): boolean;
 toJson(predicateSerializer: AdvancementEntityPredicateSerializer): JsonObject;
}
class Static_BeeNestDestroyedCriterion_Conditions {
static create(block: Block,itemPredicateBuilder: ItemPredicate_Builder,beeCountRange: NumberRange_IntRange): BeeNestDestroyedCriterion_Conditions;
}

//net.minecraft.advancement.criterion.UsingItemCriterion$Conditions
class UsingItemCriterion_Conditions extends AbstractCriterionConditions{
 test(stack: ItemStack): boolean;
 toJson(predicateSerializer: AdvancementEntityPredicateSerializer): JsonObject;
}
class Static_UsingItemCriterion_Conditions {
static create(player: EntityPredicate_Builder,item: ItemPredicate_Builder): UsingItemCriterion_Conditions;
}

//net.minecraft.advancement.criterion.EnterBlockCriterion$Conditions
class EnterBlockCriterion_Conditions extends AbstractCriterionConditions{
 matches(state: BlockState): boolean;
 toJson(predicateSerializer: AdvancementEntityPredicateSerializer): JsonObject;
}
class Static_EnterBlockCriterion_Conditions {
static block(block: Block): EnterBlockCriterion_Conditions;
}

//net.minecraft.advancement.criterion.PlayerInteractedWithEntityCriterion$Conditions
class PlayerInteractedWithEntityCriterion_Conditions extends AbstractCriterionConditions{
 test(stack: ItemStack,context: LootContext): boolean;
 toJson(predicateSerializer: AdvancementEntityPredicateSerializer): JsonObject;
}
class Static_PlayerInteractedWithEntityCriterion_Conditions {
static create(itemBuilder: ItemPredicate_Builder,entity: LootContextPredicate): PlayerInteractedWithEntityCriterion_Conditions;
static create(player: LootContextPredicate,itemBuilder: ItemPredicate_Builder,entity: LootContextPredicate): PlayerInteractedWithEntityCriterion_Conditions;
}

//net.minecraft.advancement.criterion.ChanneledLightningCriterion$Conditions
class ChanneledLightningCriterion_Conditions extends AbstractCriterionConditions{
 matches(victims: Collection): boolean;
 toJson(predicateSerializer: AdvancementEntityPredicateSerializer): JsonObject;
}
class Static_ChanneledLightningCriterion_Conditions {
static create(victims: EntityPredicate[]): ChanneledLightningCriterion_Conditions;
static method_27792(i: number): LootContextPredicate[];
}

//net.minecraft.advancement.criterion.BredAnimalsCriterion$Conditions
class BredAnimalsCriterion_Conditions extends AbstractCriterionConditions{
 matches(parentContext: LootContext,partnerContext: LootContext,childContext: LootContext): boolean;
 toJson(predicateSerializer: AdvancementEntityPredicateSerializer): JsonObject;
}
class Static_BredAnimalsCriterion_Conditions {
static create(parent: EntityPredicate,partner: EntityPredicate,child: EntityPredicate): BredAnimalsCriterion_Conditions;
static create(child: EntityPredicate_Builder): BredAnimalsCriterion_Conditions;
static any(): BredAnimalsCriterion_Conditions;
}

//net.minecraft.advancement.criterion.SummonedEntityCriterion$Conditions
class SummonedEntityCriterion_Conditions extends AbstractCriterionConditions{
 matches(summonedEntityContext: LootContext): boolean;
 toJson(predicateSerializer: AdvancementEntityPredicateSerializer): JsonObject;
}
class Static_SummonedEntityCriterion_Conditions {
static create(summonedEntityPredicateBuilder: EntityPredicate_Builder): SummonedEntityCriterion_Conditions;
}

//net.minecraft.advancement.criterion.KilledByCrossbowCriterion$Conditions
class KilledByCrossbowCriterion_Conditions extends AbstractCriterionConditions{
 matches(victimContexts: Collection,uniqueEntityTypeCount: number): boolean;
 toJson(predicateSerializer: AdvancementEntityPredicateSerializer): JsonObject;
}
class Static_KilledByCrossbowCriterion_Conditions {
static create(uniqueEntityTypes: NumberRange_IntRange): KilledByCrossbowCriterion_Conditions;
static create(victimPredicates: EntityPredicate_Builder): KilledByCrossbowCriterion_Conditions;
}

//net.minecraft.advancement.criterion.PlayerGeneratesContainerLootCriterion$Conditions
class PlayerGeneratesContainerLootCriterion_Conditions extends AbstractCriterionConditions{
 test(lootTable: Identifier): boolean;
 toJson(predicateSerializer: AdvancementEntityPredicateSerializer): JsonObject;
}
class Static_PlayerGeneratesContainerLootCriterion_Conditions {
static create(lootTable: Identifier): PlayerGeneratesContainerLootCriterion_Conditions;
}

//net.minecraft.advancement.criterion.ThrownItemPickedUpByEntityCriterion$Conditions
class ThrownItemPickedUpByEntityCriterion_Conditions extends AbstractCriterionConditions{
 test(player: ServerPlayerEntity,stack: ItemStack,entityContext: LootContext): boolean;
 toJson(predicateSerializer: AdvancementEntityPredicateSerializer): JsonObject;
}
class Static_ThrownItemPickedUpByEntityCriterion_Conditions {
static createThrownItemPickedUpByPlayer(player: LootContextPredicate,item: ItemPredicate,entity: LootContextPredicate): ThrownItemPickedUpByEntityCriterion_Conditions;
static createThrownItemPickedUpByEntity(player: LootContextPredicate,item: ItemPredicate,entity: LootContextPredicate): ThrownItemPickedUpByEntityCriterion_Conditions;
}

//net.minecraft.advancement.criterion.RecipeCraftedCriterion$Conditions
class RecipeCraftedCriterion_Conditions extends AbstractCriterionConditions{
 toJson(predicateSerializer: AdvancementEntityPredicateSerializer): JsonObject;
}
class Static_RecipeCraftedCriterion_Conditions {
static create(recipeId: Identifier): RecipeCraftedCriterion_Conditions;
static create(recipeId: Identifier,ingredients: List): RecipeCraftedCriterion_Conditions;
}

//net.minecraft.advancement.criterion.TravelCriterion$Conditions
class TravelCriterion_Conditions extends AbstractCriterionConditions{
 matches(world: ServerWorld,startPos: Vec3d,endPos: Vec3d): boolean;
 toJson(predicateSerializer: AdvancementEntityPredicateSerializer): JsonObject;
}
class Static_TravelCriterion_Conditions {
static fallFromHeight(entity: EntityPredicate_Builder,distance: DistancePredicate,startPos: LocationPredicate): TravelCriterion_Conditions;
static netherTravel(distance: DistancePredicate): TravelCriterion_Conditions;
static rideEntityInLava(entity: EntityPredicate_Builder,distance: DistancePredicate): TravelCriterion_Conditions;
}

//net.minecraft.advancement.criterion.ShotCrossbowCriterion$Conditions
class ShotCrossbowCriterion_Conditions extends AbstractCriterionConditions{
 matches(stack: ItemStack): boolean;
 toJson(predicateSerializer: AdvancementEntityPredicateSerializer): JsonObject;
}
class Static_ShotCrossbowCriterion_Conditions {
static create(item: ItemConvertible): ShotCrossbowCriterion_Conditions;
static create(itemPredicate: ItemPredicate): ShotCrossbowCriterion_Conditions;
}

//net.minecraft.advancement.criterion.BrewedPotionCriterion$Conditions
class BrewedPotionCriterion_Conditions extends AbstractCriterionConditions{
 matches(potion: Potion): boolean;
 toJson(predicateSerializer: AdvancementEntityPredicateSerializer): JsonObject;
}
class Static_BrewedPotionCriterion_Conditions {
static any(): BrewedPotionCriterion_Conditions;
}

//net.minecraft.advancement.criterion.VillagerTradeCriterion$Conditions
class VillagerTradeCriterion_Conditions extends AbstractCriterionConditions{
 matches(merchantContext: LootContext,stack: ItemStack): boolean;
 toJson(predicateSerializer: AdvancementEntityPredicateSerializer): JsonObject;
}
class Static_VillagerTradeCriterion_Conditions {
static create(playerPredicate: EntityPredicate_Builder): VillagerTradeCriterion_Conditions;
static any(): VillagerTradeCriterion_Conditions;
}

//net.minecraft.entity.decoration.InteractionEntity
class InteractionEntity extends Entity, Attackable, Targeter{
 getTarget(): LivingEntity;
 getDimensions(pose: EntityPose): EntityDimensions;
 tick(): void;
 interact(player: PlayerEntity,hand: Hand): ActionResult;
 getLastAttacker(): LivingEntity;
 canHit(): boolean;
 getPistonBehavior(): PistonBehavior;
 handleAttack(attacker: Entity): boolean;
 canAvoidTraps(): boolean;
 onTrackedDataSet(data: TrackedData): void;
 canBeHitByProjectile(): boolean;
}
class Static_InteractionEntity {
static method_49115(nbtCompound: NbtCompound,nbtElement: NbtElement): void;
static method_49111(nbtCompound: NbtCompound,nbtElement: NbtElement): void;
static field_42624: Logger;
static WIDTH: TrackedData;
static HEIGHT: TrackedData;
static RESPONSE: TrackedData;
static WIDTH_KEY: string;
static HEIGHT_KEY: string;
static ATTACK_KEY: string;
static INTERACTION_KEY: string;
static RESPONSE_KEY: string;
}

//net.minecraft.block.JigsawBlock
class JigsawBlock extends Block, BlockEntityProvider, OperatorBlock{
 rotate(state: BlockState,rotation: BlockRotation): BlockState;
 mirror(state: BlockState,mirror: BlockMirror): BlockState;
 onUse(state: BlockState,world: World,pos: BlockPos,player: PlayerEntity,hand: Hand,hit: BlockHitResult): ActionResult;
 createBlockEntity(pos: BlockPos,state: BlockState): BlockEntity;
 getPlacementState(ctx: ItemPlacementContext): BlockState;
}
class Static_JigsawBlock {
static attachmentMatches(info1: StructureTemplate_StructureBlockInfo,info2: StructureTemplate_StructureBlockInfo): boolean;
static getFacing(state: BlockState): Direction;
static getRotation(state: BlockState): Direction;
static method_26377(direction: Direction): JigsawBlockEntity_Joint;
static ORIENTATION: EnumProperty;
}

//net.minecraft.block.ComparatorBlock
class ComparatorBlock extends AbstractRedstoneGateBlock, BlockEntityProvider{
 onSyncedBlockEvent(state: BlockState,world: World,pos: BlockPos,type: number,data: number): boolean;
 scheduledTick(state: BlockState,world: ServerWorld,pos: BlockPos,random: Random): void;
 onUse(state: BlockState,world: World,pos: BlockPos,player: PlayerEntity,hand: Hand,hit: BlockHitResult): ActionResult;
 createBlockEntity(pos: BlockPos,state: BlockState): BlockEntity;
}
class Static_ComparatorBlock {
static method_9772(direction: Direction,itemFrame: ItemFrameEntity): boolean;
static MODE: EnumProperty;
}

//net.minecraft.block.BlockWithEntity
class BlockWithEntity extends Block, BlockEntityProvider{
 onSyncedBlockEvent(state: BlockState,world: World,pos: BlockPos,type: number,data: number): boolean;
 createScreenHandlerFactory(state: BlockState,world: World,pos: BlockPos): NamedScreenHandlerFactory;
 getRenderType(state: BlockState): BlockRenderType;
}
class Static_BlockWithEntity {
static checkType(givenType: BlockEntityType,expectedType: BlockEntityType,ticker: BlockEntityTicker): BlockEntityTicker;
}

//net.minecraft.block.BedBlock
class BedBlock extends HorizontalFacingBlock, BlockEntityProvider{
 getStateForNeighborUpdate(state: BlockState,direction: Direction,neighborState: BlockState,world: WorldAccess,pos: BlockPos,neighborPos: BlockPos): BlockState;
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 getRenderingSeed(state: BlockState,pos: BlockPos): long;
 canPathfindThrough(state: BlockState,world: BlockView,pos: BlockPos,type: NavigationType): boolean;
 getColor(): DyeColor;
 onBreak(world: World,pos: BlockPos,state: BlockState,player: PlayerEntity): void;
 onUse(state: BlockState,world: World,pos: BlockPos,player: PlayerEntity,hand: Hand,hit: BlockHitResult): ActionResult;
 createBlockEntity(pos: BlockPos,state: BlockState): BlockEntity;
 getRenderType(state: BlockState): BlockRenderType;
 onEntityLand(world: BlockView,entity: Entity): void;
 onLandedUpon(world: World,state: BlockState,pos: BlockPos,entity: Entity,fallDistance: number): void;
 getPlacementState(ctx: ItemPlacementContext): BlockState;
 onPlaced(world: World,pos: BlockPos,state: BlockState,placer: LivingEntity,itemStack: ItemStack): void;
}
class Static_BedBlock {
static getDirection(world: BlockView,pos: BlockPos): Direction;
static getOppositePartDirection(state: BlockState): Direction;
static getBedPart(state: BlockState): DoubleBlockProperties_Type;
static findWakeUpPosition(type: EntityType,world: CollisionView,pos: BlockPos,possibleOffsets: number[][],ignoreInvalidPos: boolean): Optional;
static findWakeUpPosition(type: EntityType,world: CollisionView,pos: BlockPos,bedDirection: Direction,respawnDirection: Direction): Optional;
static findWakeUpPosition(type: EntityType,world: CollisionView,pos: BlockPos,bedDirection: Direction,spawnAngle: number): Optional;
static isBedBelow(world: BlockView,pos: BlockPos): boolean;
static method_19283(playerEntity: PlayerEntity,reason: PlayerEntity_SleepFailureReason): void;
static isBedWorking(world: World): boolean;
static getOnBedOffsets(bedDirection: Direction): number[][];
static getDirectionTowardsOtherPart(part: BedPart,direction: Direction): Direction;
static getAroundAndOnBedOffsets(bedDirection: Direction,respawnDirection: Direction): number[][];
static getAroundBedOffsets(bedDirection: Direction,respawnDirection: Direction): number[][];
static PART: EnumProperty;
static OCCUPIED: BooleanProperty;
static field_31009: number;
static TOP_SHAPE: VoxelShape;
static field_31010: number;
static LEG_1_SHAPE: VoxelShape;
static LEG_2_SHAPE: VoxelShape;
static LEG_3_SHAPE: VoxelShape;
static LEG_4_SHAPE: VoxelShape;
static NORTH_SHAPE: VoxelShape;
static SOUTH_SHAPE: VoxelShape;
static WEST_SHAPE: VoxelShape;
static EAST_SHAPE: VoxelShape;
}

//net.minecraft.block.dispenser.FallibleItemDispenserBehavior
class FallibleItemDispenserBehavior extends ItemDispenserBehavior{
 isSuccess(): boolean;
 setSuccess(success: boolean): void;
}

//net.minecraft.block.dispenser.BoatDispenserBehavior
class BoatDispenserBehavior extends ItemDispenserBehavior{
 dispenseSilently(pointer: BlockPointer,stack: ItemStack): ItemStack;
}

//net.minecraft.block.dispenser.DispenserBehavior$9


//net.minecraft.block.dispenser.DispenserBehavior$13


//net.minecraft.block.dispenser.DispenserBehavior$2


//net.minecraft.block.dispenser.DispenserBehavior$7


//net.minecraft.block.dispenser.DispenserBehavior$8


//net.minecraft.block.dispenser.DispenserBehavior$27


//net.minecraft.block.dispenser.ProjectileDispenserBehavior
class ProjectileDispenserBehavior extends ItemDispenserBehavior{
 dispenseSilently(pointer: BlockPointer,stack: ItemStack): ItemStack;
}

//net.minecraft.block.dispenser.DispenserBehavior$6


//net.minecraft.item.MinecartItem$1


//net.minecraft.item.ArmorItem$1


//net.minecraft.block.dispenser.DispenserBehavior$20


//net.minecraft.world.chunk.UpgradeData$BuiltinLogic
class UpgradeData_BuiltinLogic extends Enum, UpgradeData_Logic{
}
class Static_UpgradeData_BuiltinLogic {
static values(): UpgradeData_BuiltinLogic;
static valueOf(string: string): UpgradeData_BuiltinLogic;
static method_36743(): UpgradeData_BuiltinLogic;
static BLACKLIST: UpgradeData_BuiltinLogic;
static DEFAULT: UpgradeData_BuiltinLogic;
static CHEST: UpgradeData_BuiltinLogic;
static LEAVES: UpgradeData_BuiltinLogic;
static STEM_BLOCK: UpgradeData_BuiltinLogic;
static DIRECTIONS: Direction[];
static field_12961: UpgradeData_BuiltinLogic;
}

//net.minecraft.entity.vehicle.ChestBoatEntity
class ChestBoatEntity extends BoatEntity, RideableInventory, VehicleInventory{
 remove(reason: Entity_RemovalReason): void;
 clear(): void;
 size(): number;
 getStack(slot: number): ItemStack;
 onClose(player: PlayerEntity): void;
 setStack(slot: number,stack: ItemStack): void;
 removeStack(slot: number): ItemStack;
 removeStack(slot: number,amount: number): ItemStack;
 openInventory(player: PlayerEntity): void;
 interact(player: PlayerEntity,hand: Hand): ActionResult;
 getInventory(): DefaultedList;
 markDirty(): void;
 asItem(): Item;
 getLootTableId(): Identifier;
 getLootTableSeed(): long;
 setLootTableId(lootTableId: Identifier): void;
 resetInventory(): void;
 setLootTableSeed(lootTableSeed: long): void;
 canPlayerUse(player: PlayerEntity): boolean;
 createMenu(i: number,playerInventory: PlayerInventory,playerEntity: PlayerEntity): ScreenHandler;
 getStackReference(mappedIndex: number): StackReference;
 generateLoot(player: PlayerEntity): void;
 dropItems(source: DamageSource): void;
}
class Static_ChestBoatEntity {
static INVENTORY_SIZE: number;
}

//net.minecraft.entity.vehicle.StorageMinecartEntity
class StorageMinecartEntity extends AbstractMinecartEntity, VehicleInventory{
 remove(reason: Entity_RemovalReason): void;
 clear(): void;
 getStack(slot: number): ItemStack;
 setStack(slot: number,stack: ItemStack): void;
 removeStack(slot: number,amount: number): ItemStack;
 removeStack(slot: number): ItemStack;
 setLootTable(id: Identifier,lootSeed: long): void;
 interact(player: PlayerEntity,hand: Hand): ActionResult;
 getInventory(): DefaultedList;
 markDirty(): void;
 getLootTableId(): Identifier;
 getLootTableSeed(): long;
 setLootTableId(lootTableId: Identifier): void;
 resetInventory(): void;
 setLootTableSeed(lootTableSeed: long): void;
 canPlayerUse(player: PlayerEntity): boolean;
 createMenu(i: number,playerInventory: PlayerInventory,playerEntity: PlayerEntity): ScreenHandler;
 getStackReference(mappedIndex: number): StackReference;
 dropItems(damageSource: DamageSource): void;
}

//net.minecraft.text.BlockNbtDataSource
class BlockNbtDataSource extends Record, NbtDataSource{
 get(source: ServerCommandSource): Stream;
 equals(o: Object): boolean;
 toString(): string;
 hashCode(): number;
 pos(): PosArgument;
 rawPos(): string;
}
class Static_BlockNbtDataSource {
static parsePos(string: string): PosArgument;
}

//net.minecraft.text.EntityNbtDataSource
class EntityNbtDataSource extends Record, NbtDataSource{
 get(source: ServerCommandSource): Stream;
 equals(o: Object): boolean;
 toString(): string;
 hashCode(): number;
 selector(): EntitySelector;
 rawSelector(): string;
}
class Static_EntityNbtDataSource {
static parseSelector(rawSelector: string): EntitySelector;
}

//net.minecraft.text.StorageNbtDataSource
class StorageNbtDataSource extends Record, NbtDataSource{
 get(source: ServerCommandSource): Stream;
 equals(object: Object): boolean;
 toString(): string;
 hashCode(): number;
 id(): Identifier;
}

//net.minecraft.fluid.FluidState
class FluidState extends State{
 isEmpty(): boolean;
 getLevel(): number;
 getHeight(world: BlockView,pos: BlockPos): number;
 getHeight(): number;
 getShape(world: BlockView,pos: BlockPos): VoxelShape;
 onScheduledTick(world: World,pos: BlockPos): void;
 canBeReplacedWith(world: BlockView,pos: BlockPos,fluid: Fluid,direction: Direction): boolean;
 getBlastResistance(): number;
 hasRandomTicks(): boolean;
 onRandomTick(world: World,pos: BlockPos,random: Random): void;
 randomDisplayTick(world: World,pos: BlockPos,random: Random): void;
 canFlowTo(world: BlockView,pos: BlockPos): boolean;
 getVelocity(world: BlockView,pos: BlockPos): Vec3d;
 isIn(fluids: RegistryEntryList): boolean;
 isIn(tag: TagKey): boolean;
 isOf(fluid: Fluid): boolean;
 isStill(): boolean;
 getBlockState(): BlockState;
 streamTags(): Stream;
 getRegistryEntry(): RegistryEntry;
 getParticle(): ParticleEffect;
 getFluid(): Fluid;
 isEqualAndStill(fluid: Fluid): boolean;
}
class Static_FluidState {
static CODEC: Codec;
static field_31727: number;
static field_31728: number;
}

//net.minecraft.block.AbstractBlock$AbstractBlockState
class AbstractBlock_AbstractBlockState extends State{
 prepare(world: WorldAccess,pos: BlockPos,flags: number): void;
 prepare(world: WorldAccess,pos: BlockPos,flags: number,maxUpdateDepth: number): void;
 isOpaque(): boolean;
 rotate(rotation: BlockRotation): BlockState;
 hasSidedTransparency(): boolean;
 getStateForNeighborUpdate(direction: Direction,neighborState: BlockState,world: WorldAccess,pos: BlockPos,neighborPos: BlockPos): BlockState;
 getOutlineShape(world: BlockView,pos: BlockPos): VoxelShape;
 getOutlineShape(world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 hasEmissiveLighting(world: BlockView,pos: BlockPos): boolean;
 canPlaceAt(world: WorldView,pos: BlockPos): boolean;
 exceedsCube(): boolean;
 isTransparent(world: BlockView,pos: BlockPos): boolean;
 hasModelOffset(): boolean;
 isSideSolid(world: BlockView,pos: BlockPos,direction: Direction,shapeType: SideShapeType): boolean;
 getAmbientOcclusionLightLevel(world: BlockView,pos: BlockPos): number;
 getCameraCollisionShape(world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 getStrongRedstonePower(world: BlockView,pos: BlockPos,direction: Direction): number;
 hasComparatorOutput(): boolean;
 getComparatorOutput(world: World,pos: BlockPos): number;
 blocksMovement(): boolean;
 shouldSuffocate(world: BlockView,pos: BlockPos): boolean;
 isSolidSurface(world: BlockView,pos: BlockPos,entity: Entity,direction: Direction): boolean;
 hasRandomTicks(): boolean;
 getRenderingSeed(pos: BlockPos): long;
 getSidesShape(world: BlockView,pos: BlockPos): VoxelShape;
 isSideInvisible(state: BlockState,direction: Direction): boolean;
 canReplace(context: ItemPlacementContext): boolean;
 onSyncedBlockEvent(world: World,pos: BlockPos,type: number,data: number): boolean;
 canPathfindThrough(world: BlockView,pos: BlockPos,type: NavigationType): boolean;
 canBucketPlace(fluid: Fluid): boolean;
 emitsRedstonePower(): boolean;
 onBlockAdded(world: World,pos: BlockPos,state: BlockState,notify: boolean): void;
 onStateReplaced(world: World,pos: BlockPos,state: BlockState,moved: boolean): void;
 onStacksDropped(world: ServerWorld,pos: BlockPos,tool: ItemStack,dropExperience: boolean): void;
 onEntityCollision(world: World,pos: BlockPos,entity: Entity): void;
 scheduledTick(world: ServerWorld,pos: BlockPos,random: Random): void;
 onProjectileHit(world: World,state: BlockState,hit: BlockHitResult,projectile: ProjectileEntity): void;
 getHardness(world: BlockView,pos: BlockPos): number;
 isSolidBlock(world: BlockView,pos: BlockPos): boolean;
 allowsSpawning(world: BlockView,pos: BlockPos,type: EntityType): boolean;
 initShapeCache(): void;
 getMapColor(world: BlockView,pos: BlockPos): MapColor;
 shouldPostProcess(world: BlockView,pos: BlockPos): boolean;
 randomTick(world: ServerWorld,pos: BlockPos,random: Random): void;
 getOpacity(world: BlockView,pos: BlockPos): number;
 getCullingShape(world: BlockView,pos: BlockPos): VoxelShape;
 getCullingFace(world: BlockView,pos: BlockPos,direction: Direction): VoxelShape;
 isFullCube(world: BlockView,pos: BlockPos): boolean;
 mirror(mirror: BlockMirror): BlockState;
 updateNeighbors(world: WorldAccess,pos: BlockPos,flags: number,maxUpdateDepth: number): void;
 updateNeighbors(world: WorldAccess,pos: BlockPos,flags: number): void;
 isOpaqueFullCube(world: BlockView,pos: BlockPos): boolean;
 isIn(blocks: RegistryEntryList): boolean;
 isIn(tag: TagKey,predicate: Predicate): boolean;
 isIn(tag: TagKey): boolean;
 neighborUpdate(world: World,pos: BlockPos,sourceBlock: Block,sourcePos: BlockPos,notify: boolean): void;
 isOf(block: Block): boolean;
 getFluidState(): FluidState;
 isAir(): boolean;
 createScreenHandlerFactory(world: World,pos: BlockPos): NamedScreenHandlerFactory;
 getBlock(): Block;
 getWeakRedstonePower(world: BlockView,pos: BlockPos,direction: Direction): number;
 isSideSolidFullSquare(world: BlockView,pos: BlockPos,direction: Direction): boolean;
 calcBlockBreakingDelta(player: PlayerEntity,world: BlockView,pos: BlockPos): number;
 hasBlockBreakParticles(): boolean;
 getSoundGroup(): BlockSoundGroup;
 onUse(world: World,player: PlayerEntity,hand: Hand,hit: BlockHitResult): ActionResult;
 onBlockBreakStart(world: World,pos: BlockPos,player: PlayerEntity): void;
 streamTags(): Stream;
 getRaycastShape(world: BlockView,pos: BlockPos): VoxelShape;
 getLuminance(): number;
 getCollisionShape(world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 getCollisionShape(world: BlockView,pos: BlockPos): VoxelShape;
 getRegistryEntry(): RegistryEntry;
 shouldBlockVision(world: BlockView,pos: BlockPos): boolean;
 getRenderType(): BlockRenderType;
 getPistonBehavior(): PistonBehavior;
 hasBlockEntity(): boolean;
 isReplaceable(): boolean;
 isSolid(): boolean;
 getDroppedStacks(builder: LootContextParameterSet_Builder): List;
 hasSolidTopSurface(world: BlockView,pos: BlockPos,entity: Entity): boolean;
 getInstrument(): Instrument;
 isToolRequired(): boolean;
 isBurnable(): boolean;
 isLiquid(): boolean;
 getBlockEntityTicker(world: World,blockEntityType: BlockEntityType): BlockEntityTicker;
 getModelOffset(world: BlockView,pos: BlockPos): Vec3d;
}

//net.minecraft.client.QuickPlayLogger$1


//net.minecraft.entity.vehicle.HopperMinecartEntity
class HopperMinecartEntity extends StorageMinecartEntity, Hopper{
 size(): number;
 isEnabled(): boolean;
 tick(): void;
 getHopperY(): number;
 getHopperX(): number;
 getHopperZ(): number;
 getScreenHandler(syncId: number,playerInventory: PlayerInventory): ScreenHandler;
 setEnabled(enabled: boolean): void;
 onActivatorRail(x: number,y: number,z: number,powered: boolean): void;
 getMinecartType(): AbstractMinecartEntity_Type;
 canOperate(): boolean;
 getDefaultContainedBlock(): BlockState;
 getDefaultBlockOffset(): number;
}

//net.minecraft.block.entity.HopperBlockEntity
class HopperBlockEntity extends LootableContainerBlockEntity, Hopper{
 size(): number;
 getHopperY(): number;
 getHopperX(): number;
 getHopperZ(): number;
 setStack(slot: number,stack: ItemStack): void;
 removeStack(slot: number,amount: number): ItemStack;
 readNbt(nbt: NbtCompound): void;
}
class Static_HopperBlockEntity {
static extract(world: World,hopper: Hopper): boolean;
static extract(hopper: Hopper,inventory: Inventory,slot: number,side: Direction): boolean;
static extract(inventory: Inventory,itemEntity: ItemEntity): boolean;
static insert(world: World,pos: BlockPos,state: BlockState,inventory: Inventory): boolean;
static transfer(from: Inventory,to: Inventory,stack: ItemStack,side: Direction): ItemStack;
static transfer(from: Inventory,to: Inventory,stack: ItemStack,slot: number,side: Direction): ItemStack;
static serverTick(world: World,pos: BlockPos,state: BlockState,blockEntity: HopperBlockEntity): void;
static canInsert(inventory: Inventory,stack: ItemStack,slot: number,side: Direction): boolean;
static isInventoryEmpty(inv: Inventory,facing: Direction): boolean;
static canMergeItems(first: ItemStack,second: ItemStack): boolean;
static isInventoryFull(inventory: Inventory,direction: Direction): boolean;
static method_17769(inventory: Inventory,slot: number): boolean;
static method_17766(inventory: Inventory,slot: number): boolean;
static getInventoryAt(world: World,pos: BlockPos): Inventory;
static getInventoryAt(world: World,x: number,y: number,z: number): Inventory;
static method_31691(world: World,hopperBlockEntity: HopperBlockEntity): boolean;
static method_11245(world: World,hopper: Hopper,box: Box): Stream;
static method_17768(hopper: Hopper,inventory: Inventory,direction: Direction,slot: number): boolean;
static getOutputInventory(world: World,pos: BlockPos,state: BlockState): Inventory;
static getInputInventory(world: World,hopper: Hopper): Inventory;
static insertAndExtract(world: World,pos: BlockPos,state: BlockState,blockEntity: HopperBlockEntity,booleanSupplier: BooleanSupplier): boolean;
static onEntityCollided(world: World,pos: BlockPos,state: BlockState,entity: Entity,blockEntity: HopperBlockEntity): void;
static method_31693(hopperBlockEntity: HopperBlockEntity,entity: Entity): boolean;
static canExtract(hopperInventory: Inventory,fromInventory: Inventory,stack: ItemStack,slot: number,facing: Direction): boolean;
static getAvailableSlots(inventory: Inventory,side: Direction): IntStream;
static getInputItemEntities(world: World,hopper: Hopper): List;
static TRANSFER_COOLDOWN: number;
static INVENTORY_SIZE: number;
}

//net.minecraft.command.argument.HeightmapArgumentType
class HeightmapArgumentType extends EnumArgumentType{
}
class Static_HeightmapArgumentType {
static heightmap(): HeightmapArgumentType;
static getHeightmapTypes(): Heightmap_Type;
static getHeightmap(context: CommandContext,id: string): Heightmap_Type;
static method_49543(i: number): Heightmap_Type;
static method_49547(name: string): string;
static HEIGHTMAP_CODEC: Codec;
}

//net.minecraft.command.argument.BlockMirrorArgumentType
class BlockMirrorArgumentType extends EnumArgumentType{
}
class Static_BlockMirrorArgumentType {
static blockMirror(): EnumArgumentType;
static getBlockMirror(context: CommandContext,id: string): BlockMirror;
}

//net.minecraft.command.argument.BlockRotationArgumentType
class BlockRotationArgumentType extends EnumArgumentType{
}
class Static_BlockRotationArgumentType {
static blockRotation(): BlockRotationArgumentType;
static getBlockRotation(context: CommandContext,id: string): BlockRotation;
}

//net.minecraft.client.realms.dto.RealmsWorldResetDto
class RealmsWorldResetDto extends ValueObject, RealmsSerializable{
}

//net.minecraft.client.realms.dto.RegionPingResult
class RegionPingResult extends ValueObject, RealmsSerializable{
 toString(): string;
 getPing(): number;
}

//net.minecraft.client.realms.dto.PingResult
class PingResult extends ValueObject, RealmsSerializable{
 pingResults: List;
 worldIds: List;
}

//net.minecraft.client.realms.dto.PlayerInfo
class PlayerInfo extends ValueObject, RealmsSerializable{
 getName(): string;
 setName(name: string): void;
 isAccepted(): boolean;
 isOperator(): boolean;
 setUuid(uuid: string): void;
 getUuid(): string;
 setAccepted(accepted: boolean): void;
 setOnline(online: boolean): void;
 isOnline(): boolean;
 setOperator(operator: boolean): void;
}

//net.minecraft.client.realms.dto.RealmsDescriptionDto
class RealmsDescriptionDto extends ValueObject, RealmsSerializable{
 name: string;
 description: string;
}

//net.minecraft.server.network.ServerItemCooldownManager
class ServerItemCooldownManager extends ItemCooldownManager{
}

//net.minecraft.loot.function.EnchantRandomlyLootFunction
class EnchantRandomlyLootFunction extends ConditionalLootFunction{
 getType(): LootFunctionType;
 process(stack: ItemStack,context: LootContext): ItemStack;
}
class Static_EnchantRandomlyLootFunction {
static builder(): ConditionalLootFunction_Builder;
static create(): EnchantRandomlyLootFunction_Builder;
static method_26267(bl: boolean,itemStack: ItemStack,enchantment: Enchantment): boolean;
static method_488(conditions: LootCondition[]): LootFunction;
static addEnchantmentToStack(stack: ItemStack,enchantment: Enchantment,random: Random): ItemStack;
static LOGGER: Logger;
}

//net.minecraft.loot.function.SetNbtLootFunction
class SetNbtLootFunction extends ConditionalLootFunction{
 getType(): LootFunctionType;
 process(stack: ItemStack,context: LootContext): ItemStack;
}
class Static_SetNbtLootFunction {
static builder(nbt: NbtCompound): ConditionalLootFunction_Builder;
static method_675(nbtCompound: NbtCompound,conditions: LootCondition[]): LootFunction;
}

//net.minecraft.loot.function.SetLootTableLootFunction
class SetLootTableLootFunction extends ConditionalLootFunction{
 validate(reporter: LootTableReporter): void;
 getType(): LootFunctionType;
 process(stack: ItemStack,context: LootContext): ItemStack;
}
class Static_SetLootTableLootFunction {
static builder(type: BlockEntityType,id: Identifier,seed: long): ConditionalLootFunction_Builder;
static builder(type: BlockEntityType,id: Identifier): ConditionalLootFunction_Builder;
static method_35536(identifier: Identifier,l: long,blockEntityType: BlockEntityType,conditions: LootCondition[]): LootFunction;
static method_35537(identifier: Identifier,blockEntityType: BlockEntityType,conditions: LootCondition[]): LootFunction;
}

//net.minecraft.loot.function.SetDamageLootFunction
class SetDamageLootFunction extends ConditionalLootFunction{
 getType(): LootFunctionType;
 process(stack: ItemStack,context: LootContext): ItemStack;
 getRequiredParameters(): Set;
}
class Static_SetDamageLootFunction {
static builder(durabilityRange: LootNumberProvider): ConditionalLootFunction_Builder;
static builder(durabilityRange: LootNumberProvider,add: boolean): ConditionalLootFunction_Builder;
static method_634(lootNumberProvider: LootNumberProvider,conditions: LootCondition[]): LootFunction;
static method_35543(lootNumberProvider: LootNumberProvider,bl: boolean,conditions: LootCondition[]): LootFunction;
static LOGGER: Logger;
}

//net.minecraft.loot.function.SetContentsLootFunction
class SetContentsLootFunction extends ConditionalLootFunction{
 validate(reporter: LootTableReporter): void;
 getType(): LootFunctionType;
 process(stack: ItemStack,context: LootContext): ItemStack;
}
class Static_SetContentsLootFunction {
static builder(type: BlockEntityType): SetContentsLootFunction_Builder;
static method_599(lootContext: LootContext,defaultedList: DefaultedList,entry: LootPoolEntry): void;
static method_600(lootContext: LootContext,defaultedList: DefaultedList,choice: LootChoice): void;
}

//net.minecraft.loot.function.FurnaceSmeltLootFunction
class FurnaceSmeltLootFunction extends ConditionalLootFunction{
 getType(): LootFunctionType;
 process(stack: ItemStack,context: LootContext): ItemStack;
}
class Static_FurnaceSmeltLootFunction {
static builder(): ConditionalLootFunction_Builder;
static LOGGER: Logger;
}

//net.minecraft.loot.function.LootingEnchantLootFunction
class LootingEnchantLootFunction extends ConditionalLootFunction{
 getType(): LootFunctionType;
 process(stack: ItemStack,context: LootContext): ItemStack;
 getRequiredParameters(): Set;
}
class Static_LootingEnchantLootFunction {
static builder(countRange: LootNumberProvider): LootingEnchantLootFunction_Builder;
static field_31854: number;
}

//net.minecraft.loot.function.SetLoreLootFunction
class SetLoreLootFunction extends ConditionalLootFunction{
 getType(): LootFunctionType;
 process(stack: ItemStack,context: LootContext): ItemStack;
 getRequiredParameters(): Set;
}
class Static_SetLoreLootFunction {
static builder(): SetLoreLootFunction_Builder;
}

//net.minecraft.loot.function.ApplyBonusLootFunction
class ApplyBonusLootFunction extends ConditionalLootFunction{
 getType(): LootFunctionType;
 process(stack: ItemStack,context: LootContext): ItemStack;
 getRequiredParameters(): Set;
}
class Static_ApplyBonusLootFunction {
static oreDrops(enchantment: Enchantment): ConditionalLootFunction_Builder;
static uniformBonusCount(enchantment: Enchantment): ConditionalLootFunction_Builder;
static uniformBonusCount(enchantment: Enchantment,bonusMultiplier: number): ConditionalLootFunction_Builder;
static method_457(enchantment: Enchantment,conditions: LootCondition[]): LootFunction;
static method_462(enchantment: Enchantment,i: number,conditions: LootCondition[]): LootFunction;
static method_459(enchantment: Enchantment,i: number,f: number,conditions: LootCondition[]): LootFunction;
static method_453(enchantment: Enchantment,conditions: LootCondition[]): LootFunction;
static binomialWithBonusCount(enchantment: Enchantment,probability: number,extra: number): ConditionalLootFunction_Builder;
static FACTORIES: Map;
}

//net.minecraft.loot.function.ExplorationMapLootFunction
class ExplorationMapLootFunction extends ConditionalLootFunction{
 getType(): LootFunctionType;
 process(stack: ItemStack,context: LootContext): ItemStack;
 getRequiredParameters(): Set;
}
class Static_ExplorationMapLootFunction {
static builder(): ExplorationMapLootFunction_Builder;
static LOGGER: Logger;
static DEFAULT_DESTINATION: TagKey;
static MANSION: string;
static DEFAULT_DECORATION: MapIcon_Type;
static field_31851: byte;
static field_31852: number;
static field_31853: boolean;
}

//net.minecraft.loot.function.SetBannerPatternFunction
class SetBannerPatternFunction extends ConditionalLootFunction{
 getType(): LootFunctionType;
}
class Static_SetBannerPatternFunction {
static builder(append: boolean): SetBannerPatternFunction_Builder;
}

//net.minecraft.loot.function.SetStewEffectLootFunction
class SetStewEffectLootFunction extends ConditionalLootFunction{
 getType(): LootFunctionType;
 process(stack: ItemStack,context: LootContext): ItemStack;
 getRequiredParameters(): Set;
}
class Static_SetStewEffectLootFunction {
static builder(): SetStewEffectLootFunction_Builder;
static method_32421(numberProvider: LootNumberProvider): Stream;
}

//net.minecraft.loot.function.LimitCountLootFunction
class LimitCountLootFunction extends ConditionalLootFunction{
 getType(): LootFunctionType;
 process(stack: ItemStack,context: LootContext): ItemStack;
 getRequiredParameters(): Set;
}
class Static_LimitCountLootFunction {
static builder(limit: BoundedIntUnaryOperator): ConditionalLootFunction_Builder;
static method_508(boundedIntUnaryOperator: BoundedIntUnaryOperator,conditions: LootCondition[]): LootFunction;
}

//net.minecraft.loot.function.SetNameLootFunction
class SetNameLootFunction extends ConditionalLootFunction{
 getType(): LootFunctionType;
 process(stack: ItemStack,context: LootContext): ItemStack;
 getRequiredParameters(): Set;
}
class Static_SetNameLootFunction {
static builder(name: Text,target: LootContext_EntityTarget): ConditionalLootFunction_Builder;
static builder(name: Text): ConditionalLootFunction_Builder;
static applySourceEntity(context: LootContext,sourceEntity: LootContext_EntityTarget): UnaryOperator;
static method_16189(serverCommandSource: ServerCommandSource,entity: Entity,textComponent: Text): Text;
static method_16191(textComponent: Text): Text;
static method_35552(text: Text,conditions: LootCondition[]): LootFunction;
static method_35551(text: Text,entityTarget: LootContext_EntityTarget,conditions: LootCondition[]): LootFunction;
static LOGGER: Logger;
}

//net.minecraft.loot.function.SetEnchantmentsLootFunction
class SetEnchantmentsLootFunction extends ConditionalLootFunction{
 getType(): LootFunctionType;
 process(stack: ItemStack,context: LootContext): ItemStack;
 getRequiredParameters(): Set;
}
class Static_SetEnchantmentsLootFunction {
static method_32407(itemStack: ItemStack,enchantment: Enchantment,level: Integer): void;
static method_32412(map: Map,enchantment: Enchantment,level: Integer): void;
static method_32410(object2IntMap: Object2IntMap,lootContext: LootContext,enchantment: Enchantment,numberProvider: LootNumberProvider): void;
static method_32414(map: Map,enchantment: Enchantment,level: Integer): void;
static method_32409(numberProvider: LootNumberProvider): Stream;
static addEnchantmentToMap(map: Map,enchantment: Enchantment,level: number): void;
}

//net.minecraft.loot.function.CopyStateFunction
class CopyStateFunction extends ConditionalLootFunction{
 getType(): LootFunctionType;
 getRequiredParameters(): Set;
}
class Static_CopyStateFunction {
static builder(block: Block): CopyStateFunction_Builder;
static getPropertyName(state: BlockState,property: Property): string;
static method_21895(nbtCompound: NbtCompound,blockState: BlockState,property: Property): void;
}

//net.minecraft.loot.function.FillPlayerHeadLootFunction
class FillPlayerHeadLootFunction extends ConditionalLootFunction{
 getType(): LootFunctionType;
 process(stack: ItemStack,context: LootContext): ItemStack;
 getRequiredParameters(): Set;
}
class Static_FillPlayerHeadLootFunction {
static builder(target: LootContext_EntityTarget): ConditionalLootFunction_Builder;
static method_35523(entityTarget: LootContext_EntityTarget,conditions: LootCondition[]): LootFunction;
}

//net.minecraft.loot.function.CopyNameLootFunction
class CopyNameLootFunction extends ConditionalLootFunction{
 getType(): LootFunctionType;
 process(stack: ItemStack,context: LootContext): ItemStack;
 getRequiredParameters(): Set;
}
class Static_CopyNameLootFunction {
static builder(source: CopyNameLootFunction_Source): ConditionalLootFunction_Builder;
static method_474(source: CopyNameLootFunction_Source,conditions: LootCondition[]): LootFunction;
}

//net.minecraft.loot.function.SetAttributesLootFunction
class SetAttributesLootFunction extends ConditionalLootFunction{
 getType(): LootFunctionType;
 process(stack: ItemStack,context: LootContext): ItemStack;
 getRequiredParameters(): Set;
}
class Static_SetAttributesLootFunction {
static builder(): SetAttributesLootFunction_Builder;
static method_32406(attribute: SetAttributesLootFunction_Attribute): Stream;
static attributeBuilder(name: string,attribute: EntityAttribute,operation: EntityAttributeModifier_Operation,amountRange: LootNumberProvider): SetAttributesLootFunction_AttributeBuilder;
}

//net.minecraft.loot.function.SetCountLootFunction
class SetCountLootFunction extends ConditionalLootFunction{
 getType(): LootFunctionType;
 process(stack: ItemStack,context: LootContext): ItemStack;
 getRequiredParameters(): Set;
}
class Static_SetCountLootFunction {
static builder(countRange: LootNumberProvider,add: boolean): ConditionalLootFunction_Builder;
static builder(countRange: LootNumberProvider): ConditionalLootFunction_Builder;
static method_35541(lootNumberProvider: LootNumberProvider,bl: boolean,conditions: LootCondition[]): LootFunction;
static method_620(lootNumberProvider: LootNumberProvider,conditions: LootCondition[]): LootFunction;
}

//net.minecraft.loot.function.SetInstrumentLootFunction
class SetInstrumentLootFunction extends ConditionalLootFunction{
 getType(): LootFunctionType;
 process(stack: ItemStack,context: LootContext): ItemStack;
}
class Static_SetInstrumentLootFunction {
static builder(options: TagKey): ConditionalLootFunction_Builder;
static method_43743(tagKey: TagKey,conditions: LootCondition[]): LootFunction;
}

//net.minecraft.loot.function.ReferenceLootFunction
class ReferenceLootFunction extends ConditionalLootFunction{
 validate(reporter: LootTableReporter): void;
 getType(): LootFunctionType;
}
class Static_ReferenceLootFunction {
static builder(name: Identifier): ConditionalLootFunction_Builder;
static method_51225(identifier: Identifier,conditions: LootCondition[]): LootFunction;
static LOGGER: Logger;
}

//net.minecraft.loot.function.SetPotionLootFunction
class SetPotionLootFunction extends ConditionalLootFunction{
 getType(): LootFunctionType;
 process(stack: ItemStack,context: LootContext): ItemStack;
}
class Static_SetPotionLootFunction {
static builder(potion: Potion): ConditionalLootFunction_Builder;
static method_38928(potion: Potion,conditions: LootCondition[]): LootFunction;
}

//net.minecraft.loot.function.ExplosionDecayLootFunction
class ExplosionDecayLootFunction extends ConditionalLootFunction{
 getType(): LootFunctionType;
 process(stack: ItemStack,context: LootContext): ItemStack;
}
class Static_ExplosionDecayLootFunction {
static builder(): ConditionalLootFunction_Builder;
}

//net.minecraft.loot.function.CopyNbtLootFunction
class CopyNbtLootFunction extends ConditionalLootFunction{
 getType(): LootFunctionType;
 process(stack: ItemStack,context: LootContext): ItemStack;
 getRequiredParameters(): Set;
}
class Static_CopyNbtLootFunction {
static builder(source: LootNbtProvider): CopyNbtLootFunction_Builder;
static builder(target: LootContext_EntityTarget): CopyNbtLootFunction_Builder;
static method_16846(itemStack: ItemStack,nbtElement: NbtElement,operation: CopyNbtLootFunction_Operation): void;
static parseNbtPath(nbtPath: string): NbtPathArgumentType_NbtPath;
}

//net.minecraft.loot.function.EnchantWithLevelsLootFunction
class EnchantWithLevelsLootFunction extends ConditionalLootFunction{
 getType(): LootFunctionType;
 process(stack: ItemStack,context: LootContext): ItemStack;
 getRequiredParameters(): Set;
}
class Static_EnchantWithLevelsLootFunction {
static builder(range: LootNumberProvider): EnchantWithLevelsLootFunction_Builder;
}

//net.minecraft.client.option.SimpleOption$DoubleSliderCallbacks
class SimpleOption_DoubleSliderCallbacks extends Enum, SimpleOption_SliderCallbacks{
 validate(double_: Double): Optional;
 validate(value: Object): Optional;
 withModifier(sliderProgressValueToValue: DoubleFunction,valueToSliderProgressValue: ToDoubleFunction): SimpleOption_SliderCallbacks;
 codec(): Codec;
 toSliderProgress(value: Object): number;
 toSliderProgress(double_: Double): number;
 toValue(sliderProgress: number): Object;
 toValue(d: number): Double;
}
class Static_SimpleOption_DoubleSliderCallbacks {
static values(): SimpleOption_DoubleSliderCallbacks;
static valueOf(string: string): SimpleOption_DoubleSliderCallbacks;
static method_42418(either: Either): Double;
static method_42421(value: Double): Double;
static method_42419(value: Boolean): Double;
static method_41767(): SimpleOption_DoubleSliderCallbacks;
static INSTANCE: SimpleOption_DoubleSliderCallbacks;
static field_37876: SimpleOption_DoubleSliderCallbacks;
}

//net.minecraft.world.chunk.light.ChunkSkyLightProvider
class ChunkSkyLightProvider extends ChunkLightProvider{
 propagateLight(chunkPos: ChunkPos): void;
 setColumnEnabled(pos: ChunkPos,retainData: boolean): void;
}
class Static_ChunkSkyLightProvider {
static exitsChunkXZ(direction: Direction,localX: number,localZ: number): boolean;
static method_51584(i: number): boolean;
static field_44743: long;
static field_44744: long;
static field_44745: long;
}

//net.minecraft.world.chunk.light.ChunkBlockLightProvider
class ChunkBlockLightProvider extends ChunkLightProvider{
 propagateLight(chunkPos: ChunkPos): void;
}

//net.minecraft.recipe.StonecuttingRecipe
class StonecuttingRecipe extends CuttingRecipe{
 matches(inventory: Inventory,world: World): boolean;
 createIcon(): ItemStack;
}

//net.minecraft.entity.LivingEntity
class LivingEntity extends Entity, Attackable{
 remove(reason: Entity_RemovalReason): void;
 sleep(pos: BlockPos): void;
 isAlive(): boolean;
 getAttributes(): AttributeContainer;
 getDimensions(pose: EntityPose): EntityDimensions;
 tick(): void;
 heal(amount: number): void;
 addStatusEffect(effect: StatusEffectInstance): boolean;
 addStatusEffect(effect: StatusEffectInstance,source: Entity): boolean;
 canSee(entity: Entity): boolean;
 canTakeDamage(): boolean;
 isPartOfGame(): boolean;
 equipStack(slot: EquipmentSlot,stack: ItemStack): void;
 isUndead(): boolean;
 getItemUseTimeLeft(): number;
 getActiveHand(): Hand;
 getMainHandStack(): ItemStack;
 getOffHandStack(): ItemStack;
 getMainArm(): Arm;
 isUsingItem(): boolean;
 getActiveItem(): ItemStack;
 isUsingRiptide(): boolean;
 getHandSwingProgress(tickDelta: number): number;
 isBlocking(): boolean;
 getAttributeInstance(attribute: EntityAttribute): EntityAttributeInstance;
 setNearbySongPlaying(songPosition: BlockPos,playing: boolean): void;
 getDespawnCounter(): number;
 removeStatusEffect(type: StatusEffect): boolean;
 clearStatusEffects(): boolean;
 tryAttack(target: Entity): boolean;
 getActiveStatusEffects(): Map;
 getSoundPitch(): number;
 getItemUseTime(): number;
 canWalkOnFluid(state: FluidState): boolean;
 canFreeze(): boolean;
 getBodyYaw(): number;
 triggerItemPickedUpByEntityCriteria(item: ItemEntity): void;
 enterCombat(): void;
 endCombat(): void;
 onSpawnPacket(packet: EntitySpawnS2CPacket): void;
 getHeadYaw(): number;
 animateDamage(yaw: number): void;
 setHeadYaw(headYaw: number): void;
 onDamaged(damageSource: DamageSource): void;
 handleStatus(status: byte): void;
 lookAt(anchorPoint: EntityAnchorArgumentType_EntityAnchor,target: Vec3d): void;
 setStatusEffect(effect: StatusEffectInstance,source: Entity): void;
 sendPickup(item: Entity,count: number): void;
 stopRiding(): void;
 setAttacking(attacking: PlayerEntity): void;
 getArmorItems(): Iterable;
 isHolding(item: Item): boolean;
 isHolding(predicate: Predicate): boolean;
 getArmor(): number;
 getSleepingDirection(): Direction;
 isDead(): boolean;
 isSleeping(): boolean;
 isClimbing(): boolean;
 isFallFlying(): boolean;
 getStackInHand(hand: Hand): ItemStack;
 stopUsingItem(): void;
 setStackInHand(hand: Hand,stack: ItemStack): void;
 hasStatusEffect(effect: StatusEffect): boolean;
 clearActiveItem(): void;
 teleport(x: number,y: number,z: number,particleEffects: boolean): boolean;
 swingHand(hand: Hand): void;
 swingHand(hand: Hand,fromServerPlayer: boolean): void;
 setSprinting(sprinting: boolean): void;
 wakeUp(): void;
 getHealth(): number;
 getMaxHealth(): number;
 getMovementSpeed(): number;
 damage(source: DamageSource,amount: number): boolean;
 getStatusEffects(): Collection;
 getBrain(): Brain;
 getGroup(): EntityGroup;
 getRoll(): number;
 getLastAttacker(): LivingEntity;
 getDamageTiltYaw(): number;
 getStatusEffect(effect: StatusEffect): StatusEffectInstance;
 canHit(): boolean;
 getAttributeValue(attribute: RegistryEntry): number;
 getAttributeValue(attribute: EntityAttribute): number;
 getEatSound(stack: ItemStack): SoundEvent;
 setJumping(jumping: boolean): void;
 setMovementSpeed(movementSpeed: number): void;
 getStepHeight(): number;
 getAbsorptionAmount(): number;
 updateTrackedHeadRotation(yaw: number,interpolationSteps: number): void;
 updateTrackedPositionAndAngles(x: number,y: number,z: number,yaw: number,pitch: number,interpolationSteps: number,interpolate: boolean): void;
 removeStatusEffectInternal(type: StatusEffect): StatusEffectInstance;
 getBoundingBox(pose: EntityPose): Box;
 getRandom(): Random;
 getYaw(tickDelta: number): number;
 baseTick(): void;
 handleFallDamage(fallDistance: number,damageMultiplier: number,damageSource: DamageSource): boolean;
 pushAwayFrom(entity: Entity): void;
 isPushable(): boolean;
 tickRiding(): void;
 setBodyYaw(bodyYaw: number): void;
 isInsideWall(): boolean;
 isInSwimmingPose(): boolean;
 isGlowing(): boolean;
 canUsePortals(): boolean;
 onTrackedDataSet(data: TrackedData): void;
 shouldRenderName(): boolean;
 getLootTableSeed(): long;
 getLootTable(): Identifier;
 getStackReference(mappedIndex: number): StackReference;
 getEquippedStack(slot: EquipmentSlot): ItemStack;
 kill(): void;
 getScaleFactor(): number;
 isBaby(): boolean;
 sendEquipmentBreakStatus(slot: EquipmentSlot): void;
 setAttacker(attacker: LivingEntity): void;
 canTarget(target: LivingEntity): boolean;
 canTarget(type: EntityType): boolean;
 setHealth(health: number): void;
 updateLimbs(flutter: boolean): void;
 getXpToDrop(): number;
 shouldDropXp(): boolean;
 eatFood(world: World,stack: ItemStack): ItemStack;
 setCurrentHand(hand: Hand): void;
 getAttributeBaseValue(attribute: EntityAttribute): number;
 getAttributeBaseValue(attribute: RegistryEntry): number;
 getAttackDistanceScalingFactor(entity: Entity): number;
 getAttacker(): LivingEntity;
 getProjectileType(stack: ItemStack): ItemStack;
 getPoses(): ImmutableList;
 disablesShield(): boolean;
 canEquip(stack: ItemStack): boolean;
 isTarget(entity: LivingEntity,predicate: TargetPredicate): boolean;
 setAbsorptionAmount(amount: number): void;
 canHaveStatusEffect(effect: StatusEffectInstance): boolean;
 clearSleepingPosition(): void;
 applyFluidMovingSpeed(gravity: number,falling: boolean,motion: Vec3d): Vec3d;
 sendEffectToControllingPlayer(effect: StatusEffectInstance): void;
 getSleepingPosition(): Optional;
 isHoldingOntoLadder(): boolean;
 isAffectedBySplashPotions(): boolean;
 getJumpBoostVelocityModifier(): number;
 shouldDisplaySoulSpeedEffects(): boolean;
 getLastAttackedTime(): number;
 sendToolBreakStatus(hand: Hand): void;
 setSleepingPosition(pos: BlockPos): void;
 tickMovement(): void;
 onEquipStack(slot: EquipmentSlot,oldStack: ItemStack,newStack: ItemStack): void;
 takeKnockback(strength: number,x: number,z: number): void;
 canBreatheInWater(): boolean;
 getLeaningPitch(tickDelta: number): number;
 setDespawnCounter(despawnCounter: number): void;
 hasNoDrag(): boolean;
 getAttacking(): LivingEntity;
 setNoDrag(noDrag: boolean): void;
 getLastAttackTime(): number;
 tiltScreen(deltaX: number,deltaZ: number): void;
 onDeath(damageSource: DamageSource): void;
 blockedByShield(source: DamageSource): boolean;
 damageHelmet(source: DamageSource,amount: number): void;
 damageShield(amount: number): void;
 getArmorVisibility(): number;
 setStuckArrowCount(stuckArrowCount: number): void;
 setStingerCount(stingerCount: number): void;
 getStingerCount(): number;
 getStuckArrowCount(): number;
 getClimbingPos(): Optional;
 getDamageTracker(): DamageTracker;
 getFallSounds(): LivingEntity_FallSounds;
 areItemsDifferent(stack: ItemStack,stack2: ItemStack): boolean;
 hasStackEquipped(slot: EquipmentSlot): boolean;
 applyMovementInput(movementInput: Vec3d,slipperiness: number): Vec3d;
 travel(movementInput: Vec3d): void;
 hurtByWater(): boolean;
 isMobOrPlayer(): boolean;
 writeCustomDataToNbt(nbt: NbtCompound): void;
 readCustomDataFromNbt(nbt: NbtCompound): void;
 getVisibilityBoundingBox(): Box;
 onAttacking(target: Entity): void;
 disableExperienceDropping(): void;
 isExperienceDroppingDisabled(): boolean;
 getRecentDamageSource(): DamageSource;
 getPrimeAdversary(): LivingEntity;
 damageArmor(source: DamageSource,amount: number): void;
 handSwinging: boolean;
 preferredHand: Hand;
 handSwingTicks: number;
 stuckArrowTimer: number;
 stuckStingerTimer: number;
 hurtTime: number;
 maxHurtTime: number;
 deathTime: number;
 lastHandSwingProgress: number;
 handSwingProgress: number;
 limbAnimator: LimbAnimator;
 defaultMaxHealth: number;
 randomLargeSeed: number;
 randomSmallSeed: number;
 bodyYaw: number;
 prevBodyYaw: number;
 headYaw: number;
 prevHeadYaw: number;
 sidewaysSpeed: number;
 upwardSpeed: number;
 forwardSpeed: number;
}
class Static_LivingEntity {
static positionInPortal(pos: Vec3d): Vec3d;
static getStackReference(entity: LivingEntity,slot: EquipmentSlot): StackReference;
static createLivingAttributes(): DefaultAttributeContainer_Builder;
static getEquipmentSlot(slotId: number): EquipmentSlot;
static method_20477(blockPos: BlockPos): Vec3d;
static method_32323(equipmentSlot: EquipmentSlot,stack: ItemStack): boolean;
static getEquipmentBreakStatus(slot: EquipmentSlot): byte;
static containsOnlyAmbientEffects(effects: Collection): boolean;
static method_18393(nbtCompound: NbtCompound,pos: BlockPos): void;
static method_26084(player: LivingEntity): void;
static method_28305(nbtCompound: NbtCompound,brain: NbtElement): void;
static method_24519(item: Item,stack: ItemStack): boolean;
static method_20238(player: LivingEntity): void;
static getPreferredEquipmentSlot(stack: ItemStack): EquipmentSlot;
static LOGGER: Logger;
static SPRINTING_SPEED_BOOST_ID: UUID;
static SOUL_SPEED_BOOST_ID: UUID;
static POWDER_SNOW_SLOW_ID: UUID;
static SPRINTING_SPEED_BOOST: EntityAttributeModifier;
static field_30069: number;
static field_30070: number;
static EQUIPMENT_SLOT_ID: number;
static field_30072: number;
static GLOWING_FLAG: number;
static field_30074: number;
static field_30078: number;
static field_30075: number;
static GRAVITY: number;
static DEATH_TICKS: number;
static FALL_FLYING_FLAG: number;
static field_30080: number;
static field_30081: number;
static field_30063: number;
static field_44874: number;
static MAX_ENTITY_VIEWING_DISTANCE: number;
static USING_ITEM_FLAG: number;
static OFF_HAND_ACTIVE_FLAG: number;
static USING_RIPTIDE_FLAG: number;
static LIVING_FLAGS: TrackedData;
static HEALTH: TrackedData;
static POTION_SWIRLS_COLOR: TrackedData;
static POTION_SWIRLS_AMBIENT: TrackedData;
static STUCK_ARROW_COUNT: TrackedData;
static STINGER_COUNT: TrackedData;
static SLEEPING_POSITION: TrackedData;
static field_30067: number;
static SLEEPING_DIMENSIONS: EntityDimensions;
static BABY_SCALE_FACTOR: number;
static field_42636: number;
}

//net.minecraft.world.chunk.light.SkyLightStorage$Data
class SkyLightStorage_Data extends ChunkToNibbleArrayMap{
 copy(): SkyLightStorage_Data;
 copy(): ChunkToNibbleArrayMap;
}

//net.minecraft.world.chunk.light.BlockLightStorage$Data
class BlockLightStorage_Data extends ChunkToNibbleArrayMap{
 copy(): BlockLightStorage_Data;
 copy(): ChunkToNibbleArrayMap;
}

//net.minecraft.client.report.log.ReceivedMessage$ChatMessage
class ReceivedMessage_ChatMessage extends Record, ReceivedMessage{
 profile(): GameProfile;
 equals(object: Object): boolean;
 toString(): string;
 hashCode(): number;
 message(): SignedMessage;
 getType(): ChatLogEntry_Type;
 getContent(): Text;
 trustStatus(): MessageTrustStatus;
 getNarration(): Text;
 isSentFrom(uuid: UUID): boolean;
 getHeadingText(): Text;
 getSenderUuid(): UUID;
}
class Static_ReceivedMessage_ChatMessage {
static method_46543(instance: RecordCodecBuilder_Instance): App;
static CHAT_MESSAGE_CODEC: Codec;
static DATE_TIME_FORMATTER: DateTimeFormatter;
}

//net.minecraft.client.report.log.ReceivedMessage$GameMessage
class ReceivedMessage_GameMessage extends Record, ReceivedMessage{
 equals(object: Object): boolean;
 toString(): string;
 hashCode(): number;
 message(): Text;
 timestamp(): Instant;
 getType(): ChatLogEntry_Type;
 getContent(): Text;
 isSentFrom(uuid: UUID): boolean;
}
class Static_ReceivedMessage_GameMessage {
static method_46544(instance: RecordCodecBuilder_Instance): App;
static GAME_MESSAGE_CODEC: Codec;
}

//net.minecraft.entity.vehicle.CommandBlockMinecartEntity$CommandExecutor
class CommandBlockMinecartEntity_CommandExecutor extends CommandBlockExecutor{
 getSource(): ServerCommandSource;
 isEditable(): boolean;
 getWorld(): ServerWorld;
 markDirty(): void;
 getPos(): Vec3d;
 getMinecart(): CommandBlockMinecartEntity;
}

//net.minecraft.block.entity.CommandBlockBlockEntity$1


//net.minecraft.entity.ai.pathing.SwimNavigation
class SwimNavigation extends EntityNavigation{
 setCanSwim(canSwim: boolean): void;
 isValidPosition(pos: BlockPos): boolean;
}

//net.minecraft.entity.ai.pathing.MobNavigation
class MobNavigation extends EntityNavigation{
 setCanWalkOverFences(canWalkOverFences: boolean): void;
 setCanEnterOpenDoors(canEnterOpenDoors: boolean): void;
 canEnterOpenDoors(): boolean;
 findPathTo(entity: Entity,distance: number): Path;
 findPathTo(target: BlockPos,distance: number): Path;
 setAvoidSunlight(avoidSunlight: boolean): void;
 method_35140(): boolean;
 setCanPathThroughDoors(canPathThroughDoors: boolean): void;
}

//net.minecraft.entity.ai.pathing.AmphibiousSwimNavigation
class AmphibiousSwimNavigation extends EntityNavigation{
 setCanSwim(canSwim: boolean): void;
 isValidPosition(pos: BlockPos): boolean;
}

//net.minecraft.entity.ai.pathing.BirdNavigation
class BirdNavigation extends EntityNavigation{
 tick(): void;
 setCanEnterOpenDoors(canEnterOpenDoors: boolean): void;
 canEnterOpenDoors(): boolean;
 isValidPosition(pos: BlockPos): boolean;
 findPathTo(entity: Entity,distance: number): Path;
 method_35129(): boolean;
 setCanPathThroughDoors(canPathThroughDoors: boolean): void;
}

//net.minecraft.client.font.GlyphAtlasTexture
class GlyphAtlasTexture extends AbstractTexture, DynamicTexture{
 load(manager: ResourceManager): void;
 close(): void;
 save(id: Identifier,path: Path): void;
 getGlyphRenderer(glyph: RenderableGlyph): GlyphRenderer;
}
class Static_GlyphAtlasTexture {
static method_51640(color: number): number;
static SLOT_LENGTH: number;
}

//net.minecraft.client.texture.SpriteAtlasTexture
class SpriteAtlasTexture extends AbstractTexture, DynamicTexture, TextureTickListener{
 load(manager: ResourceManager): void;
 clear(): void;
 getId(): Identifier;
 save(id: Identifier,path: Path): void;
 tick(): void;
 upload(stitchResult: SpriteLoader_StitchResult): void;
 getMaxTextureSize(): number;
 getSprite(id: Identifier): Sprite;
 applyTextureFilter(data: SpriteLoader_StitchResult): void;
 tickAnimatedSprites(): void;
}
class Static_SpriteAtlasTexture {
static dumpAtlasInfos(path: Path,id: string,sprites: Map): void;
static LOGGER: Logger;
static BLOCK_ATLAS_TEXTURE: Identifier;
static PARTICLE_ATLAS_TEXTURE: Identifier;
}

//net.minecraft.client.texture.NativeImageBackedTexture
class NativeImageBackedTexture extends AbstractTexture, DynamicTexture{
 load(manager: ResourceManager): void;
 close(): void;
 save(id: Identifier,path: Path): void;
 upload(): void;
 setImage(image: NativeImage): void;
 getImage(): NativeImage;
}
class Static_NativeImageBackedTexture {
static LOGGER: Logger;
}

//net.minecraft.world.gen.ChainedBlockSource
class ChainedBlockSource extends Record, ChunkNoiseSampler_BlockStateSampler{
 equals(object: Object): boolean;
 toString(): string;
 hashCode(): number;
 sample(pos: DensityFunction_NoisePos): BlockState;
 samplers(): List;
}

//net.minecraft.util.math.floatprovider.ConstantFloatProvider
class ConstantFloatProvider extends FloatProvider{
 get(random: Random): number;
 toString(): string;
 getValue(): number;
 getType(): FloatProviderType;
 getMin(): number;
 getMax(): number;
}
class Static_ConstantFloatProvider {
static create(value: number): ConstantFloatProvider;
static method_33909(provider: ConstantFloatProvider): Either;
static method_33910(either: Either): ConstantFloatProvider;
static method_33912(provider: ConstantFloatProvider): ConstantFloatProvider;
static method_33913(provider: ConstantFloatProvider): Float;
static method_33911(instance: RecordCodecBuilder_Instance): App;
static ZERO: ConstantFloatProvider;
static CODEC: Codec;
}

//net.minecraft.util.math.floatprovider.TrapezoidFloatProvider
class TrapezoidFloatProvider extends FloatProvider{
 get(random: Random): number;
 toString(): string;
 getType(): FloatProviderType;
 getMin(): number;
 getMax(): number;
}
class Static_TrapezoidFloatProvider {
static create(min: number,max: number,plateau: number): TrapezoidFloatProvider;
static method_33930(provider: TrapezoidFloatProvider): Float;
static method_33928(instance: RecordCodecBuilder_Instance): App;
static method_33927(provider: TrapezoidFloatProvider): DataResult;
static method_49473(trapezoidFloatProvider: TrapezoidFloatProvider): string;
static method_33931(provider: TrapezoidFloatProvider): Float;
static method_33929(provider: TrapezoidFloatProvider): Float;
static method_49472(trapezoidFloatProvider: TrapezoidFloatProvider): string;
static CODEC: Codec;
}

//net.minecraft.util.math.floatprovider.UniformFloatProvider
class UniformFloatProvider extends FloatProvider{
 get(random: Random): number;
 toString(): string;
 getType(): FloatProviderType;
 getMin(): number;
 getMax(): number;
}
class Static_UniformFloatProvider {
static create(min: number,max: number): UniformFloatProvider;
static method_33936(provider: UniformFloatProvider): Float;
static method_49474(uniformFloatProvider: UniformFloatProvider): string;
static method_33935(provider: UniformFloatProvider): Float;
static method_33932(provider: UniformFloatProvider): DataResult;
static method_33933(instance: RecordCodecBuilder_Instance): App;
static CODEC: Codec;
}

//net.minecraft.util.math.floatprovider.ClampedNormalFloatProvider
class ClampedNormalFloatProvider extends FloatProvider{
 get(random: Random): number;
 toString(): string;
 getType(): FloatProviderType;
 getMin(): number;
 getMax(): number;
}
class Static_ClampedNormalFloatProvider {
static get(random: Random,mean: number,deviation: number,min: number,max: number): number;
static create(mean: number,deviation: number,min: number,max: number): ClampedNormalFloatProvider;
static method_49466(clampedNormalFloatProvider: ClampedNormalFloatProvider): string;
static method_33901(provider: ClampedNormalFloatProvider): DataResult;
static method_33904(provider: ClampedNormalFloatProvider): Float;
static method_33902(instance: RecordCodecBuilder_Instance): App;
static method_33906(provider: ClampedNormalFloatProvider): Float;
static method_33905(provider: ClampedNormalFloatProvider): Float;
static method_33907(provider: ClampedNormalFloatProvider): Float;
static CODEC: Codec;
}

//net.minecraft.entity.decoration.DisplayEntity$FloatLerperImpl
class DisplayEntity_FloatLerperImpl extends Record, DisplayEntity_FloatLerper{
 equals(object: Object): boolean;
 toString(): string;
 hashCode(): number;
 current(): number;
 previous(): number;
 lerp(delta: number): number;
}

//net.minecraft.loot.entry.LeafEntry$Builder
class LeafEntry_Builder extends LootPoolEntry_Builder, LootFunctionConsumingBuilder{
 apply(fun: LootFunction_Builder): LootFunctionConsumingBuilder;
 apply(builder: LootFunction_Builder): LeafEntry_Builder;
 weight(weight: number): LeafEntry_Builder;
 quality(quality: number): LeafEntry_Builder;
 getThisFunctionConsumingBuilder(): LootFunctionConsumingBuilder;
}

//net.minecraft.client.gui.widget.ElementListWidget$Entry
class ElementListWidget_Entry extends EntryListWidget_Entry, ParentElement{
 selectableChildren(): List;
 setFocused(focused: boolean): void;
 setFocused(focused: Element): void;
 isMouseOver(mouseX: number,mouseY: number): boolean;
 setDragging(dragging: boolean): void;
 isFocused(): boolean;
 getNavigationPath(navigation: GuiNavigation,index: number): GuiNavigationPath;
 getNavigationPath(navigation: GuiNavigation): GuiNavigationPath;
 getFocused(): Element;
 isDragging(): boolean;
 drawBorder(context: DrawContext,index: number,y: number,x: number,entryWidth: number,entryHeight: number,mouseX: number,mouseY: number,hovered: boolean,tickDelta: number): void;
 mouseClicked(mouseX: number,mouseY: number,button: number): boolean;
}

//net.minecraft.client.render.entity.model.IllagerEntityModel
class IllagerEntityModel extends SinglePartEntityModel, ModelWithArms, ModelWithHead{
 setAngles(entity: Entity,limbAngle: number,limbDistance: number,animationProgress: number,headYaw: number,headPitch: number): void;
 setAngles(illagerEntity: IllagerEntity,f: number,g: number,h: number,i: number,j: number): void;
 setArmAngle(arm: Arm,matrices: MatrixStack): void;
 getPart(): ModelPart;
 getHat(): ModelPart;
 getHead(): ModelPart;
}
class Static_IllagerEntityModel {
static getTexturedModelData(): TexturedModelData;
}

//net.minecraft.client.render.entity.model.VexEntityModel
class VexEntityModel extends SinglePartEntityModel, ModelWithArms{
 setAngles(entity: Entity,limbAngle: number,limbDistance: number,animationProgress: number,headYaw: number,headPitch: number): void;
 setAngles(vexEntity: VexEntity,f: number,g: number,h: number,i: number,j: number): void;
 setArmAngle(arm: Arm,matrices: MatrixStack): void;
 getPart(): ModelPart;
}
class Static_VexEntityModel {
static getTexturedModelData(): TexturedModelData;
}

//net.minecraft.client.render.entity.model.AllayEntityModel
class AllayEntityModel extends SinglePartEntityModel, ModelWithArms{
 setAngles(entity: Entity,limbAngle: number,limbDistance: number,animationProgress: number,headYaw: number,headPitch: number): void;
 setAngles(allayEntity: AllayEntity,f: number,g: number,h: number,i: number,j: number): void;
 setArmAngle(arm: Arm,matrices: MatrixStack): void;
 getPart(): ModelPart;
}
class Static_AllayEntityModel {
static getTexturedModelData(): TexturedModelData;
static field_38999: number;
static field_39000: number;
static field_39001: number;
}

//net.minecraft.client.render.entity.model.BipedEntityModel
class BipedEntityModel extends AnimalModel, ModelWithArms, ModelWithHead{
 animateModel(livingEntity: LivingEntity,f: number,g: number,h: number): void;
 animateModel(entity: Entity,limbAngle: number,limbDistance: number,tickDelta: number): void;
 setAngles(livingEntity: LivingEntity,f: number,g: number,h: number,i: number,j: number): void;
 setAngles(entity: Entity,limbAngle: number,limbDistance: number,animationProgress: number,headYaw: number,headPitch: number): void;
 setArmAngle(arm: Arm,matrices: MatrixStack): void;
 setVisible(visible: boolean): void;
 copyBipedStateTo(model: BipedEntityModel): void;
 getHead(): ModelPart;
 head: ModelPart;
 hat: ModelPart;
 body: ModelPart;
 rightArm: ModelPart;
 leftArm: ModelPart;
 rightLeg: ModelPart;
 leftLeg: ModelPart;
 leftArmPose: BipedEntityModel_ArmPose;
 rightArmPose: BipedEntityModel_ArmPose;
 sneaking: boolean;
 leaningPitch: number;
}
class Static_BipedEntityModel {
static getModelData(dilation: Dilation,pivotOffsetY: number): ModelData;
static field_32505: number;
static field_32506: number;
static field_42513: number;
static field_42512: number;
static SPYGLASS_ARM_YAW_OFFSET: number;
static SPYGLASS_ARM_PITCH_OFFSET: number;
static SPYGLASS_SNEAKING_ARM_PITCH_OFFSET: number;
static field_39069: number;
static field_39070: number;
}

//net.minecraft.client.gl.EffectShaderStage
class EffectShaderStage extends ShaderStage{
 release(): void;
 attachTo(program: EffectShaderProgram): void;
}
class Static_EffectShaderStage {
static createFromResource(type: ShaderStage_Type,name: string,stream: InputStream,domain: string): EffectShaderStage;
static LOADER: GlImportProcessor;
}

//net.minecraft.world.gen.densityfunction.DensityFunction$UnblendedNoisePos
class DensityFunction_UnblendedNoisePos extends Record, DensityFunction_NoisePos{
 equals(object: Object): boolean;
 toString(): string;
 hashCode(): number;
 blockX(): number;
 blockY(): number;
 blockZ(): number;
}

//net.minecraft.client.render.entity.model.VillagerResemblingModel
class VillagerResemblingModel extends SinglePartEntityModel, ModelWithHead, ModelWithHat{
 setAngles(entity: Entity,limbAngle: number,limbDistance: number,animationProgress: number,headYaw: number,headPitch: number): void;
 getPart(): ModelPart;
 setHatVisible(visible: boolean): void;
 getHead(): ModelPart;
}
class Static_VillagerResemblingModel {
static getModelData(): ModelData;
}

//net.minecraft.client.render.entity.model.ZombieVillagerEntityModel
class ZombieVillagerEntityModel extends BipedEntityModel, ModelWithHat{
 setAngles(zombieEntity: ZombieEntity,f: number,g: number,h: number,i: number,j: number): void;
 setAngles(livingEntity: LivingEntity,f: number,g: number,h: number,i: number,j: number): void;
 setAngles(entity: Entity,limbAngle: number,limbDistance: number,animationProgress: number,headYaw: number,headPitch: number): void;
 setHatVisible(visible: boolean): void;
}
class Static_ZombieVillagerEntityModel {
static getTexturedModelData(): TexturedModelData;
static getArmorTexturedModelData(dilation: Dilation): TexturedModelData;
}

//net.minecraft.world.timer.FunctionTagTimerCallback$Serializer
class FunctionTagTimerCallback_Serializer extends TimerCallback_Serializer{
 deserialize(nbt: NbtCompound): TimerCallback;
 deserialize(nbtCompound: NbtCompound): FunctionTagTimerCallback;
 serialize(nbtCompound: NbtCompound,functionTagTimerCallback: FunctionTagTimerCallback): void;
 serialize(nbt: NbtCompound,callback: TimerCallback): void;
}

//net.minecraft.world.timer.FunctionTimerCallback$Serializer
class FunctionTimerCallback_Serializer extends TimerCallback_Serializer{
 deserialize(nbt: NbtCompound): TimerCallback;
 deserialize(nbtCompound: NbtCompound): FunctionTimerCallback;
 serialize(nbtCompound: NbtCompound,functionTimerCallback: FunctionTimerCallback): void;
 serialize(nbt: NbtCompound,callback: TimerCallback): void;
}

//net.minecraft.village.raid.RaidManager
class RaidManager extends PersistentState{
 tick(): void;
 getRaidAt(pos: BlockPos,searchDistance: number): Raid;
 getRaid(id: number): Raid;
 startRaid(player: ServerPlayerEntity): Raid;
 writeNbt(nbt: NbtCompound): NbtCompound;
}
class Static_RaidManager {
static fromNbt(world: ServerWorld,nbt: NbtCompound): RaidManager;
static isValidRaiderFor(raider: RaiderEntity,raid: Raid): boolean;
static method_44012(poiType: RegistryEntry): boolean;
static nameFor(dimensionTypeEntry: RegistryEntry): string;
static RAIDS: string;
}

//net.minecraft.command.DataCommandStorage$PersistentState
class DataCommandStorage_PersistentState extends PersistentState{
 get(name: string): NbtCompound;
 set(name: string,nbt: NbtCompound): void;
 writeNbt(nbt: NbtCompound): NbtCompound;
 getIds(namespace: string): Stream;
}
class Static_DataCommandStorage_PersistentState {
static method_22551(string: string,key: string): Identifier;
static method_22553(nbtCompound: NbtCompound,key: string,value: NbtCompound): void;
static CONTENTS_KEY: string;
}

//net.minecraft.item.map.MapState
class MapState extends PersistentState{
 update(player: PlayerEntity,stack: ItemStack): void;
 copy(): MapState;
 setColor(x: number,z: number,color: byte): void;
 getPlayerMarkerPacket(id: number,player: PlayerEntity): Packet;
 writeNbt(nbt: NbtCompound): NbtCompound;
 getIcons(): Iterable;
 replaceIcons(icons: List): void;
 addBanner(world: WorldAccess,pos: BlockPos): boolean;
 zoomOut(zoomOutScale: number): MapState;
 removeBanner(world: BlockView,x: number,z: number): void;
 getBanners(): Collection;
 removeFrame(pos: BlockPos,id: number): void;
 putColor(x: number,z: number,color: byte): boolean;
 getPlayerSyncData(player: PlayerEntity): MapState_PlayerUpdateTracker;
 hasMonumentIcon(): boolean;
 iconCountNotLessThan(iconCount: number): boolean;
 centerX: number;
 centerZ: number;
 dimension: RegistryKey;
 scale: byte;
 colors: byte[];
 locked: boolean;
}
class Static_MapState {
static of(scale: byte,locked: boolean,dimension: RegistryKey): MapState;
static of(centerX: number,centerZ: number,scale: byte,showIcons: boolean,unlimitedTracking: boolean,dimension: RegistryKey): MapState;
static fromNbt(nbt: NbtCompound): MapState;
static method_29009(nbtCompound: NbtCompound): IllegalArgumentException;
static method_29008(nbtCompound: NbtCompound,nbtElement: NbtElement): void;
static addDecorationsNbt(stack: ItemStack,pos: BlockPos,id: string,type: MapIcon_Type): void;
static LOGGER: Logger;
static field_31832: number;
static field_31833: number;
static MAX_SCALE: number;
static MAX_ICONS: number;
}

//net.minecraft.world.IdCountsState
class IdCountsState extends PersistentState{
 getNextMapId(): number;
 writeNbt(nbt: NbtCompound): NbtCompound;
}
class Static_IdCountsState {
static fromNbt(nbt: NbtCompound): IdCountsState;
static IDCOUNTS_KEY: string;
}

//net.minecraft.world.ChunkUpdateState
class ChunkUpdateState extends PersistentState{
 add(pos: long): void;
 contains(pos: long): boolean;
 getAll(): LongSet;
 isRemaining(pos: long): boolean;
 markResolved(pos: long): void;
 writeNbt(nbt: NbtCompound): NbtCompound;
}
class Static_ChunkUpdateState {
static fromNbt(nbt: NbtCompound): ChunkUpdateState;
static REMAINING_KEY: string;
static ALL_KEY: string;
}

//net.minecraft.scoreboard.ScoreboardState
class ScoreboardState extends PersistentState{
 readNbt(nbt: NbtCompound): ScoreboardState;
 writeNbt(nbt: NbtCompound): NbtCompound;
}
class Static_ScoreboardState {
static SCOREBOARD_KEY: string;
}

//net.minecraft.util.math.random.RandomSequencesState
class RandomSequencesState extends PersistentState{
 getOrCreate(id: Identifier): Random;
 writeNbt(nbt: NbtCompound): NbtCompound;
}
class Static_RandomSequencesState {
static fromNbt(seed: long,nbt: NbtCompound): RandomSequencesState;
static method_51844(nbtCompound: NbtCompound,id: Identifier,sequence: RandomSequence): void;
static LOGGER: Logger;
}

//net.minecraft.world.ForcedChunkState
class ForcedChunkState extends PersistentState{
 getChunks(): LongSet;
 writeNbt(nbt: NbtCompound): NbtCompound;
}
class Static_ForcedChunkState {
static fromNbt(nbt: NbtCompound): ForcedChunkState;
static CHUNKS_KEY: string;
static FORCED_KEY: string;
}

//net.minecraft.entity.decoration.DisplayEntity$AffineTransformationInterpolator
class DisplayEntity_AffineTransformationInterpolator extends Record, DisplayEntity_AbstractInterpolator{
 equals(object: Object): boolean;
 toString(): string;
 hashCode(): number;
 current(): AffineTransformation;
 previous(): AffineTransformation;
 interpolate(f: number): AffineTransformation;
 interpolate(delta: number): Object;
}

//net.minecraft.world.gen.YOffset$Fixed
class YOffset_Fixed extends Record, YOffset{
 equals(object: Object): boolean;
 toString(): string;
 hashCode(): number;
 y(): number;
 getY(context: HeightContext): number;
}
class Static_YOffset_Fixed {
static CODEC: Codec;
}

//net.minecraft.world.gen.YOffset$BelowTop
class YOffset_BelowTop extends Record, YOffset{
 equals(object: Object): boolean;
 toString(): string;
 hashCode(): number;
 offset(): number;
 getY(context: HeightContext): number;
}
class Static_YOffset_BelowTop {
static CODEC: Codec;
}

//net.minecraft.world.gen.YOffset$AboveBottom
class YOffset_AboveBottom extends Record, YOffset{
 equals(object: Object): boolean;
 toString(): string;
 hashCode(): number;
 offset(): number;
 getY(context: HeightContext): number;
}
class Static_YOffset_AboveBottom {
static CODEC: Codec;
}

//net.minecraft.datafixer.fix.AddTrappedChestFix$ListFixer
class AddTrappedChestFix_ListFixer extends LeavesFix_ListFixer{
 isTarget(index: number): boolean;
}

//net.minecraft.datafixer.fix.LeavesFix$LeavesLogFixer
class LeavesFix_LeavesLogFixer extends LeavesFix_ListFixer{
 isLeaf(i: number): boolean;
 isLog(i: number): boolean;
}
class Static_LeavesFix_LeavesLogFixer {
static PERSISTENT: string;
static DECAYABLE: string;
static DISTANCE: string;
}

//net.minecraft.registry.DynamicRegistryManager$Immutablized
class DynamicRegistryManager_Immutablized extends DynamicRegistryManager_ImmutableImpl, DynamicRegistryManager_Immutable{
}

//net.minecraft.block.CommandBlock
class CommandBlock extends BlockWithEntity, OperatorBlock{
 rotate(state: BlockState,rotation: BlockRotation): BlockState;
 hasComparatorOutput(state: BlockState): boolean;
 getComparatorOutput(state: BlockState,world: World,pos: BlockPos): number;
 scheduledTick(state: BlockState,world: ServerWorld,pos: BlockPos,random: Random): void;
 mirror(state: BlockState,mirror: BlockMirror): BlockState;
 neighborUpdate(state: BlockState,world: World,pos: BlockPos,sourceBlock: Block,sourcePos: BlockPos,notify: boolean): void;
 onUse(state: BlockState,world: World,pos: BlockPos,player: PlayerEntity,hand: Hand,hit: BlockHitResult): ActionResult;
 createBlockEntity(pos: BlockPos,state: BlockState): BlockEntity;
 getRenderType(state: BlockState): BlockRenderType;
 getPlacementState(ctx: ItemPlacementContext): BlockState;
 onPlaced(world: World,pos: BlockPos,state: BlockState,placer: LivingEntity,itemStack: ItemStack): void;
}
class Static_CommandBlock {
static executeCommandChain(world: World,pos: BlockPos,facing: Direction): void;
static LOGGER: Logger;
static FACING: DirectionProperty;
static CONDITIONAL: BooleanProperty;
}

//net.minecraft.block.StructureBlock
class StructureBlock extends BlockWithEntity, OperatorBlock{
 neighborUpdate(state: BlockState,world: World,pos: BlockPos,sourceBlock: Block,sourcePos: BlockPos,notify: boolean): void;
 onUse(state: BlockState,world: World,pos: BlockPos,player: PlayerEntity,hand: Hand,hit: BlockHitResult): ActionResult;
 createBlockEntity(pos: BlockPos,state: BlockState): BlockEntity;
 getRenderType(state: BlockState): BlockRenderType;
 onPlaced(world: World,pos: BlockPos,state: BlockState,placer: LivingEntity,itemStack: ItemStack): void;
}
class Static_StructureBlock {
static MODE: EnumProperty;
}

//net.minecraft.client.gui.widget.AlwaysSelectedEntryListWidget$Entry
class AlwaysSelectedEntryListWidget_Entry extends EntryListWidget_Entry, Narratable{
 appendNarrations(builder: NarrationMessageBuilder): void;
 setFocused(focused: boolean): void;
 isMouseOver(mouseX: number,mouseY: number): boolean;
 isFocused(): boolean;
 getNarration(): Text;
 drawBorder(context: DrawContext,index: number,y: number,x: number,entryWidth: number,entryHeight: number,mouseX: number,mouseY: number,hovered: boolean,tickDelta: number): void;
}

//net.minecraft.scoreboard.ServerScoreboard
class ServerScoreboard extends Scoreboard{
 getSlot(objective: ScoreboardObjective): number;
 updateExistingObjective(objective: ScoreboardObjective): void;
 createChangePackets(objective: ScoreboardObjective): List;
 setObjectiveSlot(slot: number,objective: ScoreboardObjective): void;
 addPlayerToTeam(playerName: string,team: Team): boolean;
 updateObjective(objective: ScoreboardObjective): void;
 updatePlayerScore(playerName: string): void;
 updatePlayerScore(playerName: string,objective: ScoreboardObjective): void;
 updateRemovedTeam(team: Team): void;
 updateScore(score: ScoreboardPlayerScore): void;
 removePlayerFromTeam(playerName: string,team: Team): void;
 updateScoreboardTeam(team: Team): void;
 updateScoreboardTeamAndPlayers(team: Team): void;
 updateRemovedObjective(objective: ScoreboardObjective): void;
 addUpdateListener(listener: Runnable): void;
 createState(): ScoreboardState;
 stateFromNbt(nbt: NbtCompound): ScoreboardState;
 addScoreboardObjective(objective: ScoreboardObjective): void;
 createRemovePackets(objective: ScoreboardObjective): List;
 removeScoreboardObjective(objective: ScoreboardObjective): void;
}

//net.minecraft.block.entity.ChestBlockEntity$1


//net.minecraft.block.entity.EnderChestBlockEntity$1


//net.minecraft.block.entity.BarrelBlockEntity$1


//net.minecraft.fluid.EmptyFluid
class EmptyFluid extends Fluid{
 getLevel(state: FluidState): number;
 getHeight(state: FluidState,world: BlockView,pos: BlockPos): number;
 getHeight(state: FluidState): number;
 getShape(state: FluidState,world: BlockView,pos: BlockPos): VoxelShape;
 canBeReplacedWith(state: FluidState,world: BlockView,pos: BlockPos,fluid: Fluid,direction: Direction): boolean;
 getTickRate(world: WorldView): number;
 getBucketItem(): Item;
 getVelocity(world: BlockView,pos: BlockPos,state: FluidState): Vec3d;
 isStill(state: FluidState): boolean;
}

//net.minecraft.fluid.FlowableFluid
class FlowableFluid extends Fluid{
 getLevel(state: FluidState): number;
 getHeight(state: FluidState): number;
 getHeight(state: FluidState,world: BlockView,pos: BlockPos): number;
 getShape(state: FluidState,world: BlockView,pos: BlockPos): VoxelShape;
 onScheduledTick(world: World,pos: BlockPos,state: FluidState): void;
 getVelocity(world: BlockView,pos: BlockPos,state: FluidState): Vec3d;
 getFlowing(level: number,falling: boolean): FluidState;
 getFlowing(): Fluid;
 getStill(falling: boolean): FluidState;
 getStill(): Fluid;
}
class Static_FlowableFluid {
static method_15734(world: World,blockPos: BlockPos,s: short): Pair;
static packXZOffset(from: BlockPos,to: BlockPos): short;
static method_15755(worldView: WorldView,blockPos: BlockPos,s: short): Pair;
static isFluidAboveEqual(state: FluidState,world: BlockView,pos: BlockPos): boolean;
static method_15735(): Object2ByteLinkedOpenHashMap;
static method_17773(blockView: BlockView,blockPos: BlockPos,state2: FluidState): VoxelShape;
static getBlockStateLevel(state: FluidState): number;
static FALLING: BooleanProperty;
static LEVEL: IntProperty;
static field_31726: number;
static field_15901: ThreadLocal;
}

//net.minecraft.data.server.recipe.BundleRecipeProvider
class BundleRecipeProvider extends RecipeProvider{
}

//net.minecraft.data.server.recipe.VanillaRecipeProvider
class VanillaRecipeProvider extends RecipeProvider{
 run(writer: DataWriter): CompletableFuture;
}
class Static_VanillaRecipeProvider {
static getTrimSmithingTemplateMap(): Map;
static method_51695(consumer: Consumer,template: Item,recipeId: Identifier): void;
static method_51693(item: Item): Identifier;
static COAL_ORES: ImmutableList;
static IRON_ORES: ImmutableList;
static COPPER_ORES: ImmutableList;
static GOLD_ORES: ImmutableList;
static DIAMOND_ORES: ImmutableList;
static LAPIS_ORES: ImmutableList;
static REDSTONE_ORES: ImmutableList;
static EMERALD_ORES: ImmutableList;
}

//net.minecraft.client.sound.PositionedSoundInstance
class PositionedSoundInstance extends AbstractSoundInstance{
}
class Static_PositionedSoundInstance {
static record(sound: SoundEvent,pos: Vec3d): PositionedSoundInstance;
static music(sound: SoundEvent): PositionedSoundInstance;
static ambient(sound: SoundEvent,random: Random,x: number,y: number,z: number): PositionedSoundInstance;
static ambient(sound: SoundEvent,pitch: number,volume: number): PositionedSoundInstance;
static ambient(sound: SoundEvent): PositionedSoundInstance;
static master(sound: SoundEvent,pitch: number,volume: number): PositionedSoundInstance;
static master(sound: RegistryEntry,pitch: number): PositionedSoundInstance;
static master(sound: SoundEvent,pitch: number): PositionedSoundInstance;
}

//net.minecraft.client.sound.MovingSoundInstance
class MovingSoundInstance extends AbstractSoundInstance, TickableSoundInstance{
 isDone(): boolean;
}

//net.minecraft.recipe.MapExtendingRecipe
class MapExtendingRecipe extends ShapedRecipe{
 matches(inventory: Inventory,world: World): boolean;
 matches(recipeInputInventory: RecipeInputInventory,world: World): boolean;
 isIgnoredInRecipeBook(): boolean;
 craft(inventory: Inventory,registryManager: DynamicRegistryManager): ItemStack;
 craft(recipeInputInventory: RecipeInputInventory,dynamicRegistryManager: DynamicRegistryManager): ItemStack;
 getSerializer(): RecipeSerializer;
}
class Static_MapExtendingRecipe {
static findFilledMap(inventory: RecipeInputInventory): ItemStack;
}

//net.minecraft.world.EmptyBlockView
class EmptyBlockView extends Enum, BlockView{
 getHeight(): number;
 getBlockEntity(pos: BlockPos): BlockEntity;
 getFluidState(pos: BlockPos): FluidState;
 getBlockState(pos: BlockPos): BlockState;
 getBottomY(): number;
}
class Static_EmptyBlockView {
static values(): EmptyBlockView[];
static valueOf(string: string): EmptyBlockView;
static method_36692(): EmptyBlockView[];
static INSTANCE: EmptyBlockView;
static field_12295: EmptyBlockView[];
}

//net.minecraft.loot.function.ExplorationMapLootFunction$Serializer
class ExplorationMapLootFunction_Serializer extends ConditionalLootFunction_Serializer{
 fromJson(json: JsonObject,context: JsonDeserializationContext,conditions: LootCondition[]): ConditionalLootFunction;
 fromJson(jsonObject: JsonObject,jsonDeserializationContext: JsonDeserializationContext,lootConditions: LootCondition[]): ExplorationMapLootFunction;
 toJson(json: JsonObject,object: Object,context: JsonSerializationContext): void;
 toJson(jsonObject: JsonObject,conditionalLootFunction: ConditionalLootFunction,jsonSerializationContext: JsonSerializationContext): void;
 toJson(jsonObject: JsonObject,explorationMapLootFunction: ExplorationMapLootFunction,jsonSerializationContext: JsonSerializationContext): void;
}
class Static_ExplorationMapLootFunction_Serializer {
static getDestination(json: JsonObject): TagKey;
}

//net.minecraft.loot.function.CopyStateFunction$Serializer
class CopyStateFunction_Serializer extends ConditionalLootFunction_Serializer{
 fromJson(json: JsonObject,context: JsonDeserializationContext,conditions: LootCondition[]): ConditionalLootFunction;
 fromJson(jsonObject: JsonObject,jsonDeserializationContext: JsonDeserializationContext,lootConditions: LootCondition[]): CopyStateFunction;
 toJson(json: JsonObject,object: Object,context: JsonSerializationContext): void;
 toJson(jsonObject: JsonObject,conditionalLootFunction: ConditionalLootFunction,jsonSerializationContext: JsonSerializationContext): void;
 toJson(jsonObject: JsonObject,copyStateFunction: CopyStateFunction,jsonSerializationContext: JsonSerializationContext): void;
}
class Static_CopyStateFunction_Serializer {
static method_21902(set: Set,stateManager: StateManager,property: JsonElement): void;
static method_21903(identifier: Identifier): IllegalArgumentException;
static method_21899(jsonArray: JsonArray,property: Property): void;
}

//net.minecraft.loot.function.ReferenceLootFunction$Serializer
class ReferenceLootFunction_Serializer extends ConditionalLootFunction_Serializer{
 fromJson(json: JsonObject,context: JsonDeserializationContext,conditions: LootCondition[]): ConditionalLootFunction;
 fromJson(jsonObject: JsonObject,jsonDeserializationContext: JsonDeserializationContext,lootConditions: LootCondition[]): ReferenceLootFunction;
 toJson(jsonObject: JsonObject,referenceLootFunction: ReferenceLootFunction,jsonSerializationContext: JsonSerializationContext): void;
 toJson(jsonObject: JsonObject,conditionalLootFunction: ConditionalLootFunction,jsonSerializationContext: JsonSerializationContext): void;
 toJson(json: JsonObject,object: Object,context: JsonSerializationContext): void;
}

//net.minecraft.loot.function.SetDamageLootFunction$Serializer
class SetDamageLootFunction_Serializer extends ConditionalLootFunction_Serializer{
 fromJson(json: JsonObject,context: JsonDeserializationContext,conditions: LootCondition[]): ConditionalLootFunction;
 fromJson(jsonObject: JsonObject,jsonDeserializationContext: JsonDeserializationContext,lootConditions: LootCondition[]): SetDamageLootFunction;
 toJson(jsonObject: JsonObject,setDamageLootFunction: SetDamageLootFunction,jsonSerializationContext: JsonSerializationContext): void;
 toJson(jsonObject: JsonObject,conditionalLootFunction: ConditionalLootFunction,jsonSerializationContext: JsonSerializationContext): void;
 toJson(json: JsonObject,object: Object,context: JsonSerializationContext): void;
}

//net.minecraft.loot.function.SetAttributesLootFunction$Serializer
class SetAttributesLootFunction_Serializer extends ConditionalLootFunction_Serializer{
 fromJson(json: JsonObject,context: JsonDeserializationContext,conditions: LootCondition[]): ConditionalLootFunction;
 fromJson(jsonObject: JsonObject,jsonDeserializationContext: JsonDeserializationContext,lootConditions: LootCondition[]): SetAttributesLootFunction;
 toJson(jsonObject: JsonObject,setAttributesLootFunction: SetAttributesLootFunction,jsonSerializationContext: JsonSerializationContext): void;
 toJson(jsonObject: JsonObject,conditionalLootFunction: ConditionalLootFunction,jsonSerializationContext: JsonSerializationContext): void;
 toJson(json: JsonObject,object: Object,context: JsonSerializationContext): void;
}

//net.minecraft.loot.function.SetInstrumentLootFunction$Serializer
class SetInstrumentLootFunction_Serializer extends ConditionalLootFunction_Serializer{
 fromJson(json: JsonObject,context: JsonDeserializationContext,conditions: LootCondition[]): ConditionalLootFunction;
 fromJson(jsonObject: JsonObject,jsonDeserializationContext: JsonDeserializationContext,lootConditions: LootCondition[]): SetInstrumentLootFunction;
 toJson(jsonObject: JsonObject,setInstrumentLootFunction: SetInstrumentLootFunction,jsonSerializationContext: JsonSerializationContext): void;
 toJson(jsonObject: JsonObject,conditionalLootFunction: ConditionalLootFunction,jsonSerializationContext: JsonSerializationContext): void;
 toJson(json: JsonObject,object: Object,context: JsonSerializationContext): void;
}

//net.minecraft.loot.function.SetLoreLootFunction$Serializer
class SetLoreLootFunction_Serializer extends ConditionalLootFunction_Serializer{
 fromJson(json: JsonObject,context: JsonDeserializationContext,conditions: LootCondition[]): ConditionalLootFunction;
 fromJson(jsonObject: JsonObject,jsonDeserializationContext: JsonDeserializationContext,lootConditions: LootCondition[]): SetLoreLootFunction;
 toJson(jsonObject: JsonObject,setLoreLootFunction: SetLoreLootFunction,jsonSerializationContext: JsonSerializationContext): void;
 toJson(jsonObject: JsonObject,conditionalLootFunction: ConditionalLootFunction,jsonSerializationContext: JsonSerializationContext): void;
 toJson(json: JsonObject,object: Object,context: JsonSerializationContext): void;
}

//net.minecraft.loot.function.SetNbtLootFunction$Serializer
class SetNbtLootFunction_Serializer extends ConditionalLootFunction_Serializer{
 fromJson(json: JsonObject,context: JsonDeserializationContext,conditions: LootCondition[]): ConditionalLootFunction;
 fromJson(jsonObject: JsonObject,jsonDeserializationContext: JsonDeserializationContext,lootConditions: LootCondition[]): SetNbtLootFunction;
 toJson(jsonObject: JsonObject,setNbtLootFunction: SetNbtLootFunction,jsonSerializationContext: JsonSerializationContext): void;
 toJson(jsonObject: JsonObject,conditionalLootFunction: ConditionalLootFunction,jsonSerializationContext: JsonSerializationContext): void;
 toJson(json: JsonObject,object: Object,context: JsonSerializationContext): void;
}

//net.minecraft.loot.function.LimitCountLootFunction$Serializer
class LimitCountLootFunction_Serializer extends ConditionalLootFunction_Serializer{
 fromJson(json: JsonObject,context: JsonDeserializationContext,conditions: LootCondition[]): ConditionalLootFunction;
 fromJson(jsonObject: JsonObject,jsonDeserializationContext: JsonDeserializationContext,lootConditions: LootCondition[]): LimitCountLootFunction;
 toJson(jsonObject: JsonObject,limitCountLootFunction: LimitCountLootFunction,jsonSerializationContext: JsonSerializationContext): void;
 toJson(jsonObject: JsonObject,conditionalLootFunction: ConditionalLootFunction,jsonSerializationContext: JsonSerializationContext): void;
 toJson(json: JsonObject,object: Object,context: JsonSerializationContext): void;
}

//net.minecraft.loot.function.SetBannerPatternFunction$Serializer
class SetBannerPatternFunction_Serializer extends ConditionalLootFunction_Serializer{
 fromJson(json: JsonObject,context: JsonDeserializationContext,conditions: LootCondition[]): ConditionalLootFunction;
 fromJson(jsonObject: JsonObject,jsonDeserializationContext: JsonDeserializationContext,lootConditions: LootCondition[]): SetBannerPatternFunction;
 toJson(json: JsonObject,object: Object,context: JsonSerializationContext): void;
 toJson(jsonObject: JsonObject,conditionalLootFunction: ConditionalLootFunction,jsonSerializationContext: JsonSerializationContext): void;
 toJson(jsonObject: JsonObject,setBannerPatternFunction: SetBannerPatternFunction,jsonSerializationContext: JsonSerializationContext): void;
}
class Static_SetBannerPatternFunction_Serializer {
static method_31935(jsonArray: JsonArray,pair: Pair): void;
static method_43742(pair: Pair): JsonSyntaxException;
}

//net.minecraft.loot.function.SetEnchantmentsLootFunction$Serializer
class SetEnchantmentsLootFunction_Serializer extends ConditionalLootFunction_Serializer{
 fromJson(json: JsonObject,context: JsonDeserializationContext,conditions: LootCondition[]): ConditionalLootFunction;
 fromJson(jsonObject: JsonObject,jsonDeserializationContext: JsonDeserializationContext,lootConditions: LootCondition[]): SetEnchantmentsLootFunction;
 toJson(json: JsonObject,object: Object,context: JsonSerializationContext): void;
 toJson(jsonObject: JsonObject,conditionalLootFunction: ConditionalLootFunction,jsonSerializationContext: JsonSerializationContext): void;
 toJson(jsonObject: JsonObject,setEnchantmentsLootFunction: SetEnchantmentsLootFunction,jsonSerializationContext: JsonSerializationContext): void;
}
class Static_SetEnchantmentsLootFunction_Serializer {
static method_32418(string: string): JsonSyntaxException;
static method_32416(jsonObject: JsonObject,jsonSerializationContext: JsonSerializationContext,enchantment: Enchantment,numberProvider: LootNumberProvider): void;
}

//net.minecraft.loot.function.SetNameLootFunction$Serializer
class SetNameLootFunction_Serializer extends ConditionalLootFunction_Serializer{
 fromJson(json: JsonObject,context: JsonDeserializationContext,conditions: LootCondition[]): ConditionalLootFunction;
 fromJson(jsonObject: JsonObject,jsonDeserializationContext: JsonDeserializationContext,lootConditions: LootCondition[]): SetNameLootFunction;
 toJson(jsonObject: JsonObject,setNameLootFunction: SetNameLootFunction,jsonSerializationContext: JsonSerializationContext): void;
 toJson(jsonObject: JsonObject,conditionalLootFunction: ConditionalLootFunction,jsonSerializationContext: JsonSerializationContext): void;
 toJson(json: JsonObject,object: Object,context: JsonSerializationContext): void;
}

//net.minecraft.loot.function.FurnaceSmeltLootFunction$Serializer
class FurnaceSmeltLootFunction_Serializer extends ConditionalLootFunction_Serializer{
 fromJson(jsonObject: JsonObject,jsonDeserializationContext: JsonDeserializationContext,lootConditions: LootCondition[]): FurnaceSmeltLootFunction;
 fromJson(json: JsonObject,context: JsonDeserializationContext,conditions: LootCondition[]): ConditionalLootFunction;
}

//net.minecraft.loot.function.ExplosionDecayLootFunction$Serializer
class ExplosionDecayLootFunction_Serializer extends ConditionalLootFunction_Serializer{
 fromJson(jsonObject: JsonObject,jsonDeserializationContext: JsonDeserializationContext,lootConditions: LootCondition[]): ExplosionDecayLootFunction;
 fromJson(json: JsonObject,context: JsonDeserializationContext,conditions: LootCondition[]): ConditionalLootFunction;
}

//net.minecraft.loot.function.CopyNameLootFunction$Serializer
class CopyNameLootFunction_Serializer extends ConditionalLootFunction_Serializer{
 fromJson(json: JsonObject,context: JsonDeserializationContext,conditions: LootCondition[]): ConditionalLootFunction;
 fromJson(jsonObject: JsonObject,jsonDeserializationContext: JsonDeserializationContext,lootConditions: LootCondition[]): CopyNameLootFunction;
 toJson(jsonObject: JsonObject,copyNameLootFunction: CopyNameLootFunction,jsonSerializationContext: JsonSerializationContext): void;
 toJson(jsonObject: JsonObject,conditionalLootFunction: ConditionalLootFunction,jsonSerializationContext: JsonSerializationContext): void;
 toJson(json: JsonObject,object: Object,context: JsonSerializationContext): void;
}

//net.minecraft.loot.function.ApplyBonusLootFunction$Serializer
class ApplyBonusLootFunction_Serializer extends ConditionalLootFunction_Serializer{
 fromJson(json: JsonObject,context: JsonDeserializationContext,conditions: LootCondition[]): ConditionalLootFunction;
 fromJson(jsonObject: JsonObject,jsonDeserializationContext: JsonDeserializationContext,lootConditions: LootCondition[]): ApplyBonusLootFunction;
 toJson(json: JsonObject,object: Object,context: JsonSerializationContext): void;
 toJson(jsonObject: JsonObject,conditionalLootFunction: ConditionalLootFunction,jsonSerializationContext: JsonSerializationContext): void;
 toJson(jsonObject: JsonObject,applyBonusLootFunction: ApplyBonusLootFunction,jsonSerializationContext: JsonSerializationContext): void;
}
class Static_ApplyBonusLootFunction_Serializer {
static method_17932(identifier: Identifier): JsonParseException;
}

//net.minecraft.loot.function.SetCountLootFunction$Serializer
class SetCountLootFunction_Serializer extends ConditionalLootFunction_Serializer{
 fromJson(json: JsonObject,context: JsonDeserializationContext,conditions: LootCondition[]): ConditionalLootFunction;
 fromJson(jsonObject: JsonObject,jsonDeserializationContext: JsonDeserializationContext,lootConditions: LootCondition[]): SetCountLootFunction;
 toJson(jsonObject: JsonObject,setCountLootFunction: SetCountLootFunction,jsonSerializationContext: JsonSerializationContext): void;
 toJson(jsonObject: JsonObject,conditionalLootFunction: ConditionalLootFunction,jsonSerializationContext: JsonSerializationContext): void;
 toJson(json: JsonObject,object: Object,context: JsonSerializationContext): void;
}

//net.minecraft.loot.function.EnchantWithLevelsLootFunction$Serializer
class EnchantWithLevelsLootFunction_Serializer extends ConditionalLootFunction_Serializer{
 fromJson(json: JsonObject,context: JsonDeserializationContext,conditions: LootCondition[]): ConditionalLootFunction;
 fromJson(jsonObject: JsonObject,jsonDeserializationContext: JsonDeserializationContext,lootConditions: LootCondition[]): EnchantWithLevelsLootFunction;
 toJson(jsonObject: JsonObject,enchantWithLevelsLootFunction: EnchantWithLevelsLootFunction,jsonSerializationContext: JsonSerializationContext): void;
 toJson(jsonObject: JsonObject,conditionalLootFunction: ConditionalLootFunction,jsonSerializationContext: JsonSerializationContext): void;
 toJson(json: JsonObject,object: Object,context: JsonSerializationContext): void;
}

//net.minecraft.loot.function.FillPlayerHeadLootFunction$Serializer
class FillPlayerHeadLootFunction_Serializer extends ConditionalLootFunction_Serializer{
 fromJson(json: JsonObject,context: JsonDeserializationContext,conditions: LootCondition[]): ConditionalLootFunction;
 fromJson(jsonObject: JsonObject,jsonDeserializationContext: JsonDeserializationContext,lootConditions: LootCondition[]): FillPlayerHeadLootFunction;
 toJson(jsonObject: JsonObject,fillPlayerHeadLootFunction: FillPlayerHeadLootFunction,jsonSerializationContext: JsonSerializationContext): void;
 toJson(jsonObject: JsonObject,conditionalLootFunction: ConditionalLootFunction,jsonSerializationContext: JsonSerializationContext): void;
 toJson(json: JsonObject,object: Object,context: JsonSerializationContext): void;
}

//net.minecraft.loot.function.SetLootTableLootFunction$Serializer
class SetLootTableLootFunction_Serializer extends ConditionalLootFunction_Serializer{
 fromJson(json: JsonObject,context: JsonDeserializationContext,conditions: LootCondition[]): ConditionalLootFunction;
 fromJson(jsonObject: JsonObject,jsonDeserializationContext: JsonDeserializationContext,lootConditions: LootCondition[]): SetLootTableLootFunction;
 toJson(json: JsonObject,object: Object,context: JsonSerializationContext): void;
 toJson(jsonObject: JsonObject,conditionalLootFunction: ConditionalLootFunction,jsonSerializationContext: JsonSerializationContext): void;
 toJson(jsonObject: JsonObject,setLootTableLootFunction: SetLootTableLootFunction,jsonSerializationContext: JsonSerializationContext): void;
}
class Static_SetLootTableLootFunction_Serializer {
static method_38498(identifier: Identifier): JsonSyntaxException;
}

//net.minecraft.loot.function.SetStewEffectLootFunction$Serializer
class SetStewEffectLootFunction_Serializer extends ConditionalLootFunction_Serializer{
 fromJson(json: JsonObject,context: JsonDeserializationContext,conditions: LootCondition[]): ConditionalLootFunction;
 fromJson(jsonObject: JsonObject,jsonDeserializationContext: JsonDeserializationContext,lootConditions: LootCondition[]): SetStewEffectLootFunction;
 toJson(json: JsonObject,object: Object,context: JsonSerializationContext): void;
 toJson(jsonObject: JsonObject,conditionalLootFunction: ConditionalLootFunction,jsonSerializationContext: JsonSerializationContext): void;
 toJson(jsonObject: JsonObject,setStewEffectLootFunction: SetStewEffectLootFunction,jsonSerializationContext: JsonSerializationContext): void;
}
class Static_SetStewEffectLootFunction_Serializer {
static method_17935(string: string): JsonSyntaxException;
}

//net.minecraft.loot.function.SetPotionLootFunction$Serializer
class SetPotionLootFunction_Serializer extends ConditionalLootFunction_Serializer{
 fromJson(json: JsonObject,context: JsonDeserializationContext,conditions: LootCondition[]): ConditionalLootFunction;
 fromJson(jsonObject: JsonObject,jsonDeserializationContext: JsonDeserializationContext,lootConditions: LootCondition[]): SetPotionLootFunction;
 toJson(json: JsonObject,object: Object,context: JsonSerializationContext): void;
 toJson(jsonObject: JsonObject,conditionalLootFunction: ConditionalLootFunction,jsonSerializationContext: JsonSerializationContext): void;
 toJson(jsonObject: JsonObject,setPotionLootFunction: SetPotionLootFunction,jsonSerializationContext: JsonSerializationContext): void;
}
class Static_SetPotionLootFunction_Serializer {
static method_38931(string: string): JsonSyntaxException;
}

//net.minecraft.loot.function.LootingEnchantLootFunction$Serializer
class LootingEnchantLootFunction_Serializer extends ConditionalLootFunction_Serializer{
 fromJson(json: JsonObject,context: JsonDeserializationContext,conditions: LootCondition[]): ConditionalLootFunction;
 fromJson(jsonObject: JsonObject,jsonDeserializationContext: JsonDeserializationContext,lootConditions: LootCondition[]): LootingEnchantLootFunction;
 toJson(jsonObject: JsonObject,lootingEnchantLootFunction: LootingEnchantLootFunction,jsonSerializationContext: JsonSerializationContext): void;
 toJson(jsonObject: JsonObject,conditionalLootFunction: ConditionalLootFunction,jsonSerializationContext: JsonSerializationContext): void;
 toJson(json: JsonObject,object: Object,context: JsonSerializationContext): void;
}

//net.minecraft.loot.function.SetContentsLootFunction$Serializer
class SetContentsLootFunction_Serializer extends ConditionalLootFunction_Serializer{
 fromJson(json: JsonObject,context: JsonDeserializationContext,conditions: LootCondition[]): ConditionalLootFunction;
 fromJson(jsonObject: JsonObject,jsonDeserializationContext: JsonDeserializationContext,lootConditions: LootCondition[]): SetContentsLootFunction;
 toJson(json: JsonObject,object: Object,context: JsonSerializationContext): void;
 toJson(jsonObject: JsonObject,conditionalLootFunction: ConditionalLootFunction,jsonSerializationContext: JsonSerializationContext): void;
 toJson(jsonObject: JsonObject,setContentsLootFunction: SetContentsLootFunction,jsonSerializationContext: JsonSerializationContext): void;
}
class Static_SetContentsLootFunction_Serializer {
static method_38497(identifier: Identifier): JsonSyntaxException;
}

//net.minecraft.loot.function.CopyNbtLootFunction$Serializer
class CopyNbtLootFunction_Serializer extends ConditionalLootFunction_Serializer{
 fromJson(json: JsonObject,context: JsonDeserializationContext,conditions: LootCondition[]): ConditionalLootFunction;
 fromJson(jsonObject: JsonObject,jsonDeserializationContext: JsonDeserializationContext,lootConditions: LootCondition[]): CopyNbtLootFunction;
 toJson(jsonObject: JsonObject,copyNbtLootFunction: CopyNbtLootFunction,jsonSerializationContext: JsonSerializationContext): void;
 toJson(jsonObject: JsonObject,conditionalLootFunction: ConditionalLootFunction,jsonSerializationContext: JsonSerializationContext): void;
 toJson(json: JsonObject,object: Object,context: JsonSerializationContext): void;
}

//net.minecraft.loot.function.EnchantRandomlyLootFunction$Serializer
class EnchantRandomlyLootFunction_Serializer extends ConditionalLootFunction_Serializer{
 fromJson(json: JsonObject,context: JsonDeserializationContext,conditions: LootCondition[]): ConditionalLootFunction;
 fromJson(jsonObject: JsonObject,jsonDeserializationContext: JsonDeserializationContext,lootConditions: LootCondition[]): EnchantRandomlyLootFunction;
 toJson(json: JsonObject,object: Object,context: JsonSerializationContext): void;
 toJson(jsonObject: JsonObject,conditionalLootFunction: ConditionalLootFunction,jsonSerializationContext: JsonSerializationContext): void;
 toJson(jsonObject: JsonObject,enchantRandomlyLootFunction: EnchantRandomlyLootFunction,jsonSerializationContext: JsonSerializationContext): void;
}
class Static_EnchantRandomlyLootFunction_Serializer {
static method_17933(string: string): JsonSyntaxException;
}

//net.minecraft.particle.DefaultParticleType
class DefaultParticleType extends ParticleType, ParticleEffect{
 write(buf: PacketByteBuf): void;
 getType(): DefaultParticleType;
 getType(): ParticleType;
 asString(): string;
 getCodec(): Codec;
}
class Static_DefaultParticleType {
static PARAMETER_FACTORY: ParticleEffect_Factory;
}

//net.minecraft.particle.ParticleTypes$1


//net.minecraft.item.ItemPlacementContext
class ItemPlacementContext extends ItemUsageContext{
 getBlockPos(): BlockPos;
 canPlace(): boolean;
 getPlayerLookDirection(): Direction;
 getVerticalPlayerLookDirection(): Direction;
 getPlacementDirections(): Direction[];
 canReplaceExisting(): boolean;
}
class Static_ItemPlacementContext {
static offset(context: ItemPlacementContext,pos: BlockPos,side: Direction): ItemPlacementContext;
}

//net.minecraft.particle.DustParticleEffect
class DustParticleEffect extends AbstractDustParticleEffect{
 getType(): ParticleType;
}
class Static_DustParticleEffect {
static method_33115(instance: RecordCodecBuilder_Instance): App;
static method_33117(effect: DustParticleEffect): Vector3f;
static method_33116(effect: DustParticleEffect): Float;
static RED: Vector3f;
static DEFAULT: DustParticleEffect;
static CODEC: Codec;
static PARAMETERS_FACTORY: ParticleEffect_Factory;
}

//net.minecraft.particle.DustColorTransitionParticleEffect
class DustColorTransitionParticleEffect extends AbstractDustParticleEffect{
 write(buf: PacketByteBuf): void;
 getType(): ParticleType;
 asString(): string;
 getFromColor(): Vector3f;
 getToColor(): Vector3f;
}
class Static_DustColorTransitionParticleEffect {
static method_33107(instance: RecordCodecBuilder_Instance): App;
static method_33111(effect: DustColorTransitionParticleEffect): Vector3f;
static method_33108(effect: DustColorTransitionParticleEffect): Float;
static method_33109(effect: DustColorTransitionParticleEffect): Vector3f;
static SCULK_BLUE: Vector3f;
static DEFAULT: DustColorTransitionParticleEffect;
static CODEC: Codec;
static FACTORY: ParticleEffect_Factory;
}

//net.minecraft.server.network.ServerRecipeBook
class ServerRecipeBook extends RecipeBook{
 sendInitRecipesPacket(player: ServerPlayerEntity): void;
 toNbt(): NbtCompound;
 unlockRecipes(recipes: Collection,player: ServerPlayerEntity): number;
 lockRecipes(recipes: Collection,player: ServerPlayerEntity): number;
 readNbt(nbt: NbtCompound,recipeManager: RecipeManager): void;
}
class Static_ServerRecipeBook {
static RECIPE_BOOK_KEY: string;
static LOGGER: Logger;
}

//net.minecraft.client.recipebook.ClientRecipeBook
class ClientRecipeBook extends RecipeBook{
 reload(recipes: Iterable,registryManager: DynamicRegistryManager): void;
 getOrderedResults(): List;
 getResultsForGroup(category: RecipeBookGroup): List;
}
class Static_ClientRecipeBook {
static toGroupedMap(recipes: Iterable): Map;
static method_30284(group: RecipeBookGroup): List;
static method_30282(group: RecipeBookGroup): List;
static method_30279(map: Map,dynamicRegistryManager: DynamicRegistryManager,builder: ImmutableList_Builder,recipeBookGroup: RecipeBookGroup,list: List): void;
static method_30281(map: Map,group: RecipeBookGroup,searchGroups: List): void;
static getGroupForRecipe(recipe: Recipe): RecipeBookGroup;
static method_29969(recipe: Recipe): Object;
static method_48464(dynamicRegistryManager: DynamicRegistryManager,recipes: List): RecipeResultCollection;
static method_30280(map: Map,searchGroup: RecipeBookGroup): Stream;
static LOGGER: Logger;
}

//net.minecraft.block.FlowerBlock
class FlowerBlock extends PlantBlock, SuspiciousStewIngredient{
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 getEffectInStewDuration(): number;
 getEffectInStew(): StatusEffect;
}
class Static_FlowerBlock {
static field_31094: number;
static SHAPE: VoxelShape;
}

//net.minecraft.client.gui.screen.advancement.AdvancementsScreen
class AdvancementsScreen extends Screen, ClientAdvancementManager_Listener{
 removed(): void;
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
 selectTab(advancement: Advancement): void;
 setProgress(advancement: Advancement,progress: AdvancementProgress): void;
 keyPressed(keyCode: number,scanCode: number,modifiers: number): boolean;
 mouseClicked(mouseX: number,mouseY: number,button: number): boolean;
 mouseDragged(mouseX: number,mouseY: number,button: number,deltaX: number,deltaY: number): boolean;
 onDependentRemoved(dependent: Advancement): void;
 onClear(): void;
 onRootRemoved(root: Advancement): void;
 onRootAdded(root: Advancement): void;
 onDependentAdded(dependent: Advancement): void;
 getAdvancementWidget(advancement: Advancement): AdvancementWidget;
 drawWindow(context: DrawContext,x: number,y: number): void;
}
class Static_AdvancementsScreen {
static WINDOW_TEXTURE: Identifier;
static TABS_TEXTURE: Identifier;
static WINDOW_WIDTH: number;
static WINDOW_HEIGHT: number;
static PAGE_OFFSET_X: number;
static PAGE_OFFSET_Y: number;
static PAGE_WIDTH: number;
static PAGE_HEIGHT: number;
static TITLE_OFFSET_X: number;
static TITLE_OFFSET_Y: number;
static field_32302: number;
static field_32303: number;
static field_32304: number;
static field_32305: number;
static SAD_LABEL_TEXT: Text;
static EMPTY_TEXT: Text;
static ADVANCEMENTS_TEXT: Text;
}

//net.minecraft.registry.Registry$2


//net.minecraft.command.CommandRegistryAccess$2$1


//net.minecraft.data.server.recipe.ShapedRecipeJsonBuilder
class ShapedRecipeJsonBuilder extends RecipeJsonBuilder, CraftingRecipeJsonBuilder{
 group(string: string): ShapedRecipeJsonBuilder;
 group(group: string): CraftingRecipeJsonBuilder;
 input(c: Character,itemProvider: ItemConvertible): ShapedRecipeJsonBuilder;
 input(c: Character,ingredient: Ingredient): ShapedRecipeJsonBuilder;
 input(c: Character,tag: TagKey): ShapedRecipeJsonBuilder;
 pattern(patternStr: string): ShapedRecipeJsonBuilder;
 showNotification(showNotification: boolean): ShapedRecipeJsonBuilder;
 getOutputItem(): Item;
 criterion(name: string,conditions: CriterionConditions): CraftingRecipeJsonBuilder;
 criterion(string: string,criterionConditions: CriterionConditions): ShapedRecipeJsonBuilder;
 offerTo(exporter: Consumer,recipeId: Identifier): void;
}
class Static_ShapedRecipeJsonBuilder {
static create(category: RecipeCategory,output: ItemConvertible,count: number): ShapedRecipeJsonBuilder;
static create(category: RecipeCategory,output: ItemConvertible): ShapedRecipeJsonBuilder;
}

//net.minecraft.data.server.recipe.ShapelessRecipeJsonBuilder
class ShapelessRecipeJsonBuilder extends RecipeJsonBuilder, CraftingRecipeJsonBuilder{
 group(string: string): ShapelessRecipeJsonBuilder;
 group(group: string): CraftingRecipeJsonBuilder;
 input(ingredient: Ingredient,size: number): ShapelessRecipeJsonBuilder;
 input(itemProvider: ItemConvertible): ShapelessRecipeJsonBuilder;
 input(itemProvider: ItemConvertible,size: number): ShapelessRecipeJsonBuilder;
 input(tag: TagKey): ShapelessRecipeJsonBuilder;
 input(ingredient: Ingredient): ShapelessRecipeJsonBuilder;
 getOutputItem(): Item;
 criterion(name: string,conditions: CriterionConditions): CraftingRecipeJsonBuilder;
 criterion(string: string,criterionConditions: CriterionConditions): ShapelessRecipeJsonBuilder;
 offerTo(exporter: Consumer,recipeId: Identifier): void;
}
class Static_ShapelessRecipeJsonBuilder {
static create(category: RecipeCategory,output: ItemConvertible): ShapelessRecipeJsonBuilder;
static create(category: RecipeCategory,output: ItemConvertible,count: number): ShapelessRecipeJsonBuilder;
}

//net.minecraft.client.font.EmptyGlyphRenderer
class EmptyGlyphRenderer extends GlyphRenderer{
 draw(italic: boolean,x: number,y: number,matrix: Matrix4f,vertexConsumer: VertexConsumer,red: number,green: number,blue: number,alpha: number,light: number): void;
}
class Static_EmptyGlyphRenderer {
static INSTANCE: EmptyGlyphRenderer;
}

//net.minecraft.network.NetworkState
class NetworkState extends Enum, PacketBundleHandler_BundlerGetter{
 getId(): number;
 getBundler(side: NetworkSide): PacketBundleHandler;
 getPacketIdToPacketMap(side: NetworkSide): Int2ObjectMap;
 getPacketHandler(side: NetworkSide,packetId: number,buf: PacketByteBuf): Packet;
 getPacketId(side: NetworkSide,packet: Packet): number;
}
class Static_NetworkState {
static values(): NetworkState[];
static valueOf(string: string): NetworkState;
static byId(id: number): NetworkState;
static getPacketHandlerState(handler: Packet): NetworkState;
static createPacketHandlerInitializer(): NetworkState_PacketHandlerInitializer;
static method_22306(networkState: NetworkState,packetClass: Class): void;
static method_39497(clazz: Int2ObjectMap,packetId: Class,integer: Integer): void;
static method_36943(): NetworkState[];
static method_22307(networkState: NetworkState,side: NetworkSide,handler: NetworkState_PacketHandler): void;
static HANDSHAKING: NetworkState;
static PLAY: NetworkState;
static STATUS: NetworkState;
static LOGIN: NetworkState;
static field_41866: number;
static NULL_PACKET_ID_OR_MIN_STATE_ID: number;
static MAX_STATE_ID: number;
static STATES: NetworkState[];
static HANDLER_STATE_MAP: Map;
static field_11694: NetworkState[];
}

//net.minecraft.network.packet.s2c.play.BundleS2CPacket
class BundleS2CPacket extends BundlePacket{
 apply(clientPlayPacketListener: ClientPlayPacketListener): void;
 apply(listener: PacketListener): void;
}

//net.minecraft.loot.condition.AllOfLootCondition$Serializer
class AllOfLootCondition_Serializer extends AlternativeLootCondition_Serializer{
}

//net.minecraft.loot.condition.AnyOfLootCondition$Serializer
class AnyOfLootCondition_Serializer extends AlternativeLootCondition_Serializer{
}

//net.minecraft.block.entity.AbstractFurnaceBlockEntity
class AbstractFurnaceBlockEntity extends LockableContainerBlockEntity, SidedInventory, RecipeUnlocker, RecipeInputProvider{
 clear(): void;
 isEmpty(): boolean;
 size(): number;
 getStack(slot: number): ItemStack;
 isValid(slot: number,stack: ItemStack): boolean;
 setStack(slot: number,stack: ItemStack): void;
 removeStack(slot: number,amount: number): ItemStack;
 removeStack(slot: number): ItemStack;
 canInsert(slot: number,stack: ItemStack,dir: Direction): boolean;
 readNbt(nbt: NbtCompound): void;
 canPlayerUse(player: PlayerEntity): boolean;
 provideRecipeInputs(finder: RecipeMatcher): void;
 setLastRecipe(recipe: Recipe): void;
 getLastRecipe(): Recipe;
 unlockLastRecipe(player: PlayerEntity,ingredients: List): void;
 canExtract(slot: number,stack: ItemStack,dir: Direction): boolean;
 getAvailableSlots(side: Direction): number[];
 getRecipesUsedAndDropExperience(world: ServerWorld,pos: Vec3d): List;
 dropExperienceForRecipesUsed(player: ServerPlayerEntity): void;
}
class Static_AbstractFurnaceBlockEntity {
static tick(world: World,pos: BlockPos,state: BlockState,blockEntity: AbstractFurnaceBlockEntity): void;
static getCookTime(world: World,furnace: AbstractFurnaceBlockEntity): number;
static dropExperience(world: ServerWorld,pos: Vec3d,multiplier: number,experience: number): void;
static canAcceptRecipeOutput(registryManager: DynamicRegistryManager,recipe: Recipe,slots: DefaultedList,count: number): boolean;
static createFuelTimeMap(): Map;
static isNonFlammableWood(item: Item): boolean;
static addFuel(fuelTimes: Map,tag: TagKey,fuelTime: number): void;
static addFuel(fuelTimes: Map,item: ItemConvertible,fuelTime: number): void;
static craftRecipe(registryManager: DynamicRegistryManager,recipe: Recipe,slots: DefaultedList,count: number): boolean;
static method_24431(nbtCompound: NbtCompound,identifier: Identifier,count: Integer): void;
static canUseAsFuel(stack: ItemStack): boolean;
static method_17761(list: List,serverWorld: ServerWorld,vec3d: Vec3d,entry: Object2IntMap_Entry,recipe: Recipe): void;
static INPUT_SLOT_INDEX: number;
static FUEL_SLOT_INDEX: number;
static OUTPUT_SLOT_INDEX: number;
static BURN_TIME_PROPERTY_INDEX: number;
static TOP_SLOTS: number[];
static BOTTOM_SLOTS: number[];
static SIDE_SLOTS: number[];
static FUEL_TIME_PROPERTY_INDEX: number;
static COOK_TIME_PROPERTY_INDEX: number;
static COOK_TIME_TOTAL_PROPERTY_INDEX: number;
static PROPERTY_COUNT: number;
static DEFAULT_COOK_TIME: number;
static field_31295: number;
}

//net.minecraft.world.RaycastContext$ShapeType
class RaycastContext_ShapeType extends Enum, RaycastContext_ShapeProvider{
 get(blockState: BlockState,blockView: BlockView,blockPos: BlockPos,shapeContext: ShapeContext): VoxelShape;
}
class Static_RaycastContext_ShapeType {
static values(): RaycastContext_ShapeType;
static valueOf(string: string): RaycastContext_ShapeType;
static method_40007(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
static method_36690(): RaycastContext_ShapeType;
static COLLIDER: RaycastContext_ShapeType;
static OUTLINE: RaycastContext_ShapeType;
static VISUAL: RaycastContext_ShapeType;
static FALLDAMAGE_RESETTING: RaycastContext_ShapeType;
static field_17561: RaycastContext_ShapeType;
}

//net.minecraft.data.client.BlockStateVariantMap$TripleProperty
class BlockStateVariantMap_TripleProperty extends BlockStateVariantMap{
 register(variantFactory: BlockStateVariantMap_TriFunction): BlockStateVariantMap;
 register(firstValue: Comparable,secondValue: Comparable,thirdValue: Comparable,variant: BlockStateVariant): BlockStateVariantMap_TripleProperty;
 register(firstValue: Comparable,secondValue: Comparable,thirdValue: Comparable,variants: List): BlockStateVariantMap_TripleProperty;
 getProperties(): List;
 registerVariants(variantFactory: BlockStateVariantMap_TriFunction): BlockStateVariantMap;
}

//net.minecraft.data.client.BlockStateVariantMap$QuintupleProperty
class BlockStateVariantMap_QuintupleProperty extends BlockStateVariantMap{
 register(variantFactory: BlockStateVariantMap_QuintFunction): BlockStateVariantMap;
 register(firstValue: Comparable,secondValue: Comparable,thirdValue: Comparable,fourthValue: Comparable,fifthValue: Comparable,variant: BlockStateVariant): BlockStateVariantMap_QuintupleProperty;
 register(firstValue: Comparable,secondValue: Comparable,thirdValue: Comparable,fourthValue: Comparable,fifthValue: Comparable,variants: List): BlockStateVariantMap_QuintupleProperty;
 getProperties(): List;
 registerVariants(variantFactory: BlockStateVariantMap_QuintFunction): BlockStateVariantMap;
}

//net.minecraft.data.client.BlockStateVariantMap$QuadrupleProperty
class BlockStateVariantMap_QuadrupleProperty extends BlockStateVariantMap{
 register(variantFactory: BlockStateVariantMap_QuadFunction): BlockStateVariantMap;
 register(firstValue: Comparable,secondValue: Comparable,thirdValue: Comparable,fourthValue: Comparable,variant: BlockStateVariant): BlockStateVariantMap_QuadrupleProperty;
 register(firstValue: Comparable,secondValue: Comparable,thirdValue: Comparable,fourthValue: Comparable,variants: List): BlockStateVariantMap_QuadrupleProperty;
 getProperties(): List;
 registerVariants(variantFactory: BlockStateVariantMap_QuadFunction): BlockStateVariantMap;
}

//net.minecraft.data.client.BlockStateVariantMap$DoubleProperty
class BlockStateVariantMap_DoubleProperty extends BlockStateVariantMap{
 register(variantFactory: BiFunction): BlockStateVariantMap;
 register(firstValue: Comparable,secondValue: Comparable,variant: BlockStateVariant): BlockStateVariantMap_DoubleProperty;
 register(firstValue: Comparable,secondValue: Comparable,variants: List): BlockStateVariantMap_DoubleProperty;
 getProperties(): List;
 registerVariants(variantsFactory: BiFunction): BlockStateVariantMap;
}

//net.minecraft.data.client.BlockStateVariantMap$SingleProperty
class BlockStateVariantMap_SingleProperty extends BlockStateVariantMap{
 register(variantFactory: Function): BlockStateVariantMap;
 register(value: Comparable,variant: BlockStateVariant): BlockStateVariantMap_SingleProperty;
 register(value: Comparable,variants: List): BlockStateVariantMap_SingleProperty;
 getProperties(): List;
 registerVariants(variantFactory: Function): BlockStateVariantMap;
}

//net.minecraft.entity.ai.control.FlightMoveControl
class FlightMoveControl extends MoveControl{
 tick(): void;
}

//net.minecraft.entity.ai.control.AquaticMoveControl
class AquaticMoveControl extends MoveControl{
 tick(): void;
}
class Static_AquaticMoveControl {
static method_45335(f: number): number;
static field_40123: number;
static field_40124: number;
}

//net.minecraft.entity.projectile.thrown.PotionEntity
class PotionEntity extends ThrownItemEntity, FlyingItemEntity{
}
class Static_PotionEntity {
static method_48575(d: number,i: number): number;
static method_46401(entity: LivingEntity): boolean;
static field_30667: number;
static field_30668: number;
static AFFECTED_BY_WATER: Predicate;
}

//net.minecraft.entity.EyeOfEnderEntity
class EyeOfEnderEntity extends Entity, FlyingItemEntity{
 getStack(): ItemStack;
 tick(): void;
 setVelocityClient(x: number,y: number,z: number): void;
 shouldRender(distance: number): boolean;
 isAttackable(): boolean;
 setItem(stack: ItemStack): void;
 writeCustomDataToNbt(nbt: NbtCompound): void;
 readCustomDataFromNbt(nbt: NbtCompound): void;
 getBrightnessAtEyes(): number;
 initTargetPos(pos: BlockPos): void;
}
class Static_EyeOfEnderEntity {
static ITEM: TrackedData;
}

//net.minecraft.entity.projectile.thrown.ThrownItemEntity
class ThrownItemEntity extends ThrownEntity, FlyingItemEntity{
 getStack(): ItemStack;
 setItem(item: ItemStack): void;
 writeCustomDataToNbt(nbt: NbtCompound): void;
 readCustomDataFromNbt(nbt: NbtCompound): void;
}
class Static_ThrownItemEntity {
static ITEM: TrackedData;
}

//net.minecraft.entity.projectile.AbstractFireballEntity
class AbstractFireballEntity extends ExplosiveProjectileEntity, FlyingItemEntity{
 getStack(): ItemStack;
 setItem(stack: ItemStack): void;
 writeCustomDataToNbt(nbt: NbtCompound): void;
 readCustomDataFromNbt(nbt: NbtCompound): void;
}
class Static_AbstractFireballEntity {
static ITEM: TrackedData;
}

//net.minecraft.entity.projectile.FireworkRocketEntity
class FireworkRocketEntity extends ProjectileEntity, FlyingItemEntity{
 getStack(): ItemStack;
 tick(): void;
 handleStatus(status: byte): void;
 shouldRender(distance: number): boolean;
 shouldRender(cameraX: number,cameraY: number,cameraZ: number): boolean;
 isAttackable(): boolean;
 writeCustomDataToNbt(nbt: NbtCompound): void;
 readCustomDataFromNbt(nbt: NbtCompound): void;
 wasShotAtAngle(): boolean;
}
class Static_FireworkRocketEntity {
static ITEM: TrackedData;
static SHOOTER_ENTITY_ID: TrackedData;
static SHOT_AT_ANGLE: TrackedData;
}

//net.minecraft.block.entity.CalibratedSculkSensorBlockEntity$Callback
class CalibratedSculkSensorBlockEntity_Callback extends SculkSensorBlockEntity_VibrationCallback{
 getRange(): number;
 accepts(world: ServerWorld,pos: BlockPos,event: GameEvent,emitter: GameEvent_Emitter): boolean;
}

//net.minecraft.util.thread.ReentrantThreadExecutor
class ReentrantThreadExecutor extends ThreadExecutor{
 shouldExecuteAsync(): boolean;
 executeTask(task: Runnable): void;
}

//net.minecraft.server.world.ServerChunkManager$MainThreadExecutor
class ServerChunkManager_MainThreadExecutor extends ThreadExecutor{
}

//net.minecraft.client.sound.SoundExecutor
class SoundExecutor extends ThreadExecutor{
 restart(): void;
}

//net.minecraft.screen.ForgingScreenHandler$3


//net.minecraft.inventory.EnderChestInventory
class EnderChestInventory extends SimpleInventory{
 onClose(player: PlayerEntity): void;
 readNbtList(nbtList: NbtList): void;
 toNbtList(): NbtList;
 onOpen(player: PlayerEntity): void;
 canPlayerUse(player: PlayerEntity): boolean;
 setActiveBlockEntity(blockEntity: EnderChestBlockEntity): void;
 isActiveBlockEntity(blockEntity: EnderChestBlockEntity): boolean;
}

//net.minecraft.block.ComposterBlock$ComposterInventory
class ComposterBlock_ComposterInventory extends SimpleInventory, SidedInventory{
 getMaxCountPerStack(): number;
 canInsert(slot: number,stack: ItemStack,dir: Direction): boolean;
 markDirty(): void;
 canExtract(slot: number,stack: ItemStack,dir: Direction): boolean;
 getAvailableSlots(side: Direction): number[];
}

//net.minecraft.block.ComposterBlock$DummyInventory
class ComposterBlock_DummyInventory extends SimpleInventory, SidedInventory{
 canInsert(slot: number,stack: ItemStack,dir: Direction): boolean;
 canExtract(slot: number,stack: ItemStack,dir: Direction): boolean;
 getAvailableSlots(side: Direction): number[];
}

//net.minecraft.screen.StonecutterScreenHandler$1


//net.minecraft.screen.BeaconScreenHandler$1


//net.minecraft.screen.GrindstoneScreenHandler$1


//net.minecraft.screen.EnchantmentScreenHandler$1


//net.minecraft.screen.CartographyTableScreenHandler$1


//net.minecraft.block.ComposterBlock$FullComposterInventory
class ComposterBlock_FullComposterInventory extends SimpleInventory, SidedInventory{
 getMaxCountPerStack(): number;
 canInsert(slot: number,stack: ItemStack,dir: Direction): boolean;
 markDirty(): void;
 canExtract(slot: number,stack: ItemStack,dir: Direction): boolean;
 getAvailableSlots(side: Direction): number[];
}

//net.minecraft.screen.LoomScreenHandler$2


//net.minecraft.screen.LoomScreenHandler$1


//net.minecraft.loot.entry.SequenceEntry$Builder
class SequenceEntry_Builder extends LootPoolEntry_Builder{
 build(): LootPoolEntry;
 groupEntry(entry: LootPoolEntry_Builder): SequenceEntry_Builder;
}

//net.minecraft.loot.entry.AlternativeEntry$Builder
class AlternativeEntry_Builder extends LootPoolEntry_Builder{
 build(): LootPoolEntry;
 alternatively(builder: LootPoolEntry_Builder): AlternativeEntry_Builder;
}

//net.minecraft.loot.entry.GroupEntry$Builder
class GroupEntry_Builder extends LootPoolEntry_Builder{
 build(): LootPoolEntry;
 sequenceEntry(entry: LootPoolEntry_Builder): GroupEntry_Builder;
}

//net.minecraft.network.message.SentMessage$Profileless
class SentMessage_Profileless extends Record, SentMessage{
 equals(object: Object): boolean;
 toString(): string;
 hashCode(): number;
 getContent(): Text;
 send(sender: ServerPlayerEntity,filterMaskEnabled: boolean,params: MessageType_Parameters): void;
}

//net.minecraft.network.message.SentMessage$Chat
class SentMessage_Chat extends Record, SentMessage{
 equals(object: Object): boolean;
 toString(): string;
 hashCode(): number;
 message(): SignedMessage;
 getContent(): Text;
 send(sender: ServerPlayerEntity,filterMaskEnabled: boolean,params: MessageType_Parameters): void;
}

//net.minecraft.loot.entry.LeafEntry$Serializer
class LeafEntry_Serializer extends LootPoolEntry_Serializer{
 addEntryFields(json: JsonObject,entry: LootPoolEntry,context: JsonSerializationContext): void;
 addEntryFields(jsonObject: JsonObject,leafEntry: LeafEntry,jsonSerializationContext: JsonSerializationContext): void;
 fromJson(json: JsonObject,context: JsonDeserializationContext,conditions: LootCondition[]): LootPoolEntry;
 fromJson(jsonObject: JsonObject,jsonDeserializationContext: JsonDeserializationContext,lootConditions: LootCondition[]): LeafEntry;
}

//net.minecraft.loot.entry.CombinedEntry$1


//net.minecraft.world.gen.densityfunction.DensityFunctionTypes$Spline
class DensityFunctionTypes_Spline extends Record, DensityFunction{
 equals(object: Object): boolean;
 toString(): string;
 hashCode(): number;
 apply(visitor: DensityFunction_DensityFunctionVisitor): DensityFunction;
 fill(densities: number[],applier: DensityFunction_EachApplier): void;
 maxValue(): number;
 sample(pos: DensityFunction_NoisePos): number;
 minValue(): number;
 getCodecHolder(): CodecHolder;
 spline(): Spline;
}
class Static_DensityFunctionTypes_Spline {
static method_41197(densityFunctionVisitor: DensityFunction_DensityFunctionVisitor,densityFunctionWrapper: DensityFunctionTypes_Spline_DensityFunctionWrapper): DensityFunctionTypes_Spline_DensityFunctionWrapper;
static SPLINE_CODEC: Codec;
static SPLINE_FUNCTION_CODEC: MapCodec;
static CODEC_HOLDER: CodecHolder;
}

//net.minecraft.world.gen.densityfunction.DensityFunctionTypes$ShiftedNoise
class DensityFunctionTypes_ShiftedNoise extends Record, DensityFunction{
 equals(object: Object): boolean;
 toString(): string;
 hashCode(): number;
 apply(visitor: DensityFunction_DensityFunctionVisitor): DensityFunction;
 fill(densities: number[],applier: DensityFunction_EachApplier): void;
 maxValue(): number;
 sample(pos: DensityFunction_NoisePos): number;
 minValue(): number;
 yScale(): number;
 getCodecHolder(): CodecHolder;
 noise(): DensityFunction_Noise;
 shiftZ(): DensityFunction;
 shiftY(): DensityFunction;
 shiftX(): DensityFunction;
 xzScale(): number;
}
class Static_DensityFunctionTypes_ShiftedNoise {
static method_41090(instance: RecordCodecBuilder_Instance): App;
static SHIFTED_NOISE_CODEC: MapCodec;
static CODEC_HOLDER: CodecHolder;
}

//net.minecraft.world.gen.densityfunction.DensityFunctionTypes$RangeChoice
class DensityFunctionTypes_RangeChoice extends Record, DensityFunction{
 equals(object: Object): boolean;
 toString(): string;
 hashCode(): number;
 apply(visitor: DensityFunction_DensityFunctionVisitor): DensityFunction;
 fill(densities: number[],applier: DensityFunction_EachApplier): void;
 input(): DensityFunction;
 maxValue(): number;
 sample(pos: DensityFunction_NoisePos): number;
 minValue(): number;
 minInclusive(): number;
 getCodecHolder(): CodecHolder;
 whenInRange(): DensityFunction;
 whenOutOfRange(): DensityFunction;
 maxExclusive(): number;
}
class Static_DensityFunctionTypes_RangeChoice {
static method_41085(instance: RecordCodecBuilder_Instance): App;
static RANGE_CHOICE_CODEC: MapCodec;
static CODEC_HOLDER: CodecHolder;
}

//net.minecraft.world.gen.densityfunction.DensityFunctionTypes$Noise
class DensityFunctionTypes_Noise extends Record, DensityFunction{
 equals(object: Object): boolean;
 toString(): string;
 hashCode(): number;
 apply(visitor: DensityFunction_DensityFunctionVisitor): DensityFunction;
 fill(densities: number[],applier: DensityFunction_EachApplier): void;
 maxValue(): number;
 sample(pos: DensityFunction_NoisePos): number;
 minValue(): number;
 yScale(): number;
 getCodecHolder(): CodecHolder;
 noise(): DensityFunction_Noise;
 xzScale(): number;
}
class Static_DensityFunctionTypes_Noise {
static method_41083(instance: RecordCodecBuilder_Instance): App;
static NOISE_CODEC: MapCodec;
static CODEC_HOLDER: CodecHolder;
}

//net.minecraft.world.gen.densityfunction.DensityFunctionTypes$RegistryEntryHolder
class DensityFunctionTypes_RegistryEntryHolder extends Record, DensityFunction{
 equals(object: Object): boolean;
 toString(): string;
 hashCode(): number;
 apply(visitor: DensityFunction_DensityFunctionVisitor): DensityFunction;
 fill(densities: number[],applier: DensityFunction_EachApplier): void;
 function(): RegistryEntry;
 maxValue(): number;
 sample(pos: DensityFunction_NoisePos): number;
 minValue(): number;
 getCodecHolder(): CodecHolder;
}

//net.minecraft.client.render.chunk.ChunkBuilder$ChunkData$1


//net.minecraft.client.render.GameRenderer$CachedResourceFactory
class GameRenderer_CachedResourceFactory extends Record, ResourceFactory{
 cache(): Map;
 equals(object: Object): boolean;
 toString(): string;
 hashCode(): number;
 original(): ResourceFactory;
 getResource(identifier: Identifier): Optional;
}

//net.minecraft.client.option.SimpleOption$MaxSuppliableIntCallbacks
class SimpleOption_MaxSuppliableIntCallbacks extends Record, SimpleOption_IntSliderCallbacks, SimpleOption_TypeChangeableCallbacks{
 equals(object: Object): boolean;
 toString(): string;
 hashCode(): number;
 validate(integer: Integer): Optional;
 validate(value: Object): Optional;
 maxSupplier(): IntSupplier;
 codec(): Codec;
 maxInclusive(): number;
 minInclusive(): number;
 getValues(): CyclingButtonWidget_Values;
 isCycling(): boolean;
 encodableMaxInclusive(): number;
}

//net.minecraft.client.option.SimpleOption$ValidatingIntSliderCallbacks
class SimpleOption_ValidatingIntSliderCallbacks extends Record, SimpleOption_IntSliderCallbacks{
 equals(object: Object): boolean;
 toString(): string;
 hashCode(): number;
 validate(value: Object): Optional;
 validate(integer: Integer): Optional;
 codec(): Codec;
 maxInclusive(): number;
 minInclusive(): number;
}

//net.minecraft.item.ToolMaterials
class ToolMaterials extends Enum, ToolMaterial{
 getMiningLevel(): number;
 getDurability(): number;
 getEnchantability(): number;
 getAttackDamage(): number;
 getMiningSpeedMultiplier(): number;
 getRepairIngredient(): Ingredient;
}
class Static_ToolMaterials {
static values(): ToolMaterials[];
static valueOf(string: string): ToolMaterials;
static method_8031(): Ingredient;
static method_8029(): Ingredient;
static method_8033(): Ingredient;
static method_8030(): Ingredient;
static method_8032(): Ingredient;
static method_36684(): ToolMaterials[];
static method_24361(): Ingredient;
static WOOD: ToolMaterials;
static STONE: ToolMaterials;
static IRON: ToolMaterials;
static DIAMOND: ToolMaterials;
static GOLD: ToolMaterials;
static NETHERITE: ToolMaterials;
static field_8926: ToolMaterials[];
}

//net.minecraft.world.gen.surfacebuilder.MaterialRules$SequenceBlockStateRule
class MaterialRules_SequenceBlockStateRule extends Record, MaterialRules_BlockStateRule{
 equals(object: Object): boolean;
 toString(): string;
 hashCode(): number;
 rules(): List;
 tryApply(i: number,j: number,k: number): BlockState;
}

//net.minecraft.world.gen.surfacebuilder.MaterialRules$SimpleBlockStateRule
class MaterialRules_SimpleBlockStateRule extends Record, MaterialRules_BlockStateRule{
 equals(object: Object): boolean;
 toString(): string;
 hashCode(): number;
 state(): BlockState;
 tryApply(i: number,j: number,k: number): BlockState;
}

//net.minecraft.world.gen.surfacebuilder.MaterialRules$ConditionalBlockStateRule
class MaterialRules_ConditionalBlockStateRule extends Record, MaterialRules_BlockStateRule{
 equals(object: Object): boolean;
 toString(): string;
 hashCode(): number;
 condition(): MaterialRules_BooleanSupplier;
 tryApply(i: number,j: number,k: number): BlockState;
 followup(): MaterialRules_BlockStateRule;
}

//net.minecraft.recipe.BannerDuplicateRecipe
class BannerDuplicateRecipe extends SpecialCraftingRecipe{
 matches(inventory: Inventory,world: World): boolean;
 matches(recipeInputInventory: RecipeInputInventory,world: World): boolean;
 getRemainder(inventory: Inventory): DefaultedList;
 getRemainder(recipeInputInventory: RecipeInputInventory): DefaultedList;
 craft(inventory: Inventory,registryManager: DynamicRegistryManager): ItemStack;
 craft(recipeInputInventory: RecipeInputInventory,dynamicRegistryManager: DynamicRegistryManager): ItemStack;
 fits(width: number,height: number): boolean;
 getSerializer(): RecipeSerializer;
}

//net.minecraft.recipe.SuspiciousStewRecipe
class SuspiciousStewRecipe extends SpecialCraftingRecipe{
 matches(inventory: Inventory,world: World): boolean;
 matches(recipeInputInventory: RecipeInputInventory,world: World): boolean;
 craft(recipeInputInventory: RecipeInputInventory,dynamicRegistryManager: DynamicRegistryManager): ItemStack;
 craft(inventory: Inventory,registryManager: DynamicRegistryManager): ItemStack;
 fits(width: number,height: number): boolean;
 getSerializer(): RecipeSerializer;
}

//net.minecraft.recipe.MapCloningRecipe
class MapCloningRecipe extends SpecialCraftingRecipe{
 matches(inventory: Inventory,world: World): boolean;
 matches(recipeInputInventory: RecipeInputInventory,world: World): boolean;
 craft(recipeInputInventory: RecipeInputInventory,dynamicRegistryManager: DynamicRegistryManager): ItemStack;
 craft(inventory: Inventory,registryManager: DynamicRegistryManager): ItemStack;
 fits(width: number,height: number): boolean;
 getSerializer(): RecipeSerializer;
}

//net.minecraft.recipe.ShieldDecorationRecipe
class ShieldDecorationRecipe extends SpecialCraftingRecipe{
 matches(inventory: Inventory,world: World): boolean;
 matches(recipeInputInventory: RecipeInputInventory,world: World): boolean;
 craft(recipeInputInventory: RecipeInputInventory,dynamicRegistryManager: DynamicRegistryManager): ItemStack;
 craft(inventory: Inventory,registryManager: DynamicRegistryManager): ItemStack;
 fits(width: number,height: number): boolean;
 getSerializer(): RecipeSerializer;
}

//net.minecraft.recipe.CraftingDecoratedPotRecipe
class CraftingDecoratedPotRecipe extends SpecialCraftingRecipe{
 matches(inventory: Inventory,world: World): boolean;
 matches(recipeInputInventory: RecipeInputInventory,world: World): boolean;
 craft(recipeInputInventory: RecipeInputInventory,dynamicRegistryManager: DynamicRegistryManager): ItemStack;
 craft(inventory: Inventory,registryManager: DynamicRegistryManager): ItemStack;
 fits(width: number,height: number): boolean;
 getSerializer(): RecipeSerializer;
}
class Static_CraftingDecoratedPotRecipe {
static getPotStackWith(sherds: DecoratedPotBlockEntity_Sherds): ItemStack;
}

//net.minecraft.recipe.FireworkRocketRecipe
class FireworkRocketRecipe extends SpecialCraftingRecipe{
 matches(recipeInputInventory: RecipeInputInventory,world: World): boolean;
 matches(inventory: Inventory,world: World): boolean;
 getOutput(registryManager: DynamicRegistryManager): ItemStack;
 craft(inventory: Inventory,registryManager: DynamicRegistryManager): ItemStack;
 craft(recipeInputInventory: RecipeInputInventory,dynamicRegistryManager: DynamicRegistryManager): ItemStack;
 fits(width: number,height: number): boolean;
 getSerializer(): RecipeSerializer;
}
class Static_FireworkRocketRecipe {
static PAPER: Ingredient;
static DURATION_MODIFIER: Ingredient;
static FIREWORK_STAR: Ingredient;
}

//net.minecraft.recipe.TippedArrowRecipe
class TippedArrowRecipe extends SpecialCraftingRecipe{
 matches(inventory: Inventory,world: World): boolean;
 matches(recipeInputInventory: RecipeInputInventory,world: World): boolean;
 craft(recipeInputInventory: RecipeInputInventory,dynamicRegistryManager: DynamicRegistryManager): ItemStack;
 craft(inventory: Inventory,registryManager: DynamicRegistryManager): ItemStack;
 fits(width: number,height: number): boolean;
 getSerializer(): RecipeSerializer;
}

//net.minecraft.recipe.FireworkStarFadeRecipe
class FireworkStarFadeRecipe extends SpecialCraftingRecipe{
 matches(inventory: Inventory,world: World): boolean;
 matches(recipeInputInventory: RecipeInputInventory,world: World): boolean;
 craft(inventory: Inventory,registryManager: DynamicRegistryManager): ItemStack;
 craft(recipeInputInventory: RecipeInputInventory,dynamicRegistryManager: DynamicRegistryManager): ItemStack;
 fits(width: number,height: number): boolean;
 getSerializer(): RecipeSerializer;
}
class Static_FireworkStarFadeRecipe {
static INPUT_STAR: Ingredient;
}

//net.minecraft.recipe.ArmorDyeRecipe
class ArmorDyeRecipe extends SpecialCraftingRecipe{
 matches(inventory: Inventory,world: World): boolean;
 matches(recipeInputInventory: RecipeInputInventory,world: World): boolean;
 craft(recipeInputInventory: RecipeInputInventory,dynamicRegistryManager: DynamicRegistryManager): ItemStack;
 craft(inventory: Inventory,registryManager: DynamicRegistryManager): ItemStack;
 fits(width: number,height: number): boolean;
 getSerializer(): RecipeSerializer;
}

//net.minecraft.recipe.ShulkerBoxColoringRecipe
class ShulkerBoxColoringRecipe extends SpecialCraftingRecipe{
 matches(inventory: Inventory,world: World): boolean;
 matches(recipeInputInventory: RecipeInputInventory,world: World): boolean;
 craft(recipeInputInventory: RecipeInputInventory,dynamicRegistryManager: DynamicRegistryManager): ItemStack;
 craft(inventory: Inventory,registryManager: DynamicRegistryManager): ItemStack;
 fits(width: number,height: number): boolean;
 getSerializer(): RecipeSerializer;
}

//net.minecraft.recipe.RepairItemRecipe
class RepairItemRecipe extends SpecialCraftingRecipe{
 matches(inventory: Inventory,world: World): boolean;
 matches(recipeInputInventory: RecipeInputInventory,world: World): boolean;
 craft(recipeInputInventory: RecipeInputInventory,dynamicRegistryManager: DynamicRegistryManager): ItemStack;
 craft(inventory: Inventory,registryManager: DynamicRegistryManager): ItemStack;
 fits(width: number,height: number): boolean;
 getSerializer(): RecipeSerializer;
}
class Static_RepairItemRecipe {
static method_24364(map: Map,map2: Map,map3: Map,enchantment: Enchantment): void;
}

//net.minecraft.recipe.FireworkStarRecipe
class FireworkStarRecipe extends SpecialCraftingRecipe{
 matches(inventory: Inventory,world: World): boolean;
 matches(recipeInputInventory: RecipeInputInventory,world: World): boolean;
 getOutput(registryManager: DynamicRegistryManager): ItemStack;
 craft(inventory: Inventory,registryManager: DynamicRegistryManager): ItemStack;
 craft(recipeInputInventory: RecipeInputInventory,dynamicRegistryManager: DynamicRegistryManager): ItemStack;
 fits(width: number,height: number): boolean;
 getSerializer(): RecipeSerializer;
}
class Static_FireworkStarRecipe {
static method_8085(typeModifiers: HashMap): void;
static TYPE_MODIFIER: Ingredient;
static TRAIL_MODIFIER: Ingredient;
static FLICKER_MODIFIER: Ingredient;
static TYPE_MODIFIER_MAP: Map;
static GUNPOWDER: Ingredient;
}

//net.minecraft.recipe.BookCloningRecipe
class BookCloningRecipe extends SpecialCraftingRecipe{
 matches(inventory: Inventory,world: World): boolean;
 matches(recipeInputInventory: RecipeInputInventory,world: World): boolean;
 getRemainder(inventory: Inventory): DefaultedList;
 getRemainder(recipeInputInventory: RecipeInputInventory): DefaultedList;
 craft(inventory: Inventory,registryManager: DynamicRegistryManager): ItemStack;
 craft(recipeInputInventory: RecipeInputInventory,dynamicRegistryManager: DynamicRegistryManager): ItemStack;
 fits(width: number,height: number): boolean;
 getSerializer(): RecipeSerializer;
}

//net.minecraft.network.packet.c2s.play.PlayerMoveC2SPacket$LookAndOnGround
class PlayerMoveC2SPacket_LookAndOnGround extends PlayerMoveC2SPacket{
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
}
class Static_PlayerMoveC2SPacket_LookAndOnGround {
static read(buf: PacketByteBuf): PlayerMoveC2SPacket_LookAndOnGround;
}

//net.minecraft.network.packet.c2s.play.PlayerMoveC2SPacket$OnGroundOnly
class PlayerMoveC2SPacket_OnGroundOnly extends PlayerMoveC2SPacket{
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
}
class Static_PlayerMoveC2SPacket_OnGroundOnly {
static read(buf: PacketByteBuf): PlayerMoveC2SPacket_OnGroundOnly;
}

//net.minecraft.network.packet.c2s.play.PlayerMoveC2SPacket$PositionAndOnGround
class PlayerMoveC2SPacket_PositionAndOnGround extends PlayerMoveC2SPacket{
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
}
class Static_PlayerMoveC2SPacket_PositionAndOnGround {
static read(buf: PacketByteBuf): PlayerMoveC2SPacket_PositionAndOnGround;
}

//net.minecraft.network.packet.c2s.play.PlayerMoveC2SPacket$Full
class PlayerMoveC2SPacket_Full extends PlayerMoveC2SPacket{
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
}
class Static_PlayerMoveC2SPacket_Full {
static read(buf: PacketByteBuf): PlayerMoveC2SPacket_Full;
}

//net.minecraft.block.entity.EnderChestBlockEntity
class EnderChestBlockEntity extends BlockEntity, LidOpenable{
 onClose(player: PlayerEntity): void;
 onScheduledTick(): void;
 onSyncedBlockEvent(type: number,data: number): boolean;
 onOpen(player: PlayerEntity): void;
 canPlayerUse(player: PlayerEntity): boolean;
 getAnimationProgress(tickDelta: number): number;
}
class Static_EnderChestBlockEntity {
static clientTick(world: World,pos: BlockPos,state: BlockState,blockEntity: EnderChestBlockEntity): void;
}

//net.minecraft.block.entity.ChestBlockEntity
class ChestBlockEntity extends LootableContainerBlockEntity, LidOpenable{
 size(): number;
 onClose(player: PlayerEntity): void;
 onScheduledTick(): void;
 onSyncedBlockEvent(type: number,data: number): boolean;
 readNbt(nbt: NbtCompound): void;
 onOpen(player: PlayerEntity): void;
 getAnimationProgress(tickDelta: number): number;
}
class Static_ChestBlockEntity {
static copyInventory(from: ChestBlockEntity,to: ChestBlockEntity): void;
static clientTick(world: World,pos: BlockPos,state: BlockState,blockEntity: ChestBlockEntity): void;
static playSound(world: World,pos: BlockPos,state: BlockState,soundEvent: SoundEvent): void;
static getPlayersLookingInChestCount(world: BlockView,pos: BlockPos): number;
static VIEWER_COUNT_UPDATE_EVENT_TYPE: number;
}

//net.minecraft.client.render.OverlayVertexConsumer
class OverlayVertexConsumer extends FixedColorVertexConsumer{
 next(): void;
 color(red: number,green: number,blue: number,alpha: number): VertexConsumer;
 normal(x: number,y: number,z: number): VertexConsumer;
 light(u: number,v: number): VertexConsumer;
 overlay(u: number,v: number): VertexConsumer;
 vertex(x: number,y: number,z: number): VertexConsumer;
 texture(u: number,v: number): VertexConsumer;
}

//net.minecraft.client.render.BufferBuilder
class BufferBuilder extends FixedColorVertexConsumer, BufferVertexConsumer{
 putByte(index: number,value: byte): void;
 putShort(index: number,value: short): void;
 putFloat(index: number,value: number): void;
 clear(): void;
 next(): void;
 end(): BufferBuilder_BuiltBuffer;
 begin(drawMode: VertexFormat_DrawMode,format: VertexFormat): void;
 nextElement(): void;
 reset(): void;
 color(red: number,green: number,blue: number,alpha: number): VertexConsumer;
 setSorter(sorter: VertexSorter): void;
 getCurrentElement(): VertexFormatElement;
 isBuilding(): boolean;
 isBatchEmpty(): boolean;
 endNullable(): BufferBuilder_BuiltBuffer;
 getSortingData(): BufferBuilder_TransparentSortingData;
 vertex(x: number,y: number,z: number,red: number,green: number,blue: number,alpha: number,u: number,v: number,overlay: number,light: number,normalX: number,normalY: number,normalZ: number): void;
 beginSortedIndexBuffer(state: BufferBuilder_TransparentSortingData): void;
}
class Static_BufferBuilder {
static roundBufferSize(amount: number): number;
static ROUND_SIZE_CHANGE: number;
static LOGGER: Logger;
}

//net.minecraft.client.render.OutlineVertexConsumerProvider$OutlineVertexConsumer
class OutlineVertexConsumerProvider_OutlineVertexConsumer extends FixedColorVertexConsumer{
 next(): void;
 color(red: number,green: number,blue: number,alpha: number): VertexConsumer;
 normal(x: number,y: number,z: number): VertexConsumer;
 light(u: number,v: number): VertexConsumer;
 overlay(u: number,v: number): VertexConsumer;
 vertex(x: number,y: number,z: number): VertexConsumer;
 vertex(x: number,y: number,z: number,red: number,green: number,blue: number,alpha: number,u: number,v: number,overlay: number,light: number,normalX: number,normalY: number,normalZ: number): void;
 texture(u: number,v: number): VertexConsumer;
 unfixColor(): void;
 fixedColor(red: number,green: number,blue: number,alpha: number): void;
}

//net.minecraft.world.gen.densityfunction.DensityFunctionTypes$Wrapping
class DensityFunctionTypes_Wrapping extends Record, DensityFunctionTypes_Wrapper{
 type(): DensityFunctionTypes_Wrapping_Type;
 equals(object: Object): boolean;
 toString(): string;
 hashCode(): number;
 fill(densities: number[],applier: DensityFunction_EachApplier): void;
 maxValue(): number;
 wrapped(): DensityFunction;
 sample(pos: DensityFunction_NoisePos): number;
 minValue(): number;
}

//net.minecraft.world.gen.feature.BasaltPillarFeature
class BasaltPillarFeature extends Feature{
 generate(context: FeatureContext): boolean;
}

//net.minecraft.world.gen.feature.SimpleBlockFeature
class SimpleBlockFeature extends Feature{
 generate(context: FeatureContext): boolean;
}

//net.minecraft.world.gen.feature.DripstoneClusterFeature
class DripstoneClusterFeature extends Feature{
 generate(context: FeatureContext): boolean;
}
class Static_DripstoneClusterFeature {
static clampedGaussian(random: Random,min: number,max: number,mean: number,deviation: number): number;
}

//net.minecraft.world.gen.feature.SimpleRandomFeature
class SimpleRandomFeature extends Feature{
 generate(context: FeatureContext): boolean;
}

//net.minecraft.world.gen.feature.VegetationPatchFeature
class VegetationPatchFeature extends Feature{
 generate(context: FeatureContext): boolean;
}
class Static_VegetationPatchFeature {
static method_40164(vegetationPatchFeatureConfig: VegetationPatchFeatureConfig,state: BlockState): boolean;
static method_34321(state: BlockState): boolean;
}

//net.minecraft.world.gen.feature.SeagrassFeature
class SeagrassFeature extends Feature{
 generate(context: FeatureContext): boolean;
}

//net.minecraft.world.gen.feature.WeepingVinesFeature
class WeepingVinesFeature extends Feature{
 generate(context: FeatureContext): boolean;
}
class Static_WeepingVinesFeature {
static generateVineColumn(world: WorldAccess,random: Random,pos: BlockPos_Mutable,length: number,minAge: number,maxAge: number): void;
static DIRECTIONS: Direction[];
}

//net.minecraft.world.gen.feature.IcebergFeature
class IcebergFeature extends Feature{
 generate(context: FeatureContext): boolean;
}
class Static_IcebergFeature {
static isSnowOrIce(state: BlockState): boolean;
}

//net.minecraft.world.gen.feature.BasaltColumnsFeature
class BasaltColumnsFeature extends Feature{
 generate(context: FeatureContext): boolean;
}
class Static_BasaltColumnsFeature {
static isAirOrLavaOcean(world: WorldAccess,seaLevel: number,pos: BlockPos): boolean;
static moveDownToGround(world: WorldAccess,seaLevel: number,mutablePos: BlockPos_Mutable,distance: number): BlockPos;
static moveUpToAir(world: WorldAccess,mutablePos: BlockPos_Mutable,distance: number): BlockPos;
static canPlaceAt(world: WorldAccess,seaLevel: number,mutablePos: BlockPos_Mutable): boolean;
static CANNOT_REPLACE_BLOCKS: ImmutableList;
static field_31495: number;
static field_31496: number;
static field_31497: number;
static field_31498: number;
}

//net.minecraft.world.gen.feature.TreeFeature
class TreeFeature extends Feature{
 generate(context: FeatureContext): boolean;
}
class Static_TreeFeature {
static method_35364(set: Set,structureWorldAccess: StructureWorldAccess,pos: BlockPos,state: BlockState): void;
static isAirOrLeaves(world: TestableWorld,pos: BlockPos): boolean;
static method_23381(generator: TreeDecorator_Generator,decorator: TreeDecorator): void;
static method_23384(state: BlockState): boolean;
static method_51179(state: BlockState): boolean;
static method_35363(structureWorldAccess: StructureWorldAccess,set: Set,set2: Set,set3: Set,box: BlockBox): Boolean;
static isVine(world: TestableWorld,pos: BlockPos): boolean;
static method_27372(treeFeatureConfig: TreeFeatureConfig,structureWorldAccess: StructureWorldAccess,blockPlacer: FoliagePlacer_BlockPlacer,random: Random,i: number,j: number,k: number,node: FoliagePlacer_TreeNode): void;
static method_49238(set: Set,structureWorldAccess: StructureWorldAccess,pos: BlockPos,state: BlockState): void;
static method_16417(state: BlockState): boolean;
static method_43162(set: Set,structureWorldAccess: StructureWorldAccess,pos: BlockPos,state: BlockState): void;
static method_43293(blockPos: BlockPos,random: Random,rootPlacer: RootPlacer): BlockPos;
static placeLogsAndLeaves(world: WorldAccess,box: BlockBox,trunkPositions: Set,decorationPositions: Set,rootPositions: Set): VoxelSet;
static canReplace(world: TestableWorld,pos: BlockPos): boolean;
static setBlockStateWithoutUpdatingNeighbors(world: ModifiableWorld,pos: BlockPos,state: BlockState): void;
static FORCE_STATE_AND_NOTIFY_ALL: number;
}

//net.minecraft.world.gen.feature.SculkPatchFeature
class SculkPatchFeature extends Feature{
 generate(context: FeatureContext): boolean;
}
class Static_SculkPatchFeature {
static method_41572(worldAccess: WorldAccess,pos2: BlockPos): boolean;
}

//net.minecraft.world.gen.feature.SpringFeature
class SpringFeature extends Feature{
 generate(context: FeatureContext): boolean;
}

//net.minecraft.world.gen.feature.LakeFeature
class LakeFeature extends Feature{
 generate(context: FeatureContext): boolean;
}
class Static_LakeFeature {
static CAVE_AIR: BlockState;
}

//net.minecraft.world.gen.feature.CoralFeature
class CoralFeature extends Feature{
 generate(context: FeatureContext): boolean;
}
class Static_CoralFeature {
static method_40162(random: Random,blocks: RegistryEntryList_Named): Optional;
static method_40161(random: Random,blocks: RegistryEntryList_Named): Optional;
static method_40030(direction: Direction,worldAccess: WorldAccess,blockPos: BlockPos,block: Block): void;
static method_40029(worldAccess: WorldAccess,blockPos: BlockPos,block: Block): void;
static method_40160(random: Random,blocks: RegistryEntryList_Named): Optional;
}

//net.minecraft.world.gen.feature.DiskFeature
class DiskFeature extends Feature{
 generate(context: FeatureContext): boolean;
}

//net.minecraft.world.gen.feature.KelpFeature
class KelpFeature extends Feature{
 generate(context: FeatureContext): boolean;
}

//net.minecraft.world.gen.feature.FreezeTopLayerFeature
class FreezeTopLayerFeature extends Feature{
 generate(context: FeatureContext): boolean;
}

//net.minecraft.world.gen.feature.TwistingVinesFeature
class TwistingVinesFeature extends Feature{
 generate(context: FeatureContext): boolean;
}
class Static_TwistingVinesFeature {
static generateVineColumn(world: WorldAccess,random: Random,pos: BlockPos_Mutable,maxLength: number,minAge: number,maxAge: number): void;
static isNotSuitable(world: WorldAccess,pos: BlockPos): boolean;
static canGenerate(world: WorldAccess,pos: BlockPos_Mutable): boolean;
}

//net.minecraft.world.gen.feature.EndGatewayFeature
class EndGatewayFeature extends Feature{
 generate(context: FeatureContext): boolean;
}
class Static_EndGatewayFeature {
static method_18037(structureWorldAccess: StructureWorldAccess,blockPos: BlockPos,endGatewayFeatureConfig: EndGatewayFeatureConfig,pos: BlockPos): void;
}

//net.minecraft.world.gen.feature.SeaPickleFeature
class SeaPickleFeature extends Feature{
 generate(context: FeatureContext): boolean;
}

//net.minecraft.world.gen.feature.ReplaceBlobsFeature
class ReplaceBlobsFeature extends Feature{
 generate(context: FeatureContext): boolean;
}
class Static_ReplaceBlobsFeature {
static moveDownToTarget(world: WorldAccess,mutablePos: BlockPos_Mutable,target: Block): BlockPos;
}

//net.minecraft.world.gen.feature.NoOpFeature
class NoOpFeature extends Feature{
 generate(context: FeatureContext): boolean;
}

//net.minecraft.world.gen.feature.RandomBooleanFeature
class RandomBooleanFeature extends Feature{
 generate(context: FeatureContext): boolean;
}

//net.minecraft.world.gen.feature.HugeMushroomFeature
class HugeMushroomFeature extends Feature{
 generate(context: FeatureContext): boolean;
}

//net.minecraft.world.gen.feature.FillLayerFeature
class FillLayerFeature extends Feature{
 generate(context: FeatureContext): boolean;
}

//net.minecraft.world.gen.feature.LargeDripstoneFeature
class LargeDripstoneFeature extends Feature{
 generate(context: FeatureContext): boolean;
}
class Static_LargeDripstoneFeature {
static createGenerator(pos: BlockPos,isStalagmite: boolean,random: Random,scale: number,bluntness: FloatProvider,heightScale: FloatProvider): LargeDripstoneFeature_DripstoneGenerator;
}

//net.minecraft.world.gen.feature.BlockColumnFeature
class BlockColumnFeature extends Feature{
 generate(context: FeatureContext): boolean;
}
class Static_BlockColumnFeature {
static adjustLayerHeights(layerHeights: number[],expectedHeight: number,actualHeight: number,prioritizeTip: boolean): void;
}

//net.minecraft.world.gen.feature.RandomFeature
class RandomFeature extends Feature{
 generate(context: FeatureContext): boolean;
}

//net.minecraft.world.gen.feature.DungeonFeature
class DungeonFeature extends Feature{
 generate(context: FeatureContext): boolean;
}
class Static_DungeonFeature {
static LOGGER: Logger;
static MOB_SPAWNER_ENTITIES: EntityType[];
static AIR: BlockState;
}

//net.minecraft.world.gen.feature.ForestRockFeature
class ForestRockFeature extends Feature{
 generate(context: FeatureContext): boolean;
}

//net.minecraft.world.gen.feature.MultifaceGrowthFeature
class MultifaceGrowthFeature extends Feature{
 generate(context: FeatureContext): boolean;
}
class Static_MultifaceGrowthFeature {
static generate(world: StructureWorldAccess,pos: BlockPos,state: BlockState,config: MultifaceGrowthFeatureConfig,random: Random,directions: List): boolean;
static isAirOrWater(state: BlockState): boolean;
}

//net.minecraft.world.gen.feature.BlueIceFeature
class BlueIceFeature extends Feature{
 generate(context: FeatureContext): boolean;
}

//net.minecraft.world.gen.feature.VoidStartPlatformFeature
class VoidStartPlatformFeature extends Feature{
 generate(context: FeatureContext): boolean;
}
class Static_VoidStartPlatformFeature {
static getDistance(x1: number,z1: number,x2: number,z2: number): number;
static START_BLOCK: BlockPos;
static START_CHUNK: ChunkPos;
static MAX_RADIUS: number;
static field_31521: number;
}

//net.minecraft.world.gen.feature.ChorusPlantFeature
class ChorusPlantFeature extends Feature{
 generate(context: FeatureContext): boolean;
}

//net.minecraft.world.gen.feature.GlowstoneBlobFeature
class GlowstoneBlobFeature extends Feature{
 generate(context: FeatureContext): boolean;
}

//net.minecraft.world.gen.feature.EmeraldOreFeature
class EmeraldOreFeature extends Feature{
 generate(context: FeatureContext): boolean;
}

//net.minecraft.world.gen.feature.BlockPileFeature
class BlockPileFeature extends Feature{
 generate(context: FeatureContext): boolean;
}

//net.minecraft.world.gen.feature.VinesFeature
class VinesFeature extends Feature{
 generate(context: FeatureContext): boolean;
}

//net.minecraft.world.gen.feature.EndIslandFeature
class EndIslandFeature extends Feature{
 generate(context: FeatureContext): boolean;
}

//net.minecraft.world.gen.feature.UnderwaterMagmaFeature
class UnderwaterMagmaFeature extends Feature{
 generate(context: FeatureContext): boolean;
}
class Static_UnderwaterMagmaFeature {
static method_33767(structureWorldAccess: StructureWorldAccess,pos: BlockPos): number;
static method_33770(state: BlockState): boolean;
static method_33766(random: Random,underwaterMagmaFeatureConfig: UnderwaterMagmaFeatureConfig,pos: BlockPos): boolean;
static method_33769(state: BlockState): boolean;
static getFloorHeight(world: StructureWorldAccess,pos: BlockPos,config: UnderwaterMagmaFeatureConfig): OptionalInt;
}

//net.minecraft.world.gen.feature.EndPortalFeature
class EndPortalFeature extends Feature{
 generate(context: FeatureContext): boolean;
}
class Static_EndPortalFeature {
static offsetOrigin(pos: BlockPos): BlockPos;
static field_31503: number;
static field_31504: number;
static field_31505: number;
static field_31506: number;
static ORIGIN: BlockPos;
}

//net.minecraft.world.gen.feature.HugeFungusFeature
class HugeFungusFeature extends Feature{
 generate(context: FeatureContext): boolean;
}
class Static_HugeFungusFeature {
static generateVines(pos: BlockPos,world: WorldAccess,random: Random): void;
static isReplaceable(world: StructureWorldAccess,pos: BlockPos,config: HugeFungusFeatureConfig,checkConfig: boolean): boolean;
static field_31507: number;
}

//net.minecraft.world.gen.feature.ScatteredOreFeature
class ScatteredOreFeature extends Feature{
 generate(context: FeatureContext): boolean;
}
class Static_ScatteredOreFeature {
static MAX_SPREAD: number;
}

//net.minecraft.world.gen.feature.DeltaFeature
class DeltaFeature extends Feature{
 generate(context: FeatureContext): boolean;
}
class Static_DeltaFeature {
static canPlace(world: WorldAccess,pos: BlockPos,config: DeltaFeatureConfig): boolean;
static CANNOT_REPLACE_BLOCKS: ImmutableList;
static DIRECTIONS: Direction[];
static field_31501: number;
}

//net.minecraft.world.gen.feature.IceSpikeFeature
class IceSpikeFeature extends Feature{
 generate(context: FeatureContext): boolean;
}

//net.minecraft.world.gen.feature.OreFeature
class OreFeature extends Feature{
 generate(context: FeatureContext): boolean;
}
class Static_OreFeature {
static shouldPlace(state: BlockState,posToState: Function,random: Random,config: OreFeatureConfig,target: OreFeatureConfig_Target,pos: BlockPos_Mutable): boolean;
static shouldNotDiscard(random: Random,chance: number): boolean;
}

//net.minecraft.world.gen.feature.BambooFeature
class BambooFeature extends Feature{
 generate(context: FeatureContext): boolean;
}
class Static_BambooFeature {
static BAMBOO: BlockState;
static BAMBOO_TOP_1: BlockState;
static BAMBOO_TOP_2: BlockState;
static BAMBOO_TOP_3: BlockState;
}

//net.minecraft.world.gen.feature.DesertWellFeature
class DesertWellFeature extends Feature{
 generate(context: FeatureContext): boolean;
}
class Static_DesertWellFeature {
static method_49235(blockPos: BlockPos,blockEntity: BrushableBlockEntity): void;
static generateSuspiciousSand(world: StructureWorldAccess,pos: BlockPos): void;
static CAN_GENERATE: BlockStatePredicate;
}

//net.minecraft.world.gen.feature.EndSpikeFeature
class EndSpikeFeature extends Feature{
 generate(context: FeatureContext): boolean;
}
class Static_EndSpikeFeature {
static getSpikes(world: StructureWorldAccess): List;
static COUNT: number;
static DISTANCE_FROM_ORIGIN: number;
static CACHE: LoadingCache;
}

//net.minecraft.world.gen.feature.FossilFeature
class FossilFeature extends Feature{
 generate(context: FeatureContext): boolean;
}
class Static_FossilFeature {
static getEmptyCorners(world: StructureWorldAccess,box: BlockBox): number;
static method_34296(structureWorldAccess: StructureWorldAccess,mutableInt: MutableInt,pos: BlockPos): void;
}

//net.minecraft.world.gen.feature.SmallDripstoneFeature
class SmallDripstoneFeature extends Feature{
 generate(context: FeatureContext): boolean;
}
class Static_SmallDripstoneFeature {
static getDirection(world: WorldAccess,pos: BlockPos,random: Random): Optional;
static generateDripstoneBlocks(world: WorldAccess,random: Random,pos: BlockPos,config: SmallDripstoneFeatureConfig): void;
}

//net.minecraft.world.gen.feature.RandomPatchFeature
class RandomPatchFeature extends Feature{
 generate(context: FeatureContext): boolean;
}

//net.minecraft.world.gen.feature.NetherForestVegetationFeature
class NetherForestVegetationFeature extends Feature{
 generate(context: FeatureContext): boolean;
}

//net.minecraft.world.gen.feature.GeodeFeature
class GeodeFeature extends Feature{
 generate(context: FeatureContext): boolean;
}
class Static_GeodeFeature {
static DIRECTIONS: Direction[];
}

//net.minecraft.world.gen.feature.RootSystemFeature
class RootSystemFeature extends Feature{
 generate(context: FeatureContext): boolean;
}
class Static_RootSystemFeature {
static hasSpaceForTree(world: StructureWorldAccess,config: RootSystemFeatureConfig,pos: BlockPos): boolean;
static method_34307(rootSystemFeatureConfig: RootSystemFeatureConfig,state: BlockState): boolean;
static generateRoots(world: StructureWorldAccess,config: RootSystemFeatureConfig,random: Random,x: number,z: number,mutablePos: BlockPos_Mutable): void;
static isAirOrWater(state: BlockState,height: number,allowedVerticalWaterForTree: number): boolean;
static generateHangingRoots(world: StructureWorldAccess,config: RootSystemFeatureConfig,random: Random,pos: BlockPos,mutablePos: BlockPos_Mutable): void;
static generateTreeAndRoots(world: StructureWorldAccess,generator: ChunkGenerator,config: RootSystemFeatureConfig,random: Random,mutablePos: BlockPos_Mutable,pos: BlockPos): boolean;
static generateRootsColumn(pos: BlockPos,maxY: number,world: StructureWorldAccess,config: RootSystemFeatureConfig,random: Random): void;
}

//net.minecraft.world.gen.feature.BonusChestFeature
class BonusChestFeature extends Feature{
 generate(context: FeatureContext): boolean;
}

//net.minecraft.client.util.ModelIdentifier
class ModelIdentifier extends Identifier{
 equals(object: Object): boolean;
 toString(): string;
 hashCode(): number;
 getVariant(): string;
}
class Static_ModelIdentifier {
static toLowerCase(string: string): string;
static ofVanilla(path: string,variant: string): ModelIdentifier;
static SEPARATOR: char;
}

//net.minecraft.structure.pool.SinglePoolElement
class SinglePoolElement extends StructurePoolElement{
 toString(): string;
 getType(): StructurePoolElementType;
 generate(structureTemplateManager: StructureTemplateManager,world: StructureWorldAccess,structureAccessor: StructureAccessor,chunkGenerator: ChunkGenerator,pos: BlockPos,pivot: BlockPos,rotation: BlockRotation,box: BlockBox,random: Random,keepJigsaws: boolean): boolean;
 getBoundingBox(structureTemplateManager: StructureTemplateManager,pos: BlockPos,rotation: BlockRotation): BlockBox;
 getStart(structureTemplateManager: StructureTemplateManager,rotation: BlockRotation): Vec3i;
 getStructureBlockInfos(structureTemplateManager: StructureTemplateManager,pos: BlockPos,rotation: BlockRotation,random: Random): List;
 getDataStructureBlocks(structureTemplateManager: StructureTemplateManager,pos: BlockPos,rotation: BlockRotation,mirroredAndRotated: boolean): List;
}
class Static_SinglePoolElement {
static method_28881(pool: SinglePoolElement): RegistryEntry;
static processorsGetter(): RecordCodecBuilder;
static method_49540(): string;
static method_28879(pool: SinglePoolElement): Either;
static method_28878(instance: RecordCodecBuilder_Instance): App;
static encodeLocation(location: Either,ops: DynamicOps,prefix: Object): DataResult;
static locationGetter(): RecordCodecBuilder;
static LOCATION_CODEC: Codec;
static CODEC: Codec;
}

//net.minecraft.structure.pool.FeaturePoolElement
class FeaturePoolElement extends StructurePoolElement{
 toString(): string;
 getType(): StructurePoolElementType;
 generate(structureTemplateManager: StructureTemplateManager,world: StructureWorldAccess,structureAccessor: StructureAccessor,chunkGenerator: ChunkGenerator,pos: BlockPos,pivot: BlockPos,rotation: BlockRotation,box: BlockBox,random: Random,keepJigsaws: boolean): boolean;
 getBoundingBox(structureTemplateManager: StructureTemplateManager,pos: BlockPos,rotation: BlockRotation): BlockBox;
 getStart(structureTemplateManager: StructureTemplateManager,rotation: BlockRotation): Vec3i;
 getStructureBlockInfos(structureTemplateManager: StructureTemplateManager,pos: BlockPos,rotation: BlockRotation,random: Random): List;
}
class Static_FeaturePoolElement {
static method_28872(pool: FeaturePoolElement): RegistryEntry;
static method_28871(instance: RecordCodecBuilder_Instance): App;
static CODEC: Codec;
}

//net.minecraft.structure.pool.ListPoolElement
class ListPoolElement extends StructurePoolElement{
 toString(): string;
 getType(): StructurePoolElementType;
 generate(structureTemplateManager: StructureTemplateManager,world: StructureWorldAccess,structureAccessor: StructureAccessor,chunkGenerator: ChunkGenerator,pos: BlockPos,pivot: BlockPos,rotation: BlockRotation,box: BlockBox,random: Random,keepJigsaws: boolean): boolean;
 getBoundingBox(structureTemplateManager: StructureTemplateManager,pos: BlockPos,rotation: BlockRotation): BlockBox;
 getStart(structureTemplateManager: StructureTemplateManager,rotation: BlockRotation): Vec3i;
 setProjection(projection: StructurePool_Projection): StructurePoolElement;
 getStructureBlockInfos(structureTemplateManager: StructureTemplateManager,pos: BlockPos,rotation: BlockRotation,random: Random): List;
}
class Static_ListPoolElement {
static method_35370(structureTemplateManager: StructureTemplateManager,blockPos: BlockPos,blockRotation: BlockRotation,element: StructurePoolElement): BlockBox;
static method_28875(instance: RecordCodecBuilder_Instance): App;
static method_35369(element: StructurePoolElement): boolean;
static method_16620(projection: StructurePool_Projection,element: StructurePoolElement): void;
static method_28876(pool: ListPoolElement): List;
static method_35371(): IllegalStateException;
static CODEC: Codec;
}

//net.minecraft.structure.pool.EmptyPoolElement
class EmptyPoolElement extends StructurePoolElement{
 toString(): string;
 getType(): StructurePoolElementType;
 generate(structureTemplateManager: StructureTemplateManager,world: StructureWorldAccess,structureAccessor: StructureAccessor,chunkGenerator: ChunkGenerator,pos: BlockPos,pivot: BlockPos,rotation: BlockRotation,box: BlockBox,random: Random,keepJigsaws: boolean): boolean;
 getBoundingBox(structureTemplateManager: StructureTemplateManager,pos: BlockPos,rotation: BlockRotation): BlockBox;
 getStart(structureTemplateManager: StructureTemplateManager,rotation: BlockRotation): Vec3i;
 getStructureBlockInfos(structureTemplateManager: StructureTemplateManager,pos: BlockPos,rotation: BlockRotation,random: Random): List;
}
class Static_EmptyPoolElement {
static method_28870(): EmptyPoolElement;
static CODEC: Codec;
static INSTANCE: EmptyPoolElement;
}

//net.minecraft.block.enums.StructureBlockMode
class StructureBlockMode extends Enum, StringIdentifiable{
 asText(): Text;
 asString(): string;
}
class Static_StructureBlockMode {
static values(): StructureBlockMode[];
static valueOf(string: string): StructureBlockMode;
static method_36737(): StructureBlockMode[];
static SAVE: StructureBlockMode;
static LOAD: StructureBlockMode;
static CORNER: StructureBlockMode;
static DATA: StructureBlockMode;
static field_12700: StructureBlockMode[];
}

//net.minecraft.block.enums.WallShape
class WallShape extends Enum, StringIdentifiable{
 toString(): string;
 asString(): string;
}
class Static_WallShape {
static values(): WallShape[];
static valueOf(string: string): WallShape;
static method_36739(): WallShape[];
static NONE: WallShape;
static LOW: WallShape;
static TALL: WallShape;
static field_22182: WallShape[];
}

//net.minecraft.world.Heightmap$Type
class Heightmap_Type extends Enum, StringIdentifiable{
 getName(): string;
 isStoredServerSide(): boolean;
 asString(): string;
 shouldSendToClient(): boolean;
 getBlockPredicate(): Predicate;
}
class Static_Heightmap_Type {
static values(): Heightmap_Type;
static valueOf(string: string): Heightmap_Type;
static method_16686(state: BlockState): boolean;
static method_36752(): Heightmap_Type;
static method_16685(state: BlockState): boolean;
static WORLD_SURFACE_WG: Heightmap_Type;
static WORLD_SURFACE: Heightmap_Type;
static OCEAN_FLOOR_WG: Heightmap_Type;
static OCEAN_FLOOR: Heightmap_Type;
static MOTION_BLOCKING: Heightmap_Type;
static MOTION_BLOCKING_NO_LEAVES: Heightmap_Type;
static CODEC: Codec;
static field_13199: Heightmap_Type;
}

//net.minecraft.block.enums.ComparatorMode
class ComparatorMode extends Enum, StringIdentifiable{
 toString(): string;
 asString(): string;
}
class Static_ComparatorMode {
static values(): ComparatorMode[];
static valueOf(string: string): ComparatorMode;
static method_36725(): ComparatorMode[];
static COMPARE: ComparatorMode;
static SUBTRACT: ComparatorMode;
static field_12579: ComparatorMode[];
}

//net.minecraft.block.enums.BedPart
class BedPart extends Enum, StringIdentifiable{
 toString(): string;
 asString(): string;
}
class Static_BedPart {
static values(): BedPart[];
static valueOf(string: string): BedPart;
static method_36722(): BedPart[];
static HEAD: BedPart;
static FOOT: BedPart;
static field_12558: BedPart[];
}

//net.minecraft.world.biome.BiomeEffects$GrassColorModifier
class BiomeEffects_GrassColorModifier extends Enum, StringIdentifiable{
 getName(): string;
 asString(): string;
 getModifiedGrassColor(x: number,z: number,color: number): number;
}
class Static_BiomeEffects_GrassColorModifier {
static values(): BiomeEffects_GrassColorModifier;
static valueOf(string: string): BiomeEffects_GrassColorModifier;
static method_36701(): BiomeEffects_GrassColorModifier;
static NONE: BiomeEffects_GrassColorModifier;
static DARK_FOREST: BiomeEffects_GrassColorModifier;
static SWAMP: BiomeEffects_GrassColorModifier;
static CODEC: Codec;
static field_26432: BiomeEffects_GrassColorModifier;
}

//net.minecraft.entity.SpawnGroup
class SpawnGroup extends Enum, StringIdentifiable{
 getName(): string;
 getImmediateDespawnRange(): number;
 asString(): string;
 getCapacity(): number;
 getDespawnStartRange(): number;
 isPeaceful(): boolean;
 isRare(): boolean;
}
class Static_SpawnGroup {
static values(): SpawnGroup[];
static valueOf(string: string): SpawnGroup;
static method_36609(): SpawnGroup[];
static MONSTER: SpawnGroup;
static CREATURE: SpawnGroup;
static AMBIENT: SpawnGroup;
static AXOLOTLS: SpawnGroup;
static UNDERGROUND_WATER_CREATURE: SpawnGroup;
static WATER_CREATURE: SpawnGroup;
static WATER_AMBIENT: SpawnGroup;
static MISC: SpawnGroup;
static CODEC: Codec;
static field_6301: SpawnGroup[];
}

//net.minecraft.world.biome.Biome$TemperatureModifier
class Biome_TemperatureModifier extends Enum, StringIdentifiable{
 getName(): string;
 asString(): string;
 getModifiedTemperature(pos: BlockPos,temperature: number): number;
}
class Static_Biome_TemperatureModifier {
static values(): Biome_TemperatureModifier;
static valueOf(string: string): Biome_TemperatureModifier;
static method_36700(): Biome_TemperatureModifier;
static NONE: Biome_TemperatureModifier;
static FROZEN: Biome_TemperatureModifier;
static CODEC: Codec;
static field_26412: Biome_TemperatureModifier;
}

//net.minecraft.world.gen.chunk.placement.StructurePlacement$FrequencyReductionMethod
class StructurePlacement_FrequencyReductionMethod extends Enum, StringIdentifiable{
 asString(): string;
 shouldGenerate(seed: long,salt: number,chunkX: number,chunkZ: number,chance: number): boolean;
}
class Static_StructurePlacement_FrequencyReductionMethod {
static values(): StructurePlacement_FrequencyReductionMethod;
static valueOf(string: string): StructurePlacement_FrequencyReductionMethod;
static method_41649(): StructurePlacement_FrequencyReductionMethod;
static DEFAULT: StructurePlacement_FrequencyReductionMethod;
static LEGACY_TYPE_1: StructurePlacement_FrequencyReductionMethod;
static LEGACY_TYPE_2: StructurePlacement_FrequencyReductionMethod;
static LEGACY_TYPE_3: StructurePlacement_FrequencyReductionMethod;
static CODEC: Codec;
static field_37789: StructurePlacement_FrequencyReductionMethod;
}

//net.minecraft.util.math.DirectionTransformation
class DirectionTransformation extends Enum, StringIdentifiable{
 toString(): string;
 map(direction: Direction): Direction;
 prepend(transformation: DirectionTransformation): DirectionTransformation;
 inverse(): DirectionTransformation;
 asString(): string;
 getMatrix(): Matrix3f;
 mapJigsawOrientation(orientation: JigsawOrientation): JigsawOrientation;
 shouldFlipDirection(axis: Direction_Axis): boolean;
}
class Static_DirectionTransformation {
static values(): DirectionTransformation[];
static valueOf(string: string): DirectionTransformation;
static method_26394(directionTransformation: DirectionTransformation): Pair;
static method_26390(directionTransformations: DirectionTransformation[][]): void;
static method_36928(): DirectionTransformation[];
static method_26384(i: number): DirectionTransformation[];
static method_26392(directionTransformation: DirectionTransformation): DirectionTransformation;
static method_26386(directionTransformation: DirectionTransformation,directionTransformation2: DirectionTransformation): boolean;
static method_26393(directionTransformation: DirectionTransformation): DirectionTransformation;
static IDENTITY: DirectionTransformation;
static ROT_180_FACE_XY: DirectionTransformation;
static ROT_180_FACE_XZ: DirectionTransformation;
static ROT_180_FACE_YZ: DirectionTransformation;
static ROT_120_NNN: DirectionTransformation;
static ROT_120_NNP: DirectionTransformation;
static ROT_120_NPN: DirectionTransformation;
static ROT_120_NPP: DirectionTransformation;
static ROT_120_PNN: DirectionTransformation;
static ROT_120_PNP: DirectionTransformation;
static ROT_120_PPN: DirectionTransformation;
static ROT_120_PPP: DirectionTransformation;
static ROT_180_EDGE_XY_NEG: DirectionTransformation;
static ROT_180_EDGE_XY_POS: DirectionTransformation;
static ROT_180_EDGE_XZ_NEG: DirectionTransformation;
static ROT_180_EDGE_XZ_POS: DirectionTransformation;
static ROT_180_EDGE_YZ_NEG: DirectionTransformation;
static ROT_180_EDGE_YZ_POS: DirectionTransformation;
static ROT_90_X_NEG: DirectionTransformation;
static ROT_90_X_POS: DirectionTransformation;
static ROT_90_Y_NEG: DirectionTransformation;
static ROT_90_Y_POS: DirectionTransformation;
static ROT_90_Z_NEG: DirectionTransformation;
static ROT_90_Z_POS: DirectionTransformation;
static INVERSION: DirectionTransformation;
static INVERT_X: DirectionTransformation;
static INVERT_Y: DirectionTransformation;
static INVERT_Z: DirectionTransformation;
static ROT_60_REF_NNN: DirectionTransformation;
static ROT_60_REF_NNP: DirectionTransformation;
static ROT_60_REF_NPN: DirectionTransformation;
static ROT_60_REF_NPP: DirectionTransformation;
static ROT_60_REF_PNN: DirectionTransformation;
static ROT_60_REF_PNP: DirectionTransformation;
static ROT_60_REF_PPN: DirectionTransformation;
static ROT_60_REF_PPP: DirectionTransformation;
static SWAP_XY: DirectionTransformation;
static SWAP_YZ: DirectionTransformation;
static SWAP_XZ: DirectionTransformation;
static SWAP_NEG_XY: DirectionTransformation;
static SWAP_NEG_YZ: DirectionTransformation;
static SWAP_NEG_XZ: DirectionTransformation;
static ROT_90_REF_X_NEG: DirectionTransformation;
static ROT_90_REF_X_POS: DirectionTransformation;
static ROT_90_REF_Y_NEG: DirectionTransformation;
static ROT_90_REF_Y_POS: DirectionTransformation;
static ROT_90_REF_Z_NEG: DirectionTransformation;
static ROT_90_REF_Z_POS: DirectionTransformation;
static COMBINATIONS: DirectionTransformation[][];
static INVERSES: DirectionTransformation[];
static field_23298: DirectionTransformation[];
}

//net.minecraft.client.render.model.json.ModelTransformationMode
class ModelTransformationMode extends Enum, StringIdentifiable{
 getIndex(): byte;
 asString(): string;
 isFirstPerson(): boolean;
}
class Static_ModelTransformationMode {
static values(): ModelTransformationMode[];
static valueOf(string: string): ModelTransformationMode;
static method_36922(): ModelTransformationMode[];
static NONE: ModelTransformationMode;
static THIRD_PERSON_LEFT_HAND: ModelTransformationMode;
static THIRD_PERSON_RIGHT_HAND: ModelTransformationMode;
static FIRST_PERSON_LEFT_HAND: ModelTransformationMode;
static FIRST_PERSON_RIGHT_HAND: ModelTransformationMode;
static HEAD: ModelTransformationMode;
static GUI: ModelTransformationMode;
static GROUND: ModelTransformationMode;
static FIXED: ModelTransformationMode;
static CODEC: Codec;
static FROM_INDEX: IntFunction;
static field_4314: ModelTransformationMode[];
}

//net.minecraft.client.network.message.MessageTrustStatus
class MessageTrustStatus extends Enum, StringIdentifiable{
 asString(): string;
 isInsecure(): boolean;
 createIndicator(message: SignedMessage): MessageIndicator;
}
class Static_MessageTrustStatus {
static values(): MessageTrustStatus[];
static valueOf(string: string): MessageTrustStatus;
static isModified(message: SignedMessage,decorated: Text): boolean;
static getStatus(message: SignedMessage,decorated: Text,receptionTimestamp: Instant): MessageTrustStatus;
static method_44743(): MessageTrustStatus[];
static isNotInDefaultFont(style: Style): boolean;
static isNotInDefaultFont(content: Text): boolean;
static method_45757(style: Style,part: string): Optional;
static SECURE: MessageTrustStatus;
static MODIFIED: MessageTrustStatus;
static NOT_SECURE: MessageTrustStatus;
static CODEC: Codec;
static field_39784: MessageTrustStatus[];
}

//net.minecraft.village.VillageGossipType
class VillageGossipType extends Enum, StringIdentifiable{
 asString(): string;
 key: string;
 multiplier: number;
 maxValue: number;
 decay: number;
 shareDecrement: number;
}
class Static_VillageGossipType {
static values(): VillageGossipType[];
static valueOf(string: string): VillageGossipType;
static method_36623(): VillageGossipType[];
static MAJOR_NEGATIVE: VillageGossipType;
static MINOR_NEGATIVE: VillageGossipType;
static MINOR_POSITIVE: VillageGossipType;
static MAJOR_POSITIVE: VillageGossipType;
static TRADING: VillageGossipType;
static MAX_TRADING_REPUTATION: number;
static TRADING_GOSSIP_SHARE_DECREMENT: number;
static TRADING_GOSSIP_DECAY: number;
static CODEC: Codec;
static field_18436: VillageGossipType[];
}

//net.minecraft.block.enums.StairShape
class StairShape extends Enum, StringIdentifiable{
 toString(): string;
 asString(): string;
}
class Static_StairShape {
static values(): StairShape[];
static valueOf(string: string): StairShape;
static method_36736(): StairShape[];
static STRAIGHT: StairShape;
static INNER_LEFT: StairShape;
static INNER_RIGHT: StairShape;
static OUTER_LEFT: StairShape;
static OUTER_RIGHT: StairShape;
static field_12711: StairShape[];
}

//net.minecraft.client.QuickPlayLogger$WorldType
class QuickPlayLogger_WorldType extends Enum, StringIdentifiable{
 asString(): string;
}
class Static_QuickPlayLogger_WorldType {
static values(): QuickPlayLogger_WorldType;
static valueOf(string: string): QuickPlayLogger_WorldType;
static method_51271(): QuickPlayLogger_WorldType;
static SINGLEPLAYER: QuickPlayLogger_WorldType;
static MULTIPLAYER: QuickPlayLogger_WorldType;
static REALMS: QuickPlayLogger_WorldType;
static CODEC: Codec;
static field_44573: QuickPlayLogger_WorldType;
}

//net.minecraft.entity.damage.DamageEffects
class DamageEffects extends Enum, StringIdentifiable{
 asString(): string;
 getSound(): SoundEvent;
}
class Static_DamageEffects {
static values(): DamageEffects[];
static valueOf(string: string): DamageEffects;
static method_48787(): DamageEffects[];
static HURT: DamageEffects;
static THORNS: DamageEffects;
static DROWNING: DamageEffects;
static BURNING: DamageEffects;
static POKING: DamageEffects;
static FREEZING: DamageEffects;
static CODEC: Codec;
static field_42284: DamageEffects[];
}

//net.minecraft.structure.RuinedPortalStructurePiece$VerticalPlacement
class RuinedPortalStructurePiece_VerticalPlacement extends Enum, StringIdentifiable{
 getId(): string;
 asString(): string;
}
class Static_RuinedPortalStructurePiece_VerticalPlacement {
static values(): RuinedPortalStructurePiece_VerticalPlacement;
static valueOf(string: string): RuinedPortalStructurePiece_VerticalPlacement;
static method_36761(): RuinedPortalStructurePiece_VerticalPlacement;
static getFromId(id: string): RuinedPortalStructurePiece_VerticalPlacement;
static ON_LAND_SURFACE: RuinedPortalStructurePiece_VerticalPlacement;
static PARTLY_BURIED: RuinedPortalStructurePiece_VerticalPlacement;
static ON_OCEAN_FLOOR: RuinedPortalStructurePiece_VerticalPlacement;
static IN_MOUNTAIN: RuinedPortalStructurePiece_VerticalPlacement;
static UNDERGROUND: RuinedPortalStructurePiece_VerticalPlacement;
static IN_NETHER: RuinedPortalStructurePiece_VerticalPlacement;
static CODEC: StringIdentifiable_Codec;
static field_24037: RuinedPortalStructurePiece_VerticalPlacement;
}

//net.minecraft.block.enums.ChestType
class ChestType extends Enum, StringIdentifiable{
 asString(): string;
 getOpposite(): ChestType;
}
class Static_ChestType {
static values(): ChestType[];
static valueOf(string: string): ChestType;
static method_36724(): ChestType[];
static SINGLE: ChestType;
static LEFT: ChestType;
static RIGHT: ChestType;
static field_12573: ChestType[];
}

//net.minecraft.entity.decoration.DisplayEntity$TextDisplayEntity$TextAlignment
class DisplayEntity_TextDisplayEntity_TextAlignment extends Enum, StringIdentifiable{
 asString(): string;
}
class Static_DisplayEntity_TextDisplayEntity_TextAlignment {
static values(): DisplayEntity_TextDisplayEntity_TextAlignment;
static valueOf(string: string): DisplayEntity_TextDisplayEntity_TextAlignment;
static method_48920(): DisplayEntity_TextDisplayEntity_TextAlignment;
static CENTER: DisplayEntity_TextDisplayEntity_TextAlignment;
static LEFT: DisplayEntity_TextDisplayEntity_TextAlignment;
static RIGHT: DisplayEntity_TextDisplayEntity_TextAlignment;
static CODEC: Codec;
static field_42455: DisplayEntity_TextDisplayEntity_TextAlignment;
}

//net.minecraft.world.gen.GenerationStep$Carver
class GenerationStep_Carver extends Enum, StringIdentifiable{
 getName(): string;
 asString(): string;
}
class Static_GenerationStep_Carver {
static values(): GenerationStep_Carver;
static valueOf(string: string): GenerationStep_Carver;
static method_36750(): GenerationStep_Carver;
static AIR: GenerationStep_Carver;
static LIQUID: GenerationStep_Carver;
static CODEC: Codec;
static field_13170: GenerationStep_Carver;
}

//net.minecraft.block.enums.Thickness
class Thickness extends Enum, StringIdentifiable{
 toString(): string;
 asString(): string;
}
class Static_Thickness {
static values(): Thickness[];
static valueOf(string: string): Thickness;
static method_36728(): Thickness[];
static TIP_MERGE: Thickness;
static TIP: Thickness;
static FRUSTUM: Thickness;
static MIDDLE: Thickness;
static BASE: Thickness;
static field_28070: Thickness[];
}

//net.minecraft.world.gen.densityfunction.DensityFunctionTypes$BinaryOperationLike$Type
class DensityFunctionTypes_BinaryOperationLike_Type extends Enum, StringIdentifiable{
 asString(): string;
}
class Static_DensityFunctionTypes_BinaryOperationLike_Type {
static values(): DensityFunctionTypes_BinaryOperationLike_Type;
static valueOf(string: string): DensityFunctionTypes_BinaryOperationLike_Type;
static method_40516(): DensityFunctionTypes_BinaryOperationLike_Type;
static ADD: DensityFunctionTypes_BinaryOperationLike_Type;
static MUL: DensityFunctionTypes_BinaryOperationLike_Type;
static MIN: DensityFunctionTypes_BinaryOperationLike_Type;
static MAX: DensityFunctionTypes_BinaryOperationLike_Type;
static field_36548: DensityFunctionTypes_BinaryOperationLike_Type;
}

//net.minecraft.block.entity.JigsawBlockEntity$Joint
class JigsawBlockEntity_Joint extends Enum, StringIdentifiable{
 asText(): Text;
 asString(): string;
}
class Static_JigsawBlockEntity_Joint {
static values(): JigsawBlockEntity_Joint;
static valueOf(string: string): JigsawBlockEntity_Joint;
static method_36716(): JigsawBlockEntity_Joint;
static method_26402(string: string,joint: JigsawBlockEntity_Joint): boolean;
static byName(name: string): Optional;
static ROLLABLE: JigsawBlockEntity_Joint;
static ALIGNED: JigsawBlockEntity_Joint;
static field_23332: JigsawBlockEntity_Joint;
}

//net.minecraft.block.enums.WireConnection
class WireConnection extends Enum, StringIdentifiable{
 toString(): string;
 isConnected(): boolean;
 asString(): string;
}
class Static_WireConnection {
static values(): WireConnection[];
static valueOf(string: string): WireConnection;
static method_36733(): WireConnection[];
static UP: WireConnection;
static SIDE: WireConnection;
static NONE: WireConnection;
static field_12688: WireConnection[];
}

//net.minecraft.client.font.FontType
class FontType extends Enum, StringIdentifiable{
 asString(): string;
 getLoaderCodec(): MapCodec;
}
class Static_FontType {
static values(): FontType[];
static valueOf(string: string): FontType;
static method_36876(): FontType[];
static BITMAP: FontType;
static TTF: FontType;
static SPACE: FontType;
static UNIHEX: FontType;
static REFERENCE: FontType;
static CODEC: Codec;
static field_2316: FontType[];
}

//net.minecraft.util.Formatting
class Formatting extends Enum, StringIdentifiable{
 getName(): string;
 toString(): string;
 isModifier(): boolean;
 isColor(): boolean;
 getCode(): char;
 asString(): string;
 getColorIndex(): number;
 getColorValue(): Integer;
}
class Static_Formatting {
static values(): Formatting[];
static valueOf(string: string): Formatting;
static strip(string: string): string;
static sanitize(name: string): string;
static method_36946(): Formatting[];
static method_541(f: Formatting): Formatting;
static method_531(f: Formatting): string;
static byCode(code: char): Formatting;
static byColorIndex(colorIndex: number): Formatting;
static byName(name: string): Formatting;
static getNames(colors: boolean,modifiers: boolean): Collection;
static BLACK: Formatting;
static DARK_BLUE: Formatting;
static DARK_GREEN: Formatting;
static DARK_AQUA: Formatting;
static DARK_RED: Formatting;
static DARK_PURPLE: Formatting;
static GOLD: Formatting;
static GRAY: Formatting;
static DARK_GRAY: Formatting;
static BLUE: Formatting;
static GREEN: Formatting;
static AQUA: Formatting;
static RED: Formatting;
static LIGHT_PURPLE: Formatting;
static YELLOW: Formatting;
static WHITE: Formatting;
static OBFUSCATED: Formatting;
static BOLD: Formatting;
static STRIKETHROUGH: Formatting;
static UNDERLINE: Formatting;
static ITALIC: Formatting;
static RESET: Formatting;
static CODEC: Codec;
static FORMATTING_CODE_PREFIX: char;
static BY_NAME: Map;
static FORMATTING_CODE_PATTERN: Pattern;
static field_1072: Formatting[];
}

//net.minecraft.block.enums.SlabType
class SlabType extends Enum, StringIdentifiable{
 toString(): string;
 asString(): string;
}
class Static_SlabType {
static values(): SlabType[];
static valueOf(string: string): SlabType;
static method_36735(): SlabType[];
static TOP: SlabType;
static BOTTOM: SlabType;
static DOUBLE: SlabType;
static field_12680: SlabType[];
}

//net.minecraft.block.enums.DoorHinge
class DoorHinge extends Enum, StringIdentifiable{
 toString(): string;
 asString(): string;
}
class Static_DoorHinge {
static values(): DoorHinge[];
static valueOf(string: string): DoorHinge;
static method_36726(): DoorHinge[];
static LEFT: DoorHinge;
static RIGHT: DoorHinge;
static field_12587: DoorHinge[];
}

//net.minecraft.util.DyeColor
class DyeColor extends Enum, StringIdentifiable{
 getName(): string;
 toString(): string;
 getId(): number;
 getFireworkColor(): number;
 getSignColor(): number;
 asString(): string;
 getMapColor(): MapColor;
 getColorComponents(): number[];
}
class Static_DyeColor {
static values(): DyeColor[];
static valueOf(string: string): DyeColor;
static method_7795(color: DyeColor): Integer;
static byFireworkColor(color: number): DyeColor;
static method_36676(): DyeColor[];
static method_7797(color: DyeColor): DyeColor;
static byId(id: number): DyeColor;
static byName(name: string,defaultColor: DyeColor): DyeColor;
static WHITE: DyeColor;
static ORANGE: DyeColor;
static MAGENTA: DyeColor;
static LIGHT_BLUE: DyeColor;
static YELLOW: DyeColor;
static LIME: DyeColor;
static PINK: DyeColor;
static GRAY: DyeColor;
static LIGHT_GRAY: DyeColor;
static CYAN: DyeColor;
static PURPLE: DyeColor;
static BLUE: DyeColor;
static BROWN: DyeColor;
static GREEN: DyeColor;
static RED: DyeColor;
static BLACK: DyeColor;
static BY_ID: IntFunction;
static BY_FIREWORK_COLOR: Int2ObjectOpenHashMap;
static CODEC: StringIdentifiable_Codec;
static field_7953: DyeColor[];
}

//net.minecraft.block.enums.WallMountLocation
class WallMountLocation extends Enum, StringIdentifiable{
 asString(): string;
}
class Static_WallMountLocation {
static values(): WallMountLocation[];
static valueOf(string: string): WallMountLocation;
static method_36720(): WallMountLocation[];
static FLOOR: WallMountLocation;
static WALL: WallMountLocation;
static CEILING: WallMountLocation;
static field_12474: WallMountLocation[];
}

//net.minecraft.entity.decoration.DisplayEntity$BillboardMode
class DisplayEntity_BillboardMode extends Enum, StringIdentifiable{
 asString(): string;
}
class Static_DisplayEntity_BillboardMode {
static values(): DisplayEntity_BillboardMode;
static valueOf(string: string): DisplayEntity_BillboardMode;
static method_48882(): DisplayEntity_BillboardMode;
static FIXED: DisplayEntity_BillboardMode;
static VERTICAL: DisplayEntity_BillboardMode;
static HORIZONTAL: DisplayEntity_BillboardMode;
static CENTER: DisplayEntity_BillboardMode;
static CODEC: Codec;
static FROM_INDEX: IntFunction;
static field_42414: DisplayEntity_BillboardMode;
}

//net.minecraft.text.Decoration$Parameter
class Decoration_Parameter extends Enum, StringIdentifiable{
 apply(content: Text,params: MessageType_Parameters): Text;
 asString(): string;
}
class Static_Decoration_Parameter {
static values(): Decoration_Parameter;
static valueOf(string: string): Decoration_Parameter;
static method_43839(content: Text,params: MessageType_Parameters): Text;
static method_43840(content: Text,params: MessageType_Parameters): Text;
static method_43838(content: Text,params: MessageType_Parameters): Text;
static method_43836(): Decoration_Parameter;
static SENDER: Decoration_Parameter;
static TARGET: Decoration_Parameter;
static CONTENT: Decoration_Parameter;
static CODEC: Codec;
static field_39226: Decoration_Parameter;
}

//net.minecraft.client.report.log.ChatLogEntry$Type
class ChatLogEntry_Type extends Enum, StringIdentifiable{
 asString(): string;
}
class Static_ChatLogEntry_Type {
static values(): ChatLogEntry_Type;
static valueOf(string: string): ChatLogEntry_Type;
static method_46540(): Codec;
static method_46542(): ChatLogEntry_Type;
static method_46541(): Codec;
static PLAYER: ChatLogEntry_Type;
static SYSTEM: ChatLogEntry_Type;
static field_40808: ChatLogEntry_Type;
}

//net.minecraft.block.enums.RailShape
class RailShape extends Enum, StringIdentifiable{
 getName(): string;
 toString(): string;
 isAscending(): boolean;
 asString(): string;
}
class Static_RailShape {
static values(): RailShape[];
static valueOf(string: string): RailShape;
static method_36732(): RailShape[];
static NORTH_SOUTH: RailShape;
static EAST_WEST: RailShape;
static ASCENDING_EAST: RailShape;
static ASCENDING_WEST: RailShape;
static ASCENDING_NORTH: RailShape;
static ASCENDING_SOUTH: RailShape;
static SOUTH_EAST: RailShape;
static SOUTH_WEST: RailShape;
static NORTH_WEST: RailShape;
static NORTH_EAST: RailShape;
static field_12673: RailShape[];
}

//net.minecraft.world.gen.structure.OceanRuinStructure$BiomeTemperature
class OceanRuinStructure_BiomeTemperature extends Enum, StringIdentifiable{
 getName(): string;
 asString(): string;
}
class Static_OceanRuinStructure_BiomeTemperature {
static values(): OceanRuinStructure_BiomeTemperature;
static valueOf(string: string): OceanRuinStructure_BiomeTemperature;
static method_36760(): OceanRuinStructure_BiomeTemperature;
static WARM: OceanRuinStructure_BiomeTemperature;
static COLD: OceanRuinStructure_BiomeTemperature;
static CODEC: Codec;
static field_14531: OceanRuinStructure_BiomeTemperature;
}

//net.minecraft.network.message.FilterMask$FilterStatus
class FilterMask_FilterStatus extends Enum, StringIdentifiable{
 asString(): string;
}
class Static_FilterMask_FilterStatus {
static values(): FilterMask_FilterStatus;
static valueOf(string: string): FilterMask_FilterStatus;
static method_46604(): Codec;
static method_46603(): Codec;
static method_46605(): Codec;
static method_45094(): FilterMask_FilterStatus;
static PASS_THROUGH: FilterMask_FilterStatus;
static FULLY_FILTERED: FilterMask_FilterStatus;
static PARTIALLY_FILTERED: FilterMask_FilterStatus;
static field_39950: FilterMask_FilterStatus;
}

//net.minecraft.world.gen.StructureTerrainAdaptation
class StructureTerrainAdaptation extends Enum, StringIdentifiable{
 asString(): string;
}
class Static_StructureTerrainAdaptation {
static values(): StructureTerrainAdaptation[];
static valueOf(string: string): StructureTerrainAdaptation;
static method_36756(): StructureTerrainAdaptation[];
static NONE: StructureTerrainAdaptation;
static BURY: StructureTerrainAdaptation;
static BEARD_THIN: StructureTerrainAdaptation;
static BEARD_BOX: StructureTerrainAdaptation;
static CODEC: Codec;
static field_28925: StructureTerrainAdaptation[];
}

//net.minecraft.block.enums.BlockHalf
class BlockHalf extends Enum, StringIdentifiable{
 toString(): string;
 asString(): string;
}
class Static_BlockHalf {
static values(): BlockHalf[];
static valueOf(string: string): BlockHalf;
static method_36729(): BlockHalf[];
static TOP: BlockHalf;
static BOTTOM: BlockHalf;
static field_12618: BlockHalf[];
}

//net.minecraft.world.gen.densityfunction.DensityFunctionTypes$WeirdScaledSampler$RarityValueMapper
class DensityFunctionTypes_WeirdScaledSampler_RarityValueMapper extends Enum, StringIdentifiable{
 asString(): string;
}
class Static_DensityFunctionTypes_WeirdScaledSampler_RarityValueMapper {
static values(): DensityFunctionTypes_WeirdScaledSampler_RarityValueMapper;
static valueOf(string: string): DensityFunctionTypes_WeirdScaledSampler_RarityValueMapper;
static method_41074(): DensityFunctionTypes_WeirdScaledSampler_RarityValueMapper;
static TYPE1: DensityFunctionTypes_WeirdScaledSampler_RarityValueMapper;
static TYPE2: DensityFunctionTypes_WeirdScaledSampler_RarityValueMapper;
static CODEC: Codec;
static field_37073: DensityFunctionTypes_WeirdScaledSampler_RarityValueMapper;
}

//net.minecraft.recipe.book.CookingRecipeCategory
class CookingRecipeCategory extends Enum, StringIdentifiable{
 asString(): string;
}
class Static_CookingRecipeCategory {
static values(): CookingRecipeCategory[];
static valueOf(string: string): CookingRecipeCategory;
static method_45439(): CookingRecipeCategory[];
static FOOD: CookingRecipeCategory;
static BLOCKS: CookingRecipeCategory;
static MISC: CookingRecipeCategory;
static CODEC: StringIdentifiable_Codec;
static field_40247: CookingRecipeCategory[];
}

//net.minecraft.client.util.telemetry.TelemetryEventProperty$ServerType
class TelemetryEventProperty_ServerType extends Enum, StringIdentifiable{
 asString(): string;
}
class Static_TelemetryEventProperty_ServerType {
static values(): TelemetryEventProperty_ServerType;
static valueOf(string: string): TelemetryEventProperty_ServerType;
static method_47758(): TelemetryEventProperty_ServerType;
static REALM: TelemetryEventProperty_ServerType;
static LOCAL: TelemetryEventProperty_ServerType;
static OTHER: TelemetryEventProperty_ServerType;
static CODEC: Codec;
static field_41495: TelemetryEventProperty_ServerType;
}

//net.minecraft.util.math.Direction
class Direction extends Enum, StringIdentifiable{
 getName(): string;
 toString(): string;
 getId(): number;
 rotateClockwise(axis: Direction_Axis): Direction;
 getRotationQuaternion(): Quaternionf;
 rotateYCounterclockwise(): Direction;
 asString(): string;
 rotateYClockwise(): Direction;
 getHorizontal(): number;
 asRotation(): number;
 getVector(): Vec3i;
 getDirection(): Direction_AxisDirection;
 getOpposite(): Direction;
 getAxis(): Direction_Axis;
 getOffsetZ(): number;
 getOffsetX(): number;
 getOffsetY(): number;
 pointsTo(yaw: number): boolean;
 getUnitVector(): Vector3f;
 rotateCounterclockwise(axis: Direction_Axis): Direction;
}
class Static_Direction {
static get(direction: Direction_AxisDirection,axis: Direction_Axis): Direction;
static values(): Direction[];
static valueOf(string: string): Direction;
static stream(): Stream;
static from(axis: Direction_Axis,direction: Direction_AxisDirection): Direction;
static transform(matrix: Matrix4f,direction: Direction): Direction;
static random(random: Random): Direction;
static shuffle(random: Random): Collection;
static fromVector(x: number,y: number,z: number): Direction;
static listClosest(first: Direction,second: Direction,third: Direction): Direction[];
static validateVertical(direction: Direction): DataResult;
static method_10155(direction: Direction): boolean;
static method_36931(): Direction[];
static method_10157(i: number): Direction[];
static method_10140(direction: Direction): number;
static method_49639(): string;
static method_10141(direction: Direction): number;
static method_10158(i: number): Direction[];
static fromHorizontal(value: number): Direction;
static byId(id: number): Direction;
static byName(name: string): Direction;
static getFacing(x: number,y: number,z: number): Direction;
static getFacing(x: number,y: number,z: number): Direction;
static fromRotation(rotation: number): Direction;
static getLookDirectionForAxis(entity: Entity,axis: Direction_Axis): Direction;
static getEntityFacingOrder(entity: Entity): Direction[];
static DOWN: Direction;
static UP: Direction;
static NORTH: Direction;
static SOUTH: Direction;
static WEST: Direction;
static EAST: Direction;
static CODEC: StringIdentifiable_Codec;
static VERTICAL_CODEC: Codec;
static ALL: Direction[];
static VALUES: Direction[];
static HORIZONTAL: Direction[];
static field_11037: Direction[];
}

//net.minecraft.structure.pool.StructurePool$Projection
class StructurePool_Projection extends Enum, StringIdentifiable{
 getId(): string;
 asString(): string;
 getProcessors(): ImmutableList;
}
class Static_StructurePool_Projection {
static values(): StructurePool_Projection;
static valueOf(string: string): StructurePool_Projection;
static method_36758(): StructurePool_Projection;
static getById(id: string): StructurePool_Projection;
static TERRAIN_MATCHING: StructurePool_Projection;
static RIGID: StructurePool_Projection;
static CODEC: StringIdentifiable_Codec;
static field_16683: StructurePool_Projection;
}

//net.minecraft.block.enums.BambooLeaves
class BambooLeaves extends Enum, StringIdentifiable{
 toString(): string;
 asString(): string;
}
class Static_BambooLeaves {
static values(): BambooLeaves[];
static valueOf(string: string): BambooLeaves;
static method_36721(): BambooLeaves[];
static NONE: BambooLeaves;
static SMALL: BambooLeaves;
static LARGE: BambooLeaves;
static field_12470: BambooLeaves[];
}

//net.minecraft.recipe.book.CraftingRecipeCategory
class CraftingRecipeCategory extends Enum, StringIdentifiable{
 asString(): string;
}
class Static_CraftingRecipeCategory {
static values(): CraftingRecipeCategory[];
static valueOf(string: string): CraftingRecipeCategory;
static method_45440(): CraftingRecipeCategory[];
static BUILDING: CraftingRecipeCategory;
static REDSTONE: CraftingRecipeCategory;
static EQUIPMENT: CraftingRecipeCategory;
static MISC: CraftingRecipeCategory;
static CODEC: StringIdentifiable_Codec;
static field_40254: CraftingRecipeCategory[];
}

//net.minecraft.util.math.VerticalSurfaceType
class VerticalSurfaceType extends Enum, StringIdentifiable{
 getOffset(): number;
 asString(): string;
 getDirection(): Direction;
}
class Static_VerticalSurfaceType {
static values(): VerticalSurfaceType[];
static valueOf(string: string): VerticalSurfaceType;
static method_36759(): VerticalSurfaceType[];
static CEILING: VerticalSurfaceType;
static FLOOR: VerticalSurfaceType;
static CODEC: Codec;
static field_29320: VerticalSurfaceType[];
}

//net.minecraft.world.GameMode
class GameMode extends Enum, StringIdentifiable{
 getName(): string;
 getId(): number;
 asString(): string;
 isCreative(): boolean;
 isBlockBreakingRestricted(): boolean;
 setAbilities(abilities: PlayerAbilities): void;
 isSurvivalLike(): boolean;
 getTranslatableName(): Text;
 getSimpleTranslatableName(): Text;
}
class Static_GameMode {
static values(): GameMode[];
static valueOf(string: string): GameMode;
static getId(gameMode: GameMode): number;
static method_36695(): GameMode[];
static getOrNull(id: number): GameMode;
static byId(id: number): GameMode;
static byName(name: string,defaultMode: GameMode): GameMode;
static byName(name: string): GameMode;
static SURVIVAL: GameMode;
static CREATIVE: GameMode;
static ADVENTURE: GameMode;
static SPECTATOR: GameMode;
static DEFAULT: GameMode;
static CODEC: StringIdentifiable_Codec;
static BY_ID: IntFunction;
static UNKNOWN: number;
static field_9222: GameMode[];
}

//net.minecraft.block.enums.Attachment
class Attachment extends Enum, StringIdentifiable{
 asString(): string;
}
class Static_Attachment {
static values(): Attachment[];
static valueOf(string: string): Attachment;
static method_36723(): Attachment[];
static FLOOR: Attachment;
static CEILING: Attachment;
static SINGLE_WALL: Attachment;
static DOUBLE_WALL: Attachment;
static field_17103: Attachment[];
}

//net.minecraft.world.StructureSpawns$BoundingBox
class StructureSpawns_BoundingBox extends Enum, StringIdentifiable{
 asString(): string;
}
class Static_StructureSpawns_BoundingBox {
static values(): StructureSpawns_BoundingBox;
static valueOf(string: string): StructureSpawns_BoundingBox;
static method_41152(): StructureSpawns_BoundingBox;
static PIECE: StructureSpawns_BoundingBox;
static STRUCTURE: StructureSpawns_BoundingBox;
static CODEC: Codec;
static field_37204: StructureSpawns_BoundingBox;
}

//net.minecraft.util.math.Direction$Axis
class Direction_Axis extends Enum, StringIdentifiable, Predicate{
 getName(): string;
 toString(): string;
 test(direction: Direction): boolean;
 test(object: Object): boolean;
 getType(): Direction_Type;
 asString(): string;
 isVertical(): boolean;
 isHorizontal(): boolean;
 choose(x: number,y: number,z: number): number;
 choose(x: number,y: number,z: number): number;
}
class Static_Direction_Axis {
static values(): Direction_Axis;
static valueOf(string: string): Direction_Axis;
static method_36932(): Direction_Axis;
static pickRandomAxis(random: Random): Direction_Axis;
static fromName(name: string): Direction_Axis;
static X: Direction_Axis;
static Y: Direction_Axis;
static Z: Direction_Axis;
static VALUES: Direction_Axis;
static CODEC: StringIdentifiable_Codec;
static field_11049: Direction_Axis;
}

//net.minecraft.block.enums.PistonType
class PistonType extends Enum, StringIdentifiable{
 toString(): string;
 asString(): string;
}
class Static_PistonType {
static values(): PistonType[];
static valueOf(string: string): PistonType;
static method_36731(): PistonType[];
static DEFAULT: PistonType;
static STICKY: PistonType;
static field_12636: PistonType[];
}

//net.minecraft.world.Difficulty
class Difficulty extends Enum, StringIdentifiable{
 getName(): string;
 getId(): number;
 getInfo(): Text;
 asString(): string;
 getTranslatableName(): Text;
}
class Static_Difficulty {
static values(): Difficulty[];
static valueOf(string: string): Difficulty;
static method_36597(): Difficulty[];
static byId(id: number): Difficulty;
static byName(name: string): Difficulty;
static PEACEFUL: Difficulty;
static EASY: Difficulty;
static NORMAL: Difficulty;
static HARD: Difficulty;
static CODEC: StringIdentifiable_Codec;
static BY_ID: IntFunction;
static field_5804: Difficulty[];
}

//net.minecraft.block.enums.Tilt
class Tilt extends Enum, StringIdentifiable{
 asString(): string;
 isStable(): boolean;
}
class Static_Tilt {
static values(): Tilt[];
static valueOf(string: string): Tilt;
static method_36738(): Tilt[];
static NONE: Tilt;
static UNSTABLE: Tilt;
static PARTIAL: Tilt;
static FULL: Tilt;
static field_28724: Tilt[];
}

//net.minecraft.util.BlockRotation
class BlockRotation extends Enum, StringIdentifiable{
 rotate(rotation: number,fullTurn: number): number;
 rotate(rotation: BlockRotation): BlockRotation;
 rotate(direction: Direction): Direction;
 asString(): string;
 getDirectionTransformation(): DirectionTransformation;
}
class Static_BlockRotation {
static values(): BlockRotation[];
static valueOf(string: string): BlockRotation;
static random(random: Random): BlockRotation;
static method_36709(): BlockRotation[];
static randomRotationOrder(random: Random): List;
static NONE: BlockRotation;
static CLOCKWISE_90: BlockRotation;
static CLOCKWISE_180: BlockRotation;
static COUNTERCLOCKWISE_90: BlockRotation;
static CODEC: Codec;
static field_11466: BlockRotation[];
}

//net.minecraft.block.enums.DoubleBlockHalf
class DoubleBlockHalf extends Enum, StringIdentifiable{
 toString(): string;
 asString(): string;
}
class Static_DoubleBlockHalf {
static values(): DoubleBlockHalf[];
static valueOf(string: string): DoubleBlockHalf;
static method_36727(): DoubleBlockHalf[];
static UPPER: DoubleBlockHalf;
static LOWER: DoubleBlockHalf;
static field_12608: DoubleBlockHalf[];
}

//net.minecraft.block.enums.Instrument
class Instrument extends Enum, StringIdentifiable{
 hasCustomSound(): boolean;
 isNotBaseBlock(): boolean;
 asString(): string;
 getSound(): RegistryEntry;
 shouldSpawnNoteParticles(): boolean;
}
class Static_Instrument {
static values(): Instrument[];
static valueOf(string: string): Instrument;
static method_36730(): Instrument[];
static HARP: Instrument;
static BASEDRUM: Instrument;
static SNARE: Instrument;
static HAT: Instrument;
static BASS: Instrument;
static FLUTE: Instrument;
static BELL: Instrument;
static GUITAR: Instrument;
static CHIME: Instrument;
static XYLOPHONE: Instrument;
static IRON_XYLOPHONE: Instrument;
static COW_BELL: Instrument;
static DIDGERIDOO: Instrument;
static BIT: Instrument;
static BANJO: Instrument;
static PLING: Instrument;
static ZOMBIE: Instrument;
static SKELETON: Instrument;
static CREEPER: Instrument;
static DRAGON: Instrument;
static WITHER_SKELETON: Instrument;
static PIGLIN: Instrument;
static CUSTOM_HEAD: Instrument;
static field_12652: Instrument[];
}

//net.minecraft.block.enums.SculkSensorPhase
class SculkSensorPhase extends Enum, StringIdentifiable{
 toString(): string;
 asString(): string;
}
class Static_SculkSensorPhase {
static values(): SculkSensorPhase[];
static valueOf(string: string): SculkSensorPhase;
static method_36734(): SculkSensorPhase[];
static INACTIVE: SculkSensorPhase;
static ACTIVE: SculkSensorPhase;
static COOLDOWN: SculkSensorPhase;
static field_28125: SculkSensorPhase[];
}

//net.minecraft.world.gen.chunk.placement.SpreadType
class SpreadType extends Enum, StringIdentifiable{
 get(random: Random,bound: number): number;
 asString(): string;
}
class Static_SpreadType {
static values(): SpreadType[];
static valueOf(string: string): SpreadType;
static method_40175(): SpreadType[];
static LINEAR: SpreadType;
static TRIANGULAR: SpreadType;
static CODEC: Codec;
static field_36426: SpreadType[];
}

//net.minecraft.client.util.telemetry.TelemetryEventProperty$GameMode
class TelemetryEventProperty_GameMode extends Enum, StringIdentifiable{
 asString(): string;
 getRawId(): number;
}
class Static_TelemetryEventProperty_GameMode {
static values(): TelemetryEventProperty_GameMode;
static valueOf(string: string): TelemetryEventProperty_GameMode;
static method_47757(): TelemetryEventProperty_GameMode;
static SURVIVAL: TelemetryEventProperty_GameMode;
static CREATIVE: TelemetryEventProperty_GameMode;
static ADVENTURE: TelemetryEventProperty_GameMode;
static SPECTATOR: TelemetryEventProperty_GameMode;
static HARDCORE: TelemetryEventProperty_GameMode;
static CODEC: Codec;
static field_41489: TelemetryEventProperty_GameMode;
}

//net.minecraft.scoreboard.ScoreboardCriterion$RenderType
class ScoreboardCriterion_RenderType extends Enum, StringIdentifiable{
 getName(): string;
 asString(): string;
}
class Static_ScoreboardCriterion_RenderType {
static values(): ScoreboardCriterion_RenderType;
static valueOf(string: string): ScoreboardCriterion_RenderType;
static getType(name: string): ScoreboardCriterion_RenderType;
static method_36799(): ScoreboardCriterion_RenderType;
static INTEGER: ScoreboardCriterion_RenderType;
static HEARTS: ScoreboardCriterion_RenderType;
static CODEC: StringIdentifiable_Codec;
static field_1473: ScoreboardCriterion_RenderType;
}

//net.minecraft.entity.damage.DamageScaling
class DamageScaling extends Enum, StringIdentifiable{
 asString(): string;
}
class Static_DamageScaling {
static values(): DamageScaling[];
static valueOf(string: string): DamageScaling;
static method_48788(): DamageScaling[];
static NEVER: DamageScaling;
static WHEN_CAUSED_BY_LIVING_NON_PLAYER: DamageScaling;
static ALWAYS: DamageScaling;
static CODEC: Codec;
static field_42290: DamageScaling[];
}

//net.minecraft.entity.vehicle.BoatEntity$Type
class BoatEntity_Type extends Enum, StringIdentifiable{
 getName(): string;
 toString(): string;
 asString(): string;
 getBaseBlock(): Block;
}
class Static_BoatEntity_Type {
static values(): BoatEntity_Type;
static valueOf(string: string): BoatEntity_Type;
static getType(type: number): BoatEntity_Type;
static getType(name: string): BoatEntity_Type;
static method_36671(): BoatEntity_Type;
static OAK: BoatEntity_Type;
static SPRUCE: BoatEntity_Type;
static BIRCH: BoatEntity_Type;
static JUNGLE: BoatEntity_Type;
static ACACIA: BoatEntity_Type;
static CHERRY: BoatEntity_Type;
static DARK_OAK: BoatEntity_Type;
static MANGROVE: BoatEntity_Type;
static BAMBOO: BoatEntity_Type;
static CODEC: StringIdentifiable_Codec;
static BY_ID: IntFunction;
static field_7724: BoatEntity_Type;
}

//net.minecraft.world.gen.densityfunction.DensityFunctionTypes$UnaryOperation$Type
class DensityFunctionTypes_UnaryOperation_Type extends Enum, StringIdentifiable{
 asString(): string;
}
class Static_DensityFunctionTypes_UnaryOperation_Type {
static values(): DensityFunctionTypes_UnaryOperation_Type;
static valueOf(string: string): DensityFunctionTypes_UnaryOperation_Type;
static method_40522(): DensityFunctionTypes_UnaryOperation_Type;
static ABS: DensityFunctionTypes_UnaryOperation_Type;
static SQUARE: DensityFunctionTypes_UnaryOperation_Type;
static CUBE: DensityFunctionTypes_UnaryOperation_Type;
static HALF_NEGATIVE: DensityFunctionTypes_UnaryOperation_Type;
static QUARTER_NEGATIVE: DensityFunctionTypes_UnaryOperation_Type;
static SQUEEZE: DensityFunctionTypes_UnaryOperation_Type;
static field_36561: DensityFunctionTypes_UnaryOperation_Type;
}

//net.minecraft.entity.damage.DeathMessageType
class DeathMessageType extends Enum, StringIdentifiable{
 asString(): string;
}
class Static_DeathMessageType {
static values(): DeathMessageType[];
static valueOf(string: string): DeathMessageType;
static method_48840(): DeathMessageType[];
static DEFAULT: DeathMessageType;
static FALL_VARIANTS: DeathMessageType;
static INTENTIONAL_GAME_DESIGN: DeathMessageType;
static CODEC: Codec;
static field_42366: DeathMessageType[];
}

//net.minecraft.util.BlockMirror
class BlockMirror extends Enum, StringIdentifiable{
 getName(): Text;
 apply(direction: Direction): Direction;
 asString(): string;
 mirror(rotation: number,fullTurn: number): number;
 getRotation(direction: Direction): BlockRotation;
 getDirectionTransformation(): DirectionTransformation;
}
class Static_BlockMirror {
static values(): BlockMirror[];
static valueOf(string: string): BlockMirror;
static method_36706(): BlockMirror[];
static NONE: BlockMirror;
static LEFT_RIGHT: BlockMirror;
static FRONT_BACK: BlockMirror;
static CODEC: Codec;
static field_11299: BlockMirror[];
}

//net.minecraft.block.enums.JigsawOrientation
class JigsawOrientation extends Enum, StringIdentifiable{
 asString(): string;
 getFacing(): Direction;
 getRotation(): Direction;
}
class Static_JigsawOrientation {
static values(): JigsawOrientation[];
static valueOf(string: string): JigsawOrientation;
static getIndex(facing: Direction,rotation: Direction): number;
static method_35840(map: Int2ObjectOpenHashMap): void;
static method_36936(): JigsawOrientation[];
static byDirections(facing: Direction,rotation: Direction): JigsawOrientation;
static DOWN_EAST: JigsawOrientation;
static DOWN_NORTH: JigsawOrientation;
static DOWN_SOUTH: JigsawOrientation;
static DOWN_WEST: JigsawOrientation;
static UP_EAST: JigsawOrientation;
static UP_NORTH: JigsawOrientation;
static UP_SOUTH: JigsawOrientation;
static UP_WEST: JigsawOrientation;
static WEST_UP: JigsawOrientation;
static EAST_UP: JigsawOrientation;
static NORTH_UP: JigsawOrientation;
static SOUTH_UP: JigsawOrientation;
static BY_INDEX: Int2ObjectMap;
static field_23397: JigsawOrientation[];
}

//net.minecraft.world.gen.GenerationStep$Feature
class GenerationStep_Feature extends Enum, StringIdentifiable{
 getName(): string;
 asString(): string;
}
class Static_GenerationStep_Feature {
static values(): GenerationStep_Feature;
static valueOf(string: string): GenerationStep_Feature;
static method_36751(): GenerationStep_Feature;
static RAW_GENERATION: GenerationStep_Feature;
static LAKES: GenerationStep_Feature;
static LOCAL_MODIFICATIONS: GenerationStep_Feature;
static UNDERGROUND_STRUCTURES: GenerationStep_Feature;
static SURFACE_STRUCTURES: GenerationStep_Feature;
static STRONGHOLDS: GenerationStep_Feature;
static UNDERGROUND_ORES: GenerationStep_Feature;
static UNDERGROUND_DECORATION: GenerationStep_Feature;
static FLUID_SPRINGS: GenerationStep_Feature;
static VEGETAL_DECORATION: GenerationStep_Feature;
static TOP_LAYER_MODIFICATION: GenerationStep_Feature;
static CODEC: Codec;
static field_13181: GenerationStep_Feature;
}

//net.minecraft.entity.ai.control.YawAdjustingLookControl
class YawAdjustingLookControl extends LookControl{
 tick(): void;
}
class Static_YawAdjustingLookControl {
static ADDED_PITCH: number;
static ADDED_YAW: number;
}

//net.minecraft.world.gen.densityfunction.DensityFunctionTypes$Spline$DensityFunctionWrapper
class DensityFunctionTypes_Spline_DensityFunctionWrapper extends Record, ToFloatFunction{
 equals(object: Object): boolean;
 toString(): string;
 hashCode(): number;
 min(): number;
 max(): number;
 apply(visitor: DensityFunction_DensityFunctionVisitor): DensityFunctionTypes_Spline_DensityFunctionWrapper;
 apply(x: Object): number;
 apply(splinePos: DensityFunctionTypes_Spline_SplinePos): number;
 function(): RegistryEntry;
}
class Static_DensityFunctionTypes_Spline_DensityFunctionWrapper {
static CODEC: Codec;
}

//net.minecraft.block.entity.JukeboxBlockEntity
class JukeboxBlockEntity extends BlockEntity, Clearable, SingleStackInventory{
 getStack(slot: number): ItemStack;
 isValid(slot: number,stack: ItemStack): boolean;
 setStack(slot: number,stack: ItemStack): void;
 removeStack(slot: number,amount: number): ItemStack;
 getMaxCountPerStack(): number;
 readNbt(nbt: NbtCompound): void;
 canPlayerUse(player: PlayerEntity): boolean;
 canTransferTo(hopperInventory: Inventory,slot: number,stack: ItemStack): boolean;
 startPlaying(): void;
 isPlayingRecord(): boolean;
 dropRecord(): void;
 setDisc(stack: ItemStack): void;
}
class Static_JukeboxBlockEntity {
static tick(world: World,pos: BlockPos,state: BlockState,blockEntity: JukeboxBlockEntity): void;
static SECOND_PER_TICK: number;
}

//net.minecraft.client.gui.screen.report.ChatSelectionScreen$SelectionListWidget
class ChatSelectionScreen_SelectionListWidget extends AlwaysSelectedEntryListWidget, MessagesListAdder_MessagesList{
 getRowWidth(): number;
 setSelected(entry: ChatSelectionScreen_SelectionListWidget_Entry): void;
 setSelected(entry: EntryListWidget_Entry): void;
 addText(text: Text): void;
 addMessage(index: number,message: ReceivedMessage_ChatMessage): void;
 keyPressed(keyCode: number,scanCode: number,modifiers: number): boolean;
 setScrollAmount(amount: number): void;
 getContextMessageY(): number;
 getDisplayedItemCount(): number;
}
class Static_ChatSelectionScreen_SelectionListWidget {
static method_44510(selectionListWidget: ChatSelectionScreen_SelectionListWidget): MinecraftClient;
}

//net.minecraft.world.chunk.light.ChunkLightingView$Empty
class ChunkLightingView_Empty extends Enum, ChunkLightingView{
 checkBlock(pos: BlockPos): void;
 setSectionStatus(pos: ChunkSectionPos,notReady: boolean): void;
 propagateLight(chunkPos: ChunkPos): void;
 getLightSection(pos: ChunkSectionPos): ChunkNibbleArray;
 hasUpdates(): boolean;
 setColumnEnabled(pos: ChunkPos,retainData: boolean): void;
 doLightUpdates(): number;
 getLightLevel(pos: BlockPos): number;
}
class Static_ChunkLightingView_Empty {
static values(): ChunkLightingView_Empty;
static valueOf(string: string): ChunkLightingView_Empty;
static method_36763(): ChunkLightingView_Empty;
static INSTANCE: ChunkLightingView_Empty;
static field_15811: ChunkLightingView_Empty;
}

//net.minecraft.entity.ai.pathing.LandPathNodeMaker
class LandPathNodeMaker extends PathNodeMaker{
 clear(): void;
 init(cachedWorld: ChunkCache,entity: MobEntity): void;
 getNode(x: number,y: number,z: number): TargetPathNode;
 getNodeType(world: BlockView,x: number,y: number,z: number,mob: MobEntity): PathNodeType;
 getSuccessors(successors: PathNode[],node: PathNode): number;
 getDefaultNodeType(world: BlockView,x: number,y: number,z: number): PathNodeType;
 getStart(): PathNode;
 findNearbyNodeTypes(world: BlockView,x: number,y: number,z: number,nearbyTypes: EnumSet,type: PathNodeType,pos: BlockPos): PathNodeType;
}
class Static_LandPathNodeMaker {
static getLandNodeType(world: BlockView,pos: BlockPos_Mutable): PathNodeType;
static getFeetY(world: BlockView,pos: BlockPos): number;
static inflictsFireDamage(state: BlockState): boolean;
static isBlocked(nodeType: PathNodeType): boolean;
static getCommonNodeType(world: BlockView,pos: BlockPos): PathNodeType;
static getNodeTypeFromNeighbors(world: BlockView,pos: BlockPos_Mutable,nodeType: PathNodeType): PathNodeType;
static Y_OFFSET: number;
static MIN_STEP_HEIGHT: number;
}

//net.minecraft.entity.ai.pathing.WaterPathNodeMaker
class WaterPathNodeMaker extends PathNodeMaker{
 clear(): void;
 init(cachedWorld: ChunkCache,entity: MobEntity): void;
 getNode(x: number,y: number,z: number): TargetPathNode;
 getNodeType(world: BlockView,x: number,y: number,z: number,mob: MobEntity): PathNodeType;
 getSuccessors(successors: PathNode[],node: PathNode): number;
 getDefaultNodeType(world: BlockView,x: number,y: number,z: number): PathNodeType;
 getStart(): PathNode;
}

//net.minecraft.item.CompassItem
class CompassItem extends Item, Vanishable{
 hasGlint(stack: ItemStack): boolean;
 inventoryTick(stack: ItemStack,world: World,entity: Entity,slot: number,selected: boolean): void;
 useOnBlock(context: ItemUsageContext): ActionResult;
 getTranslationKey(stack: ItemStack): string;
}
class Static_CompassItem {
static createLodestonePos(nbt: NbtCompound): GlobalPos;
static createSpawnPos(world: World): GlobalPos;
static hasLodestone(stack: ItemStack): boolean;
static method_28375(nbtCompound: NbtCompound,nbtElement: NbtElement): void;
static getLodestoneDimension(nbt: NbtCompound): Optional;
static LOGGER: Logger;
static LODESTONE_POS_KEY: string;
static LODESTONE_DIMENSION_KEY: string;
static LODESTONE_TRACKED_KEY: string;
}

//net.minecraft.item.CrossbowItem
class CrossbowItem extends RangedWeaponItem, Vanishable{
 use(world: World,user: PlayerEntity,hand: Hand): TypedActionResult;
 appendTooltip(stack: ItemStack,world: World,tooltip: List,context: TooltipContext): void;
 getMaxUseTime(stack: ItemStack): number;
 getUseAction(stack: ItemStack): UseAction;
 getRange(): number;
 isUsedOnRelease(stack: ItemStack): boolean;
 onStoppedUsing(stack: ItemStack,world: World,user: LivingEntity,remainingUseTicks: number): void;
 usageTick(world: World,user: LivingEntity,stack: ItemStack,remainingUseTicks: number): void;
 getHeldProjectiles(): Predicate;
 getProjectiles(): Predicate;
}
class Static_CrossbowItem {
static isCharged(stack: ItemStack): boolean;
static getPullTime(stack: ItemStack): number;
static createArrow(world: World,entity: LivingEntity,crossbow: ItemStack,arrow: ItemStack): PersistentProjectileEntity;
static shootAll(world: World,entity: LivingEntity,hand: Hand,stack: ItemStack,speed: number,divergence: number): void;
static postShoot(world: World,entity: LivingEntity,stack: ItemStack): void;
static shoot(world: World,shooter: LivingEntity,hand: Hand,crossbow: ItemStack,projectile: ItemStack,soundPitch: number,creative: boolean,speed: number,divergence: number,simulated: number): void;
static getSoundPitch(flag: boolean,random: Random): number;
static getSpeed(stack: ItemStack): number;
static hasProjectile(crossbow: ItemStack,projectile: Item): boolean;
static loadProjectiles(shooter: LivingEntity,crossbow: ItemStack): boolean;
static getProjectiles(crossbow: ItemStack): List;
static loadProjectile(shooter: LivingEntity,crossbow: ItemStack,projectile: ItemStack,simulated: boolean,creative: boolean): boolean;
static putProjectile(crossbow: ItemStack,projectile: ItemStack): void;
static clearProjectiles(crossbow: ItemStack): void;
static getPullProgress(useTicks: number,stack: ItemStack): number;
static setCharged(stack: ItemStack,charged: boolean): void;
static method_20272(hand: Hand,e: LivingEntity): void;
static getSoundPitches(random: Random): number[];
static method_7768(item: Item,s: ItemStack): boolean;
static CHARGED_KEY: string;
static CHARGED_PROJECTILES_KEY: string;
static DEFAULT_PULL_TIME: number;
static RANGE: number;
static field_30867: number;
static field_30868: number;
static DEFAULT_SPEED: number;
static FIREWORK_ROCKET_SPEED: number;
}

//net.minecraft.item.TridentItem
class TridentItem extends Item, Vanishable{
 use(world: World,user: PlayerEntity,hand: Hand): TypedActionResult;
 getEnchantability(): number;
 getMaxUseTime(stack: ItemStack): number;
 getUseAction(stack: ItemStack): UseAction;
 getAttributeModifiers(slot: EquipmentSlot): Multimap;
 postMine(stack: ItemStack,world: World,state: BlockState,pos: BlockPos,miner: LivingEntity): boolean;
 postHit(stack: ItemStack,target: LivingEntity,attacker: LivingEntity): boolean;
 onStoppedUsing(stack: ItemStack,world: World,user: LivingEntity,remainingUseTicks: number): void;
 canMine(state: BlockState,world: World,pos: BlockPos,miner: PlayerEntity): boolean;
}
class Static_TridentItem {
static method_20285(livingEntity: LivingEntity,p: PlayerEntity): void;
static method_20286(e: LivingEntity): void;
static method_20284(e: LivingEntity): void;
static field_30926: number;
static ATTACK_DAMAGE: number;
static field_30928: number;
}

//net.minecraft.item.MiningToolItem
class MiningToolItem extends ToolItem, Vanishable{
 getAttributeModifiers(slot: EquipmentSlot): Multimap;
 isSuitableFor(state: BlockState): boolean;
 postMine(stack: ItemStack,world: World,state: BlockState,pos: BlockPos,miner: LivingEntity): boolean;
 postHit(stack: ItemStack,target: LivingEntity,attacker: LivingEntity): boolean;
 getAttackDamage(): number;
 getMiningSpeedMultiplier(stack: ItemStack,state: BlockState): number;
}
class Static_MiningToolItem {
static method_20274(e: LivingEntity): void;
static method_20273(e: LivingEntity): void;
}

//net.minecraft.item.SwordItem
class SwordItem extends ToolItem, Vanishable{
 getAttributeModifiers(slot: EquipmentSlot): Multimap;
 isSuitableFor(state: BlockState): boolean;
 postMine(stack: ItemStack,world: World,state: BlockState,pos: BlockPos,miner: LivingEntity): boolean;
 postHit(stack: ItemStack,target: LivingEntity,attacker: LivingEntity): boolean;
 getAttackDamage(): number;
 canMine(state: BlockState,world: World,pos: BlockPos,miner: PlayerEntity): boolean;
 getMiningSpeedMultiplier(stack: ItemStack,state: BlockState): number;
}
class Static_SwordItem {
static method_20283(e: LivingEntity): void;
static method_20282(e: LivingEntity): void;
}

//net.minecraft.item.BowItem
class BowItem extends RangedWeaponItem, Vanishable{
 use(world: World,user: PlayerEntity,hand: Hand): TypedActionResult;
 getMaxUseTime(stack: ItemStack): number;
 getUseAction(stack: ItemStack): UseAction;
 getRange(): number;
 onStoppedUsing(stack: ItemStack,world: World,user: LivingEntity,remainingUseTicks: number): void;
 getProjectiles(): Predicate;
}
class Static_BowItem {
static getPullProgress(useTicks: number): number;
static method_20270(playerEntity: PlayerEntity,p: PlayerEntity): void;
static TICKS_PER_SECOND: number;
static RANGE: number;
}

//net.minecraft.item.FishingRodItem
class FishingRodItem extends Item, Vanishable{
 use(world: World,user: PlayerEntity,hand: Hand): TypedActionResult;
 getEnchantability(): number;
}
class Static_FishingRodItem {
static method_20275(hand: Hand,p: PlayerEntity): void;
}

//net.minecraft.world.gen.densityfunction.DensityFunctionTypes$Constant
class DensityFunctionTypes_Constant extends Record, DensityFunction_Base{
 value(): number;
 equals(object: Object): boolean;
 toString(): string;
 hashCode(): number;
 fill(densities: number[],applier: DensityFunction_EachApplier): void;
 maxValue(): number;
 sample(pos: DensityFunction_NoisePos): number;
 minValue(): number;
 getCodecHolder(): CodecHolder;
}
class Static_DensityFunctionTypes_Constant {
static CODEC_HOLDER: CodecHolder;
static ZERO: DensityFunctionTypes_Constant;
}

//net.minecraft.world.gen.densityfunction.DensityFunctionTypes$YClampedGradient
class DensityFunctionTypes_YClampedGradient extends Record, DensityFunction_Base{
 equals(object: Object): boolean;
 toString(): string;
 hashCode(): number;
 maxValue(): number;
 sample(pos: DensityFunction_NoisePos): number;
 minValue(): number;
 toValue(): number;
 getCodecHolder(): CodecHolder;
 fromValue(): number;
 fromY(): number;
 toY(): number;
}
class Static_DensityFunctionTypes_YClampedGradient {
static method_41076(instance: RecordCodecBuilder_Instance): App;
static Y_CLAMPED_GRADIENT_CODEC: MapCodec;
static CODEC_HOLDER: CodecHolder;
}

//net.minecraft.util.logging.LogFileCompressor$Compressed
class LogFileCompressor_Compressed extends Record, LogFileCompressor_LogFile{
 equals(object: Object): boolean;
 toString(): string;
 hashCode(): number;
 compress(): LogFileCompressor_Compressed;
 id(): LogFileCompressor_LogId;
 path(): Path;
 getReader(): Reader;
}

//net.minecraft.util.logging.LogFileCompressor$Uncompressed
class LogFileCompressor_Uncompressed extends Record, LogFileCompressor_LogFile{
 equals(object: Object): boolean;
 toString(): string;
 hashCode(): number;
 compress(): LogFileCompressor_Compressed;
 id(): LogFileCompressor_LogId;
 open(): FileChannel;
 path(): Path;
 getReader(): Reader;
}

//net.minecraft.world.gen.blockpredicate.AllOfBlockPredicate
class AllOfBlockPredicate extends CombinedBlockPredicate{
 test(structureWorldAccess: StructureWorldAccess,blockPos: BlockPos): boolean;
 test(world: Object,pos: Object): boolean;
 getType(): BlockPredicateType;
}
class Static_AllOfBlockPredicate {
static CODEC: Codec;
}

//net.minecraft.world.gen.blockpredicate.AnyOfBlockPredicate
class AnyOfBlockPredicate extends CombinedBlockPredicate{
 test(structureWorldAccess: StructureWorldAccess,blockPos: BlockPos): boolean;
 test(world: Object,pos: Object): boolean;
 getType(): BlockPredicateType;
}
class Static_AnyOfBlockPredicate {
static CODEC: Codec;
}

//net.minecraft.client.option.SimpleOption$PotentialValuesBasedCallbacks
class SimpleOption_PotentialValuesBasedCallbacks extends Record, SimpleOption_CyclingCallbacks{
 equals(object: Object): boolean;
 toString(): string;
 values(): List;
 hashCode(): number;
 validate(value: Object): Optional;
 codec(): Codec;
 getValues(): CyclingButtonWidget_Values;
}

//net.minecraft.client.option.SimpleOption$LazyCyclingCallbacks
class SimpleOption_LazyCyclingCallbacks extends Record, SimpleOption_CyclingCallbacks{
 equals(object: Object): boolean;
 toString(): string;
 values(): Supplier;
 hashCode(): number;
 validate(value: Object): Optional;
 validateValue(): Function;
 codec(): Codec;
 getValues(): CyclingButtonWidget_Values;
}

//net.minecraft.client.option.SimpleOption$AlternateValuesSupportingCyclingCallbacks
class SimpleOption_AlternateValuesSupportingCyclingCallbacks extends Record, SimpleOption_CyclingCallbacks{
 equals(object: Object): boolean;
 toString(): string;
 values(): List;
 hashCode(): number;
 validate(value: Object): Optional;
 valueSetter(): SimpleOption_CyclingCallbacks_ValueSetter;
 codec(): Codec;
 getValues(): CyclingButtonWidget_Values;
 altValues(): List;
 altCondition(): BooleanSupplier;
}

//net.minecraft.entity.ai.brain.task.TaskTriggerer$1


//net.minecraft.block.PointedDripstoneBlock
class PointedDripstoneBlock extends Block, LandingBlock, Waterloggable{
 onDestroyedOnLanding(world: World,pos: BlockPos,fallingBlockEntity: FallingBlockEntity): void;
 getStateForNeighborUpdate(state: BlockState,direction: Direction,neighborState: BlockState,world: WorldAccess,pos: BlockPos,neighborPos: BlockPos): BlockState;
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 canPlaceAt(state: BlockState,world: WorldView,pos: BlockPos): boolean;
 isShapeFullCube(state: BlockState,world: BlockView,pos: BlockPos): boolean;
 randomDisplayTick(state: BlockState,world: World,pos: BlockPos,random: Random): void;
 canPathfindThrough(state: BlockState,world: BlockView,pos: BlockPos,type: NavigationType): boolean;
 scheduledTick(state: BlockState,world: ServerWorld,pos: BlockPos,random: Random): void;
 onProjectileHit(world: World,state: BlockState,hit: BlockHitResult,projectile: ProjectileEntity): void;
 getDamageSource(attacker: Entity): DamageSource;
 randomTick(state: BlockState,world: ServerWorld,pos: BlockPos,random: Random): void;
 getCullingShape(state: BlockState,world: BlockView,pos: BlockPos): VoxelShape;
 getFluidState(state: BlockState): FluidState;
 getMaxHorizontalModelOffset(): number;
 onLandedUpon(world: World,state: BlockState,pos: BlockPos,entity: Entity,fallDistance: number): void;
 getPlacementState(ctx: ItemPlacementContext): BlockState;
}
class Static_PointedDripstoneBlock {
static place(world: WorldAccess,pos: BlockPos,direction: Direction,thickness: Thickness): void;
static canGrow(state: BlockState,world: ServerWorld,pos: BlockPos): boolean;
static canGrow(dripstoneBlockState: BlockState,waterState: BlockState): boolean;
static createParticle(world: World,pos: BlockPos,state: BlockState,fluid: Fluid): void;
static createParticle(world: World,pos: BlockPos,state: BlockState): void;
static getFluid(world: World,pos: BlockPos,state: BlockState): Optional;
static getThickness(world: WorldView,pos: BlockPos,direction: Direction,tryMerge: boolean): Thickness;
static canDrip(state: BlockState): boolean;
static getCauldronPos(world: World,pos: BlockPos,fluid: Fluid): BlockPos;
static isPointingDown(state: BlockState): boolean;
static spawnFallingBlock(state: BlockState,world: ServerWorld,pos: BlockPos): void;
static getTipPos(state: BlockState,world: WorldAccess,pos: BlockPos,range: number,allowMerged: boolean): BlockPos;
static method_33270(f: number,fluid: PointedDripstoneBlock_DrippingFluid): boolean;
static isPointingUp(state: BlockState): boolean;
static method_33280(world: World,blockPos: BlockPos,blockState: BlockState,fluid: PointedDripstoneBlock_DrippingFluid): void;
static dripTick(state: BlockState,world: ServerWorld,pos: BlockPos,dripChance: number): void;
static tryGrow(state: BlockState,world: ServerWorld,pos: BlockPos,random: Random): void;
static tryGrow(world: ServerWorld,pos: BlockPos,direction: Direction): void;
static method_33281(statex: BlockState): boolean;
static method_33274(fluid: Fluid,state: BlockState): boolean;
static getDripFluid(world: World,fluid: Fluid): Fluid;
static getDripFluid(world: ServerWorld,pos: BlockPos): Fluid;
static searchInDirection(world: WorldAccess,pos: BlockPos,direction: Direction_AxisDirection,continuePredicate: BiPredicate,stopPredicate: Predicate,range: number): Optional;
static method_33278(direction: Direction,posx: BlockPos,statex: BlockState): boolean;
static method_33277(world: World,blockPos: BlockPos,blockState: BlockState,fluid: PointedDripstoneBlock_DrippingFluid): void;
static method_33275(direction: Direction,posx: BlockPos,statex: BlockState): boolean;
static growMerged(state: BlockState,world: WorldAccess,pos: BlockPos): void;
static getSupportingPos(world: World,pos: BlockPos,state: BlockState,range: number): Optional;
static getDripPos(world: World,pos: BlockPos): BlockPos;
static tryGrowStalagmite(world: ServerWorld,pos: BlockPos): void;
static method_40018(world: World,posx: BlockPos,state: BlockState): boolean;
static method_40017(world: World,posx: BlockPos,state: BlockState): boolean;
static method_43131(fluid: PointedDripstoneBlock_DrippingFluid): Fluid;
static canDripThrough(world: BlockView,pos: BlockPos,state: BlockState): boolean;
static isTip(state: BlockState,direction: Direction): boolean;
static isTip(state: BlockState,allowMerged: boolean): boolean;
static method_36373(bl: boolean,statex: BlockState): boolean;
static isFluidLiquid(fluid: Fluid): boolean;
static method_33279(world: World,posx: BlockPos): PointedDripstoneBlock_DrippingFluid;
static isPointedDripstoneFacingDirection(state: BlockState,direction: Direction): boolean;
static isHeldByPointedDripstone(state: BlockState,world: WorldView,pos: BlockPos): boolean;
static canPlaceAtWithDirection(world: WorldView,pos: BlockPos,direction: Direction): boolean;
static getDirectionToPlaceAt(world: WorldView,pos: BlockPos,direction: Direction): Direction;
static VERTICAL_DIRECTION: DirectionProperty;
static THICKNESS: EnumProperty;
static WATERLOGGED: BooleanProperty;
static field_31205: number;
static field_31207: number;
static field_31208: number;
static field_31209: number;
static field_31210: number;
static WATER_DRIP_CHANCE: number;
static LAVA_DRIP_CHANCE: number;
static field_31213: number;
static field_31214: number;
static field_31215: number;
static field_31200: number;
static field_31201: number;
static field_31202: number;
static field_33566: number;
static field_33567: number;
static MAX_STALACTITE_GROWTH: number;
static STALACTITE_FLOOR_SEARCH_RANGE: number;
static field_31203: number;
static TIP_MERGE_SHAPE: VoxelShape;
static UP_TIP_SHAPE: VoxelShape;
static DOWN_TIP_SHAPE: VoxelShape;
static BASE_SHAPE: VoxelShape;
static FRUSTUM_SHAPE: VoxelShape;
static MIDDLE_SHAPE: VoxelShape;
static field_31204: number;
static DRIP_COLLISION_SHAPE: VoxelShape;
}

//net.minecraft.block.LightningRodBlock
class LightningRodBlock extends RodBlock, Waterloggable{
 getStateForNeighborUpdate(state: BlockState,direction: Direction,neighborState: BlockState,world: WorldAccess,pos: BlockPos,neighborPos: BlockPos): BlockState;
 getStrongRedstonePower(state: BlockState,world: BlockView,pos: BlockPos,direction: Direction): number;
 randomDisplayTick(state: BlockState,world: World,pos: BlockPos,random: Random): void;
 emitsRedstonePower(state: BlockState): boolean;
 onBlockAdded(state: BlockState,world: World,pos: BlockPos,oldState: BlockState,notify: boolean): void;
 onStateReplaced(state: BlockState,world: World,pos: BlockPos,newState: BlockState,moved: boolean): void;
 scheduledTick(state: BlockState,world: ServerWorld,pos: BlockPos,random: Random): void;
 onProjectileHit(world: World,state: BlockState,hit: BlockHitResult,projectile: ProjectileEntity): void;
 getFluidState(state: BlockState): FluidState;
 getWeakRedstonePower(state: BlockState,world: BlockView,pos: BlockPos,direction: Direction): number;
 getPlacementState(ctx: ItemPlacementContext): BlockState;
 setPowered(state: BlockState,world: World,pos: BlockPos): void;
}
class Static_LightningRodBlock {
static WATERLOGGED: BooleanProperty;
static POWERED: BooleanProperty;
static SCHEDULED_TICK_DELAY: number;
static MAX_REDIRECT_DISTANCE: number;
static field_31191: number;
}

//net.minecraft.block.LanternBlock
class LanternBlock extends Block, Waterloggable{
 getStateForNeighborUpdate(state: BlockState,direction: Direction,neighborState: BlockState,world: WorldAccess,pos: BlockPos,neighborPos: BlockPos): BlockState;
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 canPlaceAt(state: BlockState,world: WorldView,pos: BlockPos): boolean;
 canPathfindThrough(state: BlockState,world: BlockView,pos: BlockPos,type: NavigationType): boolean;
 getFluidState(state: BlockState): FluidState;
 getPlacementState(ctx: ItemPlacementContext): BlockState;
}
class Static_LanternBlock {
static attachedDirection(state: BlockState): Direction;
static HANGING: BooleanProperty;
static WATERLOGGED: BooleanProperty;
static STANDING_SHAPE: VoxelShape;
static HANGING_SHAPE: VoxelShape;
}

//net.minecraft.block.SculkSensorBlock
class SculkSensorBlock extends BlockWithEntity, Waterloggable{
 hasSidedTransparency(state: BlockState): boolean;
 getStateForNeighborUpdate(state: BlockState,direction: Direction,neighborState: BlockState,world: WorldAccess,pos: BlockPos,neighborPos: BlockPos): BlockState;
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 getStrongRedstonePower(state: BlockState,world: BlockView,pos: BlockPos,direction: Direction): number;
 hasComparatorOutput(state: BlockState): boolean;
 getComparatorOutput(state: BlockState,world: World,pos: BlockPos): number;
 randomDisplayTick(state: BlockState,world: World,pos: BlockPos,random: Random): void;
 canPathfindThrough(state: BlockState,world: BlockView,pos: BlockPos,type: NavigationType): boolean;
 emitsRedstonePower(state: BlockState): boolean;
 onBlockAdded(state: BlockState,world: World,pos: BlockPos,oldState: BlockState,notify: boolean): void;
 onStateReplaced(state: BlockState,world: World,pos: BlockPos,newState: BlockState,moved: boolean): void;
 onStacksDropped(state: BlockState,world: ServerWorld,pos: BlockPos,tool: ItemStack,dropExperience: boolean): void;
 scheduledTick(state: BlockState,world: ServerWorld,pos: BlockPos,random: Random): void;
 getCooldownTime(): number;
 getFluidState(state: BlockState): FluidState;
 setActive(sourceEntity: Entity,world: World,pos: BlockPos,state: BlockState,power: number,frequency: number): void;
 getWeakRedstonePower(state: BlockState,world: BlockView,pos: BlockPos,direction: Direction): number;
 getTicker(world: World,state: BlockState,type: BlockEntityType): BlockEntityTicker;
 createBlockEntity(pos: BlockPos,state: BlockState): BlockEntity;
 getRenderType(state: BlockState): BlockRenderType;
 onSteppedOn(world: World,pos: BlockPos,state: BlockState,entity: Entity): void;
 getPlacementState(ctx: ItemPlacementContext): BlockState;
}
class Static_SculkSensorBlock {
static isInactive(state: BlockState): boolean;
static getPhase(state: BlockState): SculkSensorPhase;
static method_49823(frequency: number[]): void;
static method_32905(worldx: World,pos: BlockPos,statex: BlockState,blockEntity: SculkSensorBlockEntity): void;
static tryResonate(sourceEntity: Entity,world: World,pos: BlockPos,frequency: number): void;
static setCooldown(world: World,pos: BlockPos,state: BlockState): void;
static updateNeighbors(world: World,pos: BlockPos,state: BlockState): void;
static field_31239: number;
static field_44607: number;
static SCULK_SENSOR_PHASE: EnumProperty;
static POWER: IntProperty;
static WATERLOGGED: BooleanProperty;
static OUTLINE_SHAPE: VoxelShape;
static RESONATION_NOTE_PITCHES: number[];
}

//net.minecraft.block.BigDripleafBlock
class BigDripleafBlock extends HorizontalFacingBlock, Fertilizable, Waterloggable{
 grow(world: ServerWorld,random: Random,pos: BlockPos,state: BlockState): void;
 getStateForNeighborUpdate(state: BlockState,direction: Direction,neighborState: BlockState,world: WorldAccess,pos: BlockPos,neighborPos: BlockPos): BlockState;
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 canPlaceAt(state: BlockState,world: WorldView,pos: BlockPos): boolean;
 onEntityCollision(state: BlockState,world: World,pos: BlockPos,entity: Entity): void;
 scheduledTick(state: BlockState,world: ServerWorld,pos: BlockPos,random: Random): void;
 onProjectileHit(world: World,state: BlockState,hit: BlockHitResult,projectile: ProjectileEntity): void;
 neighborUpdate(state: BlockState,world: World,pos: BlockPos,sourceBlock: Block,sourcePos: BlockPos,notify: boolean): void;
 getFluidState(state: BlockState): FluidState;
 canGrow(world: World,random: Random,pos: BlockPos,state: BlockState): boolean;
 getCollisionShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 isFertilizable(world: WorldView,pos: BlockPos,state: BlockState,isClient: boolean): boolean;
 getPlacementState(ctx: ItemPlacementContext): BlockState;
}
class Static_BigDripleafBlock {
static grow(world: WorldAccess,random: Random,pos: BlockPos,direction: Direction): void;
static changeTilt(state: BlockState,world: World,pos: BlockPos,tilt: Tilt): void;
static getShapeForState(state: BlockState): VoxelShape;
static isEntityAbove(pos: BlockPos,entity: Entity): boolean;
static resetTilt(state: BlockState,world: World,pos: BlockPos): void;
static canGrowInto(state: BlockState): boolean;
static canGrowInto(world: HeightLimitView,pos: BlockPos,state: BlockState): boolean;
static placeDripleafAt(world: WorldAccess,pos: BlockPos,fluidState: FluidState,direction: Direction): boolean;
static playTiltSound(world: World,pos: BlockPos,soundEvent: SoundEvent): void;
static method_33609(delays: Object2IntArrayMap): void;
static WATERLOGGED: BooleanProperty;
static TILT: EnumProperty;
static field_31015: number;
static NEXT_TILT_DELAYS: Object2IntMap;
static field_31016: number;
static field_31017: number;
static field_31018: number;
static field_31019: number;
static SHAPES_FOR_TILT: Map;
static BASE_SHAPE: VoxelShape;
static SHAPES_FOR_DIRECTION: Map;
}

//net.minecraft.block.LightBlock
class LightBlock extends Block, Waterloggable{
 getStateForNeighborUpdate(state: BlockState,direction: Direction,neighborState: BlockState,world: WorldAccess,pos: BlockPos,neighborPos: BlockPos): BlockState;
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 isTransparent(state: BlockState,world: BlockView,pos: BlockPos): boolean;
 getAmbientOcclusionLightLevel(state: BlockState,world: BlockView,pos: BlockPos): number;
 getFluidState(state: BlockState): FluidState;
 onUse(state: BlockState,world: World,pos: BlockPos,player: PlayerEntity,hand: Hand,hit: BlockHitResult): ActionResult;
 getRenderType(state: BlockState): BlockRenderType;
 getPickStack(world: BlockView,pos: BlockPos,state: BlockState): ItemStack;
}
class Static_LightBlock {
static addNbtForLevel(stack: ItemStack,level: number): ItemStack;
static method_35281(state: BlockState): number;
static field_33722: number;
static LEVEL_15: IntProperty;
static WATERLOGGED: BooleanProperty;
static STATE_TO_LUMINANCE: ToIntFunction;
}

//net.minecraft.block.LeavesBlock
class LeavesBlock extends Block, Waterloggable{
 getStateForNeighborUpdate(state: BlockState,direction: Direction,neighborState: BlockState,world: WorldAccess,pos: BlockPos,neighborPos: BlockPos): BlockState;
 hasRandomTicks(state: BlockState): boolean;
 randomDisplayTick(state: BlockState,world: World,pos: BlockPos,random: Random): void;
 getSidesShape(state: BlockState,world: BlockView,pos: BlockPos): VoxelShape;
 scheduledTick(state: BlockState,world: ServerWorld,pos: BlockPos,random: Random): void;
 randomTick(state: BlockState,world: ServerWorld,pos: BlockPos,random: Random): void;
 getOpacity(state: BlockState,world: BlockView,pos: BlockPos): number;
 getFluidState(state: BlockState): FluidState;
 getPlacementState(ctx: ItemPlacementContext): BlockState;
}
class Static_LeavesBlock {
static getDistanceFromLog(state: BlockState): number;
static getOptionalDistanceFromLog(state: BlockState): OptionalInt;
static updateDistanceFromLogs(state: BlockState,world: WorldAccess,pos: BlockPos): BlockState;
static MAX_DISTANCE: number;
static DISTANCE: IntProperty;
static PERSISTENT: BooleanProperty;
static WATERLOGGED: BooleanProperty;
static field_31112: number;
}

//net.minecraft.block.ScaffoldingBlock
class ScaffoldingBlock extends Block, Waterloggable{
 getStateForNeighborUpdate(state: BlockState,direction: Direction,neighborState: BlockState,world: WorldAccess,pos: BlockPos,neighborPos: BlockPos): BlockState;
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 canPlaceAt(state: BlockState,world: WorldView,pos: BlockPos): boolean;
 canReplace(state: BlockState,context: ItemPlacementContext): boolean;
 onBlockAdded(state: BlockState,world: World,pos: BlockPos,oldState: BlockState,notify: boolean): void;
 scheduledTick(state: BlockState,world: ServerWorld,pos: BlockPos,random: Random): void;
 getFluidState(state: BlockState): FluidState;
 getRaycastShape(state: BlockState,world: BlockView,pos: BlockPos): VoxelShape;
 getCollisionShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 getPlacementState(ctx: ItemPlacementContext): BlockState;
}
class Static_ScaffoldingBlock {
static calculateDistance(world: BlockView,pos: BlockPos): number;
static field_31238: number;
static NORMAL_OUTLINE_SHAPE: VoxelShape;
static BOTTOM_OUTLINE_SHAPE: VoxelShape;
static COLLISION_SHAPE: VoxelShape;
static OUTLINE_SHAPE: VoxelShape;
static MAX_DISTANCE: number;
static DISTANCE: IntProperty;
static WATERLOGGED: BooleanProperty;
static BOTTOM: BooleanProperty;
}

//net.minecraft.block.HorizontalConnectingBlock
class HorizontalConnectingBlock extends Block, Waterloggable{
 rotate(state: BlockState,rotation: BlockRotation): BlockState;
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 isTransparent(state: BlockState,world: BlockView,pos: BlockPos): boolean;
 canPathfindThrough(state: BlockState,world: BlockView,pos: BlockPos,type: NavigationType): boolean;
 mirror(state: BlockState,mirror: BlockMirror): BlockState;
 getFluidState(state: BlockState): FluidState;
 getCollisionShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
}
class Static_HorizontalConnectingBlock {
static method_20517(statex: BlockState): number;
static method_9986(entry: Map_Entry): boolean;
static getDirectionMask(dir: Direction): number;
static NORTH: BooleanProperty;
static EAST: BooleanProperty;
static SOUTH: BooleanProperty;
static WEST: BooleanProperty;
static WATERLOGGED: BooleanProperty;
static FACING_PROPERTIES: Map;
}

//net.minecraft.block.ChestBlock
class ChestBlock extends AbstractChestBlock, Waterloggable{
 rotate(state: BlockState,rotation: BlockRotation): BlockState;
 getStateForNeighborUpdate(state: BlockState,direction: Direction,neighborState: BlockState,world: WorldAccess,pos: BlockPos,neighborPos: BlockPos): BlockState;
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 hasComparatorOutput(state: BlockState): boolean;
 getComparatorOutput(state: BlockState,world: World,pos: BlockPos): number;
 canPathfindThrough(state: BlockState,world: BlockView,pos: BlockPos,type: NavigationType): boolean;
 onStateReplaced(state: BlockState,world: World,pos: BlockPos,newState: BlockState,moved: boolean): void;
 scheduledTick(state: BlockState,world: ServerWorld,pos: BlockPos,random: Random): void;
 getBlockEntitySource(state: BlockState,world: World,pos: BlockPos,ignoreBlocked: boolean): DoubleBlockProperties_PropertySource;
 mirror(state: BlockState,mirror: BlockMirror): BlockState;
 getFluidState(state: BlockState): FluidState;
 createScreenHandlerFactory(state: BlockState,world: World,pos: BlockPos): NamedScreenHandlerFactory;
 onUse(state: BlockState,world: World,pos: BlockPos,player: PlayerEntity,hand: Hand,hit: BlockHitResult): ActionResult;
 getTicker(world: World,state: BlockState,type: BlockEntityType): BlockEntityTicker;
 createBlockEntity(pos: BlockPos,state: BlockState): BlockEntity;
 getRenderType(state: BlockState): BlockRenderType;
 getPlacementState(ctx: ItemPlacementContext): BlockState;
 onPlaced(world: World,pos: BlockPos,state: BlockState,placer: LivingEntity,itemStack: ItemStack): void;
 getExpectedEntityType(): BlockEntityType;
}
class Static_ChestBlock {
static hasBlockOnTop(world: BlockView,pos: BlockPos): boolean;
static method_24168(worldx: WorldAccess,posx: BlockPos): boolean;
static isChestBlocked(world: WorldAccess,pos: BlockPos): boolean;
static getDoubleBlockType(state: BlockState): DoubleBlockProperties_Type;
static hasCatOnTop(world: WorldAccess,pos: BlockPos): boolean;
static getInventory(block: ChestBlock,state: BlockState,world: World,pos: BlockPos,ignoreBlocked: boolean): Inventory;
static getFacing(state: BlockState): Direction;
static getAnimationProgressRetriever(progress: LidOpenable): DoubleBlockProperties_PropertyRetriever;
static FACING: DirectionProperty;
static CHEST_TYPE: EnumProperty;
static WATERLOGGED: BooleanProperty;
static field_31057: number;
static field_31058: number;
static field_31059: number;
static DOUBLE_NORTH_SHAPE: VoxelShape;
static DOUBLE_SOUTH_SHAPE: VoxelShape;
static DOUBLE_WEST_SHAPE: VoxelShape;
static DOUBLE_EAST_SHAPE: VoxelShape;
static SINGLE_SHAPE: VoxelShape;
static INVENTORY_RETRIEVER: DoubleBlockProperties_PropertyRetriever;
static NAME_RETRIEVER: DoubleBlockProperties_PropertyRetriever;
}

//net.minecraft.block.ChainBlock
class ChainBlock extends PillarBlock, Waterloggable{
 getStateForNeighborUpdate(state: BlockState,direction: Direction,neighborState: BlockState,world: WorldAccess,pos: BlockPos,neighborPos: BlockPos): BlockState;
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 canPathfindThrough(state: BlockState,world: BlockView,pos: BlockPos,type: NavigationType): boolean;
 getFluidState(state: BlockState): FluidState;
 getPlacementState(ctx: ItemPlacementContext): BlockState;
}
class Static_ChainBlock {
static WATERLOGGED: BooleanProperty;
static field_31054: number;
static field_31055: number;
static Y_SHAPE: VoxelShape;
static Z_SHAPE: VoxelShape;
static X_SHAPE: VoxelShape;
}

//net.minecraft.block.DecoratedPotBlock
class DecoratedPotBlock extends BlockWithEntity, Waterloggable{
 appendTooltip(stack: ItemStack,world: BlockView,tooltip: List,options: TooltipContext): void;
 getStateForNeighborUpdate(state: BlockState,direction: Direction,neighborState: BlockState,world: WorldAccess,pos: BlockPos,neighborPos: BlockPos): BlockState;
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 canPathfindThrough(state: BlockState,world: BlockView,pos: BlockPos,type: NavigationType): boolean;
 getFluidState(state: BlockState): FluidState;
 getSoundGroup(state: BlockState): BlockSoundGroup;
 onBreak(world: World,pos: BlockPos,state: BlockState,player: PlayerEntity): void;
 createBlockEntity(pos: BlockPos,state: BlockState): BlockEntity;
 getDroppedStacks(state: BlockState,builder: LootContextParameterSet_Builder): List;
 getPlacementState(ctx: ItemPlacementContext): BlockState;
}
class Static_DecoratedPotBlock {
static method_51510(list: List,sherd: Item): void;
static method_49815(decoratedPotBlockEntity: DecoratedPotBlockEntity,lootConsumer: Consumer): void;
static SHERDS_DYNAMIC_DROP_ID: Identifier;
static SHAPE: VoxelShape;
static FACING: DirectionProperty;
static CRACKED: BooleanProperty;
static WATERLOGGED: BooleanProperty;
}

//net.minecraft.block.TrapdoorBlock
class TrapdoorBlock extends HorizontalFacingBlock, Waterloggable{
 getStateForNeighborUpdate(state: BlockState,direction: Direction,neighborState: BlockState,world: WorldAccess,pos: BlockPos,neighborPos: BlockPos): BlockState;
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 canPathfindThrough(state: BlockState,world: BlockView,pos: BlockPos,type: NavigationType): boolean;
 neighborUpdate(state: BlockState,world: World,pos: BlockPos,sourceBlock: Block,sourcePos: BlockPos,notify: boolean): void;
 getFluidState(state: BlockState): FluidState;
 onUse(state: BlockState,world: World,pos: BlockPos,player: PlayerEntity,hand: Hand,hit: BlockHitResult): ActionResult;
 getPlacementState(ctx: ItemPlacementContext): BlockState;
}
class Static_TrapdoorBlock {
static OPEN: BooleanProperty;
static HALF: EnumProperty;
static POWERED: BooleanProperty;
static WATERLOGGED: BooleanProperty;
static field_31266: number;
static EAST_SHAPE: VoxelShape;
static WEST_SHAPE: VoxelShape;
static SOUTH_SHAPE: VoxelShape;
static NORTH_SHAPE: VoxelShape;
static OPEN_BOTTOM_SHAPE: VoxelShape;
static OPEN_TOP_SHAPE: VoxelShape;
}

//net.minecraft.block.ConduitBlock
class ConduitBlock extends BlockWithEntity, Waterloggable{
 getStateForNeighborUpdate(state: BlockState,direction: Direction,neighborState: BlockState,world: WorldAccess,pos: BlockPos,neighborPos: BlockPos): BlockState;
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 canPathfindThrough(state: BlockState,world: BlockView,pos: BlockPos,type: NavigationType): boolean;
 getFluidState(state: BlockState): FluidState;
 getTicker(world: World,state: BlockState,type: BlockEntityType): BlockEntityTicker;
 createBlockEntity(pos: BlockPos,state: BlockState): BlockEntity;
 getRenderType(state: BlockState): BlockRenderType;
 getPlacementState(ctx: ItemPlacementContext): BlockState;
 onPlaced(world: World,pos: BlockPos,state: BlockState,placer: LivingEntity,itemStack: ItemStack): void;
}
class Static_ConduitBlock {
static WATERLOGGED: BooleanProperty;
static field_31075: number;
static SHAPE: VoxelShape;
}

//net.minecraft.block.MangroveRootsBlock
class MangroveRootsBlock extends Block, Waterloggable{
 getStateForNeighborUpdate(state: BlockState,direction: Direction,neighborState: BlockState,world: WorldAccess,pos: BlockPos,neighborPos: BlockPos): BlockState;
 isSideInvisible(state: BlockState,stateFrom: BlockState,direction: Direction): boolean;
 getFluidState(state: BlockState): FluidState;
 getPlacementState(ctx: ItemPlacementContext): BlockState;
}
class Static_MangroveRootsBlock {
static WATERLOGGED: BooleanProperty;
}

//net.minecraft.block.SmallDripleafBlock
class SmallDripleafBlock extends TallPlantBlock, Fertilizable, Waterloggable{
 grow(world: ServerWorld,random: Random,pos: BlockPos,state: BlockState): void;
 rotate(state: BlockState,rotation: BlockRotation): BlockState;
 getStateForNeighborUpdate(state: BlockState,direction: Direction,neighborState: BlockState,world: WorldAccess,pos: BlockPos,neighborPos: BlockPos): BlockState;
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 canPlaceAt(state: BlockState,world: WorldView,pos: BlockPos): boolean;
 mirror(state: BlockState,mirror: BlockMirror): BlockState;
 getFluidState(state: BlockState): FluidState;
 canGrow(world: World,random: Random,pos: BlockPos,state: BlockState): boolean;
 getVerticalModelOffsetMultiplier(): number;
 isFertilizable(world: WorldView,pos: BlockPos,state: BlockState,isClient: boolean): boolean;
 getPlacementState(ctx: ItemPlacementContext): BlockState;
 onPlaced(world: World,pos: BlockPos,state: BlockState,placer: LivingEntity,itemStack: ItemStack): void;
}
class Static_SmallDripleafBlock {
static WATERLOGGED: BooleanProperty;
static FACING: DirectionProperty;
static field_31246: number;
static SHAPE: VoxelShape;
}

//net.minecraft.block.CandleBlock
class CandleBlock extends AbstractCandleBlock, Waterloggable{
 getStateForNeighborUpdate(state: BlockState,direction: Direction,neighborState: BlockState,world: WorldAccess,pos: BlockPos,neighborPos: BlockPos): BlockState;
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 canPlaceAt(state: BlockState,world: WorldView,pos: BlockPos): boolean;
 canReplace(state: BlockState,context: ItemPlacementContext): boolean;
 tryFillWithFluid(world: WorldAccess,pos: BlockPos,state: BlockState,fluidState: FluidState): boolean;
 getFluidState(state: BlockState): FluidState;
 onUse(state: BlockState,world: World,pos: BlockPos,player: PlayerEntity,hand: Hand,hit: BlockHitResult): ActionResult;
 getPlacementState(ctx: ItemPlacementContext): BlockState;
}
class Static_CandleBlock {
static method_31629(): Int2ObjectMap;
static method_31631(state: BlockState): number;
static method_31628(statex: AbstractBlock_AbstractBlockState): boolean;
static canBeLit(state: BlockState): boolean;
static field_31050: number;
static MAX_CANDLE_AMOUNT: number;
static CANDLES: IntProperty;
static LIT: BooleanProperty;
static WATERLOGGED: BooleanProperty;
static STATE_TO_LUMINANCE: ToIntFunction;
static CANDLES_TO_PARTICLE_OFFSETS: Int2ObjectMap;
static ONE_CANDLE_SHAPE: VoxelShape;
static TWO_CANDLES_SHAPE: VoxelShape;
static THREE_CANDLES_SHAPE: VoxelShape;
static FOUR_CANDLES_SHAPE: VoxelShape;
}

//net.minecraft.block.AmethystClusterBlock
class AmethystClusterBlock extends AmethystBlock, Waterloggable{
 rotate(state: BlockState,rotation: BlockRotation): BlockState;
 getStateForNeighborUpdate(state: BlockState,direction: Direction,neighborState: BlockState,world: WorldAccess,pos: BlockPos,neighborPos: BlockPos): BlockState;
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 canPlaceAt(state: BlockState,world: WorldView,pos: BlockPos): boolean;
 mirror(state: BlockState,mirror: BlockMirror): BlockState;
 getFluidState(state: BlockState): FluidState;
 getPlacementState(ctx: ItemPlacementContext): BlockState;
}
class Static_AmethystClusterBlock {
static WATERLOGGED: BooleanProperty;
static FACING: DirectionProperty;
}

//net.minecraft.block.SlabBlock
class SlabBlock extends Block, Waterloggable{
 hasSidedTransparency(state: BlockState): boolean;
 getStateForNeighborUpdate(state: BlockState,direction: Direction,neighborState: BlockState,world: WorldAccess,pos: BlockPos,neighborPos: BlockPos): BlockState;
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 canFillWithFluid(world: BlockView,pos: BlockPos,state: BlockState,fluid: Fluid): boolean;
 canReplace(state: BlockState,context: ItemPlacementContext): boolean;
 canPathfindThrough(state: BlockState,world: BlockView,pos: BlockPos,type: NavigationType): boolean;
 tryFillWithFluid(world: WorldAccess,pos: BlockPos,state: BlockState,fluidState: FluidState): boolean;
 getFluidState(state: BlockState): FluidState;
 getPlacementState(ctx: ItemPlacementContext): BlockState;
}
class Static_SlabBlock {
static TYPE: EnumProperty;
static WATERLOGGED: BooleanProperty;
static BOTTOM_SHAPE: VoxelShape;
static TOP_SHAPE: VoxelShape;
}

//net.minecraft.block.HangingRootsBlock
class HangingRootsBlock extends Block, Waterloggable{
 getStateForNeighborUpdate(state: BlockState,direction: Direction,neighborState: BlockState,world: WorldAccess,pos: BlockPos,neighborPos: BlockPos): BlockState;
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 canPlaceAt(state: BlockState,world: WorldView,pos: BlockPos): boolean;
 getFluidState(state: BlockState): FluidState;
 getPlacementState(ctx: ItemPlacementContext): BlockState;
}
class Static_HangingRootsBlock {
static WATERLOGGED: BooleanProperty;
static SHAPE: VoxelShape;
}

//net.minecraft.block.BigDripleafStemBlock
class BigDripleafStemBlock extends HorizontalFacingBlock, Fertilizable, Waterloggable{
 grow(world: ServerWorld,random: Random,pos: BlockPos,state: BlockState): void;
 getStateForNeighborUpdate(state: BlockState,direction: Direction,neighborState: BlockState,world: WorldAccess,pos: BlockPos,neighborPos: BlockPos): BlockState;
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 canPlaceAt(state: BlockState,world: WorldView,pos: BlockPos): boolean;
 scheduledTick(state: BlockState,world: ServerWorld,pos: BlockPos,random: Random): void;
 getFluidState(state: BlockState): FluidState;
 canGrow(world: World,random: Random,pos: BlockPos,state: BlockState): boolean;
 isFertilizable(world: WorldView,pos: BlockPos,state: BlockState,isClient: boolean): boolean;
 getPickStack(world: BlockView,pos: BlockPos,state: BlockState): ItemStack;
}
class Static_BigDripleafStemBlock {
static placeStemAt(world: WorldAccess,pos: BlockPos,fluidState: FluidState,direction: Direction): boolean;
static WATERLOGGED: BooleanProperty;
static field_31021: number;
static NORTH_SHAPE: VoxelShape;
static SOUTH_SHAPE: VoxelShape;
static EAST_SHAPE: VoxelShape;
static WEST_SHAPE: VoxelShape;
}

//net.minecraft.block.StairsBlock
class StairsBlock extends Block, Waterloggable{
 rotate(state: BlockState,rotation: BlockRotation): BlockState;
 hasSidedTransparency(state: BlockState): boolean;
 getStateForNeighborUpdate(state: BlockState,direction: Direction,neighborState: BlockState,world: WorldAccess,pos: BlockPos,neighborPos: BlockPos): BlockState;
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 onDestroyedByExplosion(world: World,pos: BlockPos,explosion: Explosion): void;
 getBlastResistance(): number;
 hasRandomTicks(state: BlockState): boolean;
 randomDisplayTick(state: BlockState,world: World,pos: BlockPos,random: Random): void;
 canPathfindThrough(state: BlockState,world: BlockView,pos: BlockPos,type: NavigationType): boolean;
 onBlockAdded(state: BlockState,world: World,pos: BlockPos,oldState: BlockState,notify: boolean): void;
 onStateReplaced(state: BlockState,world: World,pos: BlockPos,newState: BlockState,moved: boolean): void;
 scheduledTick(state: BlockState,world: ServerWorld,pos: BlockPos,random: Random): void;
 randomTick(state: BlockState,world: ServerWorld,pos: BlockPos,random: Random): void;
 mirror(state: BlockState,mirror: BlockMirror): BlockState;
 getFluidState(state: BlockState): FluidState;
 onUse(state: BlockState,world: World,pos: BlockPos,player: PlayerEntity,hand: Hand,hit: BlockHitResult): ActionResult;
 onBlockBreakStart(state: BlockState,world: World,pos: BlockPos,player: PlayerEntity): void;
 onSteppedOn(world: World,pos: BlockPos,state: BlockState,entity: Entity): void;
 onBroken(world: WorldAccess,pos: BlockPos,state: BlockState): void;
 getPlacementState(ctx: ItemPlacementContext): BlockState;
}
class Static_StairsBlock {
static isStairs(state: BlockState): boolean;
static getStairShape(state: BlockState,world: BlockView,pos: BlockPos): StairShape;
static method_10674(voxelShape: VoxelShape,voxelShape2: VoxelShape,voxelShape3: VoxelShape,voxelShape4: VoxelShape,voxelShape5: VoxelShape,i: number): VoxelShape;
static method_10677(i: number): VoxelShape[];
static composeShapes(base: VoxelShape,northWest: VoxelShape,northEast: VoxelShape,southWest: VoxelShape,southEast: VoxelShape): VoxelShape[];
static composeShape(i: number,base: VoxelShape,northWest: VoxelShape,northEast: VoxelShape,southWest: VoxelShape,southEast: VoxelShape): VoxelShape;
static isDifferentOrientation(state: BlockState,world: BlockView,pos: BlockPos,dir: Direction): boolean;
static FACING: DirectionProperty;
static HALF: EnumProperty;
static SHAPE: EnumProperty;
static WATERLOGGED: BooleanProperty;
static TOP_SHAPE: VoxelShape;
static BOTTOM_SHAPE: VoxelShape;
static BOTTOM_NORTH_WEST_CORNER_SHAPE: VoxelShape;
static BOTTOM_SOUTH_WEST_CORNER_SHAPE: VoxelShape;
static TOP_NORTH_WEST_CORNER_SHAPE: VoxelShape;
static TOP_SOUTH_WEST_CORNER_SHAPE: VoxelShape;
static BOTTOM_NORTH_EAST_CORNER_SHAPE: VoxelShape;
static BOTTOM_SOUTH_EAST_CORNER_SHAPE: VoxelShape;
static TOP_NORTH_EAST_CORNER_SHAPE: VoxelShape;
static TOP_SOUTH_EAST_CORNER_SHAPE: VoxelShape;
static TOP_SHAPES: VoxelShape[];
static BOTTOM_SHAPES: VoxelShape[];
static SHAPE_INDICES: number[];
}

//net.minecraft.block.AbstractRailBlock
class AbstractRailBlock extends Block, Waterloggable{
 getStateForNeighborUpdate(state: BlockState,direction: Direction,neighborState: BlockState,world: WorldAccess,pos: BlockPos,neighborPos: BlockPos): BlockState;
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 cannotMakeCurves(): boolean;
 getShapeProperty(): Property;
 canPlaceAt(state: BlockState,world: WorldView,pos: BlockPos): boolean;
 onBlockAdded(state: BlockState,world: World,pos: BlockPos,oldState: BlockState,notify: boolean): void;
 onStateReplaced(state: BlockState,world: World,pos: BlockPos,newState: BlockState,moved: boolean): void;
 neighborUpdate(state: BlockState,world: World,pos: BlockPos,sourceBlock: Block,sourcePos: BlockPos,notify: boolean): void;
 getFluidState(state: BlockState): FluidState;
 getPlacementState(ctx: ItemPlacementContext): BlockState;
}
class Static_AbstractRailBlock {
static isRail(world: World,pos: BlockPos): boolean;
static isRail(state: BlockState): boolean;
static shouldDropRail(pos: BlockPos,world: World,shape: RailShape): boolean;
static STRAIGHT_SHAPE: VoxelShape;
static ASCENDING_SHAPE: VoxelShape;
static WATERLOGGED: BooleanProperty;
}

//net.minecraft.block.AbstractSignBlock
class AbstractSignBlock extends BlockWithEntity, Waterloggable{
 getCenter(state: BlockState): Vec3d;
 getStateForNeighborUpdate(state: BlockState,direction: Direction,neighborState: BlockState,world: WorldAccess,pos: BlockPos,neighborPos: BlockPos): BlockState;
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 getRotationDegrees(state: BlockState): number;
 getWoodType(): WoodType;
 openEditScreen(player: PlayerEntity,blockEntity: SignBlockEntity,front: boolean): void;
 getFluidState(state: BlockState): FluidState;
 onUse(state: BlockState,world: World,pos: BlockPos,player: PlayerEntity,hand: Hand,hit: BlockHitResult): ActionResult;
 getTicker(world: World,state: BlockState,type: BlockEntityType): BlockEntityTicker;
 createBlockEntity(pos: BlockPos,state: BlockState): BlockEntity;
 canMobSpawnInside(state: BlockState): boolean;
}
class Static_AbstractSignBlock {
static getWoodType(block: Block): WoodType;
static method_51172(message: Text): boolean;
static WATERLOGGED: BooleanProperty;
static field_31243: number;
static SHAPE: VoxelShape;
}

//net.minecraft.block.SeaPickleBlock
class SeaPickleBlock extends PlantBlock, Fertilizable, Waterloggable{
 grow(world: ServerWorld,random: Random,pos: BlockPos,state: BlockState): void;
 getStateForNeighborUpdate(state: BlockState,direction: Direction,neighborState: BlockState,world: WorldAccess,pos: BlockPos,neighborPos: BlockPos): BlockState;
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 canPlaceAt(state: BlockState,world: WorldView,pos: BlockPos): boolean;
 canReplace(state: BlockState,context: ItemPlacementContext): boolean;
 canPathfindThrough(state: BlockState,world: BlockView,pos: BlockPos,type: NavigationType): boolean;
 getFluidState(state: BlockState): FluidState;
 canGrow(world: World,random: Random,pos: BlockPos,state: BlockState): boolean;
 isFertilizable(world: WorldView,pos: BlockPos,state: BlockState,isClient: boolean): boolean;
 getPlacementState(ctx: ItemPlacementContext): BlockState;
}
class Static_SeaPickleBlock {
static isDry(state: BlockState): boolean;
static MAX_PICKLES: number;
static PICKLES: IntProperty;
static WATERLOGGED: BooleanProperty;
static ONE_PICKLE_SHAPE: VoxelShape;
static TWO_PICKLES_SHAPE: VoxelShape;
static THREE_PICKLES_SHAPE: VoxelShape;
static FOUR_PICKLES_SHAPE: VoxelShape;
}

//net.minecraft.block.WallBlock
class WallBlock extends Block, Waterloggable{
 rotate(state: BlockState,rotation: BlockRotation): BlockState;
 getStateForNeighborUpdate(state: BlockState,direction: Direction,neighborState: BlockState,world: WorldAccess,pos: BlockPos,neighborPos: BlockPos): BlockState;
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 isTransparent(state: BlockState,world: BlockView,pos: BlockPos): boolean;
 canPathfindThrough(state: BlockState,world: BlockView,pos: BlockPos,type: NavigationType): boolean;
 mirror(state: BlockState,mirror: BlockMirror): BlockState;
 getFluidState(state: BlockState): FluidState;
 getCollisionShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 getPlacementState(ctx: ItemPlacementContext): BlockState;
}
class Static_WallBlock {
static isConnected(state: BlockState,property: Property): boolean;
static getVoxelShape(base: VoxelShape,wallShape: WallShape,tall: VoxelShape,low: VoxelShape): VoxelShape;
static shouldUseTallShape(aboveShape: VoxelShape,tallShape: VoxelShape): boolean;
static UP: BooleanProperty;
static EAST_SHAPE: EnumProperty;
static NORTH_SHAPE: EnumProperty;
static SOUTH_SHAPE: EnumProperty;
static WEST_SHAPE: EnumProperty;
static WATERLOGGED: BooleanProperty;
static field_31276: number;
static field_31277: number;
static field_31278: number;
static field_31279: number;
static field_31280: number;
static field_31281: number;
static TALL_POST_SHAPE: VoxelShape;
static TALL_NORTH_SHAPE: VoxelShape;
static TALL_SOUTH_SHAPE: VoxelShape;
static TALL_WEST_SHAPE: VoxelShape;
static TALL_EAST_SHAPE: VoxelShape;
}

//net.minecraft.block.LadderBlock
class LadderBlock extends Block, Waterloggable{
 rotate(state: BlockState,rotation: BlockRotation): BlockState;
 getStateForNeighborUpdate(state: BlockState,direction: Direction,neighborState: BlockState,world: WorldAccess,pos: BlockPos,neighborPos: BlockPos): BlockState;
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 canPlaceAt(state: BlockState,world: WorldView,pos: BlockPos): boolean;
 mirror(state: BlockState,mirror: BlockMirror): BlockState;
 getFluidState(state: BlockState): FluidState;
 getPlacementState(ctx: ItemPlacementContext): BlockState;
}
class Static_LadderBlock {
static FACING: DirectionProperty;
static WATERLOGGED: BooleanProperty;
static field_31106: number;
static EAST_SHAPE: VoxelShape;
static WEST_SHAPE: VoxelShape;
static SOUTH_SHAPE: VoxelShape;
static NORTH_SHAPE: VoxelShape;
}

//net.minecraft.block.EnderChestBlock
class EnderChestBlock extends AbstractChestBlock, Waterloggable{
 rotate(state: BlockState,rotation: BlockRotation): BlockState;
 getStateForNeighborUpdate(state: BlockState,direction: Direction,neighborState: BlockState,world: WorldAccess,pos: BlockPos,neighborPos: BlockPos): BlockState;
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 randomDisplayTick(state: BlockState,world: World,pos: BlockPos,random: Random): void;
 canPathfindThrough(state: BlockState,world: BlockView,pos: BlockPos,type: NavigationType): boolean;
 scheduledTick(state: BlockState,world: ServerWorld,pos: BlockPos,random: Random): void;
 getBlockEntitySource(state: BlockState,world: World,pos: BlockPos,ignoreBlocked: boolean): DoubleBlockProperties_PropertySource;
 mirror(state: BlockState,mirror: BlockMirror): BlockState;
 getFluidState(state: BlockState): FluidState;
 onUse(state: BlockState,world: World,pos: BlockPos,player: PlayerEntity,hand: Hand,hit: BlockHitResult): ActionResult;
 getTicker(world: World,state: BlockState,type: BlockEntityType): BlockEntityTicker;
 createBlockEntity(pos: BlockPos,state: BlockState): BlockEntity;
 getRenderType(state: BlockState): BlockRenderType;
 getPlacementState(ctx: ItemPlacementContext): BlockState;
}
class Static_EnderChestBlock {
static method_17468(enderChestInventory: EnderChestInventory,syncId: number,inventory: PlayerInventory,playerx: PlayerEntity): ScreenHandler;
static method_24205(): BlockEntityType;
static FACING: DirectionProperty;
static WATERLOGGED: BooleanProperty;
static SHAPE: VoxelShape;
static CONTAINER_NAME: Text;
}

//net.minecraft.block.SculkShriekerBlock
class SculkShriekerBlock extends BlockWithEntity, Waterloggable{
 hasSidedTransparency(state: BlockState): boolean;
 getStateForNeighborUpdate(state: BlockState,direction: Direction,neighborState: BlockState,world: WorldAccess,pos: BlockPos,neighborPos: BlockPos): BlockState;
 onStateReplaced(state: BlockState,world: World,pos: BlockPos,newState: BlockState,moved: boolean): void;
 onStacksDropped(state: BlockState,world: ServerWorld,pos: BlockPos,tool: ItemStack,dropExperience: boolean): void;
 scheduledTick(state: BlockState,world: ServerWorld,pos: BlockPos,random: Random): void;
 getCullingShape(state: BlockState,world: BlockView,pos: BlockPos): VoxelShape;
 getFluidState(state: BlockState): FluidState;
 getCollisionShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 getTicker(world: World,state: BlockState,type: BlockEntityType): BlockEntityTicker;
 createBlockEntity(pos: BlockPos,state: BlockState): BlockEntity;
 getRenderType(state: BlockState): BlockRenderType;
 onSteppedOn(world: World,pos: BlockPos,state: BlockState,entity: Entity): void;
 getPlacementState(ctx: ItemPlacementContext): BlockState;
}
class Static_SculkShriekerBlock {
static method_43133(serverWorld: ServerWorld,blockEntity: SculkShriekerBlockEntity): void;
static method_43134(serverWorld: ServerWorld,serverPlayerEntity: ServerPlayerEntity,blockEntity: SculkShriekerBlockEntity): void;
static method_43132(serverWorld: ServerWorld,blockEntity: SculkShriekerBlockEntity): void;
static method_42317(world: World,pos: BlockPos,statex: BlockState,sculkShriekerBlockEntity: SculkShriekerBlockEntity): void;
static SHRIEKING: BooleanProperty;
static WATERLOGGED: BooleanProperty;
static CAN_SUMMON: BooleanProperty;
static SHAPE: VoxelShape;
static TOP: number;
}

//net.minecraft.block.SculkVeinBlock
class SculkVeinBlock extends MultifaceGrowthBlock, SculkSpreadable, Waterloggable{
 spread(cursor: SculkSpreadManager_Cursor,world: WorldAccess,catalystPos: BlockPos,random: Random,spreadManager: SculkSpreadManager,shouldConvertToBlock: boolean): number;
 getStateForNeighborUpdate(state: BlockState,direction: Direction,neighborState: BlockState,world: WorldAccess,pos: BlockPos,neighborPos: BlockPos): BlockState;
 getGrower(): LichenGrower;
 getSamePositionOnlyGrower(): LichenGrower;
 spreadAtSamePosition(world: WorldAccess,state: BlockState,pos: BlockPos,random: Random): void;
 canReplace(state: BlockState,context: ItemPlacementContext): boolean;
 getFluidState(state: BlockState): FluidState;
}
class Static_SculkVeinBlock {
static place(world: WorldAccess,pos: BlockPos,state: BlockState,directions: Collection): boolean;
static veinCoversSculkReplaceable(world: WorldAccess,state: BlockState,pos: BlockPos): boolean;
static WATERLOGGED: BooleanProperty;
}

//net.minecraft.block.GlowLichenBlock
class GlowLichenBlock extends MultifaceGrowthBlock, Fertilizable, Waterloggable{
 grow(world: ServerWorld,random: Random,pos: BlockPos,state: BlockState): void;
 getStateForNeighborUpdate(state: BlockState,direction: Direction,neighborState: BlockState,world: WorldAccess,pos: BlockPos,neighborPos: BlockPos): BlockState;
 getGrower(): LichenGrower;
 isTransparent(state: BlockState,world: BlockView,pos: BlockPos): boolean;
 canReplace(state: BlockState,context: ItemPlacementContext): boolean;
 getFluidState(state: BlockState): FluidState;
 canGrow(world: World,random: Random,pos: BlockPos,state: BlockState): boolean;
 isFertilizable(world: WorldView,pos: BlockPos,state: BlockState,isClient: boolean): boolean;
}
class Static_GlowLichenBlock {
static method_37363(i: number,state: BlockState): number;
static getLuminanceSupplier(luminance: number): ToIntFunction;
static WATERLOGGED: BooleanProperty;
}

//net.minecraft.block.CoralParentBlock
class CoralParentBlock extends Block, Waterloggable{
 getStateForNeighborUpdate(state: BlockState,direction: Direction,neighborState: BlockState,world: WorldAccess,pos: BlockPos,neighborPos: BlockPos): BlockState;
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 canPlaceAt(state: BlockState,world: WorldView,pos: BlockPos): boolean;
 getFluidState(state: BlockState): FluidState;
 getPlacementState(ctx: ItemPlacementContext): BlockState;
}
class Static_CoralParentBlock {
static isInWater(state: BlockState,world: BlockView,pos: BlockPos): boolean;
static WATERLOGGED: BooleanProperty;
static SHAPE: VoxelShape;
}

//net.minecraft.block.PropaguleBlock
class PropaguleBlock extends SaplingBlock, Waterloggable{
 grow(world: ServerWorld,random: Random,pos: BlockPos,state: BlockState): void;
 getStateForNeighborUpdate(state: BlockState,direction: Direction,neighborState: BlockState,world: WorldAccess,pos: BlockPos,neighborPos: BlockPos): BlockState;
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 canPlaceAt(state: BlockState,world: WorldView,pos: BlockPos): boolean;
 randomTick(state: BlockState,world: ServerWorld,pos: BlockPos,random: Random): void;
 getFluidState(state: BlockState): FluidState;
 canGrow(world: World,random: Random,pos: BlockPos,state: BlockState): boolean;
 isFertilizable(world: WorldView,pos: BlockPos,state: BlockState,isClient: boolean): boolean;
 getPlacementState(ctx: ItemPlacementContext): BlockState;
}
class Static_PropaguleBlock {
static isHanging(state: BlockState): boolean;
static getHangingState(age: number): BlockState;
static isFullyGrown(state: BlockState): boolean;
static getDefaultHangingState(): BlockState;
static AGE: IntProperty;
static field_37589: number;
static SHAPES: VoxelShape[];
static WATERLOGGED: BooleanProperty;
static HANGING: BooleanProperty;
static field_38749: number;
}

//net.minecraft.block.CampfireBlock
class CampfireBlock extends BlockWithEntity, Waterloggable{
 rotate(state: BlockState,rotation: BlockRotation): BlockState;
 getStateForNeighborUpdate(state: BlockState,direction: Direction,neighborState: BlockState,world: WorldAccess,pos: BlockPos,neighborPos: BlockPos): BlockState;
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 randomDisplayTick(state: BlockState,world: World,pos: BlockPos,random: Random): void;
 canPathfindThrough(state: BlockState,world: BlockView,pos: BlockPos,type: NavigationType): boolean;
 onStateReplaced(state: BlockState,world: World,pos: BlockPos,newState: BlockState,moved: boolean): void;
 onEntityCollision(state: BlockState,world: World,pos: BlockPos,entity: Entity): void;
 onProjectileHit(world: World,state: BlockState,hit: BlockHitResult,projectile: ProjectileEntity): void;
 tryFillWithFluid(world: WorldAccess,pos: BlockPos,state: BlockState,fluidState: FluidState): boolean;
 mirror(state: BlockState,mirror: BlockMirror): BlockState;
 getFluidState(state: BlockState): FluidState;
 onUse(state: BlockState,world: World,pos: BlockPos,player: PlayerEntity,hand: Hand,hit: BlockHitResult): ActionResult;
 getTicker(world: World,state: BlockState,type: BlockEntityType): BlockEntityTicker;
 createBlockEntity(pos: BlockPos,state: BlockState): BlockEntity;
 getRenderType(state: BlockState): BlockRenderType;
 getPlacementState(ctx: ItemPlacementContext): BlockState;
}
class Static_CampfireBlock {
static isLitCampfireInRange(world: World,pos: BlockPos): boolean;
static canBeLit(state: BlockState): boolean;
static spawnSmokeParticle(world: World,pos: BlockPos,isSignal: boolean,lotsOfSmoke: boolean): void;
static method_30034(statex: AbstractBlock_AbstractBlockState): boolean;
static extinguish(entity: Entity,world: WorldAccess,pos: BlockPos,state: BlockState): void;
static isLitCampfire(state: BlockState): boolean;
static SHAPE: VoxelShape;
static LIT: BooleanProperty;
static SIGNAL_FIRE: BooleanProperty;
static WATERLOGGED: BooleanProperty;
static FACING: DirectionProperty;
static SMOKEY_SHAPE: VoxelShape;
static field_31049: number;
}

//net.minecraft.client.render.RenderPhase$DepthTest
class RenderPhase_DepthTest extends RenderPhase{
 toString(): string;
}
class Static_RenderPhase_DepthTest {
static method_23548(i: number): void;
static method_23547(i: number): void;
}

//net.minecraft.client.render.RenderPhase$Layering
class RenderPhase_Layering extends RenderPhase{
}

//net.minecraft.client.render.RenderPhase$Target
class RenderPhase_Target extends RenderPhase{
}

//net.minecraft.client.render.RenderPhase$TextureBase
class RenderPhase_TextureBase extends RenderPhase{
}
class Static_RenderPhase_TextureBase {
static method_34557(): void;
static method_34558(): void;
}

//net.minecraft.client.render.RenderPhase$LineWidth
class RenderPhase_LineWidth extends RenderPhase{
 toString(): string;
}
class Static_RenderPhase_LineWidth {
static method_23553(optionalDouble: OptionalDouble): void;
static method_23554(optionalDouble: OptionalDouble): void;
}

//net.minecraft.client.render.RenderPhase$ColorLogic
class RenderPhase_ColorLogic extends RenderPhase{
}

//net.minecraft.client.render.RenderPhase$Toggleable
class RenderPhase_Toggleable extends RenderPhase{
 toString(): string;
}

//net.minecraft.client.render.RenderPhase$Texturing
class RenderPhase_Texturing extends RenderPhase{
}

//net.minecraft.client.render.RenderPhase$Transparency
class RenderPhase_Transparency extends RenderPhase{
}

//net.minecraft.client.render.RenderLayer
class RenderLayer extends RenderPhase{
 toString(): string;
 isOutline(): boolean;
 getAffectedOutline(): Optional;
 getExpectedBufferSize(): number;
 getDrawMode(): VertexFormat_DrawMode;
 asOptional(): Optional;
 draw(buffer: BufferBuilder,sorter: VertexSorter): void;
 areVerticesNotShared(): boolean;
 getVertexFormat(): VertexFormat;
 hasCrumbling(): boolean;
}
class Static_RenderLayer {
static of(name: string,vertexFormat: VertexFormat,drawMode: VertexFormat_DrawMode,expectedBufferSize: number,phaseData: RenderLayer_MultiPhaseParameters): RenderLayer_MultiPhase;
static of(name: string,vertexFormat: VertexFormat,drawMode: VertexFormat_DrawMode,expectedBufferSize: number,hasCrumbling: boolean,translucent: boolean,phases: RenderLayer_MultiPhaseParameters): RenderLayer_MultiPhase;
static of(program: RenderPhase_ShaderProgram): RenderLayer_MultiPhaseParameters;
static getText(texture: Identifier): RenderLayer;
static getBlockLayers(): List;
static getLines(): RenderLayer;
static getEntityTranslucent(texture: Identifier,affectsOutline: boolean): RenderLayer;
static getEntityTranslucent(texture: Identifier): RenderLayer;
static getEntityCutoutNoCull(texture: Identifier,affectsOutline: boolean): RenderLayer;
static getEntityCutoutNoCull(texture: Identifier): RenderLayer;
static getEntityCutoutNoCullZOffset(texture: Identifier): RenderLayer;
static getEntityCutoutNoCullZOffset(texture: Identifier,affectsOutline: boolean): RenderLayer;
static getTranslucentNoCrumbling(): RenderLayer;
static getEntitySmoothCutout(texture: Identifier): RenderLayer;
static getGlint(): RenderLayer;
static getArmorGlint(): RenderLayer;
static getDirectGlint(): RenderLayer;
static getEntityGlint(): RenderLayer;
static method_34823(texture: Identifier): RenderLayer;
static method_34827(texture: Identifier): RenderLayer;
static method_34832(texture: Identifier,affectsOutline: Boolean): RenderLayer;
static method_34825(texture: Identifier): RenderLayer;
static method_34826(texture: Identifier): RenderLayer;
static method_34831(texture: Identifier,affectsOutline: Boolean): RenderLayer;
static method_34824(texture: Identifier): RenderLayer;
static getTextBackground(): RenderLayer;
static getItemPhaseData(): RenderLayer_MultiPhaseParameters;
static getLineStrip(): RenderLayer;
static getLeash(): RenderLayer;
static getOutline(texture: Identifier): RenderLayer;
static getEyes(texture: Identifier): RenderLayer;
static method_49044(lineWidth: Double): RenderLayer_MultiPhase;
static getEntityDecal(texture: Identifier): RenderLayer;
static getEnergySwirl(texture: Identifier,x: number,y: number): RenderLayer;
static getEntityAlpha(texture: Identifier): RenderLayer;
static getTextIntensity(texture: Identifier): RenderLayer;
static getTextSeeThrough(texture: Identifier): RenderLayer;
static getLightning(): RenderLayer;
static method_42598(texture: Identifier,affectsOutline: Boolean): RenderLayer;
static method_34835(texture: Identifier): RenderLayer;
static method_34837(texture: Identifier): RenderLayer;
static method_34840(texture: Identifier): RenderLayer;
static method_34830(texture: Identifier,affectsOutline: Boolean): RenderLayer;
static method_34833(texture: Identifier): RenderLayer;
static method_34836(texture: Identifier): RenderLayer;
static method_34839(texture: Identifier): RenderLayer;
static method_36436(texture: Identifier): RenderLayer;
static method_36437(texture: Identifier): RenderLayer;
static method_34829(texture: Identifier,affectsOutline: Boolean): RenderLayer;
static method_37347(texture: Identifier): RenderLayer;
static method_34838(texture: Identifier): RenderLayer;
static method_37348(texture: Identifier): RenderLayer;
static method_34834(texture: Identifier): RenderLayer;
static method_34822(texture: Identifier): RenderLayer;
static getBlockBreaking(texture: Identifier): RenderLayer;
static getGui(): RenderLayer;
static getArmorEntityGlint(): RenderLayer;
static getGlintTranslucent(): RenderLayer;
static getDirectEntityGlint(): RenderLayer;
static getGuiOverlay(): RenderLayer;
static getArmorCutoutNoCull(texture: Identifier): RenderLayer;
static getDebugSectionQuads(): RenderLayer;
static getEntitySolid(texture: Identifier): RenderLayer;
static getEntityNoOutline(texture: Identifier): RenderLayer;
static getDebugFilledBox(): RenderLayer;
static getEntityTranslucentCull(texture: Identifier): RenderLayer;
static getTranslucentMovingBlock(): RenderLayer;
static getItemEntityTranslucentCull(texture: Identifier): RenderLayer;
static getTripwire(): RenderLayer;
static getSolid(): RenderLayer;
static getCutoutMipped(): RenderLayer;
static getEntityCutout(texture: Identifier): RenderLayer;
static getCutout(): RenderLayer;
static getTranslucent(): RenderLayer;
static getGuiGhostRecipeOverlay(): RenderLayer;
static getDebugLineStrip(lineWidth: number): RenderLayer;
static getEntityShadow(texture: Identifier): RenderLayer;
static getBeaconBeam(texture: Identifier,translucent: boolean): RenderLayer;
static getEndPortal(): RenderLayer;
static getEndGateway(): RenderLayer;
static getDebugQuads(): RenderLayer;
static getWaterMask(): RenderLayer;
static getTextBackgroundSeeThrough(): RenderLayer;
static getTextIntensitySeeThrough(texture: Identifier): RenderLayer;
static getGuiTextHighlight(): RenderLayer;
static getEntityTranslucentEmissive(texture: Identifier,affectsOutline: boolean): RenderLayer;
static getEntityTranslucentEmissive(texture: Identifier): RenderLayer;
static getTextPolygonOffset(texture: Identifier): RenderLayer;
static getTextIntensityPolygonOffset(texture: Identifier): RenderLayer;
static getTripwirePhaseData(): RenderLayer_MultiPhaseParameters;
static field_32776: number;
static field_32777: number;
static SOLID_BUFFER_SIZE: number;
static TRANSLUCENT_BUFFER_SIZE: number;
static CUTOUT_BUFFER_SIZE: number;
static DEFAULT_BUFFER_SIZE: number;
static SOLID: RenderLayer;
static CUTOUT_MIPPED: RenderLayer;
static CUTOUT: RenderLayer;
static TRANSLUCENT: RenderLayer;
static TRANSLUCENT_MOVING_BLOCK: RenderLayer;
static TRANSLUCENT_NO_CRUMBLING: RenderLayer;
static ARMOR_CUTOUT_NO_CULL: Function;
static ENTITY_SOLID: Function;
static ENTITY_CUTOUT: Function;
static ENTITY_CUTOUT_NO_CULL: BiFunction;
static ENTITY_CUTOUT_NO_CULL_Z_OFFSET: BiFunction;
static ITEM_ENTITY_TRANSLUCENT_CULL: Function;
static ENTITY_TRANSLUCENT_CULL: Function;
static ENTITY_TRANSLUCENT: BiFunction;
static ENTITY_TRANSLUCENT_EMISSIVE: BiFunction;
static ENTITY_SMOOTH_CUTOUT: Function;
static BEACON_BEAM: BiFunction;
static ENTITY_DECAL: Function;
static ENTITY_NO_OUTLINE: Function;
static ENTITY_SHADOW: Function;
static ENTITY_ALPHA: Function;
static EYES: Function;
static LEASH: RenderLayer;
static WATER_MASK: RenderLayer;
static ARMOR_GLINT: RenderLayer;
static ARMOR_ENTITY_GLINT: RenderLayer;
static GLINT_TRANSLUCENT: RenderLayer;
static GLINT: RenderLayer;
static DIRECT_GLINT: RenderLayer;
static ENTITY_GLINT: RenderLayer;
static DIRECT_ENTITY_GLINT: RenderLayer;
static CRUMBLING: Function;
static TEXT: Function;
static TEXT_BACKGROUND: RenderLayer;
static TEXT_INTENSITY: Function;
static TEXT_POLYGON_OFFSET: Function;
static TEXT_INTENSITY_POLYGON_OFFSET: Function;
static TEXT_SEE_THROUGH: Function;
static TEXT_BACKGROUND_SEE_THROUGH: RenderLayer;
static TEXT_INTENSITY_SEE_THROUGH: Function;
static LIGHTNING: RenderLayer;
static TRIPWIRE: RenderLayer;
static END_PORTAL: RenderLayer;
static END_GATEWAY: RenderLayer;
static LINES: RenderLayer_MultiPhase;
static LINE_STRIP: RenderLayer_MultiPhase;
static DEBUG_LINE_STRIP: Function;
static DEBUG_FILLED_BOX: RenderLayer_MultiPhase;
static DEBUG_QUADS: RenderLayer_MultiPhase;
static DEBUG_SECTION_QUADS: RenderLayer_MultiPhase;
static GUI: RenderLayer_MultiPhase;
static GUI_OVERLAY: RenderLayer_MultiPhase;
static GUI_TEXT_HIGHLIGHT: RenderLayer_MultiPhase;
static GUI_GHOST_RECIPE_OVERLAY: RenderLayer_MultiPhase;
static BLOCK_LAYERS: ImmutableList;
}

//net.minecraft.client.render.RenderPhase$ShaderProgram
class RenderPhase_ShaderProgram extends RenderPhase{
 toString(): string;
}
class Static_RenderPhase_ShaderProgram {
static method_34566(): void;
static method_34568(): void;
static method_34565(): void;
static method_34564(supplier: Supplier): void;
static method_34567(): ShaderProgram;
}

//net.minecraft.client.render.RenderPhase$WriteMaskState
class RenderPhase_WriteMaskState extends RenderPhase{
 toString(): string;
}
class Static_RenderPhase_WriteMaskState {
static method_23569(bl: boolean,bl2: boolean): void;
static method_23568(bl: boolean,bl2: boolean): void;
}

//net.minecraft.nbt.AbstractNbtList
class AbstractNbtList extends AbstractList, NbtElement{
 add(i: number,nbtElement: NbtElement): void;
 add(index: number,value: Object): void;
 remove(index: number): Object;
 remove(i: number): NbtElement;
 set(index: number,value: Object): Object;
 set(i: number,nbtElement: NbtElement): NbtElement;
 setElement(index: number,element: NbtElement): boolean;
 addElement(index: number,element: NbtElement): boolean;
 getHeldType(): byte;
}

//net.minecraft.block.Block
class Block extends AbstractBlock, ItemConvertible, FabricBlock{
 getName(): MutableText;
 toString(): string;
 appendTooltip(stack: ItemStack,world: BlockView,tooltip: List,options: TooltipContext): void;
 onDestroyedByExplosion(world: World,pos: BlockPos,explosion: Explosion): void;
 shouldDropItemsOnExplosion(explosion: Explosion): boolean;
 isTransparent(state: BlockState,world: BlockView,pos: BlockPos): boolean;
 getBlastResistance(): number;
 hasRandomTicks(state: BlockState): boolean;
 randomDisplayTick(state: BlockState,world: World,pos: BlockPos,random: Random): void;
 hasDynamicBounds(): boolean;
 getVelocityMultiplier(): number;
 getSoundGroup(state: BlockState): BlockSoundGroup;
 onBreak(world: World,pos: BlockPos,state: BlockState,player: PlayerEntity): void;
 getDefaultState(): BlockState;
 getRegistryEntry(): RegistryEntry_Reference;
 asItem(): Item;
 onEntityLand(world: BlockView,entity: Entity): void;
 onSteppedOn(world: World,pos: BlockPos,state: BlockState,entity: Entity): void;
 onLandedUpon(world: World,state: BlockState,pos: BlockPos,entity: Entity,fallDistance: number): void;
 onBroken(world: WorldAccess,pos: BlockPos,state: BlockState): void;
 getStateManager(): StateManager;
 getTranslationKey(): string;
 getPlacementState(ctx: ItemPlacementContext): BlockState;
 canMobSpawnInside(state: BlockState): boolean;
 precipitationTick(state: BlockState,world: World,pos: BlockPos,precipitation: Biome_Precipitation): void;
 getPickStack(world: BlockView,pos: BlockPos,state: BlockState): ItemStack;
 onPlaced(world: World,pos: BlockPos,state: BlockState,placer: LivingEntity,itemStack: ItemStack): void;
 getStateWithProperties(state: BlockState): BlockState;
 afterBreak(world: World,player: PlayerEntity,pos: BlockPos,state: BlockState,blockEntity: BlockEntity,tool: ItemStack): void;
 getSlipperiness(): number;
 getJumpVelocityMultiplier(): number;
}
class Static_Block {
static replace(state: BlockState,newState: BlockState,world: WorldAccess,pos: BlockPos,flags: number,maxUpdateDepth: number): void;
static replace(state: BlockState,newState: BlockState,world: WorldAccess,pos: BlockPos,flags: number): void;
static createCuboidShape(minX: number,minY: number,minZ: number,maxX: number,maxY: number,maxZ: number): VoxelShape;
static getBlockFromItem(item: Item): Block;
static isShapeFullCube(shape: VoxelShape): boolean;
static dropStacks(state: BlockState,world: World,pos: BlockPos): void;
static dropStacks(state: BlockState,world: World,pos: BlockPos,blockEntity: BlockEntity,entity: Entity,tool: ItemStack): void;
static dropStacks(state: BlockState,world: WorldAccess,pos: BlockPos,blockEntity: BlockEntity): void;
static dropStack(world: World,itemEntitySupplier: Supplier,stack: ItemStack): void;
static dropStack(world: World,pos: BlockPos,direction: Direction,stack: ItemStack): void;
static dropStack(world: World,pos: BlockPos,stack: ItemStack): void;
static postProcessState(state: BlockState,world: WorldAccess,pos: BlockPos): BlockState;
static getStateFromRawId(stateId: number): BlockState;
static getRawIdFromState(state: BlockState): number;
static getDroppedStacks(state: BlockState,world: ServerWorld,pos: BlockPos,blockEntity: BlockEntity,entity: Entity,stack: ItemStack): List;
static getDroppedStacks(state: BlockState,world: ServerWorld,pos: BlockPos,blockEntity: BlockEntity): List;
static hasTopRim(world: BlockView,pos: BlockPos): boolean;
static cannotConnect(state: BlockState): boolean;
static method_9544(world: World,blockPos: BlockPos,stack: ItemStack): void;
static method_9596(worldAccess: WorldAccess,blockPos: BlockPos,stack: ItemStack): void;
static method_36991(world: World,d: number,e: number,f: number,itemStack: ItemStack,g: number,h: number,i: number): ItemEntity;
static method_9508(): Object2ByteLinkedOpenHashMap;
static method_9587(world: World,blockPos: BlockPos,stack: ItemStack): void;
static copyProperty(source: BlockState,target: BlockState,property: Property): BlockState;
static method_36990(world: World,d: number,e: number,f: number,itemStack: ItemStack): ItemEntity;
static isFaceFullSquare(shape: VoxelShape,side: Direction): boolean;
static sideCoversSmallSquare(world: WorldView,pos: BlockPos,side: Direction): boolean;
static pushEntitiesUpBeforeBlockChange(from: BlockState,to: BlockState,world: WorldAccess,pos: BlockPos): BlockState;
static shouldDrawSide(state: BlockState,world: BlockView,pos: BlockPos,side: Direction,otherPos: BlockPos): boolean;
static LOGGER: Logger;
static STATE_IDS: IdList;
static FULL_CUBE_SHAPE_CACHE: LoadingCache;
static NOTIFY_NEIGHBORS: number;
static NOTIFY_LISTENERS: number;
static NO_REDRAW: number;
static REDRAW_ON_MAIN_THREAD: number;
static FORCE_STATE: number;
static SKIP_DROPS: number;
static MOVED: number;
static field_31035: number;
static NOTIFY_ALL: number;
static field_31022: number;
static field_31023: number;
static field_31024: number;
static field_31025: number;
static field_31026: number;
static FACE_CULL_MAP: ThreadLocal;
}

//net.minecraft.loot.provider.nbt.LootNbtProviderType
class LootNbtProviderType extends JsonSerializableType{
}

//net.minecraft.loot.provider.number.LootNumberProviderType
class LootNumberProviderType extends JsonSerializableType{
}

//net.minecraft.loot.condition.LootConditionType
class LootConditionType extends JsonSerializableType{
}

//net.minecraft.loot.function.LootFunctionType
class LootFunctionType extends JsonSerializableType{
}

//net.minecraft.loot.provider.score.LootScoreProviderType
class LootScoreProviderType extends JsonSerializableType{
}

//net.minecraft.loot.entry.LootPoolEntryType
class LootPoolEntryType extends JsonSerializableType{
}

//net.minecraft.server.integrated.IntegratedPlayerManager
class IntegratedPlayerManager extends PlayerManager{
 getUserData(): NbtCompound;
 checkCanJoin(address: SocketAddress,profile: GameProfile): Text;
 getServer(): MinecraftServer;
 getServer(): IntegratedServer;
}

//net.minecraft.test.TestServer$1


//net.minecraft.server.dedicated.DedicatedPlayerManager
class DedicatedPlayerManager extends PlayerManager{
 canBypassPlayerLimit(profile: GameProfile): boolean;
 removeFromOperators(profile: GameProfile): void;
 setWhitelistEnabled(whitelistEnabled: boolean): void;
 isWhitelisted(profile: GameProfile): boolean;
 reloadWhitelist(): void;
 getServer(): MinecraftServer;
 getServer(): MinecraftDedicatedServer;
 addToOperators(profile: GameProfile): void;
}
class Static_DedicatedPlayerManager {
static LOGGER: Logger;
}

//net.minecraft.structure.WoodlandMansionGenerator$SecondFloorRoomPool
class WoodlandMansionGenerator_SecondFloorRoomPool extends WoodlandMansionGenerator_RoomPool{
 getMediumSecretRoom(random: Random): string;
 getMediumGenericRoom(random: Random,staircase: boolean): string;
 getMediumFunctionalRoom(random: Random,staircase: boolean): string;
 getSmallRoom(random: Random): string;
 getSmallSecretRoom(random: Random): string;
 getBigSecretRoom(random: Random): string;
 getBigRoom(random: Random): string;
}

//net.minecraft.structure.WoodlandMansionGenerator$FirstFloorRoomPool
class WoodlandMansionGenerator_FirstFloorRoomPool extends WoodlandMansionGenerator_RoomPool{
 getMediumSecretRoom(random: Random): string;
 getMediumGenericRoom(random: Random,staircase: boolean): string;
 getMediumFunctionalRoom(random: Random,staircase: boolean): string;
 getSmallRoom(random: Random): string;
 getSmallSecretRoom(random: Random): string;
 getBigSecretRoom(random: Random): string;
 getBigRoom(random: Random): string;
}

//net.minecraft.world.SectionDistanceLevelPropagator
class SectionDistanceLevelPropagator extends LevelPropagator{
 update(id: long,level: number,decrease: boolean): void;
}

//net.minecraft.world.ChunkPosDistanceLevelPropagator
class ChunkPosDistanceLevelPropagator extends LevelPropagator{
 updateLevel(chunkPos: long,distance: number,decrease: boolean): void;
}

//net.minecraft.world.gen.surfacebuilder.MaterialRules$HorizontalLazyAbstractPredicate
class MaterialRules_HorizontalLazyAbstractPredicate extends MaterialRules_LazyAbstractPredicate{
}

//net.minecraft.world.gen.surfacebuilder.MaterialRules$FullLazyAbstractPredicate
class MaterialRules_FullLazyAbstractPredicate extends MaterialRules_LazyAbstractPredicate{
}

//net.minecraft.entity.ai.brain.task.RandomTask
class RandomTask extends CompositeTask{
}

//net.minecraft.server.world.ServerWorld
class ServerWorld extends World, StructureWorldAccess{
 toString(): string;
 close(): void;
 save(progressListener: ProgressListener,flush: boolean,savingDisabled: boolean): void;
 getSeed(): long;
 tick(shouldKeepTicking: BooleanSupplier): void;
 setTimeOfDay(timeOfDay: long): void;
 getEntity(uuid: UUID): Entity;
 dump(path: Path): void;
 getDragonPart(id: number): Entity;
 locateBiome(predicate: Predicate,pos: BlockPos,radius: number,horizontalBlockCheckInterval: number,verticalBlockCheckInterval: number): Pair;
 locateStructure(structureTag: TagKey,pos: BlockPos,radius: number,skipReferencedStructures: boolean): BlockPos;
 getMapState(id: string): MapState;
 getStructureAccessor(): StructureAccessor;
 getGeneratorStoredBiome(biomeX: number,biomeY: number,biomeZ: number): RegistryEntry;
 shouldTickEntity(pos: BlockPos): boolean;
 clearUpdatesInArea(box: BlockBox): void;
 getFluidTickScheduler(): QueryableTickScheduler;
 getFluidTickScheduler(): WorldTickScheduler;
 getRandomAlivePlayer(): ServerPlayerEntity;
 getBlockTickScheduler(): WorldTickScheduler;
 getBlockTickScheduler(): QueryableTickScheduler;
 getOccupiedPointOfInterestDistance(pos: ChunkSectionPos): number;
 sendEntityStatus(entity: Entity,status: byte): void;
 cacheStructures(chunk: Chunk): void;
 isNearOccupiedPointOfInterest(pos: BlockPos): boolean;
 isNearOccupiedPointOfInterest(pos: BlockPos,maxDistance: number): boolean;
 isNearOccupiedPointOfInterest(sectionPos: ChunkSectionPos): boolean;
 putMapState(id: string,state: MapState): void;
 isSavingDisabled(): boolean;
 getNextMapId(): number;
 sendEntityDamage(entity: Entity,damageSource: DamageSource): void;
 tickEntity(entity: Entity): void;
 onBlockChanged(pos: BlockPos,oldBlock: BlockState,newBlock: BlockState): void;
 createExplosion(entity: Entity,damageSource: DamageSource,behavior: ExplosionBehavior,x: number,y: number,z: number,power: number,createFire: boolean,explosionSourceType: World_ExplosionSourceType): Explosion;
 asString(): string;
 onPlayerConnected(player: ServerPlayerEntity): void;
 isFlat(): boolean;
 removePlayer(player: ServerPlayerEntity,reason: Entity_RemovalReason): void;
 onPlayerRespawned(player: ServerPlayerEntity): void;
 tryLoadEntity(entity: Entity): boolean;
 getRaidAt(pos: BlockPos): Raid;
 setSpawnPos(pos: BlockPos,angle: number): void;
 syncGlobalEvent(eventId: number,pos: BlockPos,data: number): void;
 emitGameEvent(event: GameEvent,emitterPos: Vec3d,emitter: GameEvent_Emitter): void;
 getEntitiesByType(filter: TypeFilter,predicate: Predicate): List;
 getRaidManager(): RaidManager;
 hasRaidAt(pos: BlockPos): boolean;
 updateNeighborsAlways(pos: BlockPos,sourceBlock: Block): void;
 updateNeighborsExcept(pos: BlockPos,sourceBlock: Block,direction: Direction): void;
 isChunkLoaded(chunkPos: long): boolean;
 getScoreboard(): ServerScoreboard;
 getScoreboard(): Scoreboard;
 updateListeners(pos: BlockPos,oldState: BlockState,newState: BlockState,flags: number): void;
 canPlayerModifyAt(player: PlayerEntity,pos: BlockPos): boolean;
 updateNeighbors(pos: BlockPos,block: Block): void;
 toServerWorld(): ServerWorld;
 getPlayers(predicate: Predicate): List;
 getPlayers(): List;
 getPlayers(predicate: Predicate,limit: number): List;
 getDebugString(): string;
 setChunkForced(x: number,z: number,forced: boolean): boolean;
 getForcedChunks(): LongSet;
 shouldTickBlocksInChunk(chunkPos: long): boolean;
 addSyncedBlockEvent(pos: BlockPos,block: Block,type: number,data: number): void;
 setBlockBreakingInfo(entityId: number,pos: BlockPos,progress: number): void;
 playSoundFromEntity(except: PlayerEntity,entity: Entity,sound: RegistryEntry,category: SoundCategory,volume: number,pitch: number,seed: long): void;
 getStructureTemplateManager(): StructureTemplateManager;
 collectEntitiesByType(filter: TypeFilter,predicate: Predicate,result: List,limit: number): void;
 collectEntitiesByType(filter: TypeFilter,predicate: Predicate,result: List): void;
 shouldTick(pos: BlockPos): boolean;
 shouldTick(pos: ChunkPos): boolean;
 setWeather(clearDuration: number,rainDuration: number,raining: boolean,thundering: boolean): void;
 getEnabledFeatures(): FeatureSet;
 getEntityById(id: number): Entity;
 getChunkManager(): ServerChunkManager;
 getChunkManager(): ChunkManager;
 spawnParticles(viewer: ServerPlayerEntity,particle: ParticleEffect,force: boolean,x: number,y: number,z: number,count: number,deltaX: number,deltaY: number,deltaZ: number,speed: number): boolean;
 spawnParticles(particle: ParticleEffect,x: number,y: number,z: number,count: number,deltaX: number,deltaY: number,deltaZ: number,speed: number): number;
 playSound(except: PlayerEntity,x: number,y: number,z: number,sound: RegistryEntry,category: SoundCategory,volume: number,pitch: number,seed: long): void;
 spawnEntity(entity: Entity): boolean;
 syncWorldEvent(player: PlayerEntity,eventId: number,pos: BlockPos,data: number): void;
 getBrightness(direction: Direction,shaded: boolean): number;
 getRecipeManager(): RecipeManager;
 onDimensionChanged(entity: Entity): void;
 resetIdleTimeout(): void;
 getPortalForcer(): PortalForcer;
 loadEntities(entities: Stream): void;
 addEntities(entities: Stream): void;
 getServer(): MinecraftServer;
 getPointOfInterestStorage(): PointOfInterestStorage;
 getLogicalHeight(): number;
 updateNeighbor(state: BlockState,pos: BlockPos,sourceBlock: Block,sourcePos: BlockPos,notify: boolean): void;
 updateNeighbor(pos: BlockPos,sourceBlock: Block,sourcePos: BlockPos): void;
 spawnNewEntityAndPassengers(entity: Entity): boolean;
 getOrCreateRandom(id: Identifier): Random;
 getAliveEnderDragons(): List;
 updateSleepingPlayers(): void;
 sendToPlayerIfNearby(player: ServerPlayerEntity,force: boolean,x: number,y: number,z: number,packet: Packet): boolean;
 disableTickSchedulers(chunk: WorldChunk): void;
 setEnderDragonFight(enderDragonFight: EnderDragonFight): void;
 onPlayerChangeDimension(player: ServerPlayerEntity): void;
 getPersistentStateManager(): PersistentStateManager;
 getEnderDragonFight(): EnderDragonFight;
 isInBlockTick(): boolean;
 tickSpawners(spawnMonsters: boolean,spawnAnimals: boolean): void;
 tickChunk(chunk: WorldChunk,randomTickSpeed: number): void;
 isSleepingEnabled(): boolean;
 unloadEntities(chunk: WorldChunk): void;
 onPlayerTeleport(player: ServerPlayerEntity): void;
 handleInteraction(interaction: EntityInteraction,entity: Entity,observer: InteractionObserver): void;
 iterateEntities(): Iterable;
 getRandomSequences(): RandomSequencesState;
 savingDisabled: boolean;
}
class Static_ServerWorld {
static createEndSpawnPlatform(world: ServerWorld): void;
static method_17985(minecraftServer: MinecraftServer): PersistentStateManager;
static method_31421(poiType: RegistryEntry): boolean;
static method_18773(player: ServerPlayerEntity): void;
static method_34679(innerPos: BlockPos): BlockPos;
static method_24310(entity: Entity): string;
static method_18781(entity: Entity): string;
static method_47541(predicate: Predicate,list: List,i: number,entity: Entity): LazyIterationConsumer_NextIteration;
static dumpEntities(writer: Writer,entities: Iterable): void;
static method_52170(l: long): RandomSequencesState;
static method_31269(entry: Object2IntMap_Entry): string;
static method_29201(serverWorld: ServerWorld,pos: BlockPos): void;
static method_31431(entity: Entity): string;
static getTopFive(items: Iterable,classifier: Function): string;
static method_29204(serverWorld: ServerWorld,pos: BlockPos): void;
static method_23659(blockBox: BlockBox,event: BlockEvent): boolean;
static method_52169(l: long,nbt: NbtCompound): RandomSequencesState;
static END_SPAWN_POS: BlockPos;
static CLEAR_WEATHER_DURATION_PROVIDER: IntProvider;
static RAIN_WEATHER_DURATION_PROVIDER: IntProvider;
static CLEAR_THUNDER_WEATHER_DURATION_PROVIDER: IntProvider;
static THUNDER_WEATHER_DURATION_PROVIDER: IntProvider;
static LOGGER: Logger;
static SERVER_IDLE_COOLDOWN: number;
static MAX_TICKS: number;
}

//net.minecraft.world.biome.source.util.MultiNoiseUtil$SearchTree$TreeBranchNode
class MultiNoiseUtil_SearchTree_TreeBranchNode extends MultiNoiseUtil_SearchTree_TreeNode{
}

//net.minecraft.world.biome.source.util.MultiNoiseUtil$SearchTree$TreeLeafNode
class MultiNoiseUtil_SearchTree_TreeLeafNode extends MultiNoiseUtil_SearchTree_TreeNode{
}

//net.minecraft.block.OxidizableStairsBlock
class OxidizableStairsBlock extends StairsBlock, Oxidizable{
 getDegradationLevel(): Oxidizable_OxidationLevel;
 getDegradationLevel(): Enum;
 hasRandomTicks(state: BlockState): boolean;
 randomTick(state: BlockState,world: ServerWorld,pos: BlockPos,random: Random): void;
}

//net.minecraft.block.OxidizableBlock
class OxidizableBlock extends Block, Oxidizable{
 getDegradationLevel(): Oxidizable_OxidationLevel;
 getDegradationLevel(): Enum;
 hasRandomTicks(state: BlockState): boolean;
 randomTick(state: BlockState,world: ServerWorld,pos: BlockPos,random: Random): void;
}

//net.minecraft.block.OxidizableSlabBlock
class OxidizableSlabBlock extends SlabBlock, Oxidizable{
 getDegradationLevel(): Oxidizable_OxidationLevel;
 getDegradationLevel(): Enum;
 hasRandomTicks(state: BlockState): boolean;
 randomTick(state: BlockState,world: ServerWorld,pos: BlockPos,random: Random): void;
}

//net.minecraft.block.entity.BeaconBlockEntity
class BeaconBlockEntity extends BlockEntity, NamedScreenHandlerFactory, Nameable{
 getName(): Text;
 getDisplayName(): Text;
 setWorld(world: World): void;
 toInitialChunkDataNbt(): NbtCompound;
 getCustomName(): Text;
 setCustomName(customName: Text): void;
 readNbt(nbt: NbtCompound): void;
 toUpdatePacket(): BlockEntityUpdateS2CPacket;
 toUpdatePacket(): Packet;
 createMenu(i: number,playerInventory: PlayerInventory,playerEntity: PlayerEntity): ScreenHandler;
 markRemoved(): void;
 getBeamSegments(): List;
}
class Static_BeaconBlockEntity {
static tick(world: World,pos: BlockPos,state: BlockState,blockEntity: BeaconBlockEntity): void;
static getPotionEffectById(id: number): StatusEffect;
static playSound(world: World,pos: BlockPos,sound: SoundEvent): void;
static updateLevel(world: World,x: number,y: number,z: number): number;
static applyPlayerEffects(world: World,pos: BlockPos,beaconLevel: number,primaryEffect: StatusEffect,secondaryEffect: StatusEffect): void;
static field_31304: number;
static EFFECTS_BY_LEVEL: StatusEffect[][];
static EFFECTS: Set;
static LEVEL_PROPERTY_INDEX: number;
static PRIMARY_PROPERTY_INDEX: number;
static SECONDARY_PROPERTY_INDEX: number;
static PROPERTY_COUNT: number;
static field_31305: number;
static CONTAINER_NAME_TEXT: Text;
}

//net.minecraft.block.entity.LockableContainerBlockEntity
class LockableContainerBlockEntity extends BlockEntity, Inventory, NamedScreenHandlerFactory, Nameable{
 getName(): Text;
 getDisplayName(): Text;
 getCustomName(): Text;
 setCustomName(customName: Text): void;
 readNbt(nbt: NbtCompound): void;
 createMenu(i: number,playerInventory: PlayerInventory,playerEntity: PlayerEntity): ScreenHandler;
 checkUnlocked(player: PlayerEntity): boolean;
}
class Static_LockableContainerBlockEntity {
static checkUnlocked(player: PlayerEntity,lock: ContainerLock,containerName: Text): boolean;
}

//net.minecraft.block.entity.LecternBlockEntity
class LecternBlockEntity extends BlockEntity, Clearable, NamedScreenHandlerFactory{
 clear(): void;
 getDisplayName(): Text;
 getComparatorOutput(): number;
 readNbt(nbt: NbtCompound): void;
 createMenu(i: number,playerInventory: PlayerInventory,playerEntity: PlayerEntity): ScreenHandler;
 hasBook(): boolean;
 copyItemDataRequiresOperator(): boolean;
 getBook(): ItemStack;
 getCurrentPage(): number;
 setBook(book: ItemStack): void;
 setBook(book: ItemStack,player: PlayerEntity): void;
}
class Static_LecternBlockEntity {
static field_31348: number;
static field_31349: number;
static field_31350: number;
static field_31351: number;
}

//net.minecraft.world.biome.source.FixedBiomeSource
class FixedBiomeSource extends BiomeSource, BiomeAccess_Storage{
 locateBiome(x: number,y: number,z: number,radius: number,blockCheckInterval: number,predicate: Predicate,random: Random,bl: boolean,noiseSampler: MultiNoiseUtil_MultiNoiseSampler): Pair;
 locateBiome(origin: BlockPos,radius: number,horizontalBlockCheckInterval: number,verticalBlockCheckInterval: number,predicate: Predicate,noiseSampler: MultiNoiseUtil_MultiNoiseSampler,world: WorldView): Pair;
 getBiome(x: number,y: number,z: number,noise: MultiNoiseUtil_MultiNoiseSampler): RegistryEntry;
 getBiomeForNoiseGen(biomeX: number,biomeY: number,biomeZ: number): RegistryEntry;
 getBiomesInArea(x: number,y: number,z: number,radius: number,sampler: MultiNoiseUtil_MultiNoiseSampler): Set;
}
class Static_FixedBiomeSource {
static method_28456(biomeSource: FixedBiomeSource): RegistryEntry;
static CODEC: Codec;
}

//net.minecraft.server.rcon.RconClient
class RconClient extends RconBase{
 run(): void;
 stop(): void;
}
class Static_RconClient {
static LOGGER: Logger;
static field_29799: number;
static field_29800: number;
static field_29801: number;
static field_29802: number;
static field_29803: number;
}

//net.minecraft.server.rcon.RconListener
class RconListener extends RconBase{
 run(): void;
 stop(): void;
}
class Static_RconListener {
static create(server: DedicatedServer): RconListener;
static method_27175(client: RconClient): boolean;
static SERVER_LOGGER: Logger;
}

//net.minecraft.server.rcon.QueryResponseHandler
class QueryResponseHandler extends RconBase{
 run(): void;
 start(): boolean;
}
class Static_QueryResponseHandler {
static create(server: DedicatedServer): QueryResponseHandler;
static method_27174(l: long,query: QueryResponseHandler_Query): boolean;
static LOGGER: Logger;
static GAME_TYPE: string;
static GAME_ID: string;
static CLEAN_UP_THRESHOLD: long;
static field_29798: long;
}

//net.minecraft.client.realms.task.ResettingWorldTask
class ResettingWorldTask extends LongRunningTask{
 run(): void;
}
class Static_ResettingWorldTask {
static LOGGER: Logger;
}

//net.minecraft.client.realms.task.SwitchMinigameTask
class SwitchMinigameTask extends LongRunningTask{
 run(): void;
}
class Static_SwitchMinigameTask {
static LOGGER: Logger;
}

//net.minecraft.client.realms.task.RealmsConnectTask
class RealmsConnectTask extends LongRunningTask{
 run(): void;
 tick(): void;
 abortTask(): void;
}

//net.minecraft.client.realms.task.CloseServerTask
class CloseServerTask extends LongRunningTask{
 run(): void;
}
class Static_CloseServerTask {
static LOGGER: Logger;
}

//net.minecraft.client.realms.task.OpenServerTask
class OpenServerTask extends LongRunningTask{
 run(): void;
}
class Static_OpenServerTask {
static LOGGER: Logger;
}

//net.minecraft.client.realms.task.SwitchSlotTask
class SwitchSlotTask extends LongRunningTask{
 run(): void;
}
class Static_SwitchSlotTask {
static LOGGER: Logger;
}

//net.minecraft.client.realms.task.WorldCreationTask
class WorldCreationTask extends LongRunningTask{
 run(): void;
}
class Static_WorldCreationTask {
static LOGGER: Logger;
}

//net.minecraft.client.realms.task.RealmsGetServerDetailsTask
class RealmsGetServerDetailsTask extends LongRunningTask{
 run(): void;
 createConnectingScreen(address: RealmsServerAddress): RealmsLongRunningMcoTaskScreen;
}
class Static_RealmsGetServerDetailsTask {
static method_32514(fun: Function,realmsServerAddress: RealmsServerAddress): void;
static LOGGER: Logger;
}

//net.minecraft.client.realms.task.DownloadTask
class DownloadTask extends LongRunningTask{
 run(): void;
}
class Static_DownloadTask {
static method_25283(bl: boolean): void;
static LOGGER: Logger;
}

//net.minecraft.client.realms.task.RestoreTask
class RestoreTask extends LongRunningTask{
 run(): void;
}
class Static_RestoreTask {
static LOGGER: Logger;
}

//net.minecraft.client.gui.screen.ProgressScreen
class ProgressScreen extends Screen, ProgressListener{
 setDone(): void;
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
 setTitleAndTask(title: Text): void;
 setTask(task: Text): void;
 setTitle(title: Text): void;
 progressStagePercentage(percentage: number): void;
 shouldCloseOnEsc(): boolean;
}

//net.minecraft.registry.SimpleDefaultedRegistry
class SimpleDefaultedRegistry extends SimpleRegistry, DefaultedRegistry{
 get(index: number): Object;
 get(id: Identifier): Object;
 set(rawId: number,key: RegistryKey,value: Object,lifecycle: Lifecycle): RegistryEntry;
 set(i: number,registryKey: RegistryKey,object: Object,lifecycle: Lifecycle): RegistryEntry_Reference;
 getId(value: Object): Identifier;
 getDefaultId(): Identifier;
 getRandom(random: Random): Optional;
 getOrEmpty(id: Identifier): Optional;
 getRawId(value: Object): number;
}

//net.minecraft.resource.ZipResourcePack
class ZipResourcePack extends AbstractFileResourcePack{
 findResources(type: ResourceType,namespace: string,prefix: string,consumer: ResourcePack_ResultConsumer): void;
 close(): void;
 open(type: ResourceType,id: Identifier): InputSupplier;
 openRoot(segments: String[]): InputSupplier;
 getNamespaces(type: ResourceType): Set;
}
class Static_ZipResourcePack {
static toPath(type: ResourceType,id: Identifier): string;
static LOGGER: Logger;
static TYPE_NAMESPACE_SPLITTER: Splitter;
}

//net.minecraft.resource.DirectoryResourcePack
class DirectoryResourcePack extends AbstractFileResourcePack{
 findResources(type: ResourceType,namespace: string,prefix: string,consumer: ResourcePack_ResultConsumer): void;
 close(): void;
 open(type: ResourceType,id: Identifier): InputSupplier;
 openRoot(segments: String[]): InputSupplier;
 getNamespaces(type: ResourceType): Set;
}
class Static_DirectoryResourcePack {
static findResources(namespace: string,path: Path,prefixSegments: List,consumer: ResourcePack_ResultConsumer): void;
static open(id: Identifier,path: Path): InputSupplier;
static open(path: Path): InputSupplier;
static isValidPath(path: Path): boolean;
static method_45186(path: Path,segments: List): InputSupplier;
static method_45182(string: string,result: DataResult_PartialResult): void;
static method_45185(path2: Path,attributes: BasicFileAttributes): boolean;
static method_45184(path: Path,string: string,resultConsumer: ResourcePack_ResultConsumer,foundPath: Path): void;
static method_45179(identifier: Identifier,result: DataResult_PartialResult): InputSupplier;
static LOGGER: Logger;
static SEPARATOR_JOINER: Joiner;
}

//net.minecraft.client.gui.screen.ingame.ForgingScreen
class ForgingScreen extends HandledScreen, ScreenHandlerListener{
 removed(): void;
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
 onSlotUpdate(handler: ScreenHandler,slotId: number,stack: ItemStack): void;
 onPropertyUpdate(handler: ScreenHandler,property: number,value: number): void;
}

//net.minecraft.client.gui.hud.ClientBossBar
class ClientBossBar extends BossBar{
 getPercent(): number;
 setPercent(percent: number): void;
}
class Static_ClientBossBar {
static HEALTH_CHANGE_ANIMATION_MS: long;
}

//net.minecraft.recipe.SmokingRecipe
class SmokingRecipe extends AbstractCookingRecipe{
 createIcon(): ItemStack;
 getSerializer(): RecipeSerializer;
}

//net.minecraft.recipe.BlastingRecipe
class BlastingRecipe extends AbstractCookingRecipe{
 createIcon(): ItemStack;
 getSerializer(): RecipeSerializer;
}

//net.minecraft.recipe.CampfireCookingRecipe
class CampfireCookingRecipe extends AbstractCookingRecipe{
 createIcon(): ItemStack;
 getSerializer(): RecipeSerializer;
}

//net.minecraft.recipe.SmeltingRecipe
class SmeltingRecipe extends AbstractCookingRecipe{
 createIcon(): ItemStack;
 getSerializer(): RecipeSerializer;
}

//net.minecraft.client.input.KeyboardInput
class KeyboardInput extends Input{
 tick(slowDown: boolean,slowDownFactor: number): void;
}
class Static_KeyboardInput {
static getMovementMultiplier(positive: boolean,negative: boolean): number;
}

//net.minecraft.world.gen.root.MangroveRootPlacer
class MangroveRootPlacer extends RootPlacer{
 generate(world: TestableWorld,replacer: BiConsumer,random: Random,pos: BlockPos,trunkPos: BlockPos,config: TreeFeatureConfig): boolean;
}
class Static_MangroveRootPlacer {
static method_43180(rootPlacer: MangroveRootPlacer): MangroveRootPlacement;
static method_43173(instance: RecordCodecBuilder_Instance): App;
static field_38769: number;
static field_38770: number;
static CODEC: Codec;
}

//net.minecraft.world.gen.densityfunction.DensityFunctionTypes$ShiftB
class DensityFunctionTypes_ShiftB extends Record, DensityFunctionTypes_Offset{
 equals(object: Object): boolean;
 toString(): string;
 hashCode(): number;
 apply(visitor: DensityFunction_DensityFunctionVisitor): DensityFunction;
 sample(pos: DensityFunction_NoisePos): number;
 offsetNoise(): DensityFunction_Noise;
 getCodecHolder(): CodecHolder;
}
class Static_DensityFunctionTypes_ShiftB {
static CODEC_HOLDER: CodecHolder;
}

//net.minecraft.world.gen.densityfunction.DensityFunctionTypes$ShiftA
class DensityFunctionTypes_ShiftA extends Record, DensityFunctionTypes_Offset{
 equals(object: Object): boolean;
 toString(): string;
 hashCode(): number;
 apply(visitor: DensityFunction_DensityFunctionVisitor): DensityFunction;
 sample(pos: DensityFunction_NoisePos): number;
 offsetNoise(): DensityFunction_Noise;
 getCodecHolder(): CodecHolder;
}
class Static_DensityFunctionTypes_ShiftA {
static CODEC_HOLDER: CodecHolder;
}

//net.minecraft.world.gen.densityfunction.DensityFunctionTypes$Shift
class DensityFunctionTypes_Shift extends Record, DensityFunctionTypes_Offset{
 equals(object: Object): boolean;
 toString(): string;
 hashCode(): number;
 apply(visitor: DensityFunction_DensityFunctionVisitor): DensityFunction;
 sample(pos: DensityFunction_NoisePos): number;
 offsetNoise(): DensityFunction_Noise;
 getCodecHolder(): CodecHolder;
}
class Static_DensityFunctionTypes_Shift {
static CODEC_HOLDER: CodecHolder;
}

//net.minecraft.loot.entry.CombinedEntry
class CombinedEntry extends LootPoolEntry{
 validate(reporter: LootTableReporter): void;
 expand(lootContext: LootContext,consumer: Consumer): boolean;
}
class Static_CombinedEntry {
static createSerializer(factory: CombinedEntry_Factory): LootPoolEntry_Serializer;
}

//net.minecraft.loot.entry.LeafEntry
class LeafEntry extends LootPoolEntry{
 validate(reporter: LootTableReporter): void;
 expand(lootContext: LootContext,consumer: Consumer): boolean;
}
class Static_LeafEntry {
static builder(factory: LeafEntry_Factory): LeafEntry_Builder;
static field_31847: number;
static field_31848: number;
}

//net.minecraft.client.world.ClientWorld
class ClientWorld extends World{
 toString(): string;
 setTime(time: long): void;
 tick(shouldKeepTicking: BooleanSupplier): void;
 setTimeOfDay(timeOfDay: long): void;
 disconnect(): void;
 getEntities(): Iterable;
 getSkyColor(cameraPos: Vec3d,tickDelta: number): Vec3d;
 getMapState(id: string): MapState;
 getGeneratorStoredBiome(biomeX: number,biomeY: number,biomeZ: number): RegistryEntry;
 processPendingUpdate(pos: BlockPos,state: BlockState,playerPos: Vec3d): void;
 getLightningTicksLeft(): number;
 runQueuedChunkUpdates(): void;
 getSkyBrightness(tickDelta: number): number;
 getFluidTickScheduler(): QueryableTickScheduler;
 getSimulationDistance(): number;
 getBlockTickScheduler(): QueryableTickScheduler;
 putMapState(id: string,state: MapState): void;
 getNextMapId(): number;
 tickEntity(entity: Entity): void;
 asString(): string;
 addPlayer(id: number,player: AbstractClientPlayerEntity): void;
 addEntity(id: number,entity: Entity): void;
 enqueueChunkUpdate(updater: Runnable): void;
 resetChunkColor(chunkPos: ChunkPos): void;
 handleBlockUpdate(pos: BlockPos,state: BlockState,flags: number): void;
 removeEntity(entityId: number,removalReason: Entity_RemovalReason): void;
 addParticle(parameters: ParticleEffect,x: number,y: number,z: number,velocityX: number,velocityY: number,velocityZ: number): void;
 addParticle(parameters: ParticleEffect,alwaysSpawn: boolean,x: number,y: number,z: number,velocityX: number,velocityY: number,velocityZ: number): void;
 setSpawnPos(pos: BlockPos,angle: number): void;
 setScoreboard(scoreboard: Scoreboard): void;
 syncGlobalEvent(eventId: number,pos: BlockPos,data: number): void;
 emitGameEvent(event: GameEvent,emitterPos: Vec3d,emitter: GameEvent_Emitter): void;
 getDimensionEffects(): DimensionEffects;
 getRegularEntityCount(): number;
 addFireworkParticle(x: number,y: number,z: number,velocityX: number,velocityY: number,velocityZ: number,nbt: NbtCompound): void;
 setLightningTicksLeft(lightningTicksLeft: number): void;
 addImportantParticle(parameters: ParticleEffect,x: number,y: number,z: number,velocityX: number,velocityY: number,velocityZ: number): void;
 addImportantParticle(parameters: ParticleEffect,alwaysSpawn: boolean,x: number,y: number,z: number,velocityX: number,velocityY: number,velocityZ: number): void;
 shouldUpdatePostDeath(entity: Entity): boolean;
 scheduleBlockRerenderIfNeeded(pos: BlockPos,old: BlockState,updated: BlockState): void;
 addDetailsToCrashReport(report: CrashReport): CrashReportSection;
 isChunkLoaded(chunkX: number,chunkZ: number): boolean;
 getScoreboard(): Scoreboard;
 updateListeners(pos: BlockPos,oldState: BlockState,newState: BlockState,flags: number): void;
 getPlayers(): List;
 getColor(pos: BlockPos,colorResolver: ColorResolver): number;
 setBlockState(pos: BlockPos,state: BlockState,flags: number,maxUpdateDepth: number): boolean;
 setBlockBreakingInfo(entityId: number,pos: BlockPos,progress: number): void;
 scheduleBlockRenders(x: number,y: number,z: number): void;
 playSoundFromEntity(except: PlayerEntity,entity: Entity,sound: RegistryEntry,category: SoundCategory,volume: number,pitch: number,seed: long): void;
 putClientsideMapState(id: string,state: MapState): void;
 handlePlayerActionResponse(sequence: number): void;
 setSimulationDistance(simulationDistance: number): void;
 addBlockBreakParticles(pos: BlockPos,state: BlockState): void;
 getLevelProperties(): WorldProperties;
 getLevelProperties(): ClientWorld_Properties;
 getEnabledFeatures(): FeatureSet;
 getEntityById(id: number): Entity;
 getChunkManager(): ChunkManager;
 getChunkManager(): ClientChunkManager;
 playSound(except: PlayerEntity,x: number,y: number,z: number,sound: RegistryEntry,category: SoundCategory,volume: number,pitch: number,seed: long): void;
 playSound(x: number,y: number,z: number,sound: SoundEvent,category: SoundCategory,volume: number,pitch: number,useDistance: boolean): void;
 syncWorldEvent(player: PlayerEntity,eventId: number,pos: BlockPos,data: number): void;
 getBrightness(direction: Direction,shaded: boolean): number;
 getRecipeManager(): RecipeManager;
 sendPacket(packet: Packet): void;
 unloadBlockEntities(chunk: WorldChunk): void;
 reloadColor(): void;
 method_23787(f: number): number;
 getCloudsColor(tickDelta: number): Vec3d;
 doRandomBlockDisplayTicks(centerX: number,centerY: number,centerZ: number): void;
 randomBlockDisplayTick(centerX: number,centerY: number,centerZ: number,radius: number,random: Random,block: Block,pos: BlockPos_Mutable): void;
 hasNoChunkUpdaters(): boolean;
 tickEntities(): void;
 calculateColor(pos: BlockPos,colorResolver: ColorResolver): number;
}
class Static_ClientWorld {
static method_32689(biomeAccess: BiomeAccess,x: number,y: number,z: number): Vec3d;
static method_23779(resolver: ColorResolver,cache: BiomeColorCache): void;
static method_32121(chunkPos: ChunkPos,resolver: ColorResolver,cache: BiomeColorCache): void;
static method_18649(entity: Entity): string;
static LOGGER: Logger;
static PARTICLE_Y_OFFSET: number;
static field_34805: number;
static field_34806: number;
static field_32640: long;
static BLOCK_MARKER_ITEMS: Set;
}

//net.minecraft.world.gen.feature.size.ThreeLayersFeatureSize
class ThreeLayersFeatureSize extends FeatureSize{
 getRadius(height: number,y: number): number;
}
class Static_ThreeLayersFeatureSize {
static method_28829(threeLayersFeatureSize: ThreeLayersFeatureSize): Integer;
static method_28828(threeLayersFeatureSize: ThreeLayersFeatureSize): Integer;
static method_28826(threeLayersFeatureSize: ThreeLayersFeatureSize): Integer;
static method_28827(instance: RecordCodecBuilder_Instance): App;
static method_28831(threeLayersFeatureSize: ThreeLayersFeatureSize): Integer;
static method_28830(threeLayersFeatureSize: ThreeLayersFeatureSize): Integer;
static CODEC: Codec;
}

//net.minecraft.world.gen.feature.size.TwoLayersFeatureSize
class TwoLayersFeatureSize extends FeatureSize{
 getRadius(height: number,y: number): number;
}
class Static_TwoLayersFeatureSize {
static method_28835(twoLayersFeatureSize: TwoLayersFeatureSize): Integer;
static method_28833(instance: RecordCodecBuilder_Instance): App;
static method_28834(twoLayersFeatureSize: TwoLayersFeatureSize): Integer;
static method_28832(twoLayersFeatureSize: TwoLayersFeatureSize): Integer;
static CODEC: Codec;
}

//net.minecraft.entity.TntEntity
class TntEntity extends Entity, Ownable{
 getOwner(): LivingEntity;
 getOwner(): Entity;
 tick(): void;
 canHit(): boolean;
 setFuse(fuse: number): void;
 getFuse(): number;
}
class Static_TntEntity {
static FUSE: TrackedData;
static DEFAULT_FUSE: number;
}

//net.minecraft.entity.decoration.EndCrystalEntity
class EndCrystalEntity extends Entity{
 tick(): void;
 getPickBlockStack(): ItemStack;
 damage(source: DamageSource,amount: number): boolean;
 canHit(): boolean;
 shouldRender(distance: number): boolean;
 kill(): void;
 setBeamTarget(beamTarget: BlockPos): void;
 shouldShowBottom(): boolean;
 setShowBottom(showBottom: boolean): void;
 getBeamTarget(): BlockPos;
 endCrystalAge: number;
}
class Static_EndCrystalEntity {
static BEAM_TARGET: TrackedData;
static SHOW_BOTTOM: TrackedData;
}

//net.minecraft.entity.vehicle.BoatEntity
class BoatEntity extends Entity, VariantHolder{
 getVariant(): Object;
 getVariant(): BoatEntity_Type;
 tick(): void;
 setVariant(variant: Object): void;
 setVariant(type: BoatEntity_Type): void;
 getControllingPassenger(): LivingEntity;
 getPickBlockStack(): ItemStack;
 animateDamage(yaw: number): void;
 setPaddleMovings(leftMoving: boolean,rightMoving: boolean): void;
 interact(player: PlayerEntity,hand: Hand): ActionResult;
 damage(source: DamageSource,amount: number): boolean;
 canHit(): boolean;
 updateTrackedPositionAndAngles(x: number,y: number,z: number,yaw: number,pitch: number,interpolationSteps: number,interpolate: boolean): void;
 onPassengerLookAround(passenger: Entity): void;
 asItem(): Item;
 isSubmergedInWater(): boolean;
 pushAwayFrom(entity: Entity): void;
 isPushable(): boolean;
 isCollidable(): boolean;
 setInputs(pressingLeft: boolean,pressingRight: boolean,pressingForward: boolean,pressingBack: boolean): void;
 isPaddleMoving(paddle: number): boolean;
 isSmallerThanBoat(entity: Entity): boolean;
 collidesWith(other: Entity): boolean;
 setDamageWobbleTicks(wobbleTicks: number): void;
 setDamageWobbleStrength(wobbleStrength: number): void;
 getDamageWobbleTicks(): number;
 setDamageWobbleSide(side: number): void;
 getDamageWobbleSide(): number;
 getDamageWobbleStrength(): number;
 interpolatePaddlePhase(paddle: number,tickDelta: number): number;
 getNearbySlipperiness(): number;
 getWaterHeightBelow(): number;
 interpolateBubbleWobble(tickDelta: number): number;
 onBubbleColumnSurfaceCollision(drag: boolean): void;
 getMountedHeightOffset(): number;
 updatePassengerForDismount(passenger: LivingEntity): Vec3d;
 getMovementDirection(): Direction;
}
class Static_BoatEntity {
static canCollide(entity: Entity,other: Entity): boolean;
static method_31552(entity: Entity): boolean;
static DAMAGE_WOBBLE_TICKS: TrackedData;
static DAMAGE_WOBBLE_SIDE: TrackedData;
static DAMAGE_WOBBLE_STRENGTH: TrackedData;
static BOAT_TYPE: TrackedData;
static LEFT_PADDLE_MOVING: TrackedData;
static RIGHT_PADDLE_MOVING: TrackedData;
static BUBBLE_WOBBLE_TICKS: TrackedData;
static field_30697: number;
static field_30698: number;
static field_30695: number;
static NEXT_PADDLE_PHASE: number;
static EMIT_SOUND_EVENT_PADDLE_ROTATION: number;
static field_30700: number;
}

//net.minecraft.entity.projectile.ProjectileEntity
class ProjectileEntity extends Entity, Ownable{
 getOwner(): Entity;
 setOwner(entity: Entity): void;
 tick(): void;
 canModifyAt(world: World,pos: BlockPos): boolean;
 setVelocityClient(x: number,y: number,z: number): void;
 onSpawnPacket(packet: EntitySpawnS2CPacket): void;
 setVelocity(x: number,y: number,z: number,speed: number,divergence: number): void;
 setVelocity(shooter: Entity,pitch: number,yaw: number,roll: number,speed: number,divergence: number): void;
 createSpawnPacket(): Packet;
 getEffectCause(): Entity;
}
class Static_ProjectileEntity {
static updateRotation(prevRot: number,newRot: number): number;
static method_26959(entity: Entity): boolean;
}

//net.minecraft.entity.ItemEntity
class ItemEntity extends Entity, Ownable{
 getName(): Text;
 copy(): ItemEntity;
 getStack(): ItemStack;
 getOwner(): Entity;
 setOwner(owner: UUID): void;
 tick(): void;
 setStack(stack: ItemStack): void;
 getBodyYaw(): number;
 getSoundCategory(): SoundCategory;
 isFireImmune(): boolean;
 damage(source: DamageSource,amount: number): boolean;
 occludeVibrationSignals(): boolean;
 getRotation(tickDelta: number): number;
 onPlayerCollision(player: PlayerEntity): void;
 moveToWorld(destination: ServerWorld): Entity;
 isAttackable(): boolean;
 onTrackedDataSet(data: TrackedData): void;
 setToDefaultPickupDelay(): void;
 setDespawnImmediately(): void;
 setThrower(thrower: UUID): void;
 cannotPickup(): boolean;
 writeCustomDataToNbt(nbt: NbtCompound): void;
 readCustomDataFromNbt(nbt: NbtCompound): void;
 resetPickupDelay(): void;
 setPickupDelayInfinite(): void;
 setPickupDelay(pickupDelay: number): void;
 setNeverDespawn(): void;
 getItemAge(): number;
 setCovetedItem(): void;
 uniqueOffset: number;
}
class Static_ItemEntity {
static merge(targetEntity: ItemEntity,stack1: ItemStack,stack2: ItemStack): void;
static merge(targetEntity: ItemEntity,targetStack: ItemStack,sourceEntity: ItemEntity,sourceStack: ItemStack): void;
static merge(stack1: ItemStack,stack2: ItemStack,maxCount: number): ItemStack;
static canMerge(stack1: ItemStack,stack2: ItemStack): boolean;
static STACK: TrackedData;
static DESPAWN_AGE: number;
static CANNOT_PICK_UP_DELAY: number;
static NEVER_DESPAWN_AGE: number;
}

//net.minecraft.entity.decoration.DisplayEntity
class DisplayEntity extends Entity{
 tick(): void;
 getLerpProgress(delta: number): number;
 setYaw(yaw: number): void;
 setPitch(pitch: number): void;
 shouldRender(distance: number): boolean;
 setPosition(x: number,y: number,z: number): void;
 createSpawnPacket(): Packet;
 getPistonBehavior(): PistonBehavior;
 getTeamColorValue(): number;
 canAvoidTraps(): boolean;
 onTrackedDataSet(data: TrackedData): void;
 getVisibilityBoundingBox(): Box;
 getFixedRotation(): Quaternionf;
 getRenderState(): DisplayEntity_RenderState;
}
class Static_DisplayEntity {
static getTransformation(dataTracker: DataTracker): AffineTransformation;
static method_48856(nbtCompound: NbtCompound,billboard: NbtElement): void;
static method_48860(nbtCompound: NbtCompound,transformations: NbtElement): void;
static method_48851(nbtCompound: NbtCompound,brightness: NbtElement): void;
static field_42397: Logger;
static field_42384: number;
static START_INTERPOLATION: TrackedData;
static INTERPOLATION_DURATION: TrackedData;
static TRANSLATION: TrackedData;
static SCALE: TrackedData;
static LEFT_ROTATION: TrackedData;
static RIGHT_ROTATION: TrackedData;
static BILLBOARD: TrackedData;
static BRIGHTNESS: TrackedData;
static VIEW_RANGE: TrackedData;
static SHADOW_RADIUS: TrackedData;
static SHADOW_STRENGTH: TrackedData;
static WIDTH: TrackedData;
static HEIGHT: TrackedData;
static GLOW_COLOR_OVERRIDE: TrackedData;
static RENDERING_DATA_IDS: IntSet;
static field_42376: number;
static field_42377: number;
static field_42378: number;
static INTERPOLATION_DURATION_NBT_KEY: string;
static START_INTERPOLATION_KEY: string;
static TRANSFORMATION_NBT_KEY: string;
static BILLBOARD_NBT_KEY: string;
static BRIGHTNESS_NBT_KEY: string;
static VIEW_RANGE_NBT_KEY: string;
static SHADOW_RADIUS_NBT_KEY: string;
static SHADOW_STRENGTH_NBT_KEY: string;
static WIDTH_NBT_KEY: string;
static HEIGHT_NBT_KEY: string;
static GLOW_COLOR_OVERRIDE_NBT_KEY: string;
}

//net.minecraft.entity.decoration.AbstractDecorationEntity
class AbstractDecorationEntity extends Entity{
 move(movementType: MovementType,movement: Vec3d): void;
 tick(): void;
 getDecorationBlockPos(): BlockPos;
 addVelocity(deltaX: number,deltaY: number,deltaZ: number): void;
 dropStack(stack: ItemStack,yOffset: number): ItemEntity;
 applyRotation(rotation: BlockRotation): number;
 applyMirror(mirror: BlockMirror): number;
 damage(source: DamageSource,amount: number): boolean;
 canHit(): boolean;
 getHorizontalFacing(): Direction;
 onBreak(entity: Entity): void;
 setPosition(x: number,y: number,z: number): void;
 handleAttack(attacker: Entity): boolean;
 writeCustomDataToNbt(nbt: NbtCompound): void;
 readCustomDataFromNbt(nbt: NbtCompound): void;
 onStruckByLightning(world: ServerWorld,lightning: LightningEntity): void;
 calculateDimensions(): void;
 getWidthPixels(): number;
 canStayAttached(): boolean;
 onPlace(): void;
 getHeightPixels(): number;
}
class Static_AbstractDecorationEntity {
static method_6890(entity: Entity): boolean;
static LOGGER: Logger;
static PREDICATE: Predicate;
}

//net.minecraft.entity.vehicle.AbstractMinecartEntity
class AbstractMinecartEntity extends Entity{
 tick(): void;
 getPickBlockStack(): ItemStack;
 setVelocityClient(x: number,y: number,z: number): void;
 animateDamage(yaw: number): void;
 damage(source: DamageSource,amount: number): boolean;
 canHit(): boolean;
 updateTrackedPositionAndAngles(x: number,y: number,z: number,yaw: number,pitch: number,interpolationSteps: number,interpolate: boolean): void;
 isOnRail(): boolean;
 pushAwayFrom(entity: Entity): void;
 isPushable(): boolean;
 dropItems(damageSource: DamageSource): void;
 onActivatorRail(x: number,y: number,z: number,powered: boolean): void;
 getBlockOffset(): number;
 getMinecartType(): AbstractMinecartEntity_Type;
 snapPositionToRail(x: number,y: number,z: number): Vec3d;
 hasCustomBlock(): boolean;
 getContainedBlock(): BlockState;
 setCustomBlock(state: BlockState): void;
 collidesWith(other: Entity): boolean;
 setDamageWobbleTicks(wobbleTicks: number): void;
 setDamageWobbleStrength(damageWobbleStrength: number): void;
 getDamageWobbleTicks(): number;
 setDamageWobbleSide(wobbleSide: number): void;
 getDamageWobbleSide(): number;
 getDamageWobbleStrength(): number;
 snapPositionToRailWithOffset(x: number,y: number,z: number,offset: number): Vec3d;
 getDefaultContainedBlock(): BlockState;
 getDefaultBlockOffset(): number;
 setCustomBlockOffset(offset: number): void;
 setCustomBlockPresent(present: boolean): void;
 getMountedHeightOffset(): number;
 updatePassengerForDismount(passenger: LivingEntity): Vec3d;
 getMovementDirection(): Direction;
 getVisibilityBoundingBox(): Box;
}
class Static_AbstractMinecartEntity {
static create(world: World,x: number,y: number,z: number,type: AbstractMinecartEntity_Type): AbstractMinecartEntity;
static method_22865(map: EnumMap): void;
static getAdjacentRailPositionsByShape(shape: RailShape): Pair;
static DAMAGE_WOBBLE_TICKS: TrackedData;
static DAMAGE_WOBBLE_SIDE: TrackedData;
static DAMAGE_WOBBLE_STRENGTH: TrackedData;
static CUSTOM_BLOCK_ID: TrackedData;
static CUSTOM_BLOCK_OFFSET: TrackedData;
static CUSTOM_BLOCK_PRESENT: TrackedData;
static DISMOUNT_FREE_Y_SPACES_NEEDED: ImmutableMap;
static VELOCITY_SLOWDOWN_MULTIPLIER: number;
static ADJACENT_RAIL_POSITIONS_BY_SHAPE: Map;
}

//net.minecraft.entity.MarkerEntity
class MarkerEntity extends Entity{
 tick(): void;
 createSpawnPacket(): Packet;
 getPistonBehavior(): PistonBehavior;
 canAvoidTraps(): boolean;
}
class Static_MarkerEntity {
static DATA_KEY: string;
}

//net.minecraft.entity.FallingBlockEntity
class FallingBlockEntity extends Entity{
 tick(): void;
 onDestroyedOnLanding(block: Block,pos: BlockPos): void;
 onSpawnPacket(packet: EntitySpawnS2CPacket): void;
 canHit(): boolean;
 getBlockState(): BlockState;
 populateCrashReport(section: CrashReportSection): void;
 createSpawnPacket(): Packet;
 handleFallDamage(fallDistance: number,damageMultiplier: number,damageSource: DamageSource): boolean;
 isAttackable(): boolean;
 doesRenderOnFire(): boolean;
 setHurtEntities(fallHurtAmount: number,fallHurtMax: number): void;
 entityDataRequiresOperator(): boolean;
 setDestroyedOnLanding(): void;
 getFallingBlockPos(): BlockPos;
 setFallingBlockPos(pos: BlockPos): void;
 timeFalling: number;
 dropItem: boolean;
 blockEntityData: NbtCompound;
}
class Static_FallingBlockEntity {
static spawnFromBlock(world: World,pos: BlockPos,state: BlockState): FallingBlockEntity;
static method_32879(damageSource: DamageSource,f: number,entity: Entity): void;
static LOGGER: Logger;
static BLOCK_POS: TrackedData;
}

//net.minecraft.entity.LightningEntity
class LightningEntity extends Entity{
 tick(): void;
 getStruckEntities(): Stream;
 getBlocksSetOnFire(): number;
 getSoundCategory(): SoundCategory;
 shouldRender(distance: number): boolean;
 setChanneler(channeler: ServerPlayerEntity): void;
 setCosmetic(cosmetic: boolean): void;
 getChanneler(): ServerPlayerEntity;
 seed: long;
}
class Static_LightningEntity {
static cleanOxidationAround(world: World,pos: BlockPos): Optional;
static cleanOxidationAround(world: World,pos: BlockPos,mutablePos: BlockPos_Mutable,count: number): void;
static cleanOxidation(world: World,pos: BlockPos): void;
static method_34708(world: World,blockPos: BlockPos,state: BlockState): void;
static field_30062: number;
static field_33906: number;
static field_33907: number;
}

//net.minecraft.entity.ExperienceOrbEntity
class ExperienceOrbEntity extends Entity{
 tick(): void;
 getSoundCategory(): SoundCategory;
 damage(source: DamageSource,amount: number): boolean;
 createSpawnPacket(): Packet;
 onPlayerCollision(player: PlayerEntity): void;
 isAttackable(): boolean;
 getExperienceAmount(): number;
 writeCustomDataToNbt(nbt: NbtCompound): void;
 readCustomDataFromNbt(nbt: NbtCompound): void;
 getOrbSize(): number;
}
class Static_ExperienceOrbEntity {
static spawn(world: ServerWorld,pos: Vec3d,amount: number): void;
static wasMergedIntoExistingOrb(world: ServerWorld,pos: Vec3d,amount: number): boolean;
static roundToOrbSize(value: number): number;
static isMergeable(orb: ExperienceOrbEntity,seed: number,amount: number): boolean;
static method_31492(i: number,j: number,orb: ExperienceOrbEntity): boolean;
static DESPAWN_AGE: number;
static EXPENSIVE_UPDATE_INTERVAL: number;
static field_30057: number;
static MERGING_CHANCE_FRACTION: number;
static field_30059: number;
}

//net.minecraft.entity.AreaEffectCloudEntity
class AreaEffectCloudEntity extends Entity, Ownable{
 getOwner(): Entity;
 getOwner(): LivingEntity;
 getDimensions(pose: EntityPose): EntityDimensions;
 setOwner(owner: LivingEntity): void;
 setColor(rgb: number): void;
 getDuration(): number;
 tick(): void;
 setDuration(duration: number): void;
 getRadius(): number;
 getColor(): number;
 getPistonBehavior(): PistonBehavior;
 onTrackedDataSet(data: TrackedData): void;
 calculateDimensions(): void;
 setPotion(potion: Potion): void;
 getPotion(): Potion;
 setRadiusGrowth(radiusGrowth: number): void;
 setWaitTime(waitTime: number): void;
 addEffect(effect: StatusEffectInstance): void;
 setRadiusOnUse(radiusOnUse: number): void;
 setRadius(radius: number): void;
 getParticleType(): ParticleEffect;
 setDurationOnUse(durationOnUse: number): void;
 isWaiting(): boolean;
 getWaitTime(): number;
 setParticleType(particle: ParticleEffect): void;
 getRadiusGrowth(): number;
 getRadiusOnUse(): number;
 getDurationOnUse(): number;
}
class Static_AreaEffectCloudEntity {
static method_48564(i: number): number;
static LOGGER: Logger;
static field_29972: number;
static RADIUS: TrackedData;
static COLOR: TrackedData;
static WAITING: TrackedData;
static PARTICLE_ID: TrackedData;
static MAX_RADIUS: number;
static field_40730: number;
static field_40731: number;
static field_40732: number;
static field_40733: number;
}

//net.minecraft.client.render.block.entity.HangingSignBlockEntityRenderer
class HangingSignBlockEntityRenderer extends SignBlockEntityRenderer{
 render(entity: BlockEntity,tickDelta: number,matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,light: number,overlay: number): void;
 render(signBlockEntity: SignBlockEntity,f: number,matrixStack: MatrixStack,vertexConsumerProvider: VertexConsumerProvider,i: number,j: number): void;
 getSignScale(): number;
 getTextScale(): number;
}
class Static_HangingSignBlockEntityRenderer {
static getTexturedModelData(): TexturedModelData;
static method_45796(woodType: WoodType): WoodType;
static method_45794(context: BlockEntityRendererFactory_Context,type: WoodType): HangingSignBlockEntityRenderer_HangingSignModel;
static PLANK: string;
static V_CHAINS: string;
static NORMAL_CHAINS: string;
static CHAIN_L1: string;
static CHAIN_L2: string;
static CHAIN_R1: string;
static CHAIN_R2: string;
static BOARD: string;
static MODEL_SCALE: number;
static TEXT_SCALE: number;
static TEXT_OFFSET: Vec3d;
}

//net.minecraft.entity.ai.pathing.TargetPathNode
class TargetPathNode extends PathNode{
 updateNearestNode(distance: number,node: PathNode): void;
 getNearestNode(): PathNode;
 markReached(): void;
 isReached(): boolean;
}
class Static_TargetPathNode {
static fromBuffer(buffer: PacketByteBuf): TargetPathNode;
}

//net.minecraft.structure.ShiftableStructurePiece
class ShiftableStructurePiece extends StructurePiece{
}

//net.minecraft.structure.StrongholdGenerator$Piece
class StrongholdGenerator_Piece extends StructurePiece{
}
class Static_StrongholdGenerator_Piece {
static isInBounds(boundingBox: BlockBox): boolean;
}

//net.minecraft.structure.OceanMonumentGenerator$Piece
class OceanMonumentGenerator_Piece extends StructurePiece{
}
class Static_OceanMonumentGenerator_Piece {
static getIndex(x: number,y: number,z: number): number;
static createBox(orientation: Direction,setting: OceanMonumentGenerator_PieceSetting,i: number,j: number,k: number): BlockBox;
static PRISMARINE: BlockState;
static PRISMARINE_BRICKS: BlockState;
static DARK_PRISMARINE: BlockState;
static ALSO_PRISMARINE_BRICKS: BlockState;
static SEA_LANTERN: BlockState;
static field_31607: boolean;
static WATER: BlockState;
static ICE_BLOCKS: Set;
static field_31608: number;
static field_31609: number;
static field_31610: number;
static field_31611: number;
static field_31612: number;
static field_31613: number;
static field_31614: number;
static field_31615: number;
static TWO_ZERO_ZERO_INDEX: number;
static TWO_TWO_ZERO_INDEX: number;
static ZERO_ONE_ZERO_INDEX: number;
static FOUR_ONE_ZERO_INDEX: number;
static field_31616: number;
static field_31617: number;
static field_31618: number;
}

//net.minecraft.structure.MineshaftGenerator$MineshaftPart
class MineshaftGenerator_MineshaftPart extends StructurePiece{
}

//net.minecraft.structure.NetherFortressGenerator$Piece
class NetherFortressGenerator_Piece extends StructurePiece{
}
class Static_NetherFortressGenerator_Piece {
static isInBounds(boundingBox: BlockBox): boolean;
}

//net.minecraft.structure.SimpleStructurePiece
class SimpleStructurePiece extends StructurePiece{
 generate(world: StructureWorldAccess,structureAccessor: StructureAccessor,chunkGenerator: ChunkGenerator,random: Random,chunkBox: BlockBox,chunkPos: ChunkPos,pivot: BlockPos): void;
 translate(x: number,y: number,z: number): void;
 getTemplate(): StructureTemplate;
 getPlacementData(): StructurePlacementData;
 getPos(): BlockPos;
 getRotation(): BlockRotation;
}
class Static_SimpleStructurePiece {
static LOGGER: Logger;
}

//net.minecraft.structure.BuriedTreasureGenerator$Piece
class BuriedTreasureGenerator_Piece extends StructurePiece{
 generate(world: StructureWorldAccess,structureAccessor: StructureAccessor,chunkGenerator: ChunkGenerator,random: Random,chunkBox: BlockBox,chunkPos: ChunkPos,pivot: BlockPos): void;
}

//net.minecraft.structure.PoolStructurePiece
class PoolStructurePiece extends StructurePiece{
 toString(): string;
 generate(world: StructureWorldAccess,structureAccessor: StructureAccessor,chunkGenerator: ChunkGenerator,random: Random,chunkBox: BlockBox,chunkPos: ChunkPos,pivot: BlockPos): void;
 generate(world: StructureWorldAccess,structureAccessor: StructureAccessor,chunkGenerator: ChunkGenerator,random: Random,boundingBox: BlockBox,pivot: BlockPos,keepJigsaws: boolean): void;
 translate(x: number,y: number,z: number): void;
 getGroundLevelDelta(): number;
 addJunction(junction: JigsawJunction): void;
 getPos(): BlockPos;
 getRotation(): BlockRotation;
 getJunctions(): List;
 getPoolElement(): StructurePoolElement;
}
class Static_PoolStructurePiece {
static method_28949(nbtCompound: NbtCompound,nbtElement: NbtElement): void;
static method_35448(): IllegalStateException;
static LOGGER: Logger;
}

//net.minecraft.world.gen.feature.FeaturePlacementContext
class FeaturePlacementContext extends HeightContext{
 getChunkGenerator(): ChunkGenerator;
 getWorld(): StructureWorldAccess;
 getBlockState(pos: BlockPos): BlockState;
 getBottomY(): number;
 getTopY(heightmap: Heightmap_Type,x: number,z: number): number;
 getOrCreateCarvingMask(chunkPos: ChunkPos,carver: GenerationStep_Carver): CarvingMask;
 getPlacedFeature(): Optional;
}

//net.minecraft.world.gen.carver.CarverContext
class CarverContext extends HeightContext{
 getNoiseConfig(): NoiseConfig;
 getRegistryManager(): DynamicRegistryManager;
 applyMaterialRule(posToBiome: Function,chunk: Chunk,pos: BlockPos,hasFluid: boolean): Optional;
}

//net.minecraft.loot.condition.AllOfLootCondition
class AllOfLootCondition extends AlternativeLootCondition{
 getType(): LootConditionType;
}
class Static_AllOfLootCondition {
static builder(terms: LootCondition_Builder): AllOfLootCondition_Builder;
}

//net.minecraft.loot.condition.AnyOfLootCondition
class AnyOfLootCondition extends AlternativeLootCondition{
 getType(): LootConditionType;
}
class Static_AnyOfLootCondition {
static builder(terms: LootCondition_Builder): AnyOfLootCondition_Builder;
}

//net.minecraft.client.gui.widget.TabNavigationWidget
class TabNavigationWidget extends AbstractParentElement, Drawable, Element, Selectable{
 init(): void;
 getType(): Selectable_SelectionType;
 children(): List;
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
 appendNarrations(builder: NarrationMessageBuilder): void;
 setFocused(focused: boolean): void;
 setFocused(focused: Element): void;
 getNavigationFocus(): ScreenRect;
 getNavigationPath(navigation: GuiNavigation): GuiNavigationPath;
 selectTab(index: number,clickSound: boolean): void;
 setWidth(width: number): void;
 trySwitchTabsWithKey(keyCode: number): boolean;
}
class Static_TabNavigationWidget {
static builder(tabManager: TabManager,width: number): TabNavigationWidget_Builder;
static field_42489: number;
static field_43076: number;
static field_43077: number;
static field_43078: number;
static USAGE_NARRATION_TEXT: Text;
}

//net.minecraft.client.gui.widget.EntryListWidget
class EntryListWidget extends AbstractParentElement, Drawable, Selectable{
 getType(): Selectable_SelectionType;
 getFirst(): EntryListWidget_Entry;
 children(): List;
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
 getRowLeft(): number;
 getRowWidth(): number;
 setSelected(entry: EntryListWidget_Entry): void;
 setFocused(focused: Element): void;
 isMouseOver(mouseX: number,mouseY: number): boolean;
 getNavigationFocus(): ScreenRect;
 getFocused(): EntryListWidget_Entry;
 getFocused(): Element;
 mouseScrolled(mouseX: number,mouseY: number,amount: number): boolean;
 getScrollAmount(): number;
 mouseReleased(mouseX: number,mouseY: number,button: number): boolean;
 mouseClicked(mouseX: number,mouseY: number,button: number): boolean;
 mouseDragged(mouseX: number,mouseY: number,button: number,deltaX: number,deltaY: number): boolean;
 getMaxScroll(): number;
 setScrollAmount(amount: number): void;
 setRenderSelection(renderSelection: boolean): void;
 getSelectedOrNull(): EntryListWidget_Entry;
 setLeftPos(left: number): void;
 updateSize(width: number,height: number,top: number,bottom: number): void;
 getRowRight(): number;
 method_35721(): number;
 setRenderHorizontalShadows(renderHorizontalShadows: boolean): void;
 setRenderBackground(renderBackground: boolean): void;
}
class Static_EntryListWidget {
static method_48201(entry: EntryListWidget_Entry): boolean;
}

//net.minecraft.resource.fs.ResourcePath$2


//net.minecraft.resource.fs.ResourcePath$1


//net.minecraft.client.gui.screen.Screen
class Screen extends AbstractParentElement, Drawable{
 init(client: MinecraftClient,width: number,height: number): void;
 close(): void;
 removed(): void;
 resize(client: MinecraftClient,width: number,height: number): void;
 children(): List;
 tick(): void;
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
 applyKeyPressNarratorDelay(): void;
 applyNarratorModeChangeDelay(): void;
 getTitle(): Text;
 isMouseOver(mouseX: number,mouseY: number): boolean;
 getNavigationFocus(): ScreenRect;
 getMusic(): MusicSound;
 renderWithTooltip(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
 updateNarrator(): void;
 setTooltip(tooltip: Tooltip,positioner: TooltipPositioner,focused: boolean): void;
 setTooltip(tooltip: List): void;
 setTooltip(tooltip: List,positioner: TooltipPositioner,focused: boolean): void;
 keyPressed(keyCode: number,scanCode: number,modifiers: number): boolean;
 filesDragged(paths: List): void;
 narrateScreenIfNarrationEnabled(onlyChangedNarrations: boolean): void;
 renderBackgroundTexture(context: DrawContext): void;
 applyMousePressScrollNarratorDelay(): void;
 applyMouseMoveNarratorDelay(): void;
 renderBackground(context: DrawContext): void;
 handleTextClick(style: Style): boolean;
 getNarratedTitle(): Text;
 shouldCloseOnEsc(): boolean;
 onDisplayed(): void;
 shouldPause(): boolean;
 width: number;
 height: number;
}
class Static_Screen {
static hasAltDown(): boolean;
static findSelectedElementData(selectables: List,selectable: Selectable): Screen_SelectedElementNarrationData;
static getTooltipFromItem(client: MinecraftClient,stack: ItemStack): List;
static hide(widgets: ClickableWidget[]): void;
static isSelectAll(code: number): boolean;
static hasControlDown(): boolean;
static isPaste(code: number): boolean;
static isCopy(code: number): boolean;
static isCut(code: number): boolean;
static hasShiftDown(): boolean;
static wrapScreenError(task: Runnable,errorTitle: string,screenName: string): void;
static method_25413(string: string): string;
static LOGGER: Logger;
static ALLOWED_PROTOCOLS: Set;
static SCREEN_USAGE_TEXT: Text;
static OPTIONS_BACKGROUND_TEXTURE: Identifier;
static SCREEN_INIT_NARRATION_DELAY: long;
static NARRATOR_MODE_CHANGE_DELAY: long;
static MOUSE_MOVE_NARRATION_DELAY: long;
static MOUSE_PRESS_SCROLL_NARRATION_DELAY: long;
static KEY_PRESS_NARRATION_DELAY: long;
}

//net.minecraft.client.gui.widget.TextFieldWidget
class TextFieldWidget extends ClickableWidget, Drawable{
 write(text: string): void;
 isActive(): boolean;
 getText(): string;
 tick(): void;
 setText(text: string): void;
 getInnerWidth(): number;
 getCharacterX(index: number): number;
 setFocused(focused: boolean): void;
 isMouseOver(mouseX: number,mouseY: number): boolean;
 getNavigationPath(navigation: GuiNavigation): GuiNavigationPath;
 charTyped(chr: char,modifiers: number): boolean;
 setEditableColor(editableColor: number): void;
 setPlaceholder(placeholder: Text): void;
 isVisible(): boolean;
 setVisible(visible: boolean): void;
 moveCursor(offset: number): void;
 setMaxLength(maxLength: number): void;
 getSelectedText(): string;
 setRenderTextProvider(renderTextProvider: BiFunction): void;
 setSelectionStart(cursor: number): void;
 setSelectionEnd(index: number): void;
 setSuggestion(suggestion: string): void;
 keyPressed(keyCode: number,scanCode: number,modifiers: number): boolean;
 setCursor(cursor: number): void;
 getCursor(): number;
 appendClickableNarrations(builder: NarrationMessageBuilder): void;
 renderButton(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
 onClick(mouseX: number,mouseY: number): void;
 playDownSound(soundManager: SoundManager): void;
 setTextPredicate(textPredicate: Predicate): void;
 eraseWords(wordOffset: number): void;
 setCursorToEnd(): void;
 setDrawsBackground(drawsBackground: boolean): void;
 eraseCharacters(characterOffset: number): void;
 setEditable(editable: boolean): void;
 setUneditableColor(uneditableColor: number): void;
 setChangedListener(changedListener: Consumer): void;
 setFocusUnlocked(focusUnlocked: boolean): void;
 setCursorToStart(): void;
 getWordSkipPosition(wordOffset: number): number;
}
class Static_TextFieldWidget {
static method_1873(string: string,firstCharacterIndex: Integer): OrderedText;
static field_32194: number;
static field_32195: number;
static field_32197: number;
static VERTICAL_CURSOR_COLOR: number;
static HORIZONTAL_CURSOR: string;
static DEFAULT_EDITABLE_COLOR: number;
static field_32201: number;
static BORDER_COLOR: number;
static BACKGROUND_COLOR: number;
}

//net.minecraft.client.gui.widget.ScrollableWidget
class ScrollableWidget extends ClickableWidget, Drawable, Element{
 mouseScrolled(mouseX: number,mouseY: number,amount: number): boolean;
 keyPressed(keyCode: number,scanCode: number,modifiers: number): boolean;
 mouseReleased(mouseX: number,mouseY: number,button: number): boolean;
 mouseClicked(mouseX: number,mouseY: number,button: number): boolean;
 mouseDragged(mouseX: number,mouseY: number,button: number,deltaX: number,deltaY: number): boolean;
 renderButton(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
}
class Static_ScrollableWidget {
static FOCUSED_BORDER_COLOR: number;
static UNFOCUSED_BORDER_COLOR: number;
static BOX_COLOR: number;
static PADDING: number;
}

//net.minecraft.loot.entry.LeafEntry$1


//net.minecraft.loot.entry.TagEntry$1


//net.minecraft.block.SculkBlock
class SculkBlock extends ExperienceDroppingBlock, SculkSpreadable{
 spread(cursor: SculkSpreadManager_Cursor,world: WorldAccess,catalystPos: BlockPos,random: Random,spreadManager: SculkSpreadManager,shouldConvertToBlock: boolean): number;
 shouldConvertToSpreadable(): boolean;
}
class Static_SculkBlock {
static getDecay(spreadManager: SculkSpreadManager,cursorPos: BlockPos,catalystPos: BlockPos,charge: number): number;
static shouldNotDecay(world: WorldAccess,pos: BlockPos): boolean;
}

//net.minecraft.client.search.TextSearchProvider
class TextSearchProvider extends IdentifierSearchProvider{
 reload(): void;
}

//net.minecraft.server.world.ServerLightingProvider
class ServerLightingProvider extends LightingProvider, AutoCloseable{
 close(): void;
 tick(): void;
 setRetainData(pos: ChunkPos,retainData: boolean): void;
 initializeLight(chunk: Chunk,bl: boolean): CompletableFuture;
 checkBlock(pos: BlockPos): void;
 setSectionStatus(pos: ChunkSectionPos,notReady: boolean): void;
 enqueueSectionData(lightType: LightType,pos: ChunkSectionPos,nibbles: ChunkNibbleArray): void;
 propagateLight(chunkPos: ChunkPos): void;
 setColumnEnabled(pos: ChunkPos,retainData: boolean): void;
 doLightUpdates(): number;
 light(chunk: Chunk,excludeBlocks: boolean): CompletableFuture;
}
class Static_ServerLightingProvider {
static method_18847(chunkSectionPos: ChunkSectionPos,bl: boolean): string;
static method_18846(blockPos: BlockPos): string;
static method_20389(): number;
static method_51473(chunkPos: ChunkPos,bl: boolean): string;
static method_20387(chunkPos: ChunkPos): string;
static method_17314(): number;
static method_51472(chunkPos: ChunkPos): string;
static method_20607(): number;
static method_18844(chunkSectionPos: ChunkSectionPos): string;
static method_20625(): number;
static method_51286(chunkPos: ChunkPos): string;
static method_18845(chunkPos: ChunkPos,bl: boolean): string;
static method_20624(chunkPos: ChunkPos): string;
static field_44692: number;
static LOGGER: Logger;
}

//net.minecraft.structure.processor.RuleStructureProcessor
class RuleStructureProcessor extends StructureProcessor{
 process(world: WorldView,pos: BlockPos,pivot: BlockPos,originalBlockInfo: StructureTemplate_StructureBlockInfo,currentBlockInfo: StructureTemplate_StructureBlockInfo,data: StructurePlacementData): StructureTemplate_StructureBlockInfo;
}
class Static_RuleStructureProcessor {
static method_28996(processor: RuleStructureProcessor): List;
static CODEC: Codec;
}

//net.minecraft.structure.processor.BlockRotStructureProcessor
class BlockRotStructureProcessor extends StructureProcessor{
 process(world: WorldView,pos: BlockPos,pivot: BlockPos,originalBlockInfo: StructureTemplate_StructureBlockInfo,currentBlockInfo: StructureTemplate_StructureBlockInfo,data: StructurePlacementData): StructureTemplate_StructureBlockInfo;
}
class Static_BlockRotStructureProcessor {
static method_42711(instance: RecordCodecBuilder_Instance): App;
static method_42713(processor: BlockRotStructureProcessor): Optional;
static method_42712(processor: BlockRotStructureProcessor): Float;
static CODEC: Codec;
}

//net.minecraft.structure.processor.BlockAgeStructureProcessor
class BlockAgeStructureProcessor extends StructureProcessor{
 process(world: WorldView,pos: BlockPos,pivot: BlockPos,originalBlockInfo: StructureTemplate_StructureBlockInfo,currentBlockInfo: StructureTemplate_StructureBlockInfo,data: StructurePlacementData): StructureTemplate_StructureBlockInfo;
}
class Static_BlockAgeStructureProcessor {
static method_28967(processor: BlockAgeStructureProcessor): Float;
static randomState(random: Random,states: BlockState[]): BlockState;
static randomStairProperties(random: Random,stairs: Block): BlockState;
static CODEC: Codec;
static field_31681: number;
static field_31682: number;
static field_31683: number;
static AGEABLE_SLABS: BlockState[];
}

//net.minecraft.structure.processor.ProtectedBlocksStructureProcessor
class ProtectedBlocksStructureProcessor extends StructureProcessor{
 process(world: WorldView,pos: BlockPos,pivot: BlockPos,originalBlockInfo: StructureTemplate_StructureBlockInfo,currentBlockInfo: StructureTemplate_StructureBlockInfo,data: StructurePlacementData): StructureTemplate_StructureBlockInfo;
 protectedBlocksTag: TagKey;
}
class Static_ProtectedBlocksStructureProcessor {
static method_37002(processor: ProtectedBlocksStructureProcessor): TagKey;
static CODEC: Codec;
}

//net.minecraft.structure.processor.GravityStructureProcessor
class GravityStructureProcessor extends StructureProcessor{
 process(world: WorldView,pos: BlockPos,pivot: BlockPos,originalBlockInfo: StructureTemplate_StructureBlockInfo,currentBlockInfo: StructureTemplate_StructureBlockInfo,data: StructurePlacementData): StructureTemplate_StructureBlockInfo;
}
class Static_GravityStructureProcessor {
static method_28974(processor: GravityStructureProcessor): Heightmap_Type;
static method_28973(processor: GravityStructureProcessor): Integer;
static method_28972(instance: RecordCodecBuilder_Instance): App;
static CODEC: Codec;
}

//net.minecraft.structure.processor.LavaSubmergedBlockStructureProcessor
class LavaSubmergedBlockStructureProcessor extends StructureProcessor{
 process(world: WorldView,pos: BlockPos,pivot: BlockPos,originalBlockInfo: StructureTemplate_StructureBlockInfo,currentBlockInfo: StructureTemplate_StructureBlockInfo,data: StructurePlacementData): StructureTemplate_StructureBlockInfo;
}
class Static_LavaSubmergedBlockStructureProcessor {
static method_29966(): LavaSubmergedBlockStructureProcessor;
static CODEC: Codec;
static INSTANCE: LavaSubmergedBlockStructureProcessor;
}

//net.minecraft.structure.processor.BlockIgnoreStructureProcessor
class BlockIgnoreStructureProcessor extends StructureProcessor{
 process(world: WorldView,pos: BlockPos,pivot: BlockPos,originalBlockInfo: StructureTemplate_StructureBlockInfo,currentBlockInfo: StructureTemplate_StructureBlockInfo,data: StructurePlacementData): StructureTemplate_StructureBlockInfo;
}
class Static_BlockIgnoreStructureProcessor {
static method_28968(processor: BlockIgnoreStructureProcessor): List;
static CODEC: Codec;
static IGNORE_STRUCTURE_BLOCKS: BlockIgnoreStructureProcessor;
static IGNORE_AIR: BlockIgnoreStructureProcessor;
static IGNORE_AIR_AND_STRUCTURE_BLOCKS: BlockIgnoreStructureProcessor;
}

//net.minecraft.structure.processor.JigsawReplacementStructureProcessor
class JigsawReplacementStructureProcessor extends StructureProcessor{
 process(world: WorldView,pos: BlockPos,pivot: BlockPos,originalBlockInfo: StructureTemplate_StructureBlockInfo,currentBlockInfo: StructureTemplate_StructureBlockInfo,data: StructurePlacementData): StructureTemplate_StructureBlockInfo;
}
class Static_JigsawReplacementStructureProcessor {
static method_28975(): JigsawReplacementStructureProcessor;
static field_43332: Logger;
static CODEC: Codec;
static INSTANCE: JigsawReplacementStructureProcessor;
}

//net.minecraft.structure.processor.CappedStructureProcessor
class CappedStructureProcessor extends StructureProcessor{
 reprocess(world: ServerWorldAccess,pos: BlockPos,pivot: BlockPos,originalBlockInfos: List,currentBlockInfos: List,data: StructurePlacementData): List;
}
class Static_CappedStructureProcessor {
static method_49890(processor: CappedStructureProcessor): StructureProcessor;
static method_49889(processor: CappedStructureProcessor): IntProvider;
static method_49888(instance: RecordCodecBuilder_Instance): App;
static CODEC: Codec;
}

//net.minecraft.structure.processor.NopStructureProcessor
class NopStructureProcessor extends StructureProcessor{
}
class Static_NopStructureProcessor {
static method_28981(): NopStructureProcessor;
static CODEC: Codec;
static INSTANCE: NopStructureProcessor;
}

//net.minecraft.structure.processor.BlackstoneReplacementStructureProcessor
class BlackstoneReplacementStructureProcessor extends StructureProcessor{
 process(world: WorldView,pos: BlockPos,pivot: BlockPos,originalBlockInfo: StructureTemplate_StructureBlockInfo,currentBlockInfo: StructureTemplate_StructureBlockInfo,data: StructurePlacementData): StructureTemplate_StructureBlockInfo;
}
class Static_BlackstoneReplacementStructureProcessor {
static method_28966(): BlackstoneReplacementStructureProcessor;
static method_27255(replacements: HashMap): void;
static CODEC: Codec;
static INSTANCE: BlackstoneReplacementStructureProcessor;
}

//net.minecraft.block.BrushableBlock
class BrushableBlock extends BlockWithEntity, LandingBlock{
 onDestroyedOnLanding(world: World,pos: BlockPos,fallingBlockEntity: FallingBlockEntity): void;
 getStateForNeighborUpdate(state: BlockState,direction: Direction,neighborState: BlockState,world: WorldAccess,pos: BlockPos,neighborPos: BlockPos): BlockState;
 getBrushingCompleteSound(): SoundEvent;
 randomDisplayTick(state: BlockState,world: World,pos: BlockPos,random: Random): void;
 getBaseBlock(): Block;
 onBlockAdded(state: BlockState,world: World,pos: BlockPos,oldState: BlockState,notify: boolean): void;
 scheduledTick(state: BlockState,world: ServerWorld,pos: BlockPos,random: Random): void;
 createBlockEntity(pos: BlockPos,state: BlockState): BlockEntity;
 getRenderType(state: BlockState): BlockRenderType;
 getBrushingSound(): SoundEvent;
}
class Static_BrushableBlock {
static DUSTED: IntProperty;
static field_42773: number;
}

//net.minecraft.block.FallingBlock
class FallingBlock extends Block, LandingBlock{
 getStateForNeighborUpdate(state: BlockState,direction: Direction,neighborState: BlockState,world: WorldAccess,pos: BlockPos,neighborPos: BlockPos): BlockState;
 randomDisplayTick(state: BlockState,world: World,pos: BlockPos,random: Random): void;
 onBlockAdded(state: BlockState,world: World,pos: BlockPos,oldState: BlockState,notify: boolean): void;
 scheduledTick(state: BlockState,world: ServerWorld,pos: BlockPos,random: Random): void;
 getColor(state: BlockState,world: BlockView,pos: BlockPos): number;
}
class Static_FallingBlock {
static canFallThrough(state: BlockState): boolean;
}

//net.minecraft.entity.effect.InstantStatusEffect
class InstantStatusEffect extends StatusEffect{
 canApplyUpdateEffect(duration: number,amplifier: number): boolean;
 isInstant(): boolean;
}

//net.minecraft.entity.effect.StatusEffects$1


//net.minecraft.entity.effect.DamageModifierStatusEffect
class DamageModifierStatusEffect extends StatusEffect{
 adjustModifierAmount(amplifier: number,modifier: EntityAttributeModifier): number;
}

//net.minecraft.entity.effect.HealthBoostStatusEffect
class HealthBoostStatusEffect extends StatusEffect{
 onRemoved(entity: LivingEntity,attributes: AttributeContainer,amplifier: number): void;
}

//net.minecraft.entity.effect.AbsorptionStatusEffect
class AbsorptionStatusEffect extends StatusEffect{
 onApplied(entity: LivingEntity,attributes: AttributeContainer,amplifier: number): void;
 onRemoved(entity: LivingEntity,attributes: AttributeContainer,amplifier: number): void;
}

//net.minecraft.text.LiteralTextContent
class LiteralTextContent extends Record, TextContent{
 equals(object: Object): boolean;
 toString(): string;
 hashCode(): number;
 string(): string;
 visit(visitor: StringVisitable_StyledVisitor,style: Style): Optional;
 visit(visitor: StringVisitable_Visitor): Optional;
}

//net.minecraft.client.font.BitmapFont$BitmapFontGlyph
class BitmapFont_BitmapFontGlyph extends Record, Glyph{
 equals(object: Object): boolean;
 toString(): string;
 hashCode(): number;
 x(): number;
 advance(): number;
 y(): number;
 scaleFactor(): number;
 image(): NativeImage;
 width(): number;
 height(): number;
 getAdvance(): number;
 bake(fun: Function): GlyphRenderer;
 ascent(): number;
}

//net.minecraft.client.font.UnihexFont$UnicodeTextureGlyph
class UnihexFont_UnicodeTextureGlyph extends Record, Glyph{
 equals(object: Object): boolean;
 toString(): string;
 hashCode(): number;
 left(): number;
 right(): number;
 width(): number;
 contents(): UnihexFont_BitmapGlyph;
 getAdvance(): number;
 getShadowOffset(): number;
 getBoldOffset(): number;
 bake(fun: Function): GlyphRenderer;
}

//net.minecraft.client.font.BuiltinEmptyGlyph
class BuiltinEmptyGlyph extends Enum, Glyph{
 getAdvance(): number;
 bake(fun: Function): GlyphRenderer;
}
class Static_BuiltinEmptyGlyph {
static values(): BuiltinEmptyGlyph[];
static valueOf(string: string): BuiltinEmptyGlyph;
static method_41835(x: number,y: number): number;
static createRectImage(width: number,height: number,colorSupplier: BuiltinEmptyGlyph_ColorSupplier): NativeImage;
static method_41836(): NativeImage;
static method_41837(): NativeImage;
static method_41838(): BuiltinEmptyGlyph[];
static method_41833(x: number,y: number): number;
static WHITE: BuiltinEmptyGlyph;
static MISSING: BuiltinEmptyGlyph;
static field_37901: BuiltinEmptyGlyph[];
}

//net.minecraft.block.SkullBlock$Type
class SkullBlock_Type extends Enum, SkullBlock_SkullType{
}
class Static_SkullBlock_Type {
static values(): SkullBlock_Type;
static valueOf(string: string): SkullBlock_Type;
static method_36710(): SkullBlock_Type;
static SKELETON: SkullBlock_Type;
static WITHER_SKELETON: SkullBlock_Type;
static PLAYER: SkullBlock_Type;
static ZOMBIE: SkullBlock_Type;
static CREEPER: SkullBlock_Type;
static PIGLIN: SkullBlock_Type;
static DRAGON: SkullBlock_Type;
static field_11509: SkullBlock_Type;
}

//net.minecraft.entity.ai.goal.DoorInteractGoal
class DoorInteractGoal extends Goal{
 start(): void;
 tick(): void;
 shouldContinue(): boolean;
 canStart(): boolean;
 shouldRunEveryTick(): boolean;
}

//net.minecraft.entity.ai.goal.FollowGroupLeaderGoal
class FollowGroupLeaderGoal extends Goal{
 start(): void;
 stop(): void;
 tick(): void;
 shouldContinue(): boolean;
 canStart(): boolean;
}
class Static_FollowGroupLeaderGoal {
static method_6260(fish: SchoolingFishEntity): boolean;
static method_6262(fish: SchoolingFishEntity): boolean;
static MIN_SEARCH_DELAY: number;
}

//net.minecraft.entity.ai.goal.MoveThroughVillageGoal
class MoveThroughVillageGoal extends Goal{
 start(): void;
 stop(): void;
 shouldContinue(): boolean;
 canStart(): boolean;
}
class Static_MoveThroughVillageGoal {
static method_43976(poiType: RegistryEntry): boolean;
static method_43974(blockPos: BlockPos,blockPos2: BlockPos): Double;
static method_43975(poiType: RegistryEntry): boolean;
}

//net.minecraft.entity.ai.goal.PowderSnowJumpGoal
class PowderSnowJumpGoal extends Goal{
 tick(): void;
 canStart(): boolean;
 shouldRunEveryTick(): boolean;
}

//net.minecraft.entity.ai.goal.FormCaravanGoal
class FormCaravanGoal extends Goal{
 stop(): void;
 tick(): void;
 shouldContinue(): boolean;
 canStart(): boolean;
 llama: LlamaEntity;
}
class Static_FormCaravanGoal {
static method_19616(entity: Entity): boolean;
static MAX_CARAVAN_LENGTH: number;
}

//net.minecraft.entity.ai.goal.LookAroundGoal
class LookAroundGoal extends Goal{
 start(): void;
 tick(): void;
 shouldContinue(): boolean;
 canStart(): boolean;
 shouldRunEveryTick(): boolean;
}

//net.minecraft.entity.ai.goal.HorseBondWithPlayerGoal
class HorseBondWithPlayerGoal extends Goal{
 start(): void;
 tick(): void;
 shouldContinue(): boolean;
 canStart(): boolean;
}

//net.minecraft.entity.ai.goal.MoveToTargetPosGoal
class MoveToTargetPosGoal extends Goal{
 start(): void;
 tick(): void;
 shouldContinue(): boolean;
 canStart(): boolean;
 shouldRunEveryTick(): boolean;
 shouldResetPath(): boolean;
 getDesiredDistanceToTarget(): number;
 speed: number;
}
class Static_MoveToTargetPosGoal {
static MIN_WAITING_TIME: number;
static MAX_TRYING_TIME: number;
static MIN_INTERVAL: number;
}

//net.minecraft.entity.ai.goal.BowAttackGoal
class BowAttackGoal extends Goal{
 start(): void;
 stop(): void;
 tick(): void;
 shouldContinue(): boolean;
 canStart(): boolean;
 shouldRunEveryTick(): boolean;
 setAttackInterval(attackInterval: number): void;
}

//net.minecraft.entity.ai.goal.AmbientStandGoal
class AmbientStandGoal extends Goal{
 start(): void;
 shouldContinue(): boolean;
 canStart(): boolean;
 shouldRunEveryTick(): boolean;
}

//net.minecraft.entity.ai.goal.UniversalAngerGoal
class UniversalAngerGoal extends Goal{
 start(): void;
 canStart(): boolean;
}
class Static_UniversalAngerGoal {
static method_29930(entity: MobEntity): Angerable;
static BOX_VERTICAL_EXPANSION: number;
}

//net.minecraft.entity.ai.goal.GoalSelector$1


//net.minecraft.entity.ai.goal.AvoidSunlightGoal
class AvoidSunlightGoal extends Goal{
 start(): void;
 stop(): void;
 canStart(): boolean;
}

//net.minecraft.entity.ai.goal.MoveIntoWaterGoal
class MoveIntoWaterGoal extends Goal{
 start(): void;
 canStart(): boolean;
}

//net.minecraft.entity.ai.goal.GoToWalkTargetGoal
class GoToWalkTargetGoal extends Goal{
 start(): void;
 shouldContinue(): boolean;
 canStart(): boolean;
}

//net.minecraft.entity.ai.goal.PrioritizedGoal
class PrioritizedGoal extends Goal{
 equals(o: Object): boolean;
 hashCode(): number;
 start(): void;
 getPriority(): number;
 stop(): void;
 canStop(): boolean;
 tick(): void;
 isRunning(): boolean;
 canBeReplacedBy(goal: PrioritizedGoal): boolean;
 shouldContinue(): boolean;
 canStart(): boolean;
 shouldRunEveryTick(): boolean;
 getControls(): EnumSet;
 setControls(controls: EnumSet): void;
 getGoal(): Goal;
}

//net.minecraft.entity.ai.goal.AnimalMateGoal
class AnimalMateGoal extends Goal{
 stop(): void;
 tick(): void;
 shouldContinue(): boolean;
 canStart(): boolean;
}
class Static_AnimalMateGoal {
static VALID_MATE_PREDICATE: TargetPredicate;
}

//net.minecraft.entity.ai.goal.ChaseBoatGoal
class ChaseBoatGoal extends Goal{
 start(): void;
 stop(): void;
 canStop(): boolean;
 tick(): void;
 shouldContinue(): boolean;
 canStart(): boolean;
}

//net.minecraft.entity.ai.goal.StopFollowingCustomerGoal
class StopFollowingCustomerGoal extends Goal{
 start(): void;
 stop(): void;
 canStart(): boolean;
}

//net.minecraft.entity.ai.goal.MeleeAttackGoal
class MeleeAttackGoal extends Goal{
 start(): void;
 stop(): void;
 tick(): void;
 shouldContinue(): boolean;
 canStart(): boolean;
 shouldRunEveryTick(): boolean;
}
class Static_MeleeAttackGoal {
static MAX_ATTACK_TIME: long;
}

//net.minecraft.entity.ai.goal.SitGoal
class SitGoal extends Goal{
 start(): void;
 stop(): void;
 shouldContinue(): boolean;
 canStart(): boolean;
}

//net.minecraft.entity.ai.goal.ProjectileAttackGoal
class ProjectileAttackGoal extends Goal{
 stop(): void;
 tick(): void;
 shouldContinue(): boolean;
 canStart(): boolean;
 shouldRunEveryTick(): boolean;
}

//net.minecraft.entity.ai.goal.HoldInHandsGoal
class HoldInHandsGoal extends Goal{
 start(): void;
 stop(): void;
 shouldContinue(): boolean;
 canStart(): boolean;
}

//net.minecraft.entity.ai.goal.WanderAroundGoal
class WanderAroundGoal extends Goal{
 start(): void;
 stop(): void;
 shouldContinue(): boolean;
 canStart(): boolean;
 ignoreChanceOnce(): void;
 setChance(chance: number): void;
}
class Static_WanderAroundGoal {
static DEFAULT_CHANCE: number;
}

//net.minecraft.entity.ai.goal.FleeEntityGoal
class FleeEntityGoal extends Goal{
 start(): void;
 stop(): void;
 tick(): void;
 shouldContinue(): boolean;
 canStart(): boolean;
}
class Static_FleeEntityGoal {
static method_6246(livingEntity: LivingEntity): boolean;
static method_6245(livingEntity: LivingEntity): boolean;
static method_31501(livingEntity: LivingEntity): boolean;
}

//net.minecraft.entity.ai.goal.BreatheAirGoal
class BreatheAirGoal extends Goal{
 start(): void;
 canStop(): boolean;
 tick(): void;
 shouldContinue(): boolean;
 canStart(): boolean;
}

//net.minecraft.entity.ai.goal.SitOnOwnerShoulderGoal
class SitOnOwnerShoulderGoal extends Goal{
 start(): void;
 canStop(): boolean;
 tick(): void;
 canStart(): boolean;
}

//net.minecraft.entity.ai.goal.IronGolemLookGoal
class IronGolemLookGoal extends Goal{
 start(): void;
 stop(): void;
 tick(): void;
 shouldContinue(): boolean;
 canStart(): boolean;
}
class Static_IronGolemLookGoal {
static CLOSE_VILLAGER_PREDICATE: TargetPredicate;
static MAX_LOOK_COOLDOWN: number;
}

//net.minecraft.entity.ai.goal.WanderNearTargetGoal
class WanderNearTargetGoal extends Goal{
 start(): void;
 stop(): void;
 shouldContinue(): boolean;
 canStart(): boolean;
}

//net.minecraft.entity.ai.goal.FollowParentGoal
class FollowParentGoal extends Goal{
 start(): void;
 stop(): void;
 tick(): void;
 shouldContinue(): boolean;
 canStart(): boolean;
}
class Static_FollowParentGoal {
static HORIZONTAL_CHECK_RANGE: number;
static VERTICAL_CHECK_RANGE: number;
static MIN_DISTANCE: number;
}

//net.minecraft.entity.ai.goal.MoveToRaidCenterGoal
class MoveToRaidCenterGoal extends Goal{
 tick(): void;
 shouldContinue(): boolean;
 canStart(): boolean;
}
class Static_MoveToRaidCenterGoal {
static method_16466(raid: Raid,raider: RaiderEntity): boolean;
static FREE_RAIDER_CHECK_INTERVAL: number;
static WALK_SPEED: number;
}

//net.minecraft.entity.ai.goal.PounceAtTargetGoal
class PounceAtTargetGoal extends Goal{
 start(): void;
 shouldContinue(): boolean;
 canStart(): boolean;
}

//net.minecraft.entity.ai.goal.SwimGoal
class SwimGoal extends Goal{
 tick(): void;
 canStart(): boolean;
 shouldRunEveryTick(): boolean;
}

//net.minecraft.entity.ai.goal.CreeperIgniteGoal
class CreeperIgniteGoal extends Goal{
 start(): void;
 stop(): void;
 tick(): void;
 canStart(): boolean;
 shouldRunEveryTick(): boolean;
}

//net.minecraft.entity.ai.goal.GoToVillageGoal
class GoToVillageGoal extends Goal{
 tick(): void;
 shouldContinue(): boolean;
 canStart(): boolean;
}
class Static_GoToVillageGoal {
static method_19054(serverWorld: ServerWorld,blockPos: BlockPos): number;
static field_30228: number;
}

//net.minecraft.entity.ai.goal.TemptGoal
class TemptGoal extends Goal{
 start(): void;
 stop(): void;
 isActive(): boolean;
 tick(): void;
 shouldContinue(): boolean;
 canStart(): boolean;
}
class Static_TemptGoal {
static TEMPTING_ENTITY_PREDICATE: TargetPredicate;
}

//net.minecraft.entity.ai.goal.CrossbowAttackGoal
class CrossbowAttackGoal extends Goal{
 stop(): void;
 tick(): void;
 shouldContinue(): boolean;
 canStart(): boolean;
 shouldRunEveryTick(): boolean;
}
class Static_CrossbowAttackGoal {
static COOLDOWN_RANGE: UniformIntProvider;
}

//net.minecraft.entity.ai.goal.FollowOwnerGoal
class FollowOwnerGoal extends Goal{
 start(): void;
 stop(): void;
 tick(): void;
 shouldContinue(): boolean;
 canStart(): boolean;
}
class Static_FollowOwnerGoal {
static TELEPORT_DISTANCE: number;
static HORIZONTAL_RANGE: number;
static HORIZONTAL_VARIATION: number;
static VERTICAL_VARIATION: number;
}

//net.minecraft.entity.ai.goal.EscapeDangerGoal
class EscapeDangerGoal extends Goal{
 start(): void;
 stop(): void;
 isActive(): boolean;
 shouldContinue(): boolean;
 canStart(): boolean;
}
class Static_EscapeDangerGoal {
static method_39764(blockView: BlockView,pos: BlockPos): boolean;
static RANGE_Y: number;
}

//net.minecraft.entity.ai.goal.LookAtEntityGoal
class LookAtEntityGoal extends Goal{
 start(): void;
 stop(): void;
 tick(): void;
 shouldContinue(): boolean;
 canStart(): boolean;
}
class Static_LookAtEntityGoal {
static method_31502(livingEntity: LivingEntity): boolean;
static method_18414(mobEntity: MobEntity,entity: LivingEntity): boolean;
static DEFAULT_CHANCE: number;
}

//net.minecraft.entity.ai.goal.TrackTargetGoal
class TrackTargetGoal extends Goal{
 start(): void;
 stop(): void;
 shouldContinue(): boolean;
 setMaxTimeWithoutVisibility(time: number): TrackTargetGoal;
}
class Static_TrackTargetGoal {
static UNSET: number;
static CAN_TRACK: number;
static CANNOT_TRACK: number;
}

//net.minecraft.entity.ai.goal.SkeletonHorseTrapTriggerGoal
class SkeletonHorseTrapTriggerGoal extends Goal{
 tick(): void;
 canStart(): boolean;
}

//net.minecraft.entity.ai.goal.FollowMobGoal
class FollowMobGoal extends Goal{
 start(): void;
 stop(): void;
 tick(): void;
 shouldContinue(): boolean;
 canStart(): boolean;
}
class Static_FollowMobGoal {
static method_6259(mobEntity: MobEntity,target: MobEntity): boolean;
}

//net.minecraft.entity.ai.goal.EatGrassGoal
class EatGrassGoal extends Goal{
 start(): void;
 stop(): void;
 tick(): void;
 shouldContinue(): boolean;
 canStart(): boolean;
 getTimer(): number;
}
class Static_EatGrassGoal {
static MAX_TIMER: number;
static GRASS_PREDICATE: Predicate;
}

//net.minecraft.entity.ai.goal.AttackGoal
class AttackGoal extends Goal{
 stop(): void;
 tick(): void;
 shouldContinue(): boolean;
 canStart(): boolean;
 shouldRunEveryTick(): boolean;
}

//net.minecraft.entity.ai.goal.DiveJumpingGoal
class DiveJumpingGoal extends Goal{
}

//net.minecraft.entity.ai.goal.WolfBegGoal
class WolfBegGoal extends Goal{
 start(): void;
 stop(): void;
 tick(): void;
 shouldContinue(): boolean;
 canStart(): boolean;
}

//net.minecraft.entity.ai.goal.EscapeSunlightGoal
class EscapeSunlightGoal extends Goal{
 start(): void;
 shouldContinue(): boolean;
 canStart(): boolean;
}

//net.minecraft.data.server.tag.ValueLookupTagProvider$ObjectBuilder
class ValueLookupTagProvider_ObjectBuilder extends TagProvider_ProvidedTagBuilder{
 add(values: Object[]): ValueLookupTagProvider_ObjectBuilder;
 add(value: Object): ValueLookupTagProvider_ObjectBuilder;
 addTag(tagKey: TagKey): ValueLookupTagProvider_ObjectBuilder;
 addTag(identifiedTag: TagKey): TagProvider_ProvidedTagBuilder;
}

//net.minecraft.client.realms.dto.RealmsNotification$VisitUrl
class RealmsNotification_VisitUrl extends RealmsNotification{
 createButton(currentScreen: Screen): ButtonWidget;
 getDefaultMessage(): Text;
}
class Static_RealmsNotification_VisitUrl {
static fromJson(parent: RealmsNotification,json: JsonObject): RealmsNotification_VisitUrl;
static URL_KEY: string;
static BUTTON_TEXT_KEY: string;
static MESSAGE_KEY: string;
}

//net.minecraft.registry.RegistryOps
class RegistryOps extends ForwardingDynamicOps{
 getOwner(registryRef: RegistryKey): Optional;
 getEntryLookup(registryRef: RegistryKey): Optional;
}
class Static_RegistryOps {
static of(delegate: DynamicOps,registryInfoGetter: RegistryOps_RegistryInfoGetter): RegistryOps;
static of(delegate: DynamicOps,wrapperLookup: RegistryWrapper_WrapperLookup): RegistryOps;
static caching(registryInfoGetter: RegistryOps_RegistryInfoGetter): RegistryOps_RegistryInfoGetter;
static getEntryCodec(key: RegistryKey): RecordCodecBuilder;
static getEntryLookupCodec(registryRef: RegistryKey): RecordCodecBuilder;
static method_46633(object: Object): RegistryEntry_Reference;
static method_46629(registryKey: RegistryKey,info: RegistryOps_RegistryInfo): Optional;
static method_46630(registryKey: RegistryKey,registryKey2: RegistryKey,ops: DynamicOps): DataResult;
static method_46638(registryKey: RegistryKey): DataResult;
static method_49414(): string;
static method_46631(registryKey: RegistryKey,ops: DynamicOps): DataResult;
static method_46635(object: Object): RegistryEntryLookup;
static method_46639(registryKey: RegistryKey): DataResult;
static method_49415(): string;
static method_49416(registryKey: RegistryKey): string;
static method_46626(info: RegistryOps_RegistryInfo): DataResult;
static method_49417(registryKey: RegistryKey): string;
}

//net.minecraft.loot.function.SetBannerPatternFunction$Builder
class SetBannerPatternFunction_Builder extends ConditionalLootFunction_Builder{
 build(): LootFunction;
 pattern(pattern: RegistryEntry,color: DyeColor): SetBannerPatternFunction_Builder;
 pattern(pattern: RegistryKey,color: DyeColor): SetBannerPatternFunction_Builder;
}

//net.minecraft.loot.function.SetContentsLootFunction$Builder
class SetContentsLootFunction_Builder extends ConditionalLootFunction_Builder{
 build(): LootFunction;
 withEntry(entryBuilder: LootPoolEntry_Builder): SetContentsLootFunction_Builder;
}

//net.minecraft.loot.function.EnchantRandomlyLootFunction$Builder
class EnchantRandomlyLootFunction_Builder extends ConditionalLootFunction_Builder{
 add(enchantment: Enchantment): EnchantRandomlyLootFunction_Builder;
 build(): LootFunction;
}

//net.minecraft.loot.function.SetStewEffectLootFunction$Builder
class SetStewEffectLootFunction_Builder extends ConditionalLootFunction_Builder{
 build(): LootFunction;
 withEffect(effect: StatusEffect,durationRange: LootNumberProvider): SetStewEffectLootFunction_Builder;
}

//net.minecraft.loot.function.SetEnchantmentsLootFunction$Builder
class SetEnchantmentsLootFunction_Builder extends ConditionalLootFunction_Builder{
 build(): LootFunction;
 enchantment(enchantment: Enchantment,level: LootNumberProvider): SetEnchantmentsLootFunction_Builder;
}

//net.minecraft.loot.function.SetLoreLootFunction$Builder
class SetLoreLootFunction_Builder extends ConditionalLootFunction_Builder{
 target(target: LootContext_EntityTarget): SetLoreLootFunction_Builder;
 replace(replace: boolean): SetLoreLootFunction_Builder;
 build(): LootFunction;
 lore(lore: Text): SetLoreLootFunction_Builder;
}

//net.minecraft.loot.function.CopyNbtLootFunction$Builder
class CopyNbtLootFunction_Builder extends ConditionalLootFunction_Builder{
 build(): LootFunction;
 withOperation(source: string,target: string): CopyNbtLootFunction_Builder;
 withOperation(source: string,target: string,operator: CopyNbtLootFunction_Operator): CopyNbtLootFunction_Builder;
}

//net.minecraft.loot.function.EnchantWithLevelsLootFunction$Builder
class EnchantWithLevelsLootFunction_Builder extends ConditionalLootFunction_Builder{
 build(): LootFunction;
 allowTreasureEnchantments(): EnchantWithLevelsLootFunction_Builder;
}

//net.minecraft.loot.function.CopyStateFunction$Builder
class CopyStateFunction_Builder extends ConditionalLootFunction_Builder{
 build(): LootFunction;
 addProperty(property: Property): CopyStateFunction_Builder;
}

//net.minecraft.loot.function.SetAttributesLootFunction$Builder
class SetAttributesLootFunction_Builder extends ConditionalLootFunction_Builder{
 build(): LootFunction;
 attribute(attribute: SetAttributesLootFunction_AttributeBuilder): SetAttributesLootFunction_Builder;
}

//net.minecraft.loot.function.ConditionalLootFunction$Joiner
class ConditionalLootFunction_Joiner extends ConditionalLootFunction_Builder{
 build(): LootFunction;
}

//net.minecraft.loot.function.ExplorationMapLootFunction$Builder
class ExplorationMapLootFunction_Builder extends ConditionalLootFunction_Builder{
 build(): LootFunction;
 withDestination(destination: TagKey): ExplorationMapLootFunction_Builder;
 withDecoration(decoration: MapIcon_Type): ExplorationMapLootFunction_Builder;
 withZoom(zoom: byte): ExplorationMapLootFunction_Builder;
 withSkipExistingChunks(skipExistingChunks: boolean): ExplorationMapLootFunction_Builder;
 searchRadius(searchRadius: number): ExplorationMapLootFunction_Builder;
}

//net.minecraft.loot.function.LootingEnchantLootFunction$Builder
class LootingEnchantLootFunction_Builder extends ConditionalLootFunction_Builder{
 build(): LootFunction;
 withLimit(limit: number): LootingEnchantLootFunction_Builder;
}

//net.minecraft.util.shape.DisjointPairList
class DisjointPairList extends AbstractDoubleList, PairList{
 getDouble(position: number): number;
 size(): number;
 getPairs(): DoubleList;
 forEachPair(predicate: PairList_Consumer): boolean;
}
class Static_DisjointPairList {
static method_1068(consumer: PairList_Consumer,x: number,y: number,index: number): boolean;
}

//net.minecraft.world.level.storage.LevelSummary$SymlinkLevelSummary
class LevelSummary_SymlinkLevelSummary extends LevelSummary{
 compareTo(object: Object): number;
 getDisplayName(): string;
 getLastPlayed(): long;
 getDetails(): Text;
 isUnavailable(): boolean;
}
class Static_LevelSummary_SymlinkLevelSummary {
static method_52239(style: Style): Style;
}

//net.minecraft.client.realms.gui.screen.RealmsLongRunningMcoTaskScreen
class RealmsLongRunningMcoTaskScreen extends RealmsScreen, Errable{
 init(): void;
 error(errorMessage: Text): void;
 tick(): void;
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
 setTitle(title: Text): void;
 keyPressed(keyCode: number,scanCode: number,modifiers: number): boolean;
 aborted(): boolean;
}
class Static_RealmsLongRunningMcoTaskScreen {
static NARRATOR: RepeatedNarrator;
static LOGGER: Logger;
static SYMBOLS: String[];
}

//net.minecraft.world.chunk.ProtoChunk
class ProtoChunk extends Chunk{
 getEntities(): List;
 getStatus(): ChunkStatus;
 removeBlockEntity(pos: BlockPos): void;
 getFluidTickScheduler(): BasicTickScheduler;
 getBlockTickScheduler(): BasicTickScheduler;
 setStatus(status: ChunkStatus): void;
 addEntity(entityNbt: NbtCompound): void;
 addEntity(entity: Entity): void;
 getBlockEntities(): Map;
 markBlockForPostProcessing(pos: BlockPos): void;
 markBlockForPostProcessing(packedPos: short,index: number): void;
 setBelowZeroRetrogen(belowZeroRetrogen: BelowZeroRetrogen): void;
 setBlockEntity(blockEntity: BlockEntity): void;
 getBlockEntity(pos: BlockPos): BlockEntity;
 getFluidState(pos: BlockPos): FluidState;
 getBlockState(pos: BlockPos): BlockState;
 setBlockState(pos: BlockPos,state: BlockState,moved: boolean): BlockState;
 setStructureStart(structure: Structure,start: StructureStart): void;
 getBiomeForNoiseGen(biomeX: number,biomeY: number,biomeZ: number): RegistryEntry;
 getBelowZeroRetrogen(): BelowZeroRetrogen;
 setLightingProvider(lightingProvider: LightingProvider): void;
 getOrCreateCarvingMask(step: GenerationStep_Carver): CarvingMask;
 getHeightLimitView(): HeightLimitView;
 getTickSchedulers(): Chunk_TickSchedulers;
 getPackedBlockEntityNbt(pos: BlockPos): NbtCompound;
 setCarvingMask(step: GenerationStep_Carver,carvingMask: CarvingMask): void;
 getCarvingMask(step: GenerationStep_Carver): CarvingMask;
 getBlockProtoTickScheduler(): ChunkTickScheduler;
 getFluidProtoTickScheduler(): ChunkTickScheduler;
 getBlockEntityNbts(): Map;
}
class Static_ProtoChunk {
static createProtoTickScheduler(tickScheduler: SimpleTickScheduler): ChunkTickScheduler;
static getPackedSectionRelative(pos: BlockPos): short;
static joinBlockPos(sectionRel: short,sectionY: number,chunkPos: ChunkPos): BlockPos;
}

//net.minecraft.world.chunk.WorldChunk
class WorldChunk extends Chunk{
 clear(): void;
 isEmpty(): boolean;
 getStatus(): ChunkStatus;
 getGameEventDispatcher(ySectionCoord: number): GameEventDispatcher;
 removeBlockEntity(pos: BlockPos): void;
 getFluidTickScheduler(): BasicTickScheduler;
 getBlockTickScheduler(): BasicTickScheduler;
 addBlockEntity(blockEntity: BlockEntity): void;
 addEntity(entity: Entity): void;
 getBlockEntities(): Map;
 setBlockEntity(blockEntity: BlockEntity): void;
 getBlockEntity(pos: BlockPos): BlockEntity;
 getBlockEntity(pos: BlockPos,creationType: WorldChunk_CreationType): BlockEntity;
 getWorld(): World;
 getFluidState(x: number,y: number,z: number): FluidState;
 getFluidState(pos: BlockPos): FluidState;
 getBlockState(pos: BlockPos): BlockState;
 setBlockState(pos: BlockPos,state: BlockState,moved: boolean): BlockState;
 loadEntities(): void;
 getLevelType(): ChunkLevelType;
 getTickSchedulers(): Chunk_TickSchedulers;
 getPackedBlockEntityNbt(pos: BlockPos): NbtCompound;
 disableTickSchedulers(time: long): void;
 removeChunkTickSchedulers(world: ServerWorld): void;
 updateAllBlockEntities(): void;
 loadBiomeFromPacket(buf: PacketByteBuf): void;
 addChunkTickSchedulers(world: ServerWorld): void;
 setLevelTypeProvider(levelTypeProvider: Supplier): void;
 setLoadedToWorld(loadedToWorld: boolean): void;
 loadFromPacket(buf: PacketByteBuf,nbt: NbtCompound,consumer: Consumer): void;
 runPostProcessing(): void;
}
class Static_WorldChunk {
static method_38290(ticker: WorldChunk_WrappedBlockEntityTickInvoker): void;
static LOGGER: Logger;
static EMPTY_BLOCK_ENTITY_TICKER: BlockEntityTickInvoker;
}

//net.minecraft.entity.decoration.DisplayEntity$ArgbLerper
class DisplayEntity_ArgbLerper extends Record, DisplayEntity_IntLerper{
 equals(object: Object): boolean;
 toString(): string;
 hashCode(): number;
 current(): number;
 previous(): number;
 lerp(delta: number): number;
}

//net.minecraft.entity.decoration.DisplayEntity$IntLerperImpl
class DisplayEntity_IntLerperImpl extends Record, DisplayEntity_IntLerper{
 equals(object: Object): boolean;
 toString(): string;
 hashCode(): number;
 current(): number;
 previous(): number;
 lerp(delta: number): number;
}

//net.minecraft.block.entity.PistonBlockEntity
class PistonBlockEntity extends BlockEntity{
 finish(): void;
 setWorld(world: World): void;
 toInitialChunkDataNbt(): NbtCompound;
 getProgress(tickDelta: number): number;
 getFacing(): Direction;
 getCollisionShape(world: BlockView,pos: BlockPos): VoxelShape;
 readNbt(nbt: NbtCompound): void;
 getRenderOffsetX(tickDelta: number): number;
 getRenderOffsetZ(tickDelta: number): number;
 getPushedBlock(): BlockState;
 getRenderOffsetY(tickDelta: number): number;
 isExtending(): boolean;
 isSource(): boolean;
 getMovementDirection(): Direction;
 getSavedWorldTime(): long;
}
class Static_PistonBlockEntity {
static push(pos: BlockPos,entity: Entity,direction: Direction,amount: number): void;
static tick(world: World,pos: BlockPos,state: BlockState,blockEntity: PistonBlockEntity): void;
static moveEntitiesInHoneyBlock(world: World,pos: BlockPos,f: number,blockEntity: PistonBlockEntity): void;
static getIntersectionSize(box: Box,direction: Direction,box2: Box): number;
static method_21866(): Direction;
static offsetHeadBox(pos: BlockPos,box: Box,blockEntity: PistonBlockEntity): Box;
static method_23673(box: Box,blockPos: BlockPos,entity: Entity): boolean;
static canMoveEntity(box: Box,entity: Entity,pos: BlockPos): boolean;
static moveEntity(direction: Direction,entity: Entity,distance: number,movementDirection: Direction): void;
static pushEntities(world: World,pos: BlockPos,f: number,blockEntity: PistonBlockEntity): void;
static field_31382: number;
static field_31383: number;
static field_31381: number;
static entityMovementDirection: ThreadLocal;
}

//net.minecraft.block.entity.BedBlockEntity
class BedBlockEntity extends BlockEntity{
 setColor(color: DyeColor): void;
 getColor(): DyeColor;
 toUpdatePacket(): BlockEntityUpdateS2CPacket;
 toUpdatePacket(): Packet;
}

//net.minecraft.block.entity.CampfireBlockEntity
class CampfireBlockEntity extends BlockEntity, Clearable{
 clear(): void;
 addItem(user: Entity,stack: ItemStack,cookTime: number): boolean;
 toInitialChunkDataNbt(): NbtCompound;
 getItemsBeingCooked(): DefaultedList;
 getRecipeFor(stack: ItemStack): Optional;
 readNbt(nbt: NbtCompound): void;
 toUpdatePacket(): Packet;
 toUpdatePacket(): BlockEntityUpdateS2CPacket;
 spawnItemsBeingCooked(): void;
}
class Static_CampfireBlockEntity {
static clientTick(world: World,pos: BlockPos,state: BlockState,campfire: CampfireBlockEntity): void;
static unlitServerTick(world: World,pos: BlockPos,state: BlockState,campfire: CampfireBlockEntity): void;
static litServerTick(world: World,pos: BlockPos,state: BlockState,campfire: CampfireBlockEntity): void;
static method_17504(inventory: Inventory,world: World,recipe: CampfireCookingRecipe): ItemStack;
static field_31330: number;
static field_31331: number;
}

//net.minecraft.block.entity.ConduitBlockEntity
class ConduitBlockEntity extends BlockEntity{
 isActive(): boolean;
 toInitialChunkDataNbt(): NbtCompound;
 isEyeOpen(): boolean;
 getRotation(tickDelta: number): number;
 readNbt(nbt: NbtCompound): void;
 toUpdatePacket(): Packet;
 toUpdatePacket(): BlockEntityUpdateS2CPacket;
 ticks: number;
}
class Static_ConduitBlockEntity {
static serverTick(world: World,pos: BlockPos,state: BlockState,blockEntity: ConduitBlockEntity): void;
static clientTick(world: World,pos: BlockPos,state: BlockState,blockEntity: ConduitBlockEntity): void;
static updateActivatingBlocks(world: World,pos: BlockPos,activatingBlocks: List): boolean;
static spawnNautilusParticles(world: World,pos: BlockPos,activatingBlocks: List,entity: Entity,ticks: number): void;
static attackHostileEntity(world: World,pos: BlockPos,state: BlockState,activatingBlocks: List,blockEntity: ConduitBlockEntity): void;
static givePlayersEffects(world: World,pos: BlockPos,activatingBlocks: List): void;
static getAttackZone(pos: BlockPos): Box;
static method_11060(entity: LivingEntity): boolean;
static method_11058(uUID: UUID,entity: LivingEntity): boolean;
static findTargetEntity(world: World,pos: BlockPos,uuid: UUID): LivingEntity;
static updateTargetEntity(world: World,pos: BlockPos,blockEntity: ConduitBlockEntity): void;
static openEye(blockEntity: ConduitBlockEntity,activatingBlocks: List): void;
static field_31333: number;
static field_31334: number;
static field_31335: number;
static field_31336: number;
static MIN_BLOCKS_TO_ACTIVATE: number;
static field_31338: number;
static ACTIVATING_BLOCKS: Block[];
}

//net.minecraft.block.entity.ComparatorBlockEntity
class ComparatorBlockEntity extends BlockEntity{
 readNbt(nbt: NbtCompound): void;
 getOutputSignal(): number;
 setOutputSignal(outputSignal: number): void;
}

//net.minecraft.block.entity.CommandBlockBlockEntity
class CommandBlockBlockEntity extends BlockEntity{
 getCommandBlockType(): CommandBlockBlockEntity_Type;
 getCommandExecutor(): CommandBlockExecutor;
 updateCommandBlock(): void;
 setAuto(auto: boolean): void;
 readNbt(nbt: NbtCompound): void;
 updateConditionMet(): boolean;
 isConditionMet(): boolean;
 isPowered(): boolean;
 setPowered(powered: boolean): void;
 isAuto(): boolean;
 copyItemDataRequiresOperator(): boolean;
 isConditionalCommandBlock(): boolean;
}

//net.minecraft.block.entity.SignBlockEntity
class SignBlockEntity extends BlockEntity{
 getText(front: boolean): SignText;
 setText(text: SignText,front: boolean): boolean;
 getFrontText(): SignText;
 getMaxTextWidth(): number;
 getTextLineHeight(): number;
 getBackText(): SignText;
 toInitialChunkDataNbt(): NbtCompound;
 isWaxed(): boolean;
 setEditor(editor: UUID): void;
 getEditor(): UUID;
 tryChangeText(player: PlayerEntity,front: boolean,messages: List): void;
 readNbt(nbt: NbtCompound): void;
 toUpdatePacket(): BlockEntityUpdateS2CPacket;
 toUpdatePacket(): Packet;
 copyItemDataRequiresOperator(): boolean;
 isPlayerFacingFront(player: PlayerEntity): boolean;
 runCommandClickEvent(player: PlayerEntity,world: World,pos: BlockPos,front: boolean): boolean;
 canRunCommandClickEvent(front: boolean,player: PlayerEntity): boolean;
 isPlayerTooFarToEdit(uuid: UUID): boolean;
 changeText(textChanger: UnaryOperator,front: boolean): boolean;
 getTextFacing(player: PlayerEntity): SignText;
 setWaxed(waxed: boolean): boolean;
}
class Static_SignBlockEntity {
static tick(world: World,pos: BlockPos,state: BlockState,blockEntity: SignBlockEntity): void;
static createCommandSource(player: PlayerEntity,world: World,pos: BlockPos): ServerCommandSource;
static method_49842(nbtCompound: NbtCompound,backText: NbtElement): void;
static method_49848(nbtCompound: NbtCompound,frontText: NbtElement): void;
static LOGGER: Logger;
static MAX_TEXT_WIDTH: number;
static TEXT_LINE_HEIGHT: number;
}

//net.minecraft.block.entity.ChiseledBookshelfBlockEntity
class ChiseledBookshelfBlockEntity extends BlockEntity, Inventory{
 clear(): void;
 isEmpty(): boolean;
 size(): number;
 getStack(slot: number): ItemStack;
 isValid(slot: number,stack: ItemStack): boolean;
 setStack(slot: number,stack: ItemStack): void;
 removeStack(slot: number,amount: number): ItemStack;
 removeStack(slot: number): ItemStack;
 getMaxCountPerStack(): number;
 readNbt(nbt: NbtCompound): void;
 canPlayerUse(player: PlayerEntity): boolean;
 canTransferTo(hopperInventory: Inventory,slot: number,stack: ItemStack): boolean;
 getLastInteractedSlot(): number;
 getOpenSlotCount(): number;
}
class Static_ChiseledBookshelfBlockEntity {
static method_51356(itemStack: ItemStack,inventory: Inventory,itemStack2: ItemStack): boolean;
static MAX_BOOKS: number;
static LOGGER: Logger;
}

//net.minecraft.block.entity.StructureBlockBlockEntity
class StructureBlockBlockEntity extends BlockEntity{
 getSize(): Vec3i;
 getOffset(): BlockPos;
 setOffset(offset: BlockPos): void;
 setSize(size: Vec3i): void;
 setSeed(seed: long): void;
 getSeed(): long;
 place(world: ServerWorld,interactive: boolean,template: StructureTemplate): boolean;
 isStructureAvailable(): boolean;
 shouldIgnoreEntities(): boolean;
 detectStructureSize(): boolean;
 setMode(mode: StructureBlockMode): void;
 getMode(): StructureBlockMode;
 toInitialChunkDataNbt(): NbtCompound;
 shouldShowBoundingBox(): boolean;
 getStructurePath(): string;
 getMetadata(): string;
 hasStructureName(): boolean;
 setIgnoreEntities(ignoreEntities: boolean): void;
 setShowBoundingBox(showBoundingBox: boolean): void;
 setShowAir(showAir: boolean): void;
 getIntegrity(): number;
 setMirror(mirror: BlockMirror): void;
 loadStructure(world: ServerWorld): boolean;
 loadStructure(world: ServerWorld,interactive: boolean): boolean;
 setTemplateName(templateName: Identifier): void;
 setTemplateName(templateName: string): void;
 saveStructure(): boolean;
 saveStructure(interactive: boolean): boolean;
 setMetadata(metadata: string): void;
 setIntegrity(integrity: number): void;
 getTemplateName(): string;
 setRotation(rotation: BlockRotation): void;
 setAuthor(entity: LivingEntity): void;
 getMirror(): BlockMirror;
 getRotation(): BlockRotation;
 shouldShowAir(): boolean;
 readNbt(nbt: NbtCompound): void;
 toUpdatePacket(): Packet;
 toUpdatePacket(): BlockEntityUpdateS2CPacket;
 unloadStructure(): void;
 openScreen(player: PlayerEntity): boolean;
 isPowered(): boolean;
 setPowered(powered: boolean): void;
}
class Static_StructureBlockBlockEntity {
static createRandom(seed: long): Random;
static getStructureBox(pos: BlockPos,corners: Stream): Optional;
static method_34273(blockEntity: BlockEntity): StructureBlockBlockEntity;
static method_34278(blockEntity: BlockEntity): boolean;
static setStructureVoid(world: ServerWorld,pos: BlockPos): void;
static field_31367: number;
static field_31364: number;
static field_31365: number;
static AUTHOR_KEY: string;
}

//net.minecraft.block.entity.BrushableBlockEntity
class BrushableBlockEntity extends BlockEntity{
 getItem(): ItemStack;
 setLootTable(lootTable: Identifier,seed: long): void;
 brush(worldTime: long,player: PlayerEntity,hitDirection: Direction): boolean;
 toInitialChunkDataNbt(): NbtCompound;
 scheduledTick(): void;
 readNbt(nbt: NbtCompound): void;
 getHitDirection(): Direction;
 toUpdatePacket(): Packet;
 toUpdatePacket(): BlockEntityUpdateS2CPacket;
 generateItem(player: PlayerEntity): void;
}
class Static_BrushableBlockEntity {
static field_42801: Logger;
static LOOT_TABLE_NBT_KEY: string;
static LOOT_TABLE_SEED_NBT_KEY: string;
static HIT_DIRECTION_NBT_KEY: string;
static ITEM_NBT_KEY: string;
static field_42806: number;
static field_42807: number;
static field_42808: number;
}

//net.minecraft.block.entity.BeehiveBlockEntity
class BeehiveBlockEntity extends BlockEntity{
 addBee(nbtCompound: NbtCompound,ticksInHive: number,hasNectar: boolean): void;
 markDirty(): void;
 readNbt(nbt: NbtCompound): void;
 isNearFire(): boolean;
 isFullOfBees(): boolean;
 tryEnterHive(entity: Entity,hasNectar: boolean): void;
 tryEnterHive(entity: Entity,hasNectar: boolean,ticksInHive: number): void;
 hasNoBees(): boolean;
 getBeeCount(): number;
 angerBees(player: PlayerEntity,state: BlockState,beeState: BeehiveBlockEntity_BeeState): void;
 isSmoked(): boolean;
 getBees(): NbtList;
}
class Static_BeehiveBlockEntity {
static removeIrrelevantNbtKeys(compound: NbtCompound): void;
static serverTick(world: World,pos: BlockPos,state: BlockState,blockEntity: BeehiveBlockEntity): void;
static getHoneyLevel(state: BlockState): number;
static releaseBee(world: World,pos: BlockPos,state: BlockState,bee: BeehiveBlockEntity_Bee,entities: List,beeState: BeehiveBlockEntity_BeeState,flowerPos: BlockPos): boolean;
static ageBee(ticks: number,bee: BeeEntity): void;
static method_40019(statex: AbstractBlock_AbstractBlockState): boolean;
static method_23901(entity: Entity): Entity;
static tickBees(world: World,pos: BlockPos,state: BlockState,bees: List,flowerPos: BlockPos): void;
static FLOWER_POS_KEY: string;
static MIN_OCCUPATION_TICKS_KEY: string;
static ENTITY_DATA_KEY: string;
static TICKS_IN_HIVE_KEY: string;
static HAS_NECTAR_KEY: string;
static BEES_KEY: string;
static IRRELEVANT_BEE_NBT_KEYS: List;
static MAX_BEE_COUNT: number;
static ANGERED_CANNOT_ENTER_HIVE_TICKS: number;
static MIN_OCCUPATION_TICKS_WITH_NECTAR: number;
static MIN_OCCUPATION_TICKS_WITHOUT_NECTAR: number;
}

//net.minecraft.block.entity.EndPortalBlockEntity
class EndPortalBlockEntity extends BlockEntity{
 shouldDrawSide(direction: Direction): boolean;
}

//net.minecraft.block.entity.SculkCatalystBlockEntity
class SculkCatalystBlockEntity extends BlockEntity, GameEventListener_Holder{
 getEventListener(): GameEventListener;
 getEventListener(): SculkCatalystBlockEntity_Listener;
 readNbt(nbt: NbtCompound): void;
}
class Static_SculkCatalystBlockEntity {
static tick(world: World,pos: BlockPos,state: BlockState,blockEntity: SculkCatalystBlockEntity): void;
}

//net.minecraft.block.entity.SculkSensorBlockEntity
class SculkSensorBlockEntity extends BlockEntity, GameEventListener_Holder, Vibrations{
 getVibrationListenerData(): Vibrations_ListenerData;
 getVibrationCallback(): Vibrations_Callback;
 getEventListener(): GameEventListener;
 getEventListener(): Vibrations_VibrationListener;
 readNbt(nbt: NbtCompound): void;
 getLastVibrationFrequency(): number;
 setLastVibrationFrequency(lastVibrationFrequency: number): void;
 createCallback(): Vibrations_Callback;
}
class Static_SculkSensorBlockEntity {
static method_42321(nbtCompound: NbtCompound,listenerNbt: NbtElement): void;
static LOGGER: Logger;
}

//net.minecraft.block.entity.JigsawBlockEntity
class JigsawBlockEntity extends BlockEntity{
 getName(): Identifier;
 setName(name: Identifier): void;
 getTarget(): Identifier;
 setTarget(target: Identifier): void;
 generate(world: ServerWorld,maxDepth: number,keepJigsaws: boolean): void;
 getPool(): RegistryKey;
 toInitialChunkDataNbt(): NbtCompound;
 setPool(pool: RegistryKey): void;
 setFinalState(finalState: string): void;
 setJoint(joint: JigsawBlockEntity_Joint): void;
 getFinalState(): string;
 readNbt(nbt: NbtCompound): void;
 toUpdatePacket(): BlockEntityUpdateS2CPacket;
 toUpdatePacket(): Packet;
 getJoint(): JigsawBlockEntity_Joint;
}
class Static_JigsawBlockEntity {
static TARGET_KEY: string;
static POOL_KEY: string;
static JOINT_KEY: string;
static NAME_KEY: string;
static FINAL_STATE_KEY: string;
}

//net.minecraft.block.entity.MobSpawnerBlockEntity
class MobSpawnerBlockEntity extends BlockEntity{
 setEntityType(entityType: EntityType,random: Random): void;
 toInitialChunkDataNbt(): NbtCompound;
 onSyncedBlockEvent(type: number,data: number): boolean;
 readNbt(nbt: NbtCompound): void;
 toUpdatePacket(): Packet;
 toUpdatePacket(): BlockEntityUpdateS2CPacket;
 getLogic(): MobSpawnerLogic;
 copyItemDataRequiresOperator(): boolean;
}
class Static_MobSpawnerBlockEntity {
static serverTick(world: World,pos: BlockPos,state: BlockState,blockEntity: MobSpawnerBlockEntity): void;
static clientTick(world: World,pos: BlockPos,state: BlockState,blockEntity: MobSpawnerBlockEntity): void;
}

//net.minecraft.block.entity.SkullBlockEntity
class SkullBlockEntity extends BlockEntity{
 getOwner(): GameProfile;
 setOwner(owner: GameProfile): void;
 getPoweredTicks(tickDelta: number): number;
 toInitialChunkDataNbt(): NbtCompound;
 readNbt(nbt: NbtCompound): void;
 toUpdatePacket(): BlockEntityUpdateS2CPacket;
 toUpdatePacket(): Packet;
 getNoteBlockSound(): Identifier;
}
class Static_SkullBlockEntity {
static tick(world: World,pos: BlockPos,state: BlockState,blockEntity: SkullBlockEntity): void;
static loadProperties(owner: GameProfile,callback: Consumer): void;
static clearServices(): void;
static method_37468(consumer: Consumer,gameProfile: GameProfile,profile: Optional): void;
static method_37466(optional: Optional,consumer: Consumer,gameProfile: GameProfile): void;
static setServices(apiServices: ApiServices,executor: Executor): void;
static method_37467(consumer: Consumer,gameProfile: GameProfile): void;
static method_37469(consumer: Consumer,profilex: GameProfile): void;
static method_37248(consumer: Consumer,profile: GameProfile): void;
static method_37430(gameProfile: GameProfile,consumer: Consumer): void;
static SKULL_OWNER_KEY: string;
static NOTE_BLOCK_SOUND_KEY: string;
static userCache: UserCache;
static sessionService: MinecraftSessionService;
static executor: Executor;
}

//net.minecraft.block.entity.EnchantingTableBlockEntity
class EnchantingTableBlockEntity extends BlockEntity, Nameable{
 getName(): Text;
 getCustomName(): Text;
 setCustomName(customName: Text): void;
 readNbt(nbt: NbtCompound): void;
 ticks: number;
 nextPageAngle: number;
 pageAngle: number;
 flipRandom: number;
 flipTurn: number;
 nextPageTurningSpeed: number;
 pageTurningSpeed: number;
 bookRotation: number;
 lastBookRotation: number;
 targetBookRotation: number;
}
class Static_EnchantingTableBlockEntity {
static tick(world: World,pos: BlockPos,state: BlockState,blockEntity: EnchantingTableBlockEntity): void;
static RANDOM: Random;
}

//net.minecraft.block.entity.BellBlockEntity
class BellBlockEntity extends BlockEntity{
 onSyncedBlockEvent(type: number,data: number): boolean;
 activate(direction: Direction): void;
 ringTicks: number;
 ringing: boolean;
 lastSideHit: Direction;
}
class Static_BellBlockEntity {
static tick(world: World,pos: BlockPos,state: BlockState,blockEntity: BellBlockEntity,bellEffect: BellBlockEntity_Effect): void;
static serverTick(world: World,pos: BlockPos,state: BlockState,blockEntity: BellBlockEntity): void;
static clientTick(world: World,pos: BlockPos,state: BlockState,blockEntity: BellBlockEntity): void;
static applyParticlesToRaiders(world: World,pos: BlockPos,hearingEntities: List): void;
static method_31660(blockPos: BlockPos,entity: LivingEntity): boolean;
static raidersHearBell(pos: BlockPos,hearingEntities: List): boolean;
static isRaiderEntity(pos: BlockPos,entity: LivingEntity): boolean;
static method_20217(blockPos: BlockPos,entity: LivingEntity): boolean;
static method_20519(blockPos: BlockPos,i: number,mutableInt: MutableInt,world: World,entity: LivingEntity): void;
static applyGlowToRaiders(world: World,pos: BlockPos,hearingEntities: List): void;
static method_31661(blockPos: BlockPos,entity: LivingEntity): boolean;
static applyGlowToEntity(entity: LivingEntity): void;
static MAX_RINGING_TICKS: number;
static field_31317: number;
static field_31318: number;
static MAX_RESONATING_TICKS: number;
static field_31320: number;
static field_31321: number;
static MAX_BELL_HEARING_DISTANCE: number;
static field_31323: number;
}

//net.minecraft.block.entity.DecoratedPotBlockEntity
class DecoratedPotBlockEntity extends BlockEntity{
 getSherds(): DecoratedPotBlockEntity_Sherds;
 toInitialChunkDataNbt(): NbtCompound;
 readNbtFromStack(stack: ItemStack): void;
 getHorizontalFacing(): Direction;
 readNbt(nbt: NbtCompound): void;
 toUpdatePacket(): Packet;
 toUpdatePacket(): BlockEntityUpdateS2CPacket;
}
class Static_DecoratedPotBlockEntity {
static SHERDS_NBT_KEY: string;
}

//net.minecraft.block.entity.SculkShriekerBlockEntity
class SculkShriekerBlockEntity extends BlockEntity, GameEventListener_Holder, Vibrations{
 warn(world: ServerWorld): void;
 shriek(world: ServerWorld,player: ServerPlayerEntity): void;
 getVibrationListenerData(): Vibrations_ListenerData;
 getVibrationCallback(): Vibrations_Callback;
 getEventListener(): Vibrations_VibrationListener;
 getEventListener(): GameEventListener;
 readNbt(nbt: NbtCompound): void;
}
class Static_SculkShriekerBlockEntity {
static findResponsiblePlayerFromEntity(entity: Entity): ServerPlayerEntity;
static method_43146(warningSounds: Int2ObjectOpenHashMap): void;
static method_42323(nbtCompound: NbtCompound,nbtElement: NbtElement): void;
static LOGGER: Logger;
static field_38750: number;
static WARDEN_SPAWN_TRIES: number;
static WARDEN_SPAWN_HORIZONTAL_RANGE: number;
static WARDEN_SPAWN_VERTICAL_RANGE: number;
static DARKNESS_RANGE: number;
static SHRIEK_DELAY: number;
static WARNING_SOUNDS: Int2ObjectMap;
}

//net.minecraft.block.entity.BannerBlockEntity
class BannerBlockEntity extends BlockEntity, Nameable{
 getName(): Text;
 readFrom(stack: ItemStack,baseColor: DyeColor): void;
 readFrom(stack: ItemStack): void;
 getColorForState(): DyeColor;
 toInitialChunkDataNbt(): NbtCompound;
 getCustomName(): Text;
 setCustomName(customName: Text): void;
 getPatterns(): List;
 readNbt(nbt: NbtCompound): void;
 toUpdatePacket(): Packet;
 toUpdatePacket(): BlockEntityUpdateS2CPacket;
 getPickStack(): ItemStack;
}
class Static_BannerBlockEntity {
static getPatternCount(stack: ItemStack): number;
static loadFromItemStack(stack: ItemStack): void;
static getPatternListNbt(stack: ItemStack): NbtList;
static getPatternsFromNbt(baseColor: DyeColor,patternListNbt: NbtList): List;
static MAX_PATTERN_COUNT: number;
static PATTERNS_KEY: string;
static PATTERN_KEY: string;
static COLOR_KEY: string;
}

//net.minecraft.block.entity.DaylightDetectorBlockEntity
class DaylightDetectorBlockEntity extends BlockEntity{
}

//net.minecraft.block.CaveVinesHeadBlock
class CaveVinesHeadBlock extends AbstractPlantStemBlock, Fertilizable, CaveVines{
 grow(world: ServerWorld,random: Random,pos: BlockPos,state: BlockState): void;
 canGrow(world: World,random: Random,pos: BlockPos,state: BlockState): boolean;
 onUse(state: BlockState,world: World,pos: BlockPos,player: PlayerEntity,hand: Hand,hit: BlockHitResult): ActionResult;
 isFertilizable(world: WorldView,pos: BlockPos,state: BlockState,isClient: boolean): boolean;
 getPickStack(world: BlockView,pos: BlockPos,state: BlockState): ItemStack;
}
class Static_CaveVinesHeadBlock {
static GROW_CHANCE: number;
}

//net.minecraft.block.CaveVinesBodyBlock
class CaveVinesBodyBlock extends AbstractPlantBlock, Fertilizable, CaveVines{
 grow(world: ServerWorld,random: Random,pos: BlockPos,state: BlockState): void;
 canGrow(world: World,random: Random,pos: BlockPos,state: BlockState): boolean;
 onUse(state: BlockState,world: World,pos: BlockPos,player: PlayerEntity,hand: Hand,hit: BlockHitResult): ActionResult;
 isFertilizable(world: WorldView,pos: BlockPos,state: BlockState,isClient: boolean): boolean;
 getPickStack(world: BlockView,pos: BlockPos,state: BlockState): ItemStack;
}

//net.minecraft.world.biome.GenerationSettings$LookupBackedBuilder
class GenerationSettings_LookupBackedBuilder extends GenerationSettings_Builder{
 feature(featureStep: GenerationStep_Feature,featureKey: RegistryKey): GenerationSettings_LookupBackedBuilder;
 carver(carverStep: GenerationStep_Carver,carverKey: RegistryKey): GenerationSettings_LookupBackedBuilder;
}

//net.minecraft.registry.entry.RegistryEntry$Direct
class RegistryEntry_Direct extends Record, RegistryEntry{
 value(): Object;
 equals(object: Object): boolean;
 toString(): string;
 hashCode(): number;
 matches(predicate: Predicate): boolean;
 getKey(): Optional;
 getType(): RegistryEntry_Type;
 matchesKey(key: RegistryKey): boolean;
 isIn(tag: TagKey): boolean;
 streamTags(): Stream;
 ownerEquals(owner: RegistryEntryOwner): boolean;
 getKeyOrValue(): Either;
 hasKeyAndValue(): boolean;
 matchesId(id: Identifier): boolean;
}

//net.minecraft.block.AzaleaBlock
class AzaleaBlock extends PlantBlock, Fertilizable{
 grow(world: ServerWorld,random: Random,pos: BlockPos,state: BlockState): void;
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 canGrow(world: World,random: Random,pos: BlockPos,state: BlockState): boolean;
 isFertilizable(world: WorldView,pos: BlockPos,state: BlockState,isClient: boolean): boolean;
}
class Static_AzaleaBlock {
static GENERATOR: AzaleaSaplingGenerator;
static SHAPE: VoxelShape;
}

//net.minecraft.block.MushroomPlantBlock
class MushroomPlantBlock extends PlantBlock, Fertilizable{
 grow(world: ServerWorld,random: Random,pos: BlockPos,state: BlockState): void;
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 canPlaceAt(state: BlockState,world: WorldView,pos: BlockPos): boolean;
 randomTick(state: BlockState,world: ServerWorld,pos: BlockPos,random: Random): void;
 canGrow(world: World,random: Random,pos: BlockPos,state: BlockState): boolean;
 isFertilizable(world: WorldView,pos: BlockPos,state: BlockState,isClient: boolean): boolean;
 trySpawningBigMushroom(world: ServerWorld,pos: BlockPos,state: BlockState,random: Random): boolean;
}
class Static_MushroomPlantBlock {
static field_31195: number;
static SHAPE: VoxelShape;
}

//net.minecraft.block.NetherrackBlock
class NetherrackBlock extends Block, Fertilizable{
 grow(world: ServerWorld,random: Random,pos: BlockPos,state: BlockState): void;
 canGrow(world: World,random: Random,pos: BlockPos,state: BlockState): boolean;
 isFertilizable(world: WorldView,pos: BlockPos,state: BlockState,isClient: boolean): boolean;
}

//net.minecraft.block.RootedDirtBlock
class RootedDirtBlock extends Block, Fertilizable{
 grow(world: ServerWorld,random: Random,pos: BlockPos,state: BlockState): void;
 canGrow(world: World,random: Random,pos: BlockPos,state: BlockState): boolean;
 isFertilizable(world: WorldView,pos: BlockPos,state: BlockState,isClient: boolean): boolean;
}

//net.minecraft.block.CropBlock
class CropBlock extends PlantBlock, Fertilizable{
 grow(world: ServerWorld,random: Random,pos: BlockPos,state: BlockState): void;
 getMaxAge(): number;
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 getAge(state: BlockState): number;
 canPlaceAt(state: BlockState,world: WorldView,pos: BlockPos): boolean;
 hasRandomTicks(state: BlockState): boolean;
 onEntityCollision(state: BlockState,world: World,pos: BlockPos,entity: Entity): void;
 randomTick(state: BlockState,world: ServerWorld,pos: BlockPos,random: Random): void;
 canGrow(world: World,random: Random,pos: BlockPos,state: BlockState): boolean;
 isFertilizable(world: WorldView,pos: BlockPos,state: BlockState,isClient: boolean): boolean;
 getPickStack(world: BlockView,pos: BlockPos,state: BlockState): ItemStack;
 withAge(age: number): BlockState;
 applyGrowth(world: World,pos: BlockPos,state: BlockState): void;
 isMature(blockState: BlockState): boolean;
}
class Static_CropBlock {
static getAvailableMoisture(block: Block,world: BlockView,pos: BlockPos): number;
static MAX_AGE: number;
static AGE: IntProperty;
static AGE_TO_SHAPE: VoxelShape[];
}

//net.minecraft.block.CocoaBlock
class CocoaBlock extends HorizontalFacingBlock, Fertilizable{
 grow(world: ServerWorld,random: Random,pos: BlockPos,state: BlockState): void;
 getStateForNeighborUpdate(state: BlockState,direction: Direction,neighborState: BlockState,world: WorldAccess,pos: BlockPos,neighborPos: BlockPos): BlockState;
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 canPlaceAt(state: BlockState,world: WorldView,pos: BlockPos): boolean;
 hasRandomTicks(state: BlockState): boolean;
 canPathfindThrough(state: BlockState,world: BlockView,pos: BlockPos,type: NavigationType): boolean;
 randomTick(state: BlockState,world: ServerWorld,pos: BlockPos,random: Random): void;
 canGrow(world: World,random: Random,pos: BlockPos,state: BlockState): boolean;
 isFertilizable(world: WorldView,pos: BlockPos,state: BlockState,isClient: boolean): boolean;
 getPlacementState(ctx: ItemPlacementContext): BlockState;
}
class Static_CocoaBlock {
static MAX_AGE: number;
static AGE: IntProperty;
static field_31062: number;
static field_31063: number;
static field_31064: number;
static field_31065: number;
static field_31066: number;
static field_31067: number;
static field_31068: number;
static field_31069: number;
static field_31070: number;
static AGE_TO_EAST_SHAPE: VoxelShape[];
static AGE_TO_WEST_SHAPE: VoxelShape[];
static AGE_TO_NORTH_SHAPE: VoxelShape[];
static AGE_TO_SOUTH_SHAPE: VoxelShape[];
}

//net.minecraft.block.FernBlock
class FernBlock extends PlantBlock, Fertilizable{
 grow(world: ServerWorld,random: Random,pos: BlockPos,state: BlockState): void;
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 canGrow(world: World,random: Random,pos: BlockPos,state: BlockState): boolean;
 isFertilizable(world: WorldView,pos: BlockPos,state: BlockState,isClient: boolean): boolean;
}
class Static_FernBlock {
static field_31261: number;
static SHAPE: VoxelShape;
}

//net.minecraft.block.GrassBlock
class GrassBlock extends SpreadableBlock, Fertilizable{
 grow(world: ServerWorld,random: Random,pos: BlockPos,state: BlockState): void;
 canGrow(world: World,random: Random,pos: BlockPos,state: BlockState): boolean;
 isFertilizable(world: WorldView,pos: BlockPos,state: BlockState,isClient: boolean): boolean;
}

//net.minecraft.block.MossBlock
class MossBlock extends Block, Fertilizable{
 grow(world: ServerWorld,random: Random,pos: BlockPos,state: BlockState): void;
 canGrow(world: World,random: Random,pos: BlockPos,state: BlockState): boolean;
 isFertilizable(world: WorldView,pos: BlockPos,state: BlockState,isClient: boolean): boolean;
}
class Static_MossBlock {
static method_46684(serverWorld: ServerWorld,random: Random,blockPos: BlockPos,reference: RegistryEntry_Reference): void;
static method_46685(registry: Registry): Optional;
}

//net.minecraft.block.StemBlock
class StemBlock extends PlantBlock, Fertilizable{
 grow(world: ServerWorld,random: Random,pos: BlockPos,state: BlockState): void;
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 randomTick(state: BlockState,world: ServerWorld,pos: BlockPos,random: Random): void;
 canGrow(world: World,random: Random,pos: BlockPos,state: BlockState): boolean;
 isFertilizable(world: WorldView,pos: BlockPos,state: BlockState,isClient: boolean): boolean;
 getPickStack(world: BlockView,pos: BlockPos,state: BlockState): ItemStack;
 getGourdBlock(): GourdBlock;
}
class Static_StemBlock {
static MAX_AGE: number;
static AGE: IntProperty;
static field_31256: number;
static AGE_TO_SHAPE: VoxelShape[];
}

//net.minecraft.block.SaplingBlock
class SaplingBlock extends PlantBlock, Fertilizable{
 grow(world: ServerWorld,random: Random,pos: BlockPos,state: BlockState): void;
 generate(world: ServerWorld,pos: BlockPos,state: BlockState,random: Random): void;
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 randomTick(state: BlockState,world: ServerWorld,pos: BlockPos,random: Random): void;
 canGrow(world: World,random: Random,pos: BlockPos,state: BlockState): boolean;
 isFertilizable(world: WorldView,pos: BlockPos,state: BlockState,isClient: boolean): boolean;
}
class Static_SaplingBlock {
static STAGE: IntProperty;
static field_31236: number;
static SHAPE: VoxelShape;
}

//net.minecraft.block.AbstractPlantStemBlock
class AbstractPlantStemBlock extends AbstractPlantPartBlock, Fertilizable{
 grow(world: ServerWorld,random: Random,pos: BlockPos,state: BlockState): void;
 getStateForNeighborUpdate(state: BlockState,direction: Direction,neighborState: BlockState,world: WorldAccess,pos: BlockPos,neighborPos: BlockPos): BlockState;
 hasRandomTicks(state: BlockState): boolean;
 randomTick(state: BlockState,world: ServerWorld,pos: BlockPos,random: Random): void;
 canGrow(world: World,random: Random,pos: BlockPos,state: BlockState): boolean;
 isFertilizable(world: WorldView,pos: BlockPos,state: BlockState,isClient: boolean): boolean;
 getRandomGrowthState(world: WorldAccess): BlockState;
 withMaxAge(state: BlockState): BlockState;
 hasMaxAge(state: BlockState): boolean;
}
class Static_AbstractPlantStemBlock {
static AGE: IntProperty;
static MAX_AGE: number;
}

//net.minecraft.block.NyliumBlock
class NyliumBlock extends Block, Fertilizable{
 grow(world: ServerWorld,random: Random,pos: BlockPos,state: BlockState): void;
 randomTick(state: BlockState,world: ServerWorld,pos: BlockPos,random: Random): void;
 canGrow(world: World,random: Random,pos: BlockPos,state: BlockState): boolean;
 isFertilizable(world: WorldView,pos: BlockPos,state: BlockState,isClient: boolean): boolean;
}
class Static_NyliumBlock {
static stayAlive(state: BlockState,world: WorldView,pos: BlockPos): boolean;
static method_46686(serverWorld: ServerWorld,chunkGenerator: ChunkGenerator,random: Random,blockPos: BlockPos,entry: RegistryEntry_Reference): void;
}

//net.minecraft.block.MangroveLeavesBlock
class MangroveLeavesBlock extends LeavesBlock, Fertilizable{
 grow(world: ServerWorld,random: Random,pos: BlockPos,state: BlockState): void;
 canGrow(world: World,random: Random,pos: BlockPos,state: BlockState): boolean;
 isFertilizable(world: WorldView,pos: BlockPos,state: BlockState,isClient: boolean): boolean;
}

//net.minecraft.block.BambooSaplingBlock
class BambooSaplingBlock extends Block, Fertilizable{
 grow(world: ServerWorld,random: Random,pos: BlockPos,state: BlockState): void;
 getStateForNeighborUpdate(state: BlockState,direction: Direction,neighborState: BlockState,world: WorldAccess,pos: BlockPos,neighborPos: BlockPos): BlockState;
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 canPlaceAt(state: BlockState,world: WorldView,pos: BlockPos): boolean;
 randomTick(state: BlockState,world: ServerWorld,pos: BlockPos,random: Random): void;
 canGrow(world: World,random: Random,pos: BlockPos,state: BlockState): boolean;
 calcBlockBreakingDelta(state: BlockState,player: PlayerEntity,world: BlockView,pos: BlockPos): number;
 isFertilizable(world: WorldView,pos: BlockPos,state: BlockState,isClient: boolean): boolean;
 getPickStack(world: BlockView,pos: BlockPos,state: BlockState): ItemStack;
}
class Static_BambooSaplingBlock {
static field_31005: number;
static SHAPE: VoxelShape;
}

//net.minecraft.block.FungusBlock
class FungusBlock extends PlantBlock, Fertilizable{
 grow(world: ServerWorld,random: Random,pos: BlockPos,state: BlockState): void;
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 canGrow(world: World,random: Random,pos: BlockPos,state: BlockState): boolean;
 isFertilizable(world: WorldView,pos: BlockPos,state: BlockState,isClient: boolean): boolean;
}
class Static_FungusBlock {
static method_46682(serverWorld: ServerWorld,random: Random,blockPos: BlockPos,featureEntry: RegistryEntry): void;
static SHAPE: VoxelShape;
static GROW_CHANCE: number;
}

//net.minecraft.block.SeagrassBlock
class SeagrassBlock extends PlantBlock, Fertilizable, FluidFillable{
 grow(world: ServerWorld,random: Random,pos: BlockPos,state: BlockState): void;
 getStateForNeighborUpdate(state: BlockState,direction: Direction,neighborState: BlockState,world: WorldAccess,pos: BlockPos,neighborPos: BlockPos): BlockState;
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 canFillWithFluid(world: BlockView,pos: BlockPos,state: BlockState,fluid: Fluid): boolean;
 tryFillWithFluid(world: WorldAccess,pos: BlockPos,state: BlockState,fluidState: FluidState): boolean;
 getFluidState(state: BlockState): FluidState;
 canGrow(world: World,random: Random,pos: BlockPos,state: BlockState): boolean;
 isFertilizable(world: WorldView,pos: BlockPos,state: BlockState,isClient: boolean): boolean;
 getPlacementState(ctx: ItemPlacementContext): BlockState;
}
class Static_SeagrassBlock {
static field_31242: number;
static SHAPE: VoxelShape;
}

//net.minecraft.block.PitcherCropBlock
class PitcherCropBlock extends TallPlantBlock, Fertilizable{
 grow(world: ServerWorld,random: Random,pos: BlockPos,state: BlockState): void;
 getStateForNeighborUpdate(state: BlockState,direction: Direction,neighborState: BlockState,world: WorldAccess,pos: BlockPos,neighborPos: BlockPos): BlockState;
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 canPlaceAt(state: BlockState,world: WorldView,pos: BlockPos): boolean;
 hasRandomTicks(state: BlockState): boolean;
 canReplace(state: BlockState,context: ItemPlacementContext): boolean;
 onEntityCollision(state: BlockState,world: World,pos: BlockPos,entity: Entity): void;
 randomTick(state: BlockState,world: ServerWorld,pos: BlockPos,random: Random): void;
 canGrow(world: World,random: Random,pos: BlockPos,state: BlockState): boolean;
 getCollisionShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 isFertilizable(world: WorldView,pos: BlockPos,state: BlockState,isClient: boolean): boolean;
 getPlacementState(ctx: ItemPlacementContext): BlockState;
 onPlaced(world: World,pos: BlockPos,state: BlockState,placer: LivingEntity,itemStack: ItemStack): void;
}
class Static_PitcherCropBlock {
static canPlaceAt(world: WorldView,pos: BlockPos): boolean;
static isLowerHalf(state: BlockState): boolean;
static isUpperHalf(state: BlockState): boolean;
static canGrowAt(world: WorldView,pos: BlockPos): boolean;
static AGE: IntProperty;
static field_43240: number;
static field_43241: number;
static field_43391: number;
static GROWN_UPPER_OUTLINE_SHAPE: VoxelShape;
static GROWN_LOWER_OUTLINE_SHAPE: VoxelShape;
static AGE_0_SHAPE: VoxelShape;
static LOWER_COLLISION_SHAPE: VoxelShape;
static UPPER_OUTLINE_SHAPES: VoxelShape[];
static LOWER_OUTLINE_SHAPES: VoxelShape[];
}

//net.minecraft.block.FlowerbedBlock
class FlowerbedBlock extends PlantBlock, Fertilizable{
 grow(world: ServerWorld,random: Random,pos: BlockPos,state: BlockState): void;
 rotate(state: BlockState,rotation: BlockRotation): BlockState;
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 canReplace(state: BlockState,context: ItemPlacementContext): boolean;
 mirror(state: BlockState,mirror: BlockMirror): BlockState;
 canGrow(world: World,random: Random,pos: BlockPos,state: BlockState): boolean;
 isFertilizable(world: WorldView,pos: BlockPos,state: BlockState,isClient: boolean): boolean;
 getPlacementState(ctx: ItemPlacementContext): BlockState;
}
class Static_FlowerbedBlock {
static field_42762: number;
static field_42763: number;
static FACING: DirectionProperty;
static FLOWER_AMOUNT: IntProperty;
}

//net.minecraft.block.TallFlowerBlock
class TallFlowerBlock extends TallPlantBlock, Fertilizable{
 grow(world: ServerWorld,random: Random,pos: BlockPos,state: BlockState): void;
 canGrow(world: World,random: Random,pos: BlockPos,state: BlockState): boolean;
 isFertilizable(world: WorldView,pos: BlockPos,state: BlockState,isClient: boolean): boolean;
}

//net.minecraft.block.SweetBerryBushBlock
class SweetBerryBushBlock extends PlantBlock, Fertilizable{
 grow(world: ServerWorld,random: Random,pos: BlockPos,state: BlockState): void;
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 hasRandomTicks(state: BlockState): boolean;
 onEntityCollision(state: BlockState,world: World,pos: BlockPos,entity: Entity): void;
 randomTick(state: BlockState,world: ServerWorld,pos: BlockPos,random: Random): void;
 canGrow(world: World,random: Random,pos: BlockPos,state: BlockState): boolean;
 onUse(state: BlockState,world: World,pos: BlockPos,player: PlayerEntity,hand: Hand,hit: BlockHitResult): ActionResult;
 isFertilizable(world: WorldView,pos: BlockPos,state: BlockState,isClient: boolean): boolean;
 getPickStack(world: BlockView,pos: BlockPos,state: BlockState): ItemStack;
}
class Static_SweetBerryBushBlock {
static field_31260: number;
static MAX_AGE: number;
static AGE: IntProperty;
static SMALL_SHAPE: VoxelShape;
static LARGE_SHAPE: VoxelShape;
}

//net.minecraft.block.BambooBlock
class BambooBlock extends Block, Fertilizable{
 grow(world: ServerWorld,random: Random,pos: BlockPos,state: BlockState): void;
 getStateForNeighborUpdate(state: BlockState,direction: Direction,neighborState: BlockState,world: WorldAccess,pos: BlockPos,neighborPos: BlockPos): BlockState;
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 canPlaceAt(state: BlockState,world: WorldView,pos: BlockPos): boolean;
 isShapeFullCube(state: BlockState,world: BlockView,pos: BlockPos): boolean;
 isTransparent(state: BlockState,world: BlockView,pos: BlockPos): boolean;
 hasRandomTicks(state: BlockState): boolean;
 canPathfindThrough(state: BlockState,world: BlockView,pos: BlockPos,type: NavigationType): boolean;
 scheduledTick(state: BlockState,world: ServerWorld,pos: BlockPos,random: Random): void;
 randomTick(state: BlockState,world: ServerWorld,pos: BlockPos,random: Random): void;
 canGrow(world: World,random: Random,pos: BlockPos,state: BlockState): boolean;
 calcBlockBreakingDelta(state: BlockState,player: PlayerEntity,world: BlockView,pos: BlockPos): number;
 getCollisionShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 isFertilizable(world: WorldView,pos: BlockPos,state: BlockState,isClient: boolean): boolean;
 getPlacementState(ctx: ItemPlacementContext): BlockState;
}
class Static_BambooBlock {
static field_30997: number;
static field_30998: number;
static field_30999: number;
static SMALL_LEAVES_SHAPE: VoxelShape;
static LARGE_LEAVES_SHAPE: VoxelShape;
static NO_LEAVES_SHAPE: VoxelShape;
static AGE: IntProperty;
static LEAVES: EnumProperty;
static STAGE: IntProperty;
static field_31000: number;
static field_31001: number;
static field_31002: number;
static field_31003: number;
static field_31004: number;
}

//net.minecraft.block.AbstractPlantBlock
class AbstractPlantBlock extends AbstractPlantPartBlock, Fertilizable{
 grow(world: ServerWorld,random: Random,pos: BlockPos,state: BlockState): void;
 getStateForNeighborUpdate(state: BlockState,direction: Direction,neighborState: BlockState,world: WorldAccess,pos: BlockPos,neighborPos: BlockPos): BlockState;
 canReplace(state: BlockState,context: ItemPlacementContext): boolean;
 canGrow(world: World,random: Random,pos: BlockPos,state: BlockState): boolean;
 isFertilizable(world: WorldView,pos: BlockPos,state: BlockState,isClient: boolean): boolean;
 getPickStack(world: BlockView,pos: BlockPos,state: BlockState): ItemStack;
}

//net.minecraft.world.gen.feature.NetherForestVegetationFeatureConfig
class NetherForestVegetationFeatureConfig extends BlockPileFeatureConfig{
 spreadWidth: number;
 spreadHeight: number;
}
class Static_NetherForestVegetationFeatureConfig {
static method_39607(instance: RecordCodecBuilder_Instance): App;
static method_39609(config: NetherForestVegetationFeatureConfig): Integer;
static method_39608(config: NetherForestVegetationFeatureConfig): Integer;
static method_39610(config: NetherForestVegetationFeatureConfig): BlockStateProvider;
static VEGETATION_CODEC: Codec;
}

//net.minecraft.world.gen.chunk.NoiseChunkGenerator
class NoiseChunkGenerator extends ChunkGenerator{
 getHeight(x: number,z: number,heightmap: Heightmap_Type,world: HeightLimitView,noiseConfig: NoiseConfig): number;
 getSettings(): RegistryEntry;
 populateBiomes(executor: Executor,noiseConfig: NoiseConfig,blender: Blender,structureAccessor: StructureAccessor,chunk: Chunk): CompletableFuture;
 populateEntities(region: ChunkRegion): void;
 carve(chunkRegion: ChunkRegion,seed: long,noiseConfig: NoiseConfig,biomeAccess: BiomeAccess,structureAccessor: StructureAccessor,chunk: Chunk,carverStep: GenerationStep_Carver): void;
 buildSurface(chunk: Chunk,heightContext: HeightContext,noiseConfig: NoiseConfig,structureAccessor: StructureAccessor,biomeAccess: BiomeAccess,biomeRegistry: Registry,blender: Blender): void;
 buildSurface(region: ChunkRegion,structures: StructureAccessor,noiseConfig: NoiseConfig,chunk: Chunk): void;
 populateNoise(executor: Executor,blender: Blender,noiseConfig: NoiseConfig,structureAccessor: StructureAccessor,chunk: Chunk): CompletableFuture;
 getMinimumY(): number;
 getWorldHeight(): number;
 getSeaLevel(): number;
 getDebugHudText(text: List,noiseConfig: NoiseConfig,pos: BlockPos): void;
 getColumnSample(x: number,z: number,world: HeightLimitView,noiseConfig: NoiseConfig): VerticalBlockSample;
 matchesSettings(settings: RegistryKey): boolean;
}
class Static_NoiseChunkGenerator {
static method_45509(fluidLevel: AquiferSampler_FluidLevel,i: number,fluidLevel2: AquiferSampler_FluidLevel,fluidLevel3: AquiferSampler_FluidLevel,x: number,y: number,z: number): AquiferSampler_FluidLevel;
static method_45511(registryEntry: RegistryEntry): AquiferSampler_FluidLevelSampler;
static method_28550(instance: RecordCodecBuilder_Instance): App;
static method_28554(generator: NoiseChunkGenerator): BiomeSource;
static method_38328(set: Set,chunk: Chunk,throwable: Throwable): void;
static method_28549(generator: NoiseChunkGenerator): RegistryEntry;
static createFluidLevelSampler(settings: ChunkGeneratorSettings): AquiferSampler_FluidLevelSampler;
static CODEC: Codec;
static AIR: BlockState;
}

//net.minecraft.world.gen.chunk.FlatChunkGenerator
class FlatChunkGenerator extends ChunkGenerator{
 getHeight(x: number,z: number,heightmap: Heightmap_Type,world: HeightLimitView,noiseConfig: NoiseConfig): number;
 getConfig(): FlatChunkGeneratorConfig;
 createStructurePlacementCalculator(structureSetRegistry: RegistryWrapper,noiseConfig: NoiseConfig,seed: long): StructurePlacementCalculator;
 populateEntities(region: ChunkRegion): void;
 carve(chunkRegion: ChunkRegion,seed: long,noiseConfig: NoiseConfig,biomeAccess: BiomeAccess,structureAccessor: StructureAccessor,chunk: Chunk,carverStep: GenerationStep_Carver): void;
 buildSurface(region: ChunkRegion,structures: StructureAccessor,noiseConfig: NoiseConfig,chunk: Chunk): void;
 populateNoise(executor: Executor,blender: Blender,noiseConfig: NoiseConfig,structureAccessor: StructureAccessor,chunk: Chunk): CompletableFuture;
 getMinimumY(): number;
 getWorldHeight(): number;
 getSeaLevel(): number;
 getSpawnHeight(world: HeightLimitView): number;
 getDebugHudText(text: List,noiseConfig: NoiseConfig,pos: BlockPos): void;
 getColumnSample(x: number,z: number,world: HeightLimitView,noiseConfig: NoiseConfig): VerticalBlockSample;
}
class Static_FlatChunkGenerator {
static method_46719(registryWrapper: RegistryWrapper): Stream;
static method_28001(i: number): BlockState[];
static method_28002(state: BlockState): BlockState;
static method_40158(instance: RecordCodecBuilder_Instance): App;
static method_46718(reference: RegistryEntry_Reference): RegistryEntry;
static CODEC: Codec;
}

//net.minecraft.world.gen.chunk.DebugChunkGenerator
class DebugChunkGenerator extends ChunkGenerator{
 getHeight(x: number,z: number,heightmap: Heightmap_Type,world: HeightLimitView,noiseConfig: NoiseConfig): number;
 populateEntities(region: ChunkRegion): void;
 carve(chunkRegion: ChunkRegion,seed: long,noiseConfig: NoiseConfig,biomeAccess: BiomeAccess,structureAccessor: StructureAccessor,chunk: Chunk,carverStep: GenerationStep_Carver): void;
 buildSurface(region: ChunkRegion,structures: StructureAccessor,noiseConfig: NoiseConfig,chunk: Chunk): void;
 generateFeatures(world: StructureWorldAccess,chunk: Chunk,structureAccessor: StructureAccessor): void;
 populateNoise(executor: Executor,blender: Blender,noiseConfig: NoiseConfig,structureAccessor: StructureAccessor,chunk: Chunk): CompletableFuture;
 getMinimumY(): number;
 getWorldHeight(): number;
 getSeaLevel(): number;
 getDebugHudText(text: List,noiseConfig: NoiseConfig,pos: BlockPos): void;
 getColumnSample(x: number,z: number,world: HeightLimitView,noiseConfig: NoiseConfig): VerticalBlockSample;
}
class Static_DebugChunkGenerator {
static getBlockState(x: number,z: number): BlockState;
static method_12579(block: Block): Stream;
static method_40465(instance: RecordCodecBuilder_Instance): App;
static CODEC: Codec;
static field_31467: number;
static BLOCK_STATES: List;
static X_SIDE_LENGTH: number;
static Z_SIDE_LENGTH: number;
static AIR: BlockState;
static BARRIER: BlockState;
static field_31465: number;
static field_31466: number;
}

//net.minecraft.world.gen.feature.util.CaveSurface$Bounded
class CaveSurface_Bounded extends CaveSurface{
 toString(): string;
 getHeight(): number;
 getCeiling(): number;
 getFloor(): number;
 getCeilingHeight(): OptionalInt;
 getFloorHeight(): OptionalInt;
 getOptionalHeight(): OptionalInt;
}

//net.minecraft.world.gen.feature.util.CaveSurface$Empty
class CaveSurface_Empty extends CaveSurface{
 toString(): string;
 getCeilingHeight(): OptionalInt;
 getFloorHeight(): OptionalInt;
 getOptionalHeight(): OptionalInt;
}
class Static_CaveSurface_Empty {
static INSTANCE: CaveSurface_Empty;
}

//net.minecraft.world.gen.feature.util.CaveSurface$Half
class CaveSurface_Half extends CaveSurface{
 toString(): string;
 getCeilingHeight(): OptionalInt;
 getFloorHeight(): OptionalInt;
 getOptionalHeight(): OptionalInt;
}

//net.minecraft.world.gen.trunk.ForkingTrunkPlacer
class ForkingTrunkPlacer extends TrunkPlacer{
 generate(world: TestableWorld,replacer: BiConsumer,random: Random,height: number,startPos: BlockPos,config: TreeFeatureConfig): List;
}
class Static_ForkingTrunkPlacer {
static method_28899(instance: RecordCodecBuilder_Instance): App;
static CODEC: Codec;
}

//net.minecraft.world.gen.trunk.StraightTrunkPlacer
class StraightTrunkPlacer extends TrunkPlacer{
 generate(world: TestableWorld,replacer: BiConsumer,random: Random,height: number,startPos: BlockPos,config: TreeFeatureConfig): List;
}
class Static_StraightTrunkPlacer {
static method_28902(instance: RecordCodecBuilder_Instance): App;
static CODEC: Codec;
}

//net.minecraft.world.gen.trunk.LargeOakTrunkPlacer
class LargeOakTrunkPlacer extends TrunkPlacer{
 generate(world: TestableWorld,replacer: BiConsumer,random: Random,height: number,startPos: BlockPos,config: TreeFeatureConfig): List;
}
class Static_LargeOakTrunkPlacer {
static method_28898(instance: RecordCodecBuilder_Instance): App;
static shouldGenerateBranch(treeHeight: number,height: number): number;
static CODEC: Codec;
static field_31524: number;
static field_31525: number;
static field_31526: number;
static field_31527: number;
}

//net.minecraft.world.gen.trunk.DarkOakTrunkPlacer
class DarkOakTrunkPlacer extends TrunkPlacer{
 generate(world: TestableWorld,replacer: BiConsumer,random: Random,height: number,startPos: BlockPos,config: TreeFeatureConfig): List;
}
class Static_DarkOakTrunkPlacer {
static method_28897(instance: RecordCodecBuilder_Instance): App;
static CODEC: Codec;
}

//net.minecraft.world.gen.trunk.CherryTrunkPlacer
class CherryTrunkPlacer extends TrunkPlacer{
 generate(world: TestableWorld,replacer: BiConsumer,random: Random,height: number,startPos: BlockPos,config: TreeFeatureConfig): List;
}
class Static_CherryTrunkPlacer {
static method_49252(instance: RecordCodecBuilder_Instance): App;
static method_49255(trunkPlacer: CherryTrunkPlacer): IntProvider;
static method_49251(direction: Direction,state: BlockState): BlockState;
static method_49253(trunkPlacer: CherryTrunkPlacer): UniformIntProvider;
static method_49248(branchStartOffsetFromTop: UniformIntProvider): DataResult;
static method_49536(): string;
static method_49254(trunkPlacer: CherryTrunkPlacer): IntProvider;
static method_49250(trunkPlacer: CherryTrunkPlacer): IntProvider;
static BRANCH_START_OFFSET_FROM_TOP_CODEC: Codec;
static CODEC: Codec;
}

//net.minecraft.world.gen.trunk.GiantTrunkPlacer
class GiantTrunkPlacer extends TrunkPlacer{
 generate(world: TestableWorld,replacer: BiConsumer,random: Random,height: number,startPos: BlockPos,config: TreeFeatureConfig): List;
}
class Static_GiantTrunkPlacer {
static method_28900(instance: RecordCodecBuilder_Instance): App;
static CODEC: Codec;
}

//net.minecraft.world.gen.trunk.UpwardsBranchingTrunkPlacer
class UpwardsBranchingTrunkPlacer extends TrunkPlacer{
 generate(world: TestableWorld,replacer: BiConsumer,random: Random,height: number,startPos: BlockPos,config: TreeFeatureConfig): List;
}
class Static_UpwardsBranchingTrunkPlacer {
static method_43205(trunkPlacer: UpwardsBranchingTrunkPlacer): IntProvider;
static method_43201(trunkPlacer: UpwardsBranchingTrunkPlacer): RegistryEntryList;
static method_43203(trunkPlacer: UpwardsBranchingTrunkPlacer): IntProvider;
static method_43202(instance: RecordCodecBuilder_Instance): App;
static method_43204(trunkPlacer: UpwardsBranchingTrunkPlacer): Float;
static CODEC: Codec;
}

//net.minecraft.world.gen.trunk.BendingTrunkPlacer
class BendingTrunkPlacer extends TrunkPlacer{
 generate(world: TestableWorld,replacer: BiConsumer,random: Random,height: number,startPos: BlockPos,config: TreeFeatureConfig): List;
}
class Static_BendingTrunkPlacer {
static method_34374(placer: BendingTrunkPlacer): Integer;
static method_34372(placer: BendingTrunkPlacer): IntProvider;
static method_34373(instance: RecordCodecBuilder_Instance): App;
static CODEC: Codec;
}

//net.minecraft.client.gui.navigation.GuiNavigationPath$Leaf
class GuiNavigationPath_Leaf extends Record, GuiNavigationPath{
 equals(object: Object): boolean;
 toString(): string;
 hashCode(): number;
 component(): Element;
 setFocused(focused: boolean): void;
}

//net.minecraft.client.gui.navigation.GuiNavigationPath$IntermediaryNode
class GuiNavigationPath_IntermediaryNode extends Record, GuiNavigationPath{
 equals(object: Object): boolean;
 toString(): string;
 hashCode(): number;
 component(): ParentElement;
 component(): Element;
 childPath(): GuiNavigationPath;
 setFocused(focused: boolean): void;
}

//net.minecraft.network.packet.s2c.play.FeaturesS2CPacket
class FeaturesS2CPacket extends Record, Packet{
 equals(object: Object): boolean;
 toString(): string;
 hashCode(): number;
 apply(listener: PacketListener): void;
 apply(clientPlayPacketListener: ClientPlayPacketListener): void;
 write(buf: PacketByteBuf): void;
 features(): Set;
}

//net.minecraft.network.packet.s2c.play.RemoveMessageS2CPacket
class RemoveMessageS2CPacket extends Record, Packet{
 equals(object: Object): boolean;
 toString(): string;
 hashCode(): number;
 apply(listener: PacketListener): void;
 apply(clientPlayPacketListener: ClientPlayPacketListener): void;
 write(buf: PacketByteBuf): void;
 messageSignature(): MessageSignatureData_Indexed;
}

//net.minecraft.network.packet.s2c.play.DamageTiltS2CPacket
class DamageTiltS2CPacket extends Record, Packet{
 equals(object: Object): boolean;
 toString(): string;
 hashCode(): number;
 apply(listener: PacketListener): void;
 apply(clientPlayPacketListener: ClientPlayPacketListener): void;
 id(): number;
 write(buf: PacketByteBuf): void;
 yaw(): number;
}

//net.minecraft.network.packet.c2s.play.PlayerSessionC2SPacket
class PlayerSessionC2SPacket extends Record, Packet{
 equals(object: Object): boolean;
 toString(): string;
 hashCode(): number;
 apply(listener: PacketListener): void;
 apply(serverPlayPacketListener: ServerPlayPacketListener): void;
 write(buf: PacketByteBuf): void;
 chatSession(): PublicPlayerSession_Serialized;
}

//net.minecraft.network.packet.s2c.query.QueryResponseS2CPacket
class QueryResponseS2CPacket extends Record, Packet{
 equals(object: Object): boolean;
 toString(): string;
 hashCode(): number;
 apply(listener: PacketListener): void;
 apply(clientQueryPacketListener: ClientQueryPacketListener): void;
 write(buf: PacketByteBuf): void;
 metadata(): ServerMetadata;
}

//net.minecraft.network.packet.c2s.play.MessageAcknowledgmentC2SPacket
class MessageAcknowledgmentC2SPacket extends Record, Packet{
 equals(object: Object): boolean;
 toString(): string;
 hashCode(): number;
 apply(listener: PacketListener): void;
 apply(serverPlayPacketListener: ServerPlayPacketListener): void;
 offset(): number;
 write(buf: PacketByteBuf): void;
}

//net.minecraft.network.packet.s2c.play.PlayerRemoveS2CPacket
class PlayerRemoveS2CPacket extends Record, Packet{
 equals(object: Object): boolean;
 toString(): string;
 hashCode(): number;
 apply(listener: PacketListener): void;
 apply(clientPlayPacketListener: ClientPlayPacketListener): void;
 write(buf: PacketByteBuf): void;
 profileIds(): List;
}

//net.minecraft.network.packet.s2c.play.SimulationDistanceS2CPacket
class SimulationDistanceS2CPacket extends Record, Packet{
 equals(object: Object): boolean;
 toString(): string;
 hashCode(): number;
 apply(listener: PacketListener): void;
 apply(clientPlayPacketListener: ClientPlayPacketListener): void;
 write(buf: PacketByteBuf): void;
 simulationDistance(): number;
}

//net.minecraft.network.packet.s2c.play.ChatSuggestionsS2CPacket
class ChatSuggestionsS2CPacket extends Record, Packet{
 equals(object: Object): boolean;
 toString(): string;
 hashCode(): number;
 apply(listener: PacketListener): void;
 apply(clientPlayPacketListener: ClientPlayPacketListener): void;
 write(buf: PacketByteBuf): void;
 action(): ChatSuggestionsS2CPacket_Action;
 entries(): List;
}

//net.minecraft.network.packet.s2c.play.ProfilelessChatMessageS2CPacket
class ProfilelessChatMessageS2CPacket extends Record, Packet{
 equals(object: Object): boolean;
 toString(): string;
 hashCode(): number;
 apply(listener: PacketListener): void;
 apply(clientPlayPacketListener: ClientPlayPacketListener): void;
 write(buf: PacketByteBuf): void;
 message(): Text;
 chatType(): MessageType_Serialized;
 isWritingErrorSkippable(): boolean;
}

//net.minecraft.network.packet.c2s.play.CommandExecutionC2SPacket
class CommandExecutionC2SPacket extends Record, Packet{
 equals(object: Object): boolean;
 toString(): string;
 hashCode(): number;
 apply(listener: PacketListener): void;
 apply(serverPlayPacketListener: ServerPlayPacketListener): void;
 write(buf: PacketByteBuf): void;
 timestamp(): Instant;
 command(): string;
 acknowledgment(): LastSeenMessageList_Acknowledgment;
 argumentSignatures(): ArgumentSignatureDataMap;
 salt(): long;
}

//net.minecraft.network.packet.c2s.login.LoginHelloC2SPacket
class LoginHelloC2SPacket extends Record, Packet{
 name(): string;
 equals(object: Object): boolean;
 toString(): string;
 hashCode(): number;
 apply(listener: PacketListener): void;
 apply(serverLoginPacketListener: ServerLoginPacketListener): void;
 write(buf: PacketByteBuf): void;
 profileId(): Optional;
}

//net.minecraft.network.packet.s2c.play.PlayerActionResponseS2CPacket
class PlayerActionResponseS2CPacket extends Record, Packet{
 equals(object: Object): boolean;
 toString(): string;
 hashCode(): number;
 apply(listener: PacketListener): void;
 apply(clientPlayPacketListener: ClientPlayPacketListener): void;
 write(buf: PacketByteBuf): void;
 sequence(): number;
}

//net.minecraft.network.packet.s2c.play.ChunkBiomeDataS2CPacket
class ChunkBiomeDataS2CPacket extends Record, Packet{
 equals(object: Object): boolean;
 toString(): string;
 hashCode(): number;
 apply(listener: PacketListener): void;
 apply(clientPlayPacketListener: ClientPlayPacketListener): void;
 write(buf: PacketByteBuf): void;
 chunkBiomeData(): List;
}
class Static_ChunkBiomeDataS2CPacket {
static create(chunks: List): ChunkBiomeDataS2CPacket;
static method_49686(bufx: PacketByteBuf,data: ChunkBiomeDataS2CPacket_Serialized): void;
static MAX_SIZE: number;
}

//net.minecraft.network.packet.c2s.play.ClientSettingsC2SPacket
class ClientSettingsC2SPacket extends Record, Packet{
 equals(object: Object): boolean;
 toString(): string;
 hashCode(): number;
 apply(listener: PacketListener): void;
 apply(serverPlayPacketListener: ServerPlayPacketListener): void;
 write(buf: PacketByteBuf): void;
 language(): string;
 filterText(): boolean;
 chatVisibility(): ChatVisibility;
 mainArm(): Arm;
 chatColors(): boolean;
 viewDistance(): number;
 allowsListing(): boolean;
 playerModelBitMask(): number;
}
class Static_ClientSettingsC2SPacket {
static MAX_LANGUAGE_LENGTH: number;
}

//net.minecraft.network.packet.s2c.play.EntityDamageS2CPacket
class EntityDamageS2CPacket extends Record, Packet{
 equals(object: Object): boolean;
 toString(): string;
 hashCode(): number;
 apply(listener: PacketListener): void;
 apply(clientPlayPacketListener: ClientPlayPacketListener): void;
 write(buf: PacketByteBuf): void;
 createDamageSource(world: World): DamageSource;
 entityId(): number;
 sourceTypeId(): number;
 sourceCauseId(): number;
 sourceDirectId(): number;
 sourcePosition(): Optional;
}
class Static_EntityDamageS2CPacket {
static method_49076(pos: PacketByteBuf): Vec3d;
static writeOffsetVarInt(buf: PacketByteBuf,value: number): void;
static method_49073(bufx: PacketByteBuf,pos: Vec3d): void;
static readOffsetVarInt(buf: PacketByteBuf): number;
}

//net.minecraft.network.packet.s2c.play.ChatMessageS2CPacket
class ChatMessageS2CPacket extends Record, Packet{
 signature(): MessageSignatureData;
 index(): number;
 equals(object: Object): boolean;
 toString(): string;
 hashCode(): number;
 apply(listener: PacketListener): void;
 apply(clientPlayPacketListener: ClientPlayPacketListener): void;
 write(buf: PacketByteBuf): void;
 body(): MessageBody_Serialized;
 isWritingErrorSkippable(): boolean;
 unsignedContent(): Text;
 filterMask(): FilterMask;
 sender(): UUID;
 serializedParameters(): MessageType_Serialized;
}

//net.minecraft.network.packet.c2s.play.ChatMessageC2SPacket
class ChatMessageC2SPacket extends Record, Packet{
 signature(): MessageSignatureData;
 equals(object: Object): boolean;
 toString(): string;
 hashCode(): number;
 apply(listener: PacketListener): void;
 apply(serverPlayPacketListener: ServerPlayPacketListener): void;
 write(buf: PacketByteBuf): void;
 timestamp(): Instant;
 chatMessage(): string;
 acknowledgment(): LastSeenMessageList_Acknowledgment;
 salt(): long;
}

//net.minecraft.network.packet.s2c.play.GameMessageS2CPacket
class GameMessageS2CPacket extends Record, Packet{
 equals(object: Object): boolean;
 toString(): string;
 hashCode(): number;
 apply(listener: PacketListener): void;
 apply(clientPlayPacketListener: ClientPlayPacketListener): void;
 write(buf: PacketByteBuf): void;
 content(): Text;
 isWritingErrorSkippable(): boolean;
 overlay(): boolean;
}

//net.minecraft.network.packet.s2c.play.GameJoinS2CPacket
class GameJoinS2CPacket extends Record, Packet{
 equals(object: Object): boolean;
 toString(): string;
 hashCode(): number;
 apply(listener: PacketListener): void;
 apply(clientPlayPacketListener: ClientPlayPacketListener): void;
 write(buf: PacketByteBuf): void;
 registryManager(): DynamicRegistryManager_Immutable;
 gameMode(): GameMode;
 maxPlayers(): number;
 simulationDistance(): number;
 flatWorld(): boolean;
 sha256Seed(): long;
 playerEntityId(): number;
 dimensionId(): RegistryKey;
 dimensionType(): RegistryKey;
 viewDistance(): number;
 debugWorld(): boolean;
 dimensionIds(): Set;
 reducedDebugInfo(): boolean;
 portalCooldown(): number;
 previousGameMode(): GameMode;
 lastDeathLocation(): Optional;
 showDeathScreen(): boolean;
 hardcore(): boolean;
}
class Static_GameJoinS2CPacket {
static method_34135(b: PacketByteBuf): RegistryKey;
static REGISTRY_OPS: RegistryOps;
}

//net.minecraft.network.packet.s2c.play.EntityTrackerUpdateS2CPacket
class EntityTrackerUpdateS2CPacket extends Record, Packet{
 equals(object: Object): boolean;
 toString(): string;
 hashCode(): number;
 apply(clientPlayPacketListener: ClientPlayPacketListener): void;
 apply(listener: PacketListener): void;
 id(): number;
 write(buf: PacketByteBuf): void;
 trackedValues(): List;
}
class Static_EntityTrackerUpdateS2CPacket {
static write(trackedValues: List,buf: PacketByteBuf): void;
static read(buf: PacketByteBuf): List;
static MARKER_ID: number;
}

//net.minecraft.block.sapling.BirchSaplingGenerator
class BirchSaplingGenerator extends SaplingGenerator{
}

//net.minecraft.block.sapling.OakSaplingGenerator
class OakSaplingGenerator extends SaplingGenerator{
}

//net.minecraft.block.sapling.AcaciaSaplingGenerator
class AcaciaSaplingGenerator extends SaplingGenerator{
}

//net.minecraft.block.sapling.MangroveSaplingGenerator
class MangroveSaplingGenerator extends SaplingGenerator{
}

//net.minecraft.block.sapling.LargeTreeSaplingGenerator
class LargeTreeSaplingGenerator extends SaplingGenerator{
 generate(world: ServerWorld,chunkGenerator: ChunkGenerator,pos: BlockPos,state: BlockState,random: Random): boolean;
 generateLargeTree(world: ServerWorld,chunkGenerator: ChunkGenerator,pos: BlockPos,state: BlockState,random: Random,x: number,z: number): boolean;
}
class Static_LargeTreeSaplingGenerator {
static canGenerateLargeTree(state: BlockState,world: BlockView,pos: BlockPos,x: number,z: number): boolean;
}

//net.minecraft.block.sapling.CherrySaplingGenerator
class CherrySaplingGenerator extends SaplingGenerator{
}

//net.minecraft.block.sapling.AzaleaSaplingGenerator
class AzaleaSaplingGenerator extends SaplingGenerator{
}

//net.minecraft.server.MinecraftServer
class MinecraftServer extends ReentrantThreadExecutor, CommandOutput, AutoCloseable{
 exit(): void;
 shutdown(): void;
 stop(waitForShutdown: boolean): void;
 close(): void;
 save(suppressLogs: boolean,flush: boolean,force: boolean): boolean;
 getFile(path: string): File;
 canExecute(task: Runnable): boolean;
 getVersion(): string;
 tick(shouldKeepTicking: BooleanSupplier): void;
 isStopped(): boolean;
 isStopping(): boolean;
 reloadResources(dataPacks: Collection): CompletableFuture;
 shouldExecuteAsync(): boolean;
 runTask(): boolean;
 executeSync(runnable: Runnable): void;
 executeTask(task: Runnable): void;
 getIconFile(): Optional;
 getMessageDecorator(): MessageDecorator;
 shouldEnforceSecureProfile(): boolean;
 getAdvancementLoader(): ServerAdvancementLoader;
 getPlayerIdleTimeout(): number;
 areCommandBlocksEnabled(): boolean;
 getServicesSignatureVerifier(): SignatureVerifier;
 forcePlayerSampleUpdate(): void;
 requireResourcePack(): boolean;
 setDifficultyLocked(locked: boolean): void;
 shouldBroadcastConsoleToOps(): boolean;
 shouldReceiveFeedback(): boolean;
 getCommandFunctionManager(): CommandFunctionManager;
 getDataCommandStorage(): DataCommandStorage;
 getSessionService(): MinecraftSessionService;
 getTickTime(): number;
 getMetricsData(): MetricsData;
 isRunning(): boolean;
 setDifficulty(difficulty: Difficulty,forceUpdate: boolean): void;
 syncChunkWrites(): boolean;
 getDataFixer(): DataFixer;
 getWorldRegistryKeys(): Set;
 getResourcePackProperties(): Optional;
 getOpPermissionLevel(): number;
 getCurrentPlayerCount(): number;
 getServerMetadata(): ServerMetadata;
 getMaxPlayerCount(): number;
 getServerModName(): string;
 getOverworld(): ServerWorld;
 getBossBarManager(): BossBarManager;
 getPermissionLevel(profile: GameProfile): number;
 logChatMessage(message: Text,params: MessageType_Parameters,prefix: string): void;
 getPlayerNames(): String[];
 setDemo(demo: boolean): void;
 setServerPort(serverPort: number): void;
 setHostProfile(hostProfile: GameProfile): void;
 createFilterer(player: ServerPlayerEntity): TextStream;
 getModStatus(): ModStatus;
 adjustTrackingDistance(initialDistance: number): number;
 isHardcore(): boolean;
 getScoreboard(): ServerScoreboard;
 isHost(profile: GameProfile): boolean;
 isFlightEnabled(): boolean;
 getCommandSource(): ServerCommandSource;
 sendMessage(message: Text): void;
 shouldTrackOutput(): boolean;
 getCommandManager(): CommandManager;
 getWorlds(): Iterable;
 isDemo(): boolean;
 getTimeReference(): long;
 getThread(): Thread;
 addSystemDetails(details: SystemDetails): SystemDetails;
 getRunDirectory(): File;
 getSaveProperties(): SaveProperties;
 getWorld(key: RegistryKey): ServerWorld;
 isUsingNativeTransport(): boolean;
 isLoading(): boolean;
 setPlayerIdleTimeout(playerIdleTimeout: number): void;
 getStructureTemplateManager(): StructureTemplateManager;
 getKeyPair(): KeyPair;
 getTicks(): number;
 isSaving(): boolean;
 saveAll(suppressLogs: boolean,flush: boolean,force: boolean): boolean;
 getProfiler(): Profiler;
 getRegistryManager(): DynamicRegistryManager_Immutable;
 getRecipeManager(): RecipeManager;
 isNetherAllowed(): boolean;
 getGameProfileRepo(): GameProfileRepository;
 isOnlineMode(): boolean;
 isSingleplayer(): boolean;
 getUserCache(): UserCache;
 getSavePath(worldSavePath: WorldSavePath): Path;
 getPlayerManager(): PlayerManager;
 getGameRules(): GameRules;
 getLootManager(): LootManager;
 getNetworkCompressionThreshold(): number;
 isRemote(): boolean;
 getServerPort(): number;
 openToLan(gameMode: GameMode,cheatsAllowed: boolean,port: number): boolean;
 getDataPackManager(): ResourcePackManager;
 getForcedGameMode(): GameMode;
 setDefaultGameMode(gameMode: GameMode): void;
 setupRecorder(resultConsumer: Consumer,dumpConsumer: Consumer): void;
 isRecorderActive(): boolean;
 stopRecorder(): void;
 getHostProfile(): GameProfile;
 getProxy(): Proxy;
 createTask(runnable: Runnable): Runnable;
 kickNonWhitelistedPlayers(source: ServerCommandSource): void;
 acceptsStatusQuery(): boolean;
 getResourceManager(): ResourceManager;
 isDebugRunning(): boolean;
 stopDebug(): ProfileResult;
 startDebug(): void;
 shouldBroadcastRconToOps(): boolean;
 getMaxChainedNeighborUpdates(): number;
 getMaxWorldBorderRadius(): number;
 getDefaultGameMode(): GameMode;
 shouldSpawnNpcs(): boolean;
 shouldSpawnAnimals(): boolean;
 isSpawnProtected(world: ServerWorld,pos: BlockPos,player: PlayerEntity): boolean;
 addServerGuiTickable(tickable: Runnable): void;
 addExtraSystemDetails(details: SystemDetails): SystemDetails;
 sendTimeUpdatePackets(): void;
 getFunctionPermissionLevel(): number;
 isMonsterSpawningEnabled(): boolean;
 shouldPreventProxyConnections(): boolean;
 setPreventProxyConnections(preventProxyConnections: boolean): void;
 getCombinedDynamicRegistries(): CombinedDynamicRegistries;
 getPlayerInteractionManager(player: ServerPlayerEntity): ServerPlayerInteractionManager;
 getSpawnProtectionRadius(): number;
 setEnforceWhitelist(enforceWhitelist: boolean): void;
 forceStopRecorder(): void;
 getNetworkIo(): ServerNetworkIo;
 setCrashReport(report: CrashReport): void;
 setServerIp(serverIp: string): void;
 getServerIp(): string;
 hideOnlinePlayers(): boolean;
 tickWorlds(shouldKeepTicking: BooleanSupplier): void;
 setPvpEnabled(pvpEnabled: boolean): void;
 setPlayerManager(playerManager: PlayerManager): void;
 getServerMotd(): string;
 setOnlineMode(onlineMode: boolean): void;
 setMotd(motd: string): void;
 setFlightEnabled(flightEnabled: boolean): void;
 getSpawnRadius(world: ServerWorld): number;
 isEnforceWhitelist(): boolean;
 getRateLimit(): number;
 isDedicated(): boolean;
 hasGui(): boolean;
 isPvpEnabled(): boolean;
 resetRecorder(): void;
 dumpProperties(file: Path): void;
 lastTickLengths: long[];
}
class Static_MinecraftServer {
static startServer(serverFactory: Function): MinecraftServer;
static createCrashReport(throwable: Throwable): CrashReport;
static setupSpawn(world: ServerWorld,worldProperties: ServerWorldProperties,bonusChest: boolean,debugWorld: boolean): void;
static createDataPackSettings(dataPackManager: ResourcePackManager): DataPackSettings;
static method_3854(thread: Thread,throwable: Throwable): void;
static method_46842(featureRegistry: Registry): Optional;
static method_29739(atomicReference: AtomicReference): void;
static method_37329(path: Path): void;
static method_46841(serverWorld: ServerWorld,serverChunkManager: ServerChunkManager,serverWorldProperties: ServerWorldProperties,feature: RegistryEntry_Reference): void;
static method_40056(world: ServerWorld): boolean;
static method_40055(): boolean;
static method_49389(path: Path): boolean;
static method_3733(serverWorld: ServerWorld): string;
static method_49387(path: Path): Optional;
static method_29738(collection: Collection,name: string): boolean;
static loadDataPacks(resourcePackManager: ResourcePackManager,dataPackSettings: DataPackSettings,safeMode: boolean,enabledFeatures: FeatureSet): DataConfiguration;
static method_40374(lifecycledResourceManager: LifecycledResourceManager,dataPackContents: DataPackContents): MinecraftServer_ResourceManagerHolder;
static method_40375(lifecycledResourceManager: LifecycledResourceManager,dataPackContents: DataPackContents,throwable: Throwable): void;
static method_38580(module: WinNativeModuleUtil_NativeModule): string;
static method_46220(profile: ResourcePackProfile): string;
static method_49388(path: Path): boolean;
static LOGGER: Logger;
static VANILLA: string;
static field_33212: number;
static field_33213: number;
static field_33206: number;
static field_33215: number;
static field_33216: number;
static PLAYER_SAMPLE_UPDATE_INTERVAL: long;
static field_33218: number;
static START_TICKET_CHUNK_RADIUS: number;
static START_TICKET_CHUNKS: number;
static field_33220: number;
static field_33221: number;
static MAX_WORLD_BORDER_RADIUS: number;
static DEMO_LEVEL_INFO: LevelInfo;
static MILLISECONDS_PER_TICK: long;
static ANONYMOUS_PLAYER_PROFILE: GameProfile;
}

//net.minecraft.world.gen.surfacebuilder.MaterialRules$SequenceMaterialRule
class MaterialRules_SequenceMaterialRule extends Record, MaterialRules_MaterialRule{
 equals(object: Object): boolean;
 toString(): string;
 hashCode(): number;
 apply(materialRuleContext: MaterialRules_MaterialRuleContext): MaterialRules_BlockStateRule;
 apply(context: Object): Object;
 sequence(): List;
 codec(): CodecHolder;
}
class Static_MaterialRules_SequenceMaterialRule {
static CODEC: CodecHolder;
}

//net.minecraft.world.gen.surfacebuilder.MaterialRules$TerracottaBandsMaterialRule
class MaterialRules_TerracottaBandsMaterialRule extends Enum, MaterialRules_MaterialRule{
 apply(materialRuleContext: MaterialRules_MaterialRuleContext): MaterialRules_BlockStateRule;
 apply(context: Object): Object;
 codec(): CodecHolder;
}
class Static_MaterialRules_TerracottaBandsMaterialRule {
static values(): MaterialRules_TerracottaBandsMaterialRule;
static valueOf(string: string): MaterialRules_TerracottaBandsMaterialRule;
static method_39063(): MaterialRules_TerracottaBandsMaterialRule;
static INSTANCE: MaterialRules_TerracottaBandsMaterialRule;
static CODEC: CodecHolder;
static field_35227: MaterialRules_TerracottaBandsMaterialRule;
}

//net.minecraft.world.gen.surfacebuilder.MaterialRules$BlockMaterialRule
class MaterialRules_BlockMaterialRule extends Record, MaterialRules_MaterialRule{
 equals(object: Object): boolean;
 toString(): string;
 hashCode(): number;
 apply(materialRuleContext: MaterialRules_MaterialRuleContext): MaterialRules_BlockStateRule;
 apply(context: Object): Object;
 rule(): MaterialRules_SimpleBlockStateRule;
 codec(): CodecHolder;
 resultState(): BlockState;
}
class Static_MaterialRules_BlockMaterialRule {
static CODEC: CodecHolder;
}

//net.minecraft.world.gen.surfacebuilder.MaterialRules$ConditionMaterialRule
class MaterialRules_ConditionMaterialRule extends Record, MaterialRules_MaterialRule{
 equals(object: Object): boolean;
 toString(): string;
 hashCode(): number;
 apply(context: Object): Object;
 apply(materialRuleContext: MaterialRules_MaterialRuleContext): MaterialRules_BlockStateRule;
 thenRun(): MaterialRules_MaterialRule;
 codec(): CodecHolder;
 ifTrue(): MaterialRules_MaterialCondition;
}
class Static_MaterialRules_ConditionMaterialRule {
static method_39094(instance: RecordCodecBuilder_Instance): App;
static CODEC: CodecHolder;
}

//net.minecraft.entity.ai.brain.sensor.DummySensor
class DummySensor extends Sensor{
 getOutputMemoryModules(): Set;
}

//net.minecraft.entity.ai.brain.sensor.SecondaryPointsOfInterestSensor
class SecondaryPointsOfInterestSensor extends Sensor{
 getOutputMemoryModules(): Set;
}
class Static_SecondaryPointsOfInterestSensor {
static RUN_TIME: number;
}

//net.minecraft.entity.ai.brain.sensor.NearestItemsSensor
class NearestItemsSensor extends Sensor{
 getOutputMemoryModules(): Set;
}
class Static_NearestItemsSensor {
static method_24646(mobEntity: MobEntity,itemEntity: ItemEntity): boolean;
static method_24644(itemEntity: ItemEntity): boolean;
static method_24643(mobEntity: MobEntity,itemEntity: ItemEntity): boolean;
static HORIZONTAL_RANGE: long;
static VERTICAL_RANGE: long;
static MAX_RANGE: number;
}

//net.minecraft.entity.ai.brain.sensor.PiglinBruteSpecificSensor
class PiglinBruteSpecificSensor extends Sensor{
 getOutputMemoryModules(): Set;
}
class Static_PiglinBruteSpecificSensor {
static method_38983(livingEntity: LivingEntity): boolean;
}

//net.minecraft.entity.ai.brain.sensor.NearestVisibleAdultSensor
class NearestVisibleAdultSensor extends Sensor{
 getOutputMemoryModules(): Set;
}
class Static_NearestVisibleAdultSensor {
static method_29528(passiveEntity: PassiveEntity,livingEntity: LivingEntity): boolean;
}

//net.minecraft.entity.ai.brain.sensor.TemptationsSensor
class TemptationsSensor extends Sensor{
 getOutputMemoryModules(): Set;
}
class Static_TemptationsSensor {
static method_33217(pathAwareEntity: PathAwareEntity,player: ServerPlayerEntity): boolean;
static method_33214(pathAwareEntity: PathAwareEntity,player: ServerPlayerEntity): boolean;
static method_45339(pathAwareEntity: PathAwareEntity,serverPlayerEntity: ServerPlayerEntity): boolean;
static MAX_DISTANCE: number;
static TEMPTER_PREDICATE: TargetPredicate;
}

//net.minecraft.entity.ai.brain.sensor.NearestBedSensor
class NearestBedSensor extends Sensor{
 getOutputMemoryModules(): Set;
}
class Static_NearestBedSensor {
static method_43977(registryEntry: RegistryEntry): boolean;
static REMEMBER_TIME: number;
static MAX_TRIES: number;
static MAX_EXPIRY_TIME: number;
}

//net.minecraft.entity.ai.brain.sensor.NearestPlayersSensor
class NearestPlayersSensor extends Sensor{
 getOutputMemoryModules(): Set;
}
class Static_NearestPlayersSensor {
static method_19098(livingEntity: LivingEntity,player: ServerPlayerEntity): boolean;
static method_29268(livingEntity: LivingEntity,player: PlayerEntity): boolean;
static method_36981(livingEntity: LivingEntity,player: PlayerEntity): boolean;
}

//net.minecraft.entity.ai.brain.sensor.GolemLastSeenSensor
class GolemLastSeenSensor extends Sensor{
 getOutputMemoryModules(): Set;
}
class Static_GolemLastSeenSensor {
static rememberIronGolem(entity: LivingEntity): void;
static method_20657(livingEntity: LivingEntity): boolean;
static senseIronGolem(entity: LivingEntity): void;
static RUN_TIME: number;
static GOLEM_DETECTED_WARMUP: number;
}

//net.minecraft.entity.ai.brain.sensor.NearestVisibleLivingEntitySensor
class NearestVisibleLivingEntitySensor extends Sensor{
 getOutputMemoryModules(): Set;
}

//net.minecraft.entity.ai.brain.sensor.HurtBySensor
class HurtBySensor extends Sensor{
 getOutputMemoryModules(): Set;
}
class Static_HurtBySensor {
static method_24642(serverWorld: ServerWorld,brain: Brain,livingEntity: LivingEntity): void;
}

//net.minecraft.entity.ai.brain.sensor.HoglinSpecificSensor
class HoglinSpecificSensor extends Sensor{
 getOutputMemoryModules(): Set;
}
class Static_HoglinSpecificSensor {
static method_24640(serverWorld: ServerWorld,pos: BlockPos): boolean;
static method_38982(livingEntity: LivingEntity): boolean;
}

//net.minecraft.entity.ai.brain.sensor.VillagerBabiesSensor
class VillagerBabiesSensor extends Sensor{
 getOutputMemoryModules(): Set;
}

//net.minecraft.entity.ai.brain.sensor.PiglinSpecificSensor
class PiglinSpecificSensor extends Sensor{
 getOutputMemoryModules(): Set;
}
class Static_PiglinSpecificSensor {
static findPiglinRepellent(world: ServerWorld,entity: LivingEntity): Optional;
static method_38984(livingEntity: LivingEntity): boolean;
static method_30077(serverWorld: ServerWorld,pos: BlockPos): boolean;
static isPiglinRepellent(world: ServerWorld,pos: BlockPos): boolean;
}

//net.minecraft.entity.ai.brain.sensor.IsInWaterSensor
class IsInWaterSensor extends Sensor{
 getOutputMemoryModules(): Set;
}

//net.minecraft.entity.ai.brain.sensor.NearestLivingEntitiesSensor
class NearestLivingEntitiesSensor extends Sensor{
 getOutputMemoryModules(): Set;
}
class Static_NearestLivingEntitiesSensor {
static method_19097(livingEntity: LivingEntity,e: LivingEntity): boolean;
}

//net.minecraft.screen.CartographyTableScreenHandler$2


//net.minecraft.item.DyeableHorseArmorItem
class DyeableHorseArmorItem extends HorseArmorItem, DyeableItem{
}

//net.minecraft.item.DyeableArmorItem
class DyeableArmorItem extends ArmorItem, DyeableItem{
}

//net.minecraft.item.GlowInkSacItem
class GlowInkSacItem extends Item, SignChangingItem{
 useOnSign(world: World,signBlockEntity: SignBlockEntity,front: boolean,player: PlayerEntity): boolean;
}
class Static_GlowInkSacItem {
static method_49800(text: SignText): SignText;
}

//net.minecraft.item.HoneycombItem
class HoneycombItem extends Item, SignChangingItem{
 useOnBlock(context: ItemUsageContext): ActionResult;
 canUseOnSignText(signText: SignText,player: PlayerEntity): boolean;
 useOnSign(world: World,signBlockEntity: SignBlockEntity,front: boolean,player: PlayerEntity): boolean;
}
class Static_HoneycombItem {
static getWaxedState(state: BlockState): Optional;
static method_34719(itemUsageContext: ItemUsageContext,blockPos: BlockPos,world: World,state: BlockState): ActionResult;
static method_34723(): BiMap;
static method_34721(blockState: BlockState,block: Block): BlockState;
static method_34722(): BiMap;
static UNWAXED_TO_WAXED_BLOCKS: Supplier;
static WAXED_TO_UNWAXED_BLOCKS: Supplier;
}

//net.minecraft.item.DyeItem
class DyeItem extends Item, SignChangingItem{
 getColor(): DyeColor;
 useOnEntity(stack: ItemStack,user: PlayerEntity,entity: LivingEntity,hand: Hand): ActionResult;
 useOnSign(world: World,signBlockEntity: SignBlockEntity,front: boolean,player: PlayerEntity): boolean;
}
class Static_DyeItem {
static byColor(color: DyeColor): DyeItem;
static DYES: Map;
}

//net.minecraft.item.InkSacItem
class InkSacItem extends Item, SignChangingItem{
 useOnSign(world: World,signBlockEntity: SignBlockEntity,front: boolean,player: PlayerEntity): boolean;
}
class Static_InkSacItem {
static method_49802(text: SignText): SignText;
}

//net.minecraft.resource.ProfiledResourceReload
class ProfiledResourceReload extends SimpleResourceReload{
}
class Static_ProfiledResourceReload {
static method_18225(): number;
static method_18356(resourceReloader: ResourceReloader,profilerSystem: ProfilerSystem,profilerSystem2: ProfilerSystem,atomicLong: AtomicLong,atomicLong2: AtomicLong,dummy: Void): ProfiledResourceReload_Summary;
static method_18354(executor: Executor,atomicLong: AtomicLong,application: Runnable): void;
static method_18224(): number;
static method_18358(executor: Executor,atomicLong: AtomicLong,preparation: Runnable): void;
static method_18355(executor: Executor,synchronizer: ResourceReloader_Synchronizer,resourceManager: ResourceManager,reloader: ResourceReloader,prepare: Executor,apply: Executor): CompletableFuture;
static method_18353(runnable: Runnable,atomicLong: AtomicLong): void;
static method_18357(runnable: Runnable,atomicLong: AtomicLong): void;
static LOGGER: Logger;
}

//net.minecraft.client.gui.screen.ingame.BeaconScreen$BaseButtonWidget
class BeaconScreen_BaseButtonWidget extends PressableWidget, BeaconScreen_BeaconButtonWidget{
 isDisabled(): boolean;
 appendClickableNarrations(builder: NarrationMessageBuilder): void;
 renderButton(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
 setDisabled(disabled: boolean): void;
}

//net.minecraft.client.realms.dto.RealmsServerPlayerList
class RealmsServerPlayerList extends ValueObject{
 serverId: long;
 players: List;
}
class Static_RealmsServerPlayerList {
static parse(node: JsonObject): RealmsServerPlayerList;
static parsePlayers(jsonArray: JsonArray): List;
static LOGGER: Logger;
static JSON_PARSER: JsonParser;
}

//net.minecraft.client.realms.dto.WorldTemplate
class WorldTemplate extends ValueObject{
 id: string;
 name: string;
 version: string;
 author: string;
 link: string;
 image: string;
 trailer: string;
 recommendedPlayers: string;
 type: WorldTemplate_WorldTemplateType;
}
class Static_WorldTemplate {
static parse(node: JsonObject): WorldTemplate;
static LOGGER: Logger;
}

//net.minecraft.client.realms.dto.RealmsServerPlayerLists
class RealmsServerPlayerLists extends ValueObject{
 servers: List;
}
class Static_RealmsServerPlayerLists {
static parse(json: string): RealmsServerPlayerLists;
static LOGGER: Logger;
}

//net.minecraft.client.realms.dto.Ops
class Ops extends ValueObject{
 ops: Set;
}
class Static_Ops {
static parse(json: string): Ops;
}

//net.minecraft.client.realms.dto.PendingInvite
class PendingInvite extends ValueObject{
 invitationId: string;
 worldName: string;
 worldOwnerName: string;
 worldOwnerUuid: string;
 date: Date;
}
class Static_PendingInvite {
static parse(json: JsonObject): PendingInvite;
static LOGGER: Logger;
}

//net.minecraft.client.realms.dto.RealmsServerList
class RealmsServerList extends ValueObject{
 servers: List;
}
class Static_RealmsServerList {
static parse(json: string): RealmsServerList;
static LOGGER: Logger;
}

//net.minecraft.client.realms.dto.RealmsServerAddress
class RealmsServerAddress extends ValueObject{
 address: string;
 resourcePackUrl: string;
 resourcePackHash: string;
}
class Static_RealmsServerAddress {
static parse(json: string): RealmsServerAddress;
static LOGGER: Logger;
}

//net.minecraft.client.realms.dto.RealmsServer
class RealmsServer extends ValueObject{
 getName(): string;
 equals(o: Object): boolean;
 hashCode(): number;
 clone(): RealmsServer;
 clone(): Object;
 setName(name: string): void;
 getDescription(): string;
 getWorldName(slotId: number): string;
 cloneSlots(slots: Map): Map;
 getMinigameName(): string;
 updateServerPing(serverPlayerList: RealmsServerPlayerList): void;
 setDescription(description: string): void;
 createServerInfo(address: string): ServerInfo;
 id: long;
 remoteSubscriptionId: string;
 name: string;
 description: string;
 state: RealmsServer_State;
 owner: string;
 ownerUUID: string;
 players: List;
 slots: Map;
 expired: boolean;
 expiredTrial: boolean;
 daysLeft: number;
 worldType: RealmsServer_WorldType;
 activeSlot: number;
 minigameName: string;
 minigameId: number;
 minigameImage: string;
 serverPing: RealmsServerPing;
}
class Static_RealmsServer {
static getState(state: string): RealmsServer_State;
static parse(json: string): RealmsServer;
static parse(node: JsonObject): RealmsServer;
static getWorldType(state: string): RealmsServer_WorldType;
static sortInvited(server: RealmsServer): void;
static method_25057(a: PlayerInfo,b: PlayerInfo): number;
static parseSlots(json: JsonArray): Map;
static getEmptySlots(): Map;
static parseInvited(jsonArray: JsonArray): List;
static LOGGER: Logger;
}

//net.minecraft.client.realms.dto.PlayerActivity
class PlayerActivity extends ValueObject{
 profileUuid: string;
 joinTime: long;
 leaveTime: long;
}
class Static_PlayerActivity {
static parse(json: JsonObject): PlayerActivity;
}

//net.minecraft.client.realms.dto.PendingInvitesList
class PendingInvitesList extends ValueObject{
 pendingInvites: List;
}
class Static_PendingInvitesList {
static parse(json: string): PendingInvitesList;
static LOGGER: Logger;
}

//net.minecraft.client.realms.dto.PlayerActivities
class PlayerActivities extends ValueObject{
 periodInMillis: long;
 playerActivityDto: List;
}
class Static_PlayerActivities {
static parse(json: string): PlayerActivities;
}

//net.minecraft.client.realms.dto.RealmsWorldOptions
class RealmsWorldOptions extends ValueObject{
 clone(): RealmsWorldOptions;
 clone(): Object;
 toJson(): string;
 getSlotName(index: number): string;
 setEmpty(empty: boolean): void;
 getDefaultSlotName(index: number): string;
 pvp: boolean;
 spawnAnimals: boolean;
 spawnMonsters: boolean;
 spawnNpcs: boolean;
 spawnProtection: number;
 commandBlocks: boolean;
 forceGameMode: boolean;
 difficulty: number;
 gameMode: number;
 templateId: long;
 templateImage: string;
 empty: boolean;
}
class Static_RealmsWorldOptions {
static parse(json: JsonObject): RealmsWorldOptions;
static getDefaults(): RealmsWorldOptions;
static getEmptyDefaults(): RealmsWorldOptions;
static field_32100: boolean;
static field_32101: boolean;
static field_32102: boolean;
static field_32103: boolean;
static field_32104: boolean;
static field_32105: number;
static field_32106: boolean;
static DEFAULT_DIFFICULTY: number;
static field_32108: number;
static DEFAULT_SLOT_NAME: string;
static DEFAULT_WORLD_TEMPLATE_ID: long;
static DEFAULT_WORLD_TEMPLATE_IMAGE: string;
}

//net.minecraft.client.realms.dto.RealmsServerPing
class RealmsServerPing extends ValueObject{
 nrOfPlayers: string;
 playerList: string;
}

//net.minecraft.client.realms.dto.Backup
class Backup extends ValueObject{
 isUploadedVersion(): boolean;
 setUploadedVersion(uploadedVersion: boolean): void;
 backupId: string;
 lastModifiedDate: Date;
 size: long;
 metadata: Map;
 changeList: Map;
}
class Static_Backup {
static parse(node: JsonElement): Backup;
static LOGGER: Logger;
}

//net.minecraft.client.realms.dto.BackupList
class BackupList extends ValueObject{
 backups: List;
}
class Static_BackupList {
static parse(json: string): BackupList;
static LOGGER: Logger;
}

//net.minecraft.client.realms.dto.UploadInfo
class UploadInfo extends ValueObject{
 getToken(): string;
 getUploadEndpoint(): URI;
 isWorldClosed(): boolean;
}
class Static_UploadInfo {
static getPort(port: number,urlPort: number): number;
static parse(json: string): UploadInfo;
static getUrl(url: string,port: number): URI;
static createRequestContent(token: string): string;
static getUrlWithProtocol(url: string,matcher: Matcher): string;
static LOGGER: Logger;
static HTTP_PROTOCOL: string;
static PORT: number;
static PROTOCOL_PATTERN: Pattern;
}

//net.minecraft.client.realms.dto.Subscription
class Subscription extends ValueObject{
 startDate: long;
 daysLeft: number;
 type: Subscription_SubscriptionType;
}
class Static_Subscription {
static parse(json: string): Subscription;
static typeFrom(subscriptionType: string): Subscription_SubscriptionType;
static LOGGER: Logger;
}

//net.minecraft.client.realms.dto.WorldTemplatePaginatedList
class WorldTemplatePaginatedList extends ValueObject{
 isLastPage(): boolean;
 templates: List;
 page: number;
 size: number;
 total: number;
}
class Static_WorldTemplatePaginatedList {
static parse(json: string): WorldTemplatePaginatedList;
static LOGGER: Logger;
}

//net.minecraft.client.realms.dto.WorldDownload
class WorldDownload extends ValueObject{
 downloadLink: string;
 resourcePackUrl: string;
 resourcePackHash: string;
}
class Static_WorldDownload {
static parse(json: string): WorldDownload;
static LOGGER: Logger;
}

//net.minecraft.client.realms.dto.RealmsNews
class RealmsNews extends ValueObject{
 newsLink: string;
}
class Static_RealmsNews {
static parse(json: string): RealmsNews;
static LOGGER: Logger;
}

//net.minecraft.server.dedicated.ServerPropertiesHandler
class ServerPropertiesHandler extends AbstractPropertiesHandler{
 createDimensionsRegistryHolder(dynamicRegistry: DynamicRegistryManager): DimensionOptionsRegistryHolder;
 onlineMode: boolean;
 preventProxyConnections: boolean;
 serverIp: string;
 spawnAnimals: boolean;
 spawnNpcs: boolean;
 pvp: boolean;
 allowFlight: boolean;
 motd: string;
 forceGameMode: boolean;
 enforceWhitelist: boolean;
 difficulty: Difficulty;
 gameMode: GameMode;
 levelName: string;
 serverPort: number;
 announcePlayerAchievements: Boolean;
 enableQuery: boolean;
 queryPort: number;
 enableRcon: boolean;
 rconPort: number;
 rconPassword: string;
 hardcore: boolean;
 allowNether: boolean;
 spawnMonsters: boolean;
 useNativeTransport: boolean;
 enableCommandBlock: boolean;
 spawnProtection: number;
 opPermissionLevel: number;
 functionPermissionLevel: number;
 maxTickTime: long;
 maxChainedNeighborUpdates: number;
 rateLimit: number;
 viewDistance: number;
 simulationDistance: number;
 maxPlayers: number;
 networkCompressionThreshold: number;
 broadcastRconToOps: boolean;
 broadcastConsoleToOps: boolean;
 maxWorldSize: number;
 syncChunkWrites: boolean;
 enableJmxMonitoring: boolean;
 enableStatus: boolean;
 hideOnlinePlayers: boolean;
 entityBroadcastRangePercentage: number;
 textFilteringConfig: string;
 serverResourcePackProperties: Optional;
 dataPackSettings: DataPackSettings;
 playerIdleTimeout: AbstractPropertiesHandler_PropertyAccessor;
 whiteList: AbstractPropertiesHandler_PropertyAccessor;
 enforceSecureProfile: boolean;
 generatorOptions: GeneratorOptions;
}
class Static_ServerPropertiesHandler {
static load(path: Path): ServerPropertiesHandler;
static parseDataPackSettings(enabled: string,disabled: string): DataPackSettings;
static getServerResourcePackProperties(url: string,sha1: string,hash: string,required: boolean,prompt: string): Optional;
static parseResourcePackPrompt(prompt: string): Text;
static method_16715(maxWorldSize: Integer): Integer;
static method_27905(percentage: Integer): Integer;
static method_41005(type: string): string;
static method_41186(generatorSettings: string): JsonObject;
static parseFeatureFlags(featureFlags: string): FeatureSet;
static method_45158(id: string,consumer: Consumer): void;
static LOGGER: Logger;
static SHA1_PATTERN: Pattern;
static COMMA_SPLITTER: Splitter;
}

//net.minecraft.world.gen.densityfunction.DensityFunctionTypes$LinearOperation
class DensityFunctionTypes_LinearOperation extends Record, DensityFunctionTypes_Unary, DensityFunctionTypes_BinaryOperationLike{
 type(): DensityFunctionTypes_BinaryOperationLike_Type;
 equals(object: Object): boolean;
 toString(): string;
 hashCode(): number;
 apply(visitor: DensityFunction_DensityFunctionVisitor): DensityFunction;
 apply(density: number): number;
 argument(): number;
 input(): DensityFunction;
 maxValue(): number;
 minValue(): number;
 argument2(): DensityFunction;
 argument1(): DensityFunction;
 specificType(): DensityFunctionTypes_LinearOperation_SpecificType;
}

//net.minecraft.world.gen.densityfunction.DensityFunctionTypes$BinaryOperation
class DensityFunctionTypes_BinaryOperation extends Record, DensityFunctionTypes_BinaryOperationLike{
 type(): DensityFunctionTypes_BinaryOperationLike_Type;
 equals(object: Object): boolean;
 toString(): string;
 hashCode(): number;
 apply(visitor: DensityFunction_DensityFunctionVisitor): DensityFunction;
 fill(densities: number[],applier: DensityFunction_EachApplier): void;
 maxValue(): number;
 sample(pos: DensityFunction_NoisePos): number;
 minValue(): number;
 argument2(): DensityFunction;
 argument1(): DensityFunction;
}

//net.minecraft.enchantment.VanishingCurseEnchantment
class VanishingCurseEnchantment extends Enchantment{
 isCursed(): boolean;
 isTreasure(): boolean;
 getMinPower(level: number): number;
 getMaxPower(level: number): number;
}

//net.minecraft.enchantment.FrostWalkerEnchantment
class FrostWalkerEnchantment extends Enchantment{
 getMaxLevel(): number;
 canAccept(other: Enchantment): boolean;
 isTreasure(): boolean;
 getMinPower(level: number): number;
 getMaxPower(level: number): number;
}
class Static_FrostWalkerEnchantment {
static freezeWater(entity: LivingEntity,world: World,blockPos: BlockPos,level: number): void;
}

//net.minecraft.enchantment.MultishotEnchantment
class MultishotEnchantment extends Enchantment{
 canAccept(other: Enchantment): boolean;
 getMinPower(level: number): number;
 getMaxPower(level: number): number;
}

//net.minecraft.enchantment.UnbreakingEnchantment
class UnbreakingEnchantment extends Enchantment{
 getMaxLevel(): number;
 getMinPower(level: number): number;
 isAcceptableItem(stack: ItemStack): boolean;
 getMaxPower(level: number): number;
}
class Static_UnbreakingEnchantment {
static shouldPreventDamage(item: ItemStack,level: number,random: Random): boolean;
}

//net.minecraft.enchantment.ThornsEnchantment
class ThornsEnchantment extends Enchantment{
 getMaxLevel(): number;
 onUserDamaged(user: LivingEntity,attacker: Entity,level: number): void;
 getMinPower(level: number): number;
 isAcceptableItem(stack: ItemStack): boolean;
 getMaxPower(level: number): number;
}
class Static_ThornsEnchantment {
static shouldDamageAttacker(level: number,random: Random): boolean;
static method_30345(entry: Map_Entry,entity: LivingEntity): void;
static getDamageAmount(level: number,random: Random): number;
static ATTACK_CHANCE_PER_LEVEL: number;
}

//net.minecraft.enchantment.AquaAffinityEnchantment
class AquaAffinityEnchantment extends Enchantment{
 getMinPower(level: number): number;
 getMaxPower(level: number): number;
}

//net.minecraft.enchantment.LureEnchantment
class LureEnchantment extends Enchantment{
 getMaxLevel(): number;
 getMinPower(level: number): number;
 getMaxPower(level: number): number;
}

//net.minecraft.enchantment.FireAspectEnchantment
class FireAspectEnchantment extends Enchantment{
 getMaxLevel(): number;
 getMinPower(level: number): number;
 getMaxPower(level: number): number;
}

//net.minecraft.enchantment.PowerEnchantment
class PowerEnchantment extends Enchantment{
 getMaxLevel(): number;
 getMinPower(level: number): number;
 getMaxPower(level: number): number;
}

//net.minecraft.enchantment.DamageEnchantment
class DamageEnchantment extends Enchantment{
 getMaxLevel(): number;
 getAttackDamage(level: number,group: EntityGroup): number;
 canAccept(other: Enchantment): boolean;
 onTargetDamaged(user: LivingEntity,target: Entity,level: number): void;
 getMinPower(level: number): number;
 isAcceptableItem(stack: ItemStack): boolean;
 getMaxPower(level: number): number;
 typeIndex: number;
}
class Static_DamageEnchantment {
static ALL_INDEX: number;
static UNDEAD_INDEX: number;
static ARTHROPODS_INDEX: number;
static TYPE_NAMES: String[];
static BASE_POWERS: number[];
static POWERS_PER_LEVEL: number[];
static MIN_MAX_POWER_DIFFERENCES: number[];
}

//net.minecraft.enchantment.DepthStriderEnchantment
class DepthStriderEnchantment extends Enchantment{
 getMaxLevel(): number;
 canAccept(other: Enchantment): boolean;
 getMinPower(level: number): number;
 getMaxPower(level: number): number;
}

//net.minecraft.enchantment.ProtectionEnchantment
class ProtectionEnchantment extends Enchantment{
 getMaxLevel(): number;
 getProtectionAmount(level: number,source: DamageSource): number;
 canAccept(other: Enchantment): boolean;
 getMinPower(level: number): number;
 getMaxPower(level: number): number;
 protectionType: ProtectionEnchantment_Type;
}
class Static_ProtectionEnchantment {
static transformExplosionKnockback(entity: LivingEntity,velocity: number): number;
static transformFireDuration(entity: LivingEntity,duration: number): number;
}

//net.minecraft.enchantment.RiptideEnchantment
class RiptideEnchantment extends Enchantment{
 getMaxLevel(): number;
 canAccept(other: Enchantment): boolean;
 getMinPower(level: number): number;
 getMaxPower(level: number): number;
}

//net.minecraft.enchantment.MendingEnchantment
class MendingEnchantment extends Enchantment{
 isTreasure(): boolean;
 getMinPower(level: number): number;
 getMaxPower(level: number): number;
}

//net.minecraft.enchantment.QuickChargeEnchantment
class QuickChargeEnchantment extends Enchantment{
 getMaxLevel(): number;
 getMinPower(level: number): number;
 getMaxPower(level: number): number;
}

//net.minecraft.enchantment.ImpalingEnchantment
class ImpalingEnchantment extends Enchantment{
 getMaxLevel(): number;
 getAttackDamage(level: number,group: EntityGroup): number;
 getMinPower(level: number): number;
 getMaxPower(level: number): number;
}

//net.minecraft.enchantment.PiercingEnchantment
class PiercingEnchantment extends Enchantment{
 getMaxLevel(): number;
 canAccept(other: Enchantment): boolean;
 getMinPower(level: number): number;
 getMaxPower(level: number): number;
}

//net.minecraft.enchantment.KnockbackEnchantment
class KnockbackEnchantment extends Enchantment{
 getMaxLevel(): number;
 getMinPower(level: number): number;
 getMaxPower(level: number): number;
}

//net.minecraft.enchantment.LuckEnchantment
class LuckEnchantment extends Enchantment{
 getMaxLevel(): number;
 canAccept(other: Enchantment): boolean;
 getMinPower(level: number): number;
 getMaxPower(level: number): number;
}

//net.minecraft.enchantment.InfinityEnchantment
class InfinityEnchantment extends Enchantment{
 canAccept(other: Enchantment): boolean;
 getMinPower(level: number): number;
 getMaxPower(level: number): number;
}

//net.minecraft.enchantment.SweepingEnchantment
class SweepingEnchantment extends Enchantment{
 getMaxLevel(): number;
 getMinPower(level: number): number;
 getMaxPower(level: number): number;
}
class Static_SweepingEnchantment {
static getMultiplier(level: number): number;
}

//net.minecraft.enchantment.LoyaltyEnchantment
class LoyaltyEnchantment extends Enchantment{
 getMaxLevel(): number;
 getMinPower(level: number): number;
 getMaxPower(level: number): number;
}

//net.minecraft.enchantment.FlameEnchantment
class FlameEnchantment extends Enchantment{
 getMinPower(level: number): number;
 getMaxPower(level: number): number;
}

//net.minecraft.enchantment.SwiftSneakEnchantment
class SwiftSneakEnchantment extends Enchantment{
 getMaxLevel(): number;
 isAvailableForRandomSelection(): boolean;
 isAvailableForEnchantedBookOffer(): boolean;
 isTreasure(): boolean;
 getMinPower(level: number): number;
 getMaxPower(level: number): number;
}

//net.minecraft.enchantment.RespirationEnchantment
class RespirationEnchantment extends Enchantment{
 getMaxLevel(): number;
 getMinPower(level: number): number;
 getMaxPower(level: number): number;
}

//net.minecraft.enchantment.SilkTouchEnchantment
class SilkTouchEnchantment extends Enchantment{
 canAccept(other: Enchantment): boolean;
 getMinPower(level: number): number;
 getMaxPower(level: number): number;
}

//net.minecraft.enchantment.ChannelingEnchantment
class ChannelingEnchantment extends Enchantment{
 getMinPower(level: number): number;
 getMaxPower(level: number): number;
}

//net.minecraft.enchantment.EfficiencyEnchantment
class EfficiencyEnchantment extends Enchantment{
 getMaxLevel(): number;
 getMinPower(level: number): number;
 isAcceptableItem(stack: ItemStack): boolean;
 getMaxPower(level: number): number;
}

//net.minecraft.enchantment.PunchEnchantment
class PunchEnchantment extends Enchantment{
 getMaxLevel(): number;
 getMinPower(level: number): number;
 getMaxPower(level: number): number;
}

//net.minecraft.enchantment.BindingCurseEnchantment
class BindingCurseEnchantment extends Enchantment{
 isCursed(): boolean;
 isTreasure(): boolean;
 getMinPower(level: number): number;
 isAcceptableItem(stack: ItemStack): boolean;
 getMaxPower(level: number): number;
}

//net.minecraft.enchantment.SoulSpeedEnchantment
class SoulSpeedEnchantment extends Enchantment{
 getMaxLevel(): number;
 isAvailableForRandomSelection(): boolean;
 isAvailableForEnchantedBookOffer(): boolean;
 isTreasure(): boolean;
 getMinPower(level: number): number;
 getMaxPower(level: number): number;
}

//net.minecraft.client.gui.widget.ToggleButtonWidget
class ToggleButtonWidget extends ClickableWidget{
 setTextureUV(u: number,v: number,pressedUOffset: number,hoverVOffset: number,texture: Identifier): void;
 setToggled(toggled: boolean): void;
 isToggled(): boolean;
 appendClickableNarrations(builder: NarrationMessageBuilder): void;
 renderButton(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
}

//net.minecraft.client.gui.widget.IconWidget
class IconWidget extends ClickableWidget{
 renderButton(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
}

//net.minecraft.client.gui.screen.recipebook.RecipeAlternativesWidget$AlternativeButtonWidget
class RecipeAlternativesWidget_AlternativeButtonWidget extends ClickableWidget, RecipeGridAligner{
 appendClickableNarrations(builder: NarrationMessageBuilder): void;
 renderButton(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
 acceptAlignedInput(inputs: Iterator,slot: number,amount: number,gridX: number,gridY: number): void;
}

//net.minecraft.client.gui.screen.recipebook.AnimatedResultButton
class AnimatedResultButton extends ClickableWidget{
 getWidth(): number;
 currentRecipe(): Recipe;
 hasResults(): boolean;
 showResultCollection(resultCollection: RecipeResultCollection,results: RecipeBookResults): void;
 getResultCollection(): RecipeResultCollection;
 getTooltip(): List;
 appendClickableNarrations(builder: NarrationMessageBuilder): void;
 renderButton(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
}
class Static_AnimatedResultButton {
static BACKGROUND_TEXTURE: Identifier;
static field_32414: number;
static field_32415: number;
static field_32413: number;
static MORE_RECIPES_TEXT: Text;
}

//net.minecraft.client.gui.widget.PressableWidget
class PressableWidget extends ClickableWidget{
 keyPressed(keyCode: number,scanCode: number,modifiers: number): boolean;
 onPress(): void;
 onClick(mouseX: number,mouseY: number): void;
 drawMessage(context: DrawContext,textRenderer: TextRenderer,color: number): void;
}
class Static_PressableWidget {
static field_43046: number;
static field_43047: number;
static field_43048: number;
static field_43100: number;
static field_43101: number;
static field_43050: number;
}

//net.minecraft.client.gui.widget.AbstractTextWidget
class AbstractTextWidget extends ClickableWidget{
 setTextColor(textColor: number): AbstractTextWidget;
}

//net.minecraft.client.gui.screen.GameModeSelectionScreen$ButtonWidget
class GameModeSelectionScreen_ButtonWidget extends ClickableWidget{
 isSelected(): boolean;
 setSelected(selected: boolean): void;
 appendClickableNarrations(builder: NarrationMessageBuilder): void;
 renderButton(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
}

//net.minecraft.client.gui.widget.TabButtonWidget
class TabButtonWidget extends ClickableWidget{
 renderButton(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
 playDownSound(soundManager: SoundManager): void;
 getTab(): Tab;
 drawMessage(context: DrawContext,textRenderer: TextRenderer,color: number): void;
 isCurrentTab(): boolean;
}
class Static_TabButtonWidget {
static TEXTURE: Identifier;
static field_43059: number;
static field_43060: number;
static field_43061: number;
static field_43062: number;
static field_43063: number;
static field_43064: number;
static field_43065: number;
static field_43066: number;
static field_43067: number;
}

//net.minecraft.client.gui.widget.SliderWidget
class SliderWidget extends ClickableWidget{
 setFocused(focused: boolean): void;
 keyPressed(keyCode: number,scanCode: number,modifiers: number): boolean;
 appendClickableNarrations(builder: NarrationMessageBuilder): void;
 renderButton(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
 onClick(mouseX: number,mouseY: number): void;
 playDownSound(soundManager: SoundManager): void;
 onRelease(mouseX: number,mouseY: number): void;
}
class Static_SliderWidget {
static TEXTURE: Identifier;
static field_43051: number;
static field_43052: number;
static field_43102: number;
static field_43103: number;
static field_43054: number;
static field_41788: number;
static field_41789: number;
static field_41790: number;
static field_41792: number;
static field_41793: number;
static field_41794: number;
static field_41795: number;
}

//net.minecraft.world.block.ChainRestrictedNeighborUpdater$SimpleEntry
class ChainRestrictedNeighborUpdater_SimpleEntry extends Record, ChainRestrictedNeighborUpdater_Entry{
 equals(object: Object): boolean;
 toString(): string;
 hashCode(): number;
 update(world: World): boolean;
 pos(): BlockPos;
 sourceBlock(): Block;
 sourcePos(): BlockPos;
}

//net.minecraft.world.block.ChainRestrictedNeighborUpdater$StateReplacementEntry
class ChainRestrictedNeighborUpdater_StateReplacementEntry extends Record, ChainRestrictedNeighborUpdater_Entry{
 equals(object: Object): boolean;
 toString(): string;
 hashCode(): number;
 update(world: World): boolean;
 pos(): BlockPos;
 direction(): Direction;
 neighborState(): BlockState;
 neighborPos(): BlockPos;
 updateLimit(): number;
 updateFlags(): number;
}

//net.minecraft.world.block.ChainRestrictedNeighborUpdater$StatefulEntry
class ChainRestrictedNeighborUpdater_StatefulEntry extends Record, ChainRestrictedNeighborUpdater_Entry{
 equals(object: Object): boolean;
 toString(): string;
 hashCode(): number;
 update(world: World): boolean;
 pos(): BlockPos;
 state(): BlockState;
 sourceBlock(): Block;
 sourcePos(): BlockPos;
 movedByPiston(): boolean;
}

//net.minecraft.client.gui.screen.pack.ResourcePackOrganizer$EnabledPack
class ResourcePackOrganizer_EnabledPack extends ResourcePackOrganizer_AbstractPack{
 isEnabled(): boolean;
 enable(): void;
 disable(): void;
}

//net.minecraft.client.gui.screen.pack.ResourcePackOrganizer$DisabledPack
class ResourcePackOrganizer_DisabledPack extends ResourcePackOrganizer_AbstractPack{
 isEnabled(): boolean;
 enable(): void;
 disable(): void;
}

//net.minecraft.resource.fs.ResourceFile$File
class ResourceFile_File extends Record, ResourceFile{
 equals(object: Object): boolean;
 toString(): string;
 hashCode(): number;
 contents(): Path;
}

//net.minecraft.resource.fs.ResourceFile$Directory
class ResourceFile_Directory extends Record, ResourceFile{
 equals(object: Object): boolean;
 toString(): string;
 hashCode(): number;
 children(): Map;
}

//net.minecraft.client.render.GameRenderer$1


//net.minecraft.client.resource.PeriodicNotificationManager
class PeriodicNotificationManager extends SinglePreparationResourceReloader, AutoCloseable{
 close(): void;
}
class Static_PeriodicNotificationManager {
static method_40194(entry: PeriodicNotificationManager_Entry): long;
static method_40191(l: long,entry: PeriodicNotificationManager_Entry): long;
static method_40193(instance: RecordCodecBuilder_Instance): App;
static method_40200(entry: PeriodicNotificationManager_Entry): boolean;
static CODEC: Codec;
static LOGGER: Logger;
}

//net.minecraft.resource.JsonDataLoader
class JsonDataLoader extends SinglePreparationResourceReloader{
}
class Static_JsonDataLoader {
static load(manager: ResourceManager,dataType: string,gson: Gson,results: Map): void;
static LOGGER: Logger;
}

//net.minecraft.client.sound.SoundManager
class SoundManager extends SinglePreparationResourceReloader{
 get(id: Identifier): WeightedSoundSet;
 stop(sound: SoundInstance): void;
 close(): void;
 getKeys(): Collection;
 tick(paused: boolean): void;
 registerListener(listener: SoundInstanceListener): void;
 getSoundDevices(): List;
 reloadSounds(): void;
 updateSoundVolume(category: SoundCategory,volume: number): void;
 playNextTick(sound: TickableSoundInstance): void;
 stopSounds(id: Identifier,soundCategory: SoundCategory): void;
 unregisterListener(listener: SoundInstanceListener): void;
 getDebugString(): string;
 play(sound: SoundInstance,delay: number): void;
 play(sound: SoundInstance): void;
 isPlaying(sound: SoundInstance): boolean;
 stopAll(): void;
 resumeAll(): void;
 pauseAll(): void;
 updateListenerPosition(camera: Camera): void;
}
class Static_SoundManager {
static isSoundResourcePresent(sound: Sound,id: Identifier,resourceFactory: ResourceFactory): boolean;
static MISSING_SOUND: Sound;
static INTENTIONALLY_EMPTY_ID: Identifier;
static INTENTIONALLY_EMPTY_SOUND_SET: WeightedSoundSet;
static INTENTIONALLY_EMPTY_SOUND: Sound;
static LOGGER: Logger;
static SOUNDS_JSON: string;
static GSON: Gson;
static TYPE: TypeToken;
}

//net.minecraft.client.resource.VideoWarningManager
class VideoWarningManager extends SinglePreparationResourceReloader{
 reset(): void;
 scheduleWarning(): void;
 canWarn(): boolean;
 hasCancelledAfterWarning(): boolean;
 acceptAfterWarnings(): void;
 cancelAfterWarnings(): void;
 getWarningsAsString(): string;
 getRendererWarning(): string;
 hasWarning(): boolean;
 shouldWarn(): boolean;
 getVersionWarning(): string;
 getVendorWarning(): string;
}
class Static_VideoWarningManager {
static compilePatterns(array: JsonArray,patterns: List): void;
static method_30059(list: List,json: JsonElement): void;
static loadWarnlist(resourceManager: ResourceManager,profiler: Profiler): JsonObject;
static method_30919(stringBuilder: StringBuilder,key: string,value: string): void;
static LOGGER: Logger;
static GPU_WARNLIST_ID: Identifier;
}

//net.minecraft.client.resource.GrassColormapResourceSupplier
class GrassColormapResourceSupplier extends SinglePreparationResourceReloader{
}
class Static_GrassColormapResourceSupplier {
static GRASS_COLORMAP_LOC: Identifier;
}

//net.minecraft.client.resource.SplashTextResourceSupplier
class SplashTextResourceSupplier extends SinglePreparationResourceReloader{
 get(): SplashTextRenderer;
}
class Static_SplashTextResourceSupplier {
static method_18664(splashText: string): boolean;
static RESOURCE_ID: Identifier;
static RANDOM: Random;
}

//net.minecraft.client.resource.FoliageColormapResourceSupplier
class FoliageColormapResourceSupplier extends SinglePreparationResourceReloader{
}
class Static_FoliageColormapResourceSupplier {
static FOLIAGE_COLORMAP: Identifier;
}

//net.minecraft.client.gl.WindowFramebuffer
class WindowFramebuffer extends Framebuffer{
}
class Static_WindowFramebuffer {
static DEFAULT_WIDTH: number;
static DEFAULT_HEIGHT: number;
static DEFAULT: WindowFramebuffer_Size;
}

//net.minecraft.client.gl.SimpleFramebuffer
class SimpleFramebuffer extends Framebuffer{
}

//net.minecraft.block.EntityShapeContext$1


//net.minecraft.block.BubbleColumnBlock
class BubbleColumnBlock extends Block, FluidDrainable{
 getStateForNeighborUpdate(state: BlockState,direction: Direction,neighborState: BlockState,world: WorldAccess,pos: BlockPos,neighborPos: BlockPos): BlockState;
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 tryDrainFluid(world: WorldAccess,pos: BlockPos,state: BlockState): ItemStack;
 canPlaceAt(state: BlockState,world: WorldView,pos: BlockPos): boolean;
 randomDisplayTick(state: BlockState,world: World,pos: BlockPos,random: Random): void;
 getBucketFillSound(): Optional;
 onEntityCollision(state: BlockState,world: World,pos: BlockPos,entity: Entity): void;
 scheduledTick(state: BlockState,world: ServerWorld,pos: BlockPos,random: Random): void;
 getFluidState(state: BlockState): FluidState;
 getRenderType(state: BlockState): BlockRenderType;
}
class Static_BubbleColumnBlock {
static update(world: WorldAccess,pos: BlockPos,water: BlockState,bubbleSource: BlockState): void;
static update(world: WorldAccess,pos: BlockPos,state: BlockState): void;
static getBubbleState(state: BlockState): BlockState;
static isStillWater(state: BlockState): boolean;
static DRAG: BooleanProperty;
static SCHEDULED_TICK_DELAY: number;
}

//net.minecraft.block.PowderSnowBlock
class PowderSnowBlock extends Block, FluidDrainable{
 tryDrainFluid(world: WorldAccess,pos: BlockPos,state: BlockState): ItemStack;
 getCameraCollisionShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 getBucketFillSound(): Optional;
 isSideInvisible(state: BlockState,stateFrom: BlockState,direction: Direction): boolean;
 canPathfindThrough(state: BlockState,world: BlockView,pos: BlockPos,type: NavigationType): boolean;
 onEntityCollision(state: BlockState,world: World,pos: BlockPos,entity: Entity): void;
 getCullingShape(state: BlockState,world: BlockView,pos: BlockPos): VoxelShape;
 getCollisionShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 onLandedUpon(world: World,state: BlockState,pos: BlockPos,entity: Entity,fallDistance: number): void;
}
class Static_PowderSnowBlock {
static canWalkOnPowderSnow(entity: Entity): boolean;
static field_31216: number;
static HORIZONTAL_MOVEMENT_MULTIPLIER: number;
static VERTICAL_MOVEMENT_MULTIPLIER: number;
static field_31219: number;
static FALLING_SHAPE: VoxelShape;
static field_36189: number;
static SMALL_FALL_SOUND_MAX_DISTANCE: number;
}

//net.minecraft.block.FluidBlock
class FluidBlock extends Block, FluidDrainable{
 getStateForNeighborUpdate(state: BlockState,direction: Direction,neighborState: BlockState,world: WorldAccess,pos: BlockPos,neighborPos: BlockPos): BlockState;
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 tryDrainFluid(world: WorldAccess,pos: BlockPos,state: BlockState): ItemStack;
 isTransparent(state: BlockState,world: BlockView,pos: BlockPos): boolean;
 hasRandomTicks(state: BlockState): boolean;
 getBucketFillSound(): Optional;
 isSideInvisible(state: BlockState,stateFrom: BlockState,direction: Direction): boolean;
 canPathfindThrough(state: BlockState,world: BlockView,pos: BlockPos,type: NavigationType): boolean;
 onBlockAdded(state: BlockState,world: World,pos: BlockPos,oldState: BlockState,notify: boolean): void;
 randomTick(state: BlockState,world: ServerWorld,pos: BlockPos,random: Random): void;
 neighborUpdate(state: BlockState,world: World,pos: BlockPos,sourceBlock: Block,sourcePos: BlockPos,notify: boolean): void;
 getFluidState(state: BlockState): FluidState;
 getCollisionShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 getRenderType(state: BlockState): BlockRenderType;
 getDroppedStacks(state: BlockState,builder: LootContextParameterSet_Builder): List;
}
class Static_FluidBlock {
static LEVEL: IntProperty;
static COLLISION_SHAPE: VoxelShape;
static FLOW_DIRECTIONS: ImmutableList;
}

//net.minecraft.client.item.TooltipContext$Default
class TooltipContext_Default extends Record, TooltipContext{
 equals(object: Object): boolean;
 toString(): string;
 hashCode(): number;
 creative(): boolean;
 isCreative(): boolean;
 isAdvanced(): boolean;
 advanced(): boolean;
 withCreative(): TooltipContext_Default;
}

//net.minecraft.block.KelpPlantBlock
class KelpPlantBlock extends AbstractPlantBlock, FluidFillable{
 canFillWithFluid(world: BlockView,pos: BlockPos,state: BlockState,fluid: Fluid): boolean;
 tryFillWithFluid(world: WorldAccess,pos: BlockPos,state: BlockState,fluidState: FluidState): boolean;
 getFluidState(state: BlockState): FluidState;
}

//net.minecraft.block.KelpBlock
class KelpBlock extends AbstractPlantStemBlock, FluidFillable{
 canFillWithFluid(world: BlockView,pos: BlockPos,state: BlockState,fluid: Fluid): boolean;
 tryFillWithFluid(world: WorldAccess,pos: BlockPos,state: BlockState,fluidState: FluidState): boolean;
 getFluidState(state: BlockState): FluidState;
 getPlacementState(ctx: ItemPlacementContext): BlockState;
}
class Static_KelpBlock {
static SHAPE: VoxelShape;
static GROWTH_CHANCE: number;
}

//net.minecraft.block.TallSeagrassBlock
class TallSeagrassBlock extends TallPlantBlock, FluidFillable{
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 canFillWithFluid(world: BlockView,pos: BlockPos,state: BlockState,fluid: Fluid): boolean;
 canPlaceAt(state: BlockState,world: WorldView,pos: BlockPos): boolean;
 tryFillWithFluid(world: WorldAccess,pos: BlockPos,state: BlockState,fluidState: FluidState): boolean;
 getFluidState(state: BlockState): FluidState;
 getPlacementState(ctx: ItemPlacementContext): BlockState;
 getPickStack(world: BlockView,pos: BlockPos,state: BlockState): ItemStack;
}
class Static_TallSeagrassBlock {
static HALF: EnumProperty;
static field_31262: number;
static SHAPE: VoxelShape;
}

//net.minecraft.server.command.CommandManager$1$1


//net.minecraft.registry.RegistryWrapper$1


//net.minecraft.world.gen.chunk.Blender$1


//net.minecraft.server.dedicated.MinecraftDedicatedServer
class MinecraftDedicatedServer extends MinecraftServer, DedicatedServer{
 exit(): void;
 shutdown(): void;
 getProperties(): ServerPropertiesHandler;
 getPort(): number;
 getLevelName(): string;
 getPlugins(): string;
 shouldEnforceSecureProfile(): boolean;
 areCommandBlocksEnabled(): boolean;
 shouldBroadcastConsoleToOps(): boolean;
 syncChunkWrites(): boolean;
 getResourcePackProperties(): Optional;
 getOpPermissionLevel(): number;
 createGui(): void;
 createFilterer(player: ServerPlayerEntity): TextStream;
 adjustTrackingDistance(initialDistance: number): number;
 isHardcore(): boolean;
 isHost(profile: GameProfile): boolean;
 getMaxTickTime(): long;
 isUsingNativeTransport(): boolean;
 setPlayerIdleTimeout(playerIdleTimeout: number): void;
 isNetherAllowed(): boolean;
 getPlayerManager(): PlayerManager;
 getPlayerManager(): DedicatedPlayerManager;
 getNetworkCompressionThreshold(): number;
 isRemote(): boolean;
 getForcedGameMode(): GameMode;
 getHostname(): string;
 getMotd(): string;
 executeRconCommand(command: string): string;
 acceptsStatusQuery(): boolean;
 shouldBroadcastRconToOps(): boolean;
 enqueueCommand(command: string,commandSource: ServerCommandSource): void;
 getMaxChainedNeighborUpdates(): number;
 getMaxWorldBorderRadius(): number;
 setUseWhitelist(useWhitelist: boolean): void;
 setupServer(): boolean;
 shouldSpawnNpcs(): boolean;
 shouldSpawnAnimals(): boolean;
 isSpawnProtected(world: ServerWorld,pos: BlockPos,player: PlayerEntity): boolean;
 addExtraSystemDetails(details: SystemDetails): SystemDetails;
 getFunctionPermissionLevel(): number;
 isMonsterSpawningEnabled(): boolean;
 getSpawnProtectionRadius(): number;
 executeQueuedCommands(): void;
 updateDifficulty(): void;
 hideOnlinePlayers(): boolean;
 tickWorlds(shouldKeepTicking: BooleanSupplier): void;
 getRateLimit(): number;
 isDedicated(): boolean;
 hasGui(): boolean;
 dumpProperties(file: Path): void;
}
class Static_MinecraftDedicatedServer {
static method_13943(): string;
static LOGGER: Logger;
static field_29662: number;
static field_29663: number;
}

//net.minecraft.client.texture.atlas.PalettedPermutationsAtlasSource$PalettedSpriteRegion
class PalettedPermutationsAtlasSource_PalettedSpriteRegion extends Record, AtlasSource_SpriteRegion{
 get(): Object;
 get(): SpriteContents;
 equals(object: Object): boolean;
 toString(): string;
 hashCode(): number;
 close(): void;
 palette(): Supplier;
 baseImage(): Sprite;
 permutationLocation(): Identifier;
}

//net.minecraft.world.gen.densityfunction.DensityFunctionTypes$BlendDensity
class DensityFunctionTypes_BlendDensity extends Record, DensityFunctionTypes_Positional{
 equals(object: Object): boolean;
 toString(): string;
 hashCode(): number;
 apply(visitor: DensityFunction_DensityFunctionVisitor): DensityFunction;
 apply(pos: DensityFunction_NoisePos,density: number): number;
 input(): DensityFunction;
 maxValue(): number;
 minValue(): number;
 getCodecHolder(): CodecHolder;
}
class Static_DensityFunctionTypes_BlendDensity {
static CODEC_HOLDER: CodecHolder;
}

//net.minecraft.world.gen.densityfunction.DensityFunctionTypes$WeirdScaledSampler
class DensityFunctionTypes_WeirdScaledSampler extends Record, DensityFunctionTypes_Positional{
 equals(object: Object): boolean;
 toString(): string;
 hashCode(): number;
 apply(visitor: DensityFunction_DensityFunctionVisitor): DensityFunction;
 apply(pos: DensityFunction_NoisePos,density: number): number;
 input(): DensityFunction;
 maxValue(): number;
 minValue(): number;
 getCodecHolder(): CodecHolder;
 noise(): DensityFunction_Noise;
 rarityValueMapper(): DensityFunctionTypes_WeirdScaledSampler_RarityValueMapper;
}
class Static_DensityFunctionTypes_WeirdScaledSampler {
static method_41072(instance: RecordCodecBuilder_Instance): App;
static WEIRD_SCALED_SAMPLER_CODEC: MapCodec;
static CODEC_HOLDER: CodecHolder;
}

//net.minecraft.client.gl.ShaderProgram$1


//net.minecraft.client.gl.EffectShaderStage$1


//net.minecraft.client.texture.PaintingManager
class PaintingManager extends SpriteAtlasHolder{
 getBackSprite(): Sprite;
 getPaintingSprite(variant: PaintingVariant): Sprite;
}
class Static_PaintingManager {
static PAINTING_BACK_ID: Identifier;
}

//net.minecraft.client.texture.StatusEffectSpriteManager
class StatusEffectSpriteManager extends SpriteAtlasHolder{
 getSprite(effect: StatusEffect): Sprite;
}

//net.minecraft.entity.ai.brain.task.RandomLookAroundTask
class RandomLookAroundTask extends MultiTickTask{
}

//net.minecraft.entity.ai.brain.task.SleepTask
class SleepTask extends MultiTickTask{
}
class Static_SleepTask {
static RUN_TIME: number;
}

//net.minecraft.entity.ai.brain.task.TemptTask
class TemptTask extends MultiTickTask{
}
class Static_TemptTask {
static method_52173(entity: LivingEntity): Double;
static method_51507(): ImmutableMap;
static TEMPTATION_COOLDOWN_TICKS: number;
static DEFAULT_STOP_DISTANCE: number;
}

//net.minecraft.entity.ai.brain.task.LongJumpTask
class LongJumpTask extends MultiTickTask{
}
class Static_LongJumpTask {
static shouldJumpTo(entity: MobEntity,pos: BlockPos): boolean;
static method_41341(blockPos: BlockPos,blockPos2: BlockPos): boolean;
static method_41340(blockPos: BlockPos,blockPos2: BlockPos): LongJumpTask_Target;
static MAX_COOLDOWN: number;
static TARGET_RETAIN_TIME: number;
static PATHING_DISTANCE: number;
static RUN_TIME: number;
static RAM_RANGES: List;
}

//net.minecraft.entity.ai.brain.task.RoarTask
class RoarTask extends MultiTickTask{
}
class Static_RoarTask {
static SOUND_DELAY: number;
static ANGER_INCREASE: number;
}

//net.minecraft.entity.ai.brain.task.GiveGiftsToHeroTask
class GiveGiftsToHeroTask extends MultiTickTask{
}
class Static_GiveGiftsToHeroTask {
static method_19960(gifts: HashMap): void;
static getNextGiftDelay(world: ServerWorld): number;
static MAX_DISTANCE: number;
static DEFAULT_DURATION: number;
static MAX_NEXT_GIFT_DELAY: number;
static RUN_TIME: number;
static GIFTS: Map;
static WALK_SPEED: number;
}

//net.minecraft.entity.ai.brain.task.CrossbowAttackTask
class CrossbowAttackTask extends MultiTickTask{
}
class Static_CrossbowAttackTask {
static getAttackTarget(entity: LivingEntity): LivingEntity;
static RUN_TIME: number;
}

//net.minecraft.entity.ai.brain.task.HoldTradeOffersTask
class HoldTradeOffersTask extends MultiTickTask{
 run(world: ServerWorld,entity: LivingEntity,time: long): void;
 run(serverWorld: ServerWorld,villagerEntity: VillagerEntity,l: long): void;
 shouldRun(serverWorld: ServerWorld,villagerEntity: VillagerEntity): boolean;
 shouldRun(world: ServerWorld,entity: LivingEntity): boolean;
 keepRunning(world: ServerWorld,entity: LivingEntity,time: long): void;
 keepRunning(serverWorld: ServerWorld,villagerEntity: VillagerEntity,l: long): void;
 finishRunning(serverWorld: ServerWorld,villagerEntity: VillagerEntity,l: long): void;
 finishRunning(world: ServerWorld,entity: LivingEntity,time: long): void;
 shouldKeepRunning(world: ServerWorld,entity: LivingEntity,time: long): boolean;
 shouldKeepRunning(serverWorld: ServerWorld,villagerEntity: VillagerEntity,l: long): boolean;
}
class Static_HoldTradeOffersTask {
static holdOffer(villager: VillagerEntity,stack: ItemStack): void;
static holdNothing(villager: VillagerEntity): void;
static RUN_INTERVAL: number;
static OFFER_SHOWING_INTERVAL: number;
}

//net.minecraft.entity.ai.brain.task.VillagerBreedTask
class VillagerBreedTask extends MultiTickTask{
}
class Static_VillagerBreedTask {
static method_24631(passiveEntity: PassiveEntity): boolean;
static method_43972(poiType: RegistryEntry): boolean;
static MAX_DISTANCE: number;
static APPROACH_SPEED: number;
}

//net.minecraft.entity.ai.brain.task.VillagerWorkTask
class VillagerWorkTask extends MultiTickTask{
}
class Static_VillagerWorkTask {
static method_19613(brain: Brain,pos: GlobalPos): void;
static RUN_TIME: number;
static MAX_DISTANCE: number;
}

//net.minecraft.entity.ai.brain.task.SonicBoomTask
class SonicBoomTask extends MultiTickTask{
}
class Static_SonicBoomTask {
static cooldown(warden: LivingEntity,cooldown: number): void;
static method_43265(wardenEntity: WardenEntity,serverWorld: ServerWorld,target: LivingEntity): void;
static method_43973(wardenEntity: WardenEntity,target: LivingEntity): void;
static method_43266(wardenEntity: WardenEntity,target: LivingEntity): boolean;
static HORIZONTAL_RANGE: number;
static VERTICAL_RANGE: number;
static field_38852: number;
static field_38853: number;
static COOLDOWN: number;
static SOUND_DELAY: number;
static RUN_TIME: number;
}

//net.minecraft.entity.ai.brain.task.FollowCustomerTask
class FollowCustomerTask extends MultiTickTask{
}

//net.minecraft.entity.ai.brain.task.LeapingChargeTask
class LeapingChargeTask extends MultiTickTask{
}
class Static_LeapingChargeTask {
static RUN_TIME: number;
}

//net.minecraft.entity.ai.brain.task.RamImpactTask
class RamImpactTask extends MultiTickTask{
}
class Static_RamImpactTask {
static RUN_TIME: number;
static SPEED_STRENGTH_MULTIPLIER: number;
}

//net.minecraft.entity.ai.brain.task.CelebrateRaidWinTask
class CelebrateRaidWinTask extends MultiTickTask{
}

//net.minecraft.entity.ai.brain.task.WanderAroundTask
class WanderAroundTask extends MultiTickTask{
}
class Static_WanderAroundTask {
static isTargetSpectator(target: WalkTarget): boolean;
static MAX_UPDATE_COUNTDOWN: number;
}

//net.minecraft.entity.ai.brain.task.BoneMealTask
class BoneMealTask extends MultiTickTask{
}
class Static_BoneMealTask {
static method_26325(villagerEntity: VillagerEntity,pos: BlockPos): void;
static MAX_DURATION: number;
}

//net.minecraft.entity.ai.brain.task.LookAroundTask
class LookAroundTask extends MultiTickTask{
}
class Static_LookAroundTask {
static method_18966(mobEntity: MobEntity,lookTarget: LookTarget): void;
static method_19569(mobEntity: MobEntity,lookTarget: LookTarget): boolean;
}

//net.minecraft.entity.ai.brain.task.BreedTask
class BreedTask extends MultiTickTask{
}
class Static_BreedTask {
static MAX_RANGE: number;
static MIN_BREED_TIME: number;
static RUN_TIME: number;
}

//net.minecraft.entity.ai.brain.task.FarmerVillagerTask
class FarmerVillagerTask extends MultiTickTask{
}
class Static_FarmerVillagerTask {
static MAX_RUN_TIME: number;
static WALK_SPEED: number;
}

//net.minecraft.entity.ai.brain.task.JumpInBedTask
class JumpInBedTask extends MultiTickTask{
}
class Static_JumpInBedTask {
static MAX_TICKS_OUT_OF_BED: number;
static MIN_JUMP_TICKS: number;
static JUMP_TIME_VARIANCE: number;
static TICKS_TO_NEXT_JUMP: number;
}

//net.minecraft.entity.ai.brain.task.FrogEatEntityTask
class FrogEatEntityTask extends MultiTickTask{
}
class Static_FrogEatEntityTask {
static RUN_TIME: number;
static CATCH_DURATION: number;
static EAT_DURATION: number;
static MAX_DISTANCE: number;
static VELOCITY_MULTIPLIER: number;
static UNREACHABLE_TONGUE_TARGETS_START_TIME: number;
static MAX_UNREACHABLE_TONGUE_TARGETS: number;
}

//net.minecraft.entity.ai.brain.task.DismountVehicleTask
class DismountVehicleTask extends MultiTickTask{
}

//net.minecraft.entity.ai.brain.task.DigTask
class DigTask extends MultiTickTask{
}

//net.minecraft.entity.ai.brain.task.GatherItemsVillagerTask
class GatherItemsVillagerTask extends MultiTickTask{
}
class Static_GatherItemsVillagerTask {
static method_19014(immutableSet: ImmutableSet,item: Item): boolean;
static giveHalfOfStack(villager: VillagerEntity,validItems: Set,target: LivingEntity): void;
static getGatherableItems(entity: VillagerEntity,target: VillagerEntity): Set;
static MAX_RANGE: number;
static WALK_TOGETHER_SPEED: number;
}

//net.minecraft.entity.ai.brain.task.PrepareRamTask
class PrepareRamTask extends MultiTickTask{
}
class Static_PrepareRamTask {
static method_36261(livingEntity: LivingEntity,start: BlockPos): PrepareRamTask_Ram;
static method_36265(entityNavigation: EntityNavigation,start: BlockPos): boolean;
static RUN_TIME: number;
}

//net.minecraft.entity.ai.brain.task.PanicTask
class PanicTask extends MultiTickTask{
}
class Static_PanicTask {
static isHostileNearby(entity: LivingEntity): boolean;
static wasHurt(entity: LivingEntity): boolean;
}

//net.minecraft.entity.ai.brain.task.StayAboveWaterTask
class StayAboveWaterTask extends MultiTickTask{
}

//net.minecraft.entity.ai.brain.task.GiveInventoryToLookTargetTask
class GiveInventoryToLookTargetTask extends MultiTickTask{
}
class Static_GiveInventoryToLookTargetTask {
static playThrowSound(entity: LivingEntity,stack: ItemStack,target: Vec3d): void;
static offsetTarget(target: LookTarget): Vec3d;
static COMPLETION_RANGE: number;
static ITEM_PICKUP_COOLDOWN_TICKS: number;
}

//net.minecraft.entity.ai.brain.task.SniffTask
class SniffTask extends MultiTickTask{
}
class Static_SniffTask {
static method_42159(wardenEntity: WardenEntity,target: LivingEntity): void;
static HORIZONTAL_RADIUS: number;
static VERTICAL_RADIUS: number;
}

//net.minecraft.entity.ai.brain.task.WalkTowardJobSiteTask
class WalkTowardJobSiteTask extends MultiTickTask{
}
class Static_WalkTowardJobSiteTask {
static method_29524(serverWorld: ServerWorld,pos: GlobalPos): void;
static method_29783(poiType: RegistryEntry): boolean;
static method_29250(activity: Activity): Boolean;
static RUN_TIME: number;
}

//net.minecraft.entity.ai.brain.task.CroakTask
class CroakTask extends MultiTickTask{
}
class Static_CroakTask {
static MAX_RUN_TICK: number;
static RUN_TIME: number;
}

//net.minecraft.entity.ai.brain.task.TemptationCooldownTask
class TemptationCooldownTask extends MultiTickTask{
}

//net.minecraft.entity.ai.brain.task.PlayDeadTask
class PlayDeadTask extends MultiTickTask{
}

//net.minecraft.entity.ai.brain.task.FleeTask
class FleeTask extends MultiTickTask{
}
class Static_FleeTask {
static method_51505(blockView: BlockView,pos: BlockPos): boolean;
static method_39763(blockView: BlockView,pos: BlockPos): boolean;
static method_51506(blockView: BlockView,posx: BlockPos): boolean;
static method_49488(entity: PathAwareEntity): boolean;
static MIN_RUN_TIME: number;
static MAX_RUN_TIME: number;
static HORIZONTAL_RANGE: number;
static VERTICAL_RANGE: number;
static PANIC_PREDICATE: Predicate;
}

//net.minecraft.entity.ai.brain.task.EmergeTask
class EmergeTask extends MultiTickTask{
}

//net.minecraft.registry.entry.RegistryEntryList$Named
class RegistryEntryList_Named extends RegistryEntryList_ListBacked{
 toString(): string;
 contains(entry: RegistryEntry): boolean;
 getTag(): TagKey;
 getStorage(): Either;
 getTagKey(): Optional;
 ownerEquals(owner: RegistryEntryOwner): boolean;
}

//net.minecraft.registry.entry.RegistryEntryList$Direct
class RegistryEntryList_Direct extends RegistryEntryList_ListBacked{
 toString(): string;
 contains(entry: RegistryEntry): boolean;
 getStorage(): Either;
 getTagKey(): Optional;
}

//net.minecraft.registry.tag.TagGroupLoader$TagDependencies
class TagGroupLoader_TagDependencies extends Record, DependencyTracker_Dependencies{
 equals(object: Object): boolean;
 toString(): string;
 hashCode(): number;
 entries(): List;
 forOptionalDependencies(callback: Consumer): void;
 forDependencies(callback: Consumer): void;
}
class Static_TagGroupLoader_TagDependencies {
static method_51481(consumer: Consumer,entry: TagGroupLoader_TrackedEntry): void;
static method_51479(consumer: Consumer,entry: TagGroupLoader_TrackedEntry): void;
}

//net.minecraft.client.font.FontManager$FontEntry
class FontManager_FontEntry extends Record, DependencyTracker_Dependencies{
 equals(object: Object): boolean;
 toString(): string;
 hashCode(): number;
 dependencies(): Set;
 builders(): List;
 fontId(): Identifier;
 addBuilder(key: FontManager_FontKey,provider: CompletableFuture): void;
 addReferenceBuilder(key: FontManager_FontKey,reference: FontLoader_Reference): void;
 getRequiredFontProviders(fontRetriever: Function): Optional;
 forOptionalDependencies(callback: Consumer): void;
 forDependencies(callback: Consumer): void;
}
class Static_FontManager_FontEntry {
static method_51633(builder: FontManager_Builder): Stream;
}

//net.minecraft.structure.rule.LinearPosRuleTest
class LinearPosRuleTest extends PosRuleTest{
 test(originalPos: BlockPos,currentPos: BlockPos,pivot: BlockPos,random: Random): boolean;
}
class Static_LinearPosRuleTest {
static method_28978(ruleTest: LinearPosRuleTest): Integer;
static method_28976(instance: RecordCodecBuilder_Instance): App;
static method_28980(ruleTest: LinearPosRuleTest): Float;
static method_28977(ruleTest: LinearPosRuleTest): Integer;
static method_28979(ruleTest: LinearPosRuleTest): Float;
static CODEC: Codec;
}

//net.minecraft.structure.rule.AlwaysTruePosRuleTest
class AlwaysTruePosRuleTest extends PosRuleTest{
 test(originalPos: BlockPos,currentPos: BlockPos,pivot: BlockPos,random: Random): boolean;
}
class Static_AlwaysTruePosRuleTest {
static method_28982(): AlwaysTruePosRuleTest;
static CODEC: Codec;
static INSTANCE: AlwaysTruePosRuleTest;
}

//net.minecraft.structure.rule.AxisAlignedLinearPosRuleTest
class AxisAlignedLinearPosRuleTest extends PosRuleTest{
 test(originalPos: BlockPos,currentPos: BlockPos,pivot: BlockPos,random: Random): boolean;
}
class Static_AxisAlignedLinearPosRuleTest {
static method_28963(ruleTest: AxisAlignedLinearPosRuleTest): Integer;
static method_28960(instance: RecordCodecBuilder_Instance): App;
static method_28965(ruleTest: AxisAlignedLinearPosRuleTest): Float;
static method_28964(ruleTest: AxisAlignedLinearPosRuleTest): Float;
static method_28962(ruleTest: AxisAlignedLinearPosRuleTest): Integer;
static method_28961(ruleTest: AxisAlignedLinearPosRuleTest): Direction_Axis;
static CODEC: Codec;
}

//net.minecraft.command.argument.RegistryEntryPredicateArgumentType$TagBased
class RegistryEntryPredicateArgumentType_TagBased extends Record, RegistryEntryPredicateArgumentType_EntryPredicate{
 equals(object: Object): boolean;
 toString(): string;
 hashCode(): number;
 test(entry: Object): boolean;
 test(registryEntry: RegistryEntry): boolean;
 getEntry(): Either;
 tag(): RegistryEntryList_Named;
 asString(): string;
 tryCast(registryRef: RegistryKey): Optional;
}

//net.minecraft.command.argument.RegistryEntryPredicateArgumentType$EntryBased
class RegistryEntryPredicateArgumentType_EntryBased extends Record, RegistryEntryPredicateArgumentType_EntryPredicate{
 value(): RegistryEntry_Reference;
 equals(object: Object): boolean;
 toString(): string;
 hashCode(): number;
 test(entry: Object): boolean;
 test(registryEntry: RegistryEntry): boolean;
 getEntry(): Either;
 asString(): string;
 tryCast(registryRef: RegistryKey): Optional;
}

//net.minecraft.util.collection.DataPool
class DataPool extends Pool{
 getDataOrEmpty(random: Random): Optional;
}
class Static_DataPool {
static of(object: Object): DataPool;
static builder(): DataPool_Builder;
static empty(): DataPool;
static createCodec(dataCodec: Codec): Codec;
static createEmptyAllowedCodec(dataCodec: Codec): Codec;
}

//net.minecraft.nbt.NbtTagSizeTracker$1


//net.minecraft.client.render.DimensionEffects$Overworld
class DimensionEffects_Overworld extends DimensionEffects{
 useThickFog(camX: number,camY: number): boolean;
 adjustFogColor(color: Vec3d,sunHeight: number): Vec3d;
}
class Static_DimensionEffects_Overworld {
static CLOUDS_HEIGHT: number;
}

//net.minecraft.client.render.DimensionEffects$Nether
class DimensionEffects_Nether extends DimensionEffects{
 useThickFog(camX: number,camY: number): boolean;
 adjustFogColor(color: Vec3d,sunHeight: number): Vec3d;
}

//net.minecraft.client.render.DimensionEffects$End
class DimensionEffects_End extends DimensionEffects{
 useThickFog(camX: number,camY: number): boolean;
 adjustFogColor(color: Vec3d,sunHeight: number): Vec3d;
 getFogColorOverride(skyAngle: number,tickDelta: number): number[];
}

//net.minecraft.screen.Property$1


//net.minecraft.screen.Property$2


//net.minecraft.screen.Property$3


//net.minecraft.client.gui.widget.AxisGridWidget
class AxisGridWidget extends WrapperWidget{
 add(widget: Widget): Widget;
 add(widget: Widget,positioner: Positioner): Widget;
 copyPositioner(): Positioner;
 refreshPositions(): void;
 getMainPositioner(): Positioner;
 forEachElement(consumer: Consumer): void;
}
class Static_AxisGridWidget {
static method_48230(consumer: Consumer,element: AxisGridWidget_Element): void;
}

//net.minecraft.client.gui.widget.SimplePositioningWidget
class SimplePositioningWidget extends WrapperWidget{
 add(widget: Widget,positioner: Positioner): Widget;
 add(widget: Widget): Widget;
 copyPositioner(): Positioner;
 setMinHeight(minWidth: number): SimplePositioningWidget;
 setMinWidth(minHeight: number): SimplePositioningWidget;
 refreshPositions(): void;
 getMainPositioner(): Positioner;
 setDimensions(minWidth: number,minHeight: number): SimplePositioningWidget;
 forEachElement(consumer: Consumer): void;
}
class Static_SimplePositioningWidget {
static setPos(widget: Widget,rect: ScreenRect,relativeX: number,relativeY: number): void;
static setPos(widget: Widget,rect: ScreenRect): void;
static setPos(widget: Widget,left: number,top: number,right: number,bottom: number): void;
static setPos(low: number,high: number,length: number,setter: Consumer,relative: number): void;
static setPos(widget: Widget,left: number,top: number,right: number,bottom: number,relativeX: number,relativeY: number): void;
static method_48228(consumer: Consumer,element: SimplePositioningWidget_Element): void;
}

//net.minecraft.client.gui.widget.GridWidget
class GridWidget extends WrapperWidget{
 add(widget: Widget,row: number,column: number,occupiedRows: number,occupiedColumns: number): Widget;
 add(widget: Widget,row: number,column: number,positioner: Positioner): Widget;
 add(widget: Widget,row: number,column: number,occupiedRows: number,occupiedColumns: number,positioner: Positioner): Widget;
 add(widget: Widget,row: number,column: number): Widget;
 copyPositioner(): Positioner;
 setRowSpacing(rowSpacing: number): GridWidget;
 refreshPositions(): void;
 getMainPositioner(): Positioner;
 forEachElement(consumer: Consumer): void;
 createAdder(columns: number): GridWidget_Adder;
 setColumnSpacing(columnSpacing: number): GridWidget;
 setSpacing(spacing: number): GridWidget;
}

//net.minecraft.advancement.criterion.ConsumeItemCriterion
class ConsumeItemCriterion extends AbstractCriterion{
 trigger(player: ServerPlayerEntity,stack: ItemStack): void;
 getId(): Identifier;
 conditionsFromJson(jsonObject: JsonObject,lootContextPredicate: LootContextPredicate,advancementEntityPredicateDeserializer: AdvancementEntityPredicateDeserializer): ConsumeItemCriterion_Conditions;
 conditionsFromJson(obj: JsonObject,playerPredicate: LootContextPredicate,predicateDeserializer: AdvancementEntityPredicateDeserializer): AbstractCriterionConditions;
}
class Static_ConsumeItemCriterion {
static method_22460(itemStack: ItemStack,conditions: ConsumeItemCriterion_Conditions): boolean;
static ID: Identifier;
}

//net.minecraft.advancement.criterion.UsingItemCriterion
class UsingItemCriterion extends AbstractCriterion{
 trigger(player: ServerPlayerEntity,stack: ItemStack): void;
 getId(): Identifier;
 conditionsFromJson(jsonObject: JsonObject,lootContextPredicate: LootContextPredicate,advancementEntityPredicateDeserializer: AdvancementEntityPredicateDeserializer): UsingItemCriterion_Conditions;
 conditionsFromJson(obj: JsonObject,playerPredicate: LootContextPredicate,predicateDeserializer: AdvancementEntityPredicateDeserializer): AbstractCriterionConditions;
}
class Static_UsingItemCriterion {
static method_37263(itemStack: ItemStack,conditions: UsingItemCriterion_Conditions): boolean;
static ID: Identifier;
}

//net.minecraft.advancement.criterion.SummonedEntityCriterion
class SummonedEntityCriterion extends AbstractCriterion{
 trigger(player: ServerPlayerEntity,entity: Entity): void;
 getId(): Identifier;
 conditionsFromJson(jsonObject: JsonObject,lootContextPredicate: LootContextPredicate,advancementEntityPredicateDeserializer: AdvancementEntityPredicateDeserializer): SummonedEntityCriterion_Conditions;
 conditionsFromJson(obj: JsonObject,playerPredicate: LootContextPredicate,predicateDeserializer: AdvancementEntityPredicateDeserializer): AbstractCriterionConditions;
}
class Static_SummonedEntityCriterion {
static method_22537(lootContext: LootContext,conditions: SummonedEntityCriterion_Conditions): boolean;
static ID: Identifier;
}

//net.minecraft.advancement.criterion.TravelCriterion
class TravelCriterion extends AbstractCriterion{
 trigger(player: ServerPlayerEntity,startPos: Vec3d): void;
 getId(): Identifier;
 conditionsFromJson(obj: JsonObject,playerPredicate: LootContextPredicate,predicateDeserializer: AdvancementEntityPredicateDeserializer): AbstractCriterionConditions;
 conditionsFromJson(jsonObject: JsonObject,lootContextPredicate: LootContextPredicate,advancementEntityPredicateDeserializer: AdvancementEntityPredicateDeserializer): TravelCriterion_Conditions;
}
class Static_TravelCriterion {
static method_22486(serverPlayerEntity: ServerPlayerEntity,vec3d: Vec3d,vec3d2: Vec3d,conditions: TravelCriterion_Conditions): boolean;
}

//net.minecraft.advancement.criterion.PlayerGeneratesContainerLootCriterion
class PlayerGeneratesContainerLootCriterion extends AbstractCriterion{
 trigger(player: ServerPlayerEntity,id: Identifier): void;
 getId(): Identifier;
}
class Static_PlayerGeneratesContainerLootCriterion {
static method_27992(identifier: Identifier,conditions: PlayerGeneratesContainerLootCriterion_Conditions): boolean;
static ID: Identifier;
}

//net.minecraft.advancement.criterion.EntityHurtPlayerCriterion
class EntityHurtPlayerCriterion extends AbstractCriterion{
 trigger(player: ServerPlayerEntity,source: DamageSource,dealt: number,taken: number,blocked: boolean): void;
 getId(): Identifier;
 conditionsFromJson(jsonObject: JsonObject,lootContextPredicate: LootContextPredicate,advancementEntityPredicateDeserializer: AdvancementEntityPredicateDeserializer): EntityHurtPlayerCriterion_Conditions;
 conditionsFromJson(obj: JsonObject,playerPredicate: LootContextPredicate,predicateDeserializer: AdvancementEntityPredicateDeserializer): AbstractCriterionConditions;
}
class Static_EntityHurtPlayerCriterion {
static method_22468(serverPlayerEntity: ServerPlayerEntity,damageSource: DamageSource,f: number,g: number,bl: boolean,conditions: EntityHurtPlayerCriterion_Conditions): boolean;
static ID: Identifier;
}

//net.minecraft.advancement.criterion.FilledBucketCriterion
class FilledBucketCriterion extends AbstractCriterion{
 trigger(player: ServerPlayerEntity,stack: ItemStack): void;
 getId(): Identifier;
 conditionsFromJson(jsonObject: JsonObject,lootContextPredicate: LootContextPredicate,advancementEntityPredicateDeserializer: AdvancementEntityPredicateDeserializer): FilledBucketCriterion_Conditions;
 conditionsFromJson(obj: JsonObject,playerPredicate: LootContextPredicate,predicateDeserializer: AdvancementEntityPredicateDeserializer): AbstractCriterionConditions;
}
class Static_FilledBucketCriterion {
static method_22471(itemStack: ItemStack,conditions: FilledBucketCriterion_Conditions): boolean;
static ID: Identifier;
}

//net.minecraft.advancement.criterion.InventoryChangedCriterion
class InventoryChangedCriterion extends AbstractCriterion{
 trigger(player: ServerPlayerEntity,inventory: PlayerInventory,stack: ItemStack): void;
 getId(): Identifier;
 conditionsFromJson(jsonObject: JsonObject,lootContextPredicate: LootContextPredicate,advancementEntityPredicateDeserializer: AdvancementEntityPredicateDeserializer): InventoryChangedCriterion_Conditions;
 conditionsFromJson(obj: JsonObject,playerPredicate: LootContextPredicate,predicateDeserializer: AdvancementEntityPredicateDeserializer): AbstractCriterionConditions;
}
class Static_InventoryChangedCriterion {
static method_22476(playerInventory: PlayerInventory,itemStack: ItemStack,i: number,j: number,k: number,conditions: InventoryChangedCriterion_Conditions): boolean;
static ID: Identifier;
}

//net.minecraft.advancement.criterion.KilledByCrossbowCriterion
class KilledByCrossbowCriterion extends AbstractCriterion{
 trigger(player: ServerPlayerEntity,piercingKilledEntities: Collection): void;
 getId(): Identifier;
 conditionsFromJson(jsonObject: JsonObject,lootContextPredicate: LootContextPredicate,advancementEntityPredicateDeserializer: AdvancementEntityPredicateDeserializer): KilledByCrossbowCriterion_Conditions;
 conditionsFromJson(obj: JsonObject,playerPredicate: LootContextPredicate,predicateDeserializer: AdvancementEntityPredicateDeserializer): AbstractCriterionConditions;
}
class Static_KilledByCrossbowCriterion {
static method_22478(list: List,set: Set,conditions: KilledByCrossbowCriterion_Conditions): boolean;
static ID: Identifier;
}

//net.minecraft.advancement.criterion.TameAnimalCriterion
class TameAnimalCriterion extends AbstractCriterion{
 trigger(player: ServerPlayerEntity,entity: AnimalEntity): void;
 getId(): Identifier;
 conditionsFromJson(jsonObject: JsonObject,lootContextPredicate: LootContextPredicate,advancementEntityPredicateDeserializer: AdvancementEntityPredicateDeserializer): TameAnimalCriterion_Conditions;
 conditionsFromJson(obj: JsonObject,playerPredicate: LootContextPredicate,predicateDeserializer: AdvancementEntityPredicateDeserializer): AbstractCriterionConditions;
}
class Static_TameAnimalCriterion {
static method_22538(lootContext: LootContext,conditions: TameAnimalCriterion_Conditions): boolean;
static ID: Identifier;
}

//net.minecraft.advancement.criterion.UsedTotemCriterion
class UsedTotemCriterion extends AbstractCriterion{
 trigger(player: ServerPlayerEntity,stack: ItemStack): void;
 getId(): Identifier;
 conditionsFromJson(jsonObject: JsonObject,lootContextPredicate: LootContextPredicate,advancementEntityPredicateDeserializer: AdvancementEntityPredicateDeserializer): UsedTotemCriterion_Conditions;
 conditionsFromJson(obj: JsonObject,playerPredicate: LootContextPredicate,predicateDeserializer: AdvancementEntityPredicateDeserializer): AbstractCriterionConditions;
}
class Static_UsedTotemCriterion {
static method_22541(itemStack: ItemStack,conditions: UsedTotemCriterion_Conditions): boolean;
static ID: Identifier;
}

//net.minecraft.advancement.criterion.SlideDownBlockCriterion
class SlideDownBlockCriterion extends AbstractCriterion{
 trigger(player: ServerPlayerEntity,state: BlockState): void;
 getId(): Identifier;
 conditionsFromJson(obj: JsonObject,playerPredicate: LootContextPredicate,predicateDeserializer: AdvancementEntityPredicateDeserializer): AbstractCriterionConditions;
 conditionsFromJson(jsonObject: JsonObject,lootContextPredicate: LootContextPredicate,advancementEntityPredicateDeserializer: AdvancementEntityPredicateDeserializer): SlideDownBlockCriterion_Conditions;
}
class Static_SlideDownBlockCriterion {
static getBlock(root: JsonObject): Block;
static method_23905(block: Block,key: string): void;
static method_23908(identifier: Identifier): JsonSyntaxException;
static method_23906(blockState: BlockState,conditions: SlideDownBlockCriterion_Conditions): boolean;
static ID: Identifier;
}

//net.minecraft.advancement.criterion.CuredZombieVillagerCriterion
class CuredZombieVillagerCriterion extends AbstractCriterion{
 trigger(player: ServerPlayerEntity,zombie: ZombieEntity,villager: VillagerEntity): void;
 getId(): Identifier;
 conditionsFromJson(jsonObject: JsonObject,lootContextPredicate: LootContextPredicate,advancementEntityPredicateDeserializer: AdvancementEntityPredicateDeserializer): CuredZombieVillagerCriterion_Conditions;
 conditionsFromJson(obj: JsonObject,playerPredicate: LootContextPredicate,predicateDeserializer: AdvancementEntityPredicateDeserializer): AbstractCriterionConditions;
}
class Static_CuredZombieVillagerCriterion {
static method_22461(lootContext: LootContext,lootContext2: LootContext,conditions: CuredZombieVillagerCriterion_Conditions): boolean;
static ID: Identifier;
}

//net.minecraft.advancement.criterion.LightningStrikeCriterion
class LightningStrikeCriterion extends AbstractCriterion{
 trigger(player: ServerPlayerEntity,lightning: LightningEntity,bystanders: List): void;
 getId(): Identifier;
 conditionsFromJson(obj: JsonObject,playerPredicate: LootContextPredicate,predicateDeserializer: AdvancementEntityPredicateDeserializer): AbstractCriterionConditions;
 conditionsFromJson(jsonObject: JsonObject,lootContextPredicate: LootContextPredicate,advancementEntityPredicateDeserializer: AdvancementEntityPredicateDeserializer): LightningStrikeCriterion_Conditions;
}
class Static_LightningStrikeCriterion {
static method_37242(lootContext: LootContext,list: List,conditions: LightningStrikeCriterion_Conditions): boolean;
static method_37239(serverPlayerEntity: ServerPlayerEntity,bystander: Entity): LootContext;
static ID: Identifier;
}

//net.minecraft.advancement.criterion.PlayerInteractedWithEntityCriterion
class PlayerInteractedWithEntityCriterion extends AbstractCriterion{
 trigger(player: ServerPlayerEntity,stack: ItemStack,entity: Entity): void;
 getId(): Identifier;
}
class Static_PlayerInteractedWithEntityCriterion {
static method_30095(itemStack: ItemStack,lootContext: LootContext,conditions: PlayerInteractedWithEntityCriterion_Conditions): boolean;
static ID: Identifier;
}

//net.minecraft.advancement.criterion.ChangedDimensionCriterion
class ChangedDimensionCriterion extends AbstractCriterion{
 trigger(player: ServerPlayerEntity,from: RegistryKey,to: RegistryKey): void;
 getId(): Identifier;
 conditionsFromJson(jsonObject: JsonObject,lootContextPredicate: LootContextPredicate,advancementEntityPredicateDeserializer: AdvancementEntityPredicateDeserializer): ChangedDimensionCriterion_Conditions;
 conditionsFromJson(obj: JsonObject,playerPredicate: LootContextPredicate,predicateDeserializer: AdvancementEntityPredicateDeserializer): AbstractCriterionConditions;
}
class Static_ChangedDimensionCriterion {
static method_22457(registryKey: RegistryKey,registryKey2: RegistryKey,conditions: ChangedDimensionCriterion_Conditions): boolean;
static ID: Identifier;
}

//net.minecraft.advancement.criterion.EnterBlockCriterion
class EnterBlockCriterion extends AbstractCriterion{
 trigger(player: ServerPlayerEntity,state: BlockState): void;
 getId(): Identifier;
 conditionsFromJson(obj: JsonObject,playerPredicate: LootContextPredicate,predicateDeserializer: AdvancementEntityPredicateDeserializer): AbstractCriterionConditions;
 conditionsFromJson(jsonObject: JsonObject,lootContextPredicate: LootContextPredicate,advancementEntityPredicateDeserializer: AdvancementEntityPredicateDeserializer): EnterBlockCriterion_Conditions;
}
class Static_EnterBlockCriterion {
static getBlock(obj: JsonObject): Block;
static method_22464(block: Block,name: string): void;
static method_17850(identifier: Identifier): JsonSyntaxException;
static method_22465(blockState: BlockState,conditions: EnterBlockCriterion_Conditions): boolean;
static ID: Identifier;
}

//net.minecraft.advancement.criterion.ConstructBeaconCriterion
class ConstructBeaconCriterion extends AbstractCriterion{
 trigger(player: ServerPlayerEntity,level: number): void;
 getId(): Identifier;
 conditionsFromJson(jsonObject: JsonObject,lootContextPredicate: LootContextPredicate,advancementEntityPredicateDeserializer: AdvancementEntityPredicateDeserializer): ConstructBeaconCriterion_Conditions;
 conditionsFromJson(obj: JsonObject,playerPredicate: LootContextPredicate,predicateDeserializer: AdvancementEntityPredicateDeserializer): AbstractCriterionConditions;
}
class Static_ConstructBeaconCriterion {
static method_22459(i: number,conditions: ConstructBeaconCriterion_Conditions): boolean;
static ID: Identifier;
}

//net.minecraft.advancement.criterion.FishingRodHookedCriterion
class FishingRodHookedCriterion extends AbstractCriterion{
 trigger(player: ServerPlayerEntity,rod: ItemStack,bobber: FishingBobberEntity,fishingLoots: Collection): void;
 getId(): Identifier;
 conditionsFromJson(jsonObject: JsonObject,lootContextPredicate: LootContextPredicate,advancementEntityPredicateDeserializer: AdvancementEntityPredicateDeserializer): FishingRodHookedCriterion_Conditions;
 conditionsFromJson(obj: JsonObject,playerPredicate: LootContextPredicate,predicateDeserializer: AdvancementEntityPredicateDeserializer): AbstractCriterionConditions;
}
class Static_FishingRodHookedCriterion {
static method_22472(itemStack: ItemStack,lootContext: LootContext,collection: Collection,conditions: FishingRodHookedCriterion_Conditions): boolean;
static ID: Identifier;
}

//net.minecraft.advancement.criterion.RecipeCraftedCriterion
class RecipeCraftedCriterion extends AbstractCriterion{
 trigger(player: ServerPlayerEntity,recipeId: Identifier,ingredients: List): void;
 getId(): Identifier;
}
class Static_RecipeCraftedCriterion {
static method_51349(identifier: Identifier,list: List,conditions: RecipeCraftedCriterion_Conditions): boolean;
static ID: Identifier;
}

//net.minecraft.advancement.criterion.ItemCriterion
class ItemCriterion extends AbstractCriterion{
 trigger(player: ServerPlayerEntity,pos: BlockPos,stack: ItemStack): void;
 getId(): Identifier;
 conditionsFromJson(obj: JsonObject,playerPredicate: LootContextPredicate,predicateDeserializer: AdvancementEntityPredicateDeserializer): AbstractCriterionConditions;
 conditionsFromJson(jsonObject: JsonObject,lootContextPredicate: LootContextPredicate,advancementEntityPredicateDeserializer: AdvancementEntityPredicateDeserializer): ItemCriterion_Conditions;
}
class Static_ItemCriterion {
static method_23888(lootContext: LootContext,conditions: ItemCriterion_Conditions): boolean;
}

//net.minecraft.advancement.criterion.ItemDurabilityChangedCriterion
class ItemDurabilityChangedCriterion extends AbstractCriterion{
 trigger(player: ServerPlayerEntity,stack: ItemStack,durability: number): void;
 getId(): Identifier;
 conditionsFromJson(jsonObject: JsonObject,lootContextPredicate: LootContextPredicate,advancementEntityPredicateDeserializer: AdvancementEntityPredicateDeserializer): ItemDurabilityChangedCriterion_Conditions;
 conditionsFromJson(obj: JsonObject,playerPredicate: LootContextPredicate,predicateDeserializer: AdvancementEntityPredicateDeserializer): AbstractCriterionConditions;
}
class Static_ItemDurabilityChangedCriterion {
static method_22477(itemStack: ItemStack,i: number,conditions: ItemDurabilityChangedCriterion_Conditions): boolean;
static ID: Identifier;
}

//net.minecraft.advancement.criterion.BeeNestDestroyedCriterion
class BeeNestDestroyedCriterion extends AbstractCriterion{
 trigger(player: ServerPlayerEntity,state: BlockState,stack: ItemStack,beeCount: number): void;
 getId(): Identifier;
 conditionsFromJson(jsonObject: JsonObject,lootContextPredicate: LootContextPredicate,advancementEntityPredicateDeserializer: AdvancementEntityPredicateDeserializer): BeeNestDestroyedCriterion_Conditions;
 conditionsFromJson(obj: JsonObject,playerPredicate: LootContextPredicate,predicateDeserializer: AdvancementEntityPredicateDeserializer): AbstractCriterionConditions;
}
class Static_BeeNestDestroyedCriterion {
static getBlock(root: JsonObject): Block;
static method_23874(identifier: Identifier): JsonSyntaxException;
static method_23872(blockState: BlockState,itemStack: ItemStack,i: number,conditions: BeeNestDestroyedCriterion_Conditions): boolean;
static ID: Identifier;
}

//net.minecraft.advancement.criterion.BrewedPotionCriterion
class BrewedPotionCriterion extends AbstractCriterion{
 trigger(player: ServerPlayerEntity,potion: Potion): void;
 getId(): Identifier;
 conditionsFromJson(obj: JsonObject,playerPredicate: LootContextPredicate,predicateDeserializer: AdvancementEntityPredicateDeserializer): AbstractCriterionConditions;
 conditionsFromJson(jsonObject: JsonObject,lootContextPredicate: LootContextPredicate,advancementEntityPredicateDeserializer: AdvancementEntityPredicateDeserializer): BrewedPotionCriterion_Conditions;
}
class Static_BrewedPotionCriterion {
static method_17826(identifier: Identifier): JsonSyntaxException;
static method_22456(potion: Potion,conditions: BrewedPotionCriterion_Conditions): boolean;
static ID: Identifier;
}

//net.minecraft.advancement.criterion.TargetHitCriterion
class TargetHitCriterion extends AbstractCriterion{
 trigger(player: ServerPlayerEntity,projectile: Entity,hitPos: Vec3d,signalStrength: number): void;
 getId(): Identifier;
 conditionsFromJson(jsonObject: JsonObject,lootContextPredicate: LootContextPredicate,advancementEntityPredicateDeserializer: AdvancementEntityPredicateDeserializer): TargetHitCriterion_Conditions;
 conditionsFromJson(obj: JsonObject,playerPredicate: LootContextPredicate,predicateDeserializer: AdvancementEntityPredicateDeserializer): AbstractCriterionConditions;
}
class Static_TargetHitCriterion {
static method_24951(lootContext: LootContext,vec3d: Vec3d,i: number,conditions: TargetHitCriterion_Conditions): boolean;
static ID: Identifier;
}

//net.minecraft.advancement.criterion.ShotCrossbowCriterion
class ShotCrossbowCriterion extends AbstractCriterion{
 trigger(player: ServerPlayerEntity,stack: ItemStack): void;
 getId(): Identifier;
 conditionsFromJson(jsonObject: JsonObject,lootContextPredicate: LootContextPredicate,advancementEntityPredicateDeserializer: AdvancementEntityPredicateDeserializer): ShotCrossbowCriterion_Conditions;
 conditionsFromJson(obj: JsonObject,playerPredicate: LootContextPredicate,predicateDeserializer: AdvancementEntityPredicateDeserializer): AbstractCriterionConditions;
}
class Static_ShotCrossbowCriterion {
static method_22509(itemStack: ItemStack,conditions: ShotCrossbowCriterion_Conditions): boolean;
static ID: Identifier;
}

//net.minecraft.advancement.criterion.RecipeUnlockedCriterion
class RecipeUnlockedCriterion extends AbstractCriterion{
 trigger(player: ServerPlayerEntity,recipe: Recipe): void;
 getId(): Identifier;
 conditionsFromJson(jsonObject: JsonObject,lootContextPredicate: LootContextPredicate,advancementEntityPredicateDeserializer: AdvancementEntityPredicateDeserializer): RecipeUnlockedCriterion_Conditions;
 conditionsFromJson(obj: JsonObject,playerPredicate: LootContextPredicate,predicateDeserializer: AdvancementEntityPredicateDeserializer): AbstractCriterionConditions;
}
class Static_RecipeUnlockedCriterion {
static create(id: Identifier): RecipeUnlockedCriterion_Conditions;
static method_22508(recipe: Recipe,conditions: RecipeUnlockedCriterion_Conditions): boolean;
static ID: Identifier;
}

//net.minecraft.advancement.criterion.EffectsChangedCriterion
class EffectsChangedCriterion extends AbstractCriterion{
 trigger(player: ServerPlayerEntity,source: Entity): void;
 getId(): Identifier;
 conditionsFromJson(jsonObject: JsonObject,lootContextPredicate: LootContextPredicate,advancementEntityPredicateDeserializer: AdvancementEntityPredicateDeserializer): EffectsChangedCriterion_Conditions;
 conditionsFromJson(obj: JsonObject,playerPredicate: LootContextPredicate,predicateDeserializer: AdvancementEntityPredicateDeserializer): AbstractCriterionConditions;
}
class Static_EffectsChangedCriterion {
static method_22462(serverPlayerEntity: ServerPlayerEntity,lootContext: LootContext,conditions: EffectsChangedCriterion_Conditions): boolean;
static ID: Identifier;
}

//net.minecraft.advancement.criterion.EnchantedItemCriterion
class EnchantedItemCriterion extends AbstractCriterion{
 trigger(player: ServerPlayerEntity,stack: ItemStack,levels: number): void;
 getId(): Identifier;
 conditionsFromJson(jsonObject: JsonObject,lootContextPredicate: LootContextPredicate,advancementEntityPredicateDeserializer: AdvancementEntityPredicateDeserializer): EnchantedItemCriterion_Conditions;
 conditionsFromJson(obj: JsonObject,playerPredicate: LootContextPredicate,predicateDeserializer: AdvancementEntityPredicateDeserializer): AbstractCriterionConditions;
}
class Static_EnchantedItemCriterion {
static method_22463(itemStack: ItemStack,i: number,conditions: EnchantedItemCriterion_Conditions): boolean;
static ID: Identifier;
}

//net.minecraft.advancement.criterion.UsedEnderEyeCriterion
class UsedEnderEyeCriterion extends AbstractCriterion{
 trigger(player: ServerPlayerEntity,strongholdPos: BlockPos): void;
 getId(): Identifier;
 conditionsFromJson(jsonObject: JsonObject,lootContextPredicate: LootContextPredicate,advancementEntityPredicateDeserializer: AdvancementEntityPredicateDeserializer): UsedEnderEyeCriterion_Conditions;
 conditionsFromJson(obj: JsonObject,playerPredicate: LootContextPredicate,predicateDeserializer: AdvancementEntityPredicateDeserializer): AbstractCriterionConditions;
}
class Static_UsedEnderEyeCriterion {
static method_22540(d: number,conditions: UsedEnderEyeCriterion_Conditions): boolean;
static ID: Identifier;
}

//net.minecraft.advancement.criterion.ThrownItemPickedUpByEntityCriterion
class ThrownItemPickedUpByEntityCriterion extends AbstractCriterion{
 trigger(player: ServerPlayerEntity,stack: ItemStack,entity: Entity): void;
 getId(): Identifier;
}
class Static_ThrownItemPickedUpByEntityCriterion {
static method_27976(serverPlayerEntity: ServerPlayerEntity,itemStack: ItemStack,lootContext: LootContext,conditions: ThrownItemPickedUpByEntityCriterion_Conditions): boolean;
}

//net.minecraft.advancement.criterion.VillagerTradeCriterion
class VillagerTradeCriterion extends AbstractCriterion{
 trigger(player: ServerPlayerEntity,merchant: MerchantEntity,stack: ItemStack): void;
 getId(): Identifier;
 conditionsFromJson(jsonObject: JsonObject,lootContextPredicate: LootContextPredicate,advancementEntityPredicateDeserializer: AdvancementEntityPredicateDeserializer): VillagerTradeCriterion_Conditions;
 conditionsFromJson(obj: JsonObject,playerPredicate: LootContextPredicate,predicateDeserializer: AdvancementEntityPredicateDeserializer): AbstractCriterionConditions;
}
class Static_VillagerTradeCriterion {
static method_22539(lootContext: LootContext,itemStack: ItemStack,conditions: VillagerTradeCriterion_Conditions): boolean;
static ID: Identifier;
}

//net.minecraft.advancement.criterion.LevitationCriterion
class LevitationCriterion extends AbstractCriterion{
 trigger(player: ServerPlayerEntity,startPos: Vec3d,duration: number): void;
 getId(): Identifier;
 conditionsFromJson(jsonObject: JsonObject,lootContextPredicate: LootContextPredicate,advancementEntityPredicateDeserializer: AdvancementEntityPredicateDeserializer): LevitationCriterion_Conditions;
 conditionsFromJson(obj: JsonObject,playerPredicate: LootContextPredicate,predicateDeserializer: AdvancementEntityPredicateDeserializer): AbstractCriterionConditions;
}
class Static_LevitationCriterion {
static method_22480(serverPlayerEntity: ServerPlayerEntity,vec3d: Vec3d,i: number,conditions: LevitationCriterion_Conditions): boolean;
static ID: Identifier;
}

//net.minecraft.advancement.criterion.OnKilledCriterion
class OnKilledCriterion extends AbstractCriterion{
 trigger(player: ServerPlayerEntity,entity: Entity,killingDamage: DamageSource): void;
 getId(): Identifier;
 conditionsFromJson(obj: JsonObject,playerPredicate: LootContextPredicate,predicateDeserializer: AdvancementEntityPredicateDeserializer): AbstractCriterionConditions;
 conditionsFromJson(jsonObject: JsonObject,lootContextPredicate: LootContextPredicate,advancementEntityPredicateDeserializer: AdvancementEntityPredicateDeserializer): OnKilledCriterion_Conditions;
}
class Static_OnKilledCriterion {
static method_22479(serverPlayerEntity: ServerPlayerEntity,lootContext: LootContext,damageSource: DamageSource,conditions: OnKilledCriterion_Conditions): boolean;
}

//net.minecraft.advancement.criterion.PlayerHurtEntityCriterion
class PlayerHurtEntityCriterion extends AbstractCriterion{
 trigger(player: ServerPlayerEntity,entity: Entity,damage: DamageSource,dealt: number,taken: number,blocked: boolean): void;
 getId(): Identifier;
 conditionsFromJson(jsonObject: JsonObject,lootContextPredicate: LootContextPredicate,advancementEntityPredicateDeserializer: AdvancementEntityPredicateDeserializer): PlayerHurtEntityCriterion_Conditions;
 conditionsFromJson(obj: JsonObject,playerPredicate: LootContextPredicate,predicateDeserializer: AdvancementEntityPredicateDeserializer): AbstractCriterionConditions;
}
class Static_PlayerHurtEntityCriterion {
static method_22493(serverPlayerEntity: ServerPlayerEntity,lootContext: LootContext,damageSource: DamageSource,f: number,g: number,bl: boolean,conditions: PlayerHurtEntityCriterion_Conditions): boolean;
static ID: Identifier;
}

//net.minecraft.advancement.criterion.BredAnimalsCriterion
class BredAnimalsCriterion extends AbstractCriterion{
 trigger(player: ServerPlayerEntity,parent: AnimalEntity,partner: AnimalEntity,child: PassiveEntity): void;
 getId(): Identifier;
 conditionsFromJson(jsonObject: JsonObject,lootContextPredicate: LootContextPredicate,advancementEntityPredicateDeserializer: AdvancementEntityPredicateDeserializer): BredAnimalsCriterion_Conditions;
 conditionsFromJson(obj: JsonObject,playerPredicate: LootContextPredicate,predicateDeserializer: AdvancementEntityPredicateDeserializer): AbstractCriterionConditions;
}
class Static_BredAnimalsCriterion {
static method_22455(lootContext: LootContext,lootContext2: LootContext,lootContext3: LootContext,conditions: BredAnimalsCriterion_Conditions): boolean;
static ID: Identifier;
}

//net.minecraft.advancement.criterion.ChanneledLightningCriterion
class ChanneledLightningCriterion extends AbstractCriterion{
 trigger(player: ServerPlayerEntity,victims: Collection): void;
 getId(): Identifier;
 conditionsFromJson(obj: JsonObject,playerPredicate: LootContextPredicate,predicateDeserializer: AdvancementEntityPredicateDeserializer): AbstractCriterionConditions;
 conditionsFromJson(jsonObject: JsonObject,lootContextPredicate: LootContextPredicate,advancementEntityPredicateDeserializer: AdvancementEntityPredicateDeserializer): ChanneledLightningCriterion_Conditions;
}
class Static_ChanneledLightningCriterion {
static method_27791(serverPlayerEntity: ServerPlayerEntity,entity: Entity): LootContext;
static method_22458(list: List,conditions: ChanneledLightningCriterion_Conditions): boolean;
static ID: Identifier;
}

//net.minecraft.advancement.criterion.TickCriterion
class TickCriterion extends AbstractCriterion{
 trigger(player: ServerPlayerEntity): void;
 getId(): Identifier;
 conditionsFromJson(obj: JsonObject,playerPredicate: LootContextPredicate,predicateDeserializer: AdvancementEntityPredicateDeserializer): AbstractCriterionConditions;
 conditionsFromJson(jsonObject: JsonObject,lootContextPredicate: LootContextPredicate,advancementEntityPredicateDeserializer: AdvancementEntityPredicateDeserializer): TickCriterion_Conditions;
}
class Static_TickCriterion {
static method_29964(conditions: TickCriterion_Conditions): boolean;
}

//net.minecraft.advancement.criterion.StartedRidingCriterion
class StartedRidingCriterion extends AbstractCriterion{
 trigger(player: ServerPlayerEntity): void;
 getId(): Identifier;
 conditionsFromJson(jsonObject: JsonObject,lootContextPredicate: LootContextPredicate,advancementEntityPredicateDeserializer: AdvancementEntityPredicateDeserializer): StartedRidingCriterion_Conditions;
 conditionsFromJson(obj: JsonObject,playerPredicate: LootContextPredicate,predicateDeserializer: AdvancementEntityPredicateDeserializer): AbstractCriterionConditions;
}
class Static_StartedRidingCriterion {
static method_37259(conditions: StartedRidingCriterion_Conditions): boolean;
static ID: Identifier;
}

//net.minecraft.client.render.block.entity.EndGatewayBlockEntityRenderer
class EndGatewayBlockEntityRenderer extends EndPortalBlockEntityRenderer{
 render(endPortalBlockEntity: EndPortalBlockEntity,f: number,matrixStack: MatrixStack,vertexConsumerProvider: VertexConsumerProvider,i: number,j: number): void;
 render(endGatewayBlockEntity: EndGatewayBlockEntity,f: number,matrixStack: MatrixStack,vertexConsumerProvider: VertexConsumerProvider,i: number,j: number): void;
 render(entity: BlockEntity,tickDelta: number,matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,light: number,overlay: number): void;
 getRenderDistance(): number;
}
class Static_EndGatewayBlockEntityRenderer {
static BEAM_TEXTURE: Identifier;
}

//net.minecraft.network.message.SignedCommandArguments$Impl
class SignedCommandArguments_Impl extends Record, SignedCommandArguments{
 equals(object: Object): boolean;
 toString(): string;
 hashCode(): number;
 getMessage(argumentName: string): SignedMessage;
 arguments(): Map;
}

//net.minecraft.world.biome.source.MultiNoiseBiomeSource
class MultiNoiseBiomeSource extends BiomeSource{
 addDebugInfo(info: List,pos: BlockPos,noiseSampler: MultiNoiseUtil_MultiNoiseSampler): void;
 getBiome(x: number,y: number,z: number,noise: MultiNoiseUtil_MultiNoiseSampler): RegistryEntry;
 matchesInstance(parameterList: RegistryKey): boolean;
 getBiomeAtPoint(point: MultiNoiseUtil_NoiseValuePoint): RegistryEntry;
}
class Static_MultiNoiseBiomeSource {
static create(biomeEntries: MultiNoiseUtil_Entries): MultiNoiseBiomeSource;
static create(biomeEntries: RegistryEntry): MultiNoiseBiomeSource;
static method_49502(source: MultiNoiseBiomeSource): Either;
static method_49504(entries: MultiNoiseUtil_Entries): MultiNoiseUtil_Entries;
static method_49505(parameterListEntry: RegistryEntry): MultiNoiseUtil_Entries;
static BIOME_CODEC: MapCodec;
static CUSTOM_CODEC: MapCodec;
static PRESET_CODEC: MapCodec;
static CODEC: Codec;
}

//net.minecraft.world.biome.source.CheckerboardBiomeSource
class CheckerboardBiomeSource extends BiomeSource{
 getBiome(x: number,y: number,z: number,noise: MultiNoiseUtil_MultiNoiseSampler): RegistryEntry;
}
class Static_CheckerboardBiomeSource {
static method_28455(biomeSource: CheckerboardBiomeSource): RegistryEntryList;
static method_28453(biomeSource: CheckerboardBiomeSource): Integer;
static method_28454(instance: RecordCodecBuilder_Instance): App;
static CODEC: Codec;
}

//net.minecraft.world.biome.source.TheEndBiomeSource
class TheEndBiomeSource extends BiomeSource{
 getBiome(x: number,y: number,z: number,noise: MultiNoiseUtil_MultiNoiseSampler): RegistryEntry;
}
class Static_TheEndBiomeSource {
static createVanilla(biomeLookup: RegistryEntryLookup): TheEndBiomeSource;
static method_46679(instance: RecordCodecBuilder_Instance): App;
static CODEC: Codec;
}

//net.minecraft.resource.ResourceManager$Empty
class ResourceManager_Empty extends Enum, ResourceManager{
 getResource(identifier: Identifier): Optional;
 findResources(startingPath: string,allowedPathPredicate: Predicate): Map;
 streamResourcePacks(): Stream;
 getAllNamespaces(): Set;
 getAllResources(id: Identifier): List;
 findAllResources(startingPath: string,allowedPathPredicate: Predicate): Map;
}
class Static_ResourceManager_Empty {
static values(): ResourceManager_Empty;
static valueOf(string: string): ResourceManager_Empty;
static method_36585(): ResourceManager_Empty;
static INSTANCE: ResourceManager_Empty;
static field_25352: ResourceManager_Empty;
}

//net.minecraft.world.gen.blockpredicate.MatchingBlockTagPredicate
class MatchingBlockTagPredicate extends OffsetPredicate{
 getType(): BlockPredicateType;
}
class Static_MatchingBlockTagPredicate {
static method_39915(predicate: MatchingBlockTagPredicate): TagKey;
static method_39916(instance: RecordCodecBuilder_Instance): App;
static CODEC: Codec;
}

//net.minecraft.world.gen.blockpredicate.SolidBlockPredicate
class SolidBlockPredicate extends OffsetPredicate{
 getType(): BlockPredicateType;
}
class Static_SolidBlockPredicate {
static method_39590(instance: RecordCodecBuilder_Instance): App;
static CODEC: Codec;
}

//net.minecraft.world.gen.blockpredicate.MatchingFluidsBlockPredicate
class MatchingFluidsBlockPredicate extends OffsetPredicate{
 getType(): BlockPredicateType;
}
class Static_MatchingFluidsBlockPredicate {
static method_38900(predicate: MatchingFluidsBlockPredicate): RegistryEntryList;
static method_38898(instance: RecordCodecBuilder_Instance): App;
static CODEC: Codec;
}

//net.minecraft.world.gen.blockpredicate.ReplaceableBlockPredicate
class ReplaceableBlockPredicate extends OffsetPredicate{
 getType(): BlockPredicateType;
}
class Static_ReplaceableBlockPredicate {
static method_38905(instance: RecordCodecBuilder_Instance): App;
static CODEC: Codec;
}

//net.minecraft.world.gen.blockpredicate.MatchingBlocksBlockPredicate
class MatchingBlocksBlockPredicate extends OffsetPredicate{
 getType(): BlockPredicateType;
}
class Static_MatchingBlocksBlockPredicate {
static method_38894(instance: RecordCodecBuilder_Instance): App;
static method_38896(predicate: MatchingBlocksBlockPredicate): RegistryEntryList;
static CODEC: Codec;
}

//net.minecraft.world.gen.foliage.RandomSpreadFoliagePlacer
class RandomSpreadFoliagePlacer extends FoliagePlacer{
 getRandomHeight(random: Random,trunkHeight: number,config: TreeFeatureConfig): number;
}
class Static_RandomSpreadFoliagePlacer {
static method_34362(placer: RandomSpreadFoliagePlacer): IntProvider;
static method_34361(placer: RandomSpreadFoliagePlacer): Integer;
static method_34360(instance: RecordCodecBuilder_Instance): App;
static CODEC: Codec;
}

//net.minecraft.world.gen.foliage.CherryFoliagePlacer
class CherryFoliagePlacer extends FoliagePlacer{
 getRandomHeight(random: Random,trunkHeight: number,config: TreeFeatureConfig): number;
}
class Static_CherryFoliagePlacer {
static method_49243(foliagePlacer: CherryFoliagePlacer): Float;
static method_49241(instance: RecordCodecBuilder_Instance): App;
static method_49246(foliagePlacer: CherryFoliagePlacer): IntProvider;
static method_49245(foliagePlacer: CherryFoliagePlacer): Float;
static method_49244(foliagePlacer: CherryFoliagePlacer): Float;
static method_49242(foliagePlacer: CherryFoliagePlacer): Float;
static CODEC: Codec;
}

//net.minecraft.world.gen.foliage.BlobFoliagePlacer
class BlobFoliagePlacer extends FoliagePlacer{
 getRandomHeight(random: Random,trunkHeight: number,config: TreeFeatureConfig): number;
}
class Static_BlobFoliagePlacer {
static createCodec(builder: RecordCodecBuilder_Instance): Products_P3;
static method_28837(placer: BlobFoliagePlacer): Integer;
static method_28839(instance: RecordCodecBuilder_Instance): App;
static CODEC: Codec;
}

//net.minecraft.world.gen.foliage.PineFoliagePlacer
class PineFoliagePlacer extends FoliagePlacer{
 getRandomRadius(random: Random,baseHeight: number): number;
 getRandomHeight(random: Random,trunkHeight: number,config: TreeFeatureConfig): number;
}
class Static_PineFoliagePlacer {
static method_30415(instance: RecordCodecBuilder_Instance): App;
static method_30416(placer: PineFoliagePlacer): IntProvider;
static CODEC: Codec;
}

//net.minecraft.world.gen.foliage.MegaPineFoliagePlacer
class MegaPineFoliagePlacer extends FoliagePlacer{
 getRandomHeight(random: Random,trunkHeight: number,config: TreeFeatureConfig): number;
}
class Static_MegaPineFoliagePlacer {
static method_30413(instance: RecordCodecBuilder_Instance): App;
static method_30414(placer: MegaPineFoliagePlacer): IntProvider;
static CODEC: Codec;
}

//net.minecraft.world.gen.foliage.SpruceFoliagePlacer
class SpruceFoliagePlacer extends FoliagePlacer{
 getRandomHeight(random: Random,trunkHeight: number,config: TreeFeatureConfig): number;
}
class Static_SpruceFoliagePlacer {
static method_30418(placer: SpruceFoliagePlacer): IntProvider;
static method_30417(instance: RecordCodecBuilder_Instance): App;
static CODEC: Codec;
}

//net.minecraft.world.gen.foliage.DarkOakFoliagePlacer
class DarkOakFoliagePlacer extends FoliagePlacer{
 getRandomHeight(random: Random,trunkHeight: number,config: TreeFeatureConfig): number;
}
class Static_DarkOakFoliagePlacer {
static method_28841(instance: RecordCodecBuilder_Instance): App;
static CODEC: Codec;
}

//net.minecraft.world.gen.foliage.AcaciaFoliagePlacer
class AcaciaFoliagePlacer extends FoliagePlacer{
 getRandomHeight(random: Random,trunkHeight: number,config: TreeFeatureConfig): number;
}
class Static_AcaciaFoliagePlacer {
static method_28836(instance: RecordCodecBuilder_Instance): App;
static CODEC: Codec;
}

//net.minecraft.world.gen.foliage.JungleFoliagePlacer
class JungleFoliagePlacer extends FoliagePlacer{
 getRandomHeight(random: Random,trunkHeight: number,config: TreeFeatureConfig): number;
}
class Static_JungleFoliagePlacer {
static method_28851(placer: JungleFoliagePlacer): Integer;
static method_28852(instance: RecordCodecBuilder_Instance): App;
static CODEC: Codec;
}

//net.minecraft.stat.ServerStatHandler
class ServerStatHandler extends StatHandler{
 save(): void;
 parse(dataFixer: DataFixer,json: string): void;
 updateStatSet(): void;
 setStat(player: PlayerEntity,stat: Stat,value: number): void;
 sendStats(player: ServerPlayerEntity): void;
}
class Static_ServerStatHandler {
static getStatId(stat: Stat): Identifier;
static jsonToCompound(json: JsonObject): NbtCompound;
static method_14913(statType: StatType): JsonObject;
static LOGGER: Logger;
}

//net.minecraft.world.gen.feature.BlockColumnFeatureConfig
class BlockColumnFeatureConfig extends Record, FeatureConfig{
 equals(object: Object): boolean;
 toString(): string;
 hashCode(): number;
 layers(): List;
 direction(): Direction;
 prioritizeTip(): boolean;
 allowedPlacement(): BlockPredicate;
}
class Static_BlockColumnFeatureConfig {
static create(height: IntProvider,state: BlockStateProvider): BlockColumnFeatureConfig;
static createLayer(height: IntProvider,state: BlockStateProvider): BlockColumnFeatureConfig_Layer;
static method_38909(instance: RecordCodecBuilder_Instance): App;
static CODEC: Codec;
}

//net.minecraft.world.gen.feature.RandomPatchFeatureConfig
class RandomPatchFeatureConfig extends Record, FeatureConfig{
 equals(object: Object): boolean;
 toString(): string;
 hashCode(): number;
 feature(): RegistryEntry;
 ySpread(): number;
 xzSpread(): number;
 tries(): number;
}
class Static_RandomPatchFeatureConfig {
static method_38912(instance: RecordCodecBuilder_Instance): App;
static CODEC: Codec;
}

//net.minecraft.world.gen.feature.SculkPatchFeatureConfig
class SculkPatchFeatureConfig extends Record, FeatureConfig{
 equals(object: Object): boolean;
 toString(): string;
 hashCode(): number;
 extraRareGrowths(): IntProvider;
 catalystChance(): number;
 spreadAttempts(): number;
 growthRounds(): number;
 amountPerCharge(): number;
 chargeCount(): number;
 spreadRounds(): number;
}
class Static_SculkPatchFeatureConfig {
static method_41575(instance: RecordCodecBuilder_Instance): App;
static CODEC: Codec;
}

//net.minecraft.world.gen.feature.DiskFeatureConfig
class DiskFeatureConfig extends Record, FeatureConfig{
 equals(object: Object): boolean;
 target(): BlockPredicate;
 toString(): string;
 hashCode(): number;
 halfHeight(): number;
 radius(): IntProvider;
 stateProvider(): PredicatedStateProvider;
}
class Static_DiskFeatureConfig {
static method_43294(instance: RecordCodecBuilder_Instance): App;
static CODEC: Codec;
}

//net.minecraft.world.gen.feature.LakeFeature$Config
class LakeFeature_Config extends Record, FeatureConfig{
 equals(object: Object): boolean;
 toString(): string;
 hashCode(): number;
 barrier(): BlockStateProvider;
 fluid(): BlockStateProvider;
}
class Static_LakeFeature_Config {
static method_39606(instance: RecordCodecBuilder_Instance): App;
static CODEC: Codec;
}

//net.minecraft.world.gen.feature.TwistingVinesFeatureConfig
class TwistingVinesFeatureConfig extends Record, FeatureConfig{
 equals(object: Object): boolean;
 toString(): string;
 hashCode(): number;
 spreadHeight(): number;
 spreadWidth(): number;
 maxHeight(): number;
}
class Static_TwistingVinesFeatureConfig {
static method_39611(instance: RecordCodecBuilder_Instance): App;
static CODEC: Codec;
}

//net.minecraft.world.gen.feature.SimpleBlockFeatureConfig
class SimpleBlockFeatureConfig extends Record, FeatureConfig{
 equals(object: Object): boolean;
 toString(): string;
 hashCode(): number;
 toPlace(): BlockStateProvider;
}
class Static_SimpleBlockFeatureConfig {
static method_38913(instance: RecordCodecBuilder_Instance): App;
static method_28787(config: SimpleBlockFeatureConfig): BlockStateProvider;
static CODEC: Codec;
}

//net.minecraft.client.gui.screen.SplashOverlay
class SplashOverlay extends Overlay{
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
 pausesGame(): boolean;
}
class Static_SplashOverlay {
static init(client: MinecraftClient): void;
static withAlpha(color: number,alpha: number): number;
static method_35733(): number;
static LOGO: Identifier;
static MOJANG_RED: number;
static MONOCHROME_BLACK: number;
static BRAND_ARGB: IntSupplier;
static field_32251: number;
static LOGO_RIGHT_HALF_V: number;
static field_32253: number;
static field_32254: number;
static LOGO_OVERLAP: number;
static PROGRESS_LERP_DELTA: number;
static RELOAD_COMPLETE_FADE_DURATION: long;
static RELOAD_START_FADE_DURATION: long;
}

//net.minecraft.client.gui.screen.recipebook.AbstractFurnaceRecipeBookScreen
class AbstractFurnaceRecipeBookScreen extends RecipeBookWidget{
 showGhostRecipe(recipe: Recipe,slots: List): void;
 slotClicked(slot: Slot): void;
}

//net.minecraft.client.option.ParticlesMode
class ParticlesMode extends Enum, TranslatableOption{
 getId(): number;
 getTranslationKey(): string;
}
class Static_ParticlesMode {
static values(): ParticlesMode[];
static valueOf(string: string): ParticlesMode;
static byId(id: number): ParticlesMode;
static method_36865(): ParticlesMode[];
static ALL: ParticlesMode;
static DECREASED: ParticlesMode;
static MINIMAL: ParticlesMode;
static BY_ID: IntFunction;
static field_18203: ParticlesMode[];
}

//net.minecraft.client.option.AttackIndicator
class AttackIndicator extends Enum, TranslatableOption{
 getId(): number;
 getTranslationKey(): string;
}
class Static_AttackIndicator {
static values(): AttackIndicator[];
static valueOf(string: string): AttackIndicator;
static byId(id: number): AttackIndicator;
static method_36858(): AttackIndicator[];
static OFF: AttackIndicator;
static CROSSHAIR: AttackIndicator;
static HOTBAR: AttackIndicator;
static BY_ID: IntFunction;
static field_18157: AttackIndicator[];
}

//net.minecraft.client.render.ChunkBuilderMode
class ChunkBuilderMode extends Enum, TranslatableOption{
 getId(): number;
 getTranslationKey(): string;
}
class Static_ChunkBuilderMode {
static get(id: number): ChunkBuilderMode;
static values(): ChunkBuilderMode[];
static valueOf(string: string): ChunkBuilderMode;
static method_38526(): ChunkBuilderMode[];
static NONE: ChunkBuilderMode;
static PLAYER_AFFECTED: ChunkBuilderMode;
static NEARBY: ChunkBuilderMode;
static BY_ID: IntFunction;
static field_34794: ChunkBuilderMode[];
}

//net.minecraft.util.Arm
class Arm extends Enum, TranslatableOption{
 getId(): number;
 getOpposite(): Arm;
 getTranslationKey(): string;
}
class Static_Arm {
static values(): Arm[];
static valueOf(string: string): Arm;
static method_36606(): Arm[];
static LEFT: Arm;
static RIGHT: Arm;
static field_6180: Arm[];
}

//net.minecraft.client.option.CloudRenderMode
class CloudRenderMode extends Enum, TranslatableOption{
 getId(): number;
 getTranslationKey(): string;
}
class Static_CloudRenderMode {
static values(): CloudRenderMode[];
static valueOf(string: string): CloudRenderMode;
static method_36860(): CloudRenderMode[];
static OFF: CloudRenderMode;
static FAST: CloudRenderMode;
static FANCY: CloudRenderMode;
static field_18168: CloudRenderMode[];
}

//net.minecraft.client.option.GraphicsMode
class GraphicsMode extends Enum, TranslatableOption{
 toString(): string;
 getId(): number;
 getTranslationKey(): string;
}
class Static_GraphicsMode {
static values(): GraphicsMode[];
static valueOf(string: string): GraphicsMode;
static byId(id: number): GraphicsMode;
static method_36861(): GraphicsMode[];
static FAST: GraphicsMode;
static FANCY: GraphicsMode;
static FABULOUS: GraphicsMode;
static BY_ID: IntFunction;
static field_25433: GraphicsMode[];
}

//net.minecraft.client.option.ChatVisibility
class ChatVisibility extends Enum, TranslatableOption{
 getId(): number;
 getTranslationKey(): string;
}
class Static_ChatVisibility {
static values(): ChatVisibility[];
static valueOf(string: string): ChatVisibility;
static byId(id: number): ChatVisibility;
static method_36660(): ChatVisibility[];
static FULL: ChatVisibility;
static SYSTEM: ChatVisibility;
static HIDDEN: ChatVisibility;
static BY_ID: IntFunction;
static field_7537: ChatVisibility[];
}

//net.minecraft.block.StainedGlassBlock
class StainedGlassBlock extends AbstractGlassBlock, Stainable{
 getColor(): DyeColor;
}

//net.minecraft.block.BeaconBlock
class BeaconBlock extends BlockWithEntity, Stainable{
 getColor(): DyeColor;
 onUse(state: BlockState,world: World,pos: BlockPos,player: PlayerEntity,hand: Hand,hit: BlockHitResult): ActionResult;
 getTicker(world: World,state: BlockState,type: BlockEntityType): BlockEntityTicker;
 createBlockEntity(pos: BlockPos,state: BlockState): BlockEntity;
 getRenderType(state: BlockState): BlockRenderType;
 onPlaced(world: World,pos: BlockPos,state: BlockState,placer: LivingEntity,itemStack: ItemStack): void;
}

//net.minecraft.block.StainedGlassPaneBlock
class StainedGlassPaneBlock extends PaneBlock, Stainable{
 getColor(): DyeColor;
}

//net.minecraft.particle.SculkChargeParticleEffect
class SculkChargeParticleEffect extends Record, ParticleEffect{
 equals(object: Object): boolean;
 toString(): string;
 hashCode(): number;
 write(buf: PacketByteBuf): void;
 getType(): ParticleType;
 roll(): number;
 asString(): string;
}
class Static_SculkChargeParticleEffect {
static method_42025(particleEffect: SculkChargeParticleEffect): Float;
static method_42024(instance: RecordCodecBuilder_Instance): App;
static CODEC: Codec;
static FACTORY: ParticleEffect_Factory;
}

//net.minecraft.data.server.loottable.vanilla.VanillaBlockLootTableGenerator
class VanillaBlockLootTableGenerator extends BlockLootTableGenerator{
}
class Static_VanillaBlockLootTableGenerator {
static method_49979(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_49974(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_49966(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_49965(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_49982(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_49972(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_49368(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_49973(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_49372(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_49978(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_49975(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_49371(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_49971(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_49970(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_49969(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_49968(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_49967(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_49964(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_49367(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_49373(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_49955(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_49981(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_49366(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_49956(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_49980(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_49370(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_49369(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_49977(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_49976(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_49945(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_49944(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_46068(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_49959(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_46067(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_49948(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_49961(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_49940(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_49930(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_46122(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_49960(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_49958(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_49943(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_49934(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_49933(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_49957(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_49938(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_49932(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_49942(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_49939(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_49937(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_49962(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_49941(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_49936(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_49935(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_49947(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_49931(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_49929(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_49963(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_49946(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_49949(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_46069(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_46121(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_49952(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_46120(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_46119(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_46110(block: Block): LootTable_Builder;
static method_46116(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_46117(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_49953(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_49954(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_46060(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_46111(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_46107(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_46100(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_46099(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_46114(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_46064(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_46104(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_46062(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_46059(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_46063(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_46101(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_46109(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_46094(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_46058(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_46057(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_46056(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_46061(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_46055(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_46054(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_46098(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_46102(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_46108(block: Block): LootTable_Builder;
static method_46112(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_46106(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_46097(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_46095(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_46113(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_46096(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_46093(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_46065(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_46115(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_46172(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_46167(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_46042(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_46048(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_46050(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_46053(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_46049(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_46179(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_46177(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_46173(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_46047(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_46175(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_46051(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_46170(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_46176(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_46169(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_46178(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_46168(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_46052(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_46043(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_46040(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_46181(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_46171(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_46183(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_46045(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_46182(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_46046(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_46174(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_46041(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_46180(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_46044(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_46164(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_46162(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_46103(block: Block): LootTable_Builder;
static method_46105(block: Block): LootTable_Builder;
static method_46165(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_46166(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_46066(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_46158(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_46123(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_46157(block: ItemConvertible): LootTable_Builder;
static method_46161(block: ItemConvertible): LootTable_Builder;
static method_46155(block: ItemConvertible): LootTable_Builder;
static method_46160(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_46163(block: ItemConvertible): LootTable_Builder;
static method_46156(vanillaBlockLootTableGenerator: VanillaBlockLootTableGenerator,block: Block): LootTable_Builder;
static method_46159(block: ItemConvertible): LootTable_Builder;
static method_34599(block: Block): LootTable_Builder;
static method_43812(block: Block,integer: Integer): LootPoolEntry_Builder;
static method_49928(age: Integer): LootPoolEntry_Builder;
static method_43814(block: Block,integer: Integer): LootPoolEntry_Builder;
static method_43815(block: Block,pickles: Integer): LootFunction_Builder;
static JUNGLE_SAPLING_DROP_CHANCE: number[];
static EXPLOSION_IMMUNE: Set;
}

//net.minecraft.server.world.ThreadedAnvilChunkStorage
class ThreadedAnvilChunkStorage extends VersionedChunkStorage, ChunkHolder_PlayersWatchingChunkProvider{
 close(): void;
 makeChunkAccessible(holder: ChunkHolder): CompletableFuture;
 getPlayersWatchingChunk(chunkPos: ChunkPos,onlyOnWatchDistanceEdge: boolean): List;
 getPlayersWatchingChunk(pos: ChunkPos): List;
 makeChunkEntitiesTickable(chunk: ChunkHolder): CompletableFuture;
 getLoadedChunkCount(): number;
 sendToOtherNearbyPlayers(entity: Entity,packet: Packet): void;
 getChunkLoadingDebugInfo(chunkPos: ChunkPos): string;
 updatePosition(player: ServerPlayerEntity): void;
 getChunk(holder: ChunkHolder,requiredStatus: ChunkStatus): CompletableFuture;
 sendChunkBiomePackets(chunks: List): void;
 crash(exception: IllegalStateException,details: string): CrashException;
 makeChunkTickable(holder: ChunkHolder): CompletableFuture;
 shouldDelayShutdown(): boolean;
 verifyChunkGenerator(): void;
 getTicketManager(): ChunkTicketManager;
 getTotalChunksLoadedCount(): number;
 getSaveDir(): string;
}
class Static_ThreadedAnvilChunkStorage {
static isWithinDistance(x1: number,z1: number,x2: number,z2: number,distance: number): boolean;
static getSquaredDistance(pos: ChunkPos,entity: Entity): number;
static method_43379(chunkPos: ChunkPos,nbt2: NbtCompound): boolean;
static method_40069(stringBuilder: StringBuilder,chunkHolder: ChunkHolder,pair: Pair): void;
static method_17232(chunks: List): WorldChunk;
static isOnDistanceEdge(x1: number,z1: number,x2: number,z2: number,distance: number): boolean;
static method_51282(chunk: Either): Either;
static method_40068(stringBuilder: StringBuilder,chunkHolder: ChunkHolder): void;
static method_37903(json: JsonElement): DataResult;
static method_20606(): boolean;
static method_17254(distance: number): ChunkStatus;
static method_20578(mutableBoolean: MutableBoolean,chunk: Chunk): void;
static method_20604(chunkHolder: ChunkHolder,void_: Void,throwable: Throwable): void;
static method_43378(chunkPos: ChunkPos,nbt: Optional): Optional;
static method_17230(either: Either): Either;
static method_20582(chunk: Chunk): boolean;
static method_20442(chunkPos: ChunkPos): string;
static method_17245(distance: number): ChunkStatus;
static containsStatus(nbt: NbtCompound): boolean;
static method_41235(chunks: Either): Either;
static method_24308(chunkStatus: ChunkStatus): string;
static addEntitiesFromNbt(world: ServerWorld,nbt: List): void;
static method_20577(either: Either): Either;
static getFutureStatus(future: CompletableFuture): string;
static method_21620(chunk: Chunk): Optional;
static method_49420(player: ServerPlayerEntity,chunksx: List): void;
static method_39221(chunk: WorldChunk): Integer;
static method_21677(chunk: WorldChunk): string;
static method_49422(player: ServerPlayerEntity): List;
static method_39220(chunk: WorldChunk): Integer;
static method_21678(unloaded: ChunkHolder_Unloaded): string;
static method_21621(chunk: WorldChunk): Integer;
static method_31416(chunks: List): WorldChunk;
static method_41234(cs: List): WorldChunk;
static method_39934(crashReport: CrashReport): void;
static method_17251(chunkHolder: ChunkHolder): ChunkLevelType;
static PROTO_CHUNK: byte;
static UNMARKED_CHUNK: byte;
static LEVEL_CHUNK: byte;
static LOGGER: Logger;
static field_29674: number;
static field_36291: number;
static field_36384: number;
static field_29675: number;
static field_29669: number;
static field_29670: number;
}

//net.minecraft.world.gen.treedecorator.AttachedToLeavesTreeDecorator
class AttachedToLeavesTreeDecorator extends TreeDecorator{
 generate(generator: TreeDecorator_Generator): void;
}
class Static_AttachedToLeavesTreeDecorator {
static method_43192(treeDecorator: AttachedToLeavesTreeDecorator): Integer;
static method_43194(treeDecorator: AttachedToLeavesTreeDecorator): Float;
static method_43188(instance: RecordCodecBuilder_Instance): App;
static method_43193(treeDecorator: AttachedToLeavesTreeDecorator): Integer;
static method_43191(treeDecorator: AttachedToLeavesTreeDecorator): BlockStateProvider;
static method_43190(treeDecorator: AttachedToLeavesTreeDecorator): Integer;
static method_43189(treeDecorator: AttachedToLeavesTreeDecorator): List;
static CODEC: Codec;
}

//net.minecraft.world.gen.treedecorator.CocoaBeansTreeDecorator
class CocoaBeansTreeDecorator extends TreeDecorator{
 generate(generator: TreeDecorator_Generator): void;
}
class Static_CocoaBeansTreeDecorator {
static method_23465(i: number,pos: BlockPos): boolean;
static method_23466(random: Random,generator: TreeDecorator_Generator,pos: BlockPos): void;
static method_28891(decorator: CocoaBeansTreeDecorator): Float;
static CODEC: Codec;
}

//net.minecraft.world.gen.treedecorator.AlterGroundTreeDecorator
class AlterGroundTreeDecorator extends TreeDecorator{
 generate(generator: TreeDecorator_Generator): void;
}
class Static_AlterGroundTreeDecorator {
static method_28889(decorator: AlterGroundTreeDecorator): BlockStateProvider;
static method_23460(i: number,pos: BlockPos): boolean;
static CODEC: Codec;
}

//net.minecraft.world.gen.treedecorator.LeavesVineTreeDecorator
class LeavesVineTreeDecorator extends TreeDecorator{
 generate(generator: TreeDecorator_Generator): void;
}
class Static_LeavesVineTreeDecorator {
static placeVines(pos: BlockPos,faceProperty: BooleanProperty,generator: TreeDecorator_Generator): void;
static method_43195(treeDecorator: LeavesVineTreeDecorator): Float;
static CODEC: Codec;
}

//net.minecraft.world.gen.treedecorator.BeehiveTreeDecorator
class BeehiveTreeDecorator extends TreeDecorator{
 generate(generator: TreeDecorator_Generator): void;
}
class Static_BeehiveTreeDecorator {
static method_40033(pos: BlockPos): Stream;
static method_40032(generator: TreeDecorator_Generator,pos: BlockPos): boolean;
static method_35373(random: Random,blockEntity: BeehiveBlockEntity): void;
static method_23464(i: number,pos: BlockPos): boolean;
static method_28890(decorator: BeehiveTreeDecorator): Float;
static method_40031(i: number): Direction[];
static method_40034(direction: Direction): boolean;
static CODEC: Codec;
static BEE_NEST_FACE: Direction;
static GENERATE_DIRECTIONS: Direction[];
}

//net.minecraft.world.gen.treedecorator.TrunkVineTreeDecorator
class TrunkVineTreeDecorator extends TreeDecorator{
 generate(generator: TreeDecorator_Generator): void;
}
class Static_TrunkVineTreeDecorator {
static method_23474(random: Random,generator: TreeDecorator_Generator,pos: BlockPos): void;
static method_28896(): TrunkVineTreeDecorator;
static CODEC: Codec;
static INSTANCE: TrunkVineTreeDecorator;
}

//net.minecraft.structure.StrongholdGenerator$2


//net.minecraft.structure.StrongholdGenerator$1


//net.minecraft.nbt.NbtInt
class NbtInt extends AbstractNbtNumber{
 equals(o: Object): boolean;
 hashCode(): number;
 byteValue(): byte;
 shortValue(): short;
 intValue(): number;
 longValue(): long;
 floatValue(): number;
 doubleValue(): number;
 write(output: DataOutput): void;
 accept(visitor: NbtElementVisitor): void;
 getType(): byte;
 copy(): NbtElement;
 copy(): NbtInt;
 numberValue(): Number;
 getSizeInBytes(): number;
 doAccept(visitor: NbtScanner): NbtScanner_Result;
 getNbtType(): NbtType;
}
class Static_NbtInt {
static of(value: number): NbtInt;
static SIZE: number;
static TYPE: NbtType;
}

//net.minecraft.nbt.NbtDouble
class NbtDouble extends AbstractNbtNumber{
 equals(o: Object): boolean;
 hashCode(): number;
 byteValue(): byte;
 shortValue(): short;
 intValue(): number;
 longValue(): long;
 floatValue(): number;
 doubleValue(): number;
 write(output: DataOutput): void;
 accept(visitor: NbtElementVisitor): void;
 getType(): byte;
 copy(): NbtElement;
 copy(): NbtDouble;
 numberValue(): Number;
 getSizeInBytes(): number;
 doAccept(visitor: NbtScanner): NbtScanner_Result;
 getNbtType(): NbtType;
}
class Static_NbtDouble {
static of(value: number): NbtDouble;
static SIZE: number;
static ZERO: NbtDouble;
static TYPE: NbtType;
}

//net.minecraft.nbt.NbtLong
class NbtLong extends AbstractNbtNumber{
 equals(o: Object): boolean;
 hashCode(): number;
 byteValue(): byte;
 shortValue(): short;
 intValue(): number;
 longValue(): long;
 floatValue(): number;
 doubleValue(): number;
 write(output: DataOutput): void;
 accept(visitor: NbtElementVisitor): void;
 getType(): byte;
 copy(): NbtElement;
 copy(): NbtLong;
 numberValue(): Number;
 getSizeInBytes(): number;
 doAccept(visitor: NbtScanner): NbtScanner_Result;
 getNbtType(): NbtType;
}
class Static_NbtLong {
static of(value: long): NbtLong;
static SIZE: number;
static TYPE: NbtType;
}

//net.minecraft.nbt.NbtFloat
class NbtFloat extends AbstractNbtNumber{
 equals(o: Object): boolean;
 hashCode(): number;
 byteValue(): byte;
 shortValue(): short;
 intValue(): number;
 longValue(): long;
 floatValue(): number;
 doubleValue(): number;
 write(output: DataOutput): void;
 accept(visitor: NbtElementVisitor): void;
 getType(): byte;
 copy(): NbtElement;
 copy(): NbtFloat;
 numberValue(): Number;
 getSizeInBytes(): number;
 doAccept(visitor: NbtScanner): NbtScanner_Result;
 getNbtType(): NbtType;
}
class Static_NbtFloat {
static of(value: number): NbtFloat;
static SIZE: number;
static ZERO: NbtFloat;
static TYPE: NbtType;
}

//net.minecraft.nbt.NbtByte
class NbtByte extends AbstractNbtNumber{
 equals(o: Object): boolean;
 hashCode(): number;
 byteValue(): byte;
 shortValue(): short;
 intValue(): number;
 longValue(): long;
 floatValue(): number;
 doubleValue(): number;
 write(output: DataOutput): void;
 accept(visitor: NbtElementVisitor): void;
 getType(): byte;
 copy(): NbtByte;
 copy(): NbtElement;
 numberValue(): Number;
 getSizeInBytes(): number;
 doAccept(visitor: NbtScanner): NbtScanner_Result;
 getNbtType(): NbtType;
}
class Static_NbtByte {
static of(value: boolean): NbtByte;
static of(value: byte): NbtByte;
static SIZE: number;
static TYPE: NbtType;
static ZERO: NbtByte;
static ONE: NbtByte;
}

//net.minecraft.nbt.NbtShort
class NbtShort extends AbstractNbtNumber{
 equals(o: Object): boolean;
 hashCode(): number;
 byteValue(): byte;
 shortValue(): short;
 intValue(): number;
 longValue(): long;
 floatValue(): number;
 doubleValue(): number;
 write(output: DataOutput): void;
 accept(visitor: NbtElementVisitor): void;
 getType(): byte;
 copy(): NbtElement;
 copy(): NbtShort;
 numberValue(): Number;
 getSizeInBytes(): number;
 doAccept(visitor: NbtScanner): NbtScanner_Result;
 getNbtType(): NbtType;
}
class Static_NbtShort {
static of(value: short): NbtShort;
static SIZE: number;
static TYPE: NbtType;
}

//net.minecraft.world.chunk.PalettedContainer$PaletteProvider$2


//net.minecraft.world.chunk.PalettedContainer$PaletteProvider$1


//net.minecraft.predicate.entity.EntityTypePredicate$Tagged
class EntityTypePredicate_Tagged extends EntityTypePredicate{
 matches(type: EntityType): boolean;
 toJson(): JsonElement;
}

//net.minecraft.predicate.entity.EntityTypePredicate$1


//net.minecraft.predicate.entity.EntityTypePredicate$Single
class EntityTypePredicate_Single extends EntityTypePredicate{
 matches(type: EntityType): boolean;
 toJson(): JsonElement;
}

//net.minecraft.util.profiling.jfr.sample.ChunkGenerationSample
class ChunkGenerationSample extends Record, LongRunningSample{
 equals(o: Object): boolean;
 toString(): string;
 hashCode(): number;
 duration(): Duration;
 worldKey(): string;
 chunkPos(): ChunkPos;
 chunkStatus(): ChunkStatus;
 centerPos(): ColumnPos;
}
class Static_ChunkGenerationSample {
static fromEvent(event: RecordedEvent): ChunkGenerationSample;
}

//net.minecraft.state.property.BooleanProperty
class BooleanProperty extends Property{
 name(value: Comparable): string;
 name(boolean_: Boolean): string;
 equals(object: Object): boolean;
 parse(name: string): Optional;
 getValues(): Collection;
 computeHashCode(): number;
}
class Static_BooleanProperty {
static of(name: string): BooleanProperty;
}

//net.minecraft.state.property.EnumProperty
class EnumProperty extends Property{
 name(enum_: Enum): string;
 name(value: Comparable): string;
 equals(object: Object): boolean;
 parse(name: string): Optional;
 getValues(): Collection;
 computeHashCode(): number;
}
class Static_EnumProperty {
static of(name: string,type: Class,values: Enum[]): EnumProperty;
static of(name: string,type: Class,filter: Predicate): EnumProperty;
static of(name: string,type: Class,values: Collection): EnumProperty;
static of(name: string,type: Class): EnumProperty;
static method_38863(enum_: Enum): boolean;
}

//net.minecraft.state.property.IntProperty
class IntProperty extends Property{
 name(integer: Integer): string;
 name(value: Comparable): string;
 equals(object: Object): boolean;
 parse(name: string): Optional;
 getValues(): Collection;
 computeHashCode(): number;
}
class Static_IntProperty {
static of(name: string,min: number,max: number): IntProperty;
}

//net.minecraft.client.texture.ResourceTexture
class ResourceTexture extends AbstractTexture{
 load(manager: ResourceManager): void;
}
class Static_ResourceTexture {
static LOGGER: Logger;
}

//net.minecraft.item.AirBlockItem
class AirBlockItem extends Item{
 appendTooltip(stack: ItemStack,world: World,tooltip: List,context: TooltipContext): void;
 getTranslationKey(): string;
}

//net.minecraft.item.StewItem
class StewItem extends Item{
 finishUsing(stack: ItemStack,world: World,user: LivingEntity): ItemStack;
}

//net.minecraft.item.DebugStickItem
class DebugStickItem extends Item{
 hasGlint(stack: ItemStack): boolean;
 canMine(state: BlockState,world: World,pos: BlockPos,miner: PlayerEntity): boolean;
 useOnBlock(context: ItemUsageContext): ActionResult;
}
class Static_DebugStickItem {
static getValueString(state: BlockState,property: Property): string;
static sendMessage(player: PlayerEntity,message: Text): void;
static cycle(elements: Iterable,current: Object,inverse: boolean): Object;
static cycle(state: BlockState,property: Property,inverse: boolean): BlockState;
}

//net.minecraft.item.RangedWeaponItem
class RangedWeaponItem extends Item{
 getEnchantability(): number;
 getRange(): number;
 getHeldProjectiles(): Predicate;
 getProjectiles(): Predicate;
}
class Static_RangedWeaponItem {
static getHeldProjectile(entity: LivingEntity,predicate: Predicate): ItemStack;
static method_18816(stack: ItemStack): boolean;
static method_18817(stack: ItemStack): boolean;
static BOW_PROJECTILES: Predicate;
static CROSSBOW_HELD_PROJECTILES: Predicate;
}

//net.minecraft.item.DiscFragmentItem
class DiscFragmentItem extends Item{
 getDescription(): MutableText;
 appendTooltip(stack: ItemStack,world: World,tooltip: List,context: TooltipContext): void;
}

//net.minecraft.item.MinecartItem
class MinecartItem extends Item{
 useOnBlock(context: ItemUsageContext): ActionResult;
}
class Static_MinecartItem {
static DISPENSER_BEHAVIOR: DispenserBehavior;
}

//net.minecraft.item.NetworkSyncedItem
class NetworkSyncedItem extends Item{
 isNetworkSynced(): boolean;
 createSyncPacket(stack: ItemStack,world: World,player: PlayerEntity): Packet;
}

//net.minecraft.item.SpyglassItem
class SpyglassItem extends Item{
 use(world: World,user: PlayerEntity,hand: Hand): TypedActionResult;
 getMaxUseTime(stack: ItemStack): number;
 getUseAction(stack: ItemStack): UseAction;
 finishUsing(stack: ItemStack,world: World,user: LivingEntity): ItemStack;
 onStoppedUsing(stack: ItemStack,world: World,user: LivingEntity,remainingUseTicks: number): void;
}
class Static_SpyglassItem {
static MAX_USE_TIME: number;
static field_30922: number;
}

//net.minecraft.item.LeadItem
class LeadItem extends Item{
 useOnBlock(context: ItemUsageContext): ActionResult;
}
class Static_LeadItem {
static attachHeldMobsToBlock(player: PlayerEntity,world: World,pos: BlockPos): ActionResult;
}

//net.minecraft.item.BannerPatternItem
class BannerPatternItem extends Item{
 getDescription(): MutableText;
 appendTooltip(stack: ItemStack,world: World,tooltip: List,context: TooltipContext): void;
 getPattern(): TagKey;
}

//net.minecraft.item.BoneMealItem
class BoneMealItem extends Item{
 useOnBlock(context: ItemUsageContext): ActionResult;
}
class Static_BoneMealItem {
static createParticles(world: WorldAccess,pos: BlockPos,count: number): void;
static method_40129(world: World,blocks: RegistryEntryList_Named): Optional;
static useOnGround(stack: ItemStack,world: World,blockPos: BlockPos,facing: Direction): boolean;
static method_40006(state: AbstractBlock_AbstractBlockState): boolean;
static method_40130(blockEntry: RegistryEntry): BlockState;
static method_40127(world: World,blocks: RegistryEntryList_Named): Optional;
static method_40128(blockEntry: RegistryEntry): BlockState;
static useOnFertilizable(stack: ItemStack,world: World,pos: BlockPos): boolean;
static field_30851: number;
static field_30852: number;
static field_30853: number;
}

//net.minecraft.item.ElytraItem
class ElytraItem extends Item, Equipment{
 use(world: World,user: PlayerEntity,hand: Hand): TypedActionResult;
 canRepair(stack: ItemStack,ingredient: ItemStack): boolean;
 getSlotType(): EquipmentSlot;
 getEquipSound(): SoundEvent;
}
class Static_ElytraItem {
static isUsable(stack: ItemStack): boolean;
}

//net.minecraft.item.HoneyBottleItem
class HoneyBottleItem extends Item{
 use(world: World,user: PlayerEntity,hand: Hand): TypedActionResult;
 getMaxUseTime(stack: ItemStack): number;
 getUseAction(stack: ItemStack): UseAction;
 finishUsing(stack: ItemStack,world: World,user: LivingEntity): ItemStack;
 getDrinkSound(): SoundEvent;
 getEatSound(): SoundEvent;
}
class Static_HoneyBottleItem {
static MAX_USE_TIME: number;
}

//net.minecraft.item.KnowledgeBookItem
class KnowledgeBookItem extends Item{
 use(world: World,user: PlayerEntity,hand: Hand): TypedActionResult;
}
class Static_KnowledgeBookItem {
static RECIPES_KEY: string;
static LOGGER: Logger;
}

//net.minecraft.item.FireworkRocketItem
class FireworkRocketItem extends Item{
 use(world: World,user: PlayerEntity,hand: Hand): TypedActionResult;
 appendTooltip(stack: ItemStack,world: World,tooltip: List,context: TooltipContext): void;
 getDefaultStack(): ItemStack;
 useOnBlock(context: ItemUsageContext): ActionResult;
}
class Static_FireworkRocketItem {
static setFlight(stack: ItemStack,flight: byte): void;
static FLIGHT_VALUES: byte[];
static FIREWORKS_KEY: string;
static EXPLOSION_KEY: string;
static EXPLOSIONS_KEY: string;
static FLIGHT_KEY: string;
static TYPE_KEY: string;
static TRAIL_KEY: string;
static FLICKER_KEY: string;
static COLORS_KEY: string;
static FADE_COLORS_KEY: string;
static OFFSET_POS_MULTIPLIER: number;
}

//net.minecraft.item.EnchantedGoldenAppleItem
class EnchantedGoldenAppleItem extends Item{
 hasGlint(stack: ItemStack): boolean;
}

//net.minecraft.item.WritableBookItem
class WritableBookItem extends Item{
 use(world: World,user: PlayerEntity,hand: Hand): TypedActionResult;
 useOnBlock(context: ItemUsageContext): ActionResult;
}
class Static_WritableBookItem {
static isValid(nbt: NbtCompound): boolean;
}

//net.minecraft.item.BlockItem
class BlockItem extends Item{
 place(context: ItemPlacementContext): ActionResult;
 appendTooltip(stack: ItemStack,world: World,tooltip: List,context: TooltipContext): void;
 appendBlocks(map: Map,item: Item): void;
 getBlock(): Block;
 getRequiredFeatures(): FeatureSet;
 useOnBlock(context: ItemUsageContext): ActionResult;
 canBeNested(): boolean;
 onItemEntityDestroyed(entity: ItemEntity): void;
 getTranslationKey(): string;
 getPlacementContext(context: ItemPlacementContext): ItemPlacementContext;
}
class Static_BlockItem {
static with(state: BlockState,property: Property,name: string): BlockState;
static getBlockEntityNbt(stack: ItemStack): NbtCompound;
static setBlockEntityNbt(stack: ItemStack,blockEntityType: BlockEntityType,tag: NbtCompound): void;
static method_18082(blockState: BlockState,property: Property,value: Comparable): BlockState;
static writeNbtToBlockEntity(world: World,player: PlayerEntity,pos: BlockPos,stack: ItemStack): boolean;
static BLOCK_ENTITY_TAG_KEY: string;
static BLOCK_STATE_TAG_KEY: string;
}

//net.minecraft.item.EggItem
class EggItem extends Item{
 use(world: World,user: PlayerEntity,hand: Hand): TypedActionResult;
}

//net.minecraft.item.BrushItem
class BrushItem extends Item{
 getMaxUseTime(stack: ItemStack): number;
 getUseAction(stack: ItemStack): UseAction;
 usageTick(world: World,user: LivingEntity,stack: ItemStack,remainingUseTicks: number): void;
 useOnBlock(context: ItemUsageContext): ActionResult;
 addDustParticles(world: World,hitResult: BlockHitResult,state: BlockState,userRotation: Vec3d,arm: Arm): void;
}
class Static_BrushItem {
static method_51163(equipmentSlot: EquipmentSlot,userx: LivingEntity): void;
static method_51309(entity: Entity): boolean;
static field_43390: number;
static MAX_BRUSH_TIME: number;
static MAX_BRUSH_DISTANCE: number;
}

//net.minecraft.item.ToolItem
class ToolItem extends Item{
 getEnchantability(): number;
 getMaterial(): ToolMaterial;
 canRepair(stack: ItemStack,ingredient: ItemStack): boolean;
}

//net.minecraft.item.FireChargeItem
class FireChargeItem extends Item{
 useOnBlock(context: ItemUsageContext): ActionResult;
}

//net.minecraft.item.ShieldItem
class ShieldItem extends Item, Equipment{
 use(world: World,user: PlayerEntity,hand: Hand): TypedActionResult;
 appendTooltip(stack: ItemStack,world: World,tooltip: List,context: TooltipContext): void;
 getMaxUseTime(stack: ItemStack): number;
 getUseAction(stack: ItemStack): UseAction;
 canRepair(stack: ItemStack,ingredient: ItemStack): boolean;
 getTranslationKey(stack: ItemStack): string;
 getSlotType(): EquipmentSlot;
}
class Static_ShieldItem {
static getColor(stack: ItemStack): DyeColor;
static field_30918: number;
static MIN_DAMAGE_AMOUNT_TO_BREAK: number;
static BASE_KEY: string;
}

//net.minecraft.item.GoatHornItem
class GoatHornItem extends Item{
 use(world: World,user: PlayerEntity,hand: Hand): TypedActionResult;
 appendTooltip(stack: ItemStack,world: World,tooltip: List,context: TooltipContext): void;
 getMaxUseTime(stack: ItemStack): number;
 getUseAction(stack: ItemStack): UseAction;
}
class Static_GoatHornItem {
static getStackForInstrument(item: Item,instrument: RegistryEntry): ItemStack;
static playSound(world: World,player: PlayerEntity,instrument: Instrument): void;
static setRandomInstrumentFromTag(stack: ItemStack,instrumentTag: TagKey,random: Random): void;
static method_45432(instrument: RegistryEntry): Integer;
static method_43710(random: Random,entryList: RegistryEntryList_Named): Optional;
static method_45433(itemStack: ItemStack,instrument: RegistryEntry): void;
static setInstrument(stack: ItemStack,instrument: RegistryEntry): void;
static method_43712(): IllegalStateException;
static INSTRUMENT_KEY: string;
}

//net.minecraft.item.FireworkStarItem
class FireworkStarItem extends Item{
 appendTooltip(stack: ItemStack,world: World,tooltip: List,context: TooltipContext): void;
}
class Static_FireworkStarItem {
static appendColors(line: MutableText,colors: number[]): Text;
static getColorText(color: number): Text;
static appendFireworkTooltip(nbt: NbtCompound,tooltip: List): void;
}

//net.minecraft.item.PotionItem
class PotionItem extends Item{
 use(world: World,user: PlayerEntity,hand: Hand): TypedActionResult;
 appendTooltip(stack: ItemStack,world: World,tooltip: List,context: TooltipContext): void;
 getMaxUseTime(stack: ItemStack): number;
 getUseAction(stack: ItemStack): UseAction;
 getDefaultStack(): ItemStack;
 finishUsing(stack: ItemStack,world: World,user: LivingEntity): ItemStack;
 useOnBlock(context: ItemUsageContext): ActionResult;
 getTranslationKey(stack: ItemStack): string;
}
class Static_PotionItem {
static MAX_USE_TIME: number;
}

//net.minecraft.item.EnchantedBookItem
class EnchantedBookItem extends Item{
 appendTooltip(stack: ItemStack,world: World,tooltip: List,context: TooltipContext): void;
 hasGlint(stack: ItemStack): boolean;
 isEnchantable(stack: ItemStack): boolean;
}
class Static_EnchantedBookItem {
static forEnchantment(info: EnchantmentLevelEntry): ItemStack;
static addEnchantment(stack: ItemStack,entry: EnchantmentLevelEntry): void;
static getEnchantmentNbt(stack: ItemStack): NbtList;
static STORED_ENCHANTMENTS_KEY: string;
}

//net.minecraft.item.OnAStickItem
class OnAStickItem extends Item{
 use(world: World,user: PlayerEntity,hand: Hand): TypedActionResult;
}
class Static_OnAStickItem {
static method_20271(hand: Hand,p: PlayerEntity): void;
}

//net.minecraft.item.NameTagItem
class NameTagItem extends Item{
 useOnEntity(stack: ItemStack,user: PlayerEntity,entity: LivingEntity,hand: Hand): ActionResult;
}

//net.minecraft.item.ChorusFruitItem
class ChorusFruitItem extends Item{
 finishUsing(stack: ItemStack,world: World,user: LivingEntity): ItemStack;
}

//net.minecraft.item.NetherStarItem
class NetherStarItem extends Item{
 hasGlint(stack: ItemStack): boolean;
}

//net.minecraft.item.SnowballItem
class SnowballItem extends Item{
 use(world: World,user: PlayerEntity,hand: Hand): TypedActionResult;
}

//net.minecraft.item.BookItem
class BookItem extends Item{
 getEnchantability(): number;
 isEnchantable(stack: ItemStack): boolean;
}

//net.minecraft.item.SuspiciousStewItem
class SuspiciousStewItem extends Item{
 appendTooltip(stack: ItemStack,world: World,tooltip: List,context: TooltipContext): void;
 finishUsing(stack: ItemStack,world: World,user: LivingEntity): ItemStack;
}
class Static_SuspiciousStewItem {
static addEffectToStew(stew: ItemStack,effect: StatusEffect,duration: number): void;
static forEachEffect(stew: ItemStack,effectConsumer: Consumer): void;
static EFFECTS_KEY: string;
static EFFECT_ID_KEY: string;
static EFFECT_DURATION_KEY: string;
static DEFAULT_DURATION: number;
}

//net.minecraft.item.MusicDiscItem
class MusicDiscItem extends Item{
 getDescription(): MutableText;
 appendTooltip(stack: ItemStack,world: World,tooltip: List,context: TooltipContext): void;
 getComparatorOutput(): number;
 getSound(): SoundEvent;
 useOnBlock(context: ItemUsageContext): ActionResult;
 getSongLengthInTicks(): number;
}
class Static_MusicDiscItem {
static bySound(sound: SoundEvent): MusicDiscItem;
static MUSIC_DISCS: Map;
}

//net.minecraft.item.ShearsItem
class ShearsItem extends Item{
 isSuitableFor(state: BlockState): boolean;
 postMine(stack: ItemStack,world: World,state: BlockState,pos: BlockPos,miner: LivingEntity): boolean;
 useOnBlock(context: ItemUsageContext): ActionResult;
 getMiningSpeedMultiplier(stack: ItemStack,state: BlockState): number;
}
class Static_ShearsItem {
static method_38078(itemUsageContext: ItemUsageContext,player: PlayerEntity): void;
static method_20280(e: LivingEntity): void;
}

//net.minecraft.item.BoatItem
class BoatItem extends Item{
 use(world: World,user: PlayerEntity,hand: Hand): TypedActionResult;
}
class Static_BoatItem {
static RIDERS: Predicate;
}

//net.minecraft.item.BucketItem
class BucketItem extends Item, FluidModificationItem{
 use(world: World,user: PlayerEntity,hand: Hand): TypedActionResult;
 onEmptied(player: PlayerEntity,world: World,stack: ItemStack,pos: BlockPos): void;
 placeFluid(player: PlayerEntity,world: World,pos: BlockPos,hitResult: BlockHitResult): boolean;
}
class Static_BucketItem {
static method_32342(playerEntity: PlayerEntity,sound: SoundEvent): void;
static getEmptiedStack(stack: ItemStack,player: PlayerEntity): ItemStack;
}

//net.minecraft.item.FlintAndSteelItem
class FlintAndSteelItem extends Item{
 useOnBlock(context: ItemUsageContext): ActionResult;
}
class Static_FlintAndSteelItem {
static method_20276(itemUsageContext: ItemUsageContext,p: PlayerEntity): void;
static method_20277(itemUsageContext: ItemUsageContext,p: PlayerEntity): void;
}

//net.minecraft.item.ArrowItem
class ArrowItem extends Item{
 createArrow(world: World,stack: ItemStack,shooter: LivingEntity): PersistentProjectileEntity;
}

//net.minecraft.item.HorseArmorItem
class HorseArmorItem extends Item{
 getEntityTexture(): Identifier;
 getBonus(): number;
}
class Static_HorseArmorItem {
static ENTITY_TEXTURE_PREFIX: string;
}

//net.minecraft.item.EnderEyeItem
class EnderEyeItem extends Item{
 use(world: World,user: PlayerEntity,hand: Hand): TypedActionResult;
 useOnBlock(context: ItemUsageContext): ActionResult;
}

//net.minecraft.item.GlassBottleItem
class GlassBottleItem extends Item{
 use(world: World,user: PlayerEntity,hand: Hand): TypedActionResult;
}
class Static_GlassBottleItem {
static method_7726(entity: AreaEffectCloudEntity): boolean;
}

//net.minecraft.item.MilkBucketItem
class MilkBucketItem extends Item{
 use(world: World,user: PlayerEntity,hand: Hand): TypedActionResult;
 getMaxUseTime(stack: ItemStack): number;
 getUseAction(stack: ItemStack): UseAction;
 finishUsing(stack: ItemStack,world: World,user: LivingEntity): ItemStack;
}
class Static_MilkBucketItem {
static MAX_USE_TIME: number;
}

//net.minecraft.item.DecorationItem
class DecorationItem extends Item{
 appendTooltip(stack: ItemStack,world: World,tooltip: List,context: TooltipContext): void;
 useOnBlock(context: ItemUsageContext): ActionResult;
}
class Static_DecorationItem {
static method_48959(list: List,key: RegistryKey): void;
static method_48958(list: List): void;
static method_48960(list: List,variant: RegistryEntry): void;
static RANDOM_TEXT: Text;
}

//net.minecraft.item.EnderPearlItem
class EnderPearlItem extends Item{
 use(world: World,user: PlayerEntity,hand: Hand): TypedActionResult;
}

//net.minecraft.item.EndCrystalItem
class EndCrystalItem extends Item{
 hasGlint(stack: ItemStack): boolean;
 useOnBlock(context: ItemUsageContext): ActionResult;
}

//net.minecraft.item.WrittenBookItem
class WrittenBookItem extends Item{
 getName(stack: ItemStack): Text;
 use(world: World,user: PlayerEntity,hand: Hand): TypedActionResult;
 appendTooltip(stack: ItemStack,world: World,tooltip: List,context: TooltipContext): void;
 hasGlint(stack: ItemStack): boolean;
 useOnBlock(context: ItemUsageContext): ActionResult;
}
class Static_WrittenBookItem {
static resolve(book: ItemStack,commandSource: ServerCommandSource,player: PlayerEntity): boolean;
static isValid(nbt: NbtCompound): boolean;
static getGeneration(stack: ItemStack): number;
static getPageCount(stack: ItemStack): number;
static textToJson(commandSource: ServerCommandSource,player: PlayerEntity,text: string): string;
static MAX_TITLE_EDIT_LENGTH: number;
static MAX_TITLE_VIEW_LENGTH: number;
static MAX_PAGE_EDIT_LENGTH: number;
static MAX_PAGE_VIEW_LENGTH: number;
static MAX_PAGES: number;
static field_30934: number;
static TITLE_KEY: string;
static FILTERED_TITLE_KEY: string;
static AUTHOR_KEY: string;
static PAGES_KEY: string;
static FILTERED_PAGES_KEY: string;
static GENERATION_KEY: string;
static RESOLVED_KEY: string;
}

//net.minecraft.item.SpawnEggItem
class SpawnEggItem extends Item{
 use(world: World,user: PlayerEntity,hand: Hand): TypedActionResult;
 getEntityType(nbt: NbtCompound): EntityType;
 getColor(tintIndex: number): number;
 getRequiredFeatures(): FeatureSet;
 useOnBlock(context: ItemUsageContext): ActionResult;
 spawnBaby(user: PlayerEntity,entity: MobEntity,entityType: EntityType,world: ServerWorld,pos: Vec3d,stack: ItemStack): Optional;
 isOfSameEntityType(nbt: NbtCompound,type: EntityType): boolean;
}
class Static_SpawnEggItem {
static getAll(): Iterable;
static forEntity(type: EntityType): SpawnEggItem;
static SPAWN_EGGS: Map;
}

//net.minecraft.item.SmithingTemplateItem
class SmithingTemplateItem extends Item{
 appendTooltip(stack: ItemStack,world: World,tooltip: List,context: TooltipContext): void;
 getTranslationKey(): string;
 getEmptyAdditionsSlotTextures(): List;
 getBaseSlotDescription(): Text;
 getEmptyBaseSlotTextures(): List;
 getAdditionsSlotDescription(): Text;
}
class Static_SmithingTemplateItem {
static of(trimPatternIn: Identifier): SmithingTemplateItem;
static of(trimPattern: RegistryKey): SmithingTemplateItem;
static createNetheriteUpgrade(): SmithingTemplateItem;
static getNetheriteUpgradeEmptyBaseSlotTextures(): List;
static getNetheriteUpgradeEmptyAdditionsSlotTextures(): List;
static getArmorTrimEmptyAdditionsSlotTextures(): List;
static getArmorTrimEmptyBaseSlotTextures(): List;
static TITLE_FORMATTING: Formatting;
static DESCRIPTION_FORMATTING: Formatting;
static TRANSLATION_KEY: string;
static INGREDIENTS_TEXT: Text;
static APPLIES_TO_TEXT: Text;
static NETHERITE_UPGRADE_TEXT: Text;
static ARMOR_TRIM_APPLIES_TO_TEXT: Text;
static ARMOR_TRIM_INGREDIENTS_TEXT: Text;
static ARMOR_TRIM_BASE_SLOT_DESCRIPTION_TEXT: Text;
static ARMOR_TRIM_ADDITIONS_SLOT_DESCRIPTION_TEXT: Text;
static NETHERITE_UPGRADE_APPLIES_TO_TEXT: Text;
static NETHERITE_UPGRADE_INGREDIENTS_TEXT: Text;
static NETHERITE_UPGRADE_BASE_SLOT_DESCRIPTION_TEXT: Text;
static NETHERITE_UPGRADE_ADDITIONS_SLOT_DESCRIPTION_TEXT: Text;
static EMPTY_ARMOR_SLOT_HELMET_TEXTURE: Identifier;
static EMPTY_ARMOR_SLOT_CHESTPLATE_TEXTURE: Identifier;
static EMPTY_ARMOR_SLOT_LEGGINGS_TEXTURE: Identifier;
static EMPTY_ARMOR_SLOT_BOOTS_TEXTURE: Identifier;
static EMPTY_SLOT_HOE_TEXTURE: Identifier;
static EMPTY_SLOT_AXE_TEXTURE: Identifier;
static EMPTY_SLOT_SWORD_TEXTURE: Identifier;
static EMPTY_SLOT_SHOVEL_TEXTURE: Identifier;
static EMPTY_SLOT_PICKAXE_TEXTURE: Identifier;
static EMPTY_SLOT_INGOT_TEXTURE: Identifier;
static EMPTY_SLOT_REDSTONE_DUST_TEXTURE: Identifier;
static EMPTY_SLOT_QUARTZ_TEXTURE: Identifier;
static EMPTY_SLOT_EMERALD_TEXTURE: Identifier;
static EMPTY_SLOT_DIAMOND_TEXTURE: Identifier;
static EMPTY_SLOT_LAPIS_LAZULI_TEXTURE: Identifier;
static EMPTY_SLOT_AMETHYST_SHARD_TEXTURE: Identifier;
}

//net.minecraft.item.ArmorStandItem
class ArmorStandItem extends Item{
 useOnBlock(context: ItemUsageContext): ActionResult;
}

//net.minecraft.item.ExperienceBottleItem
class ExperienceBottleItem extends Item{
 use(world: World,user: PlayerEntity,hand: Hand): TypedActionResult;
 hasGlint(stack: ItemStack): boolean;
}

//net.minecraft.item.ArmorItem
class ArmorItem extends Item, Equipment{
 getType(): ArmorItem_Type;
 use(world: World,user: PlayerEntity,hand: Hand): TypedActionResult;
 getEnchantability(): number;
 getAttributeModifiers(slot: EquipmentSlot): Multimap;
 getMaterial(): ArmorMaterial;
 canRepair(stack: ItemStack,ingredient: ItemStack): boolean;
 getSlotType(): EquipmentSlot;
 getToughness(): number;
 getProtection(): number;
 getEquipSound(): SoundEvent;
}
class Static_ArmorItem {
static dispenseArmor(pointer: BlockPointer,armor: ItemStack): boolean;
static method_48397(uuidMap: EnumMap): void;
static MODIFIERS: EnumMap;
static DISPENSER_BEHAVIOR: DispenserBehavior;
}

//net.minecraft.item.BundleItem
class BundleItem extends Item{
 use(world: World,user: PlayerEntity,hand: Hand): TypedActionResult;
 appendTooltip(stack: ItemStack,world: World,tooltip: List,context: TooltipContext): void;
 getTooltipData(stack: ItemStack): Optional;
 isItemBarVisible(stack: ItemStack): boolean;
 getItemBarColor(stack: ItemStack): number;
 getItemBarStep(stack: ItemStack): number;
 onStackClicked(stack: ItemStack,slot: Slot,clickType: ClickType,player: PlayerEntity): boolean;
 onClicked(stack: ItemStack,otherStack: ItemStack,slot: Slot,clickType: ClickType,player: PlayerEntity,cursorStackReference: StackReference): boolean;
 onItemEntityDestroyed(entity: ItemEntity): void;
}
class Static_BundleItem {
static getAmountFilled(stack: ItemStack): number;
static canMergeStack(stack: ItemStack,items: NbtList): Optional;
static method_31558(itemStack: ItemStack,item: NbtCompound): boolean;
static removeFirstStack(stack: ItemStack): Optional;
static method_32758(itemStack: ItemStack,slot: Slot,removedStack: ItemStack): void;
static addToBundle(bundle: ItemStack,stack: ItemStack): number;
static getItemOccupancy(stack: ItemStack): number;
static method_31564(itemStack: ItemStack): number;
static getBundledStacks(stack: ItemStack): Stream;
static getBundleOccupancy(stack: ItemStack): number;
static dropAllBundledItems(stack: ItemStack,player: PlayerEntity): boolean;
static ITEMS_KEY: string;
static MAX_STORAGE: number;
static BUNDLE_ITEM_OCCUPANCY: number;
static ITEM_BAR_COLOR: number;
}

//net.minecraft.item.SaddleItem
class SaddleItem extends Item{
 useOnEntity(stack: ItemStack,user: PlayerEntity,entity: LivingEntity,hand: Hand): ActionResult;
}

//net.minecraft.block.RespawnAnchorBlock$1


//net.minecraft.world.explosion.EntityExplosionBehavior
class EntityExplosionBehavior extends ExplosionBehavior{
 getBlastResistance(explosion: Explosion,world: BlockView,pos: BlockPos,blockState: BlockState,fluidState: FluidState): Optional;
 canDestroyBlock(explosion: Explosion,world: BlockView,pos: BlockPos,state: BlockState,power: number): boolean;
}

//net.minecraft.client.gui.screen.ingame.InventoryScreen
class InventoryScreen extends AbstractInventoryScreen, RecipeBookProvider{
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
 refreshRecipeBook(): void;
 getRecipeBookWidget(): RecipeBookWidget;
 mouseReleased(mouseX: number,mouseY: number,button: number): boolean;
 mouseClicked(mouseX: number,mouseY: number,button: number): boolean;
 handledScreenTick(): void;
}
class Static_InventoryScreen {
static method_29977(entityRenderDispatcher: EntityRenderDispatcher,livingEntity: LivingEntity,drawContext: DrawContext): void;
static drawEntity(context: DrawContext,x: number,y: number,size: number,mouseX: number,mouseY: number,entity: LivingEntity): void;
static drawEntity(context: DrawContext,x: number,y: number,size: number,quaternionf: Quaternionf,quaternionf2: Quaternionf,entity: LivingEntity): void;
static RECIPE_BUTTON_TEXTURE: Identifier;
}

//net.minecraft.client.gui.screen.ingame.CraftingScreen
class CraftingScreen extends HandledScreen, RecipeBookProvider{
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
 refreshRecipeBook(): void;
 getRecipeBookWidget(): RecipeBookWidget;
 mouseClicked(mouseX: number,mouseY: number,button: number): boolean;
 handledScreenTick(): void;
}
class Static_CraftingScreen {
static TEXTURE: Identifier;
static RECIPE_BUTTON_TEXTURE: Identifier;
}

//net.minecraft.client.gui.screen.ingame.AbstractFurnaceScreen
class AbstractFurnaceScreen extends HandledScreen, RecipeBookProvider{
 init(): void;
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
 charTyped(chr: char,modifiers: number): boolean;
 refreshRecipeBook(): void;
 getRecipeBookWidget(): RecipeBookWidget;
 keyPressed(keyCode: number,scanCode: number,modifiers: number): boolean;
 mouseClicked(mouseX: number,mouseY: number,button: number): boolean;
 handledScreenTick(): void;
 recipeBook: AbstractFurnaceRecipeBookScreen;
}
class Static_AbstractFurnaceScreen {
static RECIPE_BUTTON_TEXTURE: Identifier;
}

//net.minecraft.block.AbstractSkullBlock
class AbstractSkullBlock extends BlockWithEntity, Equipment{
 getSkullType(): SkullBlock_SkullType;
 canPathfindThrough(state: BlockState,world: BlockView,pos: BlockPos,type: NavigationType): boolean;
 getTicker(world: World,state: BlockState,type: BlockEntityType): BlockEntityTicker;
 createBlockEntity(pos: BlockPos,state: BlockState): BlockEntity;
 getSlotType(): EquipmentSlot;
}

//net.minecraft.block.WearableCarvedPumpkinBlock
class WearableCarvedPumpkinBlock extends CarvedPumpkinBlock, Equipment{
 getSlotType(): EquipmentSlot;
}

//net.minecraft.entity.decoration.painting.PaintingEntity
class PaintingEntity extends AbstractDecorationEntity, VariantHolder{
 getVariant(): RegistryEntry;
 getVariant(): Object;
 setVariant(variant: Object): void;
 setVariant(variant: RegistryEntry): void;
 refreshPositionAndAngles(x: number,y: number,z: number,yaw: number,pitch: number): void;
 getPickBlockStack(): ItemStack;
 onSpawnPacket(packet: EntitySpawnS2CPacket): void;
 updateTrackedPositionAndAngles(x: number,y: number,z: number,yaw: number,pitch: number,interpolationSteps: number,interpolate: boolean): void;
 onBreak(entity: Entity): void;
 createSpawnPacket(): Packet;
 onTrackedDataSet(data: TrackedData): void;
 getSyncedPos(): Vec3d;
 writeCustomDataToNbt(nbt: NbtCompound): void;
 readCustomDataFromNbt(nbt: NbtCompound): void;
 getWidthPixels(): number;
 onPlace(): void;
 getHeightPixels(): number;
}
class Static_PaintingEntity {
static getSize(variant: RegistryEntry): number;
static writeVariantToNbt(nbt: NbtCompound,variant: RegistryEntry): void;
static placePainting(world: World,pos: BlockPos,facing: Direction): Optional;
static readVariantFromNbt(nbt: NbtCompound): Optional;
static method_48927(id: Identifier): RegistryKey;
static method_43399(i: number,variant: RegistryEntry): boolean;
static method_43400(paintingEntity: PaintingEntity,variant: RegistryEntry): boolean;
static getDefaultVariant(): RegistryEntry;
static VARIANT: TrackedData;
static DEFAULT_VARIANT: RegistryKey;
static VARIANT_NBT_KEY: string;
}

//net.minecraft.util.hit.EntityHitResult
class EntityHitResult extends HitResult{
 getType(): HitResult_Type;
 getEntity(): Entity;
}

//net.minecraft.util.hit.BlockHitResult
class BlockHitResult extends HitResult{
 getType(): HitResult_Type;
 isInsideBlock(): boolean;
 getBlockPos(): BlockPos;
 withSide(side: Direction): BlockHitResult;
 getSide(): Direction;
 withBlockPos(blockPos: BlockPos): BlockHitResult;
}
class Static_BlockHitResult {
static createMissed(pos: Vec3d,side: Direction,blockPos: BlockPos): BlockHitResult;
}

//net.minecraft.client.render.block.entity.SignBlockEntityRenderer$SignModel
class SignBlockEntityRenderer_SignModel extends Model{
 render(matrices: MatrixStack,vertices: VertexConsumer,light: number,overlay: number,red: number,green: number,blue: number,alpha: number): void;
 root: ModelPart;
 stick: ModelPart;
}

//net.minecraft.client.render.entity.model.BookModel
class BookModel extends Model{
 render(matrices: MatrixStack,vertices: VertexConsumer,light: number,overlay: number,red: number,green: number,blue: number,alpha: number): void;
 renderBook(matrices: MatrixStack,vertices: VertexConsumer,light: number,overlay: number,red: number,green: number,blue: number,alpha: number): void;
 setPageAngles(pageTurnAmount: number,leftFlipAmount: number,rightFlipAmount: number,pageTurnSpeed: number): void;
}
class Static_BookModel {
static getTexturedModelData(): TexturedModelData;
static LEFT_PAGES: string;
static RIGHT_PAGES: string;
static FLIP_PAGE1: string;
static FLIP_PAGE2: string;
}

//net.minecraft.client.render.block.entity.SkullBlockEntityModel
class SkullBlockEntityModel extends Model{
 setHeadRotation(animationProgress: number,yaw: number,pitch: number): void;
}

//net.minecraft.client.render.entity.model.EntityModel
class EntityModel extends Model{
 animateModel(entity: Entity,limbAngle: number,limbDistance: number,tickDelta: number): void;
 copyStateTo(copy: EntityModel): void;
 setAngles(entity: Entity,limbAngle: number,limbDistance: number,animationProgress: number,headYaw: number,headPitch: number): void;
 handSwingProgress: number;
 riding: boolean;
 child: boolean;
}

//net.minecraft.client.render.entity.model.ShieldEntityModel
class ShieldEntityModel extends Model{
 getHandle(): ModelPart;
 render(matrices: MatrixStack,vertices: VertexConsumer,light: number,overlay: number,red: number,green: number,blue: number,alpha: number): void;
 getPlate(): ModelPart;
}
class Static_ShieldEntityModel {
static getTexturedModelData(): TexturedModelData;
static PLATE: string;
static HANDLE: string;
static field_32551: number;
static field_32552: number;
}

//net.minecraft.client.render.entity.model.TridentEntityModel
class TridentEntityModel extends Model{
 render(matrices: MatrixStack,vertices: VertexConsumer,light: number,overlay: number,red: number,green: number,blue: number,alpha: number): void;
}
class Static_TridentEntityModel {
static getTexturedModelData(): TexturedModelData;
static TEXTURE: Identifier;
}

//net.minecraft.client.render.block.entity.HangingSignBlockEntityRenderer$HangingSignModel
class HangingSignBlockEntityRenderer_HangingSignModel extends Model{
 render(matrices: MatrixStack,vertices: VertexConsumer,light: number,overlay: number,red: number,green: number,blue: number,alpha: number): void;
 updateVisibleParts(state: BlockState): void;
 root: ModelPart;
 plank: ModelPart;
 vChains: ModelPart;
 normalChains: ModelPart;
}

//net.minecraft.world.gen.structure.OceanMonumentStructure
class OceanMonumentStructure extends Structure{
 getType(): StructureType;
 getStructurePosition(context: Structure_Context): Optional;
}
class Static_OceanMonumentStructure {
static addPieces(collector: StructurePiecesCollector,context: Structure_Context): void;
static modifyPiecesOnRead(pos: ChunkPos,worldSeed: long,pieces: StructurePiecesList): StructurePiecesList;
static method_41675(context: Structure_Context,collector: StructurePiecesCollector): void;
static createBasePiece(pos: ChunkPos,random: ChunkRandom): StructurePiece;
static CODEC: Codec;
}

//net.minecraft.world.gen.structure.NetherFortressStructure
class NetherFortressStructure extends Structure{
 getType(): StructureType;
 getStructurePosition(context: Structure_Context): Optional;
}
class Static_NetherFortressStructure {
static addPieces(collector: StructurePiecesCollector,context: Structure_Context): void;
static method_41670(context: Structure_Context,collector: StructurePiecesCollector): void;
static MONSTER_SPAWNS: Pool;
static CODEC: Codec;
}

//net.minecraft.world.gen.structure.BasicTempleStructure
class BasicTempleStructure extends Structure{
 getStructurePosition(context: Structure_Context): Optional;
}

//net.minecraft.world.gen.structure.WoodlandMansionStructure
class WoodlandMansionStructure extends Structure{
 getType(): StructureType;
 getStructurePosition(context: Structure_Context): Optional;
 postPlace(world: StructureWorldAccess,structureAccessor: StructureAccessor,chunkGenerator: ChunkGenerator,random: Random,box: BlockBox,chunkPos: ChunkPos,pieces: StructurePiecesList): void;
}
class Static_WoodlandMansionStructure {
static CODEC: Codec;
}

//net.minecraft.world.gen.structure.ShipwreckStructure
class ShipwreckStructure extends Structure{
 getType(): StructureType;
 getStructurePosition(context: Structure_Context): Optional;
 beached: boolean;
}
class Static_ShipwreckStructure {
static method_41689(instance: RecordCodecBuilder_Instance): App;
static method_41688(shipwreckStructure: ShipwreckStructure): Boolean;
static CODEC: Codec;
}

//net.minecraft.world.gen.structure.IglooStructure
class IglooStructure extends Structure{
 getType(): StructureType;
 getStructurePosition(context: Structure_Context): Optional;
}
class Static_IglooStructure {
static CODEC: Codec;
}

//net.minecraft.world.gen.structure.OceanRuinStructure
class OceanRuinStructure extends Structure{
 getType(): StructureType;
 getStructurePosition(context: Structure_Context): Optional;
 biomeTemperature: OceanRuinStructure_BiomeTemperature;
 largeProbability: number;
 clusterProbability: number;
}
class Static_OceanRuinStructure {
static method_41679(instance: RecordCodecBuilder_Instance): App;
static method_41681(structure: OceanRuinStructure): OceanRuinStructure_BiomeTemperature;
static method_41680(structure: OceanRuinStructure): Float;
static method_41678(structure: OceanRuinStructure): Float;
static CODEC: Codec;
}

//net.minecraft.world.gen.structure.MineshaftStructure
class MineshaftStructure extends Structure{
 getType(): StructureType;
 getStructurePosition(context: Structure_Context): Optional;
}
class Static_MineshaftStructure {
static method_41669(instance: RecordCodecBuilder_Instance): App;
static method_41667(mineshaftStructure: MineshaftStructure): MineshaftStructure_Type;
static CODEC: Codec;
}

//net.minecraft.world.gen.structure.JigsawStructure
class JigsawStructure extends Structure{
 getType(): StructureType;
 getStructurePosition(context: Structure_Context): Optional;
}
class Static_JigsawStructure {
static validate(structure: JigsawStructure): DataResult;
static method_42707(structure: JigsawStructure): HeightProvider;
static method_43567(structure: JigsawStructure): Optional;
static method_42709(structure: JigsawStructure): Integer;
static method_42706(structure: JigsawStructure): Boolean;
static method_41662(instance: RecordCodecBuilder_Instance): App;
static method_42710(structure: JigsawStructure): RegistryEntry;
static method_49541(): string;
static method_42705(structure: JigsawStructure): Optional;
static method_42704(structure: JigsawStructure): Integer;
static MAX_SIZE: number;
static CODEC: Codec;
}

//net.minecraft.world.gen.structure.EndCityStructure
class EndCityStructure extends Structure{
 getType(): StructureType;
 getStructurePosition(context: Structure_Context): Optional;
}
class Static_EndCityStructure {
static CODEC: Codec;
}

//net.minecraft.world.gen.structure.RuinedPortalStructure
class RuinedPortalStructure extends Structure{
 getType(): StructureType;
 getStructurePosition(context: Structure_Context): Optional;
}
class Static_RuinedPortalStructure {
static method_27205(chunkGenerator: ChunkGenerator,heightLimitView: HeightLimitView,noiseConfig: NoiseConfig,pos: BlockPos): VerticalBlockSample;
static method_41683(setup: RuinedPortalStructure_Setup,properties: RuinedPortalStructurePiece_Properties,blockPos: BlockPos,context: Structure_Context,noiseConfig: NoiseConfig,identifier: Identifier,structureTemplate: StructureTemplate,blockRotation: BlockRotation,blockMirror: BlockMirror,blockPos2: BlockPos,collector: StructurePiecesCollector): void;
static isColdAt(pos: BlockPos,biome: RegistryEntry): boolean;
static method_41685(instance: RecordCodecBuilder_Instance): App;
static method_41684(structure: RuinedPortalStructure): List;
static getFloorHeight(random: Random,chunkGenerator: ChunkGenerator,verticalPlacement: RuinedPortalStructurePiece_VerticalPlacement,airPocket: boolean,height: number,blockCountY: number,box: BlockBox,world: HeightLimitView,noiseConfig: NoiseConfig): number;
static choosePlacementHeight(random: Random,min: number,max: number): number;
static shouldPlaceAirPocket(random: ChunkRandom,probability: number): boolean;
static COMMON_PORTAL_STRUCTURE_IDS: String[];
static RARE_PORTAL_STRUCTURE_IDS: String[];
static RARE_PORTAL_CHANCE: number;
static MIN_BLOCKS_ABOVE_WORLD_BOTTOM: number;
static CODEC: Codec;
}

//net.minecraft.world.gen.structure.SwampHutStructure
class SwampHutStructure extends Structure{
 getType(): StructureType;
 getStructurePosition(context: Structure_Context): Optional;
}
class Static_SwampHutStructure {
static addPieces(collector: StructurePiecesCollector,context: Structure_Context): void;
static method_41693(context: Structure_Context,collector: StructurePiecesCollector): void;
static CODEC: Codec;
}

//net.minecraft.world.gen.structure.NetherFossilStructure
class NetherFossilStructure extends Structure{
 getType(): StructureType;
 getStructurePosition(context: Structure_Context): Optional;
 height: HeightProvider;
}
class Static_NetherFossilStructure {
static method_41673(structure: NetherFossilStructure): HeightProvider;
static method_41674(instance: RecordCodecBuilder_Instance): App;
static method_41672(collector: Structure_Context,chunkRandom: ChunkRandom,blockPos: BlockPos,holder: StructurePiecesCollector): void;
static CODEC: Codec;
}

//net.minecraft.world.gen.structure.StrongholdStructure
class StrongholdStructure extends Structure{
 getType(): StructureType;
 getStructurePosition(context: Structure_Context): Optional;
}
class Static_StrongholdStructure {
static addPieces(collector: StructurePiecesCollector,context: Structure_Context): void;
static method_41690(context: Structure_Context,collector: StructurePiecesCollector): void;
static CODEC: Codec;
}

//net.minecraft.world.gen.structure.BuriedTreasureStructure
class BuriedTreasureStructure extends Structure{
 getType(): StructureType;
 getStructurePosition(context: Structure_Context): Optional;
}
class Static_BuriedTreasureStructure {
static addPieces(collector: StructurePiecesCollector,context: Structure_Context): void;
static method_41652(context: Structure_Context,collector: StructurePiecesCollector): void;
static CODEC: Codec;
}

//net.minecraft.item.PowderSnowBucketItem
class PowderSnowBucketItem extends BlockItem, FluidModificationItem{
 useOnBlock(context: ItemUsageContext): ActionResult;
 getTranslationKey(): string;
 placeFluid(player: PlayerEntity,world: World,pos: BlockPos,hitResult: BlockHitResult): boolean;
}

//net.minecraft.util.math.BlockPos
class BlockPos extends Vec3i{
 add(vec3i: Vec3i): BlockPos;
 add(i: number,j: number,k: number): BlockPos;
 add(vec: Vec3i): Vec3i;
 add(x: number,y: number,z: number): Vec3i;
 offset(direction: Direction,i: number): BlockPos;
 offset(direction: Direction): BlockPos;
 offset(axis: Direction_Axis,distance: number): Vec3i;
 offset(axis: Direction_Axis,i: number): BlockPos;
 offset(direction: Direction): Vec3i;
 offset(direction: Direction,distance: number): Vec3i;
 multiply(i: number): BlockPos;
 multiply(scale: number): Vec3i;
 rotate(rotation: BlockRotation): BlockPos;
 up(distance: number): Vec3i;
 up(): BlockPos;
 up(): Vec3i;
 up(distance: number): BlockPos;
 down(): Vec3i;
 down(distance: number): Vec3i;
 down(): BlockPos;
 down(i: number): BlockPos;
 subtract(vec: Vec3i): Vec3i;
 subtract(vec3i: Vec3i): BlockPos;
 toImmutable(): BlockPos;
 crossProduct(pos: Vec3i): BlockPos;
 crossProduct(vec: Vec3i): Vec3i;
 asLong(): long;
 mutableCopy(): BlockPos_Mutable;
 withY(y: number): BlockPos;
 south(): Vec3i;
 south(distance: number): Vec3i;
 south(distance: number): BlockPos;
 south(): BlockPos;
 north(): BlockPos;
 north(): Vec3i;
 north(distance: number): Vec3i;
 north(distance: number): BlockPos;
 west(distance: number): Vec3i;
 west(): Vec3i;
 west(): BlockPos;
 west(distance: number): BlockPos;
 east(): Vec3i;
 east(): BlockPos;
 east(distance: number): BlockPos;
 east(distance: number): Vec3i;
 toCenterPos(): Vec3d;
}
class Static_BlockPos {
static add(value: long,x: number,y: number,z: number): long;
static stream(startX: number,startY: number,startZ: number,endX: number,endY: number,endZ: number): Stream;
static stream(start: BlockPos,end: BlockPos): Stream;
static stream(box: BlockBox): Stream;
static stream(box: Box): Stream;
static offset(value: long,direction: Direction): long;
static iterate(start: BlockPos,end: BlockPos): Iterable;
static iterate(startX: number,startY: number,startZ: number,endX: number,endY: number,endZ: number): Iterable;
static iterateRandomly(random: Random,count: number,minX: number,minY: number,minZ: number,maxX: number,maxY: number,maxZ: number): Iterable;
static iterateRandomly(random: Random,count: number,around: BlockPos,range: number): Iterable;
static asLong(x: number,y: number,z: number): long;
static iterateOutwards(center: BlockPos,rangeX: number,rangeY: number,rangeZ: number): Iterable;
static ofFloored(x: number,y: number,z: number): BlockPos;
static ofFloored(pos: Position): BlockPos;
static iterateInSquare(center: BlockPos,radius: number,firstDirection: Direction,secondDirection: Direction): Iterable;
static unpackLongZ(packedPos: long): number;
static unpackLongX(packedPos: long): number;
static unpackLongY(packedPos: long): number;
static findClosest(pos: BlockPos,horizontalRange: number,verticalRange: number,condition: Predicate): Optional;
static method_25995(i: number,j: number,k: number,l: number,m: number,n: number,o: number): Iterator;
static streamOutwards(center: BlockPos,maxX: number,maxY: number,maxZ: number): Stream;
static method_10073(i: number,j: number,k: number,l: number,m: number,n: number): Iterator;
static method_27155(i: number,j: number,random: Random,k: number,l: number,m: number,n: number,o: number): Iterator;
static method_30514(direction: Direction,direction2: Direction,blockPos: BlockPos,i: number): Iterator;
static iterateRecursively(pos: BlockPos,maxDepth: number,maxIterations: number,nextQueuer: BiConsumer,callback: Predicate): number;
static method_49926(queue: Queue,i: number,queuedPos: BlockPos): void;
static method_29093(pos: BlockPos): IntStream;
static method_29095(values: number[]): BlockPos;
static method_29094(stream: IntStream): DataResult;
static fromLong(packedPos: long): BlockPos;
static streamSouthEastSquare(pos: BlockPos): Stream;
static removeChunkSectionLocalY(y: long): long;
static CODEC: Codec;
static LOGGER: Logger;
static ORIGIN: BlockPos;
static SIZE_BITS_X: number;
static SIZE_BITS_Z: number;
static SIZE_BITS_Y: number;
static BITS_X: long;
static BITS_Y: long;
static BITS_Z: long;
static field_33083: number;
static BIT_SHIFT_Z: number;
static BIT_SHIFT_X: number;
}

//net.minecraft.util.math.ChunkSectionPos
class ChunkSectionPos extends Vec3i{
 add(i: number,j: number,k: number): ChunkSectionPos;
 add(x: number,y: number,z: number): Vec3i;
 getCenterPos(): BlockPos;
 asLong(): long;
 toChunkPos(): ChunkPos;
 unpackBlockPos(packedLocalPos: short): BlockPos;
 getSectionY(): number;
 getSectionZ(): number;
 getSectionX(): number;
 getMinX(): number;
 getMaxX(): number;
 getMinY(): number;
 getMaxZ(): number;
 getMinZ(): number;
 getMaxY(): number;
 getMinPos(): BlockPos;
 streamBlocks(): Stream;
 unpackBlockY(packedLocalPos: short): number;
 unpackBlockZ(packedLocalPos: short): number;
 unpackBlockX(packedLocalPos: short): number;
}
class Static_ChunkSectionPos {
static stream(minX: number,minY: number,minZ: number,maxX: number,maxY: number,maxZ: number): Stream;
static stream(center: ChunkSectionPos,radius: number): Stream;
static stream(center: ChunkPos,radius: number,minY: number,maxY: number): Stream;
static offset(packed: long,x: number,y: number,z: number): long;
static offset(packed: long,direction: Direction): long;
static from(chunkPos: ChunkPos,y: number): ChunkSectionPos;
static from(x: number,y: number,z: number): ChunkSectionPos;
static from(pos: BlockPos): ChunkSectionPos;
static from(entity: EntityLike): ChunkSectionPos;
static from(chunk: Chunk): ChunkSectionPos;
static from(packed: long): ChunkSectionPos;
static from(pos: Position): ChunkSectionPos;
static fromBlockPos(blockPos: long): long;
static getSectionCoordFloored(coord: number): number;
static forEachChunkSectionAround(pos: long,consumer: LongConsumer): void;
static forEachChunkSectionAround(x: number,y: number,z: number,consumer: LongConsumer): void;
static forEachChunkSectionAround(pos: BlockPos,consumer: LongConsumer): void;
static getLocalCoord(coord: number): number;
static getOffsetPos(chunkCoord: number,offset: number): number;
static withZeroY(pos: long): long;
static withZeroY(x: number,z: number): long;
static asLong(x: number,y: number,z: number): long;
static toLong(pos: BlockPos): long;
static getSectionCoord(coord: number): number;
static getSectionCoord(coord: number): number;
static unpackY(packed: long): number;
static unpackX(packed: long): number;
static unpackZ(packed: long): number;
static packLocal(pos: BlockPos): short;
static getBlockCoord(sectionCoord: number): number;
static unpackLocalY(packedLocalPos: short): number;
static unpackLocalZ(packedLocalPos: short): number;
static unpackLocalX(packedLocalPos: short): number;
static field_33096: number;
static field_33097: number;
static field_33100: number;
static field_33098: number;
static field_33099: number;
static field_33101: number;
static field_33102: number;
static field_33103: number;
static field_33104: long;
static field_33105: long;
static field_33106: long;
static field_33107: number;
static field_33108: number;
static field_33109: number;
static field_33110: number;
static field_33111: number;
static field_33112: number;
}

//net.minecraft.predicate.NumberRange$FloatRange
class NumberRange_FloatRange extends NumberRange{
 test(value: number): boolean;
 testSqrt(value: number): boolean;
}
class Static_NumberRange_FloatRange {
static create(reader: StringReader,min: Double,max: Double): NumberRange_FloatRange;
static parse(reader: StringReader): NumberRange_FloatRange;
static parse(reader: StringReader,mapper: Function): NumberRange_FloatRange;
static between(min: number,max: number): NumberRange_FloatRange;
static square(value: Double): Double;
static fromJson(element: JsonElement): NumberRange_FloatRange;
static atMost(value: number): NumberRange_FloatRange;
static atLeast(value: number): NumberRange_FloatRange;
static exactly(value: number): NumberRange_FloatRange;
static method_9052(value: Double): Double;
static ANY: NumberRange_FloatRange;
}

//net.minecraft.predicate.NumberRange$IntRange
class NumberRange_IntRange extends NumberRange{
 test(value: number): boolean;
 testSqrt(value: long): boolean;
}
class Static_NumberRange_IntRange {
static parse(reader: StringReader): NumberRange_IntRange;
static parse(reader: StringReader,min: Integer,max: Integer): NumberRange_IntRange;
static between(min: number,max: number): NumberRange_IntRange;
static fromJson(element: JsonElement): NumberRange_IntRange;
static atMost(value: number): NumberRange_IntRange;
static atLeast(value: number): NumberRange_IntRange;
static exactly(value: number): NumberRange_IntRange;
static method_9061(value: Integer): Integer;
static squared(value: Integer): Long;
static fromStringReader(reader: StringReader,converter: Function): NumberRange_IntRange;
static ANY: NumberRange_IntRange;
}

//net.minecraft.client.world.ClientChunkManager
class ClientChunkManager extends ChunkManager{
 unload(chunkX: number,chunkZ: number): void;
 tick(shouldKeepTicking: BooleanSupplier,tickChunks: boolean): void;
 onChunkBiomeData(x: number,z: number,buf: PacketByteBuf): void;
 onLightUpdate(type: LightType,pos: ChunkSectionPos): void;
 setChunkMapCenter(x: number,z: number): void;
 updateLoadDistance(loadDistance: number): void;
 getLoadedChunkCount(): number;
 getDebugString(): string;
 getWorld(): BlockView;
 getChunk(x: number,z: number,leastStatus: ChunkStatus,create: boolean): Chunk;
 getChunk(i: number,j: number,chunkStatus: ChunkStatus,bl: boolean): WorldChunk;
 loadChunkFromPacket(x: number,z: number,buf: PacketByteBuf,nbt: NbtCompound,consumer: Consumer): WorldChunk;
 getLightingProvider(): LightingProvider;
}
class Static_ClientChunkManager {
static positionEquals(chunk: WorldChunk,x: number,z: number): boolean;
static getChunkMapRadius(loadDistance: number): number;
static LOGGER: Logger;
}

//net.minecraft.server.world.ServerChunkManager
class ServerChunkManager extends ChunkManager{
 close(): void;
 save(flush: boolean): void;
 tick(shouldKeepTicking: BooleanSupplier,tickChunks: boolean): void;
 removePersistentTickets(): void;
 getSpawnInfo(): SpawnHelper_Info;
 applySimulationDistance(simulationDistance: number): void;
 setMobSpawnOptions(spawnMonsters: boolean,spawnAnimals: boolean): void;
 applyViewDistance(watchDistance: number): void;
 onLightUpdate(type: LightType,pos: ChunkSectionPos): void;
 getChunkGenerator(): ChunkGenerator;
 getNoiseConfig(): NoiseConfig;
 getLoadedChunkCount(): number;
 sendToOtherNearbyPlayers(entity: Entity,packet: Packet): void;
 sendToNearbyPlayers(entity: Entity,packet: Packet): void;
 getChunkLoadingDebugInfo(pos: ChunkPos): string;
 getChunkFutureSyncOnMainThread(chunkX: number,chunkZ: number,leastStatus: ChunkStatus,create: boolean): CompletableFuture;
 isChunkLoaded(x: number,z: number): boolean;
 updatePosition(player: ServerPlayerEntity): void;
 getDebugString(): string;
 getWorld(): World;
 getWorld(): BlockView;
 getChunk(chunkX: number,chunkZ: number): LightSourceView;
 getChunk(x: number,z: number,leastStatus: ChunkStatus,create: boolean): Chunk;
 setChunkForced(pos: ChunkPos,forced: boolean): void;
 getLightingProvider(): LightingProvider;
 getLightingProvider(): ServerLightingProvider;
 getStructurePlacementCalculator(): StructurePlacementCalculator;
 getWorldChunk(chunkX: number,chunkZ: number): WorldChunk;
 getPointOfInterestStorage(): PointOfInterestStorage;
 addTicket(ticketType: ChunkTicketType,pos: ChunkPos,radius: number,argument: Object): void;
 markForUpdate(pos: BlockPos): void;
 removeTicket(ticketType: ChunkTicketType,pos: ChunkPos,radius: number,argument: Object): void;
 unloadEntity(entity: Entity): void;
 loadEntity(entity: Entity): void;
 isTickingFutureReady(pos: long): boolean;
 getPersistentStateManager(): PersistentStateManager;
 getChunkIoWorker(): NbtScannable;
 getPendingTasks(): number;
 getTotalChunksLoadedCount(): number;
 executeQueuedTasks(): boolean;
 threadedAnvilChunkStorage: ThreadedAnvilChunkStorage;
}
class Static_ServerChunkManager {
static method_16150(chunk: Chunk): Chunk;
static method_16173(bl: boolean,unloaded: ChunkHolder_Unloaded): Chunk;
static method_14159(completableFuture: CompletableFuture): CompletionStage;
static method_38784(chunk: ServerChunkManager_ChunkWithHolder): void;
static CHUNK_STATUSES: List;
static CACHE_SIZE: number;
}

//net.minecraft.client.gui.screen.world.CreateWorldScreen$WorldTab
class CreateWorldScreen_WorldTab extends GridScreenTab{
 tick(): void;
}
class Static_CreateWorldScreen_WorldTab {
static method_48675(worldScreenOptionGrid: WorldScreenOptionGrid,creator: WorldCreator): void;
static method_48674(adder: GridWidget_Adder,widget: Widget): void;
static getWorldTypeNarrationMessage(worldTypeButton: CyclingButtonWidget): MutableText;
static WORLD_TAB_TITLE_TEXT: Text;
static AMPLIFIED_GENERATOR_INFO_TEXT: Text;
static MAP_FEATURES_TEXT: Text;
static MAP_FEATURES_INFO_TEXT: Text;
static BONUS_ITEMS_TEXT: Text;
static ENTER_SEED_TEXT: Text;
static SEED_INFO_TEXT: Text;
static field_42190: number;
}

//net.minecraft.client.gui.screen.world.CreateWorldScreen$MoreTab
class CreateWorldScreen_MoreTab extends GridScreenTab{
}
class Static_CreateWorldScreen_MoreTab {
static MORE_TAB_TITLE_TEXT: Text;
static GAME_RULES_TEXT: Text;
static DATA_PACKS_TEXT: Text;
}

//net.minecraft.client.gui.screen.world.CreateWorldScreen$GameTab
class CreateWorldScreen_GameTab extends GridScreenTab{
 tick(): void;
}
class Static_CreateWorldScreen_GameTab {
static method_48662(value: WorldCreator_Mode): Text;
static method_48663(value: Boolean): Tooltip;
static method_48665(cyclingButtonWidget: CyclingButtonWidget,creator: WorldCreator): void;
static GAME_TAB_TITLE_TEXT: Text;
static ALLOW_COMMANDS_TEXT: Text;
}

//net.minecraft.client.font.SpaceFont$Loader
class SpaceFont_Loader extends Record, FontLoader{
 equals(object: Object): boolean;
 toString(): string;
 hashCode(): number;
 getType(): FontType;
 build(): Either;
 advances(): Map;
}
class Static_SpaceFont_Loader {
static method_51733(instance: RecordCodecBuilder_Instance): App;
static CODEC: MapCodec;
}

//net.minecraft.client.font.TrueTypeFontLoader
class TrueTypeFontLoader extends Record, FontLoader{
 equals(object: Object): boolean;
 toString(): string;
 hashCode(): number;
 size(): number;
 location(): Identifier;
 getType(): FontType;
 shift(): TrueTypeFontLoader_Shift;
 skip(): string;
 build(): Either;
 oversample(): number;
}
class Static_TrueTypeFontLoader {
static method_51762(string: string): string;
static method_51761(instance: RecordCodecBuilder_Instance): App;
static method_51760(either: Either): string;
static method_51763(list: List): string;
static SKIP_CODEC: Codec;
static CODEC: MapCodec;
}

//net.minecraft.client.font.BitmapFont$Loader
class BitmapFont_Loader extends Record, FontLoader{
 equals(object: Object): boolean;
 toString(): string;
 hashCode(): number;
 file(): Identifier;
 getType(): FontType;
 build(): Either;
 height(): number;
 ascent(): number;
 codepointGrid(): number[][];
}
class Static_BitmapFont_Loader {
static validate(fontLoader: BitmapFont_Loader): DataResult;
static method_51750(strings: List): number[][];
static method_51756(): string;
static method_51753(loader: BitmapFont_Loader): string;
static method_51748(instance: RecordCodecBuilder_Instance): App;
static method_51644(i: number): BitmapFont_BitmapFontGlyph;
static method_51755(): string;
static method_51751(is: number[],i: number): string;
static method_51645(i: number): BitmapFont_BitmapFontGlyph;
static method_51754(codePointGrid: number[][]): List;
static validateCodePointGrid(codePointGrid: number[][]): DataResult;
static CODE_POINT_GRID_CODEC: Codec;
static CODEC: MapCodec;
}

//net.minecraft.client.font.ReferenceFont
class ReferenceFont extends Record, FontLoader{
 equals(object: Object): boolean;
 toString(): string;
 hashCode(): number;
 id(): Identifier;
 getType(): FontType;
 build(): Either;
}
class Static_ReferenceFont {
static method_51647(instance: RecordCodecBuilder_Instance): App;
static CODEC: MapCodec;
}

//net.minecraft.block.ComposterBlock
class ComposterBlock extends Block, InventoryProvider{
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 hasComparatorOutput(state: BlockState): boolean;
 getComparatorOutput(state: BlockState,world: World,pos: BlockPos): number;
 canPathfindThrough(state: BlockState,world: BlockView,pos: BlockPos,type: NavigationType): boolean;
 onBlockAdded(state: BlockState,world: World,pos: BlockPos,oldState: BlockState,notify: boolean): void;
 scheduledTick(state: BlockState,world: ServerWorld,pos: BlockPos,random: Random): void;
 getInventory(state: BlockState,world: WorldAccess,pos: BlockPos): SidedInventory;
 onUse(state: BlockState,world: World,pos: BlockPos,player: PlayerEntity,hand: Hand,hit: BlockHitResult): ActionResult;
 getRaycastShape(state: BlockState,world: BlockView,pos: BlockPos): VoxelShape;
 getCollisionShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
}
class Static_ComposterBlock {
static registerDefaultCompostableItems(): void;
static playEffects(world: World,pos: BlockPos,fill: boolean): void;
static emptyFullComposter(user: Entity,state: BlockState,world: World,pos: BlockPos): BlockState;
static method_17755(shapes: VoxelShape[]): void;
static compost(user: Entity,state: BlockState,world: ServerWorld,stack: ItemStack,pos: BlockPos): BlockState;
static emptyComposter(user: Entity,state: BlockState,world: WorldAccess,pos: BlockPos): BlockState;
static addToComposter(user: Entity,state: BlockState,world: WorldAccess,pos: BlockPos,stack: ItemStack): BlockState;
static registerCompostableItem(levelIncreaseChance: number,item: ItemConvertible): void;
static NUM_LEVELS: number;
static MIN_LEVEL: number;
static MAX_LEVEL: number;
static LEVEL: IntProperty;
static ITEM_TO_LEVEL_INCREASE_CHANCE: Object2FloatMap;
static field_31074: number;
static RAYCAST_SHAPE: VoxelShape;
static LEVEL_TO_COLLISION_SHAPE: VoxelShape[];
}

//net.minecraft.client.option.StickyKeyBinding
class StickyKeyBinding extends KeyBinding{
 setPressed(pressed: boolean): void;
}

//net.minecraft.world.gen.surfacebuilder.MaterialRules$SurfaceMaterialCondition
class MaterialRules_SurfaceMaterialCondition extends Enum, MaterialRules_MaterialCondition{
 apply(materialRuleContext: MaterialRules_MaterialRuleContext): MaterialRules_BooleanSupplier;
 apply(context: Object): Object;
 codec(): CodecHolder;
}
class Static_MaterialRules_SurfaceMaterialCondition {
static values(): MaterialRules_SurfaceMaterialCondition;
static valueOf(string: string): MaterialRules_SurfaceMaterialCondition;
static method_39475(): MaterialRules_SurfaceMaterialCondition;
static INSTANCE: MaterialRules_SurfaceMaterialCondition;
static CODEC: CodecHolder;
static field_35602: MaterialRules_SurfaceMaterialCondition;
}

//net.minecraft.world.gen.surfacebuilder.MaterialRules$TemperatureMaterialCondition
class MaterialRules_TemperatureMaterialCondition extends Enum, MaterialRules_MaterialCondition{
 apply(materialRuleContext: MaterialRules_MaterialRuleContext): MaterialRules_BooleanSupplier;
 apply(context: Object): Object;
 codec(): CodecHolder;
}
class Static_MaterialRules_TemperatureMaterialCondition {
static values(): MaterialRules_TemperatureMaterialCondition;
static valueOf(string: string): MaterialRules_TemperatureMaterialCondition;
static method_39093(): MaterialRules_TemperatureMaterialCondition;
static INSTANCE: MaterialRules_TemperatureMaterialCondition;
static CODEC: CodecHolder;
static field_35262: MaterialRules_TemperatureMaterialCondition;
}

//net.minecraft.world.gen.surfacebuilder.MaterialRules$StoneDepthMaterialCondition
class MaterialRules_StoneDepthMaterialCondition extends Record, MaterialRules_MaterialCondition{
 equals(object: Object): boolean;
 toString(): string;
 hashCode(): number;
 apply(context: Object): Object;
 apply(materialRuleContext: MaterialRules_MaterialRuleContext): MaterialRules_BooleanSupplier;
 offset(): number;
 secondaryDepthRange(): number;
 codec(): CodecHolder;
 surfaceType(): VerticalSurfaceType;
 addSurfaceDepth(): boolean;
}
class Static_MaterialRules_StoneDepthMaterialCondition {
static method_39089(instance: RecordCodecBuilder_Instance): App;
static CODEC: CodecHolder;
}

//net.minecraft.world.gen.surfacebuilder.MaterialRules$HoleMaterialCondition
class MaterialRules_HoleMaterialCondition extends Enum, MaterialRules_MaterialCondition{
 apply(materialRuleContext: MaterialRules_MaterialRuleContext): MaterialRules_BooleanSupplier;
 apply(context: Object): Object;
 codec(): CodecHolder;
}
class Static_MaterialRules_HoleMaterialCondition {
static values(): MaterialRules_HoleMaterialCondition;
static valueOf(string: string): MaterialRules_HoleMaterialCondition;
static method_39080(): MaterialRules_HoleMaterialCondition;
static INSTANCE: MaterialRules_HoleMaterialCondition;
static CODEC: CodecHolder;
static field_35245: MaterialRules_HoleMaterialCondition;
}

//net.minecraft.world.gen.surfacebuilder.MaterialRules$VerticalGradientMaterialCondition
class MaterialRules_VerticalGradientMaterialCondition extends Record, MaterialRules_MaterialCondition{
 equals(object: Object): boolean;
 toString(): string;
 hashCode(): number;
 apply(context: Object): Object;
 apply(materialRuleContext: MaterialRules_MaterialRuleContext): MaterialRules_BooleanSupplier;
 codec(): CodecHolder;
 randomName(): Identifier;
 trueAtAndBelow(): YOffset;
 falseAtAndAbove(): YOffset;
}
class Static_MaterialRules_VerticalGradientMaterialCondition {
static method_39480(instance: RecordCodecBuilder_Instance): App;
static CODEC: CodecHolder;
}

//net.minecraft.world.gen.surfacebuilder.MaterialRules$AboveYMaterialCondition
class MaterialRules_AboveYMaterialCondition extends Record, MaterialRules_MaterialCondition{
 equals(object: Object): boolean;
 toString(): string;
 hashCode(): number;
 apply(context: Object): Object;
 apply(materialRuleContext: MaterialRules_MaterialRuleContext): MaterialRules_BooleanSupplier;
 anchor(): YOffset;
 codec(): CodecHolder;
 addStoneDepth(): boolean;
 surfaceDepthMultiplier(): number;
}
class Static_MaterialRules_AboveYMaterialCondition {
static method_39099(instance: RecordCodecBuilder_Instance): App;
static CODEC: CodecHolder;
}

//net.minecraft.world.gen.surfacebuilder.MaterialRules$WaterMaterialCondition
class MaterialRules_WaterMaterialCondition extends Record, MaterialRules_MaterialCondition{
 equals(object: Object): boolean;
 toString(): string;
 hashCode(): number;
 apply(context: Object): Object;
 apply(materialRuleContext: MaterialRules_MaterialRuleContext): MaterialRules_BooleanSupplier;
 offset(): number;
 codec(): CodecHolder;
 addStoneDepth(): boolean;
 surfaceDepthMultiplier(): number;
}
class Static_MaterialRules_WaterMaterialCondition {
static method_39096(instance: RecordCodecBuilder_Instance): App;
static CODEC: CodecHolder;
}

//net.minecraft.world.gen.surfacebuilder.MaterialRules$NotMaterialCondition
class MaterialRules_NotMaterialCondition extends Record, MaterialRules_MaterialCondition{
 equals(object: Object): boolean;
 target(): MaterialRules_MaterialCondition;
 toString(): string;
 hashCode(): number;
 apply(context: Object): Object;
 apply(materialRuleContext: MaterialRules_MaterialRuleContext): MaterialRules_BooleanSupplier;
 codec(): CodecHolder;
}
class Static_MaterialRules_NotMaterialCondition {
static CODEC: CodecHolder;
}

//net.minecraft.world.gen.surfacebuilder.MaterialRules$NoiseThresholdMaterialCondition
class MaterialRules_NoiseThresholdMaterialCondition extends Record, MaterialRules_MaterialCondition{
 equals(object: Object): boolean;
 toString(): string;
 hashCode(): number;
 apply(context: Object): Object;
 apply(materialRuleContext: MaterialRules_MaterialRuleContext): MaterialRules_BooleanSupplier;
 codec(): CodecHolder;
 noise(): RegistryKey;
 minThreshold(): number;
 maxThreshold(): number;
}
class Static_MaterialRules_NoiseThresholdMaterialCondition {
static method_39081(instance: RecordCodecBuilder_Instance): App;
static CODEC: CodecHolder;
}

//net.minecraft.world.gen.surfacebuilder.MaterialRules$SteepMaterialCondition
class MaterialRules_SteepMaterialCondition extends Enum, MaterialRules_MaterialCondition{
 apply(materialRuleContext: MaterialRules_MaterialRuleContext): MaterialRules_BooleanSupplier;
 apply(context: Object): Object;
 codec(): CodecHolder;
}
class Static_MaterialRules_SteepMaterialCondition {
static values(): MaterialRules_SteepMaterialCondition;
static valueOf(string: string): MaterialRules_SteepMaterialCondition;
static method_39088(): MaterialRules_SteepMaterialCondition;
static INSTANCE: MaterialRules_SteepMaterialCondition;
static CODEC: CodecHolder;
static field_35256: MaterialRules_SteepMaterialCondition;
}

//net.minecraft.world.gen.chunk.placement.RandomSpreadStructurePlacement
class RandomSpreadStructurePlacement extends StructurePlacement{
 getType(): StructurePlacementType;
 getSeparation(): number;
 getSpreadType(): SpreadType;
 getStartChunk(seed: long,chunkX: number,chunkZ: number): ChunkPos;
 getSpacing(): number;
}
class Static_RandomSpreadStructurePlacement {
static validate(structurePlacement: RandomSpreadStructurePlacement): DataResult;
static method_51721(): string;
static method_40170(instance: RecordCodecBuilder_Instance): App;
static CODEC: Codec;
}

//net.minecraft.world.gen.chunk.placement.ConcentricRingsStructurePlacement
class ConcentricRingsStructurePlacement extends StructurePlacement{
 getType(): StructurePlacementType;
 getCount(): number;
 getDistance(): number;
 getSpread(): number;
 getPreferredBiomes(): RegistryEntryList;
}
class Static_ConcentricRingsStructurePlacement {
static method_40167(instance: RecordCodecBuilder_Instance): App;
static buildConcentricRingsCodec(instance: RecordCodecBuilder_Instance): Products_P9;
static CODEC: Codec;
}

//net.minecraft.entity.ai.brain.task.TaskTriggerer$Trigger
class TaskTriggerer_Trigger extends TaskTriggerer{
}

//net.minecraft.entity.ai.brain.task.TaskTriggerer$QueryMemory
class TaskTriggerer_QueryMemory extends TaskTriggerer{
}

//net.minecraft.entity.ai.brain.task.TaskTriggerer$Supply
class TaskTriggerer_Supply extends TaskTriggerer{
}
class Static_TaskTriggerer_Supply {
static method_47230(object: Object): string;
}

//net.minecraft.screen.StonecutterScreenHandler$2


//net.minecraft.screen.slot.ShulkerBoxSlot
class ShulkerBoxSlot extends Slot{
 canInsert(stack: ItemStack): boolean;
}

//net.minecraft.screen.PlayerScreenHandler$2


//net.minecraft.screen.PlayerScreenHandler$1


//net.minecraft.client.gui.screen.ingame.CreativeInventoryScreen$CreativeSlot
class CreativeInventoryScreen_CreativeSlot extends Slot{
 getStack(): ItemStack;
 isEnabled(): boolean;
 setStack(stack: ItemStack): void;
 setStackNoCallbacks(stack: ItemStack): void;
 getBackgroundSprite(): Pair;
 getMaxItemCount(): number;
 getMaxItemCount(stack: ItemStack): number;
 canInsert(stack: ItemStack): boolean;
 hasStack(): boolean;
 markDirty(): void;
 onTakeItem(player: PlayerEntity,stack: ItemStack): void;
 canTakeItems(playerEntity: PlayerEntity): boolean;
 takeStack(amount: number): ItemStack;
}

//net.minecraft.screen.EnchantmentScreenHandler$3


//net.minecraft.screen.EnchantmentScreenHandler$2


//net.minecraft.screen.slot.CraftingResultSlot
class CraftingResultSlot extends Slot{
 canInsert(stack: ItemStack): boolean;
 onTakeItem(player: PlayerEntity,stack: ItemStack): void;
 takeStack(amount: number): ItemStack;
}

//net.minecraft.screen.BeaconScreenHandler$PaymentSlot
class BeaconScreenHandler_PaymentSlot extends Slot{
 getMaxItemCount(): number;
 canInsert(stack: ItemStack): boolean;
}

//net.minecraft.screen.CartographyTableScreenHandler$5


//net.minecraft.screen.CartographyTableScreenHandler$4


//net.minecraft.screen.CartographyTableScreenHandler$3


//net.minecraft.screen.BrewingStandScreenHandler$IngredientSlot
class BrewingStandScreenHandler_IngredientSlot extends Slot{
 getMaxItemCount(): number;
 canInsert(stack: ItemStack): boolean;
}

//net.minecraft.screen.HorseScreenHandler$2


//net.minecraft.screen.HorseScreenHandler$1


//net.minecraft.screen.slot.TradeOutputSlot
class TradeOutputSlot extends Slot{
 canInsert(stack: ItemStack): boolean;
 onTakeItem(player: PlayerEntity,stack: ItemStack): void;
 takeStack(amount: number): ItemStack;
}

//net.minecraft.screen.BrewingStandScreenHandler$PotionSlot
class BrewingStandScreenHandler_PotionSlot extends Slot{
 getMaxItemCount(): number;
 canInsert(stack: ItemStack): boolean;
 onTakeItem(player: PlayerEntity,stack: ItemStack): void;
}
class Static_BrewingStandScreenHandler_PotionSlot {
static matches(stack: ItemStack): boolean;
}

//net.minecraft.screen.ForgingScreenHandler$2


//net.minecraft.screen.slot.FurnaceOutputSlot
class FurnaceOutputSlot extends Slot{
 canInsert(stack: ItemStack): boolean;
 onTakeItem(player: PlayerEntity,stack: ItemStack): void;
 takeStack(amount: number): ItemStack;
}

//net.minecraft.screen.slot.FurnaceFuelSlot
class FurnaceFuelSlot extends Slot{
 getMaxItemCount(stack: ItemStack): number;
 canInsert(stack: ItemStack): boolean;
}
class Static_FurnaceFuelSlot {
static isBucket(stack: ItemStack): boolean;
}

//net.minecraft.screen.LoomScreenHandler$6


//net.minecraft.screen.LoomScreenHandler$5


//net.minecraft.screen.LoomScreenHandler$4


//net.minecraft.screen.GrindstoneScreenHandler$2


//net.minecraft.screen.LoomScreenHandler$3


//net.minecraft.screen.GrindstoneScreenHandler$3


//net.minecraft.screen.GrindstoneScreenHandler$4


//net.minecraft.screen.ForgingScreenHandler$1


//net.minecraft.screen.BrewingStandScreenHandler$FuelSlot
class BrewingStandScreenHandler_FuelSlot extends Slot{
 getMaxItemCount(): number;
 canInsert(stack: ItemStack): boolean;
}
class Static_BrewingStandScreenHandler_FuelSlot {
static matches(stack: ItemStack): boolean;
}

//net.minecraft.client.gui.screen.ingame.CreativeInventoryScreen$LockableSlot
class CreativeInventoryScreen_LockableSlot extends Slot{
 canTakeItems(playerEntity: PlayerEntity): boolean;
}

//net.minecraft.screen.LecternScreenHandler$1


//net.minecraft.network.packet.s2c.play.EntityS2CPacket$RotateAndMoveRelative
class EntityS2CPacket_RotateAndMoveRelative extends EntityS2CPacket{
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
}
class Static_EntityS2CPacket_RotateAndMoveRelative {
static read(buf: PacketByteBuf): EntityS2CPacket_RotateAndMoveRelative;
}

//net.minecraft.network.packet.s2c.play.EntityS2CPacket$Rotate
class EntityS2CPacket_Rotate extends EntityS2CPacket{
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
}
class Static_EntityS2CPacket_Rotate {
static read(buf: PacketByteBuf): EntityS2CPacket_Rotate;
}

//net.minecraft.network.packet.s2c.play.EntityS2CPacket$MoveRelative
class EntityS2CPacket_MoveRelative extends EntityS2CPacket{
 apply(listener: PacketListener): void;
 write(buf: PacketByteBuf): void;
}
class Static_EntityS2CPacket_MoveRelative {
static read(buf: PacketByteBuf): EntityS2CPacket_MoveRelative;
}

//net.minecraft.world.poi.PointOfInterestStorage
class PointOfInterestStorage extends SerializingRegionBasedStorage{
 add(pos: BlockPos,type: RegistryEntry): void;
 remove(pos: BlockPos): void;
 test(pos: BlockPos,predicate: Predicate): boolean;
 count(typePredicate: Predicate,pos: BlockPos,radius: number,occupationStatus: PointOfInterestStorage_OccupationStatus): long;
 getType(pos: BlockPos): Optional;
 tick(shouldKeepTicking: BooleanSupplier): void;
 getPosition(typePredicate: Predicate,posPredicate: Predicate,pos: BlockPos,radius: number,occupationStatus: PointOfInterestStorage_OccupationStatus): Optional;
 getPosition(typePredicate: Predicate,positionPredicate: Predicate,occupationStatus: PointOfInterestStorage_OccupationStatus,pos: BlockPos,radius: number,random: Random): Optional;
 getPosition(typePredicate: Predicate,biPredicate: BiPredicate,pos: BlockPos,radius: number): Optional;
 getDistanceFromNearestOccupied(pos: ChunkSectionPos): number;
 getNearestPosition(typePredicate: Predicate,posPredicate: Predicate,pos: BlockPos,radius: number,occupationStatus: PointOfInterestStorage_OccupationStatus): Optional;
 getNearestPosition(typePredicate: Predicate,pos: BlockPos,radius: number,occupationStatus: PointOfInterestStorage_OccupationStatus): Optional;
 getTypesAndPositions(typePredicate: Predicate,posPredicate: Predicate,pos: BlockPos,radius: number,occupationStatus: PointOfInterestStorage_OccupationStatus): Stream;
 preloadChunks(world: WorldView,pos: BlockPos,radius: number): void;
 getInSquare(typePredicate: Predicate,pos: BlockPos,radius: number,occupationStatus: PointOfInterestStorage_OccupationStatus): Stream;
 getSortedTypesAndPositions(typePredicate: Predicate,posPredicate: Predicate,pos: BlockPos,radius: number,occupationStatus: PointOfInterestStorage_OccupationStatus): Stream;
 getNearestTypeAndPosition(typePredicate: Predicate,pos: BlockPos,radius: number,occupationStatus: PointOfInterestStorage_OccupationStatus): Optional;
 getInCircle(typePredicate: Predicate,pos: BlockPos,radius: number,occupationStatus: PointOfInterestStorage_OccupationStatus): Stream;
 initForPalette(sectionPos: ChunkSectionPos,chunkSection: ChunkSection): void;
 getPositions(typePredicate: Predicate,posPredicate: Predicate,pos: BlockPos,radius: number,occupationStatus: PointOfInterestStorage_OccupationStatus): Stream;
 hasTypeAt(type: RegistryKey,pos: BlockPos): boolean;
 getInChunk(typePredicate: Predicate,chunkPos: ChunkPos,occupationStatus: PointOfInterestStorage_OccupationStatus): Stream;
 getFreeTickets(pos: BlockPos): number;
 releaseTicket(pos: BlockPos): boolean;
}
class Static_PointOfInterestStorage {
static method_20003(blockPos: BlockPos,blockPos2: BlockPos): number;
static method_43978(registryKey: RegistryKey,entry: RegistryEntry): boolean;
static method_19113(blockPos: BlockPos,i: number,poi: PointOfInterest): boolean;
static method_33582(blockPos: BlockPos,poiSet: PointOfInterestSet): void;
static method_19120(predicate: Predicate,occupationStatus: PointOfInterestStorage_OccupationStatus,optional: Optional): Stream;
static method_43982(predicate: Predicate,poi: PointOfInterest): boolean;
static method_43984(poi: PointOfInterest): Pair;
static method_30956(blockPos: BlockPos,pair: Pair): number;
static method_30335(blockPos: BlockPos,i: number,poi: PointOfInterest): boolean;
static method_35154(blockPos: BlockPos,poiSet: PointOfInterestSet): Integer;
static method_19511(chunkSection: ChunkSection,biConsumer: BiConsumer,pos: BlockPos): void;
static method_33580(blockPos: BlockPos,poiSet: PointOfInterestSet): Optional;
static method_20004(predicate: Predicate,poi: PointOfInterest): boolean;
static method_20592(poiSet: PointOfInterestSet): Boolean;
static method_19117(blockPos: BlockPos,predicate: Predicate,poiSet: PointOfInterestSet): Boolean;
static method_33581(blockPos: BlockPos,poiSet: PointOfInterestSet): Boolean;
static method_22442(pair: Pair): boolean;
static method_34711(blockPos: BlockPos,blockPos2: BlockPos): number;
static method_43979(blockPos: BlockPos,poi: PointOfInterest): number;
static method_19128(poi: PointOfInterest): BlockPos;
static method_43981(poi: PointOfInterest): Pair;
static method_33583(blockPos: BlockPos): IllegalStateException;
static shouldScan(chunkSection: ChunkSection): boolean;
static method_19130(biPredicate: BiPredicate,poi: PointOfInterest): boolean;
static method_43980(entry: RegistryEntry): boolean;
static method_19512(biConsumer: BiConsumer,blockPos: BlockPos,poiType: RegistryEntry): void;
static method_22440(pair: Pair): ChunkPos;
static method_22438(worldView: WorldView,chunkPos: ChunkPos): void;
static field_30265: number;
static field_30266: number;
}

//net.minecraft.structure.rule.AlwaysTrueRuleTest
class AlwaysTrueRuleTest extends RuleTest{
 test(state: BlockState,random: Random): boolean;
}
class Static_AlwaysTrueRuleTest {
static method_28959(): AlwaysTrueRuleTest;
static CODEC: Codec;
static INSTANCE: AlwaysTrueRuleTest;
}

//net.minecraft.structure.rule.BlockMatchRuleTest
class BlockMatchRuleTest extends RuleTest{
 test(state: BlockState,random: Random): boolean;
}
class Static_BlockMatchRuleTest {
static method_28969(ruleTest: BlockMatchRuleTest): Block;
static CODEC: Codec;
}

//net.minecraft.structure.rule.TagMatchRuleTest
class TagMatchRuleTest extends RuleTest{
 test(state: BlockState,random: Random): boolean;
}
class Static_TagMatchRuleTest {
static method_28999(ruleTest: TagMatchRuleTest): TagKey;
static CODEC: Codec;
}

//net.minecraft.structure.rule.RandomBlockMatchRuleTest
class RandomBlockMatchRuleTest extends RuleTest{
 test(state: BlockState,random: Random): boolean;
}
class Static_RandomBlockMatchRuleTest {
static method_28990(instance: RecordCodecBuilder_Instance): App;
static method_28991(ruleTest: RandomBlockMatchRuleTest): Float;
static method_28992(ruleTest: RandomBlockMatchRuleTest): Block;
static CODEC: Codec;
}

//net.minecraft.structure.rule.BlockStateMatchRuleTest
class BlockStateMatchRuleTest extends RuleTest{
 test(state: BlockState,random: Random): boolean;
}
class Static_BlockStateMatchRuleTest {
static method_28971(ruleTest: BlockStateMatchRuleTest): BlockState;
static CODEC: Codec;
}

//net.minecraft.structure.rule.RandomBlockStateMatchRuleTest
class RandomBlockStateMatchRuleTest extends RuleTest{
 test(state: BlockState,random: Random): boolean;
}
class Static_RandomBlockStateMatchRuleTest {
static method_28994(ruleTest: RandomBlockStateMatchRuleTest): Float;
static method_28995(ruleTest: RandomBlockStateMatchRuleTest): BlockState;
static method_28993(instance: RecordCodecBuilder_Instance): App;
static CODEC: Codec;
}

//net.minecraft.registry.RegistryBuilder$1


//net.minecraft.registry.RegistryBuilder$StandAloneEntryCreatingLookup
class RegistryBuilder_StandAloneEntryCreatingLookup extends RegistryBuilder_EntryListCreatingLookup{
 getOptional(key: RegistryKey): Optional;
}

//net.minecraft.client.gui.screen.ingame.GenericContainerScreen
class GenericContainerScreen extends HandledScreen, ScreenHandlerProvider{
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
}
class Static_GenericContainerScreen {
static TEXTURE: Identifier;
}

//net.minecraft.client.gui.screen.ingame.HandledScreen
class HandledScreen extends Screen, ScreenHandlerProvider{
 close(): void;
 removed(): void;
 tick(): void;
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
 getScreenHandler(): ScreenHandler;
 keyPressed(keyCode: number,scanCode: number,modifiers: number): boolean;
 mouseReleased(mouseX: number,mouseY: number,button: number): boolean;
 mouseClicked(mouseX: number,mouseY: number,button: number): boolean;
 mouseDragged(mouseX: number,mouseY: number,button: number,deltaX: number,deltaY: number): boolean;
 shouldPause(): boolean;
 endTouchDrag(): void;
}
class Static_HandledScreen {
static drawSlotHighlight(context: DrawContext,x: number,y: number,z: number): void;
static BACKGROUND_TEXTURE: Identifier;
static field_32318: number;
static field_32319: number;
static field_32322: number;
static field_32321: number;
}

//net.minecraft.client.gui.screen.ingame.LecternScreen
class LecternScreen extends BookScreen, ScreenHandlerProvider{
 close(): void;
 removed(): void;
 getScreenHandler(): ScreenHandler;
 getScreenHandler(): LecternScreenHandler;
 shouldPause(): boolean;
}

//net.minecraft.entity.vehicle.SpawnerMinecartEntity$1


//net.minecraft.block.entity.MobSpawnerBlockEntity$1


//net.minecraft.scoreboard.Team
class Team extends AbstractTeam{
 getName(): string;
 getDisplayName(): Text;
 setColor(color: Formatting): void;
 setPrefix(prefix: Text): void;
 getPrefix(): Text;
 getPlayerList(): Collection;
 setCollisionRule(collisionRule: AbstractTeam_CollisionRule): void;
 setSuffix(suffix: Text): void;
 getCollisionRule(): AbstractTeam_CollisionRule;
 getSuffix(): Text;
 setDeathMessageVisibilityRule(deathMessageVisibilityRule: AbstractTeam_VisibilityRule): void;
 getDeathMessageVisibilityRule(): AbstractTeam_VisibilityRule;
 isFriendlyFireAllowed(): boolean;
 setShowFriendlyInvisibles(showFriendlyInvisible: boolean): void;
 setFriendlyFireAllowed(friendlyFire: boolean): void;
 getScoreboard(): Scoreboard;
 setDisplayName(displayName: Text): void;
 decorateName(name: Text): MutableText;
 getColor(): Formatting;
 setNameTagVisibilityRule(nameTagVisibilityRule: AbstractTeam_VisibilityRule): void;
 getFriendlyFlagsBitwise(): number;
 setFriendlyFlagsBitwise(flags: number): void;
 getNameTagVisibilityRule(): AbstractTeam_VisibilityRule;
 getFormattedName(): MutableText;
 shouldShowFriendlyInvisibles(): boolean;
}
class Static_Team {
static decorateName(team: AbstractTeam,name: Text): MutableText;
static field_31884: number;
static field_31885: number;
}

//net.minecraft.client.resource.metadata.AnimationResourceMetadata$1


//net.minecraft.world.gen.stateprovider.WeightedBlockStateProvider
class WeightedBlockStateProvider extends BlockStateProvider{
 get(random: Random,pos: BlockPos): BlockState;
}
class Static_WeightedBlockStateProvider {
static wrap(states: DataPool): DataResult;
static method_28869(weightedBlockStateProvider: WeightedBlockStateProvider): DataPool;
static method_49535(): string;
static CODEC: Codec;
}

//net.minecraft.world.gen.stateprovider.RandomizedIntBlockStateProvider
class RandomizedIntBlockStateProvider extends BlockStateProvider{
 get(random: Random,pos: BlockPos): BlockState;
}
class Static_RandomizedIntBlockStateProvider {
static method_34370(randomizedIntBlockStateProvider: RandomizedIntBlockStateProvider): string;
static method_34366(randomizedIntBlockStateProvider: RandomizedIntBlockStateProvider): IntProvider;
static method_34365(instance: RecordCodecBuilder_Instance): App;
static method_34368(string: string,property: Property): boolean;
static method_34369(property: Property): boolean;
static method_34371(randomizedIntBlockStateProvider: RandomizedIntBlockStateProvider): BlockStateProvider;
static method_34364(property: Property): IntProperty;
static method_34367(string: string): IllegalArgumentException;
static getIntPropertyByName(state: BlockState,propertyName: string): IntProperty;
static CODEC: Codec;
}

//net.minecraft.world.gen.stateprovider.AbstractNoiseBlockStateProvider
class AbstractNoiseBlockStateProvider extends BlockStateProvider{
}
class Static_AbstractNoiseBlockStateProvider {
static method_38440(abstractNoiseBlockStateProvider: AbstractNoiseBlockStateProvider): Float;
static fillCodecFields(instance: RecordCodecBuilder_Instance): Products_P3;
static method_38442(abstractNoiseBlockStateProvider: AbstractNoiseBlockStateProvider): DoublePerlinNoiseSampler_NoiseParameters;
static method_38443(abstractNoiseBlockStateProvider: AbstractNoiseBlockStateProvider): Long;
}

//net.minecraft.world.gen.stateprovider.SimpleBlockStateProvider
class SimpleBlockStateProvider extends BlockStateProvider{
 get(random: Random,pos: BlockPos): BlockState;
}
class Static_SimpleBlockStateProvider {
static method_28867(simpleBlockStateProvider: SimpleBlockStateProvider): BlockState;
static CODEC: Codec;
}

//net.minecraft.world.gen.stateprovider.PillarBlockStateProvider
class PillarBlockStateProvider extends BlockStateProvider{
 get(random: Random,pos: BlockPos): BlockState;
}
class Static_PillarBlockStateProvider {
static method_28866(provider: PillarBlockStateProvider): Block;
static CODEC: Codec;
}

//net.minecraft.world.gen.densityfunction.DensityFunctionTypes$Beardifier
class DensityFunctionTypes_Beardifier extends Enum, DensityFunctionTypes_Beardifying{
 fill(densities: number[],applier: DensityFunction_EachApplier): void;
 maxValue(): number;
 sample(pos: DensityFunction_NoisePos): number;
 minValue(): number;
}
class Static_DensityFunctionTypes_Beardifier {
static values(): DensityFunctionTypes_Beardifier;
static valueOf(string: string): DensityFunctionTypes_Beardifier;
static method_41077(): DensityFunctionTypes_Beardifier;
static INSTANCE: DensityFunctionTypes_Beardifier;
static field_37077: DensityFunctionTypes_Beardifier;
}

//net.minecraft.entity.ai.brain.task.LongJumpTask$Target
class LongJumpTask_Target extends Weighted_Absent{
 getPos(): BlockPos;
}

//net.minecraft.enchantment.EnchantmentLevelEntry
class EnchantmentLevelEntry extends Weighted_Absent{
 enchantment: Enchantment;
 level: number;
}

//net.minecraft.world.biome.SpawnSettings$SpawnEntry
class SpawnSettings_SpawnEntry extends Weighted_Absent{
 toString(): string;
 type: EntityType;
 minGroupSize: number;
 maxGroupSize: number;
}
class Static_SpawnSettings_SpawnEntry {
static method_49499(spawnEntry: SpawnSettings_SpawnEntry): DataResult;
static method_28433(instance: RecordCodecBuilder_Instance): App;
static method_28436(spawnEntry: SpawnSettings_SpawnEntry): EntityType;
static method_49500(): string;
static method_28434(spawnEntry: SpawnSettings_SpawnEntry): Integer;
static method_28435(spawnEntry: SpawnSettings_SpawnEntry): Integer;
static CODEC: Codec;
}

//net.minecraft.client.util.telemetry.PerformanceMetricsEvent
class PerformanceMetricsEvent extends SampleEvent{
 tick(sender: TelemetrySender): void;
 sample(): void;
 send(sender: TelemetrySender): void;
}
class Static_PerformanceMetricsEvent {
static toKilos(bytes: long): long;
static MAX_MEMORY_KB: long;
}

//net.minecraft.world.GameRules$BooleanRule
class GameRules_BooleanRule extends GameRules_Rule{
 get(): boolean;
 set(value: boolean,server: MinecraftServer): void;
 setValue(rule: GameRules_Rule,server: MinecraftServer): void;
 setValue(booleanRule: GameRules_BooleanRule,minecraftServer: MinecraftServer): void;
 serialize(): string;
 getCommandResult(): number;
}
class Static_GameRules_BooleanRule {
static create(initialValue: boolean): GameRules_Type;
static create(initialValue: boolean,changeCallback: BiConsumer): GameRules_Type;
static method_20754(server: MinecraftServer,rule: GameRules_BooleanRule): void;
static method_20756(bl: boolean,type: GameRules_Type): GameRules_BooleanRule;
}

//net.minecraft.world.GameRules$IntRule
class GameRules_IntRule extends GameRules_Rule{
 get(): number;
 validate(input: string): boolean;
 set(value: number,server: MinecraftServer): void;
 setValue(rule: GameRules_Rule,server: MinecraftServer): void;
 setValue(intRule: GameRules_IntRule,minecraftServer: MinecraftServer): void;
 serialize(): string;
 getCommandResult(): number;
}
class Static_GameRules_IntRule {
static create(initialValue: number,changeCallback: BiConsumer): GameRules_Type;
static create(initialValue: number): GameRules_Type;
static parseInt(input: string): number;
static method_20767(server: MinecraftServer,rule: GameRules_IntRule): void;
static method_20765(i: number,type: GameRules_Type): GameRules_IntRule;
}

//net.minecraft.client.particle.NoRenderParticle
class NoRenderParticle extends Particle{
 getType(): ParticleTextureSheet;
 buildGeometry(vertexConsumer: VertexConsumer,camera: Camera,tickDelta: number): void;
}

//net.minecraft.client.particle.BillboardParticle
class BillboardParticle extends Particle{
 scale(scale: number): Particle;
 getSize(tickDelta: number): number;
 buildGeometry(vertexConsumer: VertexConsumer,camera: Camera,tickDelta: number): void;
}

//net.minecraft.client.particle.ElderGuardianAppearanceParticle
class ElderGuardianAppearanceParticle extends Particle{
 getType(): ParticleTextureSheet;
 buildGeometry(vertexConsumer: VertexConsumer,camera: Camera,tickDelta: number): void;
}

//net.minecraft.client.particle.ItemPickupParticle
class ItemPickupParticle extends Particle{
 getType(): ParticleTextureSheet;
 tick(): void;
 buildGeometry(vertexConsumer: VertexConsumer,camera: Camera,tickDelta: number): void;
}
class Static_ItemPickupParticle {
static field_32656: number;
}

//net.minecraft.util.math.random.ChunkRandom
class ChunkRandom extends CheckedRandom{
 split(): Random;
 next(bits: number): number;
 setSeed(seed: long): void;
 getSampleCount(): number;
 nextSplitter(): RandomSplitter;
 setRegionSeed(worldSeed: long,regionX: number,regionZ: number,salt: number): void;
 setPopulationSeed(worldSeed: long,blockX: number,blockZ: number): long;
 setDecoratorSeed(populationSeed: long,index: number,step: number): void;
 setCarverSeed(worldSeed: long,chunkX: number,chunkZ: number): void;
}
class Static_ChunkRandom {
static getSlimeRandom(chunkX: number,chunkZ: number,worldSeed: long,scrambler: long): Random;
}

//net.minecraft.entity.attribute.ClampedEntityAttribute
class ClampedEntityAttribute extends EntityAttribute{
 getMinValue(): number;
 getMaxValue(): number;
 clamp(value: number): number;
}

//net.minecraft.client.particle.SculkChargePopParticle$Factory
class SculkChargePopParticle_Factory extends Record, ParticleFactory{
 equals(object: Object): boolean;
 toString(): string;
 hashCode(): number;
 spriteProvider(): SpriteProvider;
 createParticle(defaultParticleType: DefaultParticleType,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
 createParticle(particleEffect: ParticleEffect,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
}

//net.minecraft.client.particle.SculkChargeParticle$Factory
class SculkChargeParticle_Factory extends Record, ParticleFactory{
 equals(object: Object): boolean;
 toString(): string;
 hashCode(): number;
 spriteProvider(): SpriteProvider;
 createParticle(sculkChargeParticleEffect: SculkChargeParticleEffect,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
 createParticle(particleEffect: ParticleEffect,clientWorld: ClientWorld,d: number,e: number,f: number,g: number,h: number,i: number): Particle;
}

//net.minecraft.client.render.model.ModelRotation
class ModelRotation extends Enum, ModelBakeSettings{
 getRotation(): AffineTransformation;
 getDirectionTransformation(): DirectionTransformation;
}
class Static_ModelRotation {
static get(x: number,y: number): ModelRotation;
static values(): ModelRotation[];
static valueOf(string: string): ModelRotation;
static getIndex(x: number,y: number): number;
static method_36925(): ModelRotation[];
static method_4701(rotation: ModelRotation): Integer;
static method_4700(rotation: ModelRotation): ModelRotation;
static X0_Y0: ModelRotation;
static X0_Y90: ModelRotation;
static X0_Y180: ModelRotation;
static X0_Y270: ModelRotation;
static X90_Y0: ModelRotation;
static X90_Y90: ModelRotation;
static X90_Y180: ModelRotation;
static X90_Y270: ModelRotation;
static X180_Y0: ModelRotation;
static X180_Y90: ModelRotation;
static X180_Y180: ModelRotation;
static X180_Y270: ModelRotation;
static X270_Y0: ModelRotation;
static X270_Y90: ModelRotation;
static X270_Y180: ModelRotation;
static X270_Y270: ModelRotation;
static MAX_ROTATION: number;
static BY_INDEX: Map;
static field_5365: ModelRotation[];
}

//net.minecraft.loot.condition.AllOfLootCondition$Builder
class AllOfLootCondition_Builder extends AlternativeLootCondition_Builder{
 and(builder: LootCondition_Builder): AllOfLootCondition_Builder;
}

//net.minecraft.loot.condition.AnyOfLootCondition$Builder
class AnyOfLootCondition_Builder extends AlternativeLootCondition_Builder{
 or(builder: LootCondition_Builder): AnyOfLootCondition_Builder;
}

//net.minecraft.predicate.StatePredicate$RangedValueCondition
class StatePredicate_RangedValueCondition extends StatePredicate_Condition{
 toJson(): JsonElement;
}

//net.minecraft.predicate.StatePredicate$ExactValueCondition
class StatePredicate_ExactValueCondition extends StatePredicate_Condition{
 toJson(): JsonElement;
}

//net.minecraft.client.render.chunk.ChunkBuilder$BuiltChunk$SortTask
class ChunkBuilder_BuiltChunk_SortTask extends ChunkBuilder_BuiltChunk_Task{
 run(buffers: BlockBufferBuilderStorage): CompletableFuture;
 cancel(): void;
}
class Static_ChunkBuilder_BuiltChunk_SortTask {
static method_22790(void_: Void): ChunkBuilder_Result;
}

//net.minecraft.client.render.chunk.ChunkBuilder$BuiltChunk$RebuildTask
class ChunkBuilder_BuiltChunk_RebuildTask extends ChunkBuilder_BuiltChunk_Task{
 run(buffers: BlockBufferBuilderStorage): CompletableFuture;
 cancel(): void;
}

//net.minecraft.command.argument.RegistryPredicateArgumentType$RegistryKeyBased
class RegistryPredicateArgumentType_RegistryKeyBased extends Record, RegistryPredicateArgumentType_RegistryPredicate{
 equals(object: Object): boolean;
 toString(): string;
 hashCode(): number;
 test(entry: Object): boolean;
 test(registryEntry: RegistryEntry): boolean;
 getKey(): Either;
 key(): RegistryKey;
 asString(): string;
 tryCast(registryRef: RegistryKey): Optional;
}

//net.minecraft.command.argument.RegistryPredicateArgumentType$TagBased
class RegistryPredicateArgumentType_TagBased extends Record, RegistryPredicateArgumentType_RegistryPredicate{
 equals(object: Object): boolean;
 toString(): string;
 hashCode(): number;
 test(entry: Object): boolean;
 test(registryEntry: RegistryEntry): boolean;
 getKey(): Either;
 key(): TagKey;
 asString(): string;
 tryCast(registryRef: RegistryKey): Optional;
}

//net.minecraft.client.render.entity.feature.SlimeOverlayFeatureRenderer
class SlimeOverlayFeatureRenderer extends FeatureRenderer{
 render(matrixStack: MatrixStack,vertexConsumerProvider: VertexConsumerProvider,i: number,livingEntity: LivingEntity,f: number,g: number,h: number,j: number,k: number,l: number): void;
 render(matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,light: number,entity: Entity,limbAngle: number,limbDistance: number,tickDelta: number,animationProgress: number,headYaw: number,headPitch: number): void;
}

//net.minecraft.client.render.entity.feature.SnowmanPumpkinFeatureRenderer
class SnowmanPumpkinFeatureRenderer extends FeatureRenderer{
 render(matrixStack: MatrixStack,vertexConsumerProvider: VertexConsumerProvider,i: number,snowGolemEntity: SnowGolemEntity,f: number,g: number,h: number,j: number,k: number,l: number): void;
 render(matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,light: number,entity: Entity,limbAngle: number,limbDistance: number,tickDelta: number,animationProgress: number,headYaw: number,headPitch: number): void;
}

//net.minecraft.client.render.entity.feature.FoxHeldItemFeatureRenderer
class FoxHeldItemFeatureRenderer extends FeatureRenderer{
 render(matrixStack: MatrixStack,vertexConsumerProvider: VertexConsumerProvider,i: number,foxEntity: FoxEntity,f: number,g: number,h: number,j: number,k: number,l: number): void;
 render(matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,light: number,entity: Entity,limbAngle: number,limbDistance: number,tickDelta: number,animationProgress: number,headYaw: number,headPitch: number): void;
}

//net.minecraft.client.render.entity.feature.LlamaDecorFeatureRenderer
class LlamaDecorFeatureRenderer extends FeatureRenderer{
 render(matrixStack: MatrixStack,vertexConsumerProvider: VertexConsumerProvider,i: number,llamaEntity: LlamaEntity,f: number,g: number,h: number,j: number,k: number,l: number): void;
 render(matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,light: number,entity: Entity,limbAngle: number,limbDistance: number,tickDelta: number,animationProgress: number,headYaw: number,headPitch: number): void;
}
class Static_LlamaDecorFeatureRenderer {
static LLAMA_DECOR: Identifier[];
static TRADER_LLAMA_DECOR: Identifier;
}

//net.minecraft.client.render.entity.feature.ElytraFeatureRenderer
class ElytraFeatureRenderer extends FeatureRenderer{
 render(matrixStack: MatrixStack,vertexConsumerProvider: VertexConsumerProvider,i: number,livingEntity: LivingEntity,f: number,g: number,h: number,j: number,k: number,l: number): void;
 render(matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,light: number,entity: Entity,limbAngle: number,limbDistance: number,tickDelta: number,animationProgress: number,headYaw: number,headPitch: number): void;
}
class Static_ElytraFeatureRenderer {
static SKIN: Identifier;
}

//net.minecraft.client.render.entity.feature.VillagerClothingFeatureRenderer
class VillagerClothingFeatureRenderer extends FeatureRenderer{
 render(matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,light: number,entity: Entity,limbAngle: number,limbDistance: number,tickDelta: number,animationProgress: number,headYaw: number,headPitch: number): void;
 render(matrixStack: MatrixStack,vertexConsumerProvider: VertexConsumerProvider,i: number,livingEntity: LivingEntity,f: number,g: number,h: number,j: number,k: number,l: number): void;
 getHatType(hatLookUp: Object2ObjectMap,keyType: string,registry: DefaultedRegistry,key: Object): VillagerResourceMetadata_HatType;
}
class Static_VillagerClothingFeatureRenderer {
static method_17152(levelToId: Int2ObjectOpenHashMap): void;
static method_43211(resource: Resource): Optional;
static LEVEL_TO_ID: Int2ObjectMap;
}

//net.minecraft.client.render.entity.feature.WardenFeatureRenderer
class WardenFeatureRenderer extends FeatureRenderer{
 render(matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,light: number,entity: Entity,limbAngle: number,limbDistance: number,tickDelta: number,animationProgress: number,headYaw: number,headPitch: number): void;
 render(matrixStack: MatrixStack,vertexConsumerProvider: VertexConsumerProvider,i: number,wardenEntity: WardenEntity,f: number,g: number,h: number,j: number,k: number,l: number): void;
}
class Static_WardenFeatureRenderer {
static method_42747(part: ModelPart): void;
static method_42749(part: ModelPart): void;
static method_42750(part: ModelPart): void;
}

//net.minecraft.client.render.entity.feature.PandaHeldItemFeatureRenderer
class PandaHeldItemFeatureRenderer extends FeatureRenderer{
 render(matrixStack: MatrixStack,vertexConsumerProvider: VertexConsumerProvider,i: number,pandaEntity: PandaEntity,f: number,g: number,h: number,j: number,k: number,l: number): void;
 render(matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,light: number,entity: Entity,limbAngle: number,limbDistance: number,tickDelta: number,animationProgress: number,headYaw: number,headPitch: number): void;
}

//net.minecraft.client.render.entity.feature.DrownedOverlayFeatureRenderer
class DrownedOverlayFeatureRenderer extends FeatureRenderer{
 render(matrixStack: MatrixStack,vertexConsumerProvider: VertexConsumerProvider,i: number,drownedEntity: DrownedEntity,f: number,g: number,h: number,j: number,k: number,l: number): void;
 render(matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,light: number,entity: Entity,limbAngle: number,limbDistance: number,tickDelta: number,animationProgress: number,headYaw: number,headPitch: number): void;
}
class Static_DrownedOverlayFeatureRenderer {
static SKIN: Identifier;
}

//net.minecraft.client.render.entity.feature.SaddleFeatureRenderer
class SaddleFeatureRenderer extends FeatureRenderer{
 render(matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,light: number,entity: Entity,limbAngle: number,limbDistance: number,tickDelta: number,animationProgress: number,headYaw: number,headPitch: number): void;
}

//net.minecraft.client.render.entity.feature.ShoulderParrotFeatureRenderer
class ShoulderParrotFeatureRenderer extends FeatureRenderer{
 render(matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,light: number,entity: Entity,limbAngle: number,limbDistance: number,tickDelta: number,animationProgress: number,headYaw: number,headPitch: number): void;
 render(matrixStack: MatrixStack,vertexConsumerProvider: VertexConsumerProvider,i: number,playerEntity: PlayerEntity,f: number,g: number,h: number,j: number,k: number,l: number): void;
}
class Static_ShoulderParrotFeatureRenderer {
static method_17957(type: EntityType): boolean;
}

//net.minecraft.client.render.entity.feature.HorseArmorFeatureRenderer
class HorseArmorFeatureRenderer extends FeatureRenderer{
 render(matrixStack: MatrixStack,vertexConsumerProvider: VertexConsumerProvider,i: number,horseEntity: HorseEntity,f: number,g: number,h: number,j: number,k: number,l: number): void;
 render(matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,light: number,entity: Entity,limbAngle: number,limbDistance: number,tickDelta: number,animationProgress: number,headYaw: number,headPitch: number): void;
}

//net.minecraft.client.render.entity.feature.WolfCollarFeatureRenderer
class WolfCollarFeatureRenderer extends FeatureRenderer{
 render(matrixStack: MatrixStack,vertexConsumerProvider: VertexConsumerProvider,i: number,wolfEntity: WolfEntity,f: number,g: number,h: number,j: number,k: number,l: number): void;
 render(matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,light: number,entity: Entity,limbAngle: number,limbDistance: number,tickDelta: number,animationProgress: number,headYaw: number,headPitch: number): void;
}
class Static_WolfCollarFeatureRenderer {
static SKIN: Identifier;
}

//net.minecraft.client.render.entity.feature.EnergySwirlOverlayFeatureRenderer
class EnergySwirlOverlayFeatureRenderer extends FeatureRenderer{
 render(matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,light: number,entity: Entity,limbAngle: number,limbDistance: number,tickDelta: number,animationProgress: number,headYaw: number,headPitch: number): void;
}

//net.minecraft.client.render.entity.feature.HeldItemFeatureRenderer
class HeldItemFeatureRenderer extends FeatureRenderer{
 render(matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,light: number,entity: Entity,limbAngle: number,limbDistance: number,tickDelta: number,animationProgress: number,headYaw: number,headPitch: number): void;
 render(matrixStack: MatrixStack,vertexConsumerProvider: VertexConsumerProvider,i: number,livingEntity: LivingEntity,f: number,g: number,h: number,j: number,k: number,l: number): void;
}

//net.minecraft.client.render.entity.feature.SheepWoolFeatureRenderer
class SheepWoolFeatureRenderer extends FeatureRenderer{
 render(matrixStack: MatrixStack,vertexConsumerProvider: VertexConsumerProvider,i: number,sheepEntity: SheepEntity,f: number,g: number,h: number,j: number,k: number,l: number): void;
 render(matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,light: number,entity: Entity,limbAngle: number,limbDistance: number,tickDelta: number,animationProgress: number,headYaw: number,headPitch: number): void;
}
class Static_SheepWoolFeatureRenderer {
static SKIN: Identifier;
}

//net.minecraft.client.render.entity.feature.IronGolemFlowerFeatureRenderer
class IronGolemFlowerFeatureRenderer extends FeatureRenderer{
 render(matrixStack: MatrixStack,vertexConsumerProvider: VertexConsumerProvider,i: number,ironGolemEntity: IronGolemEntity,f: number,g: number,h: number,j: number,k: number,l: number): void;
 render(matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,light: number,entity: Entity,limbAngle: number,limbDistance: number,tickDelta: number,animationProgress: number,headYaw: number,headPitch: number): void;
}

//net.minecraft.client.render.entity.feature.EyesFeatureRenderer
class EyesFeatureRenderer extends FeatureRenderer{
 render(matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,light: number,entity: Entity,limbAngle: number,limbDistance: number,tickDelta: number,animationProgress: number,headYaw: number,headPitch: number): void;
 getEyesTexture(): RenderLayer;
}

//net.minecraft.client.render.entity.feature.CapeFeatureRenderer
class CapeFeatureRenderer extends FeatureRenderer{
 render(matrixStack: MatrixStack,vertexConsumerProvider: VertexConsumerProvider,i: number,abstractClientPlayerEntity: AbstractClientPlayerEntity,f: number,g: number,h: number,j: number,k: number,l: number): void;
 render(matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,light: number,entity: Entity,limbAngle: number,limbDistance: number,tickDelta: number,animationProgress: number,headYaw: number,headPitch: number): void;
}

//net.minecraft.client.render.entity.feature.DolphinHeldItemFeatureRenderer
class DolphinHeldItemFeatureRenderer extends FeatureRenderer{
 render(matrixStack: MatrixStack,vertexConsumerProvider: VertexConsumerProvider,i: number,dolphinEntity: DolphinEntity,f: number,g: number,h: number,j: number,k: number,l: number): void;
 render(matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,light: number,entity: Entity,limbAngle: number,limbDistance: number,tickDelta: number,animationProgress: number,headYaw: number,headPitch: number): void;
}

//net.minecraft.client.render.entity.feature.HorseMarkingFeatureRenderer
class HorseMarkingFeatureRenderer extends FeatureRenderer{
 render(matrixStack: MatrixStack,vertexConsumerProvider: VertexConsumerProvider,i: number,horseEntity: HorseEntity,f: number,g: number,h: number,j: number,k: number,l: number): void;
 render(matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,light: number,entity: Entity,limbAngle: number,limbDistance: number,tickDelta: number,animationProgress: number,headYaw: number,headPitch: number): void;
}
class Static_HorseMarkingFeatureRenderer {
static method_27153(textures: EnumMap): void;
static TEXTURES: Map;
}

//net.minecraft.client.render.entity.feature.Deadmau5FeatureRenderer
class Deadmau5FeatureRenderer extends FeatureRenderer{
 render(matrixStack: MatrixStack,vertexConsumerProvider: VertexConsumerProvider,i: number,abstractClientPlayerEntity: AbstractClientPlayerEntity,f: number,g: number,h: number,j: number,k: number,l: number): void;
 render(matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,light: number,entity: Entity,limbAngle: number,limbDistance: number,tickDelta: number,animationProgress: number,headYaw: number,headPitch: number): void;
}

//net.minecraft.client.render.entity.feature.ArmorFeatureRenderer
class ArmorFeatureRenderer extends FeatureRenderer{
 render(matrixStack: MatrixStack,vertexConsumerProvider: VertexConsumerProvider,i: number,livingEntity: LivingEntity,f: number,g: number,h: number,j: number,k: number,l: number): void;
 render(matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,light: number,entity: Entity,limbAngle: number,limbDistance: number,tickDelta: number,animationProgress: number,headYaw: number,headPitch: number): void;
}
class Static_ArmorFeatureRenderer {
static ARMOR_TEXTURE_CACHE: Map;
}

//net.minecraft.client.render.entity.feature.StrayOverlayFeatureRenderer
class StrayOverlayFeatureRenderer extends FeatureRenderer{
 render(matrixStack: MatrixStack,vertexConsumerProvider: VertexConsumerProvider,i: number,mobEntity: MobEntity,f: number,g: number,h: number,j: number,k: number,l: number): void;
 render(matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,light: number,entity: Entity,limbAngle: number,limbDistance: number,tickDelta: number,animationProgress: number,headYaw: number,headPitch: number): void;
}
class Static_StrayOverlayFeatureRenderer {
static SKIN: Identifier;
}

//net.minecraft.client.render.entity.feature.EndermanBlockFeatureRenderer
class EndermanBlockFeatureRenderer extends FeatureRenderer{
 render(matrixStack: MatrixStack,vertexConsumerProvider: VertexConsumerProvider,i: number,endermanEntity: EndermanEntity,f: number,g: number,h: number,j: number,k: number,l: number): void;
 render(matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,light: number,entity: Entity,limbAngle: number,limbDistance: number,tickDelta: number,animationProgress: number,headYaw: number,headPitch: number): void;
}

//net.minecraft.client.render.entity.feature.IronGolemCrackFeatureRenderer
class IronGolemCrackFeatureRenderer extends FeatureRenderer{
 render(matrixStack: MatrixStack,vertexConsumerProvider: VertexConsumerProvider,i: number,ironGolemEntity: IronGolemEntity,f: number,g: number,h: number,j: number,k: number,l: number): void;
 render(matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,light: number,entity: Entity,limbAngle: number,limbDistance: number,tickDelta: number,animationProgress: number,headYaw: number,headPitch: number): void;
}
class Static_IronGolemCrackFeatureRenderer {
static DAMAGE_TO_TEXTURE: Map;
}

//net.minecraft.client.render.entity.feature.MooshroomMushroomFeatureRenderer
class MooshroomMushroomFeatureRenderer extends FeatureRenderer{
 render(matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,light: number,entity: Entity,limbAngle: number,limbDistance: number,tickDelta: number,animationProgress: number,headYaw: number,headPitch: number): void;
 render(matrixStack: MatrixStack,vertexConsumerProvider: VertexConsumerProvider,i: number,mooshroomEntity: MooshroomEntity,f: number,g: number,h: number,j: number,k: number,l: number): void;
}

//net.minecraft.client.render.entity.feature.VillagerHeldItemFeatureRenderer
class VillagerHeldItemFeatureRenderer extends FeatureRenderer{
 render(matrixStack: MatrixStack,vertexConsumerProvider: VertexConsumerProvider,i: number,livingEntity: LivingEntity,f: number,g: number,h: number,j: number,k: number,l: number): void;
 render(matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,light: number,entity: Entity,limbAngle: number,limbDistance: number,tickDelta: number,animationProgress: number,headYaw: number,headPitch: number): void;
}

//net.minecraft.client.render.entity.feature.TridentRiptideFeatureRenderer
class TridentRiptideFeatureRenderer extends FeatureRenderer{
 render(matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,light: number,entity: Entity,limbAngle: number,limbDistance: number,tickDelta: number,animationProgress: number,headYaw: number,headPitch: number): void;
 render(matrixStack: MatrixStack,vertexConsumerProvider: VertexConsumerProvider,i: number,livingEntity: LivingEntity,f: number,g: number,h: number,j: number,k: number,l: number): void;
}
class Static_TridentRiptideFeatureRenderer {
static getTexturedModelData(): TexturedModelData;
static TEXTURE: Identifier;
static BOX: string;
}

//net.minecraft.client.render.entity.feature.HeadFeatureRenderer
class HeadFeatureRenderer extends FeatureRenderer{
 render(matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,light: number,entity: Entity,limbAngle: number,limbDistance: number,tickDelta: number,animationProgress: number,headYaw: number,headPitch: number): void;
 render(matrixStack: MatrixStack,vertexConsumerProvider: VertexConsumerProvider,i: number,livingEntity: LivingEntity,f: number,g: number,h: number,j: number,k: number,l: number): void;
}
class Static_HeadFeatureRenderer {
static translate(matrices: MatrixStack,villager: boolean): void;
}

//net.minecraft.client.render.entity.feature.CatCollarFeatureRenderer
class CatCollarFeatureRenderer extends FeatureRenderer{
 render(matrixStack: MatrixStack,vertexConsumerProvider: VertexConsumerProvider,i: number,catEntity: CatEntity,f: number,g: number,h: number,j: number,k: number,l: number): void;
 render(matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,light: number,entity: Entity,limbAngle: number,limbDistance: number,tickDelta: number,animationProgress: number,headYaw: number,headPitch: number): void;
}
class Static_CatCollarFeatureRenderer {
static SKIN: Identifier;
}

//net.minecraft.client.render.entity.feature.TropicalFishColorFeatureRenderer
class TropicalFishColorFeatureRenderer extends FeatureRenderer{
 render(matrixStack: MatrixStack,vertexConsumerProvider: VertexConsumerProvider,i: number,tropicalFishEntity: TropicalFishEntity,f: number,g: number,h: number,j: number,k: number,l: number): void;
 render(matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,light: number,entity: Entity,limbAngle: number,limbDistance: number,tickDelta: number,animationProgress: number,headYaw: number,headPitch: number): void;
}
class Static_TropicalFishColorFeatureRenderer {
static KOB_TEXTURE: Identifier;
static SUNSTREAK_TEXTURE: Identifier;
static SNOOPER_TEXTURE: Identifier;
static DASHER_TEXTURE: Identifier;
static BRINELY_TEXTURE: Identifier;
static SPOTTY_TEXTURE: Identifier;
static FLOPPER_TEXTURE: Identifier;
static STRIPEY_TEXTURE: Identifier;
static GLITTER_TEXTURE: Identifier;
static BLOCKFISH_TEXTURE: Identifier;
static BETTY_TEXTURE: Identifier;
static CLAYFISH_TEXTURE: Identifier;
}

//net.minecraft.client.render.entity.feature.ShulkerHeadFeatureRenderer
class ShulkerHeadFeatureRenderer extends FeatureRenderer{
 render(matrixStack: MatrixStack,vertexConsumerProvider: VertexConsumerProvider,i: number,shulkerEntity: ShulkerEntity,f: number,g: number,h: number,j: number,k: number,l: number): void;
 render(matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,light: number,entity: Entity,limbAngle: number,limbDistance: number,tickDelta: number,animationProgress: number,headYaw: number,headPitch: number): void;
}

//net.minecraft.client.render.entity.feature.StuckObjectsFeatureRenderer
class StuckObjectsFeatureRenderer extends FeatureRenderer{
 render(matrixStack: MatrixStack,vertexConsumerProvider: VertexConsumerProvider,i: number,livingEntity: LivingEntity,f: number,g: number,h: number,j: number,k: number,l: number): void;
 render(matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,light: number,entity: Entity,limbAngle: number,limbDistance: number,tickDelta: number,animationProgress: number,headYaw: number,headPitch: number): void;
}

//net.minecraft.client.realms.Request$Delete
class Request_Delete extends Request{
 doConnect(): Request_Delete;
 doConnect(): Request;
}

//net.minecraft.client.realms.Request$Get
class Request_Get extends Request{
 doConnect(): Request_Get;
 doConnect(): Request;
}

//net.minecraft.client.realms.Request$Post
class Request_Post extends Request{
 doConnect(): Request_Post;
 doConnect(): Request;
}

//net.minecraft.client.realms.Request$Put
class Request_Put extends Request{
 doConnect(): Request_Put;
 doConnect(): Request;
}

//net.minecraft.world.gen.densityfunction.DensityFunctionTypes$UnaryOperation
class DensityFunctionTypes_UnaryOperation extends Record, DensityFunctionTypes_Unary{
 type(): DensityFunctionTypes_UnaryOperation_Type;
 equals(object: Object): boolean;
 toString(): string;
 hashCode(): number;
 apply(density: number): number;
 apply(densityFunctionVisitor: DensityFunction_DensityFunctionVisitor): DensityFunctionTypes_UnaryOperation;
 apply(visitor: DensityFunction_DensityFunctionVisitor): DensityFunction;
 input(): DensityFunction;
 maxValue(): number;
 minValue(): number;
 getCodecHolder(): CodecHolder;
}
class Static_DensityFunctionTypes_UnaryOperation {
static apply(type: DensityFunctionTypes_UnaryOperation_Type,density: number): number;
static create(type: DensityFunctionTypes_UnaryOperation_Type,input: DensityFunction): DensityFunctionTypes_UnaryOperation;
}

//net.minecraft.world.gen.densityfunction.DensityFunctionTypes$Clamp
class DensityFunctionTypes_Clamp extends Record, DensityFunctionTypes_Unary{
 equals(object: Object): boolean;
 toString(): string;
 hashCode(): number;
 apply(visitor: DensityFunction_DensityFunctionVisitor): DensityFunction;
 apply(density: number): number;
 input(): DensityFunction;
 maxValue(): number;
 minValue(): number;
 getCodecHolder(): CodecHolder;
}
class Static_DensityFunctionTypes_Clamp {
static method_41078(instance: RecordCodecBuilder_Instance): App;
static CLAMP_CODEC: MapCodec;
static CODEC_HOLDER: CodecHolder;
}

//net.minecraft.world.gen.heightprovider.BiasedToBottomHeightProvider
class BiasedToBottomHeightProvider extends HeightProvider{
 get(random: Random,context: HeightContext): number;
 toString(): string;
 getType(): HeightProviderType;
}
class Static_BiasedToBottomHeightProvider {
static create(minOffset: YOffset,maxOffset: YOffset,inner: number): BiasedToBottomHeightProvider;
static method_35376(instance: RecordCodecBuilder_Instance): App;
static method_35380(provider: BiasedToBottomHeightProvider): YOffset;
static method_35379(provider: BiasedToBottomHeightProvider): YOffset;
static method_35378(provider: BiasedToBottomHeightProvider): Integer;
static BIASED_TO_BOTTOM_CODEC: Codec;
static LOGGER: Logger;
}

//net.minecraft.world.gen.heightprovider.UniformHeightProvider
class UniformHeightProvider extends HeightProvider{
 get(random: Random,context: HeightContext): number;
 toString(): string;
 getType(): HeightProviderType;
}
class Static_UniformHeightProvider {
static create(minOffset: YOffset,maxOffset: YOffset): UniformHeightProvider;
static method_35398(provider: UniformHeightProvider): YOffset;
static method_35395(instance: RecordCodecBuilder_Instance): App;
static method_35397(provider: UniformHeightProvider): YOffset;
static UNIFORM_CODEC: Codec;
static LOGGER: Logger;
}

//net.minecraft.world.gen.heightprovider.TrapezoidHeightProvider
class TrapezoidHeightProvider extends HeightProvider{
 get(random: Random,context: HeightContext): number;
 toString(): string;
 getType(): HeightProviderType;
}
class Static_TrapezoidHeightProvider {
static create(minOffset: YOffset,maxOffset: YOffset): TrapezoidHeightProvider;
static create(minOffset: YOffset,maxOffset: YOffset,plateau: number): TrapezoidHeightProvider;
static method_36311(provider: TrapezoidHeightProvider): YOffset;
static method_36306(instance: RecordCodecBuilder_Instance): App;
static method_36310(provider: TrapezoidHeightProvider): YOffset;
static method_36309(trapezoidHeightProvider: TrapezoidHeightProvider): Integer;
static CODEC: Codec;
static LOGGER: Logger;
}

//net.minecraft.world.gen.heightprovider.ConstantHeightProvider
class ConstantHeightProvider extends HeightProvider{
 get(random: Random,context: HeightContext): number;
 toString(): string;
 getType(): HeightProviderType;
 getOffset(): YOffset;
}
class Static_ConstantHeightProvider {
static create(offset: YOffset): ConstantHeightProvider;
static method_35384(provider: ConstantHeightProvider): Either;
static method_35381(either: Either): ConstantHeightProvider;
static method_35387(provider: ConstantHeightProvider): YOffset;
static method_35386(provider: ConstantHeightProvider): ConstantHeightProvider;
static method_35382(instance: RecordCodecBuilder_Instance): App;
static ZERO: ConstantHeightProvider;
static CONSTANT_CODEC: Codec;
}

//net.minecraft.world.gen.heightprovider.VeryBiasedToBottomHeightProvider
class VeryBiasedToBottomHeightProvider extends HeightProvider{
 get(random: Random,context: HeightContext): number;
 toString(): string;
 getType(): HeightProviderType;
}
class Static_VeryBiasedToBottomHeightProvider {
static create(minOffset: YOffset,maxOffset: YOffset,inner: number): VeryBiasedToBottomHeightProvider;
static method_36312(instance: RecordCodecBuilder_Instance): App;
static method_36316(provider: VeryBiasedToBottomHeightProvider): YOffset;
static method_36314(provider: VeryBiasedToBottomHeightProvider): Integer;
static method_36315(provider: VeryBiasedToBottomHeightProvider): YOffset;
static CODEC: Codec;
static LOGGER: Logger;
}

//net.minecraft.world.gen.heightprovider.WeightedListHeightProvider
class WeightedListHeightProvider extends HeightProvider{
 get(random: Random,context: HeightContext): number;
 getType(): HeightProviderType;
}
class Static_WeightedListHeightProvider {
static method_39613(weightedListHeightProvider: WeightedListHeightProvider): DataPool;
static method_39612(instance: RecordCodecBuilder_Instance): App;
static WEIGHTED_LIST_CODEC: Codec;
}

//net.minecraft.stat.Stat
class Stat extends ScoreboardCriterion{
 equals(o: Object): boolean;
 toString(): string;
 hashCode(): number;
 getValue(): Object;
 format(value: number): string;
 getType(): StatType;
}
class Static_Stat {
static getName(id: Identifier): string;
static getName(type: StatType,value: Object): string;
}

//net.minecraft.structure.JungleTempleGenerator$CobblestoneRandomizer
class JungleTempleGenerator_CobblestoneRandomizer extends StructurePiece_BlockRandomizer{
 setBlock(random: Random,x: number,y: number,z: number,placeBlock: boolean): void;
}

//net.minecraft.structure.StrongholdGenerator$StoneBrickRandomizer
class StrongholdGenerator_StoneBrickRandomizer extends StructurePiece_BlockRandomizer{
 setBlock(random: Random,x: number,y: number,z: number,placeBlock: boolean): void;
}

//net.minecraft.util.shape.CroppedVoxelSet
class CroppedVoxelSet extends VoxelSet{
 contains(x: number,y: number,z: number): boolean;
 set(x: number,y: number,z: number): void;
 getMin(axis: Direction_Axis): number;
 getMax(axis: Direction_Axis): number;
}

//net.minecraft.util.shape.BitSetVoxelSet
class BitSetVoxelSet extends VoxelSet{
 isEmpty(): boolean;
 contains(x: number,y: number,z: number): boolean;
 set(x: number,y: number,z: number): void;
 getMin(axis: Direction_Axis): number;
 getMax(axis: Direction_Axis): number;
}
class Static_BitSetVoxelSet {
static combine(first: VoxelSet,second: VoxelSet,xPoints: PairList,yPoints: PairList,zPoints: PairList,fun: BooleanBiFunction): BitSetVoxelSet;
static create(sizeX: number,sizeY: number,sizeZ: number,minX: number,minY: number,minZ: number,maxX: number,maxY: number,maxZ: number): BitSetVoxelSet;
static forEachBox(voxelSet: VoxelSet,callback: VoxelSet_PositionBiConsumer,coalesce: boolean): void;
static method_1041(pairList: PairList,pairList2: PairList,booleanBiFunction: BooleanBiFunction,voxelSet: VoxelSet,voxelSet2: VoxelSet,bitSetVoxelSet: BitSetVoxelSet,is: number[],x1: number,x2: number,xIndex: number): boolean;
static method_1042(pairList: PairList,booleanBiFunction: BooleanBiFunction,voxelSet: VoxelSet,i: number,voxelSet2: VoxelSet,j: number,bitSetVoxelSet: BitSetVoxelSet,k: number,is: number[],bls: boolean[],y1: number,y2: number,yIndex: number): boolean;
static method_1038(booleanBiFunction: BooleanBiFunction,voxelSet: VoxelSet,i: number,j: number,voxelSet2: VoxelSet,k: number,l: number,bitSetVoxelSet: BitSetVoxelSet,m: number,n: number,is: number[],bls: boolean[],z1: number,z2: number,zIndex: number): boolean;
}

//net.minecraft.client.gui.screen.StatsScreen
class StatsScreen extends Screen, StatsListener{
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
 onStatsReady(): void;
 createLists(): void;
 createButtons(): void;
 selectStatList(list: AlwaysSelectedEntryListWidget): void;
 shouldPause(): boolean;
 getSelectedStatList(): AlwaysSelectedEntryListWidget;
}
class Static_StatsScreen {
static method_19402(statsScreen: StatsScreen): TextRenderer;
static method_19391(statsScreen: StatsScreen): TextRenderer;
static method_19396(statsScreen: StatsScreen): TextRenderer;
static method_19395(statsScreen: StatsScreen): TextRenderer;
static method_36880(statsScreen: StatsScreen): TextRenderer;
static method_19392(statsScreen: StatsScreen): TextRenderer;
static method_19398(statsScreen: StatsScreen): TextRenderer;
static method_19400(statsScreen: StatsScreen): TextRenderer;
static method_19401(statsScreen: StatsScreen): TextRenderer;
static method_19394(statsScreen: StatsScreen): TextRenderer;
static method_36881(statsScreen: StatsScreen): TextRenderer;
static method_36882(statsScreen: StatsScreen): TextRenderer;
static method_19393(statsScreen: StatsScreen): TextRenderer;
static getStatTranslationKey(stat: Stat): string;
static DOWNLOADING_STATS_TEXT: Text;
static STATS_ICONS_TEXTURE: Identifier;
static field_32281: number;
static field_32282: number;
static field_32283: number;
static field_32284: number;
static field_32285: number;
static field_32274: number;
static field_32275: number;
static field_32276: number;
static field_32277: number;
static field_32278: number;
static field_32279: number;
static field_32280: number;
}

//net.minecraft.server.Whitelist
class Whitelist extends ServerConfigList{
 getNames(): String[];
 isAllowed(profile: GameProfile): boolean;
}
class Static_Whitelist {
static method_32822(i: number): String[];
}

//net.minecraft.server.OperatorList
class OperatorList extends ServerConfigList{
 canBypassPlayerLimit(profile: GameProfile): boolean;
 getNames(): String[];
}
class Static_OperatorList {
static method_32820(i: number): String[];
}

//net.minecraft.server.BannedPlayerList
class BannedPlayerList extends ServerConfigList{
 contains(profile: GameProfile): boolean;
 getNames(): String[];
}
class Static_BannedPlayerList {
static method_32821(i: number): String[];
}

//net.minecraft.server.BannedIpList
class BannedIpList extends ServerConfigList{
 get(address: SocketAddress): BannedIpEntry;
 isBanned(ip: string): boolean;
 isBanned(ip: SocketAddress): boolean;
}

//net.minecraft.client.realms.gui.screen.RealmsPendingInvitesScreen$PendingInvitationSelectionListEntry$RejectButton
class RealmsPendingInvitesScreen_PendingInvitationSelectionListEntry_RejectButton extends RealmsAcceptRejectButton{
 handleClick(index: number): void;
}

//net.minecraft.client.realms.gui.screen.RealmsPendingInvitesScreen$PendingInvitationSelectionListEntry$AcceptButton
class RealmsPendingInvitesScreen_PendingInvitationSelectionListEntry_AcceptButton extends RealmsAcceptRejectButton{
 handleClick(index: number): void;
}

//net.minecraft.data.server.recipe.SmithingTransformRecipeJsonBuilder$SmithingTransformRecipeJsonProvider
class SmithingTransformRecipeJsonBuilder_SmithingTransformRecipeJsonProvider extends Record, RecipeJsonProvider{
 base(): Ingredient;
 type(): RecipeSerializer;
 equals(object: Object): boolean;
 toString(): string;
 hashCode(): number;
 result(): Item;
 id(): Identifier;
 serialize(json: JsonObject): void;
 getRecipeId(): Identifier;
 advancementId(): Identifier;
 getAdvancementId(): Identifier;
 toAdvancementJson(): JsonObject;
 template(): Ingredient;
 getSerializer(): RecipeSerializer;
 advancement(): Advancement_Builder;
 addition(): Ingredient;
}

//net.minecraft.data.server.recipe.SmithingTrimRecipeJsonBuilder$SmithingTrimRecipeJsonProvider
class SmithingTrimRecipeJsonBuilder_SmithingTrimRecipeJsonProvider extends Record, RecipeJsonProvider{
 base(): Ingredient;
 type(): RecipeSerializer;
 equals(object: Object): boolean;
 toString(): string;
 hashCode(): number;
 id(): Identifier;
 serialize(json: JsonObject): void;
 getRecipeId(): Identifier;
 advancementId(): Identifier;
 getAdvancementId(): Identifier;
 toAdvancementJson(): JsonObject;
 template(): Ingredient;
 getSerializer(): RecipeSerializer;
 advancement(): Advancement_Builder;
 addition(): Ingredient;
}

//net.minecraft.client.MinecraftClient
class MinecraftClient extends ReentrantThreadExecutor, WindowEventHandler{
 run(): void;
 stop(): void;
 close(): void;
 tick(): void;
 disconnect(screen: Screen): void;
 disconnect(): void;
 reloadResources(): CompletableFuture;
 getSpriteAtlas(id: Identifier): Function;
 getSkinProvider(): PlayerSkinProvider;
 getServicesSignatureVerifier(): SignatureVerifier;
 handleProfilerKeyPress(digit: number): void;
 getSessionProperties(): PropertyMap;
 onResourceReloadFailure(exception: Throwable,resourceName: Text): void;
 getSessionService(): MinecraftSessionService;
 getVersionType(): string;
 getMetricsData(): MetricsData;
 isRunning(): boolean;
 is64Bit(): boolean;
 getDataFixer(): DataFixer;
 forcesUnicodeFont(): boolean;
 isTelemetryEnabledByApi(): boolean;
 isOptionalTelemetryEnabledByApi(): boolean;
 getVideoWarningManager(): VideoWarningManager;
 getResourcePackManager(): ResourcePackManager;
 isConnectedToLocalServer(): boolean;
 reloadResourcesConcurrently(): CompletableFuture;
 isIntegratedServerRunning(): boolean;
 isConnectedToRealms(): boolean;
 getMusicType(): MusicSound;
 joinWorld(world: ClientWorld): void;
 getProfileKeys(): ProfileKeys;
 getQuickPlayLogger(): QuickPlayLogger;
 getMessageHandler(): MessageHandler;
 getBufferBuilders(): BufferBuilderStorage;
 getMusicTracker(): MusicTracker;
 getTutorialManager(): TutorialManager;
 getBlockRenderManager(): BlockRenderManager;
 onCursorEnterChanged(): void;
 onWindowFocusChanged(focused: boolean): void;
 onResolutionChanged(): void;
 getNetworkHandler(): ClientPlayNetworkHandler;
 getSearchProvider(key: SearchManager_Key): SearchProvider;
 getLanguageManager(): LanguageManager;
 setCrashReportSupplierAndAddDetails(crashReport: CrashReport): void;
 startIntegratedServer(levelName: string,session: LevelStorage_Session,dataPackManager: ResourcePackManager,saveLoader: SaveLoader,newWorld: boolean): void;
 getTelemetryManager(): TelemetryManager;
 toggleDebugProfiler(chatMessageSender: Consumer): boolean;
 addDetailsToCrashReport(report: CrashReport): CrashReport;
 getNetworkProxy(): Proxy;
 getSession(): Session;
 shouldFilterText(): boolean;
 getCameraEntity(): Entity;
 getWindow(): Window;
 isInSingleplayer(): boolean;
 isDemo(): boolean;
 getTextureManager(): TextureManager;
 getFramebuffer(): Framebuffer;
 openPauseMenu(pause: boolean): void;
 getOverlay(): Overlay;
 isWindowFocused(): boolean;
 getItemRenderer(): ItemRenderer;
 getLastFrameDuration(): number;
 hasReducedDebugInfo(): boolean;
 getStatusEffectSpriteManager(): StatusEffectSpriteManager;
 getEntityRenderDispatcher(): EntityRenderDispatcher;
 getServerResourcePackProvider(): ServerResourcePackProvider;
 reloadSearchProvider(key: SearchManager_Key,values: List): void;
 getSocialInteractionsManager(): SocialInteractionsManager;
 shouldBlockMessages(sender: UUID): boolean;
 getAbuseReportContext(): AbuseReportContext;
 getToastManager(): ToastManager;
 getTickDelta(): number;
 getNarratorManager(): NarratorManager;
 scheduleStop(): void;
 shouldRenderAsync(): boolean;
 getGameVersion(): string;
 getProfiler(): Profiler;
 setScreenAndRender(screen: Screen): void;
 getLevelStorage(): LevelStorage;
 getSoundManager(): SoundManager;
 getServer(): IntegratedServer;
 setCameraEntity(entity: Entity): void;
 setScreen(screen: Screen): void;
 isOptionalTelemetryEnabled(): boolean;
 setNavigationType(navigationType: GuiNavigationType): void;
 getNavigationType(): GuiNavigationType;
 setMipmapLevels(mipmapLevels: number): void;
 getGpuUtilizationPercentage(): number;
 createIntegratedServerLoader(): IntegratedServerLoader;
 loadBlockList(): void;
 setConnectedToRealms(connectedToRealms: boolean): void;
 getBakedModelManager(): BakedModelManager;
 cleanUpAfterCrash(): void;
 hasOutline(entity: Entity): boolean;
 updateWindowTitle(): void;
 getChatRestriction(): MinecraftClient_ChatRestriction;
 isRealmsEnabled(): boolean;
 takePanorama(directory: File,width: number,height: number): Text;
 isPaused(): boolean;
 getResourcePackDir(): Path;
 getPaintingManager(): PaintingManager;
 getCurrentFps(): number;
 getRenderTime(): long;
 getBlockColors(): BlockColors;
 getResourceManager(): ResourceManager;
 getEntityModelLoader(): EntityModelLoader;
 getBlockEntityRenderDispatcher(): BlockEntityRenderDispatcher;
 getCurrentServerEntry(): ServerInfo;
 setCrashReportSupplier(crashReport: CrashReport): void;
 ensureAbuseReportContext(environment: ReporterEnvironment): void;
 isMultiplayerEnabled(): boolean;
 getDefaultResourcePack(): DefaultResourcePack;
 getCreativeHotbarStorage(): HotbarStorage;
 isMultiplayerBanned(): boolean;
 getMultiplayerBanDetails(): BanDetails;
 getWorldGenerationProgressTracker(): WorldGenerationProgressTracker;
 getSplashTextLoader(): SplashTextResourceSupplier;
 getRealms32BitWarningChecker(): Realms32BitWarningChecker;
 getRealmsPeriodicCheckers(): RealmsPeriodicCheckers;
 setOverlay(overlay: Overlay): void;
 worldRenderer: WorldRenderer;
 particleManager: ParticleManager;
 textRenderer: TextRenderer;
 advanceValidatingTextRenderer: TextRenderer;
 gameRenderer: GameRenderer;
 debugRenderer: DebugRenderer;
 inGameHud: InGameHud;
 options: GameOptions;
 mouse: Mouse;
 keyboard: Keyboard;
 runDirectory: File;
 metricsData: MetricsData;
 interactionManager: ClientPlayerInteractionManager;
 world: ClientWorld;
 player: ClientPlayerEntity;
 cameraEntity: Entity;
 targetedEntity: Entity;
 crosshairTarget: HitResult;
 attackCooldown: number;
 skipGameRender: boolean;
 currentScreen: Screen;
 fpsDebugString: string;
 wireFrame: boolean;
 debugChunkInfo: boolean;
 debugChunkOcclusion: boolean;
 chunkCullingEnabled: boolean;
}
class Static_MinecraftClient {
static getInstance(): MinecraftClient;
static getModStatus(): ModStatus;
static isFancyGraphicsOrBetter(): boolean;
static addSystemDetailsToCrashReport(client: MinecraftClient,languageManager: LanguageManager,version: string,options: GameOptions,report: CrashReport): void;
static addSystemDetailsToCrashReport(systemDetails: SystemDetails,client: MinecraftClient,languageManager: LanguageManager,version: string,options: GameOptions): SystemDetails;
static isAmbientOcclusionEnabled(): boolean;
static printCrashReport(report: CrashReport): void;
static isFabulousGraphicsOrBetter(): boolean;
static isCountrySetTo(country: Object): boolean;
static checkIs64Bit(): boolean;
static method_43764(stacks: List): ReloadableSearchProvider;
static method_43588(crashReport: CrashReport): CrashReport;
static method_43760(resultCollections: List): ReloadableSearchProvider;
static method_43762(stacks: List): ReloadableSearchProvider;
static method_18508(completableFuture: CompletableFuture): void;
static method_37283(consumer: Consumer,path: Path): void;
static method_37284(consumer: Consumer,completableFuture: CompletableFuture,completableFuture2: CompletableFuture): void;
static method_37277(result: ProfileResult): void;
static method_1510(status: Text): void;
static method_41732(saveLoader: SaveLoader): string;
static method_1491(): boolean;
static method_37288(): string;
static isHudEnabled(): boolean;
static method_37279(gameOptions: GameOptions): string;
static method_37287(): string;
static method_37292(string: string): string;
static method_37278(minecraftClient: MinecraftClient): string;
static method_37289(): string;
static method_35701(message: Text): void;
static method_35700(file: File,style: Style): Style;
static method_35704(file: File,style: Style): Style;
static method_18507(future: CompletableFuture): CompletionStage;
static method_37280(languageManager: LanguageManager): string;
static method_1502(stack: ItemStack): Stream;
static method_37282(consumer: Consumer,d: number,i: number): void;
static method_43758(resultCollection: RecipeResultCollection): Stream;
static method_1591(recipeResultCollection: RecipeResultCollection,recipe: Recipe): Stream;
static method_1556(recipeResultCollection: RecipeResultCollection,recipe: Recipe): Identifier;
static method_1581(tooltip: Text): string;
static method_1485(stack: ItemStack): Stream;
static method_43761(resultCollection: RecipeResultCollection): Stream;
static method_1579(string: string): boolean;
static method_43763(text: string): boolean;
static method_43765(text: Text): string;
static method_37281(path: Path,style: Style): Style;
static method_37285(consumer: Consumer,text: Text): void;
static method_1525(stack: ItemStack): Stream;
static instance: MinecraftClient;
static LOGGER: Logger;
static IS_SYSTEM_MAC: boolean;
static field_32145: number;
static DEFAULT_FONT_ID: Identifier;
static UNICODE_FONT_ID: Identifier;
static ALT_TEXT_RENDERER_ID: Identifier;
static REGIONAL_COMPLIANCIES_ID: Identifier;
static COMPLETED_UNIT_FUTURE: CompletableFuture;
static SOCIAL_INTERACTIONS_NOT_AVAILABLE: Text;
static GL_ERROR_DIALOGUE: string;
static currentFps: number;
}

//net.minecraft.world.World$1


//net.minecraft.client.report.AbuseReportSender$Impl
class AbuseReportSender_Impl extends Record, AbuseReportSender{
 equals(object: Object): boolean;
 toString(): string;
 hashCode(): number;
 environment(): ReporterEnvironment;
 canSendReports(): boolean;
 send(id: UUID,report: AbuseReport): CompletableFuture;
 userApiService(): UserApiService;
 getLimits(): AbuseReportLimits;
}
class Static_AbuseReportSender_Impl {
static SERVICE_UNAVAILABLE_ERROR_TEXT: Text;
static HTTP_ERROR_TEXT: Text;
static JSON_ERROR_TEXT: Text;
}

//net.minecraft.client.render.entity.model.BoatEntityModel
class BoatEntityModel extends CompositeEntityModel, ModelWithWaterPatch{
 getWaterPatch(): ModelPart;
 setAngles(boatEntity: BoatEntity,f: number,g: number,h: number,i: number,j: number): void;
 setAngles(entity: Entity,limbAngle: number,limbDistance: number,animationProgress: number,headYaw: number,headPitch: number): void;
 getParts(): ImmutableList;
 getParts(): Iterable;
}
class Static_BoatEntityModel {
static getTexturedModelData(): TexturedModelData;
static setPaddleAngle(entity: BoatEntity,sigma: number,part: ModelPart,angle: number): void;
static addParts(modelPartData: ModelPartData): void;
static LEFT_PADDLE: string;
static RIGHT_PADDLE: string;
static WATER_PATCH: string;
static BOTTOM: string;
static BACK: string;
static FRONT: string;
static RIGHT: string;
static LEFT: string;
}

//net.minecraft.data.server.recipe.ShapelessRecipeJsonBuilder$ShapelessRecipeJsonProvider
class ShapelessRecipeJsonBuilder_ShapelessRecipeJsonProvider extends RecipeJsonBuilder_CraftingRecipeJsonProvider{
 serialize(json: JsonObject): void;
 getRecipeId(): Identifier;
 getAdvancementId(): Identifier;
 toAdvancementJson(): JsonObject;
 getSerializer(): RecipeSerializer;
}

//net.minecraft.data.server.recipe.ShapedRecipeJsonBuilder$ShapedRecipeJsonProvider
class ShapedRecipeJsonBuilder_ShapedRecipeJsonProvider extends RecipeJsonBuilder_CraftingRecipeJsonProvider{
 serialize(json: JsonObject): void;
 getRecipeId(): Identifier;
 getAdvancementId(): Identifier;
 toAdvancementJson(): JsonObject;
 getSerializer(): RecipeSerializer;
}

//net.minecraft.data.server.recipe.ComplexRecipeJsonBuilder$1


//net.minecraft.client.report.ReporterEnvironment$Server$Realm
class ReporterEnvironment_Server_Realm extends Record, ReporterEnvironment_Server{
 equals(object: Object): boolean;
 toString(): string;
 hashCode(): number;
 slotId(): number;
 realmId(): long;
}

//net.minecraft.client.report.ReporterEnvironment$Server$ThirdParty
class ReporterEnvironment_Server_ThirdParty extends Record, ReporterEnvironment_Server{
 equals(object: Object): boolean;
 toString(): string;
 hashCode(): number;
 ip(): string;
}

//net.minecraft.world.gen.surfacebuilder.MaterialRules$InvertedBooleanSupplier
class MaterialRules_InvertedBooleanSupplier extends Record, MaterialRules_BooleanSupplier{
 get(): boolean;
 equals(object: Object): boolean;
 target(): MaterialRules_BooleanSupplier;
 toString(): string;
 hashCode(): number;
}

//net.minecraft.util.Language$1


//net.minecraft.client.resource.language.TranslationStorage
class TranslationStorage extends Language{
 get(key: string,fallback: string): string;
 reorder(text: StringVisitable): OrderedText;
 hasTranslation(key: string): boolean;
 isRightToLeft(): boolean;
}
class Static_TranslationStorage {
static load(resourceManager: ResourceManager,definitions: List,rightToLeft: boolean): TranslationStorage;
static load(langCode: string,resourceRefs: List,translations: Map): void;
static LOGGER: Logger;
}

//net.minecraft.world.chunk.light.SkyLightStorage
class SkyLightStorage extends LightStorage{
}
class Static_SkyLightStorage {
static copy(source: ChunkNibbleArray): ChunkNibbleArray;
}

//net.minecraft.world.chunk.light.BlockLightStorage
class BlockLightStorage extends LightStorage{
}

//net.minecraft.util.math.Spline$Implementation
class Spline_Implementation extends Record, Spline{
 equals(object: Object): boolean;
 toString(): string;
 values(): List;
 hashCode(): number;
 min(): number;
 max(): number;
 apply(visitor: Spline_Visitor): Spline;
 apply(x: Object): number;
 locations(): number[];
 locationFunction(): ToFloatFunction;
 derivatives(): number[];
 getDebugString(): string;
}
class Static_Spline_Implementation {
static build(locationFunction: ToFloatFunction,locations: number[],values: List,derivatives: number[]): Spline_Implementation;
static sampleOutsideRange(point: number,locations: number[],value: number,derivatives: number[],i: number): number;
static method_39236(value: number): string;
static method_41188(visitor: Spline_Visitor,value: Spline): Spline;
static method_39239(fs: number[],index: number): number;
static method_41298(f: number,fs: number[],i: number): boolean;
static assertParametersValid(locations: number[],values: List,derivatives: number[]): void;
static findRangeForLocation(locations: number[],x: number): number;
}

//net.minecraft.util.math.Spline$FixedFloatFunction
class Spline_FixedFloatFunction extends Record, Spline{
 value(): number;
 equals(object: Object): boolean;
 toString(): string;
 hashCode(): number;
 min(): number;
 max(): number;
 apply(visitor: Spline_Visitor): Spline;
 apply(x: Object): number;
 getDebugString(): string;
}

//net.minecraft.server.world.ThreadedAnvilChunkStorage$TicketManager
class ThreadedAnvilChunkStorage_TicketManager extends ChunkTicketManager{
}

//net.minecraft.client.gl.GlUniform
class GlUniform extends Uniform, AutoCloseable{
 getName(): string;
 getLocation(): number;
 set(value1: number,value2: number,value3: number): void;
 set(values: number[]): void;
 set(value1: number,value2: number,value3: number,value4: number): void;
 set(value1: number,value2: number,value3: number,value4: number,value5: number,value6: number): void;
 set(value1: number,value2: number): void;
 set(value: number): void;
 set(vec: Vector4f): void;
 set(values: Matrix3f): void;
 set(values: Matrix4f): void;
 set(value1: number,value2: number,value3: number,value4: number,value5: number,value6: number,value7: number,value8: number,value9: number,value10: number,value11: number,value12: number,value13: number,value14: number,value15: number,value16: number): void;
 set(value1: number,value2: number,value3: number,value4: number,value5: number,value6: number,value7: number,value8: number,value9: number,value10: number,value11: number,value12: number): void;
 set(value1: number,value2: number,value3: number,value4: number,value5: number,value6: number,value7: number,value8: number,value9: number): void;
 set(value1: number,value2: number,value3: number,value4: number,value5: number,value6: number,value7: number,value8: number): void;
 set(vector: Vector3f): void;
 set(value1: number,value2: number,value3: number): void;
 set(value1: number,value2: number): void;
 set(value1: number): void;
 set(index: number,value: number): void;
 set(value1: number,value2: number,value3: number,value4: number): void;
 close(): void;
 getCount(): number;
 upload(): void;
 setLocation(location: number): void;
 setForDataType(value1: number,value2: number,value3: number,value4: number): void;
 setForDataType(value1: number,value2: number,value3: number,value4: number): void;
 setAndFlip(value1: number,value2: number,value3: number,value4: number): void;
 method_35654(value1: number,value2: number,value3: number,value4: number,value5: number,value6: number,value7: number,value8: number): void;
 method_35653(value1: number,value2: number,value3: number,value4: number,value5: number,value6: number): void;
 method_35655(value1: number,value2: number,value3: number,value4: number,value5: number,value6: number,value7: number,value8: number,value9: number,value10: number,value11: number,value12: number): void;
 getFloatData(): FloatBuffer;
 getDataType(): number;
 getIntData(): IntBuffer;
}
class Static_GlUniform {
static getAttribLocation(program: number,name: CharSequence): number;
static getUniformLocation(program: number,name: CharSequence): number;
static getTypeIndex(typeName: string): number;
static uniform1(location: number,value: number): void;
static bindAttribLocation(program: number,index: number,name: CharSequence): void;
static LOGGER: Logger;
static field_32038: number;
static field_32039: number;
static field_32040: number;
static field_32041: number;
static field_32042: number;
static field_32043: number;
static field_32044: number;
static field_32045: number;
static field_32046: number;
static field_32047: number;
static field_32048: number;
static field_32049: boolean;
}

//net.minecraft.client.render.entity.LivingEntityRenderer
class LivingEntityRenderer extends EntityRenderer, FeatureRendererContext{
 getModel(): EntityModel;
 render(entity: Entity,yaw: number,tickDelta: number,matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,light: number): void;
 render(livingEntity: LivingEntity,f: number,g: number,matrixStack: MatrixStack,vertexConsumerProvider: VertexConsumerProvider,i: number): void;
}
class Static_LivingEntityRenderer {
static getOverlay(entity: LivingEntity,whiteOverlayProgress: number): number;
static getYaw(direction: Direction): number;
static shouldFlipUpsideDown(entity: LivingEntity): boolean;
static LOGGER: Logger;
static field_32939: number;
}

//net.minecraft.world.gen.carver.CarverConfig
class CarverConfig extends ProbabilityConfig{
 y: HeightProvider;
 yScale: FloatProvider;
 lavaLevel: YOffset;
 debugConfig: CarverDebugConfig;
 replaceable: RegistryEntryList;
}
class Static_CarverConfig {
static method_33968(instance: RecordCodecBuilder_Instance): App;
static method_35351(config: CarverConfig): Float;
static method_35350(config: CarverConfig): HeightProvider;
static method_35348(config: CarverConfig): YOffset;
static method_35349(config: CarverConfig): FloatProvider;
static method_36411(config: CarverConfig): CarverDebugConfig;
static method_43292(config: CarverConfig): RegistryEntryList;
static CONFIG_CODEC: MapCodec;
}

//net.minecraft.data.server.loottable.vanilla.VanillaEntityLootTableGenerator
class VanillaEntityLootTableGenerator extends EntityLootTableGenerator{
 generate(): void;
}
class Static_VanillaEntityLootTableGenerator {
static createElderGuardianTableBuilder(): LootTable_Builder;
}

//net.minecraft.client.gui.navigation.GuiNavigation$Tab
class GuiNavigation_Tab extends Record, GuiNavigation{
 equals(object: Object): boolean;
 toString(): string;
 hashCode(): number;
 forward(): boolean;
 getDirection(): NavigationDirection;
}

//net.minecraft.client.gui.navigation.GuiNavigation$Arrow
class GuiNavigation_Arrow extends Record, GuiNavigation{
 equals(object: Object): boolean;
 toString(): string;
 hashCode(): number;
 direction(): NavigationDirection;
 getDirection(): NavigationDirection;
}

//net.minecraft.resource.VanillaDataPackProvider
class VanillaDataPackProvider extends VanillaResourcePackProvider{
}
class Static_VanillaDataPackProvider {
static createManager(session: LevelStorage_Session): ResourcePackManager;
static createManager(dataPacksPath: Path): ResourcePackManager;
static createDefaultPack(): DefaultResourcePack;
static method_45284(resourcePack: ResourcePack,name: string): ResourcePack;
static METADATA: PackResourceMetadata;
static FEATURE_FLAGS: PackFeatureSetMetadata;
static METADATA_MAP: ResourceMetadataMap;
static NAME: Text;
static ID: Identifier;
}

//net.minecraft.client.resource.DefaultClientResourcePackProvider
class DefaultClientResourcePackProvider extends VanillaResourcePackProvider{
}
class Static_DefaultClientResourcePackProvider {
static method_45855(resourcePack: ResourcePack,name: string): ResourcePack;
static createDefaultPack(assetsPath: Path): DefaultResourcePack;
static METADATA: PackResourceMetadata;
static METADATA_MAP: ResourceMetadataMap;
static VANILLA_NAME_TEXT: Text;
static HIGH_CONTRAST_NAME: string;
static PROFILE_NAME_TEXTS: Map;
static ID: Identifier;
}

//net.minecraft.data.client.MultipartBlockStateSupplier$ConditionalMultipart
class MultipartBlockStateSupplier_ConditionalMultipart extends MultipartBlockStateSupplier_Multipart{
 validate(stateManager: StateManager): void;
 extraToJson(json: JsonObject): void;
}

//net.minecraft.entity.ai.brain.MemoryQuery$Optional
class MemoryQuery_Optional extends Record, MemoryQuery{
 equals(object: Object): boolean;
 toString(): string;
 hashCode(): number;
 getState(): MemoryModuleState;
 toQueryResult(brain: Brain,value: Optional): MemoryQueryResult;
 memory(): MemoryModuleType;
}

//net.minecraft.entity.ai.brain.MemoryQuery$Value
class MemoryQuery_Value extends Record, MemoryQuery{
 equals(object: Object): boolean;
 toString(): string;
 hashCode(): number;
 getState(): MemoryModuleState;
 toQueryResult(brain: Brain,value: Optional): MemoryQueryResult;
 memory(): MemoryModuleType;
}

//net.minecraft.entity.ai.brain.MemoryQuery$Absent
class MemoryQuery_Absent extends Record, MemoryQuery{
 equals(object: Object): boolean;
 toString(): string;
 hashCode(): number;
 getState(): MemoryModuleState;
 toQueryResult(brain: Brain,value: Optional): MemoryQueryResult;
 memory(): MemoryModuleType;
}

//net.minecraft.server.WhitelistEntry
class WhitelistEntry extends ServerConfigEntry{
}
class Static_WhitelistEntry {
static profileFromJson(json: JsonObject): GameProfile;
}

//net.minecraft.server.BanEntry
class BanEntry extends ServerConfigEntry{
 getSource(): string;
 getReason(): string;
 toText(): Text;
 getExpiryDate(): Date;
 getCreationDate(): Date;
}
class Static_BanEntry {
static DATE_FORMAT: SimpleDateFormat;
static FOREVER: string;
}

//net.minecraft.server.OperatorEntry
class OperatorEntry extends ServerConfigEntry{
 canBypassPlayerLimit(): boolean;
 getPermissionLevel(): number;
}
class Static_OperatorEntry {
static getProfileFromJson(json: JsonObject): GameProfile;
}

//net.minecraft.data.server.tag.vanilla.VanillaWorldPresetTagProvider
class VanillaWorldPresetTagProvider extends TagProvider{
}

//net.minecraft.data.server.tag.vanilla.VanillaBannerPatternTagProvider
class VanillaBannerPatternTagProvider extends TagProvider{
}

//net.minecraft.data.server.tag.vanilla.VanillaDamageTypeTagProvider
class VanillaDamageTypeTagProvider extends TagProvider{
}

//net.minecraft.data.server.tag.vanilla.VanillaPointOfInterestTypeTagProvider
class VanillaPointOfInterestTypeTagProvider extends TagProvider{
}

//net.minecraft.data.server.tag.vanilla.VanillaPaintingVariantTagProvider
class VanillaPaintingVariantTagProvider extends TagProvider{
}

//net.minecraft.data.server.tag.vanilla.VanillaCatVariantTagProvider
class VanillaCatVariantTagProvider extends TagProvider{
}

//net.minecraft.data.server.tag.vanilla.VanillaBiomeTagProvider
class VanillaBiomeTagProvider extends TagProvider{
}

//net.minecraft.data.server.tag.vanilla.VanillaFlatLevelGeneratorPresetTagProvider
class VanillaFlatLevelGeneratorPresetTagProvider extends TagProvider{
}

//net.minecraft.data.server.tag.vanilla.VanillaInstrumentTagProvider
class VanillaInstrumentTagProvider extends TagProvider{
}

//net.minecraft.data.server.tag.ValueLookupTagProvider
class ValueLookupTagProvider extends TagProvider{
}

//net.minecraft.data.server.tag.vanilla.VanillaStructureTagProvider
class VanillaStructureTagProvider extends TagProvider{
}

//net.minecraft.world.gen.placementmodifier.HeightmapPlacementModifier
class HeightmapPlacementModifier extends PlacementModifier{
 getType(): PlacementModifierType;
 getPositions(context: FeaturePlacementContext,random: Random,pos: BlockPos): Stream;
}
class Static_HeightmapPlacementModifier {
static of(heightmap: Heightmap_Type): HeightmapPlacementModifier;
static method_34330(instance: RecordCodecBuilder_Instance): App;
static method_34331(heightmapPlacementModifier: HeightmapPlacementModifier): Heightmap_Type;
static MODIFIER_CODEC: Codec;
}

//net.minecraft.world.gen.placementmodifier.EnvironmentScanPlacementModifier
class EnvironmentScanPlacementModifier extends PlacementModifier{
 getType(): PlacementModifierType;
 getPositions(context: FeaturePlacementContext,random: Random,pos: BlockPos): Stream;
}
class Static_EnvironmentScanPlacementModifier {
static of(direction: Direction,targetPredicate: BlockPredicate,maxSteps: number): EnvironmentScanPlacementModifier;
static of(direction: Direction,targetPredicate: BlockPredicate,allowedSearchPredicate: BlockPredicate,maxSteps: number): EnvironmentScanPlacementModifier;
static method_39627(environmentScanPlacementModifier: EnvironmentScanPlacementModifier): Integer;
static method_39632(environmentScanPlacementModifier: EnvironmentScanPlacementModifier): Direction;
static method_39631(environmentScanPlacementModifier: EnvironmentScanPlacementModifier): BlockPredicate;
static method_39626(instance: RecordCodecBuilder_Instance): App;
static method_39630(environmentScanPlacementModifier: EnvironmentScanPlacementModifier): BlockPredicate;
static MODIFIER_CODEC: Codec;
}

//net.minecraft.world.gen.placementmodifier.AbstractConditionalPlacementModifier
class AbstractConditionalPlacementModifier extends PlacementModifier{
 getPositions(context: FeaturePlacementContext,random: Random,pos: BlockPos): Stream;
}

//net.minecraft.world.gen.placementmodifier.AbstractCountPlacementModifier
class AbstractCountPlacementModifier extends PlacementModifier{
 getPositions(context: FeaturePlacementContext,random: Random,pos: BlockPos): Stream;
}
class Static_AbstractCountPlacementModifier {
static method_33874(blockPos: BlockPos,i: number): BlockPos;
}

//net.minecraft.world.gen.placementmodifier.CarvingMaskPlacementModifier
class CarvingMaskPlacementModifier extends PlacementModifier{
 getType(): PlacementModifierType;
 getPositions(context: FeaturePlacementContext,random: Random,pos: BlockPos): Stream;
}
class Static_CarvingMaskPlacementModifier {
static of(step: GenerationStep_Carver): CarvingMaskPlacementModifier;
static method_33862(config: CarvingMaskPlacementModifier): GenerationStep_Carver;
static MODIFIER_CODEC: Codec;
}

//net.minecraft.world.gen.placementmodifier.CountMultilayerPlacementModifier
class CountMultilayerPlacementModifier extends PlacementModifier{
 getType(): PlacementModifierType;
 getPositions(context: FeaturePlacementContext,random: Random,pos: BlockPos): Stream;
}
class Static_CountMultilayerPlacementModifier {
static of(count: number): CountMultilayerPlacementModifier;
static of(count: IntProvider): CountMultilayerPlacementModifier;
static findPos(context: FeaturePlacementContext,x: number,y: number,z: number,targetY: number): number;
static method_39622(countMultilayerPlacementModifier: CountMultilayerPlacementModifier): IntProvider;
static blocksSpawn(state: BlockState): boolean;
static MODIFIER_CODEC: Codec;
}

//net.minecraft.world.gen.placementmodifier.HeightRangePlacementModifier
class HeightRangePlacementModifier extends PlacementModifier{
 getType(): PlacementModifierType;
 getPositions(context: FeaturePlacementContext,random: Random,pos: BlockPos): Stream;
}
class Static_HeightRangePlacementModifier {
static of(height: HeightProvider): HeightRangePlacementModifier;
static uniform(minOffset: YOffset,maxOffset: YOffset): HeightRangePlacementModifier;
static trapezoid(minOffset: YOffset,maxOffset: YOffset): HeightRangePlacementModifier;
static method_39636(heightRangePlacementModifier: HeightRangePlacementModifier): HeightProvider;
static method_39633(instance: RecordCodecBuilder_Instance): App;
static MODIFIER_CODEC: Codec;
}

//net.minecraft.world.gen.placementmodifier.RandomOffsetPlacementModifier
class RandomOffsetPlacementModifier extends PlacementModifier{
 getType(): PlacementModifierType;
 getPositions(context: FeaturePlacementContext,random: Random,pos: BlockPos): Stream;
}
class Static_RandomOffsetPlacementModifier {
static of(spreadXz: IntProvider,spreadY: IntProvider): RandomOffsetPlacementModifier;
static vertically(spreadY: IntProvider): RandomOffsetPlacementModifier;
static method_39179(instance: RecordCodecBuilder_Instance): App;
static method_39181(randomOffsetPlacementModifier: RandomOffsetPlacementModifier): IntProvider;
static method_39180(randomOffsetPlacementModifier: RandomOffsetPlacementModifier): IntProvider;
static horizontally(spreadXz: IntProvider): RandomOffsetPlacementModifier;
static MODIFIER_CODEC: Codec;
}

//net.minecraft.world.gen.placementmodifier.SquarePlacementModifier
class SquarePlacementModifier extends PlacementModifier{
 getType(): PlacementModifierType;
 getPositions(context: FeaturePlacementContext,random: Random,pos: BlockPos): Stream;
}
class Static_SquarePlacementModifier {
static of(): SquarePlacementModifier;
static method_39640(): SquarePlacementModifier;
static INSTANCE: SquarePlacementModifier;
static MODIFIER_CODEC: Codec;
}

//net.minecraft.block.entity.BrewingStandBlockEntity
class BrewingStandBlockEntity extends LockableContainerBlockEntity, SidedInventory{
 clear(): void;
 isEmpty(): boolean;
 size(): number;
 getStack(slot: number): ItemStack;
 isValid(slot: number,stack: ItemStack): boolean;
 setStack(slot: number,stack: ItemStack): void;
 removeStack(slot: number): ItemStack;
 removeStack(slot: number,amount: number): ItemStack;
 canInsert(slot: number,stack: ItemStack,dir: Direction): boolean;
 readNbt(nbt: NbtCompound): void;
 canPlayerUse(player: PlayerEntity): boolean;
 canExtract(slot: number,stack: ItemStack,dir: Direction): boolean;
 getAvailableSlots(side: Direction): number[];
}
class Static_BrewingStandBlockEntity {
static tick(world: World,pos: BlockPos,state: BlockState,blockEntity: BrewingStandBlockEntity): void;
static craft(world: World,pos: BlockPos,slots: DefaultedList): void;
static canCraft(slots: DefaultedList): boolean;
static INPUT_SLOT_INDEX: number;
static FUEL_SLOT_INDEX: number;
static TOP_SLOTS: number[];
static BOTTOM_SLOTS: number[];
static SIDE_SLOTS: number[];
static MAX_FUEL_USES: number;
static BREW_TIME_PROPERTY_INDEX: number;
static FUEL_PROPERTY_INDEX: number;
static PROPERTY_COUNT: number;
}

//net.minecraft.block.entity.ShulkerBoxBlockEntity
class ShulkerBoxBlockEntity extends LootableContainerBlockEntity, SidedInventory{
 size(): number;
 onClose(player: PlayerEntity): void;
 onSyncedBlockEvent(type: number,data: number): boolean;
 suffocates(): boolean;
 getColor(): DyeColor;
 canInsert(slot: number,stack: ItemStack,dir: Direction): boolean;
 getBoundingBox(state: BlockState): Box;
 readNbt(nbt: NbtCompound): void;
 onOpen(player: PlayerEntity): void;
 getAnimationProgress(delta: number): number;
 canExtract(slot: number,stack: ItemStack,dir: Direction): boolean;
 getAvailableSlots(side: Direction): number[];
 getAnimationStage(): ShulkerBoxBlockEntity_AnimationStage;
 readInventoryNbt(nbt: NbtCompound): void;
}
class Static_ShulkerBoxBlockEntity {
static tick(world: World,pos: BlockPos,state: BlockState,blockEntity: ShulkerBoxBlockEntity): void;
static updateNeighborStates(world: World,pos: BlockPos,state: BlockState): void;
static field_31354: number;
static field_31355: number;
static INVENTORY_SIZE: number;
static field_31357: number;
static field_31358: number;
static field_31359: number;
static field_31360: number;
static ITEMS_KEY: string;
static AVAILABLE_SLOTS: number[];
}

//net.minecraft.client.font.UnihexFont$FontImage8x16
class UnihexFont_FontImage8x16 extends Record, UnihexFont_BitmapGlyph{
 equals(object: Object): boolean;
 toString(): string;
 hashCode(): number;
 bitWidth(): number;
 contents(): byte[];
 getPixels(y: number): number;
}
class Static_UnihexFont_FontImage8x16 {
static read(lineNum: number,data: ByteList): UnihexFont_BitmapGlyph;
}

//net.minecraft.client.font.UnihexFont$FontImage16x16
class UnihexFont_FontImage16x16 extends Record, UnihexFont_BitmapGlyph{
 equals(object: Object): boolean;
 toString(): string;
 hashCode(): number;
 bitWidth(): number;
 contents(): short[];
 getPixels(y: number): number;
}
class Static_UnihexFont_FontImage16x16 {
static read(lineNum: number,data: ByteList): UnihexFont_BitmapGlyph;
}

//net.minecraft.client.font.UnihexFont$FontImage32x16
class UnihexFont_FontImage32x16 extends Record, UnihexFont_BitmapGlyph{
 equals(object: Object): boolean;
 toString(): string;
 hashCode(): number;
 bitWidth(): number;
 contents(): number[];
 getPixels(y: number): number;
}
class Static_UnihexFont_FontImage32x16 {
static read24x16(lineNum: number,data: ByteList): UnihexFont_BitmapGlyph;
static read32x16(lineNum: number,data: ByteList): UnihexFont_BitmapGlyph;
static field_44775: number;
}

//net.minecraft.server.network.DemoServerPlayerInteractionManager
class DemoServerPlayerInteractionManager extends ServerPlayerInteractionManager{
 update(): void;
 processBlockBreakingAction(pos: BlockPos,action: PlayerActionC2SPacket_Action,direction: Direction,worldHeight: number,sequence: number): void;
 interactItem(player: ServerPlayerEntity,world: World,stack: ItemStack,hand: Hand): ActionResult;
 interactBlock(player: ServerPlayerEntity,world: World,stack: ItemStack,hand: Hand,hitResult: BlockHitResult): ActionResult;
}
class Static_DemoServerPlayerInteractionManager {
static DEMO_DAYS: number;
static DEMO_TIME: number;
}

//net.minecraft.client.gui.widget.SimplePositioningWidget$Element
class SimplePositioningWidget_Element extends WrapperWidget_WrappedElement{
}

//net.minecraft.client.gui.widget.AxisGridWidget$Element
class AxisGridWidget_Element extends WrapperWidget_WrappedElement{
}

//net.minecraft.client.gui.widget.GridWidget$Element
class GridWidget_Element extends WrapperWidget_WrappedElement{
 getRowEnd(): number;
 getColumnEnd(): number;
}

//net.minecraft.util.thread.ExecutorSampling$MergedSampler
class ExecutorSampling_MergedSampler extends Sampler{
 equals(object: Object): boolean;
 hashCode(): number;
}
class Static_ExecutorSampling_MergedSampler {
static start(samplers: List): void;
static combineDeviationCheckers(delegates: List): Sampler_DeviationChecker;
static method_37182(d: number,sampler: Sampler): boolean;
static method_37188(list: List): number;
static method_37187(list: List): void;
static averageRetrievers(samplers: List): number;
static method_37184(list: List,value: number): boolean;
}

//net.minecraft.world.gen.carver.CaveCarver
class CaveCarver extends Carver{
 carve(context: CarverContext,config: CarverConfig,chunk: Chunk,posToBiome: Function,random: Random,aquiferSampler: AquiferSampler,pos: ChunkPos,mask: CarvingMask): boolean;
 carve(carverContext: CarverContext,caveCarverConfig: CaveCarverConfig,chunk: Chunk,fun: Function,random: Random,aquiferSampler: AquiferSampler,chunkPos: ChunkPos,carvingMask: CarvingMask): boolean;
 shouldCarve(config: CarverConfig,random: Random): boolean;
 shouldCarve(caveCarverConfig: CaveCarverConfig,random: Random): boolean;
}
class Static_CaveCarver {
static method_33975(d: number,contextx: CarverContext,scaledRelativeX: number,scaledRelativeY: number,scaledRelativeZ: number,y: number): boolean;
static isPositionExcluded(scaledRelativeX: number,scaledRelativeY: number,scaledRelativeZ: number,floorY: number): boolean;
}

//net.minecraft.world.gen.carver.RavineCarver
class RavineCarver extends Carver{
 carve(carverContext: CarverContext,ravineCarverConfig: RavineCarverConfig,chunk: Chunk,fun: Function,random: Random,aquiferSampler: AquiferSampler,chunkPos: ChunkPos,carvingMask: CarvingMask): boolean;
 carve(context: CarverContext,config: CarverConfig,chunk: Chunk,posToBiome: Function,random: Random,aquiferSampler: AquiferSampler,pos: ChunkPos,mask: CarvingMask): boolean;
 shouldCarve(config: CarverConfig,random: Random): boolean;
 shouldCarve(ravineCarverConfig: RavineCarverConfig,random: Random): boolean;
}

//net.minecraft.nbt.scanner.ExclusiveNbtCollector
class ExclusiveNbtCollector extends NbtCollector{
 endNested(): NbtScanner_Result;
 startSubNbt(type: NbtType,key: string): NbtScanner_NestedResult;
}

//net.minecraft.nbt.scanner.SelectiveNbtCollector
class SelectiveNbtCollector extends NbtCollector{
 start(rootType: NbtType): NbtScanner_Result;
 endNested(): NbtScanner_Result;
 startSubNbt(type: NbtType,key: string): NbtScanner_NestedResult;
 visitSubNbtType(type: NbtType): NbtScanner_NestedResult;
 getQueriesLeft(): number;
}

//net.minecraft.client.render.entity.EndCrystalEntityRenderer
class EndCrystalEntityRenderer extends EntityRenderer{
 render(endCrystalEntity: EndCrystalEntity,f: number,g: number,matrixStack: MatrixStack,vertexConsumerProvider: VertexConsumerProvider,i: number): void;
 render(entity: Entity,yaw: number,tickDelta: number,matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,light: number): void;
 getTexture(entity: Entity): Identifier;
 getTexture(endCrystalEntity: EndCrystalEntity): Identifier;
 shouldRender(entity: Entity,frustum: Frustum,x: number,y: number,z: number): boolean;
 shouldRender(endCrystalEntity: EndCrystalEntity,frustum: Frustum,d: number,e: number,f: number): boolean;
}
class Static_EndCrystalEntityRenderer {
static getTexturedModelData(): TexturedModelData;
static getYOffset(crystal: EndCrystalEntity,tickDelta: number): number;
static TEXTURE: Identifier;
static END_CRYSTAL: RenderLayer;
static SINE_45_DEGREES: number;
static GLASS: string;
static BASE: string;
}

//net.minecraft.client.render.entity.WitherSkullEntityRenderer
class WitherSkullEntityRenderer extends EntityRenderer{
 render(entity: Entity,yaw: number,tickDelta: number,matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,light: number): void;
 render(witherSkullEntity: WitherSkullEntity,f: number,g: number,matrixStack: MatrixStack,vertexConsumerProvider: VertexConsumerProvider,i: number): void;
 getTexture(witherSkullEntity: WitherSkullEntity): Identifier;
 getTexture(entity: Entity): Identifier;
}
class Static_WitherSkullEntityRenderer {
static getTexturedModelData(): TexturedModelData;
static INVULNERABLE_TEXTURE: Identifier;
static TEXTURE: Identifier;
}

//net.minecraft.client.render.entity.MinecartEntityRenderer
class MinecartEntityRenderer extends EntityRenderer{
 render(entity: Entity,yaw: number,tickDelta: number,matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,light: number): void;
 render(abstractMinecartEntity: AbstractMinecartEntity,f: number,g: number,matrixStack: MatrixStack,vertexConsumerProvider: VertexConsumerProvider,i: number): void;
 getTexture(entity: Entity): Identifier;
 getTexture(abstractMinecartEntity: AbstractMinecartEntity): Identifier;
}
class Static_MinecartEntityRenderer {
static TEXTURE: Identifier;
}

//net.minecraft.client.render.entity.FishingBobberEntityRenderer
class FishingBobberEntityRenderer extends EntityRenderer{
 render(fishingBobberEntity: FishingBobberEntity,f: number,g: number,matrixStack: MatrixStack,vertexConsumerProvider: VertexConsumerProvider,i: number): void;
 render(entity: Entity,yaw: number,tickDelta: number,matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,light: number): void;
 getTexture(entity: Entity): Identifier;
 getTexture(fishingBobberEntity: FishingBobberEntity): Identifier;
}
class Static_FishingBobberEntityRenderer {
static percentage(value: number,max: number): number;
static vertex(buffer: VertexConsumer,matrix: Matrix4f,normalMatrix: Matrix3f,light: number,x: number,y: number,u: number,v: number): void;
static renderFishingLine(x: number,y: number,z: number,buffer: VertexConsumer,matrices: MatrixStack_Entry,segmentStart: number,segmentEnd: number): void;
static TEXTURE: Identifier;
static LAYER: RenderLayer;
static field_33632: number;
}

//net.minecraft.client.render.entity.ShulkerBulletEntityRenderer
class ShulkerBulletEntityRenderer extends EntityRenderer{
 render(entity: Entity,yaw: number,tickDelta: number,matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,light: number): void;
 render(shulkerBulletEntity: ShulkerBulletEntity,f: number,g: number,matrixStack: MatrixStack,vertexConsumerProvider: VertexConsumerProvider,i: number): void;
 getTexture(entity: Entity): Identifier;
 getTexture(shulkerBulletEntity: ShulkerBulletEntity): Identifier;
}
class Static_ShulkerBulletEntityRenderer {
static TEXTURE: Identifier;
static LAYER: RenderLayer;
}

//net.minecraft.client.render.entity.ItemEntityRenderer
class ItemEntityRenderer extends EntityRenderer{
 render(entity: Entity,yaw: number,tickDelta: number,matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,light: number): void;
 render(itemEntity: ItemEntity,f: number,g: number,matrixStack: MatrixStack,vertexConsumerProvider: VertexConsumerProvider,i: number): void;
 getTexture(entity: Entity): Identifier;
 getTexture(itemEntity: ItemEntity): Identifier;
}
class Static_ItemEntityRenderer {
static field_32924: number;
static MAX_COUNT_FOR_4_ITEMS_RENDERED: number;
static MAX_COUNT_FOR_3_ITEMS_RENDERED: number;
static MAX_COUNT_FOR_2_ITEMS_RENDERED: number;
static MAX_COUNT_FOR_1_ITEM_RENDERED: number;
static field_32929: number;
static field_32930: number;
static field_32931: number;
}

//net.minecraft.client.render.entity.ProjectileEntityRenderer
class ProjectileEntityRenderer extends EntityRenderer{
 render(entity: Entity,yaw: number,tickDelta: number,matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,light: number): void;
 render(persistentProjectileEntity: PersistentProjectileEntity,f: number,g: number,matrixStack: MatrixStack,vertexConsumerProvider: VertexConsumerProvider,i: number): void;
 vertex(positionMatrix: Matrix4f,normalMatrix: Matrix3f,vertexConsumer: VertexConsumer,x: number,y: number,z: number,u: number,v: number,normalX: number,normalZ: number,normalY: number,light: number): void;
}

//net.minecraft.client.render.entity.TntEntityRenderer
class TntEntityRenderer extends EntityRenderer{
 render(entity: Entity,yaw: number,tickDelta: number,matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,light: number): void;
 render(tntEntity: TntEntity,f: number,g: number,matrixStack: MatrixStack,vertexConsumerProvider: VertexConsumerProvider,i: number): void;
 getTexture(entity: Entity): Identifier;
 getTexture(tntEntity: TntEntity): Identifier;
}

//net.minecraft.client.render.entity.FireworkRocketEntityRenderer
class FireworkRocketEntityRenderer extends EntityRenderer{
 render(entity: Entity,yaw: number,tickDelta: number,matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,light: number): void;
 render(fireworkRocketEntity: FireworkRocketEntity,f: number,g: number,matrixStack: MatrixStack,vertexConsumerProvider: VertexConsumerProvider,i: number): void;
 getTexture(entity: Entity): Identifier;
 getTexture(fireworkRocketEntity: FireworkRocketEntity): Identifier;
}

//net.minecraft.client.render.entity.ExperienceOrbEntityRenderer
class ExperienceOrbEntityRenderer extends EntityRenderer{
 render(entity: Entity,yaw: number,tickDelta: number,matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,light: number): void;
 render(experienceOrbEntity: ExperienceOrbEntity,f: number,g: number,matrixStack: MatrixStack,vertexConsumerProvider: VertexConsumerProvider,i: number): void;
 getTexture(experienceOrbEntity: ExperienceOrbEntity): Identifier;
 getTexture(entity: Entity): Identifier;
}
class Static_ExperienceOrbEntityRenderer {
static vertex(vertexConsumer: VertexConsumer,positionMatrix: Matrix4f,normalMatrix: Matrix3f,x: number,y: number,red: number,green: number,blue: number,u: number,v: number,light: number): void;
static TEXTURE: Identifier;
static LAYER: RenderLayer;
}

//net.minecraft.client.render.entity.EmptyEntityRenderer
class EmptyEntityRenderer extends EntityRenderer{
 getTexture(entity: Entity): Identifier;
}

//net.minecraft.client.render.entity.LeashKnotEntityRenderer
class LeashKnotEntityRenderer extends EntityRenderer{
 render(entity: Entity,yaw: number,tickDelta: number,matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,light: number): void;
 render(leashKnotEntity: LeashKnotEntity,f: number,g: number,matrixStack: MatrixStack,vertexConsumerProvider: VertexConsumerProvider,i: number): void;
 getTexture(entity: Entity): Identifier;
 getTexture(leashKnotEntity: LeashKnotEntity): Identifier;
}
class Static_LeashKnotEntityRenderer {
static TEXTURE: Identifier;
}

//net.minecraft.client.render.entity.EnderDragonEntityRenderer
class EnderDragonEntityRenderer extends EntityRenderer{
 render(entity: Entity,yaw: number,tickDelta: number,matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,light: number): void;
 render(enderDragonEntity: EnderDragonEntity,f: number,g: number,matrixStack: MatrixStack,vertexConsumerProvider: VertexConsumerProvider,i: number): void;
 getTexture(entity: Entity): Identifier;
 getTexture(enderDragonEntity: EnderDragonEntity): Identifier;
}
class Static_EnderDragonEntityRenderer {
static getTexturedModelData(): TexturedModelData;
static putDeathLightNegativeXTerminalVertex(buffer: VertexConsumer,matrix: Matrix4f,radius: number,width: number): void;
static putDeathLightPositiveZTerminalVertex(buffer: VertexConsumer,matrix: Matrix4f,radius: number,width: number): void;
static putDeathLightPositiveXTerminalVertex(buffer: VertexConsumer,matrix: Matrix4f,radius: number,width: number): void;
static putDeathLightSourceVertex(buffer: VertexConsumer,matrix: Matrix4f,alpha: number): void;
static renderCrystalBeam(dx: number,dy: number,dz: number,tickDelta: number,age: number,matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,light: number): void;
static CRYSTAL_BEAM_TEXTURE: Identifier;
static EXPLOSION_TEXTURE: Identifier;
static TEXTURE: Identifier;
static EYE_TEXTURE: Identifier;
static DRAGON_CUTOUT: RenderLayer;
static DRAGON_DECAL: RenderLayer;
static DRAGON_EYES: RenderLayer;
static CRYSTAL_BEAM_LAYER: RenderLayer;
static HALF_SQRT_3: number;
}

//net.minecraft.client.render.entity.FallingBlockEntityRenderer
class FallingBlockEntityRenderer extends EntityRenderer{
 render(entity: Entity,yaw: number,tickDelta: number,matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,light: number): void;
 render(fallingBlockEntity: FallingBlockEntity,f: number,g: number,matrixStack: MatrixStack,vertexConsumerProvider: VertexConsumerProvider,i: number): void;
 getTexture(entity: Entity): Identifier;
 getTexture(fallingBlockEntity: FallingBlockEntity): Identifier;
}

//net.minecraft.client.render.entity.TridentEntityRenderer
class TridentEntityRenderer extends EntityRenderer{
 render(entity: Entity,yaw: number,tickDelta: number,matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,light: number): void;
 render(tridentEntity: TridentEntity,f: number,g: number,matrixStack: MatrixStack,vertexConsumerProvider: VertexConsumerProvider,i: number): void;
 getTexture(entity: Entity): Identifier;
 getTexture(tridentEntity: TridentEntity): Identifier;
}
class Static_TridentEntityRenderer {
static TEXTURE: Identifier;
}

//net.minecraft.client.render.entity.LlamaSpitEntityRenderer
class LlamaSpitEntityRenderer extends EntityRenderer{
 render(entity: Entity,yaw: number,tickDelta: number,matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,light: number): void;
 render(llamaSpitEntity: LlamaSpitEntity,f: number,g: number,matrixStack: MatrixStack,vertexConsumerProvider: VertexConsumerProvider,i: number): void;
 getTexture(entity: Entity): Identifier;
 getTexture(llamaSpitEntity: LlamaSpitEntity): Identifier;
}
class Static_LlamaSpitEntityRenderer {
static TEXTURE: Identifier;
}

//net.minecraft.client.render.entity.DragonFireballEntityRenderer
class DragonFireballEntityRenderer extends EntityRenderer{
 render(entity: Entity,yaw: number,tickDelta: number,matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,light: number): void;
 render(dragonFireballEntity: DragonFireballEntity,f: number,g: number,matrixStack: MatrixStack,vertexConsumerProvider: VertexConsumerProvider,i: number): void;
 getTexture(dragonFireballEntity: DragonFireballEntity): Identifier;
 getTexture(entity: Entity): Identifier;
}
class Static_DragonFireballEntityRenderer {
static produceVertex(vertexConsumer: VertexConsumer,positionMatrix: Matrix4f,normalMatrix: Matrix3f,light: number,x: number,y: number,textureU: number,textureV: number): void;
static TEXTURE: Identifier;
static LAYER: RenderLayer;
}

//net.minecraft.client.render.entity.PaintingEntityRenderer
class PaintingEntityRenderer extends EntityRenderer{
 render(entity: Entity,yaw: number,tickDelta: number,matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,light: number): void;
 render(paintingEntity: PaintingEntity,f: number,g: number,matrixStack: MatrixStack,vertexConsumerProvider: VertexConsumerProvider,i: number): void;
 getTexture(paintingEntity: PaintingEntity): Identifier;
 getTexture(entity: Entity): Identifier;
}

//net.minecraft.client.render.entity.DisplayEntityRenderer
class DisplayEntityRenderer extends EntityRenderer{
 render(entity: Entity,yaw: number,tickDelta: number,matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,light: number): void;
 render(displayEntity: DisplayEntity,f: number,g: number,matrixStack: MatrixStack,vertexConsumerProvider: VertexConsumerProvider,i: number): void;
 getTexture(displayEntity: DisplayEntity): Identifier;
 getTexture(entity: Entity): Identifier;
}

//net.minecraft.client.render.entity.FlyingItemEntityRenderer
class FlyingItemEntityRenderer extends EntityRenderer{
 render(entity: Entity,yaw: number,tickDelta: number,matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,light: number): void;
 getTexture(entity: Entity): Identifier;
}
class Static_FlyingItemEntityRenderer {
static MIN_DISTANCE: number;
}

//net.minecraft.client.render.entity.BoatEntityRenderer
class BoatEntityRenderer extends EntityRenderer{
 render(boatEntity: BoatEntity,f: number,g: number,matrixStack: MatrixStack,vertexConsumerProvider: VertexConsumerProvider,i: number): void;
 render(entity: Entity,yaw: number,tickDelta: number,matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,light: number): void;
 getTexture(boatEntity: BoatEntity): Identifier;
 getTexture(entity: Entity): Identifier;
}
class Static_BoatEntityRenderer {
static getTexture(type: BoatEntity_Type,chest: boolean): string;
static method_32162(type: BoatEntity_Type): BoatEntity_Type;
}

//net.minecraft.client.render.entity.EvokerFangsEntityRenderer
class EvokerFangsEntityRenderer extends EntityRenderer{
 render(entity: Entity,yaw: number,tickDelta: number,matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,light: number): void;
 render(evokerFangsEntity: EvokerFangsEntity,f: number,g: number,matrixStack: MatrixStack,vertexConsumerProvider: VertexConsumerProvider,i: number): void;
 getTexture(entity: Entity): Identifier;
 getTexture(evokerFangsEntity: EvokerFangsEntity): Identifier;
}
class Static_EvokerFangsEntityRenderer {
static TEXTURE: Identifier;
}

//net.minecraft.client.render.entity.ItemFrameEntityRenderer
class ItemFrameEntityRenderer extends EntityRenderer{
 render(entity: Entity,yaw: number,tickDelta: number,matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,light: number): void;
 render(itemFrameEntity: ItemFrameEntity,f: number,g: number,matrixStack: MatrixStack,vertexConsumerProvider: VertexConsumerProvider,i: number): void;
 getTexture(entity: Entity): Identifier;
 getTexture(itemFrameEntity: ItemFrameEntity): Identifier;
 getPositionOffset(itemFrameEntity: ItemFrameEntity,f: number): Vec3d;
 getPositionOffset(entity: Entity,tickDelta: number): Vec3d;
}
class Static_ItemFrameEntityRenderer {
static NORMAL_FRAME: ModelIdentifier;
static MAP_FRAME: ModelIdentifier;
static GLOW_FRAME: ModelIdentifier;
static MAP_GLOW_FRAME: ModelIdentifier;
static GLOW_FRAME_BLOCK_LIGHT: number;
static field_32933: number;
}

//net.minecraft.client.render.entity.LightningEntityRenderer
class LightningEntityRenderer extends EntityRenderer{
 render(entity: Entity,yaw: number,tickDelta: number,matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,light: number): void;
 render(lightningEntity: LightningEntity,f: number,g: number,matrixStack: MatrixStack,vertexConsumerProvider: VertexConsumerProvider,i: number): void;
 getTexture(lightningEntity: LightningEntity): Identifier;
 getTexture(entity: Entity): Identifier;
}
class Static_LightningEntityRenderer {
static drawBranch(matrix: Matrix4f,buffer: VertexConsumer,x1: number,z1: number,y: number,x2: number,z2: number,red: number,green: number,blue: number,offset2: number,offset1: number,shiftEast1: boolean,shiftSouth1: boolean,shiftEast2: boolean,shiftSouth2: boolean): void;
}

//net.minecraft.data.server.recipe.ComplexRecipeJsonBuilder
class ComplexRecipeJsonBuilder extends RecipeJsonBuilder{
 offerTo(exporter: Consumer,recipeId: string): void;
}
class Static_ComplexRecipeJsonBuilder {
static create(serializer: RecipeSerializer): ComplexRecipeJsonBuilder;
}

//net.minecraft.screen.AnvilScreenHandler
class AnvilScreenHandler extends ForgingScreenHandler{
 setNewItemName(newItemName: string): boolean;
 updateResult(): void;
 getLevelCost(): number;
}
class Static_AnvilScreenHandler {
static sanitize(name: string): string;
static getNextCost(cost: number): number;
static method_24922(playerEntity: PlayerEntity,world: World,pos: BlockPos): void;
static method_48351(stack: ItemStack): boolean;
static method_48350(stack: ItemStack): boolean;
static INPUT_1_ID: number;
static INPUT_2_ID: number;
static OUTPUT_ID: number;
static LOGGER: Logger;
static field_30752: boolean;
static MAX_NAME_LENGTH: number;
static field_30753: number;
static field_30754: number;
static field_30755: number;
static field_30747: number;
static field_30748: number;
static field_30749: number;
static field_30750: number;
static INPUT_1_X: number;
static INPUT_2_X: number;
static OUTPUT_X: number;
static SLOT_Y: number;
}

//net.minecraft.screen.SmithingScreenHandler
class SmithingScreenHandler extends ForgingScreenHandler{
 canInsertIntoSlot(stack: ItemStack,slot: Slot): boolean;
 getSlotFor(stack: ItemStack): number;
 updateResult(): void;
 isValidIngredient(stack: ItemStack): boolean;
}
class Static_SmithingScreenHandler {
static getQuickMoveSlot(recipe: SmithingRecipe,stack: ItemStack): Optional;
static method_48390(itemStack: ItemStack,recipe: SmithingRecipe): Optional;
static method_24929(world: World,pos: BlockPos): void;
static method_48394(itemStack: ItemStack,recipe: SmithingRecipe): boolean;
static method_51714(itemStack: ItemStack,smithingRecipe: SmithingRecipe): boolean;
static method_51713(itemStack: ItemStack,smithingRecipe: SmithingRecipe): boolean;
static method_48388(itemStack: ItemStack,recipe: SmithingRecipe): Optional;
static TEMPLATE_ID: number;
static EQUIPMENT_ID: number;
static MATERIAL_ID: number;
static OUTPUT_ID: number;
static TEMPLATE_X: number;
static EQUIPMENT_X: number;
static MATERIAL_X: number;
static OUTPUT_X: number;
static SLOT_Y: number;
}

//net.minecraft.screen.CraftingScreenHandler
class CraftingScreenHandler extends AbstractRecipeScreenHandler{
 matches(recipe: Recipe): boolean;
 canUse(player: PlayerEntity): boolean;
 getCategory(): RecipeBookCategory;
 quickMove(player: PlayerEntity,slot: number): ItemStack;
 canInsertIntoSlot(stack: ItemStack,slot: Slot): boolean;
 canInsertIntoSlot(index: number): boolean;
 onClosed(player: PlayerEntity): void;
 onContentChanged(inventory: Inventory): void;
 clearCraftingSlots(): void;
 getCraftingWidth(): number;
 getCraftingHeight(): number;
 getCraftingResultSlotIndex(): number;
 populateRecipeFinder(finder: RecipeMatcher): void;
 getCraftingSlotCount(): number;
}
class Static_CraftingScreenHandler {
static updateResult(handler: ScreenHandler,world: World,player: PlayerEntity,craftingInventory: RecipeInputInventory,resultInventory: CraftingResultInventory): void;
static method_17400(itemStack: ItemStack,playerEntity: PlayerEntity,world: World,pos: BlockPos): void;
static RESULT_ID: number;
static INPUT_START: number;
static INPUT_END: number;
static INVENTORY_START: number;
static INVENTORY_END: number;
static HOTBAR_START: number;
static HOTBAR_END: number;
}

//net.minecraft.screen.PlayerScreenHandler
class PlayerScreenHandler extends AbstractRecipeScreenHandler{
 matches(recipe: Recipe): boolean;
 canUse(player: PlayerEntity): boolean;
 getCategory(): RecipeBookCategory;
 getCraftingInput(): RecipeInputInventory;
 quickMove(player: PlayerEntity,slot: number): ItemStack;
 canInsertIntoSlot(stack: ItemStack,slot: Slot): boolean;
 canInsertIntoSlot(index: number): boolean;
 onClosed(player: PlayerEntity): void;
 onContentChanged(inventory: Inventory): void;
 clearCraftingSlots(): void;
 getCraftingWidth(): number;
 getCraftingHeight(): number;
 getCraftingResultSlotIndex(): number;
 populateRecipeFinder(finder: RecipeMatcher): void;
 getCraftingSlotCount(): number;
 onServer: boolean;
}
class Static_PlayerScreenHandler {
static isInHotbar(slot: number): boolean;
static onEquipStack(player: PlayerEntity,slot: EquipmentSlot,newStack: ItemStack,currentStack: ItemStack): void;
static field_30802: number;
static CRAFTING_RESULT_ID: number;
static CRAFTING_INPUT_START: number;
static CRAFTING_INPUT_END: number;
static EQUIPMENT_START: number;
static EQUIPMENT_END: number;
static INVENTORY_START: number;
static INVENTORY_END: number;
static HOTBAR_START: number;
static HOTBAR_END: number;
static OFFHAND_ID: number;
static BLOCK_ATLAS_TEXTURE: Identifier;
static EMPTY_HELMET_SLOT_TEXTURE: Identifier;
static EMPTY_CHESTPLATE_SLOT_TEXTURE: Identifier;
static EMPTY_LEGGINGS_SLOT_TEXTURE: Identifier;
static EMPTY_BOOTS_SLOT_TEXTURE: Identifier;
static EMPTY_OFFHAND_ARMOR_SLOT: Identifier;
static EMPTY_ARMOR_SLOT_TEXTURES: Identifier[];
static EQUIPMENT_SLOT_ORDER: EquipmentSlot[];
}

//net.minecraft.screen.AbstractFurnaceScreenHandler
class AbstractFurnaceScreenHandler extends AbstractRecipeScreenHandler{
 matches(recipe: Recipe): boolean;
 canUse(player: PlayerEntity): boolean;
 getCategory(): RecipeBookCategory;
 quickMove(player: PlayerEntity,slot: number): ItemStack;
 canInsertIntoSlot(index: number): boolean;
 clearCraftingSlots(): void;
 getCraftingWidth(): number;
 getCraftingHeight(): number;
 getCraftingResultSlotIndex(): number;
 populateRecipeFinder(finder: RecipeMatcher): void;
 getCraftingSlotCount(): number;
 getFuelProgress(): number;
 getCookProgress(): number;
 isBurning(): boolean;
}
class Static_AbstractFurnaceScreenHandler {
static field_30738: number;
static field_30739: number;
static field_30740: number;
static field_30741: number;
static field_30742: number;
static field_30743: number;
static field_30744: number;
static field_30745: number;
static field_30746: number;
}

//net.minecraft.block.BeehiveBlock
class BeehiveBlock extends BlockWithEntity{
 getStateForNeighborUpdate(state: BlockState,direction: Direction,neighborState: BlockState,world: WorldAccess,pos: BlockPos,neighborPos: BlockPos): BlockState;
 hasComparatorOutput(state: BlockState): boolean;
 getComparatorOutput(state: BlockState,world: World,pos: BlockPos): number;
 randomDisplayTick(state: BlockState,world: World,pos: BlockPos,random: Random): void;
 onBreak(world: World,pos: BlockPos,state: BlockState,player: PlayerEntity): void;
 onUse(state: BlockState,world: World,pos: BlockPos,player: PlayerEntity,hand: Hand,hit: BlockHitResult): ActionResult;
 getTicker(world: World,state: BlockState,type: BlockEntityType): BlockEntityTicker;
 createBlockEntity(pos: BlockPos,state: BlockState): BlockEntity;
 getRenderType(state: BlockState): BlockRenderType;
 getDroppedStacks(state: BlockState,builder: LootContextParameterSet_Builder): List;
 getPlacementState(ctx: ItemPlacementContext): BlockState;
 afterBreak(world: World,player: PlayerEntity,pos: BlockPos,state: BlockState,blockEntity: BlockEntity,tool: ItemStack): void;
 takeHoney(world: World,state: BlockState,pos: BlockPos): void;
 takeHoney(world: World,state: BlockState,pos: BlockPos,player: PlayerEntity,beeState: BeehiveBlockEntity_BeeState): void;
}
class Static_BeehiveBlock {
static dropHoneycomb(world: World,pos: BlockPos): void;
static method_21839(hand: Hand,playerx: PlayerEntity): void;
static FACING: DirectionProperty;
static HONEY_LEVEL: IntProperty;
static FULL_HONEY_LEVEL: number;
static DROPPED_HONEYCOMB_COUNT: number;
}

//net.minecraft.block.EndPortalBlock
class EndPortalBlock extends BlockWithEntity{
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 randomDisplayTick(state: BlockState,world: World,pos: BlockPos,random: Random): void;
 canBucketPlace(state: BlockState,fluid: Fluid): boolean;
 onEntityCollision(state: BlockState,world: World,pos: BlockPos,entity: Entity): void;
 createBlockEntity(pos: BlockPos,state: BlockState): BlockEntity;
 getPickStack(world: BlockView,pos: BlockPos,state: BlockState): ItemStack;
}
class Static_EndPortalBlock {
static SHAPE: VoxelShape;
}

//net.minecraft.block.ChiseledBookshelfBlock
class ChiseledBookshelfBlock extends BlockWithEntity{
 rotate(state: BlockState,rotation: BlockRotation): BlockState;
 hasComparatorOutput(state: BlockState): boolean;
 getComparatorOutput(state: BlockState,world: World,pos: BlockPos): number;
 onStateReplaced(state: BlockState,world: World,pos: BlockPos,newState: BlockState,moved: boolean): void;
 mirror(state: BlockState,mirror: BlockMirror): BlockState;
 onUse(state: BlockState,world: World,pos: BlockPos,player: PlayerEntity,hand: Hand,hit: BlockHitResult): ActionResult;
 createBlockEntity(pos: BlockPos,state: BlockState): BlockEntity;
 getRenderType(state: BlockState): BlockRenderType;
 getPlacementState(ctx: ItemPlacementContext): BlockState;
}
class Static_ChiseledBookshelfBlock {
static getHitPos(hit: BlockHitResult,facing: Direction): Optional;
static getColumn(x: number): number;
static getSlotForHitPos(hitPos: Vec2f): number;
static tryRemoveBook(world: World,pos: BlockPos,player: PlayerEntity,blockEntity: ChiseledBookshelfBlockEntity,slot: number): void;
static method_47578(builder: StateManager_Builder,property: Property): void;
static tryAddBook(world: World,pos: BlockPos,player: PlayerEntity,blockEntity: ChiseledBookshelfBlockEntity,stack: ItemStack,slot: number): void;
static MAX_BOOK_COUNT: number;
static BOOK_HEIGHT: number;
static SLOT_OCCUPIED_PROPERTIES: List;
}

//net.minecraft.block.BrewingStandBlock
class BrewingStandBlock extends BlockWithEntity{
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 hasComparatorOutput(state: BlockState): boolean;
 getComparatorOutput(state: BlockState,world: World,pos: BlockPos): number;
 randomDisplayTick(state: BlockState,world: World,pos: BlockPos,random: Random): void;
 canPathfindThrough(state: BlockState,world: BlockView,pos: BlockPos,type: NavigationType): boolean;
 onStateReplaced(state: BlockState,world: World,pos: BlockPos,newState: BlockState,moved: boolean): void;
 onUse(state: BlockState,world: World,pos: BlockPos,player: PlayerEntity,hand: Hand,hit: BlockHitResult): ActionResult;
 getTicker(world: World,state: BlockState,type: BlockEntityType): BlockEntityTicker;
 createBlockEntity(pos: BlockPos,state: BlockState): BlockEntity;
 getRenderType(state: BlockState): BlockRenderType;
 onPlaced(world: World,pos: BlockPos,state: BlockState,placer: LivingEntity,itemStack: ItemStack): void;
}
class Static_BrewingStandBlock {
static BOTTLE_PROPERTIES: BooleanProperty[];
static SHAPE: VoxelShape;
}

//net.minecraft.block.AbstractBannerBlock
class AbstractBannerBlock extends BlockWithEntity{
 getColor(): DyeColor;
 createBlockEntity(pos: BlockPos,state: BlockState): BlockEntity;
 canMobSpawnInside(state: BlockState): boolean;
 getPickStack(world: BlockView,pos: BlockPos,state: BlockState): ItemStack;
 onPlaced(world: World,pos: BlockPos,state: BlockState,placer: LivingEntity,itemStack: ItemStack): void;
}
class Static_AbstractBannerBlock {
static method_38991(itemStack: ItemStack,blockEntity: BannerBlockEntity): void;
static method_38990(itemStack: ItemStack,blockEntity: BannerBlockEntity): void;
}

//net.minecraft.block.SculkCatalystBlock
class SculkCatalystBlock extends BlockWithEntity{
 onStacksDropped(state: BlockState,world: ServerWorld,pos: BlockPos,tool: ItemStack,dropExperience: boolean): void;
 scheduledTick(state: BlockState,world: ServerWorld,pos: BlockPos,random: Random): void;
 getTicker(world: World,state: BlockState,type: BlockEntityType): BlockEntityTicker;
 createBlockEntity(pos: BlockPos,state: BlockState): BlockEntity;
 getRenderType(state: BlockState): BlockRenderType;
}
class Static_SculkCatalystBlock {
static BLOOM: BooleanProperty;
}

//net.minecraft.block.SpawnerBlock
class SpawnerBlock extends BlockWithEntity{
 appendTooltip(stack: ItemStack,world: BlockView,tooltip: List,options: TooltipContext): void;
 onStacksDropped(state: BlockState,world: ServerWorld,pos: BlockPos,tool: ItemStack,dropExperience: boolean): void;
 getTicker(world: World,state: BlockState,type: BlockEntityType): BlockEntityTicker;
 createBlockEntity(pos: BlockPos,state: BlockState): BlockEntity;
 getRenderType(state: BlockState): BlockRenderType;
}
class Static_SpawnerBlock {
static method_46688(entityType: EntityType): Text;
}

//net.minecraft.block.HopperBlock
class HopperBlock extends BlockWithEntity{
 rotate(state: BlockState,rotation: BlockRotation): BlockState;
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 hasComparatorOutput(state: BlockState): boolean;
 getComparatorOutput(state: BlockState,world: World,pos: BlockPos): number;
 canPathfindThrough(state: BlockState,world: BlockView,pos: BlockPos,type: NavigationType): boolean;
 onBlockAdded(state: BlockState,world: World,pos: BlockPos,oldState: BlockState,notify: boolean): void;
 onStateReplaced(state: BlockState,world: World,pos: BlockPos,newState: BlockState,moved: boolean): void;
 onEntityCollision(state: BlockState,world: World,pos: BlockPos,entity: Entity): void;
 mirror(state: BlockState,mirror: BlockMirror): BlockState;
 neighborUpdate(state: BlockState,world: World,pos: BlockPos,sourceBlock: Block,sourcePos: BlockPos,notify: boolean): void;
 onUse(state: BlockState,world: World,pos: BlockPos,player: PlayerEntity,hand: Hand,hit: BlockHitResult): ActionResult;
 getRaycastShape(state: BlockState,world: BlockView,pos: BlockPos): VoxelShape;
 getTicker(world: World,state: BlockState,type: BlockEntityType): BlockEntityTicker;
 createBlockEntity(pos: BlockPos,state: BlockState): BlockEntity;
 getRenderType(state: BlockState): BlockRenderType;
 getPlacementState(ctx: ItemPlacementContext): BlockState;
 onPlaced(world: World,pos: BlockPos,state: BlockState,placer: LivingEntity,itemStack: ItemStack): void;
}
class Static_HopperBlock {
static FACING: DirectionProperty;
static ENABLED: BooleanProperty;
static TOP_SHAPE: VoxelShape;
static MIDDLE_SHAPE: VoxelShape;
static OUTSIDE_SHAPE: VoxelShape;
static DEFAULT_SHAPE: VoxelShape;
static DOWN_SHAPE: VoxelShape;
static EAST_SHAPE: VoxelShape;
static NORTH_SHAPE: VoxelShape;
static SOUTH_SHAPE: VoxelShape;
static WEST_SHAPE: VoxelShape;
static DOWN_RAYCAST_SHAPE: VoxelShape;
static EAST_RAYCAST_SHAPE: VoxelShape;
static NORTH_RAYCAST_SHAPE: VoxelShape;
static SOUTH_RAYCAST_SHAPE: VoxelShape;
static WEST_RAYCAST_SHAPE: VoxelShape;
}

//net.minecraft.block.EnchantingTableBlock
class EnchantingTableBlock extends BlockWithEntity{
 hasSidedTransparency(state: BlockState): boolean;
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 randomDisplayTick(state: BlockState,world: World,pos: BlockPos,random: Random): void;
 canPathfindThrough(state: BlockState,world: BlockView,pos: BlockPos,type: NavigationType): boolean;
 createScreenHandlerFactory(state: BlockState,world: World,pos: BlockPos): NamedScreenHandlerFactory;
 onUse(state: BlockState,world: World,pos: BlockPos,player: PlayerEntity,hand: Hand,hit: BlockHitResult): ActionResult;
 getTicker(world: World,state: BlockState,type: BlockEntityType): BlockEntityTicker;
 createBlockEntity(pos: BlockPos,state: BlockState): BlockEntity;
 getRenderType(state: BlockState): BlockRenderType;
 onPlaced(world: World,pos: BlockPos,state: BlockState,placer: LivingEntity,itemStack: ItemStack): void;
}
class Static_EnchantingTableBlock {
static canAccessPowerProvider(world: World,tablePos: BlockPos,providerOffset: BlockPos): boolean;
static method_17467(world: World,blockPos: BlockPos,syncId: number,inventory: PlayerInventory,player: PlayerEntity): ScreenHandler;
static method_40446(pos: BlockPos): boolean;
static SHAPE: VoxelShape;
static POWER_PROVIDER_OFFSETS: List;
}

//net.minecraft.block.BarrelBlock
class BarrelBlock extends BlockWithEntity{
 rotate(state: BlockState,rotation: BlockRotation): BlockState;
 hasComparatorOutput(state: BlockState): boolean;
 getComparatorOutput(state: BlockState,world: World,pos: BlockPos): number;
 onStateReplaced(state: BlockState,world: World,pos: BlockPos,newState: BlockState,moved: boolean): void;
 scheduledTick(state: BlockState,world: ServerWorld,pos: BlockPos,random: Random): void;
 mirror(state: BlockState,mirror: BlockMirror): BlockState;
 onUse(state: BlockState,world: World,pos: BlockPos,player: PlayerEntity,hand: Hand,hit: BlockHitResult): ActionResult;
 createBlockEntity(pos: BlockPos,state: BlockState): BlockEntity;
 getRenderType(state: BlockState): BlockRenderType;
 getPlacementState(ctx: ItemPlacementContext): BlockState;
 onPlaced(world: World,pos: BlockPos,state: BlockState,placer: LivingEntity,itemStack: ItemStack): void;
}
class Static_BarrelBlock {
static FACING: DirectionProperty;
static OPEN: BooleanProperty;
}

//net.minecraft.block.DaylightDetectorBlock
class DaylightDetectorBlock extends BlockWithEntity{
 hasSidedTransparency(state: BlockState): boolean;
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 emitsRedstonePower(state: BlockState): boolean;
 getWeakRedstonePower(state: BlockState,world: BlockView,pos: BlockPos,direction: Direction): number;
 onUse(state: BlockState,world: World,pos: BlockPos,player: PlayerEntity,hand: Hand,hit: BlockHitResult): ActionResult;
 getTicker(world: World,state: BlockState,type: BlockEntityType): BlockEntityTicker;
 createBlockEntity(pos: BlockPos,state: BlockState): BlockEntity;
 getRenderType(state: BlockState): BlockRenderType;
}
class Static_DaylightDetectorBlock {
static tick(world: World,pos: BlockPos,state: BlockState,blockEntity: DaylightDetectorBlockEntity): void;
static updateState(state: BlockState,world: World,pos: BlockPos): void;
static POWER: IntProperty;
static INVERTED: BooleanProperty;
static SHAPE: VoxelShape;
}

//net.minecraft.block.PistonExtensionBlock
class PistonExtensionBlock extends BlockWithEntity{
 rotate(state: BlockState,rotation: BlockRotation): BlockState;
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 canPathfindThrough(state: BlockState,world: BlockView,pos: BlockPos,type: NavigationType): boolean;
 onStateReplaced(state: BlockState,world: World,pos: BlockPos,newState: BlockState,moved: boolean): void;
 mirror(state: BlockState,mirror: BlockMirror): BlockState;
 onUse(state: BlockState,world: World,pos: BlockPos,player: PlayerEntity,hand: Hand,hit: BlockHitResult): ActionResult;
 getCollisionShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 getTicker(world: World,state: BlockState,type: BlockEntityType): BlockEntityTicker;
 createBlockEntity(pos: BlockPos,state: BlockState): BlockEntity;
 onBroken(world: WorldAccess,pos: BlockPos,state: BlockState): void;
 getDroppedStacks(state: BlockState,builder: LootContextParameterSet_Builder): List;
 getPickStack(world: BlockView,pos: BlockPos,state: BlockState): ItemStack;
}
class Static_PistonExtensionBlock {
static createBlockEntityPiston(pos: BlockPos,state: BlockState,pushedBlock: BlockState,facing: Direction,extending: boolean,source: boolean): BlockEntity;
static FACING: DirectionProperty;
static TYPE: EnumProperty;
}

//net.minecraft.block.AbstractChestBlock
class AbstractChestBlock extends BlockWithEntity{
 getBlockEntitySource(state: BlockState,world: World,pos: BlockPos,ignoreBlocked: boolean): DoubleBlockProperties_PropertySource;
}

//net.minecraft.block.AbstractFurnaceBlock
class AbstractFurnaceBlock extends BlockWithEntity{
 rotate(state: BlockState,rotation: BlockRotation): BlockState;
 hasComparatorOutput(state: BlockState): boolean;
 getComparatorOutput(state: BlockState,world: World,pos: BlockPos): number;
 onStateReplaced(state: BlockState,world: World,pos: BlockPos,newState: BlockState,moved: boolean): void;
 mirror(state: BlockState,mirror: BlockMirror): BlockState;
 onUse(state: BlockState,world: World,pos: BlockPos,player: PlayerEntity,hand: Hand,hit: BlockHitResult): ActionResult;
 getRenderType(state: BlockState): BlockRenderType;
 getPlacementState(ctx: ItemPlacementContext): BlockState;
 onPlaced(world: World,pos: BlockPos,state: BlockState,placer: LivingEntity,itemStack: ItemStack): void;
}
class Static_AbstractFurnaceBlock {
static checkType(world: World,givenType: BlockEntityType,expectedType: BlockEntityType): BlockEntityTicker;
static FACING: DirectionProperty;
static LIT: BooleanProperty;
}

//net.minecraft.block.EndGatewayBlock
class EndGatewayBlock extends BlockWithEntity{
 randomDisplayTick(state: BlockState,world: World,pos: BlockPos,random: Random): void;
 canBucketPlace(state: BlockState,fluid: Fluid): boolean;
 getTicker(world: World,state: BlockState,type: BlockEntityType): BlockEntityTicker;
 createBlockEntity(pos: BlockPos,state: BlockState): BlockEntity;
 getPickStack(world: BlockView,pos: BlockPos,state: BlockState): ItemStack;
}

//net.minecraft.block.JukeboxBlock
class JukeboxBlock extends BlockWithEntity{
 hasComparatorOutput(state: BlockState): boolean;
 getComparatorOutput(state: BlockState,world: World,pos: BlockPos): number;
 emitsRedstonePower(state: BlockState): boolean;
 onStateReplaced(state: BlockState,world: World,pos: BlockPos,newState: BlockState,moved: boolean): void;
 getWeakRedstonePower(state: BlockState,world: BlockView,pos: BlockPos,direction: Direction): number;
 onUse(state: BlockState,world: World,pos: BlockPos,player: PlayerEntity,hand: Hand,hit: BlockHitResult): ActionResult;
 getTicker(world: World,state: BlockState,type: BlockEntityType): BlockEntityTicker;
 createBlockEntity(pos: BlockPos,state: BlockState): BlockEntity;
 getRenderType(state: BlockState): BlockRenderType;
 onPlaced(world: World,pos: BlockPos,state: BlockState,placer: LivingEntity,itemStack: ItemStack): void;
}
class Static_JukeboxBlock {
static HAS_RECORD: BooleanProperty;
}

//net.minecraft.block.LecternBlock
class LecternBlock extends BlockWithEntity{
 rotate(state: BlockState,rotation: BlockRotation): BlockState;
 hasSidedTransparency(state: BlockState): boolean;
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 getStrongRedstonePower(state: BlockState,world: BlockView,pos: BlockPos,direction: Direction): number;
 hasComparatorOutput(state: BlockState): boolean;
 getComparatorOutput(state: BlockState,world: World,pos: BlockPos): number;
 canPathfindThrough(state: BlockState,world: BlockView,pos: BlockPos,type: NavigationType): boolean;
 emitsRedstonePower(state: BlockState): boolean;
 onStateReplaced(state: BlockState,world: World,pos: BlockPos,newState: BlockState,moved: boolean): void;
 scheduledTick(state: BlockState,world: ServerWorld,pos: BlockPos,random: Random): void;
 getCullingShape(state: BlockState,world: BlockView,pos: BlockPos): VoxelShape;
 mirror(state: BlockState,mirror: BlockMirror): BlockState;
 createScreenHandlerFactory(state: BlockState,world: World,pos: BlockPos): NamedScreenHandlerFactory;
 getWeakRedstonePower(state: BlockState,world: BlockView,pos: BlockPos,direction: Direction): number;
 onUse(state: BlockState,world: World,pos: BlockPos,player: PlayerEntity,hand: Hand,hit: BlockHitResult): ActionResult;
 getCollisionShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 createBlockEntity(pos: BlockPos,state: BlockState): BlockEntity;
 getRenderType(state: BlockState): BlockRenderType;
 getPlacementState(ctx: ItemPlacementContext): BlockState;
}
class Static_LecternBlock {
static putBookIfAbsent(user: Entity,world: World,pos: BlockPos,state: BlockState,stack: ItemStack): boolean;
static setPowered(world: World,pos: BlockPos,state: BlockState): void;
static setPowered(world: World,pos: BlockPos,state: BlockState,powered: boolean): void;
static setHasBook(user: Entity,world: World,pos: BlockPos,state: BlockState,hasBook: boolean): void;
static updateNeighborAlways(world: World,pos: BlockPos,state: BlockState): void;
static putBook(user: Entity,world: World,pos: BlockPos,state: BlockState,stack: ItemStack): void;
static FACING: DirectionProperty;
static POWERED: BooleanProperty;
static HAS_BOOK: BooleanProperty;
static BOTTOM_SHAPE: VoxelShape;
static MIDDLE_SHAPE: VoxelShape;
static BASE_SHAPE: VoxelShape;
static COLLISION_SHAPE_TOP: VoxelShape;
static COLLISION_SHAPE: VoxelShape;
static WEST_SHAPE: VoxelShape;
static NORTH_SHAPE: VoxelShape;
static EAST_SHAPE: VoxelShape;
static SOUTH_SHAPE: VoxelShape;
static SCHEDULED_TICK_DELAY: number;
}

//net.minecraft.block.ShulkerBoxBlock
class ShulkerBoxBlock extends BlockWithEntity{
 rotate(state: BlockState,rotation: BlockRotation): BlockState;
 appendTooltip(stack: ItemStack,world: BlockView,tooltip: List,options: TooltipContext): void;
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 hasComparatorOutput(state: BlockState): boolean;
 getComparatorOutput(state: BlockState,world: World,pos: BlockPos): number;
 getSidesShape(state: BlockState,world: BlockView,pos: BlockPos): VoxelShape;
 onStateReplaced(state: BlockState,world: World,pos: BlockPos,newState: BlockState,moved: boolean): void;
 mirror(state: BlockState,mirror: BlockMirror): BlockState;
 getColor(): DyeColor;
 onBreak(world: World,pos: BlockPos,state: BlockState,player: PlayerEntity): void;
 onUse(state: BlockState,world: World,pos: BlockPos,player: PlayerEntity,hand: Hand,hit: BlockHitResult): ActionResult;
 getTicker(world: World,state: BlockState,type: BlockEntityType): BlockEntityTicker;
 createBlockEntity(pos: BlockPos,state: BlockState): BlockEntity;
 getRenderType(state: BlockState): BlockRenderType;
 getDroppedStacks(state: BlockState,builder: LootContextParameterSet_Builder): List;
 getPlacementState(ctx: ItemPlacementContext): BlockState;
 getPickStack(world: BlockView,pos: BlockPos,state: BlockState): ItemStack;
 onPlaced(world: World,pos: BlockPos,state: BlockState,placer: LivingEntity,itemStack: ItemStack): void;
}
class Static_ShulkerBoxBlock {
static get(dyeColor: DyeColor): Block;
static getItemStack(color: DyeColor): ItemStack;
static getColor(block: Block): DyeColor;
static getColor(item: Item): DyeColor;
static canOpen(state: BlockState,world: World,pos: BlockPos,entity: ShulkerBoxBlockEntity): boolean;
static method_47378(map: EnumMap): void;
static method_38234(itemStack: ItemStack,blockEntity: ShulkerBoxBlockEntity): void;
static method_10524(shulkerBoxBlockEntity: ShulkerBoxBlockEntity,lootConsumer: Consumer): void;
static field_41075: number;
static UP_SHAPE: VoxelShape;
static DOWN_SHAPE: VoxelShape;
static WEST_SHAPE: VoxelShape;
static EAST_SHAPE: VoxelShape;
static NORTH_SHAPE: VoxelShape;
static SOUTH_SHAPE: VoxelShape;
static SIDES_SHAPES: Map;
static FACING: EnumProperty;
static CONTENTS_DYNAMIC_DROP_ID: Identifier;
}

//net.minecraft.block.DispenserBlock
class DispenserBlock extends BlockWithEntity{
 rotate(state: BlockState,rotation: BlockRotation): BlockState;
 hasComparatorOutput(state: BlockState): boolean;
 getComparatorOutput(state: BlockState,world: World,pos: BlockPos): number;
 onStateReplaced(state: BlockState,world: World,pos: BlockPos,newState: BlockState,moved: boolean): void;
 scheduledTick(state: BlockState,world: ServerWorld,pos: BlockPos,random: Random): void;
 mirror(state: BlockState,mirror: BlockMirror): BlockState;
 neighborUpdate(state: BlockState,world: World,pos: BlockPos,sourceBlock: Block,sourcePos: BlockPos,notify: boolean): void;
 onUse(state: BlockState,world: World,pos: BlockPos,player: PlayerEntity,hand: Hand,hit: BlockHitResult): ActionResult;
 createBlockEntity(pos: BlockPos,state: BlockState): BlockEntity;
 getRenderType(state: BlockState): BlockRenderType;
 getPlacementState(ctx: ItemPlacementContext): BlockState;
 onPlaced(world: World,pos: BlockPos,state: BlockState,placer: LivingEntity,itemStack: ItemStack): void;
}
class Static_DispenserBlock {
static getOutputLocation(pointer: BlockPointer): Position;
static registerBehavior(provider: ItemConvertible,behavior: DispenserBehavior): void;
static method_10008(map: Object2ObjectOpenHashMap): void;
static FACING: DirectionProperty;
static TRIGGERED: BooleanProperty;
static BEHAVIORS: Map;
static SCHEDULED_TICK_DELAY: number;
}

//net.minecraft.block.BellBlock
class BellBlock extends BlockWithEntity{
 getStateForNeighborUpdate(state: BlockState,direction: Direction,neighborState: BlockState,world: WorldAccess,pos: BlockPos,neighborPos: BlockPos): BlockState;
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 canPlaceAt(state: BlockState,world: WorldView,pos: BlockPos): boolean;
 canPathfindThrough(state: BlockState,world: BlockView,pos: BlockPos,type: NavigationType): boolean;
 onProjectileHit(world: World,state: BlockState,hit: BlockHitResult,projectile: ProjectileEntity): void;
 neighborUpdate(state: BlockState,world: World,pos: BlockPos,sourceBlock: Block,sourcePos: BlockPos,notify: boolean): void;
 onUse(state: BlockState,world: World,pos: BlockPos,player: PlayerEntity,hand: Hand,hit: BlockHitResult): ActionResult;
 getCollisionShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 getTicker(world: World,state: BlockState,type: BlockEntityType): BlockEntityTicker;
 createBlockEntity(pos: BlockPos,state: BlockState): BlockEntity;
 getRenderType(state: BlockState): BlockRenderType;
 getPlacementState(ctx: ItemPlacementContext): BlockState;
 ring(entity: Entity,world: World,pos: BlockPos,direction: Direction): boolean;
 ring(world: World,pos: BlockPos,direction: Direction): boolean;
 ring(world: World,state: BlockState,hitResult: BlockHitResult,player: PlayerEntity,checkHitPos: boolean): boolean;
}
class Static_BellBlock {
static getPlacementSide(state: BlockState): Direction;
static FACING: DirectionProperty;
static ATTACHMENT: EnumProperty;
static POWERED: BooleanProperty;
static NORTH_SOUTH_SHAPE: VoxelShape;
static EAST_WEST_SHAPE: VoxelShape;
static BELL_WAIST_SHAPE: VoxelShape;
static BELL_LIP_SHAPE: VoxelShape;
static BELL_SHAPE: VoxelShape;
static NORTH_SOUTH_WALLS_SHAPE: VoxelShape;
static EAST_WEST_WALLS_SHAPE: VoxelShape;
static WEST_WALL_SHAPE: VoxelShape;
static EAST_WALL_SHAPE: VoxelShape;
static NORTH_WALL_SHAPE: VoxelShape;
static SOUTH_WALL_SHAPE: VoxelShape;
static HANGING_SHAPE: VoxelShape;
static field_31014: number;
}

//net.minecraft.block.dispenser.ShearsDispenserBehavior
class ShearsDispenserBehavior extends FallibleItemDispenserBehavior{
}
class Static_ShearsDispenserBehavior {
static tryShearBlock(world: ServerWorld,pos: BlockPos): boolean;
static tryShearEntity(world: ServerWorld,pos: BlockPos): boolean;
static method_40054(state: AbstractBlock_AbstractBlockState): boolean;
}

//net.minecraft.block.dispenser.DispenserBehavior$19


//net.minecraft.block.dispenser.DispenserBehavior$18


//net.minecraft.block.dispenser.DispenserBehavior$3


//net.minecraft.block.dispenser.DispenserBehavior$11


//net.minecraft.block.dispenser.DispenserBehavior$4


//net.minecraft.block.dispenser.DispenserBehavior$10


//net.minecraft.block.dispenser.BlockPlacementDispenserBehavior
class BlockPlacementDispenserBehavior extends FallibleItemDispenserBehavior{
}
class Static_BlockPlacementDispenserBehavior {
static LOGGER: Logger;
}

//net.minecraft.block.dispenser.DispenserBehavior$15


//net.minecraft.block.dispenser.DispenserBehavior$14


//net.minecraft.block.dispenser.DispenserBehavior$5


//net.minecraft.block.dispenser.DispenserBehavior$17


//net.minecraft.block.dispenser.DispenserBehavior$16


//net.minecraft.block.dispenser.DispenserBehavior$22


//net.minecraft.block.dispenser.DispenserBehavior$21


//net.minecraft.block.dispenser.DispenserBehavior$1


//net.minecraft.block.dispenser.DispenserBehavior$24


//net.minecraft.block.dispenser.DispenserBehavior$12


//net.minecraft.block.dispenser.DispenserBehavior$23


//net.minecraft.block.dispenser.DispenserBehavior$25$1


//net.minecraft.block.dispenser.DispenserBehavior$26$1


//net.minecraft.world.chunk.UpgradeData$BuiltinLogic$3


//net.minecraft.world.chunk.UpgradeData$BuiltinLogic$2


//net.minecraft.world.chunk.UpgradeData$BuiltinLogic$1


//net.minecraft.world.chunk.UpgradeData$BuiltinLogic$5


//net.minecraft.world.chunk.UpgradeData$BuiltinLogic$4


//net.minecraft.entity.vehicle.ChestMinecartEntity
class ChestMinecartEntity extends StorageMinecartEntity{
 size(): number;
 onClose(player: PlayerEntity): void;
 getScreenHandler(syncId: number,playerInventory: PlayerInventory): ScreenHandler;
 interact(player: PlayerEntity,hand: Hand): ActionResult;
 getMinecartType(): AbstractMinecartEntity_Type;
 getDefaultContainedBlock(): BlockState;
 getDefaultBlockOffset(): number;
}

//net.minecraft.block.BlockState
class BlockState extends AbstractBlock_AbstractBlockState, FabricBlockState{
}
class Static_BlockState {
static CODEC: Codec;
}

//net.minecraft.entity.player.PlayerEntity
class PlayerEntity extends LivingEntity{
 getName(): Text;
 remove(reason: Entity_RemovalReason): void;
 jump(): void;
 getDimensions(pose: EntityPose): EntityDimensions;
 getDisplayName(): Text;
 tick(): void;
 getEntityName(): string;
 canFoodHeal(): boolean;
 addExhaustion(exhaustion: number): void;
 canTakeDamage(): boolean;
 equipStack(slot: EquipmentSlot,stack: ItemStack): void;
 isUsingSpyglass(): boolean;
 getMainArm(): Arm;
 sendTradeOffers(syncId: number,offers: TradeOfferList,levelProgress: number,experience: number,leveled: boolean,refreshable: boolean): void;
 getAttackCooldownProgress(baseTime: number): number;
 increaseTravelMotionStats(dx: number,dy: number,dz: number): void;
 getItemCooldownManager(): ItemCooldownManager;
 openCommandBlockMinecartScreen(commandBlockExecutor: CommandBlockExecutor): void;
 shouldSave(): boolean;
 getBlockBreakingSpeed(block: BlockState): number;
 canSprintAsVehicle(): boolean;
 getLeashPos(delta: number): Vec3d;
 isMainPlayer(): boolean;
 setMainArm(arm: Arm): void;
 setLastDeathPos(lastDeathPos: Optional): void;
 animateDamage(yaw: number): void;
 getSoundCategory(): SoundCategory;
 handleStatus(status: byte): void;
 openEditSignScreen(sign: SignBlockEntity,front: boolean): void;
 requestRespawn(): void;
 setScore(score: number): void;
 isCreativeLevelTwoOp(): boolean;
 getArmorItems(): Iterable;
 canHarvest(state: BlockState): boolean;
 getScoreboard(): Scoreboard;
 getGameProfile(): GameProfile;
 sendMessage(message: Text,overlay: boolean): void;
 shouldFilterText(): boolean;
 isCreative(): boolean;
 stopFallFlying(): void;
 wakeUp(): void;
 wakeUp(skipSleepTimer: boolean,updateSleepingPlayers: boolean): void;
 checkFallFlying(): boolean;
 getScore(): number;
 getHungerManager(): HungerManager;
 interact(entity: Entity,hand: Hand): ActionResult;
 getMovementSpeed(): number;
 getLastDeathPos(): Optional;
 damage(source: DamageSource,amount: number): boolean;
 getSleepTimer(): number;
 unlockRecipes(ids: Identifier[]): void;
 unlockRecipes(recipes: Collection): number;
 lockRecipes(recipes: Collection): number;
 getDamageTiltYaw(): number;
 canPlaceOn(pos: BlockPos,facing: Direction,stack: ItemStack): boolean;
 getInventory(): PlayerInventory;
 onPickupSlotClick(cursorStack: ItemStack,slotStack: ItemStack,clickType: ClickType): void;
 dropItem(stack: ItemStack,throwRandomly: boolean,retainOwnership: boolean): ItemEntity;
 dropItem(stack: ItemStack,retainOwnership: boolean): ItemEntity;
 increaseStat(stat: Stat,amount: number): void;
 increaseStat(stat: Identifier,amount: number): void;
 incrementStat(stat: Identifier): void;
 incrementStat(stat: Stat): void;
 getAbsorptionAmount(): number;
 getNextLevelExperience(): number;
 hasReducedDebugInfo(): boolean;
 getAttackCooldownProgressPerTick(): number;
 setReducedDebugInfo(reducedDebugInfo: boolean): void;
 shouldCloseHandledScreenOnRespawn(): boolean;
 getAbilities(): PlayerAbilities;
 getDefaultPortalCooldown(): number;
 getMaxNetherPortalTime(): number;
 resetLastAttackedTicks(): void;
 shouldCancelInteraction(): boolean;
 isBlockBreakingRestricted(world: World,pos: BlockPos,gameMode: GameMode): boolean;
 isPlayer(): boolean;
 attack(target: Entity): void;
 playSound(event: SoundEvent,category: SoundCategory,volume: number,pitch: number): void;
 playSound(sound: SoundEvent,volume: number,pitch: number): void;
 isSpectator(): boolean;
 updateSwimming(): void;
 setFireTicks(fireTicks: number): void;
 isSwimming(): boolean;
 handleFallDamage(fallDistance: number,damageMultiplier: number,damageSource: DamageSource): boolean;
 isInvulnerableTo(damageSource: DamageSource): boolean;
 tickRiding(): void;
 getHeightOffset(): number;
 dismountVehicle(): void;
 getHandItems(): Iterable;
 slowMovement(state: BlockState,multiplier: Vec3d): void;
 onKilledOther(world: ServerWorld,other: LivingEntity): boolean;
 shouldRenderName(): boolean;
 isPushedByFluids(): boolean;
 openHandledScreen(factory: NamedScreenHandlerFactory): OptionalInt;
 getLuck(): number;
 getStackReference(mappedIndex: number): StackReference;
 getEquippedStack(slot: EquipmentSlot): ItemStack;
 onRecipeCrafted(recipe: Recipe,ingredients: List): void;
 getXpToDrop(): number;
 canConsume(ignoreHunger: boolean): boolean;
 eatFood(world: World,stack: ItemStack): ItemStack;
 canResetTimeBySleeping(): boolean;
 getSculkShriekerWarningManager(): Optional;
 getActiveEyeHeight(pose: EntityPose,dimensions: EntityDimensions): number;
 getProjectileType(stack: ItemStack): ItemStack;
 openJigsawScreen(jigsaw: JigsawBlockEntity): void;
 getPoses(): ImmutableList;
 trySleep(pos: BlockPos): Either;
 openHorseInventory(horse: AbstractHorseEntity,inventory: Inventory): void;
 addShoulderEntity(entityNbt: NbtCompound): boolean;
 canEquip(stack: ItemStack): boolean;
 addExperience(experience: number): void;
 giveItemStack(stack: ItemStack): boolean;
 sendAbilitiesUpdate(): void;
 getEnchantmentTableSeed(): number;
 applyEnchantmentCosts(enchantedItem: ItemStack,experienceLevels: number): void;
 setAbsorptionAmount(amount: number): void;
 openCommandBlockScreen(commandBlock: CommandBlockBlockEntity): void;
 getEnderChestInventory(): EnderChestInventory;
 canModifyBlocks(): boolean;
 tickMovement(): void;
 shouldSwimInFluids(): boolean;
 onDeath(damageSource: DamageSource): void;
 getFallSounds(): LivingEntity_FallSounds;
 travel(movementInput: Vec3d): void;
 useRiptide(riptideTicks: number): void;
 useBook(book: ItemStack,hand: Hand): void;
 writeCustomDataToNbt(nbt: NbtCompound): void;
 readCustomDataFromNbt(nbt: NbtCompound): void;
 canBeHitByProjectile(): boolean;
 isPartVisible(modelPart: PlayerModelPart): boolean;
 openStructureBlockScreen(structureBlock: StructureBlockBlockEntity): void;
 shouldDamagePlayer(player: PlayerEntity): boolean;
 spawnSweepAttackParticles(): void;
 addEnchantedHitParticles(target: Entity): void;
 getShoulderEntityLeft(): NbtCompound;
 getShoulderEntityRight(): NbtCompound;
 addExperienceLevels(levels: number): void;
 resetStat(stat: Stat): void;
 addScore(score: number): void;
 disableShield(sprinting: boolean): void;
 startFallFlying(): void;
 addCritParticles(target: Entity): void;
 playerScreenHandler: PlayerScreenHandler;
 currentScreenHandler: ScreenHandler;
 prevStrideDistance: number;
 strideDistance: number;
 experiencePickUpDelay: number;
 prevCapeX: number;
 prevCapeY: number;
 prevCapeZ: number;
 capeX: number;
 capeY: number;
 capeZ: number;
 experienceLevel: number;
 totalExperience: number;
 experienceProgress: number;
 fishHook: FishingBobberEntity;
}
class Static_PlayerEntity {
static findRespawnPosition(world: ServerWorld,pos: BlockPos,angle: number,forced: boolean,alive: boolean): Optional;
static createPlayerAttributes(): DefaultAttributeContainer_Builder;
static method_17852(entityType: EntityType): boolean;
static method_43119(globalPos: GlobalPos): Optional;
static method_43121(nbtCompound: NbtCompound,nbtElement: NbtElement): void;
static method_20266(hand: Hand,player: PlayerEntity): void;
static LOGGER: Logger;
static field_30643: number;
static field_30644: number;
static field_30645: number;
static field_30646: number;
static field_30647: number;
static field_30648: number;
static field_30649: number;
static field_30650: number;
static DEFAULT_EYE_HEIGHT: number;
static STANDING_DIMENSIONS: EntityDimensions;
static POSE_DIMENSIONS: Map;
static field_30652: number;
static ABSORPTION_AMOUNT: TrackedData;
static SCORE: TrackedData;
static PLAYER_MODEL_PARTS: TrackedData;
static MAIN_ARM: TrackedData;
static LEFT_SHOULDER_ENTITY: TrackedData;
static RIGHT_SHOULDER_ENTITY: TrackedData;
}

//net.minecraft.entity.decoration.ArmorStandEntity
class ArmorStandEntity extends LivingEntity{
 getDimensions(pose: EntityPose): EntityDimensions;
 tick(): void;
 isPartOfGame(): boolean;
 equipStack(slot: EquipmentSlot,stack: ItemStack): void;
 getMainArm(): Arm;
 setHeadRotation(angle: EulerAngle): void;
 isImmuneToExplosion(): boolean;
 isMarker(): boolean;
 getPickBlockStack(): ItemStack;
 setHeadYaw(headYaw: number): void;
 handleStatus(status: byte): void;
 getArmorItems(): Iterable;
 damage(source: DamageSource,amount: number): boolean;
 canHit(): boolean;
 interactAt(player: PlayerEntity,hitPos: Vec3d,hand: Hand): ActionResult;
 shouldRender(distance: number): boolean;
 getPistonBehavior(): PistonBehavior;
 canMoveVoluntarily(): boolean;
 isPushable(): boolean;
 setBodyYaw(bodyYaw: number): void;
 getHeightOffset(): number;
 getHandItems(): Iterable;
 setInvisible(invisible: boolean): void;
 handleAttack(attacker: Entity): boolean;
 canAvoidTraps(): boolean;
 onTrackedDataSet(data: TrackedData): void;
 getEquippedStack(slot: EquipmentSlot): ItemStack;
 kill(): void;
 isBaby(): boolean;
 canEquip(stack: ItemStack): boolean;
 isAffectedBySplashPotions(): boolean;
 getFallSounds(): LivingEntity_FallSounds;
 travel(movementInput: Vec3d): void;
 isMobOrPlayer(): boolean;
 isSmall(): boolean;
 writeCustomDataToNbt(nbt: NbtCompound): void;
 readCustomDataFromNbt(nbt: NbtCompound): void;
 onStruckByLightning(world: ServerWorld,lightning: LightningEntity): void;
 getClientCameraPosVec(tickDelta: number): Vec3d;
 calculateDimensions(): void;
 getRightLegRotation(): EulerAngle;
 setRightArmRotation(angle: EulerAngle): void;
 shouldHideBasePlate(): boolean;
 setRightLegRotation(angle: EulerAngle): void;
 getRightArmRotation(): EulerAngle;
 setHideBasePlate(hideBasePlate: boolean): void;
 setShowArms(showArms: boolean): void;
 shouldShowArms(): boolean;
 getLeftLegRotation(): EulerAngle;
 getHeadRotation(): EulerAngle;
 getBodyRotation(): EulerAngle;
 setBodyRotation(angle: EulerAngle): void;
 setLeftArmRotation(angle: EulerAngle): void;
 setLeftLegRotation(angle: EulerAngle): void;
 getLeftArmRotation(): EulerAngle;
 lastHitTime: long;
}
class Static_ArmorStandEntity {
static method_6918(entity: Entity): boolean;
static field_30443: number;
static field_30445: boolean;
static DEFAULT_HEAD_ROTATION: EulerAngle;
static DEFAULT_BODY_ROTATION: EulerAngle;
static DEFAULT_LEFT_ARM_ROTATION: EulerAngle;
static DEFAULT_RIGHT_ARM_ROTATION: EulerAngle;
static DEFAULT_LEFT_LEG_ROTATION: EulerAngle;
static DEFAULT_RIGHT_LEG_ROTATION: EulerAngle;
static MARKER_DIMENSIONS: EntityDimensions;
static SMALL_DIMENSIONS: EntityDimensions;
static field_30447: number;
static field_30448: number;
static field_30449: number;
static field_30450: number;
static field_30446: number;
static field_30451: number;
static SMALL_FLAG: number;
static SHOW_ARMS_FLAG: number;
static HIDE_BASE_PLATE_FLAG: number;
static MARKER_FLAG: number;
static ARMOR_STAND_FLAGS: TrackedData;
static TRACKER_HEAD_ROTATION: TrackedData;
static TRACKER_BODY_ROTATION: TrackedData;
static TRACKER_LEFT_ARM_ROTATION: TrackedData;
static TRACKER_RIGHT_ARM_ROTATION: TrackedData;
static TRACKER_LEFT_LEG_ROTATION: TrackedData;
static TRACKER_RIGHT_LEG_ROTATION: TrackedData;
static RIDEABLE_MINECART_PREDICATE: Predicate;
}

//net.minecraft.entity.ai.pathing.SpiderNavigation
class SpiderNavigation extends MobNavigation{
 tick(): void;
 startMovingTo(entity: Entity,speed: number): boolean;
 findPathTo(target: BlockPos,distance: number): Path;
 findPathTo(entity: Entity,distance: number): Path;
}

//net.minecraft.loot.entry.LeafEntry$BasicBuilder
class LeafEntry_BasicBuilder extends LeafEntry_Builder{
 build(): LootPoolEntry;
}

//net.minecraft.client.gui.widget.OptionListWidget$WidgetEntry
class OptionListWidget_WidgetEntry extends ElementListWidget_Entry{
 children(): List;
 render(context: DrawContext,index: number,y: number,x: number,entryWidth: number,entryHeight: number,mouseX: number,mouseY: number,hovered: boolean,tickDelta: number): void;
 selectableChildren(): List;
}
class Static_OptionListWidget_WidgetEntry {
static create(options: GameOptions,width: number,firstOption: SimpleOption,secondOption: SimpleOption): OptionListWidget_WidgetEntry;
static create(options: GameOptions,width: number,option: SimpleOption): OptionListWidget_WidgetEntry;
static method_18622(i: number,drawContext: DrawContext,j: number,k: number,f: number,widget: ClickableWidget): void;
}

//net.minecraft.client.gui.screen.multiplayer.SocialInteractionsPlayerListEntry
class SocialInteractionsPlayerListEntry extends ElementListWidget_Entry{
 getName(): string;
 children(): List;
 render(context: DrawContext,index: number,y: number,x: number,entryWidth: number,entryHeight: number,mouseX: number,mouseY: number,hovered: boolean,tickDelta: number): void;
 selectableChildren(): List;
 getUuid(): UUID;
 hasSentMessage(): boolean;
 isOffline(): boolean;
 setSentMessage(sentMessage: boolean): void;
 setOffline(offline: boolean): void;
}
class Static_SocialInteractionsPlayerListEntry {
static method_44525(abuseReportContext: AbuseReportContext,minecraftClient: MinecraftClient,socialInteractionsScreen: SocialInteractionsScreen,uUID: UUID,button: ButtonWidget): void;
static method_47633(minecraftClient: MinecraftClient,socialInteractionsScreen: SocialInteractionsScreen,abuseReportContext: AbuseReportContext,uUID: UUID): void;
static REPORT_BUTTON_TEXTURE: Identifier;
static field_32418: number;
static HIDDEN_TEXT: Text;
static BLOCKED_TEXT: Text;
static OFFLINE_TEXT: Text;
static HIDDEN_OFFLINE_TEXT: Text;
static BLOCKED_OFFLINE_TEXT: Text;
static REPORT_DISABLED_TEXT: Text;
static NOT_REPORTABLE_TEXT: Text;
static hideText: Text;
static showText: Text;
static reportText: Text;
static field_32420: number;
static field_32421: number;
static field_32422: number;
static field_32416: number;
static field_32417: number;
static BLACK_COLOR: number;
static GRAY_COLOR: number;
static DARK_GRAY_COLOR: number;
static WHITE_COLOR: number;
static LIGHT_GRAY_COLOR: number;
}

//net.minecraft.client.gui.screen.option.ControlsListWidget$Entry
class ControlsListWidget_Entry extends ElementListWidget_Entry{
}

//net.minecraft.client.gui.screen.world.EditGameRulesScreen$AbstractRuleWidget
class EditGameRulesScreen_AbstractRuleWidget extends ElementListWidget_Entry{
}

//net.minecraft.client.render.entity.model.ArmorStandArmorEntityModel
class ArmorStandArmorEntityModel extends BipedEntityModel{
 setAngles(entity: Entity,limbAngle: number,limbDistance: number,animationProgress: number,headYaw: number,headPitch: number): void;
 setAngles(livingEntity: LivingEntity,f: number,g: number,h: number,i: number,j: number): void;
 setAngles(armorStandEntity: ArmorStandEntity,f: number,g: number,h: number,i: number,j: number): void;
}
class Static_ArmorStandArmorEntityModel {
static getTexturedModelData(dilation: Dilation): TexturedModelData;
}

//net.minecraft.client.render.entity.model.AbstractZombieModel
class AbstractZombieModel extends BipedEntityModel{
 setAngles(livingEntity: LivingEntity,f: number,g: number,h: number,i: number,j: number): void;
 setAngles(entity: Entity,limbAngle: number,limbDistance: number,animationProgress: number,headYaw: number,headPitch: number): void;
 setAngles(hostileEntity: HostileEntity,f: number,g: number,h: number,i: number,j: number): void;
 isAttacking(entity: HostileEntity): boolean;
}

//net.minecraft.client.render.entity.model.ArmorEntityModel
class ArmorEntityModel extends BipedEntityModel{
}
class Static_ArmorEntityModel {
static getModelData(dilation: Dilation): ModelData;
}

//net.minecraft.client.render.entity.model.EndermanEntityModel
class EndermanEntityModel extends BipedEntityModel{
 setAngles(entity: Entity,limbAngle: number,limbDistance: number,animationProgress: number,headYaw: number,headPitch: number): void;
 setAngles(livingEntity: LivingEntity,f: number,g: number,h: number,i: number,j: number): void;
 carryingBlock: boolean;
 angry: boolean;
}
class Static_EndermanEntityModel {
static getTexturedModelData(): TexturedModelData;
}

//net.minecraft.client.render.entity.model.PlayerEntityModel
class PlayerEntityModel extends BipedEntityModel{
 setAngles(entity: Entity,limbAngle: number,limbDistance: number,animationProgress: number,headYaw: number,headPitch: number): void;
 setAngles(livingEntity: LivingEntity,f: number,g: number,h: number,i: number,j: number): void;
 setArmAngle(arm: Arm,matrices: MatrixStack): void;
 setVisible(visible: boolean): void;
 renderCape(matrices: MatrixStack,vertices: VertexConsumer,light: number,overlay: number): void;
 renderEars(matrices: MatrixStack,vertices: VertexConsumer,light: number,overlay: number): void;
 getRandomPart(random: Random): ModelPart;
 leftSleeve: ModelPart;
 rightSleeve: ModelPart;
 leftPants: ModelPart;
 rightPants: ModelPart;
 jacket: ModelPart;
}
class Static_PlayerEntityModel {
static getTexturedModelData(dilation: Dilation,slim: boolean): ModelData;
static method_32027(part: ModelPart): boolean;
static EAR: string;
static CLOAK: string;
static LEFT_SLEEVE: string;
static RIGHT_SLEEVE: string;
static LEFT_PANTS: string;
static RIGHT_PANTS: string;
}

//net.minecraft.client.render.entity.model.SkeletonEntityModel
class SkeletonEntityModel extends BipedEntityModel{
 animateModel(livingEntity: LivingEntity,f: number,g: number,h: number): void;
 animateModel(mobEntity: MobEntity,f: number,g: number,h: number): void;
 animateModel(entity: Entity,limbAngle: number,limbDistance: number,tickDelta: number): void;
 setAngles(livingEntity: LivingEntity,f: number,g: number,h: number,i: number,j: number): void;
 setAngles(entity: Entity,limbAngle: number,limbDistance: number,animationProgress: number,headYaw: number,headPitch: number): void;
 setAngles(mobEntity: MobEntity,f: number,g: number,h: number,i: number,j: number): void;
 setArmAngle(arm: Arm,matrices: MatrixStack): void;
}
class Static_SkeletonEntityModel {
static getTexturedModelData(): TexturedModelData;
}

//net.minecraft.client.render.entity.model.WitchEntityModel
class WitchEntityModel extends VillagerResemblingModel{
 setAngles(entity: Entity,limbAngle: number,limbDistance: number,animationProgress: number,headYaw: number,headPitch: number): void;
 getNose(): ModelPart;
 setLiftingNose(liftingNose: boolean): void;
}
class Static_WitchEntityModel {
static getTexturedModelData(): TexturedModelData;
}

//net.minecraft.client.gui.screen.StatsScreen$EntityStatsListWidget$Entry
class StatsScreen_EntityStatsListWidget_Entry extends AlwaysSelectedEntryListWidget_Entry{
 render(context: DrawContext,index: number,y: number,x: number,entryWidth: number,entryHeight: number,mouseX: number,mouseY: number,hovered: boolean,tickDelta: number): void;
 getNarration(): Text;
}

//net.minecraft.client.gui.screen.PresetsScreen$SuperflatPresetsListWidget$SuperflatPresetEntry
class PresetsScreen_SuperflatPresetsListWidget_SuperflatPresetEntry extends AlwaysSelectedEntryListWidget_Entry{
 render(context: DrawContext,index: number,y: number,x: number,entryWidth: number,entryHeight: number,mouseX: number,mouseY: number,hovered: boolean,tickDelta: number): void;
 getNarration(): Text;
 mouseClicked(mouseX: number,mouseY: number,button: number): boolean;
}
class Static_PresetsScreen_SuperflatPresetsListWidget_SuperflatPresetEntry {
static method_41842(key: RegistryKey): Text;
static STATS_ICONS_TEXTURE: Identifier;
}

//net.minecraft.client.realms.gui.screen.RealmsPendingInvitesScreen$PendingInvitationSelectionListEntry
class RealmsPendingInvitesScreen_PendingInvitationSelectionListEntry extends AlwaysSelectedEntryListWidget_Entry{
 render(context: DrawContext,index: number,y: number,x: number,entryWidth: number,entryHeight: number,mouseX: number,mouseY: number,hovered: boolean,tickDelta: number): void;
 getNarration(): Text;
 mouseClicked(mouseX: number,mouseY: number,button: number): boolean;
}
class Static_RealmsPendingInvitesScreen_PendingInvitationSelectionListEntry {
static field_32123: number;
}

//net.minecraft.client.realms.gui.screen.RealmsMainScreen$Entry
class RealmsMainScreen_Entry extends AlwaysSelectedEntryListWidget_Entry{
 getRealmsServer(): RealmsServer;
}

//net.minecraft.client.gui.screen.CustomizeBuffetLevelScreen$BuffetBiomesListWidget$BuffetBiomeItem
class CustomizeBuffetLevelScreen_BuffetBiomesListWidget_BuffetBiomeItem extends AlwaysSelectedEntryListWidget_Entry{
 render(context: DrawContext,index: number,y: number,x: number,entryWidth: number,entryHeight: number,mouseX: number,mouseY: number,hovered: boolean,tickDelta: number): void;
 getNarration(): Text;
 mouseClicked(mouseX: number,mouseY: number,button: number): boolean;
}

//net.minecraft.client.gui.screen.report.AbuseReportReasonScreen$ReasonListWidget$ReasonEntry
class AbuseReportReasonScreen_ReasonListWidget_ReasonEntry extends AlwaysSelectedEntryListWidget_Entry{
 getReason(): AbuseReportReason;
 render(context: DrawContext,index: number,y: number,x: number,entryWidth: number,entryHeight: number,mouseX: number,mouseY: number,hovered: boolean,tickDelta: number): void;
 getNarration(): Text;
 mouseClicked(mouseX: number,mouseY: number,button: number): boolean;
}

//net.minecraft.client.realms.gui.screen.RealmsSelectFileToUploadScreen$WorldListEntry
class RealmsSelectFileToUploadScreen_WorldListEntry extends AlwaysSelectedEntryListWidget_Entry{
 render(context: DrawContext,index: number,y: number,x: number,entryWidth: number,entryHeight: number,mouseX: number,mouseY: number,hovered: boolean,tickDelta: number): void;
 getNarration(): Text;
 mouseClicked(mouseX: number,mouseY: number,button: number): boolean;
}

//net.minecraft.client.realms.gui.screen.RealmsPlayerScreen$InvitedObjectSelectionListEntry
class RealmsPlayerScreen_InvitedObjectSelectionListEntry extends AlwaysSelectedEntryListWidget_Entry{
 render(context: DrawContext,index: number,y: number,x: number,entryWidth: number,entryHeight: number,mouseX: number,mouseY: number,hovered: boolean,tickDelta: number): void;
 getNarration(): Text;
 mouseClicked(mouseX: number,mouseY: number,button: number): boolean;
 updateButtonStates(): void;
}
class Static_RealmsPlayerScreen_InvitedObjectSelectionListEntry {
static method_51245(i: number,drawContext: DrawContext,j: number,k: number,f: number,button: ClickableWidget): void;
static field_44531: number;
static field_44532: number;
static field_44533: number;
static field_44534: number;
}

//net.minecraft.client.realms.gui.screen.RealmsBackupScreen$BackupObjectSelectionListEntry
class RealmsBackupScreen_BackupObjectSelectionListEntry extends AlwaysSelectedEntryListWidget_Entry{
 render(context: DrawContext,index: number,y: number,x: number,entryWidth: number,entryHeight: number,mouseX: number,mouseY: number,hovered: boolean,tickDelta: number): void;
 getNarration(): Text;
 mouseClicked(mouseX: number,mouseY: number,button: number): boolean;
}
class Static_RealmsBackupScreen_BackupObjectSelectionListEntry {
static method_51238(i: number,drawContext: DrawContext,j: number,k: number,f: number,button: ClickableWidget): void;
static field_44525: number;
static field_44526: number;
}

//net.minecraft.client.gui.screen.CustomizeFlatLevelScreen$SuperflatLayersListWidget$SuperflatLayerEntry
class CustomizeFlatLevelScreen_SuperflatLayersListWidget_SuperflatLayerEntry extends AlwaysSelectedEntryListWidget_Entry{
 render(context: DrawContext,index: number,y: number,x: number,entryWidth: number,entryHeight: number,mouseX: number,mouseY: number,hovered: boolean,tickDelta: number): void;
 getNarration(): Text;
 mouseClicked(mouseX: number,mouseY: number,button: number): boolean;
}

//net.minecraft.client.realms.gui.screen.RealmsSelectWorldTemplateScreen$WorldTemplateObjectSelectionListEntry
class RealmsSelectWorldTemplateScreen_WorldTemplateObjectSelectionListEntry extends AlwaysSelectedEntryListWidget_Entry{
 render(context: DrawContext,index: number,y: number,x: number,entryWidth: number,entryHeight: number,mouseX: number,mouseY: number,hovered: boolean,tickDelta: number): void;
 getNarration(): Text;
}

//net.minecraft.client.gui.screen.pack.ExperimentalWarningScreen$DetailsScreen$PackListWidgetEntry
class ExperimentalWarningScreen_DetailsScreen_PackListWidgetEntry extends AlwaysSelectedEntryListWidget_Entry{
 render(context: DrawContext,index: number,y: number,x: number,entryWidth: number,entryHeight: number,mouseX: number,mouseY: number,hovered: boolean,tickDelta: number): void;
 getNarration(): Text;
}

//net.minecraft.client.gui.screen.option.LanguageOptionsScreen$LanguageSelectionListWidget$LanguageEntry
class LanguageOptionsScreen_LanguageSelectionListWidget_LanguageEntry extends AlwaysSelectedEntryListWidget_Entry{
 render(context: DrawContext,index: number,y: number,x: number,entryWidth: number,entryHeight: number,mouseX: number,mouseY: number,hovered: boolean,tickDelta: number): void;
 getNarration(): Text;
 mouseClicked(mouseX: number,mouseY: number,button: number): boolean;
}

//net.minecraft.client.gui.screen.report.ChatSelectionScreen$SelectionListWidget$Entry
class ChatSelectionScreen_SelectionListWidget_Entry extends AlwaysSelectedEntryListWidget_Entry{
 isSelected(): boolean;
 getNarration(): Text;
 canSelect(): boolean;
 isHighlightedOnHover(): boolean;
}

//net.minecraft.client.gui.screen.multiplayer.MultiplayerServerListWidget$Entry
class MultiplayerServerListWidget_Entry extends AlwaysSelectedEntryListWidget_Entry, AutoCloseable{
 close(): void;
}

//net.minecraft.client.realms.gui.screen.RealmsBackupInfoScreen$BackupInfoListEntry
class RealmsBackupInfoScreen_BackupInfoListEntry extends AlwaysSelectedEntryListWidget_Entry{
 render(context: DrawContext,index: number,y: number,x: number,entryWidth: number,entryHeight: number,mouseX: number,mouseY: number,hovered: boolean,tickDelta: number): void;
 getNarration(): Text;
}
class Static_RealmsBackupInfoScreen_BackupInfoListEntry {
static TEMPLATE_NAME_TEXT: Text;
static GAME_DIFFICULTY_TEXT: Text;
static NAME_TEXT: Text;
static GAME_SERVER_VERSION_TEXT: Text;
static UPLOADED_TEXT: Text;
static ENABLED_PACK_TEXT: Text;
static DESCRIPTION_TEXT: Text;
static GAME_MODE_TEXT: Text;
static SEED_TEXT: Text;
static WORLD_TYPE_TEXT: Text;
static UNDEFINED_TEXT: Text;
}

//net.minecraft.client.gui.screen.world.WorldListWidget$Entry
class WorldListWidget_Entry extends AlwaysSelectedEntryListWidget_Entry, AutoCloseable{
 close(): void;
 isAvailable(): boolean;
}

//net.minecraft.client.gui.screen.StatsScreen$GeneralStatsListWidget$Entry
class StatsScreen_GeneralStatsListWidget_Entry extends AlwaysSelectedEntryListWidget_Entry{
 render(context: DrawContext,index: number,y: number,x: number,entryWidth: number,entryHeight: number,mouseX: number,mouseY: number,hovered: boolean,tickDelta: number): void;
 getNarration(): Text;
}

//net.minecraft.client.gui.screen.pack.PackListWidget$ResourcePackEntry
class PackListWidget_ResourcePackEntry extends AlwaysSelectedEntryListWidget_Entry{
 getName(): string;
 render(context: DrawContext,index: number,y: number,x: number,entryWidth: number,entryHeight: number,mouseX: number,mouseY: number,hovered: boolean,tickDelta: number): void;
 getNarration(): Text;
 mouseClicked(mouseX: number,mouseY: number,button: number): boolean;
 toggle(): void;
}
class Static_PackListWidget_ResourcePackEntry {
static trimTextToWidth(client: MinecraftClient,text: Text): OrderedText;
static createMultilineText(client: MinecraftClient,text: Text): MultilineText;
static field_32397: number;
static field_32398: number;
static field_32399: number;
static field_32400: number;
static field_32401: number;
static field_32402: number;
static field_32403: number;
static field_32404: number;
static ELLIPSIS: string;
}

//net.minecraft.client.gui.screen.StatsScreen$ItemStatsListWidget$Entry
class StatsScreen_ItemStatsListWidget_Entry extends AlwaysSelectedEntryListWidget_Entry{
 getItem(): Item;
 render(context: DrawContext,index: number,y: number,x: number,entryWidth: number,entryHeight: number,mouseX: number,mouseY: number,hovered: boolean,tickDelta: number): void;
 getNarration(): Text;
}

//net.minecraft.fluid.WaterFluid
class WaterFluid extends FlowableFluid{
 canBeReplacedWith(state: FluidState,world: BlockView,pos: BlockPos,fluid: Fluid,direction: Direction): boolean;
 matchesType(fluid: Fluid): boolean;
 getTickRate(world: WorldView): number;
 randomDisplayTick(world: World,pos: BlockPos,state: FluidState,random: Random): void;
 getBucketFillSound(): Optional;
 getBucketItem(): Item;
 toBlockState(state: FluidState): BlockState;
 getParticle(): ParticleEffect;
 getFlowSpeed(world: WorldView): number;
 getFlowing(): Fluid;
 getStill(): Fluid;
 getLevelDecreasePerBlock(world: WorldView): number;
}

//net.minecraft.fluid.LavaFluid
class LavaFluid extends FlowableFluid{
 canBeReplacedWith(state: FluidState,world: BlockView,pos: BlockPos,fluid: Fluid,direction: Direction): boolean;
 matchesType(fluid: Fluid): boolean;
 onRandomTick(world: World,pos: BlockPos,state: FluidState,random: Random): void;
 getTickRate(world: WorldView): number;
 randomDisplayTick(world: World,pos: BlockPos,state: FluidState,random: Random): void;
 getBucketFillSound(): Optional;
 getBucketItem(): Item;
 toBlockState(state: FluidState): BlockState;
 getParticle(): ParticleEffect;
 getFlowSpeed(world: WorldView): number;
 getFlowing(): Fluid;
 getStill(): Fluid;
 getNextTickDelay(world: World,pos: BlockPos,oldState: FluidState,newState: FluidState): number;
 getLevelDecreasePerBlock(world: WorldView): number;
}
class Static_LavaFluid {
static MIN_HEIGHT_TO_REPLACE: number;
}

//net.minecraft.client.sound.SnifferDigSoundInstance
class SnifferDigSoundInstance extends MovingSoundInstance{
 tick(): void;
 canPlay(): boolean;
}
class Static_SnifferDigSoundInstance {
static field_42931: number;
static field_42932: number;
}

//net.minecraft.client.sound.EntityTrackingSoundInstance
class EntityTrackingSoundInstance extends MovingSoundInstance{
 tick(): void;
 canPlay(): boolean;
}

//net.minecraft.client.sound.MinecartInsideSoundInstance
class MinecartInsideSoundInstance extends MovingSoundInstance{
 tick(): void;
 shouldAlwaysPlay(): boolean;
 canPlay(): boolean;
}
class Static_MinecartInsideSoundInstance {
static field_33006: number;
static field_33007: number;
}

//net.minecraft.client.sound.AmbientSoundLoops$MusicLoop
class AmbientSoundLoops_MusicLoop extends MovingSoundInstance{
 tick(): void;
}

//net.minecraft.client.sound.AbstractBeeSoundInstance
class AbstractBeeSoundInstance extends MovingSoundInstance{
 tick(): void;
 shouldAlwaysPlay(): boolean;
 canPlay(): boolean;
}
class Static_AbstractBeeSoundInstance {
static field_32991: number;
static field_32992: number;
static field_32993: number;
}

//net.minecraft.client.sound.GuardianAttackSoundInstance
class GuardianAttackSoundInstance extends MovingSoundInstance{
 tick(): void;
 canPlay(): boolean;
}
class Static_GuardianAttackSoundInstance {
static BASE_VOLUME: number;
static BEAM_PROGRESS_VOLUME_MULTIPLIER: number;
static BASE_PITCH: number;
static BEAM_PROGRESS_PITCH_MULTIPLIER: number;
}

//net.minecraft.client.sound.BiomeEffectSoundPlayer$MusicLoop
class BiomeEffectSoundPlayer_MusicLoop extends MovingSoundInstance{
 tick(): void;
 fadeIn(): void;
 fadeOut(): void;
}

//net.minecraft.client.sound.MovingMinecartSoundInstance
class MovingMinecartSoundInstance extends MovingSoundInstance{
 tick(): void;
 shouldAlwaysPlay(): boolean;
 canPlay(): boolean;
}
class Static_MovingMinecartSoundInstance {
static field_33001: number;
static field_33002: number;
static field_33003: number;
static field_33004: number;
static field_33005: number;
}

//net.minecraft.client.sound.AmbientSoundLoops$Underwater
class AmbientSoundLoops_Underwater extends MovingSoundInstance{
 tick(): void;
}
class Static_AmbientSoundLoops_Underwater {
static MAX_TRANSITION_TIMER: number;
}

//net.minecraft.client.sound.ElytraSoundInstance
class ElytraSoundInstance extends MovingSoundInstance{
 tick(): void;
}
class Static_ElytraSoundInstance {
static field_32996: number;
}

//net.minecraft.item.AutomaticItemPlacementContext
class AutomaticItemPlacementContext extends ItemPlacementContext{
 getPlayerYaw(): number;
 getBlockPos(): BlockPos;
 shouldCancelInteraction(): boolean;
 getHorizontalPlayerFacing(): Direction;
 canPlace(): boolean;
 getPlayerLookDirection(): Direction;
 getPlacementDirections(): Direction[];
 canReplaceExisting(): boolean;
}

//net.minecraft.block.WitherRoseBlock
class WitherRoseBlock extends FlowerBlock{
 randomDisplayTick(state: BlockState,world: World,pos: BlockPos,random: Random): void;
 onEntityCollision(state: BlockState,world: World,pos: BlockPos,entity: Entity): void;
}

//net.minecraft.block.entity.FurnaceBlockEntity
class FurnaceBlockEntity extends AbstractFurnaceBlockEntity{
}

//net.minecraft.block.entity.SmokerBlockEntity
class SmokerBlockEntity extends AbstractFurnaceBlockEntity{
}

//net.minecraft.block.entity.BlastFurnaceBlockEntity
class BlastFurnaceBlockEntity extends AbstractFurnaceBlockEntity{
}

//net.minecraft.entity.projectile.thrown.ExperienceBottleEntity
class ExperienceBottleEntity extends ThrownItemEntity{
}

//net.minecraft.entity.projectile.thrown.SnowballEntity
class SnowballEntity extends ThrownItemEntity{
 handleStatus(status: byte): void;
}

//net.minecraft.entity.projectile.thrown.EggEntity
class EggEntity extends ThrownItemEntity{
 handleStatus(status: byte): void;
}

//net.minecraft.entity.projectile.thrown.EnderPearlEntity
class EnderPearlEntity extends ThrownItemEntity{
 tick(): void;
 moveToWorld(destination: ServerWorld): Entity;
}

//net.minecraft.entity.projectile.SmallFireballEntity
class SmallFireballEntity extends AbstractFireballEntity{
 damage(source: DamageSource,amount: number): boolean;
 canHit(): boolean;
}

//net.minecraft.entity.projectile.FireballEntity
class FireballEntity extends AbstractFireballEntity{
 writeCustomDataToNbt(nbt: NbtCompound): void;
 readCustomDataFromNbt(nbt: NbtCompound): void;
}

//net.minecraft.loot.entry.LootTableEntry$Serializer
class LootTableEntry_Serializer extends LeafEntry_Serializer{
 addEntryFields(jsonObject: JsonObject,leafEntry: LeafEntry,jsonSerializationContext: JsonSerializationContext): void;
 addEntryFields(json: JsonObject,entry: LootPoolEntry,context: JsonSerializationContext): void;
 addEntryFields(jsonObject: JsonObject,lootTableEntry: LootTableEntry,jsonSerializationContext: JsonSerializationContext): void;
}

//net.minecraft.loot.entry.EmptyEntry$Serializer
class EmptyEntry_Serializer extends LeafEntry_Serializer{
 fromJson(jsonObject: JsonObject,jsonDeserializationContext: JsonDeserializationContext,i: number,j: number,lootConditions: LootCondition[],lootFunctions: LootFunction[]): EmptyEntry;
 fromJson(entryJson: JsonObject,context: JsonDeserializationContext,weight: number,quality: number,conditions: LootCondition[],functions: LootFunction[]): LeafEntry;
}

//net.minecraft.loot.entry.ItemEntry$Serializer
class ItemEntry_Serializer extends LeafEntry_Serializer{
 addEntryFields(jsonObject: JsonObject,leafEntry: LeafEntry,jsonSerializationContext: JsonSerializationContext): void;
 addEntryFields(json: JsonObject,entry: LootPoolEntry,context: JsonSerializationContext): void;
 addEntryFields(jsonObject: JsonObject,itemEntry: ItemEntry,jsonSerializationContext: JsonSerializationContext): void;
}

//net.minecraft.loot.entry.DynamicEntry$Serializer
class DynamicEntry_Serializer extends LeafEntry_Serializer{
 addEntryFields(jsonObject: JsonObject,leafEntry: LeafEntry,jsonSerializationContext: JsonSerializationContext): void;
 addEntryFields(json: JsonObject,entry: LootPoolEntry,context: JsonSerializationContext): void;
 addEntryFields(jsonObject: JsonObject,dynamicEntry: DynamicEntry,jsonSerializationContext: JsonSerializationContext): void;
}

//net.minecraft.loot.entry.TagEntry$Serializer
class TagEntry_Serializer extends LeafEntry_Serializer{
 addEntryFields(jsonObject: JsonObject,leafEntry: LeafEntry,jsonSerializationContext: JsonSerializationContext): void;
 addEntryFields(json: JsonObject,entry: LootPoolEntry,context: JsonSerializationContext): void;
 addEntryFields(jsonObject: JsonObject,tagEntry: TagEntry,jsonSerializationContext: JsonSerializationContext): void;
}

//net.minecraft.block.entity.TrappedChestBlockEntity
class TrappedChestBlockEntity extends ChestBlockEntity{
}

//net.minecraft.world.gen.feature.WaterloggedVegetationPatchFeature
class WaterloggedVegetationPatchFeature extends VegetationPatchFeature{
}
class Static_WaterloggedVegetationPatchFeature {
static isSolidBlockSide(world: StructureWorldAccess,pos: BlockPos,mutablePos: BlockPos_Mutable,direction: Direction): boolean;
static isSolidBlockAroundPos(world: StructureWorldAccess,positions: Set,pos: BlockPos,mutablePos: BlockPos_Mutable): boolean;
}

//net.minecraft.world.gen.feature.CoralTreeFeature
class CoralTreeFeature extends CoralFeature{
}

//net.minecraft.world.gen.feature.CoralMushroomFeature
class CoralMushroomFeature extends CoralFeature{
}

//net.minecraft.world.gen.feature.CoralClawFeature
class CoralClawFeature extends CoralFeature{
}

//net.minecraft.world.gen.feature.HugeBrownMushroomFeature
class HugeBrownMushroomFeature extends HugeMushroomFeature{
}

//net.minecraft.world.gen.feature.HugeRedMushroomFeature
class HugeRedMushroomFeature extends HugeMushroomFeature{
}

//net.minecraft.structure.pool.LegacySinglePoolElement
class LegacySinglePoolElement extends SinglePoolElement{
 toString(): string;
 getType(): StructurePoolElementType;
}
class Static_LegacySinglePoolElement {
static method_28874(instance: RecordCodecBuilder_Instance): App;
static CODEC: Codec;
}

//net.minecraft.world.biome.BiomeEffects$GrassColorModifier$1


//net.minecraft.world.biome.BiomeEffects$GrassColorModifier$2


//net.minecraft.world.biome.BiomeEffects$GrassColorModifier$3


//net.minecraft.world.biome.Biome$TemperatureModifier$2


//net.minecraft.world.biome.Biome$TemperatureModifier$1


//net.minecraft.util.math.Direction$Axis$3


//net.minecraft.util.math.Direction$Axis$2


//net.minecraft.util.math.Direction$Axis$1


//net.minecraft.entity.ai.pathing.AmphibiousPathNodeMaker
class AmphibiousPathNodeMaker extends LandPathNodeMaker{
 clear(): void;
 init(cachedWorld: ChunkCache,entity: MobEntity): void;
 getNode(x: number,y: number,z: number): TargetPathNode;
 getSuccessors(successors: PathNode[],node: PathNode): number;
 getDefaultNodeType(world: BlockView,x: number,y: number,z: number): PathNodeType;
 getStart(): PathNode;
}

//net.minecraft.entity.ai.pathing.BirdPathNodeMaker
class BirdPathNodeMaker extends LandPathNodeMaker{
 clear(): void;
 init(cachedWorld: ChunkCache,entity: MobEntity): void;
 getNode(x: number,y: number,z: number): TargetPathNode;
 getNodeType(world: BlockView,x: number,y: number,z: number,mob: MobEntity): PathNodeType;
 getSuccessors(successors: PathNode[],node: PathNode): number;
 getDefaultNodeType(world: BlockView,x: number,y: number,z: number): PathNodeType;
 getStart(): PathNode;
}
class Static_BirdPathNodeMaker {
static field_41681: number;
static field_41682: number;
}

//net.minecraft.item.PickaxeItem
class PickaxeItem extends MiningToolItem{
}

//net.minecraft.item.ShovelItem
class ShovelItem extends MiningToolItem{
 useOnBlock(context: ItemUsageContext): ActionResult;
}
class Static_ShovelItem {
static method_20281(itemUsageContext: ItemUsageContext,p: PlayerEntity): void;
static PATH_STATES: Map;
}

//net.minecraft.item.HoeItem
class HoeItem extends MiningToolItem{
 useOnBlock(context: ItemUsageContext): ActionResult;
}
class Static_HoeItem {
static method_36984(blockState: BlockState,context: ItemUsageContext): void;
static method_20279(itemUsageContext: ItemUsageContext,p: PlayerEntity): void;
static createTillAction(result: BlockState): Consumer;
static method_36986(blockState: BlockState,itemConvertible: ItemConvertible,context: ItemUsageContext): void;
static canTillFarmland(context: ItemUsageContext): boolean;
static method_36989(itemUsageContext: ItemUsageContext): boolean;
static createTillAndDropAction(result: BlockState,droppedItem: ItemConvertible): Consumer;
static TILLING_ACTIONS: Map;
}

//net.minecraft.item.AxeItem
class AxeItem extends MiningToolItem{
 useOnBlock(context: ItemUsageContext): ActionResult;
}
class Static_AxeItem {
static method_34717(blockState: BlockState,block: Block): BlockState;
static method_34718(blockState: BlockState,block: Block): BlockState;
static method_20269(itemUsageContext: ItemUsageContext,p: PlayerEntity): void;
static STRIPPED_BLOCKS: Map;
}

//net.minecraft.block.CalibratedSculkSensorBlock
class CalibratedSculkSensorBlock extends SculkSensorBlock{
 rotate(state: BlockState,rotation: BlockRotation): BlockState;
 getCooldownTime(): number;
 mirror(state: BlockState,mirror: BlockMirror): BlockState;
 getWeakRedstonePower(state: BlockState,world: BlockView,pos: BlockPos,direction: Direction): number;
 getTicker(world: World,state: BlockState,type: BlockEntityType): BlockEntityTicker;
 createBlockEntity(pos: BlockPos,state: BlockState): BlockEntity;
 getPlacementState(ctx: ItemPlacementContext): BlockState;
}
class Static_CalibratedSculkSensorBlock {
static method_49813(worldx: World,pos: BlockPos,statex: BlockState,blockEntity: CalibratedSculkSensorBlockEntity): void;
static FACING: DirectionProperty;
}

//net.minecraft.block.CherryLeavesBlock
class CherryLeavesBlock extends LeavesBlock{
 randomDisplayTick(state: BlockState,world: World,pos: BlockPos,random: Random): void;
}

//net.minecraft.block.FenceBlock
class FenceBlock extends HorizontalConnectingBlock{
 getStateForNeighborUpdate(state: BlockState,direction: Direction,neighborState: BlockState,world: WorldAccess,pos: BlockPos,neighborPos: BlockPos): BlockState;
 canConnect(state: BlockState,neighborIsFullSquare: boolean,dir: Direction): boolean;
 getCameraCollisionShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 canPathfindThrough(state: BlockState,world: BlockView,pos: BlockPos,type: NavigationType): boolean;
 getCullingShape(state: BlockState,world: BlockView,pos: BlockPos): VoxelShape;
 onUse(state: BlockState,world: World,pos: BlockPos,player: PlayerEntity,hand: Hand,hit: BlockHitResult): ActionResult;
 getPlacementState(ctx: ItemPlacementContext): BlockState;
}

//net.minecraft.block.PaneBlock
class PaneBlock extends HorizontalConnectingBlock{
 getStateForNeighborUpdate(state: BlockState,direction: Direction,neighborState: BlockState,world: WorldAccess,pos: BlockPos,neighborPos: BlockPos): BlockState;
 getCameraCollisionShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 isSideInvisible(state: BlockState,stateFrom: BlockState,direction: Direction): boolean;
 getPlacementState(ctx: ItemPlacementContext): BlockState;
 connectsTo(state: BlockState,sideSolidFullSquare: boolean): boolean;
}

//net.minecraft.block.TrappedChestBlock
class TrappedChestBlock extends ChestBlock{
 getStrongRedstonePower(state: BlockState,world: BlockView,pos: BlockPos,direction: Direction): number;
 emitsRedstonePower(state: BlockState): boolean;
 getWeakRedstonePower(state: BlockState,world: BlockView,pos: BlockPos,direction: Direction): number;
 createBlockEntity(pos: BlockPos,state: BlockState): BlockEntity;
}
class Static_TrappedChestBlock {
static method_24181(): BlockEntityType;
}

//net.minecraft.block.DetectorRailBlock
class DetectorRailBlock extends AbstractRailBlock{
 rotate(state: BlockState,rotation: BlockRotation): BlockState;
 getShapeProperty(): Property;
 getStrongRedstonePower(state: BlockState,world: BlockView,pos: BlockPos,direction: Direction): number;
 hasComparatorOutput(state: BlockState): boolean;
 getComparatorOutput(state: BlockState,world: World,pos: BlockPos): number;
 emitsRedstonePower(state: BlockState): boolean;
 onBlockAdded(state: BlockState,world: World,pos: BlockPos,oldState: BlockState,notify: boolean): void;
 onEntityCollision(state: BlockState,world: World,pos: BlockPos,entity: Entity): void;
 scheduledTick(state: BlockState,world: ServerWorld,pos: BlockPos,random: Random): void;
 mirror(state: BlockState,mirror: BlockMirror): BlockState;
 getWeakRedstonePower(state: BlockState,world: BlockView,pos: BlockPos,direction: Direction): number;
}
class Static_DetectorRailBlock {
static method_31644(entity: Entity): boolean;
static method_31643(cart: Entity): boolean;
static SHAPE: EnumProperty;
static POWERED: BooleanProperty;
static SCHEDULED_TICK_DELAY: number;
}

//net.minecraft.block.RailBlock
class RailBlock extends AbstractRailBlock{
 rotate(state: BlockState,rotation: BlockRotation): BlockState;
 getShapeProperty(): Property;
 mirror(state: BlockState,mirror: BlockMirror): BlockState;
}
class Static_RailBlock {
static SHAPE: EnumProperty;
}

//net.minecraft.block.PoweredRailBlock
class PoweredRailBlock extends AbstractRailBlock{
 rotate(state: BlockState,rotation: BlockRotation): BlockState;
 getShapeProperty(): Property;
 mirror(state: BlockState,mirror: BlockMirror): BlockState;
}
class Static_PoweredRailBlock {
static SHAPE: EnumProperty;
static POWERED: BooleanProperty;
}

//net.minecraft.block.WallHangingSignBlock
class WallHangingSignBlock extends AbstractSignBlock{
 rotate(state: BlockState,rotation: BlockRotation): BlockState;
 getStateForNeighborUpdate(state: BlockState,direction: Direction,neighborState: BlockState,world: WorldAccess,pos: BlockPos,neighborPos: BlockPos): BlockState;
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 getRotationDegrees(state: BlockState): number;
 getSidesShape(state: BlockState,world: BlockView,pos: BlockPos): VoxelShape;
 canPathfindThrough(state: BlockState,world: BlockView,pos: BlockPos,type: NavigationType): boolean;
 mirror(state: BlockState,mirror: BlockMirror): BlockState;
 onUse(state: BlockState,world: World,pos: BlockPos,player: PlayerEntity,hand: Hand,hit: BlockHitResult): ActionResult;
 getCollisionShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 getTicker(world: World,state: BlockState,type: BlockEntityType): BlockEntityTicker;
 createBlockEntity(pos: BlockPos,state: BlockState): BlockEntity;
 canAttachAt(state: BlockState,world: WorldView,pos: BlockPos): boolean;
 getTranslationKey(): string;
 getPlacementState(ctx: ItemPlacementContext): BlockState;
 canAttachTo(world: WorldView,state: BlockState,toPos: BlockPos,direction: Direction): boolean;
}
class Static_WallHangingSignBlock {
static FACING: DirectionProperty;
static NORTH_SOUTH_COLLISION_SHAPE: VoxelShape;
static EAST_WEST_COLLISION_SHAPE: VoxelShape;
static NORTH_SOUTH_SHAPE: VoxelShape;
static EAST_WEST_SHAPE: VoxelShape;
static OUTLINE_SHAPES: Map;
}

//net.minecraft.block.HangingSignBlock
class HangingSignBlock extends AbstractSignBlock{
 rotate(state: BlockState,rotation: BlockRotation): BlockState;
 getStateForNeighborUpdate(state: BlockState,direction: Direction,neighborState: BlockState,world: WorldAccess,pos: BlockPos,neighborPos: BlockPos): BlockState;
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 canPlaceAt(state: BlockState,world: WorldView,pos: BlockPos): boolean;
 getRotationDegrees(state: BlockState): number;
 getSidesShape(state: BlockState,world: BlockView,pos: BlockPos): VoxelShape;
 mirror(state: BlockState,mirror: BlockMirror): BlockState;
 onUse(state: BlockState,world: World,pos: BlockPos,player: PlayerEntity,hand: Hand,hit: BlockHitResult): ActionResult;
 getTicker(world: World,state: BlockState,type: BlockEntityType): BlockEntityTicker;
 createBlockEntity(pos: BlockPos,state: BlockState): BlockEntity;
 getPlacementState(ctx: ItemPlacementContext): BlockState;
}
class Static_HangingSignBlock {
static ROTATION: IntProperty;
static ATTACHED: BooleanProperty;
static field_40302: number;
static DEFAULT_SHAPE: VoxelShape;
static SHAPES_FOR_ROTATION: Map;
}

//net.minecraft.block.WallSignBlock
class WallSignBlock extends AbstractSignBlock{
 rotate(state: BlockState,rotation: BlockRotation): BlockState;
 getCenter(state: BlockState): Vec3d;
 getStateForNeighborUpdate(state: BlockState,direction: Direction,neighborState: BlockState,world: WorldAccess,pos: BlockPos,neighborPos: BlockPos): BlockState;
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 canPlaceAt(state: BlockState,world: WorldView,pos: BlockPos): boolean;
 getRotationDegrees(state: BlockState): number;
 mirror(state: BlockState,mirror: BlockMirror): BlockState;
 getTranslationKey(): string;
 getPlacementState(ctx: ItemPlacementContext): BlockState;
}
class Static_WallSignBlock {
static FACING: DirectionProperty;
static field_31282: number;
static field_31283: number;
static field_31284: number;
static FACING_TO_SHAPE: Map;
}

//net.minecraft.block.SignBlock
class SignBlock extends AbstractSignBlock{
 rotate(state: BlockState,rotation: BlockRotation): BlockState;
 getStateForNeighborUpdate(state: BlockState,direction: Direction,neighborState: BlockState,world: WorldAccess,pos: BlockPos,neighborPos: BlockPos): BlockState;
 canPlaceAt(state: BlockState,world: WorldView,pos: BlockPos): boolean;
 getRotationDegrees(state: BlockState): number;
 mirror(state: BlockState,mirror: BlockMirror): BlockState;
 getPlacementState(ctx: ItemPlacementContext): BlockState;
}
class Static_SignBlock {
static ROTATION: IntProperty;
}

//net.minecraft.block.CoralBlock
class CoralBlock extends CoralParentBlock{
 getStateForNeighborUpdate(state: BlockState,direction: Direction,neighborState: BlockState,world: WorldAccess,pos: BlockPos,neighborPos: BlockPos): BlockState;
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 onBlockAdded(state: BlockState,world: World,pos: BlockPos,oldState: BlockState,notify: boolean): void;
 scheduledTick(state: BlockState,world: ServerWorld,pos: BlockPos,random: Random): void;
}
class Static_CoralBlock {
static field_31076: number;
static SHAPE: VoxelShape;
}

//net.minecraft.block.DeadCoralFanBlock
class DeadCoralFanBlock extends CoralParentBlock{
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
}
class Static_DeadCoralFanBlock {
static SHAPE: VoxelShape;
}

//net.minecraft.block.DeadCoralBlock
class DeadCoralBlock extends CoralParentBlock{
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
}
class Static_DeadCoralBlock {
static field_31006: number;
static SHAPE: VoxelShape;
}

//net.minecraft.client.render.RenderPhase$Textures
class RenderPhase_Textures extends RenderPhase_TextureBase{
}
class Static_RenderPhase_Textures {
static create(): RenderPhase_Textures_Builder;
static method_34559(immutableList: ImmutableList): void;
static method_34561(): void;
}

//net.minecraft.client.render.RenderPhase$Texture
class RenderPhase_Texture extends RenderPhase_TextureBase{
 toString(): string;
}
class Static_RenderPhase_Texture {
static method_23563(identifier: Identifier,bl: boolean,bl2: boolean): void;
static method_23567(): void;
}

//net.minecraft.client.render.RenderPhase$Lightmap
class RenderPhase_Lightmap extends RenderPhase_Toggleable{
}
class Static_RenderPhase_Lightmap {
static method_23551(bl: boolean): void;
static method_23552(bl: boolean): void;
}

//net.minecraft.client.render.RenderPhase$Cull
class RenderPhase_Cull extends RenderPhase_Toggleable{
}
class Static_RenderPhase_Cull {
static method_23545(bl: boolean): void;
static method_23546(bl: boolean): void;
}

//net.minecraft.client.render.RenderPhase$Overlay
class RenderPhase_Overlay extends RenderPhase_Toggleable{
}
class Static_RenderPhase_Overlay {
static method_23556(bl: boolean): void;
static method_23555(bl: boolean): void;
}

//net.minecraft.client.render.RenderPhase$OffsetTexturing
class RenderPhase_OffsetTexturing extends RenderPhase_Texturing{
}
class Static_RenderPhase_OffsetTexturing {
static method_23561(f: number,g: number): void;
static method_23562(): void;
}

//net.minecraft.client.render.RenderLayer$MultiPhase
class RenderLayer_MultiPhase extends RenderLayer{
 toString(): string;
 isOutline(): boolean;
 getAffectedOutline(): Optional;
}
class Static_RenderLayer_MultiPhase {
static method_34842(multiPhaseParameters: RenderLayer_MultiPhaseParameters): void;
static method_34843(multiPhaseParameters: RenderLayer_MultiPhaseParameters,texture: Identifier): RenderLayer;
static method_23595(multiPhaseParameters: RenderLayer_MultiPhaseParameters): void;
static method_34844(texture: Identifier,culling: RenderPhase_Cull): RenderLayer;
static CULLING_LAYERS: BiFunction;
}

//net.minecraft.nbt.NbtByteArray
class NbtByteArray extends AbstractNbtList{
 add(i: number,object: Object): void;
 add(i: number,nbtElement: NbtElement): void;
 remove(i: number): Object;
 remove(i: number): NbtElement;
 get(i: number): NbtByte;
 get(index: number): Object;
 equals(o: Object): boolean;
 toString(): string;
 hashCode(): number;
 clear(): void;
 size(): number;
 set(i: number,nbtByte: NbtByte): NbtByte;
 set(i: number,object: Object): Object;
 set(i: number,nbtElement: NbtElement): NbtElement;
 write(output: DataOutput): void;
 accept(visitor: NbtElementVisitor): void;
 getType(): byte;
 copy(): NbtElement;
 setElement(index: number,element: NbtElement): boolean;
 addElement(index: number,element: NbtElement): boolean;
 getSizeInBytes(): number;
 doAccept(visitor: NbtScanner): NbtScanner_Result;
 getNbtType(): NbtType;
 getHeldType(): byte;
 getByteArray(): byte[];
 method_10531(i: number,nbtByte: NbtByte): void;
 method_10536(i: number): NbtByte;
}
class Static_NbtByteArray {
static toArray(list: List): byte[];
static SIZE: number;
static TYPE: NbtType;
}

//net.minecraft.nbt.NbtList
class NbtList extends AbstractNbtList{
 add(i: number,object: Object): void;
 add(i: number,nbtElement: NbtElement): void;
 remove(i: number): NbtElement;
 remove(i: number): Object;
 get(i: number): NbtElement;
 get(index: number): Object;
 equals(o: Object): boolean;
 toString(): string;
 hashCode(): number;
 getShort(index: number): short;
 getInt(index: number): number;
 getFloat(index: number): number;
 getDouble(index: number): number;
 clear(): void;
 isEmpty(): boolean;
 size(): number;
 set(i: number,nbtElement: NbtElement): NbtElement;
 set(i: number,object: Object): Object;
 write(output: DataOutput): void;
 accept(visitor: NbtElementVisitor): void;
 getType(): byte;
 copy(): NbtElement;
 copy(): NbtList;
 getString(index: number): string;
 setElement(index: number,element: NbtElement): boolean;
 addElement(index: number,element: NbtElement): boolean;
 getCompound(index: number): NbtCompound;
 getList(index: number): NbtList;
 getSizeInBytes(): number;
 doAccept(visitor: NbtScanner): NbtScanner_Result;
 getNbtType(): NbtType;
 getLongArray(index: number): long[];
 getIntArray(index: number): number[];
 getHeldType(): byte;
}
class Static_NbtList {
static SIZE: number;
static TYPE: NbtType;
}

//net.minecraft.nbt.NbtLongArray
class NbtLongArray extends AbstractNbtList{
 add(i: number,nbtElement: NbtElement): void;
 add(i: number,nbtLong: NbtLong): void;
 add(i: number,object: Object): void;
 remove(i: number): NbtLong;
 remove(i: number): Object;
 remove(i: number): NbtElement;
 get(i: number): NbtLong;
 get(index: number): Object;
 equals(o: Object): boolean;
 toString(): string;
 hashCode(): number;
 clear(): void;
 size(): number;
 set(i: number,nbtElement: NbtElement): NbtElement;
 set(i: number,object: Object): Object;
 write(output: DataOutput): void;
 accept(visitor: NbtElementVisitor): void;
 getType(): byte;
 copy(): NbtLongArray;
 copy(): NbtElement;
 setElement(index: number,element: NbtElement): boolean;
 addElement(index: number,element: NbtElement): boolean;
 getSizeInBytes(): number;
 doAccept(visitor: NbtScanner): NbtScanner_Result;
 getNbtType(): NbtType;
 getLongArray(): long[];
 getHeldType(): byte;
 method_10606(i: number,nbtLong: NbtLong): NbtLong;
}
class Static_NbtLongArray {
static toArray(list: List): long[];
static SIZE: number;
static TYPE: NbtType;
}

//net.minecraft.nbt.NbtIntArray
class NbtIntArray extends AbstractNbtList{
 add(i: number,object: Object): void;
 add(i: number,nbtElement: NbtElement): void;
 add(i: number,nbtInt: NbtInt): void;
 remove(i: number): Object;
 remove(i: number): NbtInt;
 remove(i: number): NbtElement;
 get(i: number): NbtInt;
 get(index: number): Object;
 equals(o: Object): boolean;
 toString(): string;
 hashCode(): number;
 clear(): void;
 size(): number;
 set(i: number,nbtElement: NbtElement): NbtElement;
 set(i: number,object: Object): Object;
 set(i: number,nbtInt: NbtInt): NbtInt;
 write(output: DataOutput): void;
 accept(visitor: NbtElementVisitor): void;
 getType(): byte;
 copy(): NbtElement;
 copy(): NbtIntArray;
 setElement(index: number,element: NbtElement): boolean;
 addElement(index: number,element: NbtElement): boolean;
 getSizeInBytes(): number;
 doAccept(visitor: NbtScanner): NbtScanner_Result;
 getNbtType(): NbtType;
 getIntArray(): number[];
 getHeldType(): byte;
}
class Static_NbtIntArray {
static toArray(list: List): number[];
static SIZE: number;
static TYPE: NbtType;
}

//net.minecraft.block.FlowerPotBlock
class FlowerPotBlock extends Block{
 getContent(): Block;
 getStateForNeighborUpdate(state: BlockState,direction: Direction,neighborState: BlockState,world: WorldAccess,pos: BlockPos,neighborPos: BlockPos): BlockState;
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 canPathfindThrough(state: BlockState,world: BlockView,pos: BlockPos,type: NavigationType): boolean;
 onUse(state: BlockState,world: World,pos: BlockPos,player: PlayerEntity,hand: Hand,hit: BlockHitResult): ActionResult;
 getRenderType(state: BlockState): BlockRenderType;
 getPickStack(world: BlockView,pos: BlockPos,state: BlockState): ItemStack;
}
class Static_FlowerPotBlock {
static CONTENT_TO_POTTED: Map;
static field_31095: number;
static SHAPE: VoxelShape;
}

//net.minecraft.block.CraftingTableBlock
class CraftingTableBlock extends Block{
 createScreenHandlerFactory(state: BlockState,world: World,pos: BlockPos): NamedScreenHandlerFactory;
 onUse(state: BlockState,world: World,pos: BlockPos,player: PlayerEntity,hand: Hand,hit: BlockHitResult): ActionResult;
}
class Static_CraftingTableBlock {
static method_17466(world: World,blockPos: BlockPos,syncId: number,inventory: PlayerInventory,player: PlayerEntity): ScreenHandler;
static TITLE: Text;
}

//net.minecraft.block.AirBlock
class AirBlock extends Block{
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 getRenderType(state: BlockState): BlockRenderType;
}

//net.minecraft.block.RedstoneBlock
class RedstoneBlock extends Block{
 emitsRedstonePower(state: BlockState): boolean;
 getWeakRedstonePower(state: BlockState,world: BlockView,pos: BlockPos,direction: Direction): number;
}

//net.minecraft.block.SnowyBlock
class SnowyBlock extends Block{
 getStateForNeighborUpdate(state: BlockState,direction: Direction,neighborState: BlockState,world: WorldAccess,pos: BlockPos,neighborPos: BlockPos): BlockState;
 getPlacementState(ctx: ItemPlacementContext): BlockState;
}
class Static_SnowyBlock {
static isSnow(state: BlockState): boolean;
static SNOWY: BooleanProperty;
}

//net.minecraft.block.AbstractPressurePlateBlock
class AbstractPressurePlateBlock extends Block{
 getStateForNeighborUpdate(state: BlockState,direction: Direction,neighborState: BlockState,world: WorldAccess,pos: BlockPos,neighborPos: BlockPos): BlockState;
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 canPlaceAt(state: BlockState,world: WorldView,pos: BlockPos): boolean;
 getStrongRedstonePower(state: BlockState,world: BlockView,pos: BlockPos,direction: Direction): number;
 emitsRedstonePower(state: BlockState): boolean;
 onStateReplaced(state: BlockState,world: World,pos: BlockPos,newState: BlockState,moved: boolean): void;
 onEntityCollision(state: BlockState,world: World,pos: BlockPos,entity: Entity): void;
 scheduledTick(state: BlockState,world: ServerWorld,pos: BlockPos,random: Random): void;
 getWeakRedstonePower(state: BlockState,world: BlockView,pos: BlockPos,direction: Direction): number;
 canMobSpawnInside(state: BlockState): boolean;
}
class Static_AbstractPressurePlateBlock {
static method_52209(entity: Entity): boolean;
static getEntityCount(world: World,box: Box,entityClass: Class): number;
static PRESSED_SHAPE: VoxelShape;
static DEFAULT_SHAPE: VoxelShape;
static BOX: Box;
}

//net.minecraft.block.WetSpongeBlock
class WetSpongeBlock extends Block{
 randomDisplayTick(state: BlockState,world: World,pos: BlockPos,random: Random): void;
 onBlockAdded(state: BlockState,world: World,pos: BlockPos,oldState: BlockState,notify: boolean): void;
}

//net.minecraft.block.ChorusFlowerBlock
class ChorusFlowerBlock extends Block{
 getStateForNeighborUpdate(state: BlockState,direction: Direction,neighborState: BlockState,world: WorldAccess,pos: BlockPos,neighborPos: BlockPos): BlockState;
 canPlaceAt(state: BlockState,world: WorldView,pos: BlockPos): boolean;
 hasRandomTicks(state: BlockState): boolean;
 scheduledTick(state: BlockState,world: ServerWorld,pos: BlockPos,random: Random): void;
 onProjectileHit(world: World,state: BlockState,hit: BlockHitResult,projectile: ProjectileEntity): void;
 randomTick(state: BlockState,world: ServerWorld,pos: BlockPos,random: Random): void;
}
class Static_ChorusFlowerBlock {
static generate(world: WorldAccess,pos: BlockPos,random: Random,rootPos: BlockPos,size: number,layer: number): void;
static generate(world: WorldAccess,pos: BlockPos,random: Random,size: number): void;
static isSurroundedByAir(world: WorldView,pos: BlockPos,exceptDirection: Direction): boolean;
static MAX_AGE: number;
static AGE: IntProperty;
}

//net.minecraft.block.PillarBlock
class PillarBlock extends Block{
 rotate(state: BlockState,rotation: BlockRotation): BlockState;
 getPlacementState(ctx: ItemPlacementContext): BlockState;
}
class Static_PillarBlock {
static changeRotation(state: BlockState,rotation: BlockRotation): BlockState;
static AXIS: EnumProperty;
}

//net.minecraft.block.MagmaBlock
class MagmaBlock extends Block{
 getStateForNeighborUpdate(state: BlockState,direction: Direction,neighborState: BlockState,world: WorldAccess,pos: BlockPos,neighborPos: BlockPos): BlockState;
 onBlockAdded(state: BlockState,world: World,pos: BlockPos,oldState: BlockState,notify: boolean): void;
 scheduledTick(state: BlockState,world: ServerWorld,pos: BlockPos,random: Random): void;
 onSteppedOn(world: World,pos: BlockPos,state: BlockState,entity: Entity): void;
}
class Static_MagmaBlock {
static SCHEDULED_TICK_DELAY: number;
}

//net.minecraft.block.ConnectingBlock
class ConnectingBlock extends Block{
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 isTransparent(state: BlockState,world: BlockView,pos: BlockPos): boolean;
}
class Static_ConnectingBlock {
static method_10369(directions: EnumMap): void;
static FACINGS: Direction[];
static NORTH: BooleanProperty;
static EAST: BooleanProperty;
static SOUTH: BooleanProperty;
static WEST: BooleanProperty;
static UP: BooleanProperty;
static DOWN: BooleanProperty;
static FACING_PROPERTIES: Map;
}

//net.minecraft.block.TorchBlock
class TorchBlock extends Block{
 getStateForNeighborUpdate(state: BlockState,direction: Direction,neighborState: BlockState,world: WorldAccess,pos: BlockPos,neighborPos: BlockPos): BlockState;
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 canPlaceAt(state: BlockState,world: WorldView,pos: BlockPos): boolean;
 randomDisplayTick(state: BlockState,world: World,pos: BlockPos,random: Random): void;
}
class Static_TorchBlock {
static field_31265: number;
static BOUNDING_SHAPE: VoxelShape;
}

//net.minecraft.block.TargetBlock
class TargetBlock extends Block{
 emitsRedstonePower(state: BlockState): boolean;
 onBlockAdded(state: BlockState,world: World,pos: BlockPos,oldState: BlockState,notify: boolean): void;
 scheduledTick(state: BlockState,world: ServerWorld,pos: BlockPos,random: Random): void;
 onProjectileHit(world: World,state: BlockState,hit: BlockHitResult,projectile: ProjectileEntity): void;
 getWeakRedstonePower(state: BlockState,world: BlockView,pos: BlockPos,direction: Direction): number;
}
class Static_TargetBlock {
static trigger(world: WorldAccess,state: BlockState,hitResult: BlockHitResult,entity: Entity): number;
static calculatePower(hitResult: BlockHitResult,pos: Vec3d): number;
static setPower(world: WorldAccess,state: BlockState,power: number,pos: BlockPos,delay: number): void;
static POWER: IntProperty;
static RECOVERABLE_POWER_DELAY: number;
static REGULAR_POWER_DELAY: number;
}

//net.minecraft.block.TntBlock
class TntBlock extends Block{
 onDestroyedByExplosion(world: World,pos: BlockPos,explosion: Explosion): void;
 shouldDropItemsOnExplosion(explosion: Explosion): boolean;
 onBlockAdded(state: BlockState,world: World,pos: BlockPos,oldState: BlockState,notify: boolean): void;
 onProjectileHit(world: World,state: BlockState,hit: BlockHitResult,projectile: ProjectileEntity): void;
 neighborUpdate(state: BlockState,world: World,pos: BlockPos,sourceBlock: Block,sourcePos: BlockPos,notify: boolean): void;
 onBreak(world: World,pos: BlockPos,state: BlockState,player: PlayerEntity): void;
 onUse(state: BlockState,world: World,pos: BlockPos,player: PlayerEntity,hand: Hand,hit: BlockHitResult): ActionResult;
}
class Static_TntBlock {
static method_20292(hand: Hand,playerx: PlayerEntity): void;
static primeTnt(world: World,pos: BlockPos): void;
static primeTnt(world: World,pos: BlockPos,igniter: LivingEntity): void;
static UNSTABLE: BooleanProperty;
}

//net.minecraft.block.SnifferEggBlock
class SnifferEggBlock extends Block{
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 canPathfindThrough(state: BlockState,world: BlockView,pos: BlockPos,type: NavigationType): boolean;
 onBlockAdded(state: BlockState,world: World,pos: BlockPos,oldState: BlockState,notify: boolean): void;
 scheduledTick(state: BlockState,world: ServerWorld,pos: BlockPos,random: Random): void;
 getHatchStage(state: BlockState): number;
}
class Static_SnifferEggBlock {
static isAboveHatchBooster(world: BlockView,pos: BlockPos): boolean;
static FINAL_HATCH_STAGE: number;
static HATCH: IntProperty;
static HATCHING_TIME: number;
static BOOSTED_HATCHING_TIME: number;
static MAX_RANDOM_CRACK_TIME_OFFSET: number;
static SHAPE: VoxelShape;
}

//net.minecraft.block.SoulSandBlock
class SoulSandBlock extends Block{
 getStateForNeighborUpdate(state: BlockState,direction: Direction,neighborState: BlockState,world: WorldAccess,pos: BlockPos,neighborPos: BlockPos): BlockState;
 getAmbientOcclusionLightLevel(state: BlockState,world: BlockView,pos: BlockPos): number;
 getCameraCollisionShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 getSidesShape(state: BlockState,world: BlockView,pos: BlockPos): VoxelShape;
 canPathfindThrough(state: BlockState,world: BlockView,pos: BlockPos,type: NavigationType): boolean;
 onBlockAdded(state: BlockState,world: World,pos: BlockPos,oldState: BlockState,notify: boolean): void;
 scheduledTick(state: BlockState,world: ServerWorld,pos: BlockPos,random: Random): void;
 getCollisionShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
}
class Static_SoulSandBlock {
static COLLISION_SHAPE: VoxelShape;
static SCHEDULED_TICK_DELAY: number;
}

//net.minecraft.block.CobwebBlock
class CobwebBlock extends Block{
 onEntityCollision(state: BlockState,world: World,pos: BlockPos,entity: Entity): void;
}

//net.minecraft.block.EndPortalFrameBlock
class EndPortalFrameBlock extends Block{
 rotate(state: BlockState,rotation: BlockRotation): BlockState;
 hasSidedTransparency(state: BlockState): boolean;
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 hasComparatorOutput(state: BlockState): boolean;
 getComparatorOutput(state: BlockState,world: World,pos: BlockPos): number;
 canPathfindThrough(state: BlockState,world: BlockView,pos: BlockPos,type: NavigationType): boolean;
 mirror(state: BlockState,mirror: BlockMirror): BlockState;
 getPlacementState(ctx: ItemPlacementContext): BlockState;
}
class Static_EndPortalFrameBlock {
static getCompletedFramePattern(): BlockPattern;
static FACING: DirectionProperty;
static EYE: BooleanProperty;
static FRAME_SHAPE: VoxelShape;
static EYE_SHAPE: VoxelShape;
static FRAME_WITH_EYE_SHAPE: VoxelShape;
static COMPLETED_FRAME: BlockPattern;
}

//net.minecraft.block.StonecutterBlock
class StonecutterBlock extends Block{
 rotate(state: BlockState,rotation: BlockRotation): BlockState;
 hasSidedTransparency(state: BlockState): boolean;
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 canPathfindThrough(state: BlockState,world: BlockView,pos: BlockPos,type: NavigationType): boolean;
 mirror(state: BlockState,mirror: BlockMirror): BlockState;
 createScreenHandlerFactory(state: BlockState,world: World,pos: BlockPos): NamedScreenHandlerFactory;
 onUse(state: BlockState,world: World,pos: BlockPos,player: PlayerEntity,hand: Hand,hit: BlockHitResult): ActionResult;
 getRenderType(state: BlockState): BlockRenderType;
 getPlacementState(ctx: ItemPlacementContext): BlockState;
}
class Static_StonecutterBlock {
static method_17896(world: World,blockPos: BlockPos,syncId: number,playerInventory: PlayerInventory,player: PlayerEntity): ScreenHandler;
static TITLE: Text;
static FACING: DirectionProperty;
static SHAPE: VoxelShape;
}

//net.minecraft.block.DoorBlock
class DoorBlock extends Block{
 isOpen(state: BlockState): boolean;
 rotate(state: BlockState,rotation: BlockRotation): BlockState;
 getStateForNeighborUpdate(state: BlockState,direction: Direction,neighborState: BlockState,world: WorldAccess,pos: BlockPos,neighborPos: BlockPos): BlockState;
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 canPlaceAt(state: BlockState,world: WorldView,pos: BlockPos): boolean;
 getRenderingSeed(state: BlockState,pos: BlockPos): long;
 canPathfindThrough(state: BlockState,world: BlockView,pos: BlockPos,type: NavigationType): boolean;
 mirror(state: BlockState,mirror: BlockMirror): BlockState;
 neighborUpdate(state: BlockState,world: World,pos: BlockPos,sourceBlock: Block,sourcePos: BlockPos,notify: boolean): void;
 onBreak(world: World,pos: BlockPos,state: BlockState,player: PlayerEntity): void;
 onUse(state: BlockState,world: World,pos: BlockPos,player: PlayerEntity,hand: Hand,hit: BlockHitResult): ActionResult;
 setOpen(entity: Entity,world: World,state: BlockState,pos: BlockPos,open: boolean): void;
 getPlacementState(ctx: ItemPlacementContext): BlockState;
 onPlaced(world: World,pos: BlockPos,state: BlockState,placer: LivingEntity,itemStack: ItemStack): void;
 getBlockSetType(): BlockSetType;
}
class Static_DoorBlock {
static canOpenByHand(world: World,pos: BlockPos): boolean;
static canOpenByHand(state: BlockState): boolean;
static FACING: DirectionProperty;
static OPEN: BooleanProperty;
static HINGE: EnumProperty;
static POWERED: BooleanProperty;
static HALF: EnumProperty;
static field_31083: number;
static NORTH_SHAPE: VoxelShape;
static SOUTH_SHAPE: VoxelShape;
static EAST_SHAPE: VoxelShape;
static WEST_SHAPE: VoxelShape;
}

//net.minecraft.block.FrogspawnBlock
class FrogspawnBlock extends Block{
 getStateForNeighborUpdate(state: BlockState,direction: Direction,neighborState: BlockState,world: WorldAccess,pos: BlockPos,neighborPos: BlockPos): BlockState;
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 canPlaceAt(state: BlockState,world: WorldView,pos: BlockPos): boolean;
 onBlockAdded(state: BlockState,world: World,pos: BlockPos,oldState: BlockState,notify: boolean): void;
 onEntityCollision(state: BlockState,world: World,pos: BlockPos,entity: Entity): void;
 scheduledTick(state: BlockState,world: ServerWorld,pos: BlockPos,random: Random): void;
}
class Static_FrogspawnBlock {
static getHatchTime(random: Random): number;
static canLayAt(world: BlockView,pos: BlockPos): boolean;
static setHatchTimeRange(min: number,max: number): void;
static resetHatchTimeRange(): void;
static MIN_TADPOLES: number;
static MAX_TADPOLES: number;
static MIN_HATCH_TIME: number;
static MAX_HATCH_TIME: number;
static SHAPE: VoxelShape;
static minHatchTime: number;
static maxHatchTime: number;
}

//net.minecraft.block.StructureVoidBlock
class StructureVoidBlock extends Block{
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 getAmbientOcclusionLightLevel(state: BlockState,world: BlockView,pos: BlockPos): number;
 getRenderType(state: BlockState): BlockRenderType;
}
class Static_StructureVoidBlock {
static field_31257: number;
static SHAPE: VoxelShape;
}

//net.minecraft.block.HorizontalFacingBlock
class HorizontalFacingBlock extends Block{
 rotate(state: BlockState,rotation: BlockRotation): BlockState;
 mirror(state: BlockState,mirror: BlockMirror): BlockState;
}
class Static_HorizontalFacingBlock {
static FACING: DirectionProperty;
}

//net.minecraft.block.CactusBlock
class CactusBlock extends Block{
 getStateForNeighborUpdate(state: BlockState,direction: Direction,neighborState: BlockState,world: WorldAccess,pos: BlockPos,neighborPos: BlockPos): BlockState;
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 canPlaceAt(state: BlockState,world: WorldView,pos: BlockPos): boolean;
 canPathfindThrough(state: BlockState,world: BlockView,pos: BlockPos,type: NavigationType): boolean;
 onEntityCollision(state: BlockState,world: World,pos: BlockPos,entity: Entity): void;
 scheduledTick(state: BlockState,world: ServerWorld,pos: BlockPos,random: Random): void;
 randomTick(state: BlockState,world: ServerWorld,pos: BlockPos,random: Random): void;
 getCollisionShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
}
class Static_CactusBlock {
static AGE: IntProperty;
static MAX_AGE: number;
static field_31045: number;
static COLLISION_SHAPE: VoxelShape;
static OUTLINE_SHAPE: VoxelShape;
}

//net.minecraft.block.BarrierBlock
class BarrierBlock extends Block{
 isTransparent(state: BlockState,world: BlockView,pos: BlockPos): boolean;
 getAmbientOcclusionLightLevel(state: BlockState,world: BlockView,pos: BlockPos): number;
 getRenderType(state: BlockState): BlockRenderType;
}

//net.minecraft.block.VineBlock
class VineBlock extends Block{
 rotate(state: BlockState,rotation: BlockRotation): BlockState;
 getStateForNeighborUpdate(state: BlockState,direction: Direction,neighborState: BlockState,world: WorldAccess,pos: BlockPos,neighborPos: BlockPos): BlockState;
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 canPlaceAt(state: BlockState,world: WorldView,pos: BlockPos): boolean;
 isTransparent(state: BlockState,world: BlockView,pos: BlockPos): boolean;
 canReplace(state: BlockState,context: ItemPlacementContext): boolean;
 randomTick(state: BlockState,world: ServerWorld,pos: BlockPos,random: Random): void;
 mirror(state: BlockState,mirror: BlockMirror): BlockState;
 getPlacementState(ctx: ItemPlacementContext): BlockState;
}
class Static_VineBlock {
static getFacingProperty(direction: Direction): BooleanProperty;
static shouldConnectTo(world: BlockView,pos: BlockPos,direction: Direction): boolean;
static getShapeForState(state: BlockState): VoxelShape;
static method_10826(entry: Map_Entry): boolean;
static UP: BooleanProperty;
static NORTH: BooleanProperty;
static EAST: BooleanProperty;
static SOUTH: BooleanProperty;
static WEST: BooleanProperty;
static FACING_PROPERTIES: Map;
static field_31275: number;
static UP_SHAPE: VoxelShape;
static EAST_SHAPE: VoxelShape;
static WEST_SHAPE: VoxelShape;
static SOUTH_SHAPE: VoxelShape;
static NORTH_SHAPE: VoxelShape;
}

//net.minecraft.block.SpongeBlock
class SpongeBlock extends Block{
 onBlockAdded(state: BlockState,world: World,pos: BlockPos,oldState: BlockState,notify: boolean): void;
 neighborUpdate(state: BlockState,world: World,pos: BlockPos,sourceBlock: Block,sourcePos: BlockPos,notify: boolean): void;
}
class Static_SpongeBlock {
static method_49829(blockPos: BlockPos,world: World,currentPos: BlockPos): boolean;
static method_49830(currentPos: BlockPos,queuer: Consumer): void;
static field_31250: number;
static field_31251: number;
static field_43257: Direction[];
}

//net.minecraft.block.NetherPortalBlock
class NetherPortalBlock extends Block{
 rotate(state: BlockState,rotation: BlockRotation): BlockState;
 getStateForNeighborUpdate(state: BlockState,direction: Direction,neighborState: BlockState,world: WorldAccess,pos: BlockPos,neighborPos: BlockPos): BlockState;
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 randomDisplayTick(state: BlockState,world: World,pos: BlockPos,random: Random): void;
 onEntityCollision(state: BlockState,world: World,pos: BlockPos,entity: Entity): void;
 randomTick(state: BlockState,world: ServerWorld,pos: BlockPos,random: Random): void;
 getPickStack(world: BlockView,pos: BlockPos,state: BlockState): ItemStack;
}
class Static_NetherPortalBlock {
static AXIS: EnumProperty;
static field_31196: number;
static X_SHAPE: VoxelShape;
static Z_SHAPE: VoxelShape;
}

//net.minecraft.block.CryingObsidianBlock
class CryingObsidianBlock extends Block{
 randomDisplayTick(state: BlockState,world: World,pos: BlockPos,random: Random): void;
}

//net.minecraft.block.PlantBlock
class PlantBlock extends Block{
 getStateForNeighborUpdate(state: BlockState,direction: Direction,neighborState: BlockState,world: WorldAccess,pos: BlockPos,neighborPos: BlockPos): BlockState;
 canPlaceAt(state: BlockState,world: WorldView,pos: BlockPos): boolean;
 isTransparent(state: BlockState,world: BlockView,pos: BlockPos): boolean;
 canPathfindThrough(state: BlockState,world: BlockView,pos: BlockPos,type: NavigationType): boolean;
}

//net.minecraft.block.SporeBlossomBlock
class SporeBlossomBlock extends Block{
 getStateForNeighborUpdate(state: BlockState,direction: Direction,neighborState: BlockState,world: WorldAccess,pos: BlockPos,neighborPos: BlockPos): BlockState;
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 canPlaceAt(state: BlockState,world: WorldView,pos: BlockPos): boolean;
 randomDisplayTick(state: BlockState,world: World,pos: BlockPos,random: Random): void;
}
class Static_SporeBlossomBlock {
static SHAPE: VoxelShape;
static field_31252: number;
static field_31253: number;
static field_31254: number;
}

//net.minecraft.block.MushroomBlock
class MushroomBlock extends Block{
 rotate(state: BlockState,rotation: BlockRotation): BlockState;
 getStateForNeighborUpdate(state: BlockState,direction: Direction,neighborState: BlockState,world: WorldAccess,pos: BlockPos,neighborPos: BlockPos): BlockState;
 mirror(state: BlockState,mirror: BlockMirror): BlockState;
 getPlacementState(ctx: ItemPlacementContext): BlockState;
}
class Static_MushroomBlock {
static NORTH: BooleanProperty;
static EAST: BooleanProperty;
static SOUTH: BooleanProperty;
static WEST: BooleanProperty;
static UP: BooleanProperty;
static DOWN: BooleanProperty;
static FACING_PROPERTIES: Map;
}

//net.minecraft.block.SugarCaneBlock
class SugarCaneBlock extends Block{
 getStateForNeighborUpdate(state: BlockState,direction: Direction,neighborState: BlockState,world: WorldAccess,pos: BlockPos,neighborPos: BlockPos): BlockState;
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 canPlaceAt(state: BlockState,world: WorldView,pos: BlockPos): boolean;
 scheduledTick(state: BlockState,world: ServerWorld,pos: BlockPos,random: Random): void;
 randomTick(state: BlockState,world: ServerWorld,pos: BlockPos,random: Random): void;
}
class Static_SugarCaneBlock {
static AGE: IntProperty;
static field_31258: number;
static SHAPE: VoxelShape;
}

//net.minecraft.block.SnowBlock
class SnowBlock extends Block{
 hasSidedTransparency(state: BlockState): boolean;
 getStateForNeighborUpdate(state: BlockState,direction: Direction,neighborState: BlockState,world: WorldAccess,pos: BlockPos,neighborPos: BlockPos): BlockState;
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 canPlaceAt(state: BlockState,world: WorldView,pos: BlockPos): boolean;
 getAmbientOcclusionLightLevel(state: BlockState,world: BlockView,pos: BlockPos): number;
 getCameraCollisionShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 getSidesShape(state: BlockState,world: BlockView,pos: BlockPos): VoxelShape;
 canReplace(state: BlockState,context: ItemPlacementContext): boolean;
 canPathfindThrough(state: BlockState,world: BlockView,pos: BlockPos,type: NavigationType): boolean;
 randomTick(state: BlockState,world: ServerWorld,pos: BlockPos,random: Random): void;
 getCollisionShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 getPlacementState(ctx: ItemPlacementContext): BlockState;
}
class Static_SnowBlock {
static MAX_LAYERS: number;
static LAYERS: IntProperty;
static LAYERS_TO_SHAPE: VoxelShape[];
static field_31248: number;
}

//net.minecraft.block.TripwireBlock
class TripwireBlock extends Block{
 rotate(state: BlockState,rotation: BlockRotation): BlockState;
 getStateForNeighborUpdate(state: BlockState,direction: Direction,neighborState: BlockState,world: WorldAccess,pos: BlockPos,neighborPos: BlockPos): BlockState;
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 shouldConnectTo(state: BlockState,facing: Direction): boolean;
 onBlockAdded(state: BlockState,world: World,pos: BlockPos,oldState: BlockState,notify: boolean): void;
 onStateReplaced(state: BlockState,world: World,pos: BlockPos,newState: BlockState,moved: boolean): void;
 onEntityCollision(state: BlockState,world: World,pos: BlockPos,entity: Entity): void;
 scheduledTick(state: BlockState,world: ServerWorld,pos: BlockPos,random: Random): void;
 mirror(state: BlockState,mirror: BlockMirror): BlockState;
 onBreak(world: World,pos: BlockPos,state: BlockState,player: PlayerEntity): void;
 getPlacementState(ctx: ItemPlacementContext): BlockState;
}
class Static_TripwireBlock {
static POWERED: BooleanProperty;
static ATTACHED: BooleanProperty;
static DISARMED: BooleanProperty;
static NORTH: BooleanProperty;
static EAST: BooleanProperty;
static SOUTH: BooleanProperty;
static WEST: BooleanProperty;
static FACING_PROPERTIES: Map;
static ATTACHED_SHAPE: VoxelShape;
static DETACHED_SHAPE: VoxelShape;
static SCHEDULED_TICK_DELAY: number;
}

//net.minecraft.block.GourdBlock
class GourdBlock extends Block{
 getStem(): StemBlock;
 getAttachedStem(): AttachedStemBlock;
}

//net.minecraft.block.AbstractFireBlock
class AbstractFireBlock extends Block{
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 randomDisplayTick(state: BlockState,world: World,pos: BlockPos,random: Random): void;
 onBlockAdded(state: BlockState,world: World,pos: BlockPos,oldState: BlockState,notify: boolean): void;
 onEntityCollision(state: BlockState,world: World,pos: BlockPos,entity: Entity): void;
 onBreak(world: World,pos: BlockPos,state: BlockState,player: PlayerEntity): void;
 getPlacementState(ctx: ItemPlacementContext): BlockState;
}
class Static_AbstractFireBlock {
static getState(world: BlockView,pos: BlockPos): BlockState;
static canPlaceAt(world: World,pos: BlockPos,direction: Direction): boolean;
static isOverworldOrNether(world: World): boolean;
static shouldLightPortalAt(world: World,pos: BlockPos,direction: Direction): boolean;
static SET_ON_FIRE_SECONDS: number;
static BASE_SOUND_VOLUME: number;
static BASE_SHAPE: VoxelShape;
}

//net.minecraft.block.MultifaceGrowthBlock
class MultifaceGrowthBlock extends Block{
 rotate(state: BlockState,rotation: BlockRotation): BlockState;
 getStateForNeighborUpdate(state: BlockState,direction: Direction,neighborState: BlockState,world: WorldAccess,pos: BlockPos,neighborPos: BlockPos): BlockState;
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 getGrower(): LichenGrower;
 canPlaceAt(state: BlockState,world: WorldView,pos: BlockPos): boolean;
 canGrowWithDirection(world: BlockView,state: BlockState,pos: BlockPos,direction: Direction): boolean;
 canReplace(state: BlockState,context: ItemPlacementContext): boolean;
 mirror(state: BlockState,mirror: BlockMirror): BlockState;
 withDirection(state: BlockState,world: BlockView,pos: BlockPos,direction: Direction): BlockState;
 getPlacementState(ctx: ItemPlacementContext): BlockState;
}
class Static_MultifaceGrowthBlock {
static getProperty(direction: Direction): BooleanProperty;
static getShapeForState(state: BlockState): VoxelShape;
static isNotFullBlock(state: BlockState): boolean;
static method_33372(blockState: BlockState,direction: Direction): boolean;
static canGrowOn(world: BlockView,direction: Direction,pos: BlockPos,state: BlockState): boolean;
static method_33376(blockState: BlockState,direction: Direction): boolean;
static withAllDirections(stateManager: StateManager): BlockState;
static disableDirection(state: BlockState,direction: BooleanProperty): BlockState;
static method_33370(shapes: EnumMap): void;
static hasAnyDirection(state: BlockState): boolean;
static hasDirection(state: BlockState,direction: Direction): boolean;
static directionsToFlag(directions: Collection): byte;
static collectDirections(state: BlockState): Set;
static flagToDirections(flag: byte): Set;
static field_31194: number;
static UP_SHAPE: VoxelShape;
static DOWN_SHAPE: VoxelShape;
static EAST_SHAPE: VoxelShape;
static WEST_SHAPE: VoxelShape;
static SOUTH_SHAPE: VoxelShape;
static NORTH_SHAPE: VoxelShape;
static FACING_PROPERTIES: Map;
static SHAPES_FOR_DIRECTIONS: Map;
static DIRECTIONS: Direction[];
}

//net.minecraft.block.AmethystBlock
class AmethystBlock extends Block{
 onProjectileHit(world: World,state: BlockState,hit: BlockHitResult,projectile: ProjectileEntity): void;
}

//net.minecraft.block.AbstractCandleBlock
class AbstractCandleBlock extends Block{
 randomDisplayTick(state: BlockState,world: World,pos: BlockPos,random: Random): void;
 onProjectileHit(world: World,state: BlockState,hit: BlockHitResult,projectile: ProjectileEntity): void;
}
class Static_AbstractCandleBlock {
static method_35244(worldAccess: WorldAccess,blockPos: BlockPos,offset: Vec3d): void;
static method_31611(world: World,blockPos: BlockPos,random: Random,offset: Vec3d): void;
static setLit(world: WorldAccess,state: BlockState,pos: BlockPos,lit: boolean): void;
static extinguish(player: PlayerEntity,state: BlockState,world: WorldAccess,pos: BlockPos): void;
static spawnCandleParticles(world: World,vec3d: Vec3d,random: Random): void;
static isLitCandle(state: BlockState): boolean;
static field_30987: number;
static LIT: BooleanProperty;
}

//net.minecraft.block.CartographyTableBlock
class CartographyTableBlock extends Block{
 createScreenHandlerFactory(state: BlockState,world: World,pos: BlockPos): NamedScreenHandlerFactory;
 onUse(state: BlockState,world: World,pos: BlockPos,player: PlayerEntity,hand: Hand,hit: BlockHitResult): ActionResult;
}
class Static_CartographyTableBlock {
static method_17457(world: World,blockPos: BlockPos,syncId: number,inventory: PlayerInventory,player: PlayerEntity): ScreenHandler;
static TITLE: Text;
}

//net.minecraft.block.CakeBlock
class CakeBlock extends Block{
 getStateForNeighborUpdate(state: BlockState,direction: Direction,neighborState: BlockState,world: WorldAccess,pos: BlockPos,neighborPos: BlockPos): BlockState;
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 canPlaceAt(state: BlockState,world: WorldView,pos: BlockPos): boolean;
 hasComparatorOutput(state: BlockState): boolean;
 getComparatorOutput(state: BlockState,world: World,pos: BlockPos): number;
 canPathfindThrough(state: BlockState,world: BlockView,pos: BlockPos,type: NavigationType): boolean;
 onUse(state: BlockState,world: World,pos: BlockPos,player: PlayerEntity,hand: Hand,hit: BlockHitResult): ActionResult;
}
class Static_CakeBlock {
static getComparatorOutput(bites: number): number;
static tryEat(world: WorldAccess,pos: BlockPos,state: BlockState,player: PlayerEntity): ActionResult;
static MAX_BITES: number;
static BITES: IntProperty;
static DEFAULT_COMPARATOR_OUTPUT: number;
static field_31047: number;
static field_31048: number;
static BITES_TO_SHAPE: VoxelShape[];
}

//net.minecraft.block.TransparentBlock
class TransparentBlock extends Block{
 isSideInvisible(state: BlockState,stateFrom: BlockState,direction: Direction): boolean;
}

//net.minecraft.block.RedstoneWireBlock
class RedstoneWireBlock extends Block{
 prepare(state: BlockState,world: WorldAccess,pos: BlockPos,flags: number,maxUpdateDepth: number): void;
 rotate(state: BlockState,rotation: BlockRotation): BlockState;
 getStateForNeighborUpdate(state: BlockState,direction: Direction,neighborState: BlockState,world: WorldAccess,pos: BlockPos,neighborPos: BlockPos): BlockState;
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 canPlaceAt(state: BlockState,world: WorldView,pos: BlockPos): boolean;
 getStrongRedstonePower(state: BlockState,world: BlockView,pos: BlockPos,direction: Direction): number;
 randomDisplayTick(state: BlockState,world: World,pos: BlockPos,random: Random): void;
 emitsRedstonePower(state: BlockState): boolean;
 onBlockAdded(state: BlockState,world: World,pos: BlockPos,oldState: BlockState,notify: boolean): void;
 onStateReplaced(state: BlockState,world: World,pos: BlockPos,newState: BlockState,moved: boolean): void;
 mirror(state: BlockState,mirror: BlockMirror): BlockState;
 neighborUpdate(state: BlockState,world: World,pos: BlockPos,sourceBlock: Block,sourcePos: BlockPos,notify: boolean): void;
 getWeakRedstonePower(state: BlockState,world: BlockView,pos: BlockPos,direction: Direction): number;
 onUse(state: BlockState,world: World,pos: BlockPos,player: PlayerEntity,hand: Hand,hit: BlockHitResult): ActionResult;
 getPlacementState(ctx: ItemPlacementContext): BlockState;
}
class Static_RedstoneWireBlock {
static getWireColor(powerLevel: number): number;
static isNotConnected(state: BlockState): boolean;
static isFullyConnected(state: BlockState): boolean;
static method_31649(colors: Vec3d[]): void;
static connectsTo(state: BlockState,dir: Direction): boolean;
static connectsTo(state: BlockState): boolean;
static WIRE_CONNECTION_NORTH: EnumProperty;
static WIRE_CONNECTION_EAST: EnumProperty;
static WIRE_CONNECTION_SOUTH: EnumProperty;
static WIRE_CONNECTION_WEST: EnumProperty;
static POWER: IntProperty;
static DIRECTION_TO_WIRE_CONNECTION_PROPERTY: Map;
static field_31222: number;
static field_31223: number;
static field_31224: number;
static field_31225: number;
static field_31226: number;
static DOT_SHAPE: VoxelShape;
static DIRECTION_TO_SIDE_SHAPE: Map;
static DIRECTION_TO_UP_SHAPE: Map;
static SHAPES: Map;
static COLORS: Vec3d[];
static field_31221: number;
}

//net.minecraft.block.CarpetBlock
class CarpetBlock extends Block{
 getStateForNeighborUpdate(state: BlockState,direction: Direction,neighborState: BlockState,world: WorldAccess,pos: BlockPos,neighborPos: BlockPos): BlockState;
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 canPlaceAt(state: BlockState,world: WorldView,pos: BlockPos): boolean;
}
class Static_CarpetBlock {
static SHAPE: VoxelShape;
}

//net.minecraft.block.InfestedBlock
class InfestedBlock extends Block{
 onStacksDropped(state: BlockState,world: ServerWorld,pos: BlockPos,tool: ItemStack,dropExperience: boolean): void;
 getRegularBlock(): Block;
 toRegularState(infestedState: BlockState): BlockState;
}
class Static_InfestedBlock {
static copyProperties(stateMap: Map,fromState: BlockState,toStateSupplier: Supplier): BlockState;
static isInfestable(block: BlockState): boolean;
static fromRegularState(regularState: BlockState): BlockState;
static method_36367(blockState: BlockState): BlockState;
static method_36364(supplier: Supplier,infestedState: BlockState): BlockState;
static REGULAR_TO_INFESTED_BLOCK: Map;
static REGULAR_TO_INFESTED_STATE: Map;
static INFESTED_TO_REGULAR_STATE: Map;
}

//net.minecraft.block.ExperienceDroppingBlock
class ExperienceDroppingBlock extends Block{
 onStacksDropped(state: BlockState,world: ServerWorld,pos: BlockPos,tool: ItemStack,dropExperience: boolean): void;
}

//net.minecraft.block.RespawnAnchorBlock
class RespawnAnchorBlock extends Block{
 hasComparatorOutput(state: BlockState): boolean;
 getComparatorOutput(state: BlockState,world: World,pos: BlockPos): number;
 randomDisplayTick(state: BlockState,world: World,pos: BlockPos,random: Random): void;
 canPathfindThrough(state: BlockState,world: BlockView,pos: BlockPos,type: NavigationType): boolean;
 onUse(state: BlockState,world: World,pos: BlockPos,player: PlayerEntity,hand: Hand,hit: BlockHitResult): ActionResult;
}
class Static_RespawnAnchorBlock {
static findRespawnPosition(entity: EntityType,world: CollisionView,pos: BlockPos): Optional;
static findRespawnPosition(entity: EntityType,world: CollisionView,pos: BlockPos,ignoreInvalidPos: boolean): Optional;
static getLightLevel(state: BlockState,maxLevel: number): number;
static charge(charger: Entity,world: World,pos: BlockPos,state: BlockState): void;
static isChargeItem(stack: ItemStack): boolean;
static canCharge(state: BlockState): boolean;
static hasStillWater(pos: BlockPos,world: World): boolean;
static method_29559(world: World,pos: BlockPos): boolean;
static isNether(world: World): boolean;
static NO_CHARGES: number;
static MAX_CHARGES: number;
static CHARGES: IntProperty;
static VALID_HORIZONTAL_SPAWN_OFFSETS: ImmutableList;
static VALID_SPAWN_OFFSETS: ImmutableList;
}

//net.minecraft.block.FacingBlock
class FacingBlock extends Block{
}
class Static_FacingBlock {
static FACING: DirectionProperty;
}

//net.minecraft.block.MudBlock
class MudBlock extends Block{
 getAmbientOcclusionLightLevel(state: BlockState,world: BlockView,pos: BlockPos): number;
 getCameraCollisionShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 getSidesShape(state: BlockState,world: BlockView,pos: BlockPos): VoxelShape;
 canPathfindThrough(state: BlockState,world: BlockView,pos: BlockPos,type: NavigationType): boolean;
 getCollisionShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
}
class Static_MudBlock {
static COLLISION_SHAPE: VoxelShape;
}

//net.minecraft.block.NoteBlock
class NoteBlock extends Block{
 getStateForNeighborUpdate(state: BlockState,direction: Direction,neighborState: BlockState,world: WorldAccess,pos: BlockPos,neighborPos: BlockPos): BlockState;
 onSyncedBlockEvent(state: BlockState,world: World,pos: BlockPos,type: number,data: number): boolean;
 neighborUpdate(state: BlockState,world: World,pos: BlockPos,sourceBlock: Block,sourcePos: BlockPos,notify: boolean): void;
 onUse(state: BlockState,world: World,pos: BlockPos,player: PlayerEntity,hand: Hand,hit: BlockHitResult): ActionResult;
 onBlockBreakStart(state: BlockState,world: World,pos: BlockPos,player: PlayerEntity): void;
 getPlacementState(ctx: ItemPlacementContext): BlockState;
}
class Static_NoteBlock {
static getNotePitch(note: number): number;
static INSTRUMENT: EnumProperty;
static POWERED: BooleanProperty;
static NOTE: IntProperty;
static field_41678: number;
}

//net.minecraft.block.RedstoneOreBlock
class RedstoneOreBlock extends Block{
 hasRandomTicks(state: BlockState): boolean;
 randomDisplayTick(state: BlockState,world: World,pos: BlockPos,random: Random): void;
 onStacksDropped(state: BlockState,world: ServerWorld,pos: BlockPos,tool: ItemStack,dropExperience: boolean): void;
 randomTick(state: BlockState,world: ServerWorld,pos: BlockPos,random: Random): void;
 onUse(state: BlockState,world: World,pos: BlockPos,player: PlayerEntity,hand: Hand,hit: BlockHitResult): ActionResult;
 onBlockBreakStart(state: BlockState,world: World,pos: BlockPos,player: PlayerEntity): void;
 onSteppedOn(world: World,pos: BlockPos,state: BlockState,entity: Entity): void;
}
class Static_RedstoneOreBlock {
static spawnParticles(world: World,pos: BlockPos): void;
static light(state: BlockState,world: World,pos: BlockPos): void;
static LIT: BooleanProperty;
}

//net.minecraft.block.DirtPathBlock
class DirtPathBlock extends Block{
 hasSidedTransparency(state: BlockState): boolean;
 getStateForNeighborUpdate(state: BlockState,direction: Direction,neighborState: BlockState,world: WorldAccess,pos: BlockPos,neighborPos: BlockPos): BlockState;
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 canPlaceAt(state: BlockState,world: WorldView,pos: BlockPos): boolean;
 canPathfindThrough(state: BlockState,world: BlockView,pos: BlockPos,type: NavigationType): boolean;
 scheduledTick(state: BlockState,world: ServerWorld,pos: BlockPos,random: Random): void;
 getPlacementState(ctx: ItemPlacementContext): BlockState;
}
class Static_DirtPathBlock {
static SHAPE: VoxelShape;
}

//net.minecraft.block.TripwireHookBlock
class TripwireHookBlock extends Block{
 update(world: World,pos: BlockPos,state: BlockState,beingRemoved: boolean,bl: boolean,i: number,blockState: BlockState): void;
 rotate(state: BlockState,rotation: BlockRotation): BlockState;
 getStateForNeighborUpdate(state: BlockState,direction: Direction,neighborState: BlockState,world: WorldAccess,pos: BlockPos,neighborPos: BlockPos): BlockState;
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 canPlaceAt(state: BlockState,world: WorldView,pos: BlockPos): boolean;
 getStrongRedstonePower(state: BlockState,world: BlockView,pos: BlockPos,direction: Direction): number;
 emitsRedstonePower(state: BlockState): boolean;
 onStateReplaced(state: BlockState,world: World,pos: BlockPos,newState: BlockState,moved: boolean): void;
 scheduledTick(state: BlockState,world: ServerWorld,pos: BlockPos,random: Random): void;
 mirror(state: BlockState,mirror: BlockMirror): BlockState;
 getWeakRedstonePower(state: BlockState,world: BlockView,pos: BlockPos,direction: Direction): number;
 getPlacementState(ctx: ItemPlacementContext): BlockState;
 onPlaced(world: World,pos: BlockPos,state: BlockState,placer: LivingEntity,itemStack: ItemStack): void;
}
class Static_TripwireHookBlock {
static FACING: DirectionProperty;
static POWERED: BooleanProperty;
static ATTACHED: BooleanProperty;
static field_31268: number;
static field_31269: number;
static SCHEDULED_TICK_DELAY: number;
static field_31270: number;
static SOUTH_SHAPE: VoxelShape;
static NORTH_SHAPE: VoxelShape;
static EAST_SHAPE: VoxelShape;
static WEST_SHAPE: VoxelShape;
}

//net.minecraft.block.TurtleEggBlock
class TurtleEggBlock extends Block{
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 canReplace(state: BlockState,context: ItemPlacementContext): boolean;
 onBlockAdded(state: BlockState,world: World,pos: BlockPos,oldState: BlockState,notify: boolean): void;
 randomTick(state: BlockState,world: ServerWorld,pos: BlockPos,random: Random): void;
 onSteppedOn(world: World,pos: BlockPos,state: BlockState,entity: Entity): void;
 onLandedUpon(world: World,state: BlockState,pos: BlockPos,entity: Entity,fallDistance: number): void;
 getPlacementState(ctx: ItemPlacementContext): BlockState;
 afterBreak(world: World,player: PlayerEntity,pos: BlockPos,state: BlockState,blockEntity: BlockEntity,tool: ItemStack): void;
}
class Static_TurtleEggBlock {
static isSandBelow(world: BlockView,pos: BlockPos): boolean;
static isSand(world: BlockView,pos: BlockPos): boolean;
static field_31272: number;
static field_31273: number;
static field_31274: number;
static SMALL_SHAPE: VoxelShape;
static LARGE_SHAPE: VoxelShape;
static HATCH: IntProperty;
static EGGS: IntProperty;
}

//net.minecraft.block.AbstractPlantPartBlock
class AbstractPlantPartBlock extends Block{
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 canPlaceAt(state: BlockState,world: WorldView,pos: BlockPos): boolean;
 scheduledTick(state: BlockState,world: ServerWorld,pos: BlockPos,random: Random): void;
 getPlacementState(ctx: ItemPlacementContext): BlockState;
 getRandomGrowthState(world: WorldAccess): BlockState;
}

//net.minecraft.block.RedstoneLampBlock
class RedstoneLampBlock extends Block{
 scheduledTick(state: BlockState,world: ServerWorld,pos: BlockPos,random: Random): void;
 neighborUpdate(state: BlockState,world: World,pos: BlockPos,sourceBlock: Block,sourcePos: BlockPos,notify: boolean): void;
 getPlacementState(ctx: ItemPlacementContext): BlockState;
}
class Static_RedstoneLampBlock {
static LIT: BooleanProperty;
}

//net.minecraft.block.CoralBlockBlock
class CoralBlockBlock extends Block{
 getStateForNeighborUpdate(state: BlockState,direction: Direction,neighborState: BlockState,world: WorldAccess,pos: BlockPos,neighborPos: BlockPos): BlockState;
 scheduledTick(state: BlockState,world: ServerWorld,pos: BlockPos,random: Random): void;
 getPlacementState(ctx: ItemPlacementContext): BlockState;
}

//net.minecraft.block.AbstractCauldronBlock
class AbstractCauldronBlock extends Block{
 isFull(state: BlockState): boolean;
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 hasComparatorOutput(state: BlockState): boolean;
 canPathfindThrough(state: BlockState,world: BlockView,pos: BlockPos,type: NavigationType): boolean;
 scheduledTick(state: BlockState,world: ServerWorld,pos: BlockPos,random: Random): void;
 onUse(state: BlockState,world: World,pos: BlockPos,player: PlayerEntity,hand: Hand,hit: BlockHitResult): ActionResult;
 getRaycastShape(state: BlockState,world: BlockView,pos: BlockPos): VoxelShape;
}
class Static_AbstractCauldronBlock {
static field_30989: number;
static field_30990: number;
static field_30991: number;
static field_30992: number;
static field_30988: number;
static RAYCAST_SHAPE: VoxelShape;
static OUTLINE_SHAPE: VoxelShape;
}

//net.minecraft.block.FarmlandBlock
class FarmlandBlock extends Block{
 hasSidedTransparency(state: BlockState): boolean;
 getStateForNeighborUpdate(state: BlockState,direction: Direction,neighborState: BlockState,world: WorldAccess,pos: BlockPos,neighborPos: BlockPos): BlockState;
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 canPlaceAt(state: BlockState,world: WorldView,pos: BlockPos): boolean;
 canPathfindThrough(state: BlockState,world: BlockView,pos: BlockPos,type: NavigationType): boolean;
 scheduledTick(state: BlockState,world: ServerWorld,pos: BlockPos,random: Random): void;
 randomTick(state: BlockState,world: ServerWorld,pos: BlockPos,random: Random): void;
 onLandedUpon(world: World,state: BlockState,pos: BlockPos,entity: Entity,fallDistance: number): void;
 getPlacementState(ctx: ItemPlacementContext): BlockState;
}
class Static_FarmlandBlock {
static isWaterNearby(world: WorldView,pos: BlockPos): boolean;
static hasCrop(world: BlockView,pos: BlockPos): boolean;
static setToDirt(entity: Entity,state: BlockState,world: World,pos: BlockPos): void;
static MOISTURE: IntProperty;
static SHAPE: VoxelShape;
static MAX_MOISTURE: number;
}

//net.minecraft.structure.WoodlandMansionGenerator$ThirdFloorRoomPool
class WoodlandMansionGenerator_ThirdFloorRoomPool extends WoodlandMansionGenerator_SecondFloorRoomPool{
}

//net.minecraft.world.poi.PointOfInterestStorage$PointOfInterestDistanceTracker
class PointOfInterestStorage_PointOfInterestDistanceTracker extends SectionDistanceLevelPropagator{
 update(): void;
}

//net.minecraft.server.world.ChunkTicketManager$TicketDistanceLevelPropagator
class ChunkTicketManager_TicketDistanceLevelPropagator extends ChunkPosDistanceLevelPropagator{
 update(distance: number): number;
}
class Static_ChunkTicketManager_TicketDistanceLevelPropagator {
static UNLOADED: number;
}

//net.minecraft.server.world.ChunkTicketManager$DistanceFromNearestPlayerTracker
class ChunkTicketManager_DistanceFromNearestPlayerTracker extends ChunkPosDistanceLevelPropagator{
 updateLevels(): void;
}

//net.minecraft.world.SimulationDistanceLevelPropagator
class SimulationDistanceLevelPropagator extends ChunkPosDistanceLevelPropagator{
 add(pos: long,ticket: ChunkTicket): void;
 add(type: ChunkTicketType,pos: ChunkPos,level: number,argument: Object): void;
 remove(type: ChunkTicketType,pos: ChunkPos,level: number,argument: Object): void;
 remove(pos: long,ticket: ChunkTicket): void;
 getLevel(pos: ChunkPos): number;
 updatePlayerTickets(level: number): void;
 updateLevels(): void;
 getTickingTicket(pos: long): string;
}
class Static_SimulationDistanceLevelPropagator {
static method_38645(p: long): SortedArraySet;
static field_44858: number;
static field_34889: number;
}

//net.minecraft.world.gen.surfacebuilder.MaterialRules$MaterialRuleContext$NegativeRunDepthPredicate
class MaterialRules_MaterialRuleContext_NegativeRunDepthPredicate extends MaterialRules_HorizontalLazyAbstractPredicate{
}

//net.minecraft.world.gen.surfacebuilder.MaterialRules$NoiseThresholdMaterialCondition$NoiseThresholdPredicate
class MaterialRules_NoiseThresholdMaterialCondition_NoiseThresholdPredicate extends MaterialRules_HorizontalLazyAbstractPredicate{
}

//net.minecraft.world.gen.surfacebuilder.MaterialRules$MaterialRuleContext$SteepSlopePredicate
class MaterialRules_MaterialRuleContext_SteepSlopePredicate extends MaterialRules_HorizontalLazyAbstractPredicate{
}

//net.minecraft.world.gen.surfacebuilder.MaterialRules$StoneDepthMaterialCondition$StoneDepthPredicate
class MaterialRules_StoneDepthMaterialCondition_StoneDepthPredicate extends MaterialRules_FullLazyAbstractPredicate{
}

//net.minecraft.world.gen.surfacebuilder.MaterialRules$WaterMaterialCondition$WaterPredicate
class MaterialRules_WaterMaterialCondition_WaterPredicate extends MaterialRules_FullLazyAbstractPredicate{
}

//net.minecraft.world.gen.surfacebuilder.MaterialRules$VerticalGradientMaterialCondition$VerticalGradientPredicate
class MaterialRules_VerticalGradientMaterialCondition_VerticalGradientPredicate extends MaterialRules_FullLazyAbstractPredicate{
}

//net.minecraft.world.gen.surfacebuilder.MaterialRules$MaterialRuleContext$BiomeTemperaturePredicate
class MaterialRules_MaterialRuleContext_BiomeTemperaturePredicate extends MaterialRules_FullLazyAbstractPredicate{
}

//net.minecraft.world.gen.surfacebuilder.MaterialRules$BiomeMaterialCondition$BiomePredicate
class MaterialRules_BiomeMaterialCondition_BiomePredicate extends MaterialRules_FullLazyAbstractPredicate{
}

//net.minecraft.world.gen.surfacebuilder.MaterialRules$AboveYMaterialCondition$AboveYPredicate
class MaterialRules_AboveYMaterialCondition_AboveYPredicate extends MaterialRules_FullLazyAbstractPredicate{
}

//net.minecraft.block.entity.LootableContainerBlockEntity
class LootableContainerBlockEntity extends LockableContainerBlockEntity{
 clear(): void;
 isEmpty(): boolean;
 getStack(slot: number): ItemStack;
 setStack(slot: number,stack: ItemStack): void;
 removeStack(slot: number,amount: number): ItemStack;
 removeStack(slot: number): ItemStack;
 setLootTable(id: Identifier,seed: long): void;
 canPlayerUse(player: PlayerEntity): boolean;
 createMenu(i: number,playerInventory: PlayerInventory,playerEntity: PlayerEntity): ScreenHandler;
 checkUnlocked(player: PlayerEntity): boolean;
 checkLootInteraction(player: PlayerEntity): void;
}
class Static_LootableContainerBlockEntity {
static setLootTable(world: BlockView,random: Random,pos: BlockPos,id: Identifier): void;
static LOOT_TABLE_KEY: string;
static LOOT_TABLE_SEED_KEY: string;
}

//net.minecraft.client.realms.task.ResettingWorldTemplateTask
class ResettingWorldTemplateTask extends ResettingWorldTask{
}

//net.minecraft.client.realms.task.ResettingNormalWorldTask
class ResettingNormalWorldTask extends ResettingWorldTask{
}

//net.minecraft.client.gui.screen.ingame.SmithingScreen
class SmithingScreen extends ForgingScreen{
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
 onSlotUpdate(handler: ScreenHandler,slotId: number,stack: ItemStack): void;
 handledScreenTick(): void;
}
class Static_SmithingScreen {
static TEXTURE: Identifier;
static EMPTY_SLOT_SMITHING_TEMPLATE_ARMOR_TRIM_TEXTURE: Identifier;
static EMPTY_SLOT_SMITHING_TEMPLATE_NETHERITE_UPGRADE_TEXTURE: Identifier;
static MISSING_TEMPLATE_TOOLTIP: Text;
static ERROR_TOOLTIP: Text;
static EMPTY_SLOT_TEXTURES: List;
static field_42057: number;
static field_42058: number;
static field_42059: number;
static field_42060: number;
static field_42061: number;
static field_42062: number;
static field_42063: number;
static field_42068: number;
static field_42047: number;
static ARMOR_STAND_ROTATION: Quaternionf;
static field_42049: number;
static field_42050: number;
static field_42051: number;
}

//net.minecraft.client.gui.screen.ingame.AnvilScreen
class AnvilScreen extends ForgingScreen{
 resize(client: MinecraftClient,width: number,height: number): void;
 onSlotUpdate(handler: ScreenHandler,slotId: number,stack: ItemStack): void;
 keyPressed(keyCode: number,scanCode: number,modifiers: number): boolean;
 renderForeground(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
 handledScreenTick(): void;
}
class Static_AnvilScreen {
static TEXTURE: Identifier;
static TOO_EXPENSIVE_TEXT: Text;
}

//net.minecraft.loot.entry.GroupEntry
class GroupEntry extends CombinedEntry{
 getType(): LootPoolEntryType;
}
class Static_GroupEntry {
static create(entries: LootPoolEntry_Builder): GroupEntry_Builder;
static method_452(entryCombiners: EntryCombiner[],context: LootContext,lootChoiceExpander: Consumer): boolean;
static method_29315(entryCombiner: EntryCombiner,entryCombiner2: EntryCombiner,context: LootContext,choiceConsumer: Consumer): boolean;
}

//net.minecraft.loot.entry.AlternativeEntry
class AlternativeEntry extends CombinedEntry{
 validate(reporter: LootTableReporter): void;
 getType(): LootPoolEntryType;
}
class Static_AlternativeEntry {
static builder(children: Collection,toBuilderFunction: Function): AlternativeEntry_Builder;
static builder(children: LootPoolEntry_Builder): AlternativeEntry_Builder;
static method_387(entryCombiners: EntryCombiner[],context: LootContext,lootChoiceExpander: Consumer): boolean;
static method_43733(i: number): LootPoolEntry_Builder;
}

//net.minecraft.loot.entry.SequenceEntry
class SequenceEntry extends CombinedEntry{
 getType(): LootPoolEntryType;
}
class Static_SequenceEntry {
static create(entries: LootPoolEntry_Builder): SequenceEntry_Builder;
static method_400(entryCombiners: EntryCombiner[],context: LootContext,lootChoiceExpander: Consumer): boolean;
}

//net.minecraft.loot.entry.DynamicEntry
class DynamicEntry extends LeafEntry{
 getType(): LootPoolEntryType;
 generateLoot(lootConsumer: Consumer,context: LootContext): void;
}
class Static_DynamicEntry {
static builder(name: Identifier): LeafEntry_Builder;
static method_391(identifier: Identifier,weight: number,quality: number,conditions: LootCondition[],functions: LootFunction[]): LeafEntry;
}

//net.minecraft.loot.entry.LootTableEntry
class LootTableEntry extends LeafEntry{
 validate(reporter: LootTableReporter): void;
 getType(): LootPoolEntryType;
 generateLoot(lootConsumer: Consumer,context: LootContext): void;
}
class Static_LootTableEntry {
static builder(id: Identifier): LeafEntry_Builder;
static method_430(identifier: Identifier,weight: number,quality: number,conditions: LootCondition[],functions: LootFunction[]): LeafEntry;
}

//net.minecraft.loot.entry.EmptyEntry
class EmptyEntry extends LeafEntry{
 getType(): LootPoolEntryType;
 generateLoot(lootConsumer: Consumer,context: LootContext): void;
}
class Static_EmptyEntry {
static builder(): LeafEntry_Builder;
}

//net.minecraft.loot.entry.TagEntry
class TagEntry extends LeafEntry{
 getType(): LootPoolEntryType;
 expand(lootContext: LootContext,consumer: Consumer): boolean;
 generateLoot(lootConsumer: Consumer,context: LootContext): void;
}
class Static_TagEntry {
static builder(name: TagKey): LeafEntry_Builder;
static method_449(consumer: Consumer,entry: RegistryEntry): void;
static method_35518(tagKey: TagKey,weight: number,quality: number,conditions: LootCondition[],functions: LootFunction[]): LeafEntry;
static method_444(tagKey: TagKey,weight: number,quality: number,conditions: LootCondition[],functions: LootFunction[]): LeafEntry;
static expandBuilder(name: TagKey): LeafEntry_Builder;
}

//net.minecraft.loot.entry.ItemEntry
class ItemEntry extends LeafEntry{
 getType(): LootPoolEntryType;
 generateLoot(lootConsumer: Consumer,context: LootContext): void;
}
class Static_ItemEntry {
static builder(drop: ItemConvertible): LeafEntry_Builder;
static method_409(itemConvertible: ItemConvertible,weight: number,quality: number,conditions: LootCondition[],functions: LootFunction[]): LeafEntry;
}

//net.minecraft.entity.projectile.FishingBobberEntity
class FishingBobberEntity extends ProjectileEntity{
 remove(reason: Entity_RemovalReason): void;
 setOwner(entity: Entity): void;
 use(usedItem: ItemStack): number;
 tick(): void;
 onSpawnPacket(packet: EntitySpawnS2CPacket): void;
 handleStatus(status: byte): void;
 isInOpenWater(): boolean;
 updateTrackedPositionAndAngles(x: number,y: number,z: number,yaw: number,pitch: number,interpolationSteps: number,interpolate: boolean): void;
 shouldRender(distance: number): boolean;
 createSpawnPacket(): Packet;
 onRemoved(): void;
 canUsePortals(): boolean;
 onTrackedDataSet(data: TrackedData): void;
 writeCustomDataToNbt(nbt: NbtCompound): void;
 readCustomDataFromNbt(nbt: NbtCompound): void;
 getHookedEntity(): Entity;
 getPlayerOwner(): PlayerEntity;
}
class Static_FishingBobberEntity {
static method_26340(positionType: FishingBobberEntity_PositionType,positionType2: FishingBobberEntity_PositionType): FishingBobberEntity_PositionType;
static LOGGER: Logger;
static field_30665: number;
static HOOK_ENTITY_ID: TrackedData;
static CAUGHT_FISH: TrackedData;
}

//net.minecraft.entity.projectile.PersistentProjectileEntity
class PersistentProjectileEntity extends ProjectileEntity{
 move(movementType: MovementType,movement: Vec3d): void;
 setOwner(entity: Entity): void;
 tick(): void;
 setVelocityClient(x: number,y: number,z: number): void;
 isCritical(): boolean;
 getDamage(): number;
 setDamage(damage: number): void;
 updateTrackedPositionAndAngles(x: number,y: number,z: number,yaw: number,pitch: number,interpolationSteps: number,interpolate: boolean): void;
 applyEnchantmentEffects(entity: LivingEntity,damageModifier: number): void;
 shouldRender(distance: number): boolean;
 setVelocity(x: number,y: number,z: number,speed: number,divergence: number): void;
 onPlayerCollision(player: PlayerEntity): void;
 isAttackable(): boolean;
 isNoClip(): boolean;
 isShotFromCrossbow(): boolean;
 setNoClip(noClip: boolean): void;
 getPunch(): number;
 getPierceLevel(): byte;
 setPierceLevel(level: byte): void;
 setSound(sound: SoundEvent): void;
 setCritical(critical: boolean): void;
 setPunch(punch: number): void;
 writeCustomDataToNbt(nbt: NbtCompound): void;
 readCustomDataFromNbt(nbt: NbtCompound): void;
 setShotFromCrossbow(shotFromCrossbow: boolean): void;
 pickupType: PersistentProjectileEntity_PickupPermission;
 shake: number;
}
class Static_PersistentProjectileEntity {
static field_30657: number;
static PROJECTILE_FLAGS: TrackedData;
static PIERCE_LEVEL: TrackedData;
static CRITICAL_FLAG: number;
static NO_CLIP_FLAG: number;
static SHOT_FROM_CROSSBOW_FLAG: number;
}

//net.minecraft.entity.projectile.ShulkerBulletEntity
class ShulkerBulletEntity extends ProjectileEntity{
 tick(): void;
 onSpawnPacket(packet: EntitySpawnS2CPacket): void;
 getSoundCategory(): SoundCategory;
 damage(source: DamageSource,amount: number): boolean;
 canHit(): boolean;
 shouldRender(distance: number): boolean;
 isOnFire(): boolean;
 checkDespawn(): void;
 getBrightnessAtEyes(): number;
}
class Static_ShulkerBulletEntity {
static field_30666: number;
}

//net.minecraft.entity.projectile.ExplosiveProjectileEntity
class ExplosiveProjectileEntity extends ProjectileEntity{
 tick(): void;
 getTargetingMargin(): number;
 onSpawnPacket(packet: EntitySpawnS2CPacket): void;
 damage(source: DamageSource,amount: number): boolean;
 canHit(): boolean;
 shouldRender(distance: number): boolean;
 createSpawnPacket(): Packet;
 writeCustomDataToNbt(nbt: NbtCompound): void;
 readCustomDataFromNbt(nbt: NbtCompound): void;
 getBrightnessAtEyes(): number;
 powerX: number;
 powerY: number;
 powerZ: number;
}

//net.minecraft.entity.projectile.thrown.ThrownEntity
class ThrownEntity extends ProjectileEntity{
 tick(): void;
 shouldRender(distance: number): boolean;
}

//net.minecraft.entity.projectile.LlamaSpitEntity
class LlamaSpitEntity extends ProjectileEntity{
 tick(): void;
 onSpawnPacket(packet: EntitySpawnS2CPacket): void;
}

//net.minecraft.entity.decoration.DisplayEntity$TextDisplayEntity
class DisplayEntity_TextDisplayEntity extends DisplayEntity{
 getData(): DisplayEntity_TextDisplayEntity_Data;
 onTrackedDataSet(data: TrackedData): void;
 splitLines(splitter: DisplayEntity_TextDisplayEntity_LineSplitter): DisplayEntity_TextDisplayEntity_TextLines;
}
class Static_DisplayEntity_TextDisplayEntity {
static writeFlag(flags: byte,nbt: NbtCompound,nbtKey: string,flag: byte): void;
static getAlignment(flags: byte): DisplayEntity_TextDisplayEntity_TextAlignment;
static method_48906(nbtCompound: NbtCompound,nbtElement: NbtElement): void;
static readFlag(flags: byte,nbt: NbtCompound,nbtKey: string,flag: byte): byte;
static TEXT_NBT_KEY: string;
static LINE_WIDTH_NBT_KEY: string;
static TEXT_OPACITY_NBT_KEY: string;
static BACKGROUND_NBT_KEY: string;
static SHADOW_NBT_KEY: string;
static SEE_THROUGH_NBT_KEY: string;
static DEFAULT_BACKGROUND_NBT_KEY: string;
static ALIGNMENT_NBT_KEY: string;
static SHADOW_FLAG: byte;
static SEE_THROUGH_FLAG: byte;
static DEFAULT_BACKGROUND_FLAG: byte;
static LEFT_ALIGNMENT_FLAG: byte;
static RIGHT_ALIGNMENT_FLAG: byte;
static INITIAL_TEXT_OPACITY: byte;
static INITIAL_BACKGROUND: number;
static TEXT: TrackedData;
static LINE_WIDTH: TrackedData;
static BACKGROUND: TrackedData;
static TEXT_OPACITY: TrackedData;
static TEXT_DISPLAY_FLAGS: TrackedData;
static TEXT_RENDERING_DATA_IDS: IntSet;
}

//net.minecraft.entity.decoration.DisplayEntity$ItemDisplayEntity
class DisplayEntity_ItemDisplayEntity extends DisplayEntity{
 getData(): DisplayEntity_ItemDisplayEntity_Data;
 onTrackedDataSet(data: TrackedData): void;
 getStackReference(mappedIndex: number): StackReference;
}
class Static_DisplayEntity_ItemDisplayEntity {
static method_48899(nbtCompound: NbtCompound,nbtx: NbtElement): void;
static ITEM_NBT_KEY: string;
static ITEM_DISPLAY_NBT_KEY: string;
static ITEM: TrackedData;
static ITEM_DISPLAY: TrackedData;
}

//net.minecraft.entity.decoration.DisplayEntity$BlockDisplayEntity
class DisplayEntity_BlockDisplayEntity extends DisplayEntity{
 getData(): DisplayEntity_BlockDisplayEntity_Data;
 onTrackedDataSet(data: TrackedData): void;
}
class Static_DisplayEntity_BlockDisplayEntity {
static BLOCK_STATE_NBT_KEY: string;
static BLOCK_STATE: TrackedData;
}

//net.minecraft.entity.decoration.LeashKnotEntity
class LeashKnotEntity extends AbstractDecorationEntity{
 getLeashPos(delta: number): Vec3d;
 getPickBlockStack(): ItemStack;
 interact(player: PlayerEntity,hand: Hand): ActionResult;
 onBreak(entity: Entity): void;
 shouldRender(distance: number): boolean;
 createSpawnPacket(): Packet;
 writeCustomDataToNbt(nbt: NbtCompound): void;
 readCustomDataFromNbt(nbt: NbtCompound): void;
 setFacing(facing: Direction): void;
 getWidthPixels(): number;
 canStayAttached(): boolean;
 onPlace(): void;
 getHeightPixels(): number;
}
class Static_LeashKnotEntity {
static getOrCreate(world: World,pos: BlockPos): LeashKnotEntity;
static field_30455: number;
}

//net.minecraft.entity.decoration.ItemFrameEntity
class ItemFrameEntity extends AbstractDecorationEntity{
 move(movementType: MovementType,movement: Vec3d): void;
 getMapId(): OptionalInt;
 getTargetingMargin(): number;
 addVelocity(deltaX: number,deltaY: number,deltaZ: number): void;
 getPickBlockStack(): ItemStack;
 getBodyYaw(): number;
 onSpawnPacket(packet: EntitySpawnS2CPacket): void;
 setRotation(value: number): void;
 interact(player: PlayerEntity,hand: Hand): ActionResult;
 damage(source: DamageSource,amount: number): boolean;
 onBreak(entity: Entity): void;
 shouldRender(distance: number): boolean;
 getRotation(): number;
 createSpawnPacket(): Packet;
 onTrackedDataSet(data: TrackedData): void;
 getStackReference(mappedIndex: number): StackReference;
 kill(): void;
 getRemoveItemSound(): SoundEvent;
 getRotateItemSound(): SoundEvent;
 containsMap(): boolean;
 getAddItemSound(): SoundEvent;
 getPlaceSound(): SoundEvent;
 getBreakSound(): SoundEvent;
 getComparatorPower(): number;
 getHeldItemStack(): ItemStack;
 setHeldItemStack(value: ItemStack,update: boolean): void;
 setHeldItemStack(stack: ItemStack): void;
 writeCustomDataToNbt(nbt: NbtCompound): void;
 readCustomDataFromNbt(nbt: NbtCompound): void;
 getWidthPixels(): number;
 canStayAttached(): boolean;
 onPlace(): void;
 getHeightPixels(): number;
}
class Static_ItemFrameEntity {
static ITEM_FRAME_LOGGER: Logger;
static ITEM_STACK: TrackedData;
static ROTATION: TrackedData;
static field_30454: number;
}

//net.minecraft.entity.vehicle.FurnaceMinecartEntity
class FurnaceMinecartEntity extends AbstractMinecartEntity{
 tick(): void;
 interact(player: PlayerEntity,hand: Hand): ActionResult;
 getMinecartType(): AbstractMinecartEntity_Type;
 getDefaultContainedBlock(): BlockState;
 pushX: number;
 pushZ: number;
}
class Static_FurnaceMinecartEntity {
static LIT: TrackedData;
static ACCEPTABLE_FUEL: Ingredient;
}

//net.minecraft.entity.vehicle.MinecartEntity
class MinecartEntity extends AbstractMinecartEntity{
 interact(player: PlayerEntity,hand: Hand): ActionResult;
 onActivatorRail(x: number,y: number,z: number,powered: boolean): void;
 getMinecartType(): AbstractMinecartEntity_Type;
}

//net.minecraft.entity.vehicle.SpawnerMinecartEntity
class SpawnerMinecartEntity extends AbstractMinecartEntity{
 tick(): void;
 handleStatus(status: byte): void;
 getLogic(): MobSpawnerLogic;
 getMinecartType(): AbstractMinecartEntity_Type;
 getDefaultContainedBlock(): BlockState;
 entityDataRequiresOperator(): boolean;
}

//net.minecraft.entity.vehicle.CommandBlockMinecartEntity
class CommandBlockMinecartEntity extends AbstractMinecartEntity{
 getCommandExecutor(): CommandBlockExecutor;
 interact(player: PlayerEntity,hand: Hand): ActionResult;
 onTrackedDataSet(data: TrackedData): void;
 onActivatorRail(x: number,y: number,z: number,powered: boolean): void;
 getMinecartType(): AbstractMinecartEntity_Type;
 getDefaultContainedBlock(): BlockState;
 entityDataRequiresOperator(): boolean;
}
class Static_CommandBlockMinecartEntity {
static COMMAND: TrackedData;
static LAST_OUTPUT: TrackedData;
static EXECUTE_TICK_COOLDOWN: number;
}

//net.minecraft.entity.vehicle.TntMinecartEntity
class TntMinecartEntity extends AbstractMinecartEntity{
 prime(): void;
 tick(): void;
 handleStatus(status: byte): void;
 damage(source: DamageSource,amount: number): boolean;
 handleFallDamage(fallDistance: number,damageMultiplier: number,damageSource: DamageSource): boolean;
 getFuseTicks(): number;
 isPrimed(): boolean;
 dropItems(damageSource: DamageSource): void;
 onActivatorRail(x: number,y: number,z: number,powered: boolean): void;
 getMinecartType(): AbstractMinecartEntity_Type;
 getDefaultContainedBlock(): BlockState;
 getEffectiveExplosionResistance(explosion: Explosion,world: BlockView,pos: BlockPos,blockState: BlockState,fluidState: FluidState,max: number): number;
 canExplosionDestroyBlock(explosion: Explosion,world: BlockView,pos: BlockPos,state: BlockState,explosionPower: number): boolean;
}
class Static_TntMinecartEntity {
static PRIME_TNT_STATUS: byte;
}

//net.minecraft.structure.JungleTempleGenerator
class JungleTempleGenerator extends ShiftableStructurePiece{
 generate(world: StructureWorldAccess,structureAccessor: StructureAccessor,chunkGenerator: ChunkGenerator,random: Random,chunkBox: BlockBox,chunkPos: ChunkPos,pivot: BlockPos): void;
}
class Static_JungleTempleGenerator {
static field_34727: number;
static DEPTH: number;
static COBBLESTONE_RANDOMIZER: JungleTempleGenerator_CobblestoneRandomizer;
}

//net.minecraft.structure.SwampHutGenerator
class SwampHutGenerator extends ShiftableStructurePiece{
 generate(world: StructureWorldAccess,structureAccessor: StructureAccessor,chunkGenerator: ChunkGenerator,random: Random,chunkBox: BlockBox,chunkPos: ChunkPos,pivot: BlockPos): void;
}

//net.minecraft.structure.DesertTempleGenerator
class DesertTempleGenerator extends ShiftableStructurePiece{
 generate(world: StructureWorldAccess,structureAccessor: StructureAccessor,chunkGenerator: ChunkGenerator,random: Random,chunkBox: BlockBox,chunkPos: ChunkPos,pivot: BlockPos): void;
 getPotentialSuspiciousSandPositions(): List;
 getBasementMarkerPos(): BlockPos;
}
class Static_DesertTempleGenerator {
static WIDTH: number;
static DEPTH: number;
}

//net.minecraft.structure.StrongholdGenerator$PrisonHall
class StrongholdGenerator_PrisonHall extends StrongholdGenerator_Piece{
 generate(world: StructureWorldAccess,structureAccessor: StructureAccessor,chunkGenerator: ChunkGenerator,random: Random,chunkBox: BlockBox,chunkPos: ChunkPos,pivot: BlockPos): void;
 fillOpenings(start: StructurePiece,holder: StructurePiecesHolder,random: Random): void;
}
class Static_StrongholdGenerator_PrisonHall {
static create(holder: StructurePiecesHolder,random: Random,x: number,y: number,z: number,orientation: Direction,chainLength: number): StrongholdGenerator_PrisonHall;
static SIZE_X: number;
static SIZE_Y: number;
static SIZE_Z: number;
}

//net.minecraft.structure.StrongholdGenerator$SmallCorridor
class StrongholdGenerator_SmallCorridor extends StrongholdGenerator_Piece{
 generate(world: StructureWorldAccess,structureAccessor: StructureAccessor,chunkGenerator: ChunkGenerator,random: Random,chunkBox: BlockBox,chunkPos: ChunkPos,pivot: BlockPos): void;
}
class Static_StrongholdGenerator_SmallCorridor {
static create(holder: StructurePiecesHolder,random: Random,x: number,y: number,z: number,orientation: Direction): BlockBox;
}

//net.minecraft.structure.StrongholdGenerator$Library
class StrongholdGenerator_Library extends StrongholdGenerator_Piece{
 generate(world: StructureWorldAccess,structureAccessor: StructureAccessor,chunkGenerator: ChunkGenerator,random: Random,chunkBox: BlockBox,chunkPos: ChunkPos,pivot: BlockPos): void;
}
class Static_StrongholdGenerator_Library {
static create(holder: StructurePiecesHolder,random: Random,x: number,y: number,z: number,orientation: Direction,chainLength: number): StrongholdGenerator_Library;
static SIZE_X: number;
static field_31636: number;
static SIZE_Y: number;
static SIZE_Z: number;
}

//net.minecraft.structure.StrongholdGenerator$FiveWayCrossing
class StrongholdGenerator_FiveWayCrossing extends StrongholdGenerator_Piece{
 generate(world: StructureWorldAccess,structureAccessor: StructureAccessor,chunkGenerator: ChunkGenerator,random: Random,chunkBox: BlockBox,chunkPos: ChunkPos,pivot: BlockPos): void;
 fillOpenings(start: StructurePiece,holder: StructurePiecesHolder,random: Random): void;
}
class Static_StrongholdGenerator_FiveWayCrossing {
static create(holder: StructurePiecesHolder,random: Random,x: number,y: number,z: number,orientation: Direction,chainLength: number): StrongholdGenerator_FiveWayCrossing;
static SIZE_X: number;
static SIZE_Y: number;
static SIZE_Z: number;
}

//net.minecraft.structure.StrongholdGenerator$SquareRoom
class StrongholdGenerator_SquareRoom extends StrongholdGenerator_Piece{
 generate(world: StructureWorldAccess,structureAccessor: StructureAccessor,chunkGenerator: ChunkGenerator,random: Random,chunkBox: BlockBox,chunkPos: ChunkPos,pivot: BlockPos): void;
 fillOpenings(start: StructurePiece,holder: StructurePiecesHolder,random: Random): void;
}
class Static_StrongholdGenerator_SquareRoom {
static create(holder: StructurePiecesHolder,random: Random,x: number,y: number,z: number,orientation: Direction,chainLength: number): StrongholdGenerator_SquareRoom;
static SIZE_X: number;
static SIZE_Y: number;
static SIZE_Z: number;
}

//net.minecraft.structure.StrongholdGenerator$Stairs
class StrongholdGenerator_Stairs extends StrongholdGenerator_Piece{
 generate(world: StructureWorldAccess,structureAccessor: StructureAccessor,chunkGenerator: ChunkGenerator,random: Random,chunkBox: BlockBox,chunkPos: ChunkPos,pivot: BlockPos): void;
 fillOpenings(start: StructurePiece,holder: StructurePiecesHolder,random: Random): void;
}
class Static_StrongholdGenerator_Stairs {
static create(holder: StructurePiecesHolder,random: Random,x: number,y: number,z: number,orientation: Direction,chainLength: number): StrongholdGenerator_Stairs;
static SIZE_X: number;
static SIZE_Y: number;
static SIZE_Z: number;
}

//net.minecraft.structure.StrongholdGenerator$PortalRoom
class StrongholdGenerator_PortalRoom extends StrongholdGenerator_Piece{
 generate(world: StructureWorldAccess,structureAccessor: StructureAccessor,chunkGenerator: ChunkGenerator,random: Random,chunkBox: BlockBox,chunkPos: ChunkPos,pivot: BlockPos): void;
 fillOpenings(start: StructurePiece,holder: StructurePiecesHolder,random: Random): void;
}
class Static_StrongholdGenerator_PortalRoom {
static create(holder: StructurePiecesHolder,x: number,y: number,z: number,orientation: Direction,chainLength: number): StrongholdGenerator_PortalRoom;
static SIZE_X: number;
static SIZE_Y: number;
static SIZE_Z: number;
}

//net.minecraft.structure.StrongholdGenerator$ChestCorridor
class StrongholdGenerator_ChestCorridor extends StrongholdGenerator_Piece{
 generate(world: StructureWorldAccess,structureAccessor: StructureAccessor,chunkGenerator: ChunkGenerator,random: Random,chunkBox: BlockBox,chunkPos: ChunkPos,pivot: BlockPos): void;
 fillOpenings(start: StructurePiece,holder: StructurePiecesHolder,random: Random): void;
}
class Static_StrongholdGenerator_ChestCorridor {
static create(holder: StructurePiecesHolder,random: Random,x: number,y: number,z: number,orientation: Direction,chainlength: number): StrongholdGenerator_ChestCorridor;
static SIZE_X: number;
static SIZE_Y: number;
static SIZE_Z: number;
}

//net.minecraft.structure.StrongholdGenerator$Turn
class StrongholdGenerator_Turn extends StrongholdGenerator_Piece{
}
class Static_StrongholdGenerator_Turn {
static SIZE_X: number;
static SIZE_Y: number;
static SIZE_Z: number;
}

//net.minecraft.structure.StrongholdGenerator$SpiralStaircase
class StrongholdGenerator_SpiralStaircase extends StrongholdGenerator_Piece{
 generate(world: StructureWorldAccess,structureAccessor: StructureAccessor,chunkGenerator: ChunkGenerator,random: Random,chunkBox: BlockBox,chunkPos: ChunkPos,pivot: BlockPos): void;
 fillOpenings(start: StructurePiece,holder: StructurePiecesHolder,random: Random): void;
}
class Static_StrongholdGenerator_SpiralStaircase {
static create(holder: StructurePiecesHolder,random: Random,x: number,y: number,z: number,orientation: Direction,chainLength: number): StrongholdGenerator_SpiralStaircase;
static SIZE_X: number;
static SIZE_Y: number;
static SIZE_Z: number;
}

//net.minecraft.structure.StrongholdGenerator$Corridor
class StrongholdGenerator_Corridor extends StrongholdGenerator_Piece{
 generate(world: StructureWorldAccess,structureAccessor: StructureAccessor,chunkGenerator: ChunkGenerator,random: Random,chunkBox: BlockBox,chunkPos: ChunkPos,pivot: BlockPos): void;
 fillOpenings(start: StructurePiece,holder: StructurePiecesHolder,random: Random): void;
}
class Static_StrongholdGenerator_Corridor {
static create(holder: StructurePiecesHolder,random: Random,x: number,y: number,z: number,orientation: Direction,chainLength: number): StrongholdGenerator_Corridor;
static SIZE_X: number;
static SIZE_Y: number;
static SIZE_Z: number;
}

//net.minecraft.structure.OceanMonumentGenerator$Penthouse
class OceanMonumentGenerator_Penthouse extends OceanMonumentGenerator_Piece{
 generate(world: StructureWorldAccess,structureAccessor: StructureAccessor,chunkGenerator: ChunkGenerator,random: Random,chunkBox: BlockBox,chunkPos: ChunkPos,pivot: BlockPos): void;
}

//net.minecraft.structure.OceanMonumentGenerator$DoubleYRoom
class OceanMonumentGenerator_DoubleYRoom extends OceanMonumentGenerator_Piece{
 generate(world: StructureWorldAccess,structureAccessor: StructureAccessor,chunkGenerator: ChunkGenerator,random: Random,chunkBox: BlockBox,chunkPos: ChunkPos,pivot: BlockPos): void;
}

//net.minecraft.structure.OceanMonumentGenerator$DoubleZRoom
class OceanMonumentGenerator_DoubleZRoom extends OceanMonumentGenerator_Piece{
 generate(world: StructureWorldAccess,structureAccessor: StructureAccessor,chunkGenerator: ChunkGenerator,random: Random,chunkBox: BlockBox,chunkPos: ChunkPos,pivot: BlockPos): void;
}

//net.minecraft.structure.OceanMonumentGenerator$DoubleYZRoom
class OceanMonumentGenerator_DoubleYZRoom extends OceanMonumentGenerator_Piece{
 generate(world: StructureWorldAccess,structureAccessor: StructureAccessor,chunkGenerator: ChunkGenerator,random: Random,chunkBox: BlockBox,chunkPos: ChunkPos,pivot: BlockPos): void;
}

//net.minecraft.structure.OceanMonumentGenerator$DoubleXYRoom
class OceanMonumentGenerator_DoubleXYRoom extends OceanMonumentGenerator_Piece{
 generate(world: StructureWorldAccess,structureAccessor: StructureAccessor,chunkGenerator: ChunkGenerator,random: Random,chunkBox: BlockBox,chunkPos: ChunkPos,pivot: BlockPos): void;
}

//net.minecraft.structure.OceanMonumentGenerator$DoubleXRoom
class OceanMonumentGenerator_DoubleXRoom extends OceanMonumentGenerator_Piece{
 generate(world: StructureWorldAccess,structureAccessor: StructureAccessor,chunkGenerator: ChunkGenerator,random: Random,chunkBox: BlockBox,chunkPos: ChunkPos,pivot: BlockPos): void;
}

//net.minecraft.structure.OceanMonumentGenerator$SimpleRoomTop
class OceanMonumentGenerator_SimpleRoomTop extends OceanMonumentGenerator_Piece{
 generate(world: StructureWorldAccess,structureAccessor: StructureAccessor,chunkGenerator: ChunkGenerator,random: Random,chunkBox: BlockBox,chunkPos: ChunkPos,pivot: BlockPos): void;
}

//net.minecraft.structure.OceanMonumentGenerator$WingRoom
class OceanMonumentGenerator_WingRoom extends OceanMonumentGenerator_Piece{
 generate(world: StructureWorldAccess,structureAccessor: StructureAccessor,chunkGenerator: ChunkGenerator,random: Random,chunkBox: BlockBox,chunkPos: ChunkPos,pivot: BlockPos): void;
}

//net.minecraft.structure.OceanMonumentGenerator$Base
class OceanMonumentGenerator_Base extends OceanMonumentGenerator_Piece{
 generate(world: StructureWorldAccess,structureAccessor: StructureAccessor,chunkGenerator: ChunkGenerator,random: Random,chunkBox: BlockBox,chunkPos: ChunkPos,pivot: BlockPos): void;
}
class Static_OceanMonumentGenerator_Base {
static field_31602: number;
static field_31603: number;
static field_31604: number;
static field_31606: number;
static field_31605: number;
}

//net.minecraft.structure.OceanMonumentGenerator$Entry
class OceanMonumentGenerator_Entry extends OceanMonumentGenerator_Piece{
 generate(world: StructureWorldAccess,structureAccessor: StructureAccessor,chunkGenerator: ChunkGenerator,random: Random,chunkBox: BlockBox,chunkPos: ChunkPos,pivot: BlockPos): void;
}

//net.minecraft.structure.OceanMonumentGenerator$CoreRoom
class OceanMonumentGenerator_CoreRoom extends OceanMonumentGenerator_Piece{
 generate(world: StructureWorldAccess,structureAccessor: StructureAccessor,chunkGenerator: ChunkGenerator,random: Random,chunkBox: BlockBox,chunkPos: ChunkPos,pivot: BlockPos): void;
}

//net.minecraft.structure.OceanMonumentGenerator$SimpleRoom
class OceanMonumentGenerator_SimpleRoom extends OceanMonumentGenerator_Piece{
 generate(world: StructureWorldAccess,structureAccessor: StructureAccessor,chunkGenerator: ChunkGenerator,random: Random,chunkBox: BlockBox,chunkPos: ChunkPos,pivot: BlockPos): void;
}

//net.minecraft.structure.MineshaftGenerator$MineshaftStairs
class MineshaftGenerator_MineshaftStairs extends MineshaftGenerator_MineshaftPart{
 generate(world: StructureWorldAccess,structureAccessor: StructureAccessor,chunkGenerator: ChunkGenerator,random: Random,chunkBox: BlockBox,chunkPos: ChunkPos,pivot: BlockPos): void;
 fillOpenings(start: StructurePiece,holder: StructurePiecesHolder,random: Random): void;
}
class Static_MineshaftGenerator_MineshaftStairs {
static getBoundingBox(holder: StructurePiecesHolder,random: Random,x: number,y: number,z: number,orientation: Direction): BlockBox;
}

//net.minecraft.structure.MineshaftGenerator$MineshaftCorridor
class MineshaftGenerator_MineshaftCorridor extends MineshaftGenerator_MineshaftPart{
 generate(world: StructureWorldAccess,structureAccessor: StructureAccessor,chunkGenerator: ChunkGenerator,random: Random,chunkBox: BlockBox,chunkPos: ChunkPos,pivot: BlockPos): void;
 fillOpenings(start: StructurePiece,holder: StructurePiecesHolder,random: Random): void;
}
class Static_MineshaftGenerator_MineshaftCorridor {
static getBoundingBox(holder: StructurePiecesHolder,random: Random,x: number,y: number,z: number,orientation: Direction): BlockBox;
static fillColumn(world: StructureWorldAccess,state: BlockState,pos: BlockPos_Mutable,startY: number,endY: number): void;
}

//net.minecraft.structure.MineshaftGenerator$MineshaftCrossing
class MineshaftGenerator_MineshaftCrossing extends MineshaftGenerator_MineshaftPart{
 generate(world: StructureWorldAccess,structureAccessor: StructureAccessor,chunkGenerator: ChunkGenerator,random: Random,chunkBox: BlockBox,chunkPos: ChunkPos,pivot: BlockPos): void;
 fillOpenings(start: StructurePiece,holder: StructurePiecesHolder,random: Random): void;
}
class Static_MineshaftGenerator_MineshaftCrossing {
static getBoundingBox(holder: StructurePiecesHolder,random: Random,x: number,y: number,z: number,orientation: Direction): BlockBox;
}

//net.minecraft.structure.MineshaftGenerator$MineshaftRoom
class MineshaftGenerator_MineshaftRoom extends MineshaftGenerator_MineshaftPart{
 generate(world: StructureWorldAccess,structureAccessor: StructureAccessor,chunkGenerator: ChunkGenerator,random: Random,chunkBox: BlockBox,chunkPos: ChunkPos,pivot: BlockPos): void;
 translate(x: number,y: number,z: number): void;
 fillOpenings(start: StructurePiece,holder: StructurePiecesHolder,random: Random): void;
}
class Static_MineshaftGenerator_MineshaftRoom {
static method_34397(nbtCompound: NbtCompound,nbtElement: NbtElement): void;
}

//net.minecraft.structure.NetherFortressGenerator$CorridorExit
class NetherFortressGenerator_CorridorExit extends NetherFortressGenerator_Piece{
 generate(world: StructureWorldAccess,structureAccessor: StructureAccessor,chunkGenerator: ChunkGenerator,random: Random,chunkBox: BlockBox,chunkPos: ChunkPos,pivot: BlockPos): void;
 fillOpenings(start: StructurePiece,holder: StructurePiecesHolder,random: Random): void;
}
class Static_NetherFortressGenerator_CorridorExit {
static create(holder: StructurePiecesHolder,random: Random,x: number,y: number,z: number,orientation: Direction,chainLength: number): NetherFortressGenerator_CorridorExit;
static SIZE_X: number;
static SIZE_Y: number;
static SIZE_Z: number;
}

//net.minecraft.structure.NetherFortressGenerator$CorridorNetherWartsRoom
class NetherFortressGenerator_CorridorNetherWartsRoom extends NetherFortressGenerator_Piece{
 generate(world: StructureWorldAccess,structureAccessor: StructureAccessor,chunkGenerator: ChunkGenerator,random: Random,chunkBox: BlockBox,chunkPos: ChunkPos,pivot: BlockPos): void;
 fillOpenings(start: StructurePiece,holder: StructurePiecesHolder,random: Random): void;
}
class Static_NetherFortressGenerator_CorridorNetherWartsRoom {
static create(holder: StructurePiecesHolder,x: number,y: number,z: number,orientation: Direction,chainlength: number): NetherFortressGenerator_CorridorNetherWartsRoom;
static SIZE_X: number;
static SIZE_Y: number;
static SIZE_Z: number;
}

//net.minecraft.structure.NetherFortressGenerator$BridgeCrossing
class NetherFortressGenerator_BridgeCrossing extends NetherFortressGenerator_Piece{
 generate(world: StructureWorldAccess,structureAccessor: StructureAccessor,chunkGenerator: ChunkGenerator,random: Random,chunkBox: BlockBox,chunkPos: ChunkPos,pivot: BlockPos): void;
 fillOpenings(start: StructurePiece,holder: StructurePiecesHolder,random: Random): void;
}
class Static_NetherFortressGenerator_BridgeCrossing {
static create(holder: StructurePiecesHolder,x: number,y: number,z: number,orientation: Direction,chainLength: number): NetherFortressGenerator_BridgeCrossing;
static SIZE_X: number;
static SIZE_Y: number;
static SIZE_Z: number;
}

//net.minecraft.structure.NetherFortressGenerator$SmallCorridor
class NetherFortressGenerator_SmallCorridor extends NetherFortressGenerator_Piece{
 generate(world: StructureWorldAccess,structureAccessor: StructureAccessor,chunkGenerator: ChunkGenerator,random: Random,chunkBox: BlockBox,chunkPos: ChunkPos,pivot: BlockPos): void;
 fillOpenings(start: StructurePiece,holder: StructurePiecesHolder,random: Random): void;
}
class Static_NetherFortressGenerator_SmallCorridor {
static create(holder: StructurePiecesHolder,x: number,y: number,z: number,orientation: Direction,chainLength: number): NetherFortressGenerator_SmallCorridor;
static SIZE_X: number;
static SIZE_Y: number;
static SIZE_Z: number;
}

//net.minecraft.structure.NetherFortressGenerator$CorridorLeftTurn
class NetherFortressGenerator_CorridorLeftTurn extends NetherFortressGenerator_Piece{
 generate(world: StructureWorldAccess,structureAccessor: StructureAccessor,chunkGenerator: ChunkGenerator,random: Random,chunkBox: BlockBox,chunkPos: ChunkPos,pivot: BlockPos): void;
 fillOpenings(start: StructurePiece,holder: StructurePiecesHolder,random: Random): void;
}
class Static_NetherFortressGenerator_CorridorLeftTurn {
static create(holder: StructurePiecesHolder,random: Random,x: number,y: number,z: number,orientation: Direction,chainLength: number): NetherFortressGenerator_CorridorLeftTurn;
static SIZE_X: number;
static SIZE_Y: number;
static SIZE_Z: number;
}

//net.minecraft.structure.NetherFortressGenerator$CorridorCrossing
class NetherFortressGenerator_CorridorCrossing extends NetherFortressGenerator_Piece{
 generate(world: StructureWorldAccess,structureAccessor: StructureAccessor,chunkGenerator: ChunkGenerator,random: Random,chunkBox: BlockBox,chunkPos: ChunkPos,pivot: BlockPos): void;
 fillOpenings(start: StructurePiece,holder: StructurePiecesHolder,random: Random): void;
}
class Static_NetherFortressGenerator_CorridorCrossing {
static create(holder: StructurePiecesHolder,x: number,y: number,z: number,orientation: Direction,chainLength: number): NetherFortressGenerator_CorridorCrossing;
static SIZE_X: number;
static SIZE_Y: number;
static SIZE_Z: number;
}

//net.minecraft.structure.NetherFortressGenerator$BridgeStairs
class NetherFortressGenerator_BridgeStairs extends NetherFortressGenerator_Piece{
 generate(world: StructureWorldAccess,structureAccessor: StructureAccessor,chunkGenerator: ChunkGenerator,random: Random,chunkBox: BlockBox,chunkPos: ChunkPos,pivot: BlockPos): void;
 fillOpenings(start: StructurePiece,holder: StructurePiecesHolder,random: Random): void;
}
class Static_NetherFortressGenerator_BridgeStairs {
static create(holder: StructurePiecesHolder,x: number,y: number,z: number,chainlength: number,orientation: Direction): NetherFortressGenerator_BridgeStairs;
static SIZE_X: number;
static SIZE_Y: number;
static SIZE_Z: number;
}

//net.minecraft.structure.NetherFortressGenerator$CorridorRightTurn
class NetherFortressGenerator_CorridorRightTurn extends NetherFortressGenerator_Piece{
 generate(world: StructureWorldAccess,structureAccessor: StructureAccessor,chunkGenerator: ChunkGenerator,random: Random,chunkBox: BlockBox,chunkPos: ChunkPos,pivot: BlockPos): void;
 fillOpenings(start: StructurePiece,holder: StructurePiecesHolder,random: Random): void;
}
class Static_NetherFortressGenerator_CorridorRightTurn {
static create(holder: StructurePiecesHolder,random: Random,x: number,y: number,z: number,orientation: Direction,chainLength: number): NetherFortressGenerator_CorridorRightTurn;
static SIZE_X: number;
static SIZE_Y: number;
static SIZE_Z: number;
}

//net.minecraft.structure.NetherFortressGenerator$Bridge
class NetherFortressGenerator_Bridge extends NetherFortressGenerator_Piece{
 generate(world: StructureWorldAccess,structureAccessor: StructureAccessor,chunkGenerator: ChunkGenerator,random: Random,chunkBox: BlockBox,chunkPos: ChunkPos,pivot: BlockPos): void;
 fillOpenings(start: StructurePiece,holder: StructurePiecesHolder,random: Random): void;
}
class Static_NetherFortressGenerator_Bridge {
static create(holder: StructurePiecesHolder,random: Random,x: number,y: number,z: number,orientation: Direction,chainLength: number): NetherFortressGenerator_Bridge;
static SIZE_X: number;
static SIZE_Y: number;
static SIZE_Z: number;
}

//net.minecraft.structure.NetherFortressGenerator$BridgeEnd
class NetherFortressGenerator_BridgeEnd extends NetherFortressGenerator_Piece{
 generate(world: StructureWorldAccess,structureAccessor: StructureAccessor,chunkGenerator: ChunkGenerator,random: Random,chunkBox: BlockBox,chunkPos: ChunkPos,pivot: BlockPos): void;
}
class Static_NetherFortressGenerator_BridgeEnd {
static create(holder: StructurePiecesHolder,random: Random,x: number,y: number,z: number,orientation: Direction,chainLength: number): NetherFortressGenerator_BridgeEnd;
static SIZE_X: number;
static SIZE_Y: number;
static SIZE_Z: number;
}

//net.minecraft.structure.NetherFortressGenerator$CorridorBalcony
class NetherFortressGenerator_CorridorBalcony extends NetherFortressGenerator_Piece{
 generate(world: StructureWorldAccess,structureAccessor: StructureAccessor,chunkGenerator: ChunkGenerator,random: Random,chunkBox: BlockBox,chunkPos: ChunkPos,pivot: BlockPos): void;
 fillOpenings(start: StructurePiece,holder: StructurePiecesHolder,random: Random): void;
}
class Static_NetherFortressGenerator_CorridorBalcony {
static create(holder: StructurePiecesHolder,x: number,y: number,z: number,orientation: Direction,chainLength: number): NetherFortressGenerator_CorridorBalcony;
static SIZE_X: number;
static SIZE_Y: number;
static SIZE_Z: number;
}

//net.minecraft.structure.NetherFortressGenerator$BridgePlatform
class NetherFortressGenerator_BridgePlatform extends NetherFortressGenerator_Piece{
 generate(world: StructureWorldAccess,structureAccessor: StructureAccessor,chunkGenerator: ChunkGenerator,random: Random,chunkBox: BlockBox,chunkPos: ChunkPos,pivot: BlockPos): void;
}
class Static_NetherFortressGenerator_BridgePlatform {
static create(holder: StructurePiecesHolder,x: number,y: number,z: number,chainLength: number,orientation: Direction): NetherFortressGenerator_BridgePlatform;
static SIZE_X: number;
static SIZE_Y: number;
static SIZE_Z: number;
}

//net.minecraft.structure.NetherFortressGenerator$CorridorStairs
class NetherFortressGenerator_CorridorStairs extends NetherFortressGenerator_Piece{
 generate(world: StructureWorldAccess,structureAccessor: StructureAccessor,chunkGenerator: ChunkGenerator,random: Random,chunkBox: BlockBox,chunkPos: ChunkPos,pivot: BlockPos): void;
 fillOpenings(start: StructurePiece,holder: StructurePiecesHolder,random: Random): void;
}
class Static_NetherFortressGenerator_CorridorStairs {
static create(holder: StructurePiecesHolder,x: number,y: number,z: number,orientation: Direction,chainLength: number): NetherFortressGenerator_CorridorStairs;
static SIZE_X: number;
static SIZE_Y: number;
static SIZE_Z: number;
}

//net.minecraft.structure.NetherFortressGenerator$BridgeSmallCrossing
class NetherFortressGenerator_BridgeSmallCrossing extends NetherFortressGenerator_Piece{
 generate(world: StructureWorldAccess,structureAccessor: StructureAccessor,chunkGenerator: ChunkGenerator,random: Random,chunkBox: BlockBox,chunkPos: ChunkPos,pivot: BlockPos): void;
 fillOpenings(start: StructurePiece,holder: StructurePiecesHolder,random: Random): void;
}
class Static_NetherFortressGenerator_BridgeSmallCrossing {
static create(holder: StructurePiecesHolder,x: number,y: number,z: number,orientation: Direction,chainLength: number): NetherFortressGenerator_BridgeSmallCrossing;
static SIZE_X: number;
static SIZE_Y: number;
static SIZE_Z: number;
}

//net.minecraft.structure.IglooGenerator$Piece
class IglooGenerator_Piece extends SimpleStructurePiece{
 generate(world: StructureWorldAccess,structureAccessor: StructureAccessor,chunkGenerator: ChunkGenerator,random: Random,chunkBox: BlockBox,chunkPos: ChunkPos,pivot: BlockPos): void;
}
class Static_IglooGenerator_Piece {
static getPosOffset(identifier: Identifier,pos: BlockPos,yOffset: number): BlockPos;
static method_35429(nbtCompound: NbtCompound,identifier: Identifier): StructurePlacementData;
static createPlacementData(rotation: BlockRotation,identifier: Identifier): StructurePlacementData;
}

//net.minecraft.structure.WoodlandMansionGenerator$Piece
class WoodlandMansionGenerator_Piece extends SimpleStructurePiece{
}
class Static_WoodlandMansionGenerator_Piece {
static getId(identifier: string): Identifier;
static method_35475(nbtCompound: NbtCompound,id: Identifier): StructurePlacementData;
static createPlacementData(mirror: BlockMirror,rotation: BlockRotation): StructurePlacementData;
}

//net.minecraft.structure.OceanRuinGenerator$Piece
class OceanRuinGenerator_Piece extends SimpleStructurePiece{
 generate(world: StructureWorldAccess,structureAccessor: StructureAccessor,chunkGenerator: ChunkGenerator,random: Random,chunkBox: BlockBox,chunkPos: ChunkPos,pivot: BlockPos): void;
}
class Static_OceanRuinGenerator_Piece {
static fromNbt(structureTemplateManager: StructureTemplateManager,nbt: NbtCompound): OceanRuinGenerator_Piece;
static method_35447(blockRotation: BlockRotation,f: number,biomeTemperature: OceanRuinStructure_BiomeTemperature,identifier: Identifier): StructurePlacementData;
static createPlacementData(rotation: BlockRotation,integrity: number,temperature: OceanRuinStructure_BiomeTemperature): StructurePlacementData;
}

//net.minecraft.structure.NetherFossilGenerator$Piece
class NetherFossilGenerator_Piece extends SimpleStructurePiece{
 generate(world: StructureWorldAccess,structureAccessor: StructureAccessor,chunkGenerator: ChunkGenerator,random: Random,chunkBox: BlockBox,chunkPos: ChunkPos,pivot: BlockPos): void;
}
class Static_NetherFossilGenerator_Piece {
static method_35432(nbtCompound: NbtCompound,id: Identifier): StructurePlacementData;
static createPlacementData(rotation: BlockRotation): StructurePlacementData;
}

//net.minecraft.structure.RuinedPortalStructurePiece
class RuinedPortalStructurePiece extends SimpleStructurePiece{
 generate(world: StructureWorldAccess,structureAccessor: StructureAccessor,chunkGenerator: ChunkGenerator,random: Random,chunkBox: BlockBox,chunkPos: ChunkPos,pivot: BlockPos): void;
}
class Static_RuinedPortalStructurePiece {
static method_35451(structureTemplateManager: StructureTemplateManager,nbtCompound: NbtCompound,id: Identifier): StructurePlacementData;
static method_28950(nbtCompound: NbtCompound,nbtElement: NbtElement): void;
static getBaseHeight(world: WorldAccess,x: number,y: number,verticalPlacement: RuinedPortalStructurePiece_VerticalPlacement): number;
static getHeightmapType(verticalPlacement: RuinedPortalStructurePiece_VerticalPlacement): Heightmap_Type;
static createPlacementData(mirror: BlockMirror,rotation: BlockRotation,verticalPlacement: RuinedPortalStructurePiece_VerticalPlacement,pos: BlockPos,properties: RuinedPortalStructurePiece_Properties): StructurePlacementData;
static createPlacementData(manager: StructureTemplateManager,nbt: NbtCompound,id: Identifier): StructurePlacementData;
static createReplacementRule(old: Block,chance: number,updated: Block): StructureProcessorRule;
static createReplacementRule(old: Block,updated: Block): StructureProcessorRule;
static createLavaReplacementRule(verticalPlacement: RuinedPortalStructurePiece_VerticalPlacement,properties: RuinedPortalStructurePiece_Properties): StructureProcessorRule;
static LOGGER: Logger;
static field_31620: number;
static field_31621: number;
static field_31622: number;
}

//net.minecraft.structure.EndCityGenerator$Piece
class EndCityGenerator_Piece extends SimpleStructurePiece{
}
class Static_EndCityGenerator_Piece {
static getId(template: string): Identifier;
static method_35426(nbtCompound: NbtCompound,id: Identifier): StructurePlacementData;
static createPlacementData(includeAir: boolean,rotation: BlockRotation): StructurePlacementData;
}

//net.minecraft.structure.ShipwreckGenerator$Piece
class ShipwreckGenerator_Piece extends SimpleStructurePiece{
 generate(world: StructureWorldAccess,structureAccessor: StructureAccessor,chunkGenerator: ChunkGenerator,random: Random,chunkBox: BlockBox,chunkPos: ChunkPos,pivot: BlockPos): void;
}
class Static_ShipwreckGenerator_Piece {
static method_35453(nbtCompound: NbtCompound,id: Identifier): StructurePlacementData;
static createPlacementData(rotation: BlockRotation): StructurePlacementData;
}

//net.minecraft.client.gui.widget.AlwaysSelectedEntryListWidget
class AlwaysSelectedEntryListWidget extends EntryListWidget{
 appendNarrations(builder: NarrationMessageBuilder): void;
 getNavigationPath(navigation: GuiNavigation): GuiNavigationPath;
}
class Static_AlwaysSelectedEntryListWidget {
static SELECTION_USAGE_TEXT: Text;
}

//net.minecraft.client.gui.widget.ElementListWidget
class ElementListWidget extends EntryListWidget{
 getType(): Selectable_SelectionType;
 appendNarrations(builder: NarrationMessageBuilder): void;
 setFocused(focused: Element): void;
 getNavigationPath(navigation: GuiNavigation): GuiNavigationPath;
}
class Static_ElementListWidget {
static method_48207(element: ElementListWidget_Entry): boolean;
}

//net.minecraft.client.gui.screen.pack.ExperimentalWarningScreen$DetailsScreen
class ExperimentalWarningScreen_DetailsScreen extends Screen{
 close(): void;
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
}
class Static_ExperimentalWarningScreen_DetailsScreen {
static method_45674(detailsScreen: ExperimentalWarningScreen_DetailsScreen): TextRenderer;
static method_45673(detailsScreen: ExperimentalWarningScreen_DetailsScreen): MinecraftClient;
static method_45672(detailsScreen: ExperimentalWarningScreen_DetailsScreen): TextRenderer;
}

//net.minecraft.client.gui.screen.world.SelectWorldScreen
class SelectWorldScreen extends Screen{
 close(): void;
 removed(): void;
 tick(): void;
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
 charTyped(chr: char,modifiers: number): boolean;
 keyPressed(keyCode: number,scanCode: number,modifiers: number): boolean;
 worldSelected(buttonsActive: boolean,deleteButtonActive: boolean): void;
}
class Static_SelectWorldScreen {
static LOGGER: Logger;
static DEBUG_GENERATOR_OPTIONS: GeneratorOptions;
}

//net.minecraft.client.gui.screen.ConfirmScreen
class ConfirmScreen extends Screen{
 tick(): void;
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
 keyPressed(keyCode: number,scanCode: number,modifiers: number): boolean;
 disableButtons(ticks: number): void;
 getNarratedTitle(): Text;
 shouldCloseOnEsc(): boolean;
}
class Static_ConfirmScreen {
static TITLE_BOTTOM_MARGIN: number;
}

//net.minecraft.client.gui.screen.report.ChatSelectionScreen
class ChatSelectionScreen extends Screen{
 close(): void;
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
 getNarratedTitle(): Text;
}
class Static_ChatSelectionScreen {
static method_44500(chatSelectionScreen: ChatSelectionScreen): TextRenderer;
static method_44501(chatSelectionScreen: ChatSelectionScreen): TextRenderer;
static method_44499(chatSelectionScreen: ChatSelectionScreen): TextRenderer;
static method_44502(chatSelectionScreen: ChatSelectionScreen): TextRenderer;
static method_44726(chatSelectionScreen: ChatSelectionScreen): TextRenderer;
static method_44497(chatSelectionScreen: ChatSelectionScreen): TextRenderer;
static method_44506(chatSelectionScreen: ChatSelectionScreen): TextRenderer;
static method_44664(chatSelectionScreen: ChatSelectionScreen): TextRenderer;
static method_44505(chatSelectionScreen: ChatSelectionScreen): TextRenderer;
static method_44728(chatSelectionScreen: ChatSelectionScreen): TextRenderer;
static method_44727(chatSelectionScreen: ChatSelectionScreen): TextRenderer;
static method_44508(chatSelectionScreen: ChatSelectionScreen): TextRenderer;
static method_44494(chatSelectionScreen: ChatSelectionScreen): TextRenderer;
static TITLE: Text;
static CONTEXT_MESSAGE: Text;
}

//net.minecraft.client.gui.screen.pack.PackScreen
class PackScreen extends Screen{
 close(): void;
 tick(): void;
 clearSelection(): void;
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
 switchFocusedList(listWidget: PackListWidget): void;
 filesDragged(paths: List): void;
}
class Static_PackScreen {
static method_29674(path: Path,path2: Path,mutableBoolean: MutableBoolean,toCopy: Path): void;
static method_29675(path: Path,mutableBoolean: MutableBoolean,src: Path): void;
static copyPacks(client: MinecraftClient,srcPaths: List,destPath: Path): void;
static LOGGER: Logger;
static field_32395: number;
static DROP_INFO: Text;
static FOLDER_INFO: Text;
static field_32396: number;
static UNKNOWN_PACK: Identifier;
}

//net.minecraft.client.gui.screen.OutOfMemoryScreen
class OutOfMemoryScreen extends Screen{
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
 shouldCloseOnEsc(): boolean;
}

//net.minecraft.client.gui.screen.DialogScreen
class DialogScreen extends Screen{
 init(): void;
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
 getNarratedTitle(): Text;
 shouldCloseOnEsc(): boolean;
}
class Static_DialogScreen {
static BUTTON_PADDING: number;
static BUTTON_MARGIN: number;
static BUTTON_HEIGHT: number;
}

//net.minecraft.client.gui.screen.DisconnectedScreen
class DisconnectedScreen extends Screen{
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
 getNarratedTitle(): Text;
 shouldCloseOnEsc(): boolean;
}
class Static_DisconnectedScreen {
static TO_MENU_TEXT: Text;
static TO_TITLE_TEXT: Text;
}

//net.minecraft.client.gui.screen.AccessibilityOnboardingScreen
class AccessibilityOnboardingScreen extends Screen{
 init(): void;
 close(): void;
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
}
class Static_AccessibilityOnboardingScreen {
static NARRATOR_PROMPT: Text;
static field_41838: number;
static field_41839: number;
}

//net.minecraft.client.gui.screen.OpenToLanScreen
class OpenToLanScreen extends Screen{
 tick(): void;
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
}
class Static_OpenToLanScreen {
static MIN_PORT: number;
static MAX_PORT: number;
static ALLOW_COMMANDS_TEXT: Text;
static GAME_MODE_TEXT: Text;
static OTHER_PLAYERS_TEXT: Text;
static PORT_TEXT: Text;
static UNAVAILABLE_PORT_TEXT: Text;
static INVALID_PORT_TEXT: Text;
static ERROR_TEXT_COLOR: number;
}

//net.minecraft.client.gui.screen.world.EditWorldScreen
class EditWorldScreen extends Screen{
 close(): void;
 resize(client: MinecraftClient,width: number,height: number): void;
 tick(): void;
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
}
class Static_EditWorldScreen {
static backupLevel(storageSession: LevelStorage_Session): boolean;
static method_37471(path: Path): void;
static method_37470(path: Path): boolean;
static onBackupConfirm(storage: LevelStorage,levelName: string): void;
static LOGGER: Logger;
static ENTER_NAME_TEXT: Text;
}

//net.minecraft.client.gui.screen.ingame.AbstractCommandBlockScreen
class AbstractCommandBlockScreen extends Screen{
 resize(client: MinecraftClient,width: number,height: number): void;
 tick(): void;
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
 mouseScrolled(mouseX: number,mouseY: number,amount: number): boolean;
 keyPressed(keyCode: number,scanCode: number,modifiers: number): boolean;
 mouseClicked(mouseX: number,mouseY: number,button: number): boolean;
}
class Static_AbstractCommandBlockScreen {
static SET_COMMAND_TEXT: Text;
static COMMAND_TEXT: Text;
static PREVIOUS_OUTPUT_TEXT: Text;
}

//net.minecraft.client.gui.screen.NoticeScreen
class NoticeScreen extends Screen{
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
 getNarratedTitle(): Text;
 shouldCloseOnEsc(): boolean;
}
class Static_NoticeScreen {
static NOTICE_TEXT_Y: number;
}

//net.minecraft.client.gui.screen.option.CreditsAndAttributionScreen
class CreditsAndAttributionScreen extends Screen{
 close(): void;
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
}
class Static_CreditsAndAttributionScreen {
static SPACING: number;
static BUTTON_WIDTH: number;
static TITLE: Text;
static CREDITS_TEXT: Text;
static ATTRIBUTION_TEXT: Text;
static LICENSE_TEXT: Text;
}

//net.minecraft.client.gui.screen.world.EditGameRulesScreen
class EditGameRulesScreen extends Screen{
 close(): void;
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
}
class Static_EditGameRulesScreen {
static method_29985(editGameRulesScreen: EditGameRulesScreen): MinecraftClient;
static method_27627(editGameRulesScreen: EditGameRulesScreen): MinecraftClient;
static method_27630(editGameRulesScreen: EditGameRulesScreen): MinecraftClient;
static method_29986(editGameRulesScreen: EditGameRulesScreen): MinecraftClient;
static method_27629(editGameRulesScreen: EditGameRulesScreen): MinecraftClient;
static method_27621(editGameRulesScreen: EditGameRulesScreen): MinecraftClient;
static method_48682(editGameRulesScreen: EditGameRulesScreen,child: Element): void;
static method_29984(editGameRulesScreen: EditGameRulesScreen): MinecraftClient;
static method_27631(editGameRulesScreen: EditGameRulesScreen): TextRenderer;
}

//net.minecraft.client.gui.screen.ChatScreen
class ChatScreen extends Screen{
 normalize(chatText: string): string;
 removed(): void;
 resize(client: MinecraftClient,width: number,height: number): void;
 tick(): void;
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
 mouseScrolled(mouseX: number,mouseY: number,amount: number): boolean;
 sendMessage(chatText: string,addToHistory: boolean): boolean;
 keyPressed(keyCode: number,scanCode: number,modifiers: number): boolean;
 mouseClicked(mouseX: number,mouseY: number,button: number): boolean;
 setChatFromHistory(offset: number): void;
 shouldPause(): boolean;
}
class Static_ChatScreen {
static SHIFT_SCROLL_AMOUNT: number;
static USAGE_TEXT: Text;
static MAX_INDICATOR_TOOLTIP_WIDTH: number;
}

//net.minecraft.client.gui.screen.ingame.StructureBlockScreen
class StructureBlockScreen extends Screen{
 close(): void;
 resize(client: MinecraftClient,width: number,height: number): void;
 tick(): void;
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
 keyPressed(keyCode: number,scanCode: number,modifiers: number): boolean;
 shouldPause(): boolean;
}
class Static_StructureBlockScreen {
static method_32654(value: StructureBlockMode): Text;
static method_32656(mode: StructureBlockMode): boolean;
static method_16017(structureBlockScreen: StructureBlockScreen,string: string,c: char,i: number): boolean;
static STRUCTURE_NAME_TEXT: Text;
static POSITION_TEXT: Text;
static SIZE_TEXT: Text;
static INTEGRITY_TEXT: Text;
static CUSTOM_DATA_TEXT: Text;
static INCLUDE_ENTITIES_TEXT: Text;
static DETECT_SIZE_TEXT: Text;
static SHOW_AIR_TEXT: Text;
static SHOW_BOUNDING_BOX_TEXT: Text;
static MODES: ImmutableList;
static MODES_EXCEPT_DATA: ImmutableList;
}

//net.minecraft.client.gui.screen.AddServerScreen
class AddServerScreen extends Screen{
 close(): void;
 resize(client: MinecraftClient,width: number,height: number): void;
 tick(): void;
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
}
class Static_AddServerScreen {
static ENTER_NAME_TEXT: Text;
static ENTER_IP_TEXT: Text;
}

//net.minecraft.client.gui.screen.ingame.BookEditScreen
class BookEditScreen extends Screen{
 tick(): void;
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
 charTyped(chr: char,modifiers: number): boolean;
 keyPressed(keyCode: number,scanCode: number,modifiers: number): boolean;
 mouseClicked(mouseX: number,mouseY: number,button: number): boolean;
 mouseDragged(mouseX: number,mouseY: number,button: number,deltaX: number,deltaY: number): boolean;
}
class Static_BookEditScreen {
static getLineFromOffset(lineStarts: number[],position: number): number;
static method_27593(string: string): boolean;
static MAX_TEXT_WIDTH: number;
static MAX_TEXT_HEIGHT: number;
static WIDTH: number;
static HEIGHT: number;
static EDIT_TITLE_TEXT: Text;
static FINALIZE_WARNING_TEXT: Text;
static BLACK_CURSOR_TEXT: OrderedText;
static GRAY_CURSOR_TEXT: OrderedText;
}

//net.minecraft.client.gui.screen.world.CreateWorldScreen
class CreateWorldScreen extends Screen{
 close(): void;
 tick(): void;
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
 onCloseScreen(): void;
 keyPressed(keyCode: number,scanCode: number,modifiers: number): boolean;
 getWorldCreator(): WorldCreator;
 renderBackgroundTexture(context: DrawContext): void;
 initTabNavigation(): void;
}
class Static_CreateWorldScreen {
static create(client: MinecraftClient,parent: Screen): void;
static create(client: MinecraftClient,parent: Screen,levelInfo: LevelInfo,generatorOptionsHolder: GeneratorOptionsHolder,dataPackTempDir: Path): CreateWorldScreen;
static createServerConfig(dataPackManager: ResourcePackManager,dataConfiguration: DataConfiguration): SaveLoading_ServerConfig;
static showMessage(client: MinecraftClient,text: Text): void;
static method_45686(context: SaveLoading_LoadContextSupplierContext): SaveLoading_LoadContext;
static method_29983(list: List,name: string): boolean;
static method_48650(createWorldScreen: CreateWorldScreen,child: Element): void;
static method_41851(resourceManager: LifecycledResourceManager,dataPackContents: DataPackContents,combinedDynamicRegistries: CombinedDynamicRegistries,generatorOptions: CreateWorldScreen_WorldCreationSettings): GeneratorOptionsHolder;
static copyDataPack(srcFolder: Path,destFolder: Path,dataPackFile: Path): void;
static copyDataPack(srcFolder: Path,client: MinecraftClient): Path;
static method_45682(dynamicOps: DynamicOps,json: JsonElement): DataResult;
static method_29686(path: Path,dataPackFile: Path): boolean;
static method_45681(resourceManager: LifecycledResourceManager,dataPackContents: DataPackContents,combinedDynamicRegistries: CombinedDynamicRegistries,context: CreateWorldScreen_WorldCreationSettings): GeneratorOptionsHolder;
static method_29689(path: Path): void;
static method_29688(mutableObject: MutableObject,path: Path,dataPackFile: Path): void;
static method_48652(createWorldScreen: CreateWorldScreen): TextRenderer;
static method_48651(createWorldScreen: CreateWorldScreen): TextRenderer;
static method_48656(createWorldScreen: CreateWorldScreen): MinecraftClient;
static method_48653(createWorldScreen: CreateWorldScreen): MinecraftClient;
static method_48655(createWorldScreen: CreateWorldScreen): MinecraftClient;
static method_48646(createWorldScreen: CreateWorldScreen): MinecraftClient;
static method_48649(createWorldScreen: CreateWorldScreen): TextRenderer;
static method_48647(createWorldScreen: CreateWorldScreen,element: Element): void;
static field_42165: number;
static field_42166: number;
static field_42167: number;
static field_42168: number;
static LOGGER: Logger;
static TEMP_DIR_PREFIX: string;
static GAME_MODE_TEXT: Text;
static ENTER_NAME_TEXT: Text;
static EXPERIMENTS_TEXT: Text;
static ALLOW_COMMANDS_INFO_TEXT: Text;
static PREPARING_TEXT: Text;
static field_42170: number;
static field_42171: number;
static HEADER_SEPARATOR_TEXTURE: Identifier;
static FOOTER_SEPARATOR_TEXTURE: Identifier;
static LIGHT_DIRT_BACKGROUND_TEXTURE: Identifier;
}

//net.minecraft.client.gui.screen.ConnectScreen
class ConnectScreen extends Screen{
 tick(): void;
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
 shouldCloseOnEsc(): boolean;
}
class Static_ConnectScreen {
static connect(screen: Screen,client: MinecraftClient,address: ServerAddress,info: ServerInfo,quickPlay: boolean): void;
static CONNECTOR_THREADS_COUNT: AtomicInteger;
static LOGGER: Logger;
static NARRATOR_INTERVAL: long;
static ABORTED_TEXT: Text;
static BLOCKED_HOST_TEXT: Text;
}

//net.minecraft.client.gui.screen.GameModeSelectionScreen
class GameModeSelectionScreen extends Screen{
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
 keyPressed(keyCode: number,scanCode: number,modifiers: number): boolean;
 shouldPause(): boolean;
}
class Static_GameModeSelectionScreen {
static apply(client: MinecraftClient,gameModeSelection: GameModeSelectionScreen_GameModeSelection): void;
static TEXTURE: Identifier;
static TEXTURE_WIDTH: number;
static TEXTURE_HEIGHT: number;
static BUTTON_SIZE: number;
static ICON_OFFSET: number;
static field_32314: number;
static field_32315: number;
static UI_WIDTH: number;
static SELECT_NEXT_TEXT: Text;
}

//net.minecraft.client.gui.screen.WarningScreen
class WarningScreen extends Screen{
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
 getNarratedTitle(): Text;
}

//net.minecraft.client.gui.screen.option.GameOptionsScreen
class GameOptionsScreen extends Screen{
 close(): void;
 removed(): void;
}

//net.minecraft.client.gui.screen.option.OptionsScreen
class OptionsScreen extends Screen{
 removed(): void;
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
}
class Static_OptionsScreen {
static method_39487(minecraftClient: MinecraftClient,button: CyclingButtonWidget,difficulty: Difficulty): void;
static createDifficultyButtonWidget(x: number,y: number,translationKey: string,client: MinecraftClient): CyclingButtonWidget;
static SKIN_CUSTOMIZATION_TEXT: Text;
static SOUNDS_TEXT: Text;
static VIDEO_TEXT: Text;
static CONTROL_TEXT: Text;
static LANGUAGE_TEXT: Text;
static CHAT_TEXT: Text;
static RESOURCE_PACK_TEXT: Text;
static ACCESSIBILITY_TEXT: Text;
static TELEMETRY_TEXT: Text;
static CREDITS_AND_ATTRIBUTION_TEXT: Text;
static COLUMNS: number;
}

//net.minecraft.client.gui.screen.GameMenuScreen
class GameMenuScreen extends Screen{
 tick(): void;
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
}
class Static_GameMenuScreen {
static GRID_COLUMNS: number;
static BUTTONS_TOP_MARGIN: number;
static GRID_MARGIN: number;
static WIDE_BUTTON_WIDTH: number;
static NORMAL_BUTTON_WIDTH: number;
static RETURN_TO_GAME_TEXT: Text;
static ADVANCEMENTS_TEXT: Text;
static STATS_TEXT: Text;
static SEND_FEEDBACK_TEXT: Text;
static REPORT_BUGS_TEXT: Text;
static OPTIONS_TEXT: Text;
static SHARE_TO_LAN_TEXT: Text;
static PLAYER_REPORTING_TEXT: Text;
static RETURN_TO_MENU_TEXT: Text;
static DISCONNECT_TEXT: Text;
static SAVING_LEVEL_TEXT: Text;
static GAME_TEXT: Text;
static PAUSED_TEXT: Text;
}

//net.minecraft.client.gui.screen.TitleScreen
class TitleScreen extends Screen{
 removed(): void;
 tick(): void;
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
 mouseClicked(mouseX: number,mouseY: number,button: number): boolean;
 shouldCloseOnEsc(): boolean;
 onDisplayed(): void;
 shouldPause(): boolean;
}
class Static_TitleScreen {
static loadTexturesAsync(textureManager: TextureManager,executor: Executor): CompletableFuture;
static method_48268(): LogoDrawer;
static LOGGER: Logger;
static DEMO_WORLD_NAME: string;
static COPYRIGHT: Text;
static PANORAMA_CUBE_MAP: CubeMapRenderer;
static PANORAMA_OVERLAY: Identifier;
}

//net.minecraft.client.gui.screen.TaskScreen
class TaskScreen extends Screen{
 close(): void;
 tick(): void;
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
 getNarratedTitle(): Text;
 shouldCloseOnEsc(): boolean;
}
class Static_TaskScreen {
static createResultScreen(title: Text,descriptionText: Text,closeButtonText: Text,closeCallback: Runnable): TaskScreen;
static createRunningScreen(title: Text,closeButtonText: Text,closeCallback: Runnable): TaskScreen;
static TITLE_TEXT_Y: number;
static DESCRIPTION_TEXT_Y: number;
static DESCRIPTION_TEXT_WIDTH: number;
}

//net.minecraft.client.gui.screen.DatapackFailureScreen
class DatapackFailureScreen extends Screen{
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
 shouldCloseOnEsc(): boolean;
}

//net.minecraft.client.gui.screen.CustomizeFlatLevelScreen
class CustomizeFlatLevelScreen extends Screen{
 close(): void;
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
 getConfig(): FlatChunkGeneratorConfig;
 setConfig(config: FlatChunkGeneratorConfig): void;
}
class Static_CustomizeFlatLevelScreen {
static ICON_TEXTURE_SIZE: number;
static ICON_SIZE: number;
static BUTTON_HEIGHT: number;
static ICON_BACKGROUND_OFFSET_X: number;
static ICON_BACKGROUND_OFFSET_Y: number;
static ICON_OFFSET_X: number;
static ICON_OFFSET_Y: number;
}

//net.minecraft.client.gui.screen.MessageScreen
class MessageScreen extends Screen{
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
 shouldCloseOnEsc(): boolean;
}

//net.minecraft.client.realms.gui.screen.RealmsScreen
class RealmsScreen extends Screen{
 narrateLabels(): Text;
}
class Static_RealmsScreen {
static row(index: number): number;
static field_33055: number;
static field_33056: number;
static field_33057: number;
static MAX_FILE_SIZE: long;
static WHITE: number;
static field_33060: number;
static field_33061: number;
static field_33062: number;
static field_33063: number;
static field_33064: number;
static RED: number;
static field_33036: number;
static field_33037: number;
static field_33038: number;
static field_33039: number;
static field_33040: number;
static field_33041: number;
static field_33042: number;
static field_33043: number;
static ADVENTURE_MAPS_IN_1_9_URL: string;
static field_39676: number;
}

//net.minecraft.client.gui.screen.report.AbuseReportReasonScreen
class AbuseReportReasonScreen extends Screen{
 close(): void;
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
}
class Static_AbuseReportReasonScreen {
static method_44521(abuseReportReasonScreen: AbuseReportReasonScreen): TextRenderer;
static method_44671(abuseReportReasonScreen: AbuseReportReasonScreen): TextRenderer;
static TITLE_TEXT: Text;
static DESCRIPTION_TEXT: Text;
static READ_INFO_TEXT: Text;
static REASON_LIST_BOTTOM_MARGIN: number;
static DONE_BUTTON_WIDTH: number;
static DONE_BUTTON_HEIGHT: number;
static SCREEN_WIDTH: number;
static TOP_MARGIN: number;
}

//net.minecraft.client.gui.screen.CreditsScreen
class CreditsScreen extends Screen{
 close(): void;
 removed(): void;
 tick(): void;
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
 getMusic(): MusicSound;
 keyPressed(keyCode: number,scanCode: number,modifiers: number): boolean;
 keyReleased(keyCode: number,scanCode: number,modifiers: number): boolean;
}
class Static_CreditsScreen {
static LOGGER: Logger;
static VIGNETTE_TEXTURE: Identifier;
static SEPARATOR_LINE: Text;
static CENTERED_LINE_PREFIX: string;
static OBFUSCATION_PLACEHOLDER: string;
static SPACE_BAR_SPEED_MULTIPLIER: number;
static CTRL_KEY_SPEED_MULTIPLIER: number;
}

//net.minecraft.client.gui.screen.DirectConnectScreen
class DirectConnectScreen extends Screen{
 close(): void;
 removed(): void;
 resize(client: MinecraftClient,width: number,height: number): void;
 tick(): void;
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
 keyPressed(keyCode: number,scanCode: number,modifiers: number): boolean;
}
class Static_DirectConnectScreen {
static ENTER_IP_TEXT: Text;
}

//net.minecraft.client.gui.screen.multiplayer.SocialInteractionsScreen
class SocialInteractionsScreen extends Screen{
 tick(): void;
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
 setPlayerOffline(uuid: UUID): void;
 setPlayerOnline(player: PlayerListEntry): void;
 keyPressed(keyCode: number,scanCode: number,modifiers: number): boolean;
 renderBackground(context: DrawContext): void;
 getNarratedTitle(): Text;
 shouldPause(): boolean;
}
class Static_SocialInteractionsScreen {
static SOCIAL_INTERACTIONS_TEXTURE: Identifier;
static ALL_TAB_TITLE: Text;
static HIDDEN_TAB_TITLE: Text;
static BLOCKED_TAB_TITLE: Text;
static SELECTED_ALL_TAB_TITLE: Text;
static SELECTED_HIDDEN_TAB_TITLE: Text;
static SELECTED_BLOCKED_TAB_TITLE: Text;
static SEARCH_TEXT: Text;
static EMPTY_SEARCH_TEXT: Text;
static EMPTY_HIDDEN_TEXT: Text;
static EMPTY_BLOCKED_TEXT: Text;
static BLOCKING_TEXT: Text;
static field_32424: number;
static field_32426: number;
static field_32427: number;
static field_32428: number;
static field_32433: number;
static field_32432: number;
static field_32429: number;
static field_32430: number;
static field_32431: number;
}

//net.minecraft.client.gui.screen.DeathScreen
class DeathScreen extends Screen{
 tick(): void;
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
 mouseClicked(mouseX: number,mouseY: number,button: number): boolean;
 shouldCloseOnEsc(): boolean;
 shouldPause(): boolean;
}

//net.minecraft.client.gui.screen.pack.ExperimentalWarningScreen
class ExperimentalWarningScreen extends Screen{
 close(): void;
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
 getNarratedTitle(): Text;
}
class Static_ExperimentalWarningScreen {
static method_49008(experimentalWarningScreen: ExperimentalWarningScreen,child: Element): void;
static TITLE: Text;
static MESSAGE: Text;
static DETAILS: Text;
static field_42498: number;
static field_42499: number;
}

//net.minecraft.client.gui.screen.PresetsScreen
class PresetsScreen extends Screen{
 close(): void;
 resize(client: MinecraftClient,width: number,height: number): void;
 tick(): void;
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
 mouseScrolled(mouseX: number,mouseY: number,amount: number): boolean;
 updateSelectButton(hasSelected: boolean): void;
}
class Static_PresetsScreen {
static method_40208(): IllegalStateException;
static parseLayerString(blockLookup: RegistryEntryLookup,layer: string,layerStartHeight: number): FlatChunkGeneratorLayer;
static method_46741(string: string,reference: RegistryEntry_Reference): RegistryEntry_Reference;
static method_29061(biomeId: Identifier): RegistryKey;
static parsePresetString(blockLookup: RegistryEntryLookup,biomeLookup: RegistryEntryLookup,structureSetLookup: RegistryEntryLookup,placedFeatureLookup: RegistryEntryLookup,preset: string,config: FlatChunkGeneratorConfig): FlatChunkGeneratorConfig;
static parsePresetLayersString(blockLookup: RegistryEntryLookup,layers: string): List;
static getGeneratorConfigString(config: FlatChunkGeneratorConfig): string;
static LOGGER: Logger;
static ICON_TEXTURE_SIZE: number;
static ICON_SIZE: number;
static BUTTON_HEIGHT: number;
static ICON_BACKGROUND_OFFSET_X: number;
static ICON_BACKGROUND_OFFSET_Y: number;
static ICON_OFFSET_X: number;
static ICON_OFFSET_Y: number;
static BIOME_KEY: RegistryKey;
static UNKNOWN_PRESET_TEXT: Text;
}

//net.minecraft.client.gui.screen.world.OptimizeWorldScreen
class OptimizeWorldScreen extends Screen{
 close(): void;
 removed(): void;
 tick(): void;
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
}
class Static_OptimizeWorldScreen {
static create(client: MinecraftClient,callback: BooleanConsumer,dataFixer: DataFixer,storageSession: LevelStorage_Session,eraseCache: boolean): OptimizeWorldScreen;
static method_2747(colors: Object2IntOpenCustomHashMap): void;
static LOGGER: Logger;
static DIMENSION_COLORS: Object2IntMap;
}

//net.minecraft.client.gui.screen.ingame.BookScreen
class BookScreen extends Screen{
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
 getTextStyleAt(x: number,y: number): Style;
 keyPressed(keyCode: number,scanCode: number,modifiers: number): boolean;
 mouseClicked(mouseX: number,mouseY: number,button: number): boolean;
 setPageProvider(pageProvider: BookScreen_Contents): void;
 setPage(index: number): boolean;
 handleTextClick(style: Style): boolean;
}
class Static_BookScreen {
static readPages(nbt: NbtCompound): List;
static method_33889(nbtCompound: NbtCompound,nbtList: NbtList,page: number): string;
static filterPages(nbt: NbtCompound,pageConsumer: Consumer): void;
static field_32328: number;
static field_32329: number;
static field_32330: number;
static EMPTY_PROVIDER: BookScreen_Contents;
static BOOK_TEXTURE: Identifier;
static MAX_TEXT_WIDTH: number;
static MAX_TEXT_HEIGHT: number;
static WIDTH: number;
static HEIGHT: number;
}

//net.minecraft.client.gui.screen.LevelLoadingScreen
class LevelLoadingScreen extends Screen{
 removed(): void;
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
 shouldCloseOnEsc(): boolean;
}
class Static_LevelLoadingScreen {
static drawChunkMap(context: DrawContext,progressProvider: WorldGenerationProgressTracker,centerX: number,centerY: number,pixelSize: number,pixelMargin: number): void;
static method_17537(map: Object2IntOpenHashMap): void;
static method_51767(i: number,drawContext: DrawContext,j: number,k: number,l: number,m: number,n: number,worldGenerationProgressTracker: WorldGenerationProgressTracker,o: number,p: number,q: number): void;
static NARRATION_DELAY: long;
static STATUS_TO_COLOR: Object2IntMap;
}

//net.minecraft.client.gui.screen.world.SymlinkWarningScreen
class SymlinkWarningScreen extends Screen{
 close(): void;
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
 getNarratedTitle(): Text;
}
class Static_SymlinkWarningScreen {
static method_52264(button: ButtonWidget): void;
static TITLE: Text;
static MESSAGE: Text;
}

//net.minecraft.client.gui.screen.CustomizeBuffetLevelScreen
class CustomizeBuffetLevelScreen extends Screen{
 close(): void;
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
}
class Static_CustomizeBuffetLevelScreen {
static BUFFET_BIOME_TEXT: Text;
}

//net.minecraft.client.gui.screen.option.TelemetryInfoScreen
class TelemetryInfoScreen extends Screen{
 close(): void;
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
 getNarratedTitle(): Text;
}
class Static_TelemetryInfoScreen {
static method_48286(telemetryInfoScreen: TelemetryInfoScreen,child: Element): void;
static MARGIN: number;
static TITLE_TEXT: Text;
static DESCRIPTION_TEXT: Text;
static GIVE_FEEDBACK_TEXT: Text;
static SHOW_DATA_TEXT: Text;
}

//net.minecraft.client.gui.screen.DownloadingTerrainScreen
class DownloadingTerrainScreen extends Screen{
 close(): void;
 tick(): void;
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
 setReady(): void;
 shouldCloseOnEsc(): boolean;
 shouldPause(): boolean;
}
class Static_DownloadingTerrainScreen {
static TEXT: Text;
static MIN_LOAD_TIME_MS: long;
}

//net.minecraft.client.gui.screen.report.ChatReportScreen
class ChatReportScreen extends Screen{
 close(): void;
 removed(): void;
 tick(): void;
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
 mouseReleased(mouseX: number,mouseY: number,button: number): boolean;
}
class Static_ChatReportScreen {
static method_47430(error: ChatAbuseReport_ValidationError): Tooltip;
static BOTTOM_BUTTON_WIDTH: number;
static BUTTON_HEIGHT: number;
static BUTTON_TOP_MARGIN: number;
static BUTTON_BOTTOM_MARGIN: number;
static REASON_DESCRIPTION_TOP_MARGIN: number;
static REASON_DESCRIPTION_TEXT_WIDTH: number;
static SCREEN_HEIGHT: number;
static OBSERVED_WHAT_TEXT: Text;
static SELECT_REASON_TEXT: Text;
static MORE_COMMENTS_TEXT: Text;
static DESCRIBE_TEXT: Text;
static REPORT_SENT_MESSAGE_TEXT: Text;
static SELECT_CHAT_TEXT: Text;
static SENDING_TEXT: Text;
static REPORT_SENT_TITLE: Text;
static REPORT_ERROR_TITLE: Text;
static GENERIC_ERROR_TEXT: Text;
static LOGGER: Logger;
}

//net.minecraft.client.gui.screen.world.ExperimentsScreen
class ExperimentsScreen extends Screen{
 close(): void;
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
}
class Static_ExperimentsScreen {
static method_49019(experimentsScreen: ExperimentsScreen,widget: Element): void;
static getDataPackName(packProfile: ResourcePackProfile): Text;
static method_49021(list: List,list2: List,pack: ResourcePackProfile,enabled: Boolean): void;
static INFO_WIDTH: number;
}

//net.minecraft.client.gui.screen.DemoScreen
class DemoScreen extends Screen{
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
 renderBackground(context: DrawContext): void;
}
class Static_DemoScreen {
static method_19811(button: ButtonWidget): void;
static DEMO_BG: Identifier;
}

//net.minecraft.client.gui.screen.BackupPromptScreen
class BackupPromptScreen extends Screen{
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
 keyPressed(keyCode: number,scanCode: number,modifiers: number): boolean;
 shouldCloseOnEsc(): boolean;
}

//net.minecraft.client.gui.screen.multiplayer.MultiplayerScreen
class MultiplayerScreen extends Screen{
 connect(): void;
 removed(): void;
 tick(): void;
 select(entry: MultiplayerServerListWidget_Entry): void;
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
 keyPressed(keyCode: number,scanCode: number,modifiers: number): boolean;
 getServerList(): ServerList;
 setMultiplayerScreenTooltip(tooltip: List): void;
 getServerListPinger(): MultiplayerServerListPinger;
}
class Static_MultiplayerScreen {
static field_41849: number;
static field_41850: number;
static field_41851: number;
static field_41852: number;
static LOGGER: Logger;
}

//net.minecraft.client.gui.screen.ingame.AbstractSignEditScreen
class AbstractSignEditScreen extends Screen{
 close(): void;
 removed(): void;
 tick(): void;
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
 charTyped(chr: char,modifiers: number): boolean;
 keyPressed(keyCode: number,scanCode: number,modifiers: number): boolean;
 shouldPause(): boolean;
}
class Static_AbstractSignEditScreen {
static method_45652(i: number): String[];
}

//net.minecraft.client.gui.screen.FatalErrorScreen
class FatalErrorScreen extends Screen{
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
 shouldCloseOnEsc(): boolean;
}

//net.minecraft.client.gui.screen.ingame.JigsawBlockScreen
class JigsawBlockScreen extends Screen{
 close(): void;
 resize(client: MinecraftClient,width: number,height: number): void;
 tick(): void;
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
 keyPressed(keyCode: number,scanCode: number,modifiers: number): boolean;
}
class Static_JigsawBlockScreen {
static MAX_GENERATION_DEPTH: number;
static JOINT_LABEL_TEXT: Text;
static POOL_TEXT: Text;
static NAME_TEXT: Text;
static TARGET_TEXT: Text;
static FINAL_STATE_TEXT: Text;
}

//net.minecraft.client.gui.screen.multiplayer.SocialInteractionsScreen$1


//net.minecraft.client.gui.screen.ChatScreen$1


//net.minecraft.client.gui.screen.world.CreateWorldScreen$WorldTab$1


//net.minecraft.client.gui.screen.ingame.StructureBlockScreen$1


//net.minecraft.client.gui.screen.ingame.AbstractCommandBlockScreen$1


//net.minecraft.client.gui.screen.option.TelemetryEventWidget
class TelemetryEventWidget extends ScrollableWidget{
 refresh(optionalTelemetryEnabled: boolean): void;
 setScrollConsumer(scrollConsumer: DoubleConsumer): void;
}
class Static_TelemetryEventWidget {
static method_48285(drawContext: DrawContext,i: number,j: number,f: number,widget: ClickableWidget): void;
static MARGIN_X: number;
static REQUIRED_TRANSLATION_KEY: string;
static OPTIONAL_TRANSLATION_KEY: string;
static PROPERTY_TITLE_TEXT: Text;
}

//net.minecraft.client.gui.widget.ScrollableTextWidget
class ScrollableTextWidget extends ScrollableWidget{
 textColor(textColor: number): ScrollableTextWidget;
 renderButton(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
 setWidth(width: number): void;
}

//net.minecraft.client.gui.widget.EditBoxWidget
class EditBoxWidget extends ScrollableWidget{
 getText(): string;
 tick(): void;
 setText(text: string): void;
 charTyped(chr: char,modifiers: number): boolean;
 setChangeListener(changeListener: Consumer): void;
 setMaxLength(maxLength: number): void;
 keyPressed(keyCode: number,scanCode: number,modifiers: number): boolean;
 mouseClicked(mouseX: number,mouseY: number,button: number): boolean;
 mouseDragged(mouseX: number,mouseY: number,button: number,deltaX: number,deltaY: number): boolean;
 appendClickableNarrations(builder: NarrationMessageBuilder): void;
 getContentsHeight(): number;
}
class Static_EditBoxWidget {
static CURSOR_PADDING: number;
static CURSOR_COLOR: number;
static UNDERSCORE: string;
static FOCUSED_BOX_TEXT_COLOR: number;
static UNFOCUSED_BOX_TEXT_COLOR: number;
}

//net.minecraft.block.SandBlock
class SandBlock extends FallingBlock{
 getColor(state: BlockState,world: BlockView,pos: BlockPos): number;
}

//net.minecraft.block.ConcretePowderBlock
class ConcretePowderBlock extends FallingBlock{
 getStateForNeighborUpdate(state: BlockState,direction: Direction,neighborState: BlockState,world: WorldAccess,pos: BlockPos,neighborPos: BlockPos): BlockState;
 onLanding(world: World,pos: BlockPos,fallingBlockState: BlockState,currentStateInPos: BlockState,fallingBlockEntity: FallingBlockEntity): void;
 getColor(state: BlockState,world: BlockView,pos: BlockPos): number;
 getPlacementState(ctx: ItemPlacementContext): BlockState;
}
class Static_ConcretePowderBlock {
static shouldHarden(world: BlockView,pos: BlockPos,state: BlockState): boolean;
static hardensOnAnySide(world: BlockView,pos: BlockPos): boolean;
static hardensIn(state: BlockState): boolean;
}

//net.minecraft.block.DragonEggBlock
class DragonEggBlock extends FallingBlock{
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 canPathfindThrough(state: BlockState,world: BlockView,pos: BlockPos,type: NavigationType): boolean;
 onUse(state: BlockState,world: World,pos: BlockPos,player: PlayerEntity,hand: Hand,hit: BlockHitResult): ActionResult;
 onBlockBreakStart(state: BlockState,world: World,pos: BlockPos,player: PlayerEntity): void;
}
class Static_DragonEggBlock {
static SHAPE: VoxelShape;
}

//net.minecraft.block.AnvilBlock
class AnvilBlock extends FallingBlock{
 rotate(state: BlockState,rotation: BlockRotation): BlockState;
 onDestroyedOnLanding(world: World,pos: BlockPos,fallingBlockEntity: FallingBlockEntity): void;
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 canPathfindThrough(state: BlockState,world: BlockView,pos: BlockPos,type: NavigationType): boolean;
 getDamageSource(attacker: Entity): DamageSource;
 onLanding(world: World,pos: BlockPos,fallingBlockState: BlockState,currentStateInPos: BlockState,fallingBlockEntity: FallingBlockEntity): void;
 getColor(state: BlockState,world: BlockView,pos: BlockPos): number;
 createScreenHandlerFactory(state: BlockState,world: World,pos: BlockPos): NamedScreenHandlerFactory;
 onUse(state: BlockState,world: World,pos: BlockPos,player: PlayerEntity,hand: Hand,hit: BlockHitResult): ActionResult;
 getPlacementState(ctx: ItemPlacementContext): BlockState;
}
class Static_AnvilBlock {
static method_17453(world: World,blockPos: BlockPos,syncId: number,inventory: PlayerInventory,player: PlayerEntity): ScreenHandler;
static getLandingState(fallingState: BlockState): BlockState;
static FACING: DirectionProperty;
static BASE_SHAPE: VoxelShape;
static X_STEP_SHAPE: VoxelShape;
static X_STEM_SHAPE: VoxelShape;
static X_FACE_SHAPE: VoxelShape;
static Z_STEP_SHAPE: VoxelShape;
static Z_STEM_SHAPE: VoxelShape;
static Z_FACE_SHAPE: VoxelShape;
static X_AXIS_SHAPE: VoxelShape;
static Z_AXIS_SHAPE: VoxelShape;
static TITLE: Text;
static FALLING_BLOCK_ENTITY_DAMAGE_MULTIPLIER: number;
static FALLING_BLOCK_ENTITY_MAX_DAMAGE: number;
}

//net.minecraft.block.GravelBlock
class GravelBlock extends FallingBlock{
 getColor(state: BlockState,world: BlockView,pos: BlockPos): number;
}

//net.minecraft.entity.ai.goal.BreakDoorGoal
class BreakDoorGoal extends DoorInteractGoal{
 start(): void;
 stop(): void;
 tick(): void;
 shouldContinue(): boolean;
 canStart(): boolean;
}
class Static_BreakDoorGoal {
static MIN_MAX_PROGRESS: number;
}

//net.minecraft.entity.ai.goal.LongDoorInteractGoal
class LongDoorInteractGoal extends DoorInteractGoal{
 start(): void;
 stop(): void;
 tick(): void;
 shouldContinue(): boolean;
}

//net.minecraft.entity.ai.goal.GoToBedAndSleepGoal
class GoToBedAndSleepGoal extends MoveToTargetPosGoal{
 start(): void;
 stop(): void;
 tick(): void;
 canStart(): boolean;
}

//net.minecraft.entity.ai.goal.StepAndDestroyBlockGoal
class StepAndDestroyBlockGoal extends MoveToTargetPosGoal{
 start(): void;
 stop(): void;
 tick(): void;
 canStart(): boolean;
 tickStepping(world: WorldAccess,pos: BlockPos): void;
 onDestroyBlock(world: World,pos: BlockPos): void;
}
class Static_StepAndDestroyBlockGoal {
static MAX_COOLDOWN: number;
}

//net.minecraft.entity.ai.goal.CatSitOnBlockGoal
class CatSitOnBlockGoal extends MoveToTargetPosGoal{
 start(): void;
 stop(): void;
 tick(): void;
 canStart(): boolean;
}
class Static_CatSitOnBlockGoal {
static method_27794(part: BedPart): Boolean;
static method_27793(state: AbstractBlock_AbstractBlockState): boolean;
}

//net.minecraft.entity.ai.goal.GoalSelector$2


//net.minecraft.entity.ai.goal.ZombieAttackGoal
class ZombieAttackGoal extends MeleeAttackGoal{
 start(): void;
 stop(): void;
 tick(): void;
}

//net.minecraft.entity.ai.goal.WanderAroundPointOfInterestGoal
class WanderAroundPointOfInterestGoal extends WanderAroundGoal{
 canStart(): boolean;
}
class Static_WanderAroundPointOfInterestGoal {
static HORIZONTAL_RANGE: number;
static VERTICAL_RANGE: number;
}

//net.minecraft.entity.ai.goal.WanderAroundFarGoal
class WanderAroundFarGoal extends WanderAroundGoal{
}
class Static_WanderAroundFarGoal {
static CHANCE: number;
}

//net.minecraft.entity.ai.goal.IronGolemWanderAroundGoal
class IronGolemWanderAroundGoal extends WanderAroundGoal{
}
class Static_IronGolemWanderAroundGoal {
static method_27924(serverWorld: ServerWorld,sectionPos: ChunkSectionPos): boolean;
static method_27921(registryEntry: RegistryEntry): boolean;
static CHUNK_RANGE: number;
static ENTITY_COLLISION_RANGE: number;
static HORIZONTAL_RANGE: number;
static VERTICAL_RANGE: number;
}

//net.minecraft.entity.ai.goal.SwimAroundGoal
class SwimAroundGoal extends WanderAroundGoal{
}

//net.minecraft.entity.ai.goal.LookAtCustomerGoal
class LookAtCustomerGoal extends LookAtEntityGoal{
 canStart(): boolean;
}

//net.minecraft.entity.ai.goal.StopAndLookAtEntityGoal
class StopAndLookAtEntityGoal extends LookAtEntityGoal{
}

//net.minecraft.entity.ai.goal.TrackOwnerAttackerGoal
class TrackOwnerAttackerGoal extends TrackTargetGoal{
 start(): void;
 canStart(): boolean;
}

//net.minecraft.entity.ai.goal.ActiveTargetGoal
class ActiveTargetGoal extends TrackTargetGoal{
 start(): void;
 canStart(): boolean;
 setTargetEntity(targetEntity: LivingEntity): void;
}
class Static_ActiveTargetGoal {
static method_31503(livingEntity: LivingEntity): boolean;
static DEFAULT_RECIPROCAL_CHANCE: number;
}

//net.minecraft.entity.ai.goal.TrackIronGolemTargetGoal
class TrackIronGolemTargetGoal extends TrackTargetGoal{
 start(): void;
 canStart(): boolean;
}

//net.minecraft.entity.ai.goal.RevengeGoal
class RevengeGoal extends TrackTargetGoal{
 start(): void;
 canStart(): boolean;
 setGroupRevenge(noHelpTypes: Class[]): RevengeGoal;
}
class Static_RevengeGoal {
static VALID_AVOIDABLES_PREDICATE: TargetPredicate;
static BOX_VERTICAL_EXPANSION: number;
}

//net.minecraft.entity.ai.goal.AttackWithOwnerGoal
class AttackWithOwnerGoal extends TrackTargetGoal{
 start(): void;
 canStart(): boolean;
}

//net.minecraft.entity.ai.goal.DolphinJumpGoal
class DolphinJumpGoal extends DiveJumpingGoal{
 start(): void;
 stop(): void;
 canStop(): boolean;
 tick(): void;
 shouldContinue(): boolean;
 canStart(): boolean;
}
class Static_DolphinJumpGoal {
static OFFSET_MULTIPLIERS: number[];
}

//net.minecraft.world.chunk.WrapperProtoChunk
class WrapperProtoChunk extends ProtoChunk{
 getStatus(): ChunkStatus;
 removeBlockEntity(pos: BlockPos): void;
 getFluidTickScheduler(): BasicTickScheduler;
 getBlockTickScheduler(): BasicTickScheduler;
 populateBiomes(biomeSupplier: BiomeSupplier,sampler: MultiNoiseUtil_MultiNoiseSampler): void;
 refreshSurfaceY(): void;
 isLightOn(): boolean;
 setStatus(status: ChunkStatus): void;
 setStructureStarts(structureStarts: Map): void;
 sampleHeightmap(type: Heightmap_Type,x: number,z: number): number;
 addEntity(entity: Entity): void;
 getHeightmap(type: Heightmap_Type): Heightmap;
 getSectionArray(): ChunkSection[];
 markBlockForPostProcessing(pos: BlockPos): void;
 getBlockEntityNbt(pos: BlockPos): NbtCompound;
 setBlockEntity(blockEntity: BlockEntity): void;
 getBlockEntity(pos: BlockPos): BlockEntity;
 getFluidState(pos: BlockPos): FluidState;
 getBlockState(pos: BlockPos): BlockState;
 setBlockState(pos: BlockPos,state: BlockState,moved: boolean): BlockState;
 setStructureStart(structure: Structure,start: StructureStart): void;
 getStructureStart(structure: Structure): StructureStart;
 getBiomeForNoiseGen(biomeX: number,biomeY: number,biomeZ: number): RegistryEntry;
 getMaxLightLevel(): number;
 getPos(): ChunkPos;
 getSection(yIndex: number): ChunkSection;
 setNeedsSaving(needsSaving: boolean): void;
 getWrappedChunk(): WorldChunk;
 getStructureStarts(): Map;
 getOrCreateCarvingMask(step: GenerationStep_Carver): CarvingMask;
 setLightOn(lightOn: boolean): void;
 getChunkSkyLight(): ChunkSkyLight;
 addStructureReference(structure: Structure,reference: long): void;
 getStructureReferences(): Map;
 getStructureReferences(structure: Structure): LongSet;
 setStructureReferences(structureReferences: Map): void;
 setHeightmap(type: Heightmap_Type,heightmap: long[]): void;
 needsSaving(): boolean;
 getBlendingData(): BlendingData;
 getTickSchedulers(): Chunk_TickSchedulers;
 setBlendingData(blendingData: BlendingData): void;
 getPackedBlockEntityNbt(pos: BlockPos): NbtCompound;
 forEachBlockMatchingPredicate(predicate: Predicate,consumer: BiConsumer): void;
 addPendingBlockEntityNbt(nbt: NbtCompound): void;
 getCarvingMask(step: GenerationStep_Carver): CarvingMask;
}

//net.minecraft.world.chunk.EmptyChunk
class EmptyChunk extends WorldChunk{
 isEmpty(): boolean;
 removeBlockEntity(pos: BlockPos): void;
 addBlockEntity(blockEntity: BlockEntity): void;
 areSectionsEmptyBetween(lowerHeight: number,upperHeight: number): boolean;
 setBlockEntity(blockEntity: BlockEntity): void;
 getBlockEntity(pos: BlockPos,creationType: WorldChunk_CreationType): BlockEntity;
 getFluidState(pos: BlockPos): FluidState;
 getBlockState(pos: BlockPos): BlockState;
 setBlockState(pos: BlockPos,state: BlockState,moved: boolean): BlockState;
 getBiomeForNoiseGen(biomeX: number,biomeY: number,biomeZ: number): RegistryEntry;
 getLuminance(pos: BlockPos): number;
 getLevelType(): ChunkLevelType;
}

//net.minecraft.block.entity.HangingSignBlockEntity
class HangingSignBlockEntity extends SignBlockEntity{
 getMaxTextWidth(): number;
 getTextLineHeight(): number;
}
class Static_HangingSignBlockEntity {
static MAX_TEXT_WIDTH: number;
static TEXT_LINE_HEIGHT: number;
}

//net.minecraft.block.entity.EndGatewayBlockEntity
class EndGatewayBlockEntity extends EndPortalBlockEntity{
 setExitPortalPos(pos: BlockPos,exactTeleport: boolean): void;
 toInitialChunkDataNbt(): NbtCompound;
 onSyncedBlockEvent(type: number,data: number): boolean;
 readNbt(nbt: NbtCompound): void;
 toUpdatePacket(): Packet;
 toUpdatePacket(): BlockEntityUpdateS2CPacket;
 shouldDrawSide(direction: Direction): boolean;
 getDrawnSidesCount(): number;
 needsCooldownBeforeTeleporting(): boolean;
 getRecentlyGeneratedBeamHeight(tickDelta: number): number;
 isRecentlyGenerated(): boolean;
 getCooldownBeamHeight(tickDelta: number): number;
}
class Static_EndGatewayBlockEntity {
static serverTick(world: World,pos: BlockPos,state: BlockState,blockEntity: EndGatewayBlockEntity): void;
static clientTick(world: World,pos: BlockPos,state: BlockState,blockEntity: EndGatewayBlockEntity): void;
static getChunk(world: World,pos: Vec3d): WorldChunk;
static createPortal(world: ServerWorld,pos: BlockPos,config: EndGatewayFeatureConfig): void;
static tryTeleportingEntity(world: World,pos: BlockPos,state: BlockState,entity: Entity,blockEntity: EndGatewayBlockEntity): void;
static canTeleport(entity: Entity): boolean;
static findPortalPosition(chunk: WorldChunk): BlockPos;
static findExitPortalPos(world: BlockView,pos: BlockPos,searchRadius: number,force: boolean): BlockPos;
static method_46695(registry: Registry): Optional;
static method_46694(serverWorld: ServerWorld,blockPos: BlockPos,reference: RegistryEntry_Reference): void;
static isChunkEmpty(world: ServerWorld,pos: Vec3d): boolean;
static findTeleportLocation(world: ServerWorld,pos: BlockPos): Vec3d;
static setupExitPortalLocation(world: ServerWorld,pos: BlockPos): BlockPos;
static startTeleportCooldown(world: World,pos: BlockPos,state: BlockState,blockEntity: EndGatewayBlockEntity): void;
static findBestPortalExitPos(world: World,pos: BlockPos): BlockPos;
static LOGGER: Logger;
static field_31368: number;
static field_31369: number;
static field_31370: number;
static field_31371: number;
static field_31372: number;
}

//net.minecraft.block.entity.CalibratedSculkSensorBlockEntity
class CalibratedSculkSensorBlockEntity extends SculkSensorBlockEntity{
 createCallback(): Vibrations_Callback;
}

//net.minecraft.block.PotatoesBlock
class PotatoesBlock extends CropBlock{
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
}
class Static_PotatoesBlock {
static AGE_TO_SHAPE: VoxelShape[];
}

//net.minecraft.block.CarrotsBlock
class CarrotsBlock extends CropBlock{
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
}
class Static_CarrotsBlock {
static AGE_TO_SHAPE: VoxelShape[];
}

//net.minecraft.block.BeetrootsBlock
class BeetrootsBlock extends CropBlock{
 getMaxAge(): number;
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 randomTick(state: BlockState,world: ServerWorld,pos: BlockPos,random: Random): void;
}
class Static_BeetrootsBlock {
static BEETROOTS_MAX_AGE: number;
static AGE: IntProperty;
static AGE_TO_SHAPE: VoxelShape[];
}

//net.minecraft.block.TorchflowerBlock
class TorchflowerBlock extends CropBlock{
 getMaxAge(): number;
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 randomTick(state: BlockState,world: ServerWorld,pos: BlockPos,random: Random): void;
 withAge(age: number): BlockState;
}
class Static_TorchflowerBlock {
static field_42775: number;
static AGE: IntProperty;
static field_42777: number;
static SHAPES: VoxelShape[];
static field_44479: number;
}

//net.minecraft.block.TwistingVinesBlock
class TwistingVinesBlock extends AbstractPlantStemBlock{
}
class Static_TwistingVinesBlock {
static SHAPE: VoxelShape;
}

//net.minecraft.block.WeepingVinesBlock
class WeepingVinesBlock extends AbstractPlantStemBlock{
}
class Static_WeepingVinesBlock {
static SHAPE: VoxelShape;
}

//net.minecraft.block.WeepingVinesPlantBlock
class WeepingVinesPlantBlock extends AbstractPlantBlock{
}
class Static_WeepingVinesPlantBlock {
static SHAPE: VoxelShape;
}

//net.minecraft.block.TwistingVinesPlantBlock
class TwistingVinesPlantBlock extends AbstractPlantBlock{
}
class Static_TwistingVinesPlantBlock {
static SHAPE: VoxelShape;
}

//net.minecraft.world.gen.trunk.MegaJungleTrunkPlacer
class MegaJungleTrunkPlacer extends GiantTrunkPlacer{
 generate(world: TestableWorld,replacer: BiConsumer,random: Random,height: number,startPos: BlockPos,config: TreeFeatureConfig): List;
}
class Static_MegaJungleTrunkPlacer {
static method_28901(instance: RecordCodecBuilder_Instance): App;
static CODEC: Codec;
}

//net.minecraft.block.sapling.DarkOakSaplingGenerator
class DarkOakSaplingGenerator extends LargeTreeSaplingGenerator{
}

//net.minecraft.block.sapling.JungleSaplingGenerator
class JungleSaplingGenerator extends LargeTreeSaplingGenerator{
}

//net.minecraft.block.sapling.SpruceSaplingGenerator
class SpruceSaplingGenerator extends LargeTreeSaplingGenerator{
}

//net.minecraft.test.TestServer
class TestServer extends MinecraftServer{
 exit(): void;
 tick(shouldKeepTicking: BooleanSupplier): void;
 areCommandBlocksEnabled(): boolean;
 shouldBroadcastConsoleToOps(): boolean;
 getOpPermissionLevel(): number;
 isHardcore(): boolean;
 isHost(profile: GameProfile): boolean;
 isUsingNativeTransport(): boolean;
 isRemote(): boolean;
 shouldBroadcastRconToOps(): boolean;
 setupServer(): boolean;
 runTasksTillTickEnd(): void;
 addExtraSystemDetails(details: SystemDetails): SystemDetails;
 getFunctionPermissionLevel(): number;
 setCrashReport(report: CrashReport): void;
 getRateLimit(): number;
 isDedicated(): boolean;
}
class Static_TestServer {
static create(thread: Thread,session: LevelStorage_Session,resourcePackManager: ResourcePackManager,batches: Collection,pos: BlockPos): TestServer;
static method_40377(levelInfo: LevelInfo,loadContextSupplierContext: SaveLoading_LoadContextSupplierContext): SaveLoading_LoadContext;
static method_36094(gameRules: GameRules): void;
static method_36095(test: GameTestState): void;
static method_36097(test: GameTestState): void;
static method_43615(serverConfig: SaveLoading_ServerConfig,levelInfo: LevelInfo,executor: Executor): CompletableFuture;
static LOGGER: Logger;
static RESULT_STRING_LOG_INTERVAL: number;
static NONE_API_SERVICES: ApiServices;
static GAME_RULES: GameRules;
static TEST_LEVEL: GeneratorOptions;
}

//net.minecraft.server.integrated.IntegratedServer
class IntegratedServer extends MinecraftServer{
 shutdown(): void;
 stop(waitForShutdown: boolean): void;
 tick(shouldKeepTicking: BooleanSupplier): void;
 areCommandBlocksEnabled(): boolean;
 shouldBroadcastConsoleToOps(): boolean;
 syncChunkWrites(): boolean;
 getOpPermissionLevel(): number;
 setLocalPlayerUuid(localPlayerUuid: UUID): void;
 getModStatus(): ModStatus;
 adjustTrackingDistance(initialDistance: number): number;
 isHost(profile: GameProfile): boolean;
 getRunDirectory(): File;
 isUsingNativeTransport(): boolean;
 isRemote(): boolean;
 getServerPort(): number;
 openToLan(gameMode: GameMode,cheatsAllowed: boolean,port: number): boolean;
 getForcedGameMode(): GameMode;
 setDefaultGameMode(gameMode: GameMode): void;
 shouldBroadcastRconToOps(): boolean;
 setupServer(): boolean;
 addExtraSystemDetails(details: SystemDetails): SystemDetails;
 getFunctionPermissionLevel(): number;
 setCrashReport(report: CrashReport): void;
 getRateLimit(): number;
 isDedicated(): boolean;
}
class Static_IntegratedServer {
static LOGGER: Logger;
static field_34964: number;
}

//net.minecraft.entity.ai.brain.sensor.FrogAttackablesSensor
class FrogAttackablesSensor extends NearestVisibleLivingEntitySensor{
}
class Static_FrogAttackablesSensor {
static RANGE: number;
}

//net.minecraft.entity.ai.brain.sensor.VillagerHostilesSensor
class VillagerHostilesSensor extends NearestVisibleLivingEntitySensor{
}
class Static_VillagerHostilesSensor {
static SQUARED_DISTANCES_FOR_DANGER: ImmutableMap;
}

//net.minecraft.entity.ai.brain.sensor.AxolotlAttackablesSensor
class AxolotlAttackablesSensor extends NearestVisibleLivingEntitySensor{
}
class Static_AxolotlAttackablesSensor {
static TARGET_RANGE: number;
}

//net.minecraft.entity.ai.brain.sensor.WardenAttackablesSensor
class WardenAttackablesSensor extends NearestLivingEntitiesSensor{
 getOutputMemoryModules(): Set;
}
class Static_WardenAttackablesSensor {
static method_43085(wardenEntity: WardenEntity): void;
static method_43084(entityx: LivingEntity): boolean;
static method_42164(wardenEntity: WardenEntity,entityx: LivingEntity): void;
static method_42166(entityx: LivingEntity): boolean;
static findNearestTarget(warden: WardenEntity,targetPredicate: Predicate): Optional;
static method_43087(wardenEntity: WardenEntity): Optional;
}

//net.minecraft.client.gui.screen.ingame.BeaconScreen$EffectButtonWidget
class BeaconScreen_EffectButtonWidget extends BeaconScreen_BaseButtonWidget{
 tick(level: number): void;
 onPress(): void;
}

//net.minecraft.client.gui.screen.ingame.BeaconScreen$IconButtonWidget
class BeaconScreen_IconButtonWidget extends BeaconScreen_BaseButtonWidget{
}

//net.minecraft.client.gui.screen.recipebook.RecipeGroupButtonWidget
class RecipeGroupButtonWidget extends ToggleButtonWidget{
 getCategory(): RecipeBookGroup;
 checkForNewRecipes(client: MinecraftClient): void;
 hasKnownRecipes(recipeBook: ClientRecipeBook): boolean;
 renderButton(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
}
class Static_RecipeGroupButtonWidget {
static field_32412: number;
}

//net.minecraft.client.gui.screen.recipebook.RecipeAlternativesWidget$FurnaceAlternativeButtonWidget
class RecipeAlternativesWidget_FurnaceAlternativeButtonWidget extends RecipeAlternativesWidget_AlternativeButtonWidget{
}

//net.minecraft.client.gui.widget.ButtonWidget
class ButtonWidget extends PressableWidget{
 appendClickableNarrations(builder: NarrationMessageBuilder): void;
 onPress(): void;
}
class Static_ButtonWidget {
static builder(message: Text,onPress: ButtonWidget_PressAction): ButtonWidget_Builder;
static method_46429(textSupplier: Supplier): MutableText;
static DEFAULT_WIDTH_SMALL: number;
static DEFAULT_WIDTH: number;
static DEFAULT_HEIGHT: number;
static DEFAULT_NARRATION_SUPPLIER: ButtonWidget_NarrationSupplier;
}

//net.minecraft.client.gui.widget.CyclingButtonWidget
class CyclingButtonWidget extends PressableWidget{
 getValue(): Object;
 setValue(value: Object): void;
 mouseScrolled(mouseX: number,mouseY: number,amount: number): boolean;
 appendClickableNarrations(builder: NarrationMessageBuilder): void;
 onPress(): void;
 getGenericNarrationMessage(): MutableText;
}
class Static_CyclingButtonWidget {
static builder(valueToText: Function): CyclingButtonWidget_Builder;
static onOffBuilder(): CyclingButtonWidget_Builder;
static onOffBuilder(on: Text,off: Text): CyclingButtonWidget_Builder;
static onOffBuilder(initialValue: boolean): CyclingButtonWidget_Builder;
static method_32604(value: Boolean): Text;
static method_32608(text: Text,text2: Text,value: Boolean): Text;
static HAS_ALT_DOWN: BooleanSupplier;
static BOOLEAN_VALUES: List;
}

//net.minecraft.client.gui.widget.CheckboxWidget
class CheckboxWidget extends PressableWidget{
 appendClickableNarrations(builder: NarrationMessageBuilder): void;
 onPress(): void;
 renderButton(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
 isChecked(): boolean;
}
class Static_CheckboxWidget {
static TEXTURE: Identifier;
static TEXT_COLOR: number;
}

//net.minecraft.client.gui.widget.MultilineTextWidget
class MultilineTextWidget extends AbstractTextWidget{
 getWidth(): number;
 getHeight(): number;
 setMaxWidth(maxWidth: number): MultilineTextWidget;
 setMaxRows(maxRows: number): MultilineTextWidget;
 renderButton(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
 setCentered(centered: boolean): MultilineTextWidget;
 setTextColor(i: number): MultilineTextWidget;
 setTextColor(textColor: number): AbstractTextWidget;
}
class Static_MultilineTextWidget {
static method_48980(textRenderer: TextRenderer,cacheKey: MultilineTextWidget_CacheKey): MultilineText;
}

//net.minecraft.client.gui.widget.TextWidget
class TextWidget extends AbstractTextWidget{
 alignLeft(): TextWidget;
 alignRight(): TextWidget;
 alignCenter(): TextWidget;
 renderButton(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
 setTextColor(textColor: number): AbstractTextWidget;
 setTextColor(textColor: number): TextWidget;
}

//net.minecraft.client.realms.gui.screen.RealmsSlotOptionsScreen$SettingsSlider
class RealmsSlotOptionsScreen_SettingsSlider extends SliderWidget{
 onClick(mouseX: number,mouseY: number): void;
 onRelease(mouseX: number,mouseY: number): void;
 applyValue(): void;
}

//net.minecraft.client.gui.widget.OptionSliderWidget
class OptionSliderWidget extends SliderWidget{
}

//net.minecraft.client.gui.screen.ingame.JigsawBlockScreen$1


//net.minecraft.server.ServerAdvancementLoader
class ServerAdvancementLoader extends JsonDataLoader{
 get(id: Identifier): Advancement;
 getAdvancements(): Collection;
}
class Static_ServerAdvancementLoader {
static LOGGER: Logger;
static GSON: Gson;
}

//net.minecraft.recipe.RecipeManager
class RecipeManager extends JsonDataLoader{
 get(id: Identifier): Optional;
 values(): Collection;
 keys(): Stream;
 setRecipes(recipes: Iterable): void;
 getFirstMatch(type: RecipeType,inventory: Inventory,world: World,id: Identifier): Optional;
 getFirstMatch(type: RecipeType,inventory: Inventory,world: World): Optional;
 isErrored(): boolean;
 getAllMatches(type: RecipeType,inventory: Inventory,world: World): List;
 getRemainingStacks(type: RecipeType,inventory: Inventory,world: World): DefaultedList;
 listAllOfType(type: RecipeType): List;
}
class Static_RecipeManager {
static deserialize(id: Identifier,json: JsonObject): Recipe;
static createCachedMatchGetter(type: RecipeType): RecipeManager_MatchGetter;
static method_42301(inventory: Inventory,world: World,recipe: Recipe): boolean;
static method_42298(inventory: Inventory,world: World,entry: Map_Entry): boolean;
static method_17876(world: World,recipe: Recipe): string;
static method_20707(recipeType: RecipeType): ImmutableMap_Builder;
static method_42300(entry: Map_Entry): Pair;
static method_17723(map: Map): Stream;
static method_42297(inventory: Inventory,world: World,recipe: Recipe): boolean;
static method_20703(entry: Map_Entry): Map;
static method_17875(string: string): JsonSyntaxException;
static method_20704(map: Map,builder: ImmutableMap_Builder,recipe: Recipe): void;
static method_20706(t: RecipeType): Map;
static method_17722(map: Map): Stream;
static GSON: Gson;
static LOGGER: Logger;
}

//net.minecraft.entity.ai.brain.task.BiasedLongJumpTask
class BiasedLongJumpTask extends LongJumpTask{
}

//net.minecraft.entity.ai.brain.task.FarmerWorkTask
class FarmerWorkTask extends VillagerWorkTask{
}
class Static_FarmerWorkTask {
static COMPOSTABLES: List;
}

//net.minecraft.world.gen.foliage.LargeOakFoliagePlacer
class LargeOakFoliagePlacer extends BlobFoliagePlacer{
}
class Static_LargeOakFoliagePlacer {
static method_28842(instance: RecordCodecBuilder_Instance): App;
static CODEC: Codec;
}

//net.minecraft.world.gen.foliage.BushFoliagePlacer
class BushFoliagePlacer extends BlobFoliagePlacer{
}
class Static_BushFoliagePlacer {
static method_28840(instance: RecordCodecBuilder_Instance): App;
static CODEC: Codec;
}

//net.minecraft.client.gui.screen.recipebook.FurnaceRecipeBookScreen
class FurnaceRecipeBookScreen extends AbstractFurnaceRecipeBookScreen{
}
class Static_FurnaceRecipeBookScreen {
static TOGGLE_SMELTABLE_RECIPES_TEXT: Text;
}

//net.minecraft.client.gui.screen.recipebook.SmokerRecipeBookScreen
class SmokerRecipeBookScreen extends AbstractFurnaceRecipeBookScreen{
}
class Static_SmokerRecipeBookScreen {
static TOGGLE_SMOKABLE_RECIPES_TEXT: Text;
}

//net.minecraft.client.gui.screen.recipebook.BlastFurnaceRecipeBookScreen
class BlastFurnaceRecipeBookScreen extends AbstractFurnaceRecipeBookScreen{
}
class Static_BlastFurnaceRecipeBookScreen {
static TOGGLE_BLASTABLE_RECIPES_TEXT: Text;
}

//net.minecraft.state.property.DirectionProperty
class DirectionProperty extends EnumProperty{
}
class Static_DirectionProperty {
static of(name: string,values: Collection): DirectionProperty;
static of(name: string,values: Direction[]): DirectionProperty;
static of(name: string,filter: Predicate): DirectionProperty;
static of(name: string): DirectionProperty;
static method_38862(direction: Direction): boolean;
}

//net.minecraft.client.texture.AsyncTexture
class AsyncTexture extends ResourceTexture{
 registerTexture(textureManager: TextureManager,resourceManager: ResourceManager,id: Identifier,executor: Executor): void;
 getLoadCompleteFuture(): CompletableFuture;
}
class Static_AsyncTexture {
static method_22809(executor: Executor,runnable: Runnable): void;
static method_18149(texture: ResourceTexture_TextureData): Void;
static method_22807(runnable: Runnable): void;
static method_18151(resourceManager: ResourceManager,identifier: Identifier): ResourceTexture_TextureData;
static createRenderThreadExecutor(executor: Executor): Executor;
}

//net.minecraft.client.gui.screen.SplashOverlay$LogoTexture
class SplashOverlay_LogoTexture extends ResourceTexture{
}

//net.minecraft.client.texture.PlayerSkinTexture
class PlayerSkinTexture extends ResourceTexture{
 load(manager: ResourceManager): void;
}
class Static_PlayerSkinTexture {
static stripAlpha(image: NativeImage,x1: number,y1: number,x2: number,y2: number): void;
static stripColor(image: NativeImage,x1: number,y1: number,x2: number,y2: number): void;
static LOGGER: Logger;
static WIDTH: number;
static HEIGHT: number;
static OLD_HEIGHT: number;
}

//net.minecraft.item.EmptyMapItem
class EmptyMapItem extends NetworkSyncedItem{
 use(world: World,user: PlayerEntity,hand: Hand): TypedActionResult;
}

//net.minecraft.item.FilledMapItem
class FilledMapItem extends NetworkSyncedItem{
 appendTooltip(stack: ItemStack,world: World,tooltip: List,context: TooltipContext): void;
 inventoryTick(stack: ItemStack,world: World,entity: Entity,slot: number,selected: boolean): void;
 onCraft(stack: ItemStack,world: World,player: PlayerEntity): void;
 useOnBlock(context: ItemUsageContext): ActionResult;
 updateColors(world: World,entity: Entity,state: MapState): void;
 createSyncPacket(stack: ItemStack,world: World,player: PlayerEntity): Packet;
}
class Static_FilledMapItem {
static scale(map: ItemStack,world: World,amount: number): void;
static createMap(world: World,x: number,z: number,scale: byte,showIcons: boolean,unlimitedTracking: boolean): ItemStack;
static getMapState(map: ItemStack,world: World): MapState;
static getMapState(id: Integer,world: World): MapState;
static getMapId(stack: ItemStack): Integer;
static getMapName(mapId: number): string;
static getMapColor(stack: ItemStack): number;
static allocateMapId(world: World,x: number,z: number,scale: number,showIcons: boolean,unlimitedTracking: boolean,dimension: RegistryKey): number;
static createMapState(stack: ItemStack,world: World,x: number,z: number,scale: number,showIcons: boolean,unlimitedTracking: boolean,dimension: RegistryKey): void;
static setMapId(stack: ItemStack,id: number): void;
static isAquaticBiome(biomes: boolean[],x: number,z: number): boolean;
static copyMap(world: World,stack: ItemStack): void;
static fillExplorationMap(world: ServerWorld,map: ItemStack): void;
static field_30907: number;
static field_30908: number;
static DEFAULT_MAP_COLOR: number;
static MAP_KEY: string;
static MAP_SCALE_DIRECTION_KEY: string;
static MAP_TO_LOCK_KEY: string;
}

//net.minecraft.item.AliasedBlockItem
class AliasedBlockItem extends BlockItem{
 getTranslationKey(): string;
}

//net.minecraft.item.ScaffoldingItem
class ScaffoldingItem extends BlockItem{
 getPlacementContext(context: ItemPlacementContext): ItemPlacementContext;
}

//net.minecraft.item.PlaceableOnWaterItem
class PlaceableOnWaterItem extends BlockItem{
 use(world: World,user: PlayerEntity,hand: Hand): TypedActionResult;
 useOnBlock(context: ItemUsageContext): ActionResult;
}

//net.minecraft.item.OperatorOnlyBlockItem
class OperatorOnlyBlockItem extends BlockItem{
}

//net.minecraft.item.BedItem
class BedItem extends BlockItem{
}

//net.minecraft.item.TallBlockItem
class TallBlockItem extends BlockItem{
}

//net.minecraft.item.VerticallyAttachableBlockItem
class VerticallyAttachableBlockItem extends BlockItem{
 appendBlocks(map: Map,item: Item): void;
}

//net.minecraft.item.ThrowablePotionItem
class ThrowablePotionItem extends PotionItem{
 use(world: World,user: PlayerEntity,hand: Hand): TypedActionResult;
}

//net.minecraft.item.EntityBucketItem
class EntityBucketItem extends BucketItem{
 appendTooltip(stack: ItemStack,world: World,tooltip: List,context: TooltipContext): void;
 onEmptied(player: PlayerEntity,world: World,stack: ItemStack,pos: BlockPos): void;
}

//net.minecraft.item.SpectralArrowItem
class SpectralArrowItem extends ArrowItem{
 createArrow(world: World,stack: ItemStack,shooter: LivingEntity): PersistentProjectileEntity;
}

//net.minecraft.item.TippedArrowItem
class TippedArrowItem extends ArrowItem{
 appendTooltip(stack: ItemStack,world: World,tooltip: List,context: TooltipContext): void;
 getDefaultStack(): ItemStack;
 getTranslationKey(stack: ItemStack): string;
}

//net.minecraft.item.ItemFrameItem
class ItemFrameItem extends DecorationItem{
}

//net.minecraft.client.gui.screen.ingame.SmokerScreen
class SmokerScreen extends AbstractFurnaceScreen{
}
class Static_SmokerScreen {
static TEXTURE: Identifier;
}

//net.minecraft.client.gui.screen.ingame.FurnaceScreen
class FurnaceScreen extends AbstractFurnaceScreen{
}
class Static_FurnaceScreen {
static TEXTURE: Identifier;
}

//net.minecraft.client.gui.screen.ingame.BlastFurnaceScreen
class BlastFurnaceScreen extends AbstractFurnaceScreen{
}
class Static_BlastFurnaceScreen {
static TEXTURE: Identifier;
}

//net.minecraft.block.WallSkullBlock
class WallSkullBlock extends AbstractSkullBlock{
 rotate(state: BlockState,rotation: BlockRotation): BlockState;
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 mirror(state: BlockState,mirror: BlockMirror): BlockState;
 getTranslationKey(): string;
 getPlacementState(ctx: ItemPlacementContext): BlockState;
}
class Static_WallSkullBlock {
static FACING: DirectionProperty;
static FACING_TO_SHAPE: Map;
}

//net.minecraft.block.SkullBlock
class SkullBlock extends AbstractSkullBlock{
 rotate(state: BlockState,rotation: BlockRotation): BlockState;
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 getCullingShape(state: BlockState,world: BlockView,pos: BlockPos): VoxelShape;
 mirror(state: BlockState,mirror: BlockMirror): BlockState;
 getPlacementState(ctx: ItemPlacementContext): BlockState;
}
class Static_SkullBlock {
static MAX_ROTATION_INDEX: number;
static MAX_ROTATIONS: number;
static ROTATION: IntProperty;
static SHAPE: VoxelShape;
static PIGLIN_SHAPE: VoxelShape;
}

//net.minecraft.client.render.entity.model.SkullEntityModel
class SkullEntityModel extends SkullBlockEntityModel{
 render(matrices: MatrixStack,vertices: VertexConsumer,light: number,overlay: number,red: number,green: number,blue: number,alpha: number): void;
 setHeadRotation(animationProgress: number,yaw: number,pitch: number): void;
}
class Static_SkullEntityModel {
static getModelData(): ModelData;
static getHeadTexturedModelData(): TexturedModelData;
static getSkullTexturedModelData(): TexturedModelData;
}

//net.minecraft.client.render.entity.model.PiglinHeadEntityModel
class PiglinHeadEntityModel extends SkullBlockEntityModel{
 render(matrices: MatrixStack,vertices: VertexConsumer,light: number,overlay: number,red: number,green: number,blue: number,alpha: number): void;
 setHeadRotation(animationProgress: number,yaw: number,pitch: number): void;
}
class Static_PiglinHeadEntityModel {
static getModelData(): ModelData;
}

//net.minecraft.client.render.entity.model.DragonHeadEntityModel
class DragonHeadEntityModel extends SkullBlockEntityModel{
 render(matrices: MatrixStack,vertices: VertexConsumer,light: number,overlay: number,red: number,green: number,blue: number,alpha: number): void;
 setHeadRotation(animationProgress: number,yaw: number,pitch: number): void;
}
class Static_DragonHeadEntityModel {
static getTexturedModelData(): TexturedModelData;
}

//net.minecraft.client.render.entity.EnderDragonEntityRenderer$DragonEntityModel
class EnderDragonEntityRenderer_DragonEntityModel extends EntityModel{
 render(matrices: MatrixStack,vertices: VertexConsumer,light: number,overlay: number,red: number,green: number,blue: number,alpha: number): void;
 animateModel(entity: Entity,limbAngle: number,limbDistance: number,tickDelta: number): void;
 animateModel(enderDragonEntity: EnderDragonEntity,f: number,g: number,h: number): void;
 setAngles(entity: Entity,limbAngle: number,limbDistance: number,animationProgress: number,headYaw: number,headPitch: number): void;
 setAngles(enderDragonEntity: EnderDragonEntity,f: number,g: number,h: number,i: number,j: number): void;
}

//net.minecraft.client.render.entity.model.AnimalModel
class AnimalModel extends EntityModel{
 render(matrices: MatrixStack,vertices: VertexConsumer,light: number,overlay: number,red: number,green: number,blue: number,alpha: number): void;
}
class Static_AnimalModel {
static method_22949(matrixStack: MatrixStack,vertexConsumer: VertexConsumer,i: number,j: number,f: number,g: number,h: number,k: number,headPart: ModelPart): void;
static method_22947(matrixStack: MatrixStack,vertexConsumer: VertexConsumer,i: number,j: number,f: number,g: number,h: number,k: number,bodyPart: ModelPart): void;
static method_22951(matrixStack: MatrixStack,vertexConsumer: VertexConsumer,i: number,j: number,f: number,g: number,h: number,k: number,headPart: ModelPart): void;
static method_22950(matrixStack: MatrixStack,vertexConsumer: VertexConsumer,i: number,j: number,f: number,g: number,h: number,k: number,bodyPart: ModelPart): void;
}

//net.minecraft.client.render.entity.model.SinglePartEntityModel
class SinglePartEntityModel extends EntityModel{
 getChild(name: string): Optional;
 render(matrices: MatrixStack,vertices: VertexConsumer,light: number,overlay: number,red: number,green: number,blue: number,alpha: number): void;
 getPart(): ModelPart;
}
class Static_SinglePartEntityModel {
static method_41910(string: string,part: ModelPart): ModelPart;
static method_41911(string: string,part: ModelPart): boolean;
static TEMP: Vector3f;
}

//net.minecraft.client.render.entity.model.LlamaEntityModel
class LlamaEntityModel extends EntityModel{
 render(matrices: MatrixStack,vertices: VertexConsumer,light: number,overlay: number,red: number,green: number,blue: number,alpha: number): void;
 setAngles(entity: Entity,limbAngle: number,limbDistance: number,animationProgress: number,headYaw: number,headPitch: number): void;
 setAngles(abstractDonkeyEntity: AbstractDonkeyEntity,f: number,g: number,h: number,i: number,j: number): void;
}
class Static_LlamaEntityModel {
static getTexturedModelData(dilation: Dilation): TexturedModelData;
static method_22964(matrixStack: MatrixStack,vertexConsumer: VertexConsumer,i: number,j: number,f: number,g: number,h: number,k: number,part: ModelPart): void;
static method_22963(matrixStack: MatrixStack,vertexConsumer: VertexConsumer,i: number,j: number,f: number,g: number,h: number,k: number,part: ModelPart): void;
}

//net.minecraft.client.render.entity.model.CompositeEntityModel
class CompositeEntityModel extends EntityModel{
 render(matrices: MatrixStack,vertices: VertexConsumer,light: number,overlay: number,red: number,green: number,blue: number,alpha: number): void;
 getParts(): Iterable;
}
class Static_CompositeEntityModel {
static method_22961(matrixStack: MatrixStack,vertexConsumer: VertexConsumer,i: number,j: number,f: number,g: number,h: number,k: number,part: ModelPart): void;
}

//net.minecraft.client.render.entity.model.RabbitEntityModel
class RabbitEntityModel extends EntityModel{
 render(matrices: MatrixStack,vertices: VertexConsumer,light: number,overlay: number,red: number,green: number,blue: number,alpha: number): void;
 animateModel(entity: Entity,limbAngle: number,limbDistance: number,tickDelta: number): void;
 animateModel(rabbitEntity: RabbitEntity,f: number,g: number,h: number): void;
 setAngles(entity: Entity,limbAngle: number,limbDistance: number,animationProgress: number,headYaw: number,headPitch: number): void;
 setAngles(rabbitEntity: RabbitEntity,f: number,g: number,h: number,i: number,j: number): void;
}
class Static_RabbitEntityModel {
static getTexturedModelData(): TexturedModelData;
static method_22968(matrixStack: MatrixStack,vertexConsumer: VertexConsumer,i: number,j: number,f: number,g: number,h: number,k: number,part: ModelPart): void;
static method_22967(matrixStack: MatrixStack,vertexConsumer: VertexConsumer,i: number,j: number,f: number,g: number,h: number,k: number,part: ModelPart): void;
static method_22966(matrixStack: MatrixStack,vertexConsumer: VertexConsumer,i: number,j: number,f: number,g: number,h: number,k: number,part: ModelPart): void;
static HAUNCH_JUMP_PITCH_MULTIPLIER: number;
static FRONT_LEGS_JUMP_PITCH_MULTIPLIER: number;
static LEFT_HAUNCH: string;
static RIGHT_HAUNCH: string;
static SCALE: number;
}

//net.minecraft.world.gen.structure.JungleTempleStructure
class JungleTempleStructure extends BasicTempleStructure{
 getType(): StructureType;
}
class Static_JungleTempleStructure {
static CODEC: Codec;
}

//net.minecraft.world.gen.structure.DesertPyramidStructure
class DesertPyramidStructure extends BasicTempleStructure{
 getType(): StructureType;
 postPlace(world: StructureWorldAccess,structureAccessor: StructureAccessor,chunkGenerator: ChunkGenerator,random: Random,box: BlockBox,chunkPos: ChunkPos,pieces: StructurePiecesList): void;
}
class Static_DesertPyramidStructure {
static method_51182(blockPos: BlockPos,blockEntity: BrushableBlockEntity): void;
static placeSuspiciousSand(box: BlockBox,world: StructureWorldAccess,pos: BlockPos): void;
static CODEC: Codec;
}

//net.minecraft.util.math.BlockPos$Mutable
class BlockPos_Mutable extends BlockPos{
 add(vec: Vec3i): Vec3i;
 add(x: number,y: number,z: number): Vec3i;
 add(i: number,j: number,k: number): BlockPos;
 offset(axis: Direction_Axis,distance: number): Vec3i;
 offset(direction: Direction,distance: number): Vec3i;
 offset(direction: Direction): Vec3i;
 offset(direction: Direction,i: number): BlockPos;
 offset(axis: Direction_Axis,i: number): BlockPos;
 set(pos: Vec3i,direction: Direction): BlockPos_Mutable;
 set(pos: Vec3i,x: number,y: number,z: number): BlockPos_Mutable;
 set(vec1: Vec3i,vec2: Vec3i): BlockPos_Mutable;
 set(x: number,y: number,z: number): BlockPos_Mutable;
 set(x: number,y: number,z: number): BlockPos_Mutable;
 set(pos: Vec3i): BlockPos_Mutable;
 set(axis: AxisCycleDirection,x: number,y: number,z: number): BlockPos_Mutable;
 set(pos: long): BlockPos_Mutable;
 multiply(i: number): BlockPos;
 multiply(scale: number): Vec3i;
 rotate(rotation: BlockRotation): BlockPos;
 up(distance: number): Vec3i;
 up(): Vec3i;
 move(direction: Direction,distance: number): BlockPos_Mutable;
 move(vec: Vec3i): BlockPos_Mutable;
 move(dx: number,dy: number,dz: number): BlockPos_Mutable;
 move(direction: Direction): BlockPos_Mutable;
 down(): Vec3i;
 down(distance: number): Vec3i;
 subtract(vec: Vec3i): Vec3i;
 setX(x: number): Vec3i;
 setX(i: number): BlockPos_Mutable;
 setZ(z: number): Vec3i;
 setZ(i: number): BlockPos_Mutable;
 toImmutable(): BlockPos;
 crossProduct(vec: Vec3i): Vec3i;
 clamp(axis: Direction_Axis,min: number,max: number): BlockPos_Mutable;
 setY(i: number): BlockPos_Mutable;
 setY(y: number): Vec3i;
 south(): Vec3i;
 south(distance: number): Vec3i;
 north(): Vec3i;
 north(distance: number): Vec3i;
 west(): Vec3i;
 west(distance: number): Vec3i;
 east(distance: number): Vec3i;
 east(): Vec3i;
}

//net.minecraft.client.gui.screen.ingame.CartographyTableScreen
class CartographyTableScreen extends HandledScreen{
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
}
class Static_CartographyTableScreen {
static TEXTURE: Identifier;
}

//net.minecraft.client.gui.screen.ingame.LoomScreen
class LoomScreen extends HandledScreen{
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
 mouseScrolled(mouseX: number,mouseY: number,amount: number): boolean;
 mouseClicked(mouseX: number,mouseY: number,button: number): boolean;
 mouseDragged(mouseX: number,mouseY: number,button: number,deltaX: number,deltaY: number): boolean;
}
class Static_LoomScreen {
static TEXTURE: Identifier;
static PATTERN_LIST_COLUMNS: number;
static PATTERN_LIST_ROWS: number;
static SCROLLBAR_WIDTH: number;
static SCROLLBAR_HEIGHT: number;
static PATTERN_ENTRY_SIZE: number;
static SCROLLBAR_AREA_HEIGHT: number;
static PATTERN_LIST_OFFSET_X: number;
static PATTERN_LIST_OFFSET_Y: number;
}

//net.minecraft.client.gui.screen.ingame.AbstractInventoryScreen
class AbstractInventoryScreen extends HandledScreen{
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
 hideStatusEffectHud(): boolean;
}

//net.minecraft.client.gui.screen.ingame.ShulkerBoxScreen
class ShulkerBoxScreen extends HandledScreen{
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
}
class Static_ShulkerBoxScreen {
static TEXTURE: Identifier;
}

//net.minecraft.client.gui.screen.ingame.EnchantmentScreen
class EnchantmentScreen extends HandledScreen{
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
 mouseClicked(mouseX: number,mouseY: number,button: number): boolean;
 doTick(): void;
 handledScreenTick(): void;
 ticks: number;
 nextPageAngle: number;
 pageAngle: number;
 approximatePageAngle: number;
 pageRotationSpeed: number;
 nextPageTurningSpeed: number;
 pageTurningSpeed: number;
}
class Static_EnchantmentScreen {
static TEXTURE: Identifier;
static BOOK_TEXTURE: Identifier;
}

//net.minecraft.client.gui.screen.ingame.HopperScreen
class HopperScreen extends HandledScreen{
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
}
class Static_HopperScreen {
static TEXTURE: Identifier;
}

//net.minecraft.client.gui.screen.ingame.HorseScreen
class HorseScreen extends HandledScreen{
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
}
class Static_HorseScreen {
static TEXTURE: Identifier;
}

//net.minecraft.client.gui.screen.ingame.MerchantScreen
class MerchantScreen extends HandledScreen{
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
 mouseScrolled(mouseX: number,mouseY: number,amount: number): boolean;
 mouseClicked(mouseX: number,mouseY: number,button: number): boolean;
 mouseDragged(mouseX: number,mouseY: number,button: number,deltaX: number,deltaY: number): boolean;
}
class Static_MerchantScreen {
static method_20225(merchantScreen: MerchantScreen): TextRenderer;
static method_20226(merchantScreen: MerchantScreen): TextRenderer;
static method_20227(merchantScreen: MerchantScreen): TextRenderer;
static TEXTURE: Identifier;
static TEXTURE_WIDTH: number;
static TEXTURE_HEIGHT: number;
static field_32356: number;
static XP_BAR_X_OFFSET: number;
static TRADE_LIST_AREA_Y_OFFSET: number;
static FIRST_BUY_ITEM_X_OFFSET: number;
static SECOND_BUY_ITEM_X_OFFSET: number;
static SOLD_ITEM_X_OFFSET: number;
static field_32362: number;
static MAX_TRADE_OFFERS: number;
static field_32364: number;
static TRADE_OFFER_BUTTON_HEIGHT: number;
static TRADE_OFFER_BUTTON_WIDTH: number;
static SCROLLBAR_HEIGHT: number;
static SCROLLBAR_WIDTH: number;
static SCROLLBAR_AREA_HEIGHT: number;
static SCROLLBAR_OFFSET_Y: number;
static SCROLLBAR_OFFSET_X: number;
static TRADES_TEXT: Text;
static SEPARATOR_TEXT: Text;
static DEPRECATED_TEXT: Text;
}

//net.minecraft.client.gui.screen.ingame.BeaconScreen
class BeaconScreen extends HandledScreen{
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
 handledScreenTick(): void;
}
class Static_BeaconScreen {
static method_2394(beaconScreen: BeaconScreen): MinecraftClient;
static method_2393(beaconScreen: BeaconScreen): MinecraftClient;
static method_37075(i: number,button: BeaconScreen_BeaconButtonWidget): void;
static method_47418(beaconScreen: BeaconScreen): MinecraftClient;
static TEXTURE: Identifier;
static PRIMARY_POWER_TEXT: Text;
static SECONDARY_POWER_TEXT: Text;
}

//net.minecraft.client.gui.screen.ingame.GrindstoneScreen
class GrindstoneScreen extends HandledScreen{
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
}
class Static_GrindstoneScreen {
static TEXTURE: Identifier;
}

//net.minecraft.client.gui.screen.ingame.Generic3x3ContainerScreen
class Generic3x3ContainerScreen extends HandledScreen{
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
}
class Static_Generic3x3ContainerScreen {
static TEXTURE: Identifier;
}

//net.minecraft.client.gui.screen.ingame.StonecutterScreen
class StonecutterScreen extends HandledScreen{
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
 mouseScrolled(mouseX: number,mouseY: number,amount: number): boolean;
 mouseClicked(mouseX: number,mouseY: number,button: number): boolean;
 mouseDragged(mouseX: number,mouseY: number,button: number,deltaX: number,deltaY: number): boolean;
}
class Static_StonecutterScreen {
static TEXTURE: Identifier;
static SCROLLBAR_WIDTH: number;
static SCROLLBAR_HEIGHT: number;
static RECIPE_LIST_COLUMNS: number;
static RECIPE_LIST_ROWS: number;
static RECIPE_ENTRY_WIDTH: number;
static RECIPE_ENTRY_HEIGHT: number;
static SCROLLBAR_AREA_HEIGHT: number;
static RECIPE_LIST_OFFSET_X: number;
static RECIPE_LIST_OFFSET_Y: number;
}

//net.minecraft.client.gui.screen.ingame.BrewingStandScreen
class BrewingStandScreen extends HandledScreen{
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
}
class Static_BrewingStandScreen {
static TEXTURE: Identifier;
static BUBBLE_PROGRESS: number[];
}

//net.minecraft.world.gen.stateprovider.NoiseBlockStateProvider
class NoiseBlockStateProvider extends AbstractNoiseBlockStateProvider{
 get(random: Random,pos: BlockPos): BlockState;
}
class Static_NoiseBlockStateProvider {
static method_38448(instance: RecordCodecBuilder_Instance): App;
static method_38444(noiseBlockStateProvider: NoiseBlockStateProvider): List;
static fillNoiseCodecFields(instance: RecordCodecBuilder_Instance): Products_P4;
static CODEC: Codec;
}

//net.minecraft.world.gen.stateprovider.NoiseThresholdBlockStateProvider
class NoiseThresholdBlockStateProvider extends AbstractNoiseBlockStateProvider{
 get(random: Random,pos: BlockPos): BlockState;
}
class Static_NoiseThresholdBlockStateProvider {
static method_38450(instance: RecordCodecBuilder_Instance): App;
static method_38451(noiseThresholdBlockStateProvider: NoiseThresholdBlockStateProvider): List;
static method_38449(noiseThresholdBlockStateProvider: NoiseThresholdBlockStateProvider): List;
static method_38453(noiseThresholdBlockStateProvider: NoiseThresholdBlockStateProvider): Float;
static method_38454(noiseThresholdBlockStateProvider: NoiseThresholdBlockStateProvider): Float;
static method_38452(noiseThresholdBlockStateProvider: NoiseThresholdBlockStateProvider): BlockState;
static CODEC: Codec;
}

//net.minecraft.client.particle.FireworksSparkParticle$FireworkParticle
class FireworksSparkParticle_FireworkParticle extends NoRenderParticle{
 tick(): void;
}

//net.minecraft.client.particle.ExplosionEmitterParticle
class ExplosionEmitterParticle extends NoRenderParticle{
 tick(): void;
}

//net.minecraft.client.particle.EmitterParticle
class EmitterParticle extends NoRenderParticle{
 tick(): void;
}

//net.minecraft.client.particle.SpriteBillboardParticle
class SpriteBillboardParticle extends BillboardParticle{
 setSprite(spriteProvider: SpriteProvider): void;
 setSpriteForAge(spriteProvider: SpriteProvider): void;
}

//net.minecraft.client.render.entity.feature.CreeperChargeFeatureRenderer
class CreeperChargeFeatureRenderer extends EnergySwirlOverlayFeatureRenderer{
}
class Static_CreeperChargeFeatureRenderer {
static SKIN: Identifier;
}

//net.minecraft.client.render.entity.feature.WitherArmorFeatureRenderer
class WitherArmorFeatureRenderer extends EnergySwirlOverlayFeatureRenderer{
}
class Static_WitherArmorFeatureRenderer {
static SKIN: Identifier;
}

//net.minecraft.client.render.entity.feature.PlayerHeldItemFeatureRenderer
class PlayerHeldItemFeatureRenderer extends HeldItemFeatureRenderer{
}
class Static_PlayerHeldItemFeatureRenderer {
static HEAD_YAW: number;
static HEAD_ROLL: number;
}

//net.minecraft.client.render.entity.EvokerEntityRenderer$1


//net.minecraft.client.render.entity.IllusionerEntityRenderer$1


//net.minecraft.client.render.entity.VindicatorEntityRenderer$1


//net.minecraft.client.render.entity.feature.EndermanEyesFeatureRenderer
class EndermanEyesFeatureRenderer extends EyesFeatureRenderer{
 getEyesTexture(): RenderLayer;
}
class Static_EndermanEyesFeatureRenderer {
static SKIN: RenderLayer;
}

//net.minecraft.client.render.entity.feature.SpiderEyesFeatureRenderer
class SpiderEyesFeatureRenderer extends EyesFeatureRenderer{
 getEyesTexture(): RenderLayer;
}
class Static_SpiderEyesFeatureRenderer {
static SKIN: RenderLayer;
}

//net.minecraft.client.render.entity.feature.PhantomEyesFeatureRenderer
class PhantomEyesFeatureRenderer extends EyesFeatureRenderer{
 getEyesTexture(): RenderLayer;
}
class Static_PhantomEyesFeatureRenderer {
static SKIN: RenderLayer;
}

//net.minecraft.client.render.entity.feature.WitchHeldItemFeatureRenderer
class WitchHeldItemFeatureRenderer extends VillagerHeldItemFeatureRenderer{
 render(matrixStack: MatrixStack,vertexConsumerProvider: VertexConsumerProvider,i: number,livingEntity: LivingEntity,f: number,g: number,h: number,j: number,k: number,l: number): void;
 render(matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,light: number,entity: Entity,limbAngle: number,limbDistance: number,tickDelta: number,animationProgress: number,headYaw: number,headPitch: number): void;
}

//net.minecraft.client.render.entity.feature.StuckStingersFeatureRenderer
class StuckStingersFeatureRenderer extends StuckObjectsFeatureRenderer{
}
class Static_StuckStingersFeatureRenderer {
static produceVertex(vertexConsumer: VertexConsumer,vertexTransform: Matrix4f,normalTransform: Matrix3f,x: number,y: number,u: number,v: number,light: number): void;
static TEXTURE: Identifier;
}

//net.minecraft.client.render.entity.feature.StuckArrowsFeatureRenderer
class StuckArrowsFeatureRenderer extends StuckObjectsFeatureRenderer{
}

//net.minecraft.client.render.entity.model.ChestBoatEntityModel
class ChestBoatEntityModel extends BoatEntityModel{
}
class Static_ChestBoatEntityModel {
static getTexturedModelData(): TexturedModelData;
static CHEST_BOTTOM: string;
static CHEST_LID: string;
static CHEST_LOCK: string;
}

//net.minecraft.client.render.entity.MobEntityRenderer
class MobEntityRenderer extends LivingEntityRenderer{
 render(mobEntity: MobEntity,f: number,g: number,matrixStack: MatrixStack,vertexConsumerProvider: VertexConsumerProvider,i: number): void;
 render(livingEntity: LivingEntity,f: number,g: number,matrixStack: MatrixStack,vertexConsumerProvider: VertexConsumerProvider,i: number): void;
 render(entity: Entity,yaw: number,tickDelta: number,matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,light: number): void;
 shouldRender(entity: Entity,frustum: Frustum,x: number,y: number,z: number): boolean;
 shouldRender(mobEntity: MobEntity,frustum: Frustum,d: number,e: number,f: number): boolean;
}
class Static_MobEntityRenderer {
static renderLeashPiece(vertexConsumer: VertexConsumer,positionMatrix: Matrix4f,f: number,g: number,h: number,leashedEntityBlockLight: number,holdingEntityBlockLight: number,leashedEntitySkyLight: number,holdingEntitySkyLight: number,i: number,j: number,k: number,l: number,pieceIndex: number,isLeashKnot: boolean): void;
static LEASH_PIECE_COUNT: number;
}

//net.minecraft.client.render.entity.PlayerEntityRenderer
class PlayerEntityRenderer extends LivingEntityRenderer{
 render(abstractClientPlayerEntity: AbstractClientPlayerEntity,f: number,g: number,matrixStack: MatrixStack,vertexConsumerProvider: VertexConsumerProvider,i: number): void;
 render(entity: Entity,yaw: number,tickDelta: number,matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,light: number): void;
 render(livingEntity: LivingEntity,f: number,g: number,matrixStack: MatrixStack,vertexConsumerProvider: VertexConsumerProvider,i: number): void;
 renderRightArm(matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,light: number,player: AbstractClientPlayerEntity): void;
 renderLeftArm(matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,light: number,player: AbstractClientPlayerEntity): void;
 getTexture(entity: Entity): Identifier;
 getTexture(abstractClientPlayerEntity: AbstractClientPlayerEntity): Identifier;
 getPositionOffset(abstractClientPlayerEntity: AbstractClientPlayerEntity,f: number): Vec3d;
 getPositionOffset(entity: Entity,tickDelta: number): Vec3d;
}
class Static_PlayerEntityRenderer {
static getArmPose(player: AbstractClientPlayerEntity,hand: Hand): BipedEntityModel_ArmPose;
}

//net.minecraft.client.render.entity.ArmorStandEntityRenderer
class ArmorStandEntityRenderer extends LivingEntityRenderer{
 getTexture(armorStandEntity: ArmorStandEntity): Identifier;
 getTexture(entity: Entity): Identifier;
}
class Static_ArmorStandEntityRenderer {
static TEXTURE: Identifier;
}

//net.minecraft.world.gen.carver.CaveCarverConfig
class CaveCarverConfig extends CarverConfig{
 horizontalRadiusMultiplier: FloatProvider;
 verticalRadiusMultiplier: FloatProvider;
}
class Static_CaveCarverConfig {
static method_35353(config: CaveCarverConfig): FloatProvider;
static method_35352(instance: RecordCodecBuilder_Instance): App;
static method_35354(config: CaveCarverConfig): FloatProvider;
static method_35356(config: CaveCarverConfig): CarverConfig;
static method_35355(config: CaveCarverConfig): FloatProvider;
static CAVE_CODEC: Codec;
}

//net.minecraft.world.gen.carver.RavineCarverConfig
class RavineCarverConfig extends CarverConfig{
 verticalRotation: FloatProvider;
 shape: RavineCarverConfig_Shape;
}
class Static_RavineCarverConfig {
static method_35336(instance: RecordCodecBuilder_Instance): App;
static method_35339(ravineCarverConfig: RavineCarverConfig): CarverConfig;
static method_35338(config: RavineCarverConfig): FloatProvider;
static method_35337(config: RavineCarverConfig): RavineCarverConfig_Shape;
static RAVINE_CODEC: Codec;
}

//net.minecraft.server.BannedPlayerEntry
class BannedPlayerEntry extends BanEntry{
 toText(): Text;
}
class Static_BannedPlayerEntry {
static profileFromJson(json: JsonObject): GameProfile;
}

//net.minecraft.server.BannedIpEntry
class BannedIpEntry extends BanEntry{
 toText(): Text;
}
class Static_BannedIpEntry {
static getIp(json: JsonObject): string;
}

//net.minecraft.data.server.tag.vanilla.VanillaEntityTypeTagProvider
class VanillaEntityTypeTagProvider extends ValueLookupTagProvider{
}
class Static_VanillaEntityTypeTagProvider {
static method_46824(entityType: EntityType): RegistryKey;
}

//net.minecraft.data.server.tag.vanilla.VanillaFluidTagProvider
class VanillaFluidTagProvider extends ValueLookupTagProvider{
}
class Static_VanillaFluidTagProvider {
static method_46825(fluid: Fluid): RegistryKey;
}

//net.minecraft.data.server.tag.vanilla.VanillaBlockTagProvider
class VanillaBlockTagProvider extends ValueLookupTagProvider{
}
class Static_VanillaBlockTagProvider {
static method_46837(block: Block): RegistryKey;
static method_51274(block: Block): boolean;
}

//net.minecraft.data.server.tag.vanilla.VanillaGameEventTagProvider
class VanillaGameEventTagProvider extends ValueLookupTagProvider{
}
class Static_VanillaGameEventTagProvider {
static method_46826(gameEvent: GameEvent): RegistryKey;
static BASIC_GAME_EVENTS: GameEvent[];
}

//net.minecraft.data.server.tag.ItemTagProvider
class ItemTagProvider extends ValueLookupTagProvider{
}
class Static_ItemTagProvider {
static method_49652(item: Item): RegistryKey;
static method_46831(item: Item): RegistryKey;
static method_49653(tagKey: TagKey): IllegalStateException;
}

//net.minecraft.world.gen.placementmodifier.SurfaceThresholdFilterPlacementModifier
class SurfaceThresholdFilterPlacementModifier extends AbstractConditionalPlacementModifier{
 getType(): PlacementModifierType;
}
class Static_SurfaceThresholdFilterPlacementModifier {
static of(heightmap: Heightmap_Type,min: number,max: number): SurfaceThresholdFilterPlacementModifier;
static method_38457(surfaceThresholdFilterPlacementModifier: SurfaceThresholdFilterPlacementModifier): Integer;
static method_38458(surfaceThresholdFilterPlacementModifier: SurfaceThresholdFilterPlacementModifier): Integer;
static method_38459(surfaceThresholdFilterPlacementModifier: SurfaceThresholdFilterPlacementModifier): Heightmap_Type;
static method_38456(instance: RecordCodecBuilder_Instance): App;
static MODIFIER_CODEC: Codec;
}

//net.minecraft.world.gen.placementmodifier.BlockFilterPlacementModifier
class BlockFilterPlacementModifier extends AbstractConditionalPlacementModifier{
 getType(): PlacementModifierType;
}
class Static_BlockFilterPlacementModifier {
static of(predicate: BlockPredicate): BlockFilterPlacementModifier;
static method_38916(instance: RecordCodecBuilder_Instance): App;
static method_38917(blockFilterPlacementModifier: BlockFilterPlacementModifier): BlockPredicate;
static MODIFIER_CODEC: Codec;
}

//net.minecraft.world.gen.placementmodifier.RarityFilterPlacementModifier
class RarityFilterPlacementModifier extends AbstractConditionalPlacementModifier{
 getType(): PlacementModifierType;
}
class Static_RarityFilterPlacementModifier {
static of(chance: number): RarityFilterPlacementModifier;
static method_39660(rarityFilterPlacementModifier: RarityFilterPlacementModifier): Integer;
static MODIFIER_CODEC: Codec;
}

//net.minecraft.world.gen.placementmodifier.BiomePlacementModifier
class BiomePlacementModifier extends AbstractConditionalPlacementModifier{
 getType(): PlacementModifierType;
}
class Static_BiomePlacementModifier {
static of(): BiomePlacementModifier;
static method_39616(): IllegalStateException;
static method_39617(): BiomePlacementModifier;
static INSTANCE: BiomePlacementModifier;
static MODIFIER_CODEC: Codec;
}

//net.minecraft.world.gen.placementmodifier.SurfaceWaterDepthFilterPlacementModifier
class SurfaceWaterDepthFilterPlacementModifier extends AbstractConditionalPlacementModifier{
 getType(): PlacementModifierType;
}
class Static_SurfaceWaterDepthFilterPlacementModifier {
static of(maxWaterDepth: number): SurfaceWaterDepthFilterPlacementModifier;
static method_34386(instance: RecordCodecBuilder_Instance): App;
static method_34387(surfaceWaterDepthFilterPlacementModifier: SurfaceWaterDepthFilterPlacementModifier): Integer;
static MODIFIER_CODEC: Codec;
}

//net.minecraft.world.gen.placementmodifier.NoiseBasedCountPlacementModifier
class NoiseBasedCountPlacementModifier extends AbstractCountPlacementModifier{
 getType(): PlacementModifierType;
}
class Static_NoiseBasedCountPlacementModifier {
static of(noiseToCountRatio: number,noiseFactor: number,noiseOffset: number): NoiseBasedCountPlacementModifier;
static method_28942(noiseBasedCountPlacementModifier: NoiseBasedCountPlacementModifier): Double;
static method_28943(noiseBasedCountPlacementModifier: NoiseBasedCountPlacementModifier): Integer;
static method_28941(noiseBasedCountPlacementModifier: NoiseBasedCountPlacementModifier): Double;
static method_28939(instance: RecordCodecBuilder_Instance): App;
static MODIFIER_CODEC: Codec;
}

//net.minecraft.world.gen.placementmodifier.NoiseThresholdCountPlacementModifier
class NoiseThresholdCountPlacementModifier extends AbstractCountPlacementModifier{
 getType(): PlacementModifierType;
}
class Static_NoiseThresholdCountPlacementModifier {
static of(noiseLevel: number,belowNoise: number,aboveNoise: number): NoiseThresholdCountPlacementModifier;
static method_28733(instance: RecordCodecBuilder_Instance): App;
static method_28735(noiseThresholdCountPlacementModifier: NoiseThresholdCountPlacementModifier): Double;
static method_28734(noiseThresholdCountPlacementModifier: NoiseThresholdCountPlacementModifier): Integer;
static method_28732(noiseThresholdCountPlacementModifier: NoiseThresholdCountPlacementModifier): Integer;
static MODIFIER_CODEC: Codec;
}

//net.minecraft.world.gen.placementmodifier.CountPlacementModifier
class CountPlacementModifier extends AbstractCountPlacementModifier{
 getType(): PlacementModifierType;
}
class Static_CountPlacementModifier {
static of(count: number): CountPlacementModifier;
static of(count: IntProvider): CountPlacementModifier;
static method_39625(countPlacementModifier: CountPlacementModifier): IntProvider;
static MODIFIER_CODEC: Codec;
}

//net.minecraft.world.gen.carver.NetherCaveCarver
class NetherCaveCarver extends CaveCarver{
}

//net.minecraft.client.render.entity.TntMinecartEntityRenderer
class TntMinecartEntityRenderer extends MinecartEntityRenderer{
}
class Static_TntMinecartEntityRenderer {
static renderFlashingBlock(blockRenderManager: BlockRenderManager,state: BlockState,matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,light: number,drawFlash: boolean): void;
}

//net.minecraft.client.render.entity.ArrowEntityRenderer
class ArrowEntityRenderer extends ProjectileEntityRenderer{
 getTexture(arrowEntity: ArrowEntity): Identifier;
 getTexture(entity: Entity): Identifier;
}
class Static_ArrowEntityRenderer {
static TEXTURE: Identifier;
static TIPPED_TEXTURE: Identifier;
}

//net.minecraft.client.render.entity.SpectralArrowEntityRenderer
class SpectralArrowEntityRenderer extends ProjectileEntityRenderer{
 getTexture(spectralArrowEntity: SpectralArrowEntity): Identifier;
 getTexture(entity: Entity): Identifier;
}
class Static_SpectralArrowEntityRenderer {
static TEXTURE: Identifier;
}

//net.minecraft.client.render.entity.DisplayEntityRenderer$BlockDisplayEntityRenderer
class DisplayEntityRenderer_BlockDisplayEntityRenderer extends DisplayEntityRenderer{
 render(entity: Entity,yaw: number,tickDelta: number,matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,light: number): void;
 render(entity: DisplayEntity,data: Object,matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,brightness: number,lerpProgress: number): void;
 render(blockDisplayEntity: DisplayEntity_BlockDisplayEntity,data: DisplayEntity_BlockDisplayEntity_Data,matrixStack: MatrixStack,vertexConsumerProvider: VertexConsumerProvider,i: number,f: number): void;
 getTexture(entity: Entity): Identifier;
}

//net.minecraft.client.render.entity.DisplayEntityRenderer$ItemDisplayEntityRenderer
class DisplayEntityRenderer_ItemDisplayEntityRenderer extends DisplayEntityRenderer{
 render(entity: Entity,yaw: number,tickDelta: number,matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,light: number): void;
 render(entity: DisplayEntity,data: Object,matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,brightness: number,lerpProgress: number): void;
 render(itemDisplayEntity: DisplayEntity_ItemDisplayEntity,data: DisplayEntity_ItemDisplayEntity_Data,matrixStack: MatrixStack,vertexConsumerProvider: VertexConsumerProvider,i: number,f: number): void;
 getTexture(entity: Entity): Identifier;
}

//net.minecraft.client.render.entity.DisplayEntityRenderer$TextDisplayEntityRenderer
class DisplayEntityRenderer_TextDisplayEntityRenderer extends DisplayEntityRenderer{
 render(entity: Entity,yaw: number,tickDelta: number,matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,light: number): void;
 render(entity: DisplayEntity,data: Object,matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,brightness: number,lerpProgress: number): void;
 render(textDisplayEntity: DisplayEntity_TextDisplayEntity,data: DisplayEntity_TextDisplayEntity_Data,matrixStack: MatrixStack,vertexConsumerProvider: VertexConsumerProvider,i: number,f: number): void;
 getTexture(entity: Entity): Identifier;
}

//net.minecraft.screen.FurnaceScreenHandler
class FurnaceScreenHandler extends AbstractFurnaceScreenHandler{
}

//net.minecraft.screen.SmokerScreenHandler
class SmokerScreenHandler extends AbstractFurnaceScreenHandler{
}

//net.minecraft.screen.BlastFurnaceScreenHandler
class BlastFurnaceScreenHandler extends AbstractFurnaceScreenHandler{
}

//net.minecraft.block.WallBannerBlock
class WallBannerBlock extends AbstractBannerBlock{
 rotate(state: BlockState,rotation: BlockRotation): BlockState;
 getStateForNeighborUpdate(state: BlockState,direction: Direction,neighborState: BlockState,world: WorldAccess,pos: BlockPos,neighborPos: BlockPos): BlockState;
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 canPlaceAt(state: BlockState,world: WorldView,pos: BlockPos): boolean;
 mirror(state: BlockState,mirror: BlockMirror): BlockState;
 getTranslationKey(): string;
 getPlacementState(ctx: ItemPlacementContext): BlockState;
}
class Static_WallBannerBlock {
static FACING: DirectionProperty;
static FACING_TO_SHAPE: Map;
}

//net.minecraft.block.BannerBlock
class BannerBlock extends AbstractBannerBlock{
 rotate(state: BlockState,rotation: BlockRotation): BlockState;
 getStateForNeighborUpdate(state: BlockState,direction: Direction,neighborState: BlockState,world: WorldAccess,pos: BlockPos,neighborPos: BlockPos): BlockState;
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 canPlaceAt(state: BlockState,world: WorldView,pos: BlockPos): boolean;
 mirror(state: BlockState,mirror: BlockMirror): BlockState;
 getPlacementState(ctx: ItemPlacementContext): BlockState;
}
class Static_BannerBlock {
static getForColor(color: DyeColor): Block;
static ROTATION: IntProperty;
static COLORED_BANNERS: Map;
static SHAPE: VoxelShape;
}

//net.minecraft.block.SmokerBlock
class SmokerBlock extends AbstractFurnaceBlock{
 randomDisplayTick(state: BlockState,world: World,pos: BlockPos,random: Random): void;
 getTicker(world: World,state: BlockState,type: BlockEntityType): BlockEntityTicker;
 createBlockEntity(pos: BlockPos,state: BlockState): BlockEntity;
}

//net.minecraft.block.BlastFurnaceBlock
class BlastFurnaceBlock extends AbstractFurnaceBlock{
 randomDisplayTick(state: BlockState,world: World,pos: BlockPos,random: Random): void;
 getTicker(world: World,state: BlockState,type: BlockEntityType): BlockEntityTicker;
 createBlockEntity(pos: BlockPos,state: BlockState): BlockEntity;
}

//net.minecraft.block.FurnaceBlock
class FurnaceBlock extends AbstractFurnaceBlock{
 randomDisplayTick(state: BlockState,world: World,pos: BlockPos,random: Random): void;
 getTicker(world: World,state: BlockState,type: BlockEntityType): BlockEntityTicker;
 createBlockEntity(pos: BlockPos,state: BlockState): BlockEntity;
}

//net.minecraft.block.DropperBlock
class DropperBlock extends DispenserBlock{
 createBlockEntity(pos: BlockPos,state: BlockState): BlockEntity;
}
class Static_DropperBlock {
static BEHAVIOR: DispenserBehavior;
}

//net.minecraft.test.TestContext$1


//net.minecraft.test.TestContext$2


//net.minecraft.server.network.ServerPlayerEntity
class ServerPlayerEntity extends PlayerEntity{
 sleep(pos: BlockPos): void;
 copyFrom(oldPlayer: ServerPlayerEntity,alive: boolean): void;
 tick(): void;
 sendTradeOffers(syncId: number,offers: TradeOfferList,levelProgress: number,experience: number,leveled: boolean,refreshable: boolean): void;
 isInTeleportationState(): boolean;
 getAdvancementTracker(): PlayerAdvancementTracker;
 onTeleportationDone(): void;
 onHandledScreenClosed(): void;
 updateLastActionTime(): void;
 sendMessageToClient(message: Text,overlay: boolean): void;
 getClientChatVisibility(): ChatVisibility;
 getSpawnPointPosition(): BlockPos;
 shouldFilterMessagesSentTo(player: ServerPlayerEntity): boolean;
 getSpawnPointDimension(): RegistryKey;
 sendResourcePackUrl(url: string,hash: string,required: boolean,resourcePackPrompt: Text): void;
 canModifyAt(world: World,pos: BlockPos): boolean;
 triggerItemPickedUpByEntityCriteria(item: ItemEntity): void;
 sendServerMetadata(metadata: ServerMetadata): void;
 setServerWorld(world: ServerWorld): void;
 onSpawn(): void;
 isSpawnForced(): boolean;
 markHealthDirty(): void;
 getIp(): string;
 enterCombat(): void;
 endCombat(): void;
 startRiding(entity: Entity,force: boolean): boolean;
 closeHandledScreen(): void;
 openEditSignScreen(sign: SignBlockEntity,front: boolean): void;
 lookAt(anchorPoint: EntityAnchorArgumentType_EntityAnchor,target: Vec3d): void;
 sendPickup(item: Entity,count: number): void;
 stopRiding(): void;
 setClientSettings(packet: ClientSettingsC2SPacket): void;
 getTextStream(): TextStream;
 getSession(): PublicPlayerSession;
 setGameMode(nbt: NbtCompound): void;
 setSession(session: PublicPlayerSession): void;
 getLastActionTime(): long;
 playerTick(): void;
 onLanding(): void;
 getServerWorld(): ServerWorld;
 updateInput(sidewaysSpeed: number,forwardSpeed: number,jumping: boolean,sneaking: boolean): void;
 getRecipeBook(): ServerRecipeBook;
 sendMessage(message: Text): void;
 sendMessage(message: Text,overlay: boolean): void;
 requestTeleport(destX: number,destY: number,destZ: number): void;
 shouldFilterText(): boolean;
 isCreative(): boolean;
 handleFall(xDifference: number,yDifference: number,zDifference: number,onGround: boolean): void;
 dropSelectedItem(entireStack: boolean): boolean;
 teleport(world: ServerWorld,destX: number,destY: number,destZ: number,flags: Set,yaw: number,pitch: number): boolean;
 teleport(targetWorld: ServerWorld,x: number,y: number,z: number,yaw: number,pitch: number): void;
 swingHand(hand: Hand): void;
 onDisconnect(): void;
 sendChatMessage(message: SentMessage,filterMaskEnabled: boolean,params: MessageType_Parameters): void;
 wakeUp(skipSleepTimer: boolean,updateSleepingPlayers: boolean): void;
 getStatHandler(): ServerStatHandler;
 changeGameMode(gameMode: GameMode): boolean;
 damage(source: DamageSource,amount: number): boolean;
 getCameraEntity(): Entity;
 unlockRecipes(ids: Identifier[]): void;
 unlockRecipes(recipes: Collection): number;
 lockRecipes(recipes: Collection): number;
 dropItem(stack: ItemStack,throwRandomly: boolean,retainOwnership: boolean): ItemEntity;
 increaseStat(stat: Stat,amount: number): void;
 attack(target: Entity): void;
 getSpawnAngle(): number;
 isDisconnected(): boolean;
 playSound(event: SoundEvent,category: SoundCategory,volume: number,pitch: number): void;
 isSpectator(): boolean;
 createSpawnPacket(): Packet;
 isInvulnerableTo(damageSource: DamageSource): boolean;
 moveToWorld(destination: ServerWorld): Entity;
 canBeSpectated(spectator: ServerPlayerEntity): boolean;
 openHandledScreen(factory: NamedScreenHandlerFactory): OptionalInt;
 setCameraEntity(entity: Entity): void;
 setSpawnPoint(dimension: RegistryKey,pos: BlockPos,angle: number,forced: boolean,sendMessage: boolean): void;
 setExperienceLevel(level: number): void;
 tickFallStartPos(): void;
 getPlayerListName(): Text;
 onRecipeCrafted(recipe: Recipe,ingredients: List): void;
 lookAtEntity(anchorPoint: EntityAnchorArgumentType_EntityAnchor,targetEntity: Entity,targetAnchor: EntityAnchorArgumentType_EntityAnchor): void;
 getSculkShriekerWarningManager(): Optional;
 trySleep(pos: BlockPos): Either;
 openHorseInventory(horse: AbstractHorseEntity,inventory: Inventory): void;
 addExperience(experience: number): void;
 sendAbilitiesUpdate(): void;
 applyEnchantmentCosts(enchantedItem: ItemStack,experienceLevels: number): void;
 openCommandBlockScreen(commandBlock: CommandBlockBlockEntity): void;
 tiltScreen(deltaX: number,deltaZ: number): void;
 onDeath(damageSource: DamageSource): void;
 useBook(book: ItemStack,hand: Hand): void;
 writeCustomDataToNbt(nbt: NbtCompound): void;
 readCustomDataFromNbt(nbt: NbtCompound): void;
 updateKilledAdvancementCriterion(entityKilled: Entity,score: number,damageSource: DamageSource): void;
 refreshPositionAfterTeleport(x: number,y: number,z: number): void;
 requestTeleportAndDismount(destX: number,destY: number,destZ: number): void;
 requestTeleportOffset(offsetX: number,offsetY: number,offsetZ: number): void;
 shouldDamagePlayer(player: PlayerEntity): boolean;
 tickVehicleInLavaRiding(): void;
 setExperiencePoints(points: number): void;
 areClientChatColorsEnabled(): boolean;
 addEnchantedHitParticles(target: Entity): void;
 addExperienceLevels(levels: number): void;
 getWatchedSection(): ChunkSectionPos;
 sendChunkPacket(chunkPos: ChunkPos,chunkDataPacket: Packet): void;
 setWatchedSection(section: ChunkSectionPos): void;
 resetStat(stat: Stat): void;
 addCritParticles(target: Entity): void;
 allowsServerListing(): boolean;
 sendUnloadChunkPacket(chunkPos: ChunkPos): void;
 networkHandler: ServerPlayNetworkHandler;
 server: MinecraftServer;
 interactionManager: ServerPlayerInteractionManager;
 pingMilliseconds: number;
 notInAnyWorld: boolean;
}
class Static_ServerPlayerEntity {
static method_29205(nbtCompound: NbtCompound,encoded: NbtElement): void;
static method_14250(i: number,innerScore: ScoreboardPlayerScore): void;
static method_45165(nbtCompound: NbtCompound,encoded: NbtElement): void;
static method_29778(entity: MobEntity): boolean;
static method_14221(i: number,score: ScoreboardPlayerScore): void;
static method_14210(text: Text,style: Style): Style;
static gameModeFromNbt(nbt: NbtCompound,key: string): GameMode;
static LOGGER: Logger;
static field_29769: number;
static field_29770: number;
}

//net.minecraft.client.network.AbstractClientPlayerEntity
class AbstractClientPlayerEntity extends PlayerEntity{
 tick(): void;
 getModel(): string;
 getSkinTexture(): Identifier;
 getElytraTexture(): Identifier;
 getCapeTexture(): Identifier;
 hasSkinTexture(): boolean;
 isCreative(): boolean;
 getFovMultiplier(): number;
 isSpectator(): boolean;
 lerpVelocity(tickDelta: number): Vec3d;
 canRenderCapeTexture(): boolean;
 canRenderElytraTexture(): boolean;
 elytraPitch: number;
 elytraYaw: number;
 elytraRoll: number;
 clientWorld: ClientWorld;
}
class Static_AbstractClientPlayerEntity {
static loadSkin(id: Identifier,playerName: string): void;
static getSkinId(playerName: string): Identifier;
static SKIN_URL: string;
}

//net.minecraft.client.gui.screen.option.ControlsListWidget$CategoryEntry
class ControlsListWidget_CategoryEntry extends ControlsListWidget_Entry{
 children(): List;
 render(context: DrawContext,index: number,y: number,x: number,entryWidth: number,entryHeight: number,mouseX: number,mouseY: number,hovered: boolean,tickDelta: number): void;
 selectableChildren(): List;
 getNavigationPath(navigation: GuiNavigation): GuiNavigationPath;
}

//net.minecraft.client.gui.screen.option.ControlsListWidget$KeyBindingEntry
class ControlsListWidget_KeyBindingEntry extends ControlsListWidget_Entry{
 children(): List;
 render(context: DrawContext,index: number,y: number,x: number,entryWidth: number,entryHeight: number,mouseX: number,mouseY: number,hovered: boolean,tickDelta: number): void;
 selectableChildren(): List;
}
class Static_ControlsListWidget_KeyBindingEntry {
static method_46514(keyBinding: KeyBinding,text: Text,textSupplier: Supplier): MutableText;
static method_46515(text: Text,textSupplier: Supplier): MutableText;
}

//net.minecraft.client.gui.screen.world.EditGameRulesScreen$RuleCategoryWidget
class EditGameRulesScreen_RuleCategoryWidget extends EditGameRulesScreen_AbstractRuleWidget{
 children(): List;
 render(context: DrawContext,index: number,y: number,x: number,entryWidth: number,entryHeight: number,mouseX: number,mouseY: number,hovered: boolean,tickDelta: number): void;
 selectableChildren(): List;
}

//net.minecraft.client.gui.screen.world.EditGameRulesScreen$NamedRuleWidget
class EditGameRulesScreen_NamedRuleWidget extends EditGameRulesScreen_AbstractRuleWidget{
 children(): List;
 selectableChildren(): List;
}

//net.minecraft.client.render.entity.model.ArmorStandEntityModel
class ArmorStandEntityModel extends ArmorStandArmorEntityModel{
 animateModel(livingEntity: LivingEntity,f: number,g: number,h: number): void;
 animateModel(armorStandEntity: ArmorStandEntity,f: number,g: number,h: number): void;
 animateModel(entity: Entity,limbAngle: number,limbDistance: number,tickDelta: number): void;
 setAngles(livingEntity: LivingEntity,f: number,g: number,h: number,i: number,j: number): void;
 setAngles(entity: Entity,limbAngle: number,limbDistance: number,animationProgress: number,headYaw: number,headPitch: number): void;
 setAngles(armorStandEntity: ArmorStandEntity,f: number,g: number,h: number,i: number,j: number): void;
 setArmAngle(arm: Arm,matrices: MatrixStack): void;
}
class Static_ArmorStandEntityModel {
static getTexturedModelData(): TexturedModelData;
static RIGHT_BODY_STICK: string;
static LEFT_BODY_STICK: string;
static SHOULDER_STICK: string;
static BASE_PLATE: string;
}

//net.minecraft.client.render.entity.model.GiantEntityModel
class GiantEntityModel extends AbstractZombieModel{
 isAttacking(giantEntity: GiantEntity): boolean;
 isAttacking(entity: HostileEntity): boolean;
}

//net.minecraft.client.render.entity.model.ZombieEntityModel
class ZombieEntityModel extends AbstractZombieModel{
 isAttacking(zombieEntity: ZombieEntity): boolean;
 isAttacking(entity: HostileEntity): boolean;
}

//net.minecraft.client.render.entity.model.PiglinEntityModel
class PiglinEntityModel extends PlayerEntityModel{
 setAngles(mobEntity: MobEntity,f: number,g: number,h: number,i: number,j: number): void;
 setAngles(entity: Entity,limbAngle: number,limbDistance: number,animationProgress: number,headYaw: number,headPitch: number): void;
 setAngles(livingEntity: LivingEntity,f: number,g: number,h: number,i: number,j: number): void;
 rightEar: ModelPart;
}
class Static_PiglinEntityModel {
static getModelData(dilation: Dilation): ModelData;
static addHead(dilation: Dilation,baseModelData: ModelData): void;
}

//net.minecraft.client.realms.gui.screen.RealmsMainScreen$RealmSelectionListTrialEntry
class RealmsMainScreen_RealmSelectionListTrialEntry extends RealmsMainScreen_Entry{
 render(context: DrawContext,index: number,y: number,x: number,entryWidth: number,entryHeight: number,mouseX: number,mouseY: number,hovered: boolean,tickDelta: number): void;
 getNarration(): Text;
 mouseClicked(mouseX: number,mouseY: number,button: number): boolean;
}

//net.minecraft.client.realms.gui.screen.RealmsMainScreen$VisitButtonEntry
class RealmsMainScreen_VisitButtonEntry extends RealmsMainScreen_Entry{
 render(context: DrawContext,index: number,y: number,x: number,entryWidth: number,entryHeight: number,mouseX: number,mouseY: number,hovered: boolean,tickDelta: number): void;
 getNarration(): Text;
 keyPressed(keyCode: number,scanCode: number,modifiers: number): boolean;
 mouseClicked(mouseX: number,mouseY: number,button: number): boolean;
}

//net.minecraft.client.realms.gui.screen.RealmsMainScreen$VisitUrlNotification
class RealmsMainScreen_VisitUrlNotification extends RealmsMainScreen_Entry{
 render(context: DrawContext,index: number,y: number,x: number,entryWidth: number,entryHeight: number,mouseX: number,mouseY: number,hovered: boolean,tickDelta: number): void;
 getNarration(): Text;
 drawBorder(context: DrawContext,index: number,y: number,x: number,entryWidth: number,entryHeight: number,mouseX: number,mouseY: number,hovered: boolean,tickDelta: number): void;
 keyPressed(keyCode: number,scanCode: number,modifiers: number): boolean;
 mouseClicked(mouseX: number,mouseY: number,button: number): boolean;
}
class Static_RealmsMainScreen_VisitUrlNotification {
static method_49565(drawContext: DrawContext,i: number,j: number,f: number,child: ClickableWidget): void;
static field_43002: number;
static field_43003: number;
static field_43004: number;
}

//net.minecraft.client.realms.gui.screen.RealmsMainScreen$RealmSelectionListEntry
class RealmsMainScreen_RealmSelectionListEntry extends RealmsMainScreen_Entry{
 render(context: DrawContext,index: number,y: number,x: number,entryWidth: number,entryHeight: number,mouseX: number,mouseY: number,hovered: boolean,tickDelta: number): void;
 getNarration(): Text;
 keyPressed(keyCode: number,scanCode: number,modifiers: number): boolean;
 mouseClicked(mouseX: number,mouseY: number,button: number): boolean;
 getRealmsServer(): RealmsServer;
}
class Static_RealmsMainScreen_RealmSelectionListEntry {
static field_32054: number;
}

//net.minecraft.client.gui.screen.report.ChatSelectionScreen$SelectionListWidget$MessageEntry
class ChatSelectionScreen_SelectionListWidget_MessageEntry extends ChatSelectionScreen_SelectionListWidget_Entry{
 render(context: DrawContext,index: number,y: number,x: number,entryWidth: number,entryHeight: number,mouseX: number,mouseY: number,hovered: boolean,tickDelta: number): void;
 isSelected(): boolean;
 getNarration(): Text;
 keyPressed(keyCode: number,scanCode: number,modifiers: number): boolean;
 mouseClicked(mouseX: number,mouseY: number,button: number): boolean;
 canSelect(): boolean;
 isHighlightedOnHover(): boolean;
}
class Static_ChatSelectionScreen_SelectionListWidget_MessageEntry {
static CHECKMARK: Identifier;
static CHECKMARK_WIDTH: number;
static CHECKMARK_HEIGHT: number;
static CHAT_MESSAGE_LEFT_MARGIN: number;
static INDICATOR_LEFT_MARGIN: number;
}

//net.minecraft.client.gui.screen.report.ChatSelectionScreen$SelectionListWidget$SeparatorEntry
class ChatSelectionScreen_SelectionListWidget_SeparatorEntry extends ChatSelectionScreen_SelectionListWidget_Entry{
 render(context: DrawContext,index: number,y: number,x: number,entryWidth: number,entryHeight: number,mouseX: number,mouseY: number,hovered: boolean,tickDelta: number): void;
}

//net.minecraft.client.gui.screen.report.ChatSelectionScreen$SelectionListWidget$TextEntry
class ChatSelectionScreen_SelectionListWidget_TextEntry extends ChatSelectionScreen_SelectionListWidget_Entry{
 render(context: DrawContext,index: number,y: number,x: number,entryWidth: number,entryHeight: number,mouseX: number,mouseY: number,hovered: boolean,tickDelta: number): void;
 getNarration(): Text;
}
class Static_ChatSelectionScreen_SelectionListWidget_TextEntry {
static TEXT_COLOR: number;
}

//net.minecraft.client.gui.screen.report.ChatSelectionScreen$SelectionListWidget$SenderEntry
class ChatSelectionScreen_SelectionListWidget_SenderEntry extends ChatSelectionScreen_SelectionListWidget_Entry{
 render(context: DrawContext,index: number,y: number,x: number,entryWidth: number,entryHeight: number,mouseX: number,mouseY: number,hovered: boolean,tickDelta: number): void;
}
class Static_ChatSelectionScreen_SelectionListWidget_SenderEntry {
static PLAYER_SKIN_SIZE: number;
}

//net.minecraft.client.gui.screen.multiplayer.MultiplayerServerListWidget$ScanningEntry
class MultiplayerServerListWidget_ScanningEntry extends MultiplayerServerListWidget_Entry{
 render(context: DrawContext,index: number,y: number,x: number,entryWidth: number,entryHeight: number,mouseX: number,mouseY: number,hovered: boolean,tickDelta: number): void;
 getNarration(): Text;
}

//net.minecraft.client.gui.screen.multiplayer.MultiplayerServerListWidget$LanServerEntry
class MultiplayerServerListWidget_LanServerEntry extends MultiplayerServerListWidget_Entry{
 render(context: DrawContext,index: number,y: number,x: number,entryWidth: number,entryHeight: number,mouseX: number,mouseY: number,hovered: boolean,tickDelta: number): void;
 getNarration(): Text;
 mouseClicked(mouseX: number,mouseY: number,button: number): boolean;
 getMotdNarration(): Text;
 getLanServerEntry(): LanServerInfo;
}
class Static_MultiplayerServerListWidget_LanServerEntry {
static field_32386: number;
static TITLE_TEXT: Text;
static HIDDEN_ADDRESS_TEXT: Text;
}

//net.minecraft.client.gui.screen.multiplayer.MultiplayerServerListWidget$ServerEntry
class MultiplayerServerListWidget_ServerEntry extends MultiplayerServerListWidget_Entry{
 close(): void;
 render(context: DrawContext,index: number,y: number,x: number,entryWidth: number,entryHeight: number,mouseX: number,mouseY: number,hovered: boolean,tickDelta: number): void;
 getNarration(): Text;
 saveFile(): void;
 getServer(): ServerInfo;
 keyPressed(keyCode: number,scanCode: number,modifiers: number): boolean;
 mouseClicked(mouseX: number,mouseY: number,button: number): boolean;
}
class Static_MultiplayerServerListWidget_ServerEntry {
static field_32387: number;
static field_32388: number;
static field_32389: number;
static field_32390: number;
static field_32391: number;
static field_32392: number;
static field_32393: number;
static field_32394: number;
}

//net.minecraft.client.gui.screen.world.WorldListWidget$WorldEntry
class WorldListWidget_WorldEntry extends WorldListWidget_Entry, AutoCloseable{
 delete(): void;
 close(): void;
 isAvailable(): boolean;
 render(context: DrawContext,index: number,y: number,x: number,entryWidth: number,entryHeight: number,mouseX: number,mouseY: number,hovered: boolean,tickDelta: number): void;
 getNarration(): Text;
 play(): void;
 mouseClicked(mouseX: number,mouseY: number,button: number): boolean;
 edit(): void;
 deleteIfConfirmed(): void;
 recreate(): void;
 getLevelDisplayName(): string;
}
class Static_WorldListWidget_WorldEntry {
static field_32435: number;
static field_32436: number;
static field_32437: number;
static field_32438: number;
static field_32439: number;
static field_32440: number;
static field_32441: number;
static field_32442: number;
}

//net.minecraft.client.gui.screen.world.WorldListWidget$LoadingEntry
class WorldListWidget_LoadingEntry extends WorldListWidget_Entry{
 isAvailable(): boolean;
 render(context: DrawContext,index: number,y: number,x: number,entryWidth: number,entryHeight: number,mouseX: number,mouseY: number,hovered: boolean,tickDelta: number): void;
 getNarration(): Text;
}
class Static_WorldListWidget_LoadingEntry {
static LOADING_LIST_TEXT: Text;
}

//net.minecraft.fluid.WaterFluid$Flowing
class WaterFluid_Flowing extends WaterFluid{
 getLevel(state: FluidState): number;
 isStill(state: FluidState): boolean;
}

//net.minecraft.fluid.WaterFluid$Still
class WaterFluid_Still extends WaterFluid{
 getLevel(state: FluidState): number;
 isStill(state: FluidState): boolean;
}

//net.minecraft.fluid.LavaFluid$Flowing
class LavaFluid_Flowing extends LavaFluid{
 getLevel(state: FluidState): number;
 isStill(state: FluidState): boolean;
}

//net.minecraft.fluid.LavaFluid$Still
class LavaFluid_Still extends LavaFluid{
 getLevel(state: FluidState): number;
 isStill(state: FluidState): boolean;
}

//net.minecraft.client.sound.AggressiveBeeSoundInstance
class AggressiveBeeSoundInstance extends AbstractBeeSoundInstance{
}

//net.minecraft.client.sound.PassiveBeeSoundInstance
class PassiveBeeSoundInstance extends AbstractBeeSoundInstance{
}

//net.minecraft.block.CoralFanBlock
class CoralFanBlock extends DeadCoralFanBlock{
 getStateForNeighborUpdate(state: BlockState,direction: Direction,neighborState: BlockState,world: WorldAccess,pos: BlockPos,neighborPos: BlockPos): BlockState;
 onBlockAdded(state: BlockState,world: World,pos: BlockPos,oldState: BlockState,notify: boolean): void;
 scheduledTick(state: BlockState,world: ServerWorld,pos: BlockPos,random: Random): void;
}

//net.minecraft.block.DeadCoralWallFanBlock
class DeadCoralWallFanBlock extends DeadCoralFanBlock{
 rotate(state: BlockState,rotation: BlockRotation): BlockState;
 getStateForNeighborUpdate(state: BlockState,direction: Direction,neighborState: BlockState,world: WorldAccess,pos: BlockPos,neighborPos: BlockPos): BlockState;
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 canPlaceAt(state: BlockState,world: WorldView,pos: BlockPos): boolean;
 mirror(state: BlockState,mirror: BlockMirror): BlockState;
 getPlacementState(ctx: ItemPlacementContext): BlockState;
}
class Static_DeadCoralWallFanBlock {
static FACING: DirectionProperty;
static FACING_TO_SHAPE: Map;
}

//net.minecraft.block.SmithingTableBlock
class SmithingTableBlock extends CraftingTableBlock{
 createScreenHandlerFactory(state: BlockState,world: World,pos: BlockPos): NamedScreenHandlerFactory;
 onUse(state: BlockState,world: World,pos: BlockPos,player: PlayerEntity,hand: Hand,hit: BlockHitResult): ActionResult;
}
class Static_SmithingTableBlock {
static method_24950(world: World,blockPos: BlockPos,syncId: number,inventory: PlayerInventory,player: PlayerEntity): ScreenHandler;
static SCREEN_TITLE: Text;
}

//net.minecraft.block.FletchingTableBlock
class FletchingTableBlock extends CraftingTableBlock{
 onUse(state: BlockState,world: World,pos: BlockPos,player: PlayerEntity,hand: Hand,hit: BlockHitResult): ActionResult;
}

//net.minecraft.block.SpreadableBlock
class SpreadableBlock extends SnowyBlock{
 randomTick(state: BlockState,world: ServerWorld,pos: BlockPos,random: Random): void;
}
class Static_SpreadableBlock {
static canSpread(state: BlockState,world: WorldView,pos: BlockPos): boolean;
static canSurvive(state: BlockState,world: WorldView,pos: BlockPos): boolean;
}

//net.minecraft.block.WeightedPressurePlateBlock
class WeightedPressurePlateBlock extends AbstractPressurePlateBlock{
}
class Static_WeightedPressurePlateBlock {
static POWER: IntProperty;
}

//net.minecraft.block.PressurePlateBlock
class PressurePlateBlock extends AbstractPressurePlateBlock{
}
class Static_PressurePlateBlock {
static POWERED: BooleanProperty;
}

//net.minecraft.block.HayBlock
class HayBlock extends PillarBlock{
 onLandedUpon(world: World,state: BlockState,pos: BlockPos,entity: Entity,fallDistance: number): void;
}

//net.minecraft.block.ChorusPlantBlock
class ChorusPlantBlock extends ConnectingBlock{
 getStateForNeighborUpdate(state: BlockState,direction: Direction,neighborState: BlockState,world: WorldAccess,pos: BlockPos,neighborPos: BlockPos): BlockState;
 canPlaceAt(state: BlockState,world: WorldView,pos: BlockPos): boolean;
 canPathfindThrough(state: BlockState,world: BlockView,pos: BlockPos,type: NavigationType): boolean;
 scheduledTick(state: BlockState,world: ServerWorld,pos: BlockPos,random: Random): void;
 getPlacementState(ctx: ItemPlacementContext): BlockState;
 withConnectionProperties(world: BlockView,pos: BlockPos): BlockState;
}

//net.minecraft.block.RedstoneTorchBlock
class RedstoneTorchBlock extends TorchBlock{
 getStrongRedstonePower(state: BlockState,world: BlockView,pos: BlockPos,direction: Direction): number;
 randomDisplayTick(state: BlockState,world: World,pos: BlockPos,random: Random): void;
 emitsRedstonePower(state: BlockState): boolean;
 onBlockAdded(state: BlockState,world: World,pos: BlockPos,oldState: BlockState,notify: boolean): void;
 onStateReplaced(state: BlockState,world: World,pos: BlockPos,newState: BlockState,moved: boolean): void;
 scheduledTick(state: BlockState,world: ServerWorld,pos: BlockPos,random: Random): void;
 neighborUpdate(state: BlockState,world: World,pos: BlockPos,sourceBlock: Block,sourcePos: BlockPos,notify: boolean): void;
 getWeakRedstonePower(state: BlockState,world: BlockView,pos: BlockPos,direction: Direction): number;
}
class Static_RedstoneTorchBlock {
static method_20453(worldx: BlockView): List;
static isBurnedOut(world: World,pos: BlockPos,addNew: boolean): boolean;
static LIT: BooleanProperty;
static BURNOUT_MAP: Map;
static field_31227: number;
static field_31228: number;
static field_31229: number;
static SCHEDULED_TICK_DELAY: number;
}

//net.minecraft.block.WallTorchBlock
class WallTorchBlock extends TorchBlock{
 rotate(state: BlockState,rotation: BlockRotation): BlockState;
 getStateForNeighborUpdate(state: BlockState,direction: Direction,neighborState: BlockState,world: WorldAccess,pos: BlockPos,neighborPos: BlockPos): BlockState;
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 canPlaceAt(state: BlockState,world: WorldView,pos: BlockPos): boolean;
 randomDisplayTick(state: BlockState,world: World,pos: BlockPos,random: Random): void;
 mirror(state: BlockState,mirror: BlockMirror): BlockState;
 getTranslationKey(): string;
 getPlacementState(ctx: ItemPlacementContext): BlockState;
}
class Static_WallTorchBlock {
static getBoundingShape(state: BlockState): VoxelShape;
static FACING: DirectionProperty;
static field_31285: number;
static BOUNDING_SHAPES: Map;
}

//net.minecraft.block.LoomBlock
class LoomBlock extends HorizontalFacingBlock{
 createScreenHandlerFactory(state: BlockState,world: World,pos: BlockPos): NamedScreenHandlerFactory;
 onUse(state: BlockState,world: World,pos: BlockPos,player: PlayerEntity,hand: Hand,hit: BlockHitResult): ActionResult;
 getPlacementState(ctx: ItemPlacementContext): BlockState;
}
class Static_LoomBlock {
static method_17478(world: World,blockPos: BlockPos,syncId: number,inventory: PlayerInventory,player: PlayerEntity): ScreenHandler;
static TITLE: Text;
}

//net.minecraft.block.FenceGateBlock
class FenceGateBlock extends HorizontalFacingBlock{
 getStateForNeighborUpdate(state: BlockState,direction: Direction,neighborState: BlockState,world: WorldAccess,pos: BlockPos,neighborPos: BlockPos): BlockState;
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 getSidesShape(state: BlockState,world: BlockView,pos: BlockPos): VoxelShape;
 canPathfindThrough(state: BlockState,world: BlockView,pos: BlockPos,type: NavigationType): boolean;
 getCullingShape(state: BlockState,world: BlockView,pos: BlockPos): VoxelShape;
 neighborUpdate(state: BlockState,world: World,pos: BlockPos,sourceBlock: Block,sourcePos: BlockPos,notify: boolean): void;
 onUse(state: BlockState,world: World,pos: BlockPos,player: PlayerEntity,hand: Hand,hit: BlockHitResult): ActionResult;
 getCollisionShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 getPlacementState(ctx: ItemPlacementContext): BlockState;
}
class Static_FenceGateBlock {
static canWallConnect(state: BlockState,side: Direction): boolean;
static OPEN: BooleanProperty;
static POWERED: BooleanProperty;
static IN_WALL: BooleanProperty;
static Z_AXIS_SHAPE: VoxelShape;
static X_AXIS_SHAPE: VoxelShape;
static IN_WALL_Z_AXIS_SHAPE: VoxelShape;
static IN_WALL_X_AXIS_SHAPE: VoxelShape;
static Z_AXIS_COLLISION_SHAPE: VoxelShape;
static X_AXIS_COLLISION_SHAPE: VoxelShape;
static Z_AXIS_SIDES_SHAPE: VoxelShape;
static X_AXIS_SIDES_SHAPE: VoxelShape;
static Z_AXIS_CULL_SHAPE: VoxelShape;
static X_AXIS_CULL_SHAPE: VoxelShape;
static IN_WALL_Z_AXIS_CULL_SHAPE: VoxelShape;
static IN_WALL_X_AXIS_CULL_SHAPE: VoxelShape;
}

//net.minecraft.block.WallMountedBlock
class WallMountedBlock extends HorizontalFacingBlock{
 getStateForNeighborUpdate(state: BlockState,direction: Direction,neighborState: BlockState,world: WorldAccess,pos: BlockPos,neighborPos: BlockPos): BlockState;
 canPlaceAt(state: BlockState,world: WorldView,pos: BlockPos): boolean;
 getPlacementState(ctx: ItemPlacementContext): BlockState;
}
class Static_WallMountedBlock {
static canPlaceAt(world: WorldView,pos: BlockPos,direction: Direction): boolean;
static getDirection(state: BlockState): Direction;
static FACE: EnumProperty;
}

//net.minecraft.block.AbstractRedstoneGateBlock
class AbstractRedstoneGateBlock extends HorizontalFacingBlock{
 isLocked(world: WorldView,pos: BlockPos,state: BlockState): boolean;
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 canPlaceAt(state: BlockState,world: WorldView,pos: BlockPos): boolean;
 getStrongRedstonePower(state: BlockState,world: BlockView,pos: BlockPos,direction: Direction): number;
 emitsRedstonePower(state: BlockState): boolean;
 onBlockAdded(state: BlockState,world: World,pos: BlockPos,oldState: BlockState,notify: boolean): void;
 onStateReplaced(state: BlockState,world: World,pos: BlockPos,newState: BlockState,moved: boolean): void;
 scheduledTick(state: BlockState,world: ServerWorld,pos: BlockPos,random: Random): void;
 neighborUpdate(state: BlockState,world: World,pos: BlockPos,sourceBlock: Block,sourcePos: BlockPos,notify: boolean): void;
 getWeakRedstonePower(state: BlockState,world: BlockView,pos: BlockPos,direction: Direction): number;
 getPlacementState(ctx: ItemPlacementContext): BlockState;
 onPlaced(world: World,pos: BlockPos,state: BlockState,placer: LivingEntity,itemStack: ItemStack): void;
 isTargetNotAligned(world: BlockView,pos: BlockPos,state: BlockState): boolean;
}
class Static_AbstractRedstoneGateBlock {
static isRedstoneGate(state: BlockState): boolean;
static SHAPE: VoxelShape;
static POWERED: BooleanProperty;
}

//net.minecraft.block.GlazedTerracottaBlock
class GlazedTerracottaBlock extends HorizontalFacingBlock{
 getPlacementState(ctx: ItemPlacementContext): BlockState;
}

//net.minecraft.block.CarvedPumpkinBlock
class CarvedPumpkinBlock extends HorizontalFacingBlock{
 onBlockAdded(state: BlockState,world: World,pos: BlockPos,oldState: BlockState,notify: boolean): void;
 getPlacementState(ctx: ItemPlacementContext): BlockState;
 canDispense(world: WorldView,pos: BlockPos): boolean;
}
class Static_CarvedPumpkinBlock {
static spawnEntity(world: World,patternResult: BlockPattern_Result,entity: Entity,pos: BlockPos): void;
static breakPatternBlocks(world: World,patternResult: BlockPattern_Result): void;
static method_51168(pos: CachedBlockPosition): boolean;
static method_51167(pos: CachedBlockPosition): boolean;
static method_9728(state: BlockState): boolean;
static updatePatternBlocks(world: World,patternResult: BlockPattern_Result): void;
static FACING: DirectionProperty;
static IS_GOLEM_HEAD_PREDICATE: Predicate;
}

//net.minecraft.block.DeadBushBlock
class DeadBushBlock extends PlantBlock{
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
}
class Static_DeadBushBlock {
static field_31080: number;
static SHAPE: VoxelShape;
}

//net.minecraft.block.RootsBlock
class RootsBlock extends PlantBlock{
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
}
class Static_RootsBlock {
static field_31235: number;
static SHAPE: VoxelShape;
}

//net.minecraft.block.AttachedStemBlock
class AttachedStemBlock extends PlantBlock{
 rotate(state: BlockState,rotation: BlockRotation): BlockState;
 getStateForNeighborUpdate(state: BlockState,direction: Direction,neighborState: BlockState,world: WorldAccess,pos: BlockPos,neighborPos: BlockPos): BlockState;
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 mirror(state: BlockState,mirror: BlockMirror): BlockState;
 getPickStack(world: BlockView,pos: BlockPos,state: BlockState): ItemStack;
}
class Static_AttachedStemBlock {
static FACING: DirectionProperty;
static field_30995: number;
static FACING_TO_SHAPE: Map;
}

//net.minecraft.block.TallPlantBlock
class TallPlantBlock extends PlantBlock{
 getStateForNeighborUpdate(state: BlockState,direction: Direction,neighborState: BlockState,world: WorldAccess,pos: BlockPos,neighborPos: BlockPos): BlockState;
 canPlaceAt(state: BlockState,world: WorldView,pos: BlockPos): boolean;
 getRenderingSeed(state: BlockState,pos: BlockPos): long;
 onBreak(world: World,pos: BlockPos,state: BlockState,player: PlayerEntity): void;
 getPlacementState(ctx: ItemPlacementContext): BlockState;
 onPlaced(world: World,pos: BlockPos,state: BlockState,placer: LivingEntity,itemStack: ItemStack): void;
 afterBreak(world: World,player: PlayerEntity,pos: BlockPos,state: BlockState,blockEntity: BlockEntity,tool: ItemStack): void;
}
class Static_TallPlantBlock {
static placeAt(world: WorldAccess,state: BlockState,pos: BlockPos,flags: number): void;
static onBreakInCreative(world: World,pos: BlockPos,state: BlockState,player: PlayerEntity): void;
static withWaterloggedState(world: WorldView,pos: BlockPos,state: BlockState): BlockState;
static HALF: EnumProperty;
}

//net.minecraft.block.SproutsBlock
class SproutsBlock extends PlantBlock{
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
}
class Static_SproutsBlock {
static SHAPE: VoxelShape;
}

//net.minecraft.block.NetherWartBlock
class NetherWartBlock extends PlantBlock{
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 hasRandomTicks(state: BlockState): boolean;
 randomTick(state: BlockState,world: ServerWorld,pos: BlockPos,random: Random): void;
 getPickStack(world: BlockView,pos: BlockPos,state: BlockState): ItemStack;
}
class Static_NetherWartBlock {
static field_31199: number;
static AGE: IntProperty;
static AGE_TO_SHAPE: VoxelShape[];
}

//net.minecraft.block.LilyPadBlock
class LilyPadBlock extends PlantBlock{
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 onEntityCollision(state: BlockState,world: World,pos: BlockPos,entity: Entity): void;
}
class Static_LilyPadBlock {
static SHAPE: VoxelShape;
}

//net.minecraft.block.PumpkinBlock
class PumpkinBlock extends GourdBlock{
 onUse(state: BlockState,world: World,pos: BlockPos,player: PlayerEntity,hand: Hand,hit: BlockHitResult): ActionResult;
 getStem(): StemBlock;
 getAttachedStem(): AttachedStemBlock;
}
class Static_PumpkinBlock {
static method_20291(hand: Hand,playerx: PlayerEntity): void;
}

//net.minecraft.block.MelonBlock
class MelonBlock extends GourdBlock{
 getStem(): StemBlock;
 getAttachedStem(): AttachedStemBlock;
}

//net.minecraft.block.SoulFireBlock
class SoulFireBlock extends AbstractFireBlock{
 getStateForNeighborUpdate(state: BlockState,direction: Direction,neighborState: BlockState,world: WorldAccess,pos: BlockPos,neighborPos: BlockPos): BlockState;
 canPlaceAt(state: BlockState,world: WorldView,pos: BlockPos): boolean;
}
class Static_SoulFireBlock {
static isSoulBase(state: BlockState): boolean;
}

//net.minecraft.block.FireBlock
class FireBlock extends AbstractFireBlock{
 getStateForNeighborUpdate(state: BlockState,direction: Direction,neighborState: BlockState,world: WorldAccess,pos: BlockPos,neighborPos: BlockPos): BlockState;
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 canPlaceAt(state: BlockState,world: WorldView,pos: BlockPos): boolean;
 onBlockAdded(state: BlockState,world: World,pos: BlockPos,oldState: BlockState,notify: boolean): void;
 scheduledTick(state: BlockState,world: ServerWorld,pos: BlockPos,random: Random): void;
 getPlacementState(ctx: ItemPlacementContext): BlockState;
}
class Static_FireBlock {
static getShapeForState(state: BlockState): VoxelShape;
static registerDefaultFlammables(): void;
static getFireTickDelay(random: Random): number;
static method_31017(state: BlockState): boolean;
static method_10197(entry: Map_Entry): boolean;
static field_31093: number;
static AGE: IntProperty;
static NORTH: BooleanProperty;
static EAST: BooleanProperty;
static SOUTH: BooleanProperty;
static WEST: BooleanProperty;
static UP: BooleanProperty;
static DIRECTION_PROPERTIES: Map;
static UP_SHAPE: VoxelShape;
static WEST_SHAPE: VoxelShape;
static EAST_SHAPE: VoxelShape;
static NORTH_SHAPE: VoxelShape;
static SOUTH_SHAPE: VoxelShape;
static field_31085: number;
static field_31086: number;
static field_31087: number;
static field_31088: number;
static field_31089: number;
static field_31090: number;
static field_31091: number;
static field_31092: number;
}

//net.minecraft.block.BuddingAmethystBlock
class BuddingAmethystBlock extends AmethystBlock{
 randomTick(state: BlockState,world: ServerWorld,pos: BlockPos,random: Random): void;
}
class Static_BuddingAmethystBlock {
static canGrowIn(state: BlockState): boolean;
static GROW_CHANCE: number;
static DIRECTIONS: Direction[];
}

//net.minecraft.block.CandleCakeBlock
class CandleCakeBlock extends AbstractCandleBlock{
 getStateForNeighborUpdate(state: BlockState,direction: Direction,neighborState: BlockState,world: WorldAccess,pos: BlockPos,neighborPos: BlockPos): BlockState;
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 canPlaceAt(state: BlockState,world: WorldView,pos: BlockPos): boolean;
 hasComparatorOutput(state: BlockState): boolean;
 getComparatorOutput(state: BlockState,world: World,pos: BlockPos): number;
 canPathfindThrough(state: BlockState,world: BlockView,pos: BlockPos,type: NavigationType): boolean;
 onUse(state: BlockState,world: World,pos: BlockPos,player: PlayerEntity,hand: Hand,hit: BlockHitResult): ActionResult;
 getPickStack(world: BlockView,pos: BlockPos,state: BlockState): ItemStack;
}
class Static_CandleCakeBlock {
static canBeLit(state: BlockState): boolean;
static isHittingCandle(hitResult: BlockHitResult): boolean;
static method_31633(blockState: BlockState,statex: AbstractBlock_AbstractBlockState): boolean;
static getCandleCakeFromCandle(candle: Block): BlockState;
static LIT: BooleanProperty;
static field_31052: number;
static CAKE_SHAPE: VoxelShape;
static CANDLE_SHAPE: VoxelShape;
static SHAPE: VoxelShape;
static CANDLES_TO_CANDLE_CAKES: Map;
static PARTICLE_OFFSETS: Iterable;
}

//net.minecraft.block.IceBlock
class IceBlock extends TransparentBlock{
 randomTick(state: BlockState,world: ServerWorld,pos: BlockPos,random: Random): void;
 afterBreak(world: World,player: PlayerEntity,pos: BlockPos,state: BlockState,blockEntity: BlockEntity,tool: ItemStack): void;
}
class Static_IceBlock {
static getMeltedState(): BlockState;
}

//net.minecraft.block.AbstractGlassBlock
class AbstractGlassBlock extends TransparentBlock{
 isTransparent(state: BlockState,world: BlockView,pos: BlockPos): boolean;
 getAmbientOcclusionLightLevel(state: BlockState,world: BlockView,pos: BlockPos): number;
 getCameraCollisionShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
}

//net.minecraft.block.HoneyBlock
class HoneyBlock extends TransparentBlock{
 onEntityCollision(state: BlockState,world: World,pos: BlockPos,entity: Entity): void;
 getCollisionShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 onLandedUpon(world: World,state: BlockState,pos: BlockPos,entity: Entity,fallDistance: number): void;
}
class Static_HoneyBlock {
static addParticles(entity: Entity,count: number): void;
static addRichParticles(entity: Entity): void;
static addRegularParticles(entity: Entity): void;
static hasHoneyBlockEffects(entity: Entity): boolean;
static field_31101: number;
static field_31102: number;
static field_31103: number;
static TICKS_PER_SECOND: number;
static SHAPE: VoxelShape;
}

//net.minecraft.block.SlimeBlock
class SlimeBlock extends TransparentBlock{
 onEntityLand(world: BlockView,entity: Entity): void;
 onSteppedOn(world: World,pos: BlockPos,state: BlockState,entity: Entity): void;
 onLandedUpon(world: World,state: BlockState,pos: BlockPos,entity: Entity,fallDistance: number): void;
}

//net.minecraft.block.DyedCarpetBlock
class DyedCarpetBlock extends CarpetBlock{
 getDyeColor(): DyeColor;
}

//net.minecraft.block.RotatedInfestedBlock
class RotatedInfestedBlock extends InfestedBlock{
 rotate(state: BlockState,rotation: BlockRotation): BlockState;
 getPlacementState(ctx: ItemPlacementContext): BlockState;
}

//net.minecraft.block.PistonBlock
class PistonBlock extends FacingBlock{
 rotate(state: BlockState,rotation: BlockRotation): BlockState;
 hasSidedTransparency(state: BlockState): boolean;
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 onSyncedBlockEvent(state: BlockState,world: World,pos: BlockPos,type: number,data: number): boolean;
 canPathfindThrough(state: BlockState,world: BlockView,pos: BlockPos,type: NavigationType): boolean;
 onBlockAdded(state: BlockState,world: World,pos: BlockPos,oldState: BlockState,notify: boolean): void;
 mirror(state: BlockState,mirror: BlockMirror): BlockState;
 neighborUpdate(state: BlockState,world: World,pos: BlockPos,sourceBlock: Block,sourcePos: BlockPos,notify: boolean): void;
 getPlacementState(ctx: ItemPlacementContext): BlockState;
 onPlaced(world: World,pos: BlockPos,state: BlockState,placer: LivingEntity,itemStack: ItemStack): void;
}
class Static_PistonBlock {
static isMovable(state: BlockState,world: World,pos: BlockPos,direction: Direction,canBreak: boolean,pistonDir: Direction): boolean;
static EXTENDED: BooleanProperty;
static field_31373: number;
static field_31374: number;
static field_31375: number;
static field_31376: number;
static EXTENDED_EAST_SHAPE: VoxelShape;
static EXTENDED_WEST_SHAPE: VoxelShape;
static EXTENDED_SOUTH_SHAPE: VoxelShape;
static EXTENDED_NORTH_SHAPE: VoxelShape;
static EXTENDED_UP_SHAPE: VoxelShape;
static EXTENDED_DOWN_SHAPE: VoxelShape;
}

//net.minecraft.block.PistonHeadBlock
class PistonHeadBlock extends FacingBlock{
 rotate(state: BlockState,rotation: BlockRotation): BlockState;
 hasSidedTransparency(state: BlockState): boolean;
 getStateForNeighborUpdate(state: BlockState,direction: Direction,neighborState: BlockState,world: WorldAccess,pos: BlockPos,neighborPos: BlockPos): BlockState;
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 canPlaceAt(state: BlockState,world: WorldView,pos: BlockPos): boolean;
 canPathfindThrough(state: BlockState,world: BlockView,pos: BlockPos,type: NavigationType): boolean;
 onStateReplaced(state: BlockState,world: World,pos: BlockPos,newState: BlockState,moved: boolean): void;
 mirror(state: BlockState,mirror: BlockMirror): BlockState;
 neighborUpdate(state: BlockState,world: World,pos: BlockPos,sourceBlock: Block,sourcePos: BlockPos,notify: boolean): void;
 onBreak(world: World,pos: BlockPos,state: BlockState,player: PlayerEntity): void;
 getPickStack(world: BlockView,pos: BlockPos,state: BlockState): ItemStack;
}
class Static_PistonHeadBlock {
static getHeadShapes(shortHead: boolean): VoxelShape[];
static method_31021(i: number): VoxelShape[];
static method_31020(bl: boolean,direction: Direction): VoxelShape;
static getHeadShape(direction: Direction,shortHead: boolean): VoxelShape;
static TYPE: EnumProperty;
static SHORT: BooleanProperty;
static field_31377: number;
static EAST_HEAD_SHAPE: VoxelShape;
static WEST_HEAD_SHAPE: VoxelShape;
static SOUTH_HEAD_SHAPE: VoxelShape;
static NORTH_HEAD_SHAPE: VoxelShape;
static UP_HEAD_SHAPE: VoxelShape;
static DOWN_HEAD_SHAPE: VoxelShape;
static field_31378: number;
static field_31379: number;
static field_31380: number;
static UP_ARM_SHAPE: VoxelShape;
static DOWN_ARM_SHAPE: VoxelShape;
static SOUTH_ARM_SHAPE: VoxelShape;
static NORTH_ARM_SHAPE: VoxelShape;
static EAST_ARM_SHAPE: VoxelShape;
static WEST_ARM_SHAPE: VoxelShape;
static SHORT_UP_ARM_SHAPE: VoxelShape;
static SHORT_DOWN_ARM_SHAPE: VoxelShape;
static SHORT_SOUTH_ARM_SHAPE: VoxelShape;
static SHORT_NORTH_ARM_SHAPE: VoxelShape;
static SHORT_EAST_ARM_SHAPE: VoxelShape;
static SHORT_WEST_ARM_SHAPE: VoxelShape;
static SHORT_HEAD_SHAPES: VoxelShape[];
static HEAD_SHAPES: VoxelShape[];
}

//net.minecraft.block.ObserverBlock
class ObserverBlock extends FacingBlock{
 rotate(state: BlockState,rotation: BlockRotation): BlockState;
 getStateForNeighborUpdate(state: BlockState,direction: Direction,neighborState: BlockState,world: WorldAccess,pos: BlockPos,neighborPos: BlockPos): BlockState;
 getStrongRedstonePower(state: BlockState,world: BlockView,pos: BlockPos,direction: Direction): number;
 emitsRedstonePower(state: BlockState): boolean;
 onBlockAdded(state: BlockState,world: World,pos: BlockPos,oldState: BlockState,notify: boolean): void;
 onStateReplaced(state: BlockState,world: World,pos: BlockPos,newState: BlockState,moved: boolean): void;
 scheduledTick(state: BlockState,world: ServerWorld,pos: BlockPos,random: Random): void;
 mirror(state: BlockState,mirror: BlockMirror): BlockState;
 getWeakRedstonePower(state: BlockState,world: BlockView,pos: BlockPos,direction: Direction): number;
 getPlacementState(ctx: ItemPlacementContext): BlockState;
}
class Static_ObserverBlock {
static POWERED: BooleanProperty;
}

//net.minecraft.block.RodBlock
class RodBlock extends FacingBlock{
 rotate(state: BlockState,rotation: BlockRotation): BlockState;
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 canPathfindThrough(state: BlockState,world: BlockView,pos: BlockPos,type: NavigationType): boolean;
 mirror(state: BlockState,mirror: BlockMirror): BlockState;
}
class Static_RodBlock {
static field_31233: number;
static field_31234: number;
static Y_SHAPE: VoxelShape;
static Z_SHAPE: VoxelShape;
static X_SHAPE: VoxelShape;
}

//net.minecraft.block.LavaCauldronBlock
class LavaCauldronBlock extends AbstractCauldronBlock{
 isFull(state: BlockState): boolean;
 getComparatorOutput(state: BlockState,world: World,pos: BlockPos): number;
 onEntityCollision(state: BlockState,world: World,pos: BlockPos,entity: Entity): void;
}

//net.minecraft.block.LeveledCauldronBlock
class LeveledCauldronBlock extends AbstractCauldronBlock{
 isFull(state: BlockState): boolean;
 getComparatorOutput(state: BlockState,world: World,pos: BlockPos): number;
 onEntityCollision(state: BlockState,world: World,pos: BlockPos,entity: Entity): void;
 precipitationTick(state: BlockState,world: World,pos: BlockPos,precipitation: Biome_Precipitation): void;
}
class Static_LeveledCauldronBlock {
static decrementFluidLevel(state: BlockState,world: World,pos: BlockPos): void;
static method_32352(precipitation: Biome_Precipitation): boolean;
static method_32353(precipitation: Biome_Precipitation): boolean;
static MIN_LEVEL: number;
static MAX_LEVEL: number;
static LEVEL: IntProperty;
static BASE_FLUID_HEIGHT: number;
static FLUID_HEIGHT_PER_LEVEL: number;
static RAIN_PREDICATE: Predicate;
static SNOW_PREDICATE: Predicate;
}

//net.minecraft.block.CauldronBlock
class CauldronBlock extends AbstractCauldronBlock{
 isFull(state: BlockState): boolean;
 precipitationTick(state: BlockState,world: World,pos: BlockPos,precipitation: Biome_Precipitation): void;
}
class Static_CauldronBlock {
static canFillWithPrecipitation(world: World,precipitation: Biome_Precipitation): boolean;
static FILL_WITH_RAIN_CHANCE: number;
static FILL_WITH_SNOW_CHANCE: number;
}

//net.minecraft.server.world.ChunkTicketManager$NearbyChunkTicketUpdater
class ChunkTicketManager_NearbyChunkTicketUpdater extends ChunkTicketManager_DistanceFromNearestPlayerTracker{
 updateLevels(): void;
 setWatchDistance(watchDistance: number): void;
}
class Static_ChunkTicketManager_NearbyChunkTicketUpdater {
static method_17666(i: number): number;
static method_21693(): void;
}

//net.minecraft.block.entity.DispenserBlockEntity
class DispenserBlockEntity extends LootableContainerBlockEntity{
 size(): number;
 readNbt(nbt: NbtCompound): void;
 addToFirstFreeSlot(stack: ItemStack): number;
 chooseNonEmptySlot(random: Random): number;
}
class Static_DispenserBlockEntity {
static INVENTORY_SIZE: number;
}

//net.minecraft.block.entity.BarrelBlockEntity
class BarrelBlockEntity extends LootableContainerBlockEntity{
 size(): number;
 onClose(player: PlayerEntity): void;
 tick(): void;
 readNbt(nbt: NbtCompound): void;
 onOpen(player: PlayerEntity): void;
}

//net.minecraft.entity.projectile.SpectralArrowEntity
class SpectralArrowEntity extends PersistentProjectileEntity{
 tick(): void;
 writeCustomDataToNbt(nbt: NbtCompound): void;
 readCustomDataFromNbt(nbt: NbtCompound): void;
}

//net.minecraft.entity.projectile.TridentEntity
class TridentEntity extends PersistentProjectileEntity{
 tick(): void;
 age(): void;
 shouldRender(cameraX: number,cameraY: number,cameraZ: number): boolean;
 onPlayerCollision(player: PlayerEntity): void;
 hasChanneling(): boolean;
 writeCustomDataToNbt(nbt: NbtCompound): void;
 readCustomDataFromNbt(nbt: NbtCompound): void;
 isEnchanted(): boolean;
 returnTimer: number;
}
class Static_TridentEntity {
static LOYALTY: TrackedData;
static ENCHANTED: TrackedData;
}

//net.minecraft.entity.projectile.ArrowEntity
class ArrowEntity extends PersistentProjectileEntity{
 tick(): void;
 initFromStack(stack: ItemStack): void;
 handleStatus(status: byte): void;
 getColor(): number;
 writeCustomDataToNbt(nbt: NbtCompound): void;
 readCustomDataFromNbt(nbt: NbtCompound): void;
 addEffect(effect: StatusEffectInstance): void;
}
class Static_ArrowEntity {
static method_48574(i: number): number;
static getCustomPotionColor(stack: ItemStack): number;
static MAX_POTION_DURATION_TICKS: number;
static NO_POTION_COLOR: number;
static COLOR: TrackedData;
static PARTICLE_EFFECT_STATUS: byte;
}

//net.minecraft.entity.projectile.WitherSkullEntity
class WitherSkullEntity extends ExplosiveProjectileEntity{
 isCharged(): boolean;
 damage(source: DamageSource,amount: number): boolean;
 canHit(): boolean;
 isOnFire(): boolean;
 setCharged(charged: boolean): void;
 getEffectiveExplosionResistance(explosion: Explosion,world: BlockView,pos: BlockPos,blockState: BlockState,fluidState: FluidState,max: number): number;
}
class Static_WitherSkullEntity {
static CHARGED: TrackedData;
}

//net.minecraft.entity.projectile.DragonFireballEntity
class DragonFireballEntity extends ExplosiveProjectileEntity{
 damage(source: DamageSource,amount: number): boolean;
 canHit(): boolean;
}
class Static_DragonFireballEntity {
static DAMAGE_RANGE: number;
}

//net.minecraft.entity.decoration.GlowItemFrameEntity
class GlowItemFrameEntity extends ItemFrameEntity{
 getRemoveItemSound(): SoundEvent;
 getRotateItemSound(): SoundEvent;
 getAddItemSound(): SoundEvent;
 getPlaceSound(): SoundEvent;
 getBreakSound(): SoundEvent;
}

//net.minecraft.structure.StrongholdGenerator$RightTurn
class StrongholdGenerator_RightTurn extends StrongholdGenerator_Turn{
 generate(world: StructureWorldAccess,structureAccessor: StructureAccessor,chunkGenerator: ChunkGenerator,random: Random,chunkBox: BlockBox,chunkPos: ChunkPos,pivot: BlockPos): void;
 fillOpenings(start: StructurePiece,holder: StructurePiecesHolder,random: Random): void;
}
class Static_StrongholdGenerator_RightTurn {
static create(holder: StructurePiecesHolder,random: Random,x: number,y: number,z: number,orientation: Direction,chainLength: number): StrongholdGenerator_RightTurn;
}

//net.minecraft.structure.StrongholdGenerator$LeftTurn
class StrongholdGenerator_LeftTurn extends StrongholdGenerator_Turn{
 generate(world: StructureWorldAccess,structureAccessor: StructureAccessor,chunkGenerator: ChunkGenerator,random: Random,chunkBox: BlockBox,chunkPos: ChunkPos,pivot: BlockPos): void;
 fillOpenings(start: StructurePiece,holder: StructurePiecesHolder,random: Random): void;
}
class Static_StrongholdGenerator_LeftTurn {
static create(holder: StructurePiecesHolder,random: Random,x: number,y: number,z: number,orientation: Direction,chainLength: number): StrongholdGenerator_LeftTurn;
}

//net.minecraft.structure.StrongholdGenerator$Start
class StrongholdGenerator_Start extends StrongholdGenerator_SpiralStaircase{
 getCenter(): BlockPos;
 lastPiece: StrongholdGenerator_PieceData;
 portalRoom: StrongholdGenerator_PortalRoom;
 pieces: List;
}

//net.minecraft.structure.NetherFortressGenerator$Start
class NetherFortressGenerator_Start extends NetherFortressGenerator_BridgeCrossing{
 lastPiece: NetherFortressGenerator_PieceData;
 bridgePieces: List;
 corridorPieces: List;
 pieces: List;
}

//net.minecraft.client.gui.screen.StatsScreen$EntityStatsListWidget
class StatsScreen_EntityStatsListWidget extends AlwaysSelectedEntryListWidget{
}

//net.minecraft.client.gui.screen.multiplayer.MultiplayerServerListWidget
class MultiplayerServerListWidget extends AlwaysSelectedEntryListWidget{
 getRowWidth(): number;
 setSelected(entry: EntryListWidget_Entry): void;
 setSelected(entry: MultiplayerServerListWidget_Entry): void;
 onRemoved(): void;
 keyPressed(keyCode: number,scanCode: number,modifiers: number): boolean;
 setServers(servers: ServerList): void;
 setLanServers(lanServers: List): void;
}
class Static_MultiplayerServerListWidget {
static method_22109(multiplayerServerListWidget: MultiplayerServerListWidget,entry: EntryListWidget_Entry): void;
static method_20124(multiplayerServerListWidget: MultiplayerServerListWidget,i: number): number;
static method_36889(multiplayerServerListWidget: MultiplayerServerListWidget,server: EntryListWidget_Entry): void;
static method_36888(multiplayerServerListWidget: MultiplayerServerListWidget,lanServer: EntryListWidget_Entry): void;
static method_48271(style: Style): Style;
static method_48272(style: Style): Style;
static LOGGER: Logger;
static SERVER_PINGER_THREAD_POOL: ThreadPoolExecutor;
static UNKNOWN_SERVER_TEXTURE: Identifier;
static SERVER_SELECTION_TEXTURE: Identifier;
static ICONS_TEXTURE: Identifier;
static LAN_SCANNING_TEXT: Text;
static CANNOT_RESOLVE_TEXT: Text;
static CANNOT_CONNECT_TEXT: Text;
static INCOMPATIBLE_TEXT: Text;
static NO_CONNECTION_TEXT: Text;
static PINGING_TEXT: Text;
static ONLINE_TEXT: Text;
}

//net.minecraft.client.gui.screen.PresetsScreen$SuperflatPresetsListWidget
class PresetsScreen_SuperflatPresetsListWidget extends AlwaysSelectedEntryListWidget{
 setSelected(entry: EntryListWidget_Entry): void;
 setSelected(superflatPresetEntry: PresetsScreen_SuperflatPresetsListWidget_SuperflatPresetEntry): void;
 keyPressed(keyCode: number,scanCode: number,modifiers: number): boolean;
}
class Static_PresetsScreen_SuperflatPresetsListWidget {
static method_47409(key: RegistryKey): string;
static method_47410(featureSet: FeatureSet,block: Block): boolean;
static method_47411(layer: FlatChunkGeneratorLayer): Block;
}

//net.minecraft.client.realms.RealmsObjectSelectionList
class RealmsObjectSelectionList extends AlwaysSelectedEntryListWidget{
 clear(): void;
 addEntry(entry: EntryListWidget_Entry): number;
 addEntry(entry: AlwaysSelectedEntryListWidget_Entry): number;
 getRowLeft(): number;
 getRowTop(index: number): number;
 getRowWidth(): number;
 setSelected(index: number): void;
 itemClicked(cursorY: number,selectionIndex: number,mouseX: number,mouseY: number,listWidth: number,i: number): void;
 setSelectedItem(index: number): void;
 getEntryCount(): number;
 getMaxPosition(): number;
 replaceEntries(newEntries: Collection): void;
 getScrollbarPositionX(): number;
}

//net.minecraft.client.gui.screen.option.LanguageOptionsScreen$LanguageSelectionListWidget
class LanguageOptionsScreen_LanguageSelectionListWidget extends AlwaysSelectedEntryListWidget{
 getRowWidth(): number;
}
class Static_LanguageOptionsScreen_LanguageSelectionListWidget {
static method_20101(languageSelectionListWidget: LanguageOptionsScreen_LanguageSelectionListWidget): number;
}

//net.minecraft.client.gui.screen.pack.PackListWidget
class PackListWidget extends AlwaysSelectedEntryListWidget{
 getRowWidth(): number;
 keyPressed(keyCode: number,scanCode: number,modifiers: number): boolean;
}
class Static_PackListWidget {
static method_20140(packListWidget: PackListWidget,i: number): number;
static RESOURCE_PACKS_TEXTURE: Identifier;
static INCOMPATIBLE: Text;
static INCOMPATIBLE_CONFIRM: Text;
}

//net.minecraft.client.gui.screen.CustomizeBuffetLevelScreen$BuffetBiomesListWidget
class CustomizeBuffetLevelScreen_BuffetBiomesListWidget extends AlwaysSelectedEntryListWidget{
 setSelected(entry: EntryListWidget_Entry): void;
 setSelected(buffetBiomeItem: CustomizeBuffetLevelScreen_BuffetBiomesListWidget_BuffetBiomeItem): void;
}
class Static_CustomizeBuffetLevelScreen_BuffetBiomesListWidget {
static method_40076(biome: CustomizeBuffetLevelScreen_BuffetBiomesListWidget_BuffetBiomeItem): string;
static method_40075(buffetBiomesListWidget: CustomizeBuffetLevelScreen_BuffetBiomesListWidget,entry: EntryListWidget_Entry): void;
}

//net.minecraft.client.gui.screen.StatsScreen$ItemStatsListWidget
class StatsScreen_ItemStatsListWidget extends AlwaysSelectedEntryListWidget{
 getRowWidth(): number;
}

//net.minecraft.client.gui.screen.pack.ExperimentalWarningScreen$DetailsScreen$PackListWidget
class ExperimentalWarningScreen_DetailsScreen_PackListWidget extends AlwaysSelectedEntryListWidget{
 getRowWidth(): number;
}

//net.minecraft.client.gui.screen.CustomizeFlatLevelScreen$SuperflatLayersListWidget
class CustomizeFlatLevelScreen_SuperflatLayersListWidget extends AlwaysSelectedEntryListWidget{
 setSelected(entry: EntryListWidget_Entry): void;
 setSelected(superflatLayerEntry: CustomizeFlatLevelScreen_SuperflatLayersListWidget_SuperflatLayerEntry): void;
 updateLayers(): void;
}
class Static_CustomizeFlatLevelScreen_SuperflatLayersListWidget {
static STATS_ICONS_TEXTURE: Identifier;
}

//net.minecraft.client.gui.screen.report.AbuseReportReasonScreen$ReasonListWidget
class AbuseReportReasonScreen_ReasonListWidget extends AlwaysSelectedEntryListWidget{
 getEntry(reason: AbuseReportReason): AbuseReportReasonScreen_ReasonListWidget_ReasonEntry;
 getRowWidth(): number;
 setSelected(entry: EntryListWidget_Entry): void;
 setSelected(reasonEntry: AbuseReportReasonScreen_ReasonListWidget_ReasonEntry): void;
}
class Static_AbuseReportReasonScreen_ReasonListWidget {
static method_44523(abuseReportReason: AbuseReportReason,entry: AbuseReportReasonScreen_ReasonListWidget_ReasonEntry): boolean;
}

//net.minecraft.client.gui.screen.StatsScreen$GeneralStatsListWidget
class StatsScreen_GeneralStatsListWidget extends AlwaysSelectedEntryListWidget{
}
class Static_StatsScreen_GeneralStatsListWidget {
static method_27028(stat: Stat): string;
}

//net.minecraft.client.realms.gui.screen.RealmsBackupInfoScreen$BackupInfoList
class RealmsBackupInfoScreen_BackupInfoList extends AlwaysSelectedEntryListWidget{
}

//net.minecraft.client.gui.screen.world.WorldListWidget
class WorldListWidget extends AlwaysSelectedEntryListWidget{
 getParent(): SelectWorldScreen;
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
 getRowWidth(): number;
 setSelected(entry: EntryListWidget_Entry): void;
 setSelected(entry: WorldListWidget_Entry): void;
 appendNarrations(builder: NarrationMessageBuilder): void;
 keyPressed(keyCode: number,scanCode: number,modifiers: number): boolean;
 setSearch(search: string): void;
 getSelectedAsOptional(): Optional;
}
class Static_WorldListWidget {
static method_43452(worldListWidget: WorldListWidget): MinecraftClient;
static LOGGER: Logger;
static DATE_FORMAT: DateFormat;
static UNKNOWN_SERVER_LOCATION: Identifier;
static WORLD_SELECTION_LOCATION: Identifier;
static FROM_NEWER_VERSION_FIRST_LINE: Text;
static FROM_NEWER_VERSION_SECOND_LINE: Text;
static SNAPSHOT_FIRST_LINE: Text;
static SNAPSHOT_SECOND_LINE: Text;
static LOCKED_TEXT: Text;
static CONVERSION_TOOLTIP: Text;
}

//net.minecraft.client.gui.screen.option.ControlsListWidget
class ControlsListWidget extends ElementListWidget{
 update(): void;
 getRowWidth(): number;
 updateChildren(): void;
}
class Static_ControlsListWidget {
static method_20110(controlsListWidget: ControlsListWidget): MinecraftClient;
static method_36885(controlsListWidget: ControlsListWidget): MinecraftClient;
static method_20111(controlsListWidget: ControlsListWidget): MinecraftClient;
static method_20113(controlsListWidget: ControlsListWidget): MinecraftClient;
static method_20116(controlsListWidget: ControlsListWidget): MinecraftClient;
static method_20114(controlsListWidget: ControlsListWidget): MinecraftClient;
static method_20112(controlsListWidget: ControlsListWidget): MinecraftClient;
static method_20115(controlsListWidget: ControlsListWidget): MinecraftClient;
}

//net.minecraft.client.gui.widget.OptionListWidget
class OptionListWidget extends ElementListWidget{
 addAll(options: SimpleOption[]): void;
 getRowWidth(): number;
 getHoveredWidget(mouseX: number,mouseY: number): Optional;
 getWidgetFor(option: SimpleOption): ClickableWidget;
 addOptionEntry(firstOption: SimpleOption,secondOption: SimpleOption): void;
 addSingleOptionEntry(option: SimpleOption): number;
}

//net.minecraft.client.gui.screen.world.EditGameRulesScreen$RuleListWidget
class EditGameRulesScreen_RuleListWidget extends ElementListWidget{
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
}

//net.minecraft.client.gui.screen.multiplayer.SocialInteractionsPlayerListWidget
class SocialInteractionsPlayerListWidget extends ElementListWidget{
 update(uuids: Collection,scrollAmount: number,includeOffline: boolean): void;
 isEmpty(): boolean;
 setPlayerOffline(uuid: UUID): void;
 setPlayerOnline(player: PlayerListEntry,tab: SocialInteractionsScreen_Tab): void;
 setCurrentSearch(currentSearch: string): void;
}
class Static_SocialInteractionsPlayerListWidget {
static method_44760(player: SocialInteractionsPlayerListEntry): Integer;
static collectReportableProfiles(log: ChatLog): Collection;
}

//net.minecraft.client.gui.screen.DeathScreen$TitleScreenConfirmScreen
class DeathScreen_TitleScreenConfirmScreen extends ConfirmScreen{
}

//net.minecraft.client.gui.screen.ConfirmLinkScreen
class ConfirmLinkScreen extends ConfirmScreen{
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
 copyToClipboard(): void;
}
class Static_ConfirmLinkScreen {
static open(url: string,parent: Screen,linkTrusted: boolean): void;
static method_49624(string: string,screen: Screen,bl: boolean,button: ButtonWidget): void;
static getConfirmText(linkTrusted: boolean): MutableText;
static getConfirmText(linkTrusted: boolean,link: string): MutableText;
static method_49622(string: string,minecraftClient: MinecraftClient,screen: Screen,confirmed: boolean): void;
static opening(url: string,parent: Screen,linkTrusted: boolean): ButtonWidget_PressAction;
static COPY: Text;
static WARNING: Text;
}

//net.minecraft.client.gui.screen.ingame.CommandBlockScreen
class CommandBlockScreen extends AbstractCommandBlockScreen{
 resize(client: MinecraftClient,width: number,height: number): void;
 updateCommandBlock(): void;
}
class Static_CommandBlockScreen {
static method_32643(value: CommandBlockBlockEntity_Type): Text;
}

//net.minecraft.client.gui.screen.ingame.MinecartCommandBlockScreen
class MinecartCommandBlockScreen extends AbstractCommandBlockScreen{
 getCommandExecutor(): CommandBlockExecutor;
}

//net.minecraft.client.gui.screen.SleepingChatScreen
class SleepingChatScreen extends ChatScreen{
 close(): void;
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
 charTyped(chr: char,modifiers: number): boolean;
 keyPressed(keyCode: number,scanCode: number,modifiers: number): boolean;
 closeChatIfEmpty(): void;
}

//net.minecraft.client.gui.screen.report.ChatReportScreen$DiscardWarningScreen
class ChatReportScreen_DiscardWarningScreen extends WarningScreen{
 close(): void;
 shouldCloseOnEsc(): boolean;
}
class Static_ChatReportScreen_DiscardWarningScreen {
static TITLE: Text;
static MESSAGE: Text;
static RETURN_BUTTON_TEXT: Text;
static DRAFT_BUTTON_TEXT: Text;
static DISCARD_BUTTON_TEXT: Text;
}

//net.minecraft.client.gui.screen.multiplayer.MultiplayerWarningScreen
class MultiplayerWarningScreen extends WarningScreen{
}
class Static_MultiplayerWarningScreen {
static HEADER: Text;
static MESSAGE: Text;
static CHECK_MESSAGE: Text;
static NARRATED_TEXT: Text;
}

//net.minecraft.client.gui.screen.Realms32BitWarningScreen
class Realms32BitWarningScreen extends WarningScreen{
}
class Static_Realms32BitWarningScreen {
static HEADER: Text;
static MESSAGE: Text;
static CHECK_MESSAGE: Text;
static NARRATED_TEXT: Text;
}

//net.minecraft.client.gui.screen.option.SimpleOptionsScreen
class SimpleOptionsScreen extends GameOptionsScreen{
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
 updateNarratorButtonText(): void;
}

//net.minecraft.client.gui.screen.option.LanguageOptionsScreen
class LanguageOptionsScreen extends GameOptionsScreen{
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
 keyPressed(keyCode: number,scanCode: number,modifiers: number): boolean;
}
class Static_LanguageOptionsScreen {
static LANGUAGE_WARNING_TEXT: Text;
}

//net.minecraft.client.gui.screen.option.SoundOptionsScreen
class SoundOptionsScreen extends GameOptionsScreen{
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
}
class Static_SoundOptionsScreen {
static getOptions(gameOptions: GameOptions): SimpleOption[];
static method_45627(i: number): SimpleOption[];
static method_45630(category: SoundCategory): boolean;
}

//net.minecraft.client.gui.screen.option.ControlsOptionsScreen
class ControlsOptionsScreen extends GameOptionsScreen{
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
}
class Static_ControlsOptionsScreen {
static MARGIN_Y: number;
}

//net.minecraft.client.gui.screen.option.SkinOptionsScreen
class SkinOptionsScreen extends GameOptionsScreen{
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
}

//net.minecraft.client.gui.screen.option.MouseOptionsScreen
class MouseOptionsScreen extends GameOptionsScreen{
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
}
class Static_MouseOptionsScreen {
static getOptions(gameOptions: GameOptions): SimpleOption[];
static method_21671(i: number): SimpleOption[];
}

//net.minecraft.client.gui.screen.option.KeybindsScreen
class KeybindsScreen extends GameOptionsScreen{
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
 keyPressed(keyCode: number,scanCode: number,modifiers: number): boolean;
 mouseClicked(mouseX: number,mouseY: number,button: number): boolean;
 selectedKeyBinding: KeyBinding;
 lastKeyCodeUpdateTime: long;
}

//net.minecraft.client.realms.gui.screen.RealmsBackupScreen
class RealmsBackupScreen extends RealmsScreen{
 init(): void;
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
 keyPressed(keyCode: number,scanCode: number,modifiers: number): boolean;
}
class Static_RealmsBackupScreen {
static method_25116(realmsBackupScreen: RealmsBackupScreen): TextRenderer;
static method_51237(realmsBackupScreen: RealmsBackupScreen): MinecraftClient;
static method_25115(realmsBackupScreen: RealmsBackupScreen): TextRenderer;
static method_25108(realmsBackupScreen: RealmsBackupScreen): MinecraftClient;
static LOGGER: Logger;
static PLUS_ICON: Identifier;
static RESTORE_ICON: Identifier;
static RESTORE_TEXT: Text;
static CHANGES_TOOLTIP: Text;
static BACKUPS_TEXT: Text;
static NO_BACKUPS_TEXT: Text;
static UPLOADED: string;
}

//net.minecraft.client.realms.gui.screen.RealmsCreateRealmScreen
class RealmsCreateRealmScreen extends RealmsScreen{
 init(): void;
 tick(): void;
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
 charTyped(chr: char,modifiers: number): boolean;
 keyPressed(keyCode: number,scanCode: number,modifiers: number): boolean;
}
class Static_RealmsCreateRealmScreen {
static WORLD_NAME_TEXT: Text;
static WORLD_DESCRIPTION_TEXT: Text;
}

//net.minecraft.client.realms.gui.screen.RealmsConfirmScreen
class RealmsConfirmScreen extends RealmsScreen{
 init(): void;
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
}

//net.minecraft.client.realms.gui.screen.RealmsClientOutdatedScreen
class RealmsClientOutdatedScreen extends RealmsScreen{
 init(): void;
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
 keyPressed(keyCode: number,scanCode: number,modifiers: number): boolean;
}
class Static_RealmsClientOutdatedScreen {
static INCOMPATIBLE_TITLE: Text;
static INCOMPATIBLE_LINES_UNSTABLE: Text[];
static INCOMPATIBLE_LINES: Text[];
}

//net.minecraft.client.realms.gui.screen.RealmsNotificationsScreen
class RealmsNotificationsScreen extends RealmsScreen{
 init(): void;
 tick(): void;
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
 onDisplayed(): void;
}
class Static_RealmsNotificationsScreen {
static method_49585(realmsPeriodicCheckers: RealmsPeriodicCheckers,news: RealmsNews): void;
static method_49587(trialAvailable: Boolean): void;
static method_49591(notifications: List): void;
static INVITE_ICON: Identifier;
static TRIAL_ICON: Identifier;
static NEWS_NOTIFICATION: Identifier;
static UNSEEN_NOTIFICATION: Identifier;
static checkedMcoAvailability: boolean;
static trialAvailable: boolean;
static validClient: boolean;
static hasUnreadNews: boolean;
static hasUnseenNotification: boolean;
}

//net.minecraft.client.realms.gui.screen.RealmsSubscriptionInfoScreen
class RealmsSubscriptionInfoScreen extends RealmsScreen{
 init(): void;
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
 keyPressed(keyCode: number,scanCode: number,modifiers: number): boolean;
 getNarratedTitle(): Text;
}
class Static_RealmsSubscriptionInfoScreen {
static method_25272(realmsSubscriptionInfoScreen: RealmsSubscriptionInfoScreen): MinecraftClient;
static localPresentation(time: long): Text;
static method_25267(realmsSubscriptionInfoScreen: RealmsSubscriptionInfoScreen): MinecraftClient;
static LOGGER: Logger;
static SUBSCRIPTION_TITLE: Text;
static SUBSCRIPTION_START_LABEL_TEXT: Text;
static TIME_LEFT_LABEL_TEXT: Text;
static DAYS_LEFT_LABEL_TEXT: Text;
static EXPIRED_TEXT: Text;
static EXPIRES_IN_LESS_THAN_A_DAY_TEXT: Text;
static UNKNOWN_TEXT: Text;
static RECURRING_INFO_TEXT: Text;
}

//net.minecraft.client.realms.gui.screen.RealmsPlayerScreen
class RealmsPlayerScreen extends RealmsScreen{
 init(): void;
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
 keyPressed(keyCode: number,scanCode: number,modifiers: number): boolean;
}
class Static_RealmsPlayerScreen {
static method_31124(realmsPlayerScreen: RealmsPlayerScreen): TextRenderer;
static method_25191(i: number): number;
static method_25189(i: number): number;
static method_25193(i: number): number;
static LOGGER: Logger;
static OP_ICON: Identifier;
static USER_ICON: Identifier;
static CROSS_PLAYER_ICON: Identifier;
static OPTIONS_BACKGROUND: Identifier;
static QUESTION_TEXT: Text;
static NORMAL_TOOLTIP: Text;
static OPERATOR_TOOLTIP: Text;
static REMOVE_TOOLTIP: Text;
static field_44530: number;
}

//net.minecraft.client.realms.gui.screen.RealmsTermsScreen
class RealmsTermsScreen extends RealmsScreen{
 init(): void;
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
 keyPressed(keyCode: number,scanCode: number,modifiers: number): boolean;
 mouseClicked(mouseX: number,mouseY: number,button: number): boolean;
 getNarratedTitle(): Text;
}
class Static_RealmsTermsScreen {
static LOGGER: Logger;
static TITLE: Text;
static SENTENCE_ONE_TEXT: Text;
static SENTENCE_TWO_TEXT: Text;
}

//net.minecraft.client.realms.gui.screen.RealmsBackupInfoScreen
class RealmsBackupInfoScreen extends RealmsScreen{
 init(): void;
 tick(): void;
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
 keyPressed(keyCode: number,scanCode: number,modifiers: number): boolean;
}
class Static_RealmsBackupInfoScreen {
static method_51885(realmsBackupInfoScreen: RealmsBackupInfoScreen): TextRenderer;
static method_29335(realmsBackupInfoScreen: RealmsBackupInfoScreen): TextRenderer;
static UNKNOWN: Text;
}

//net.minecraft.client.realms.gui.screen.RealmsConfigureWorldScreen
class RealmsConfigureWorldScreen extends RealmsScreen{
 init(): void;
 tick(): void;
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
 keyPressed(keyCode: number,scanCode: number,modifiers: number): boolean;
 saveSettings(name: string,desc: string): void;
 closeTheWorld(screen: Screen): void;
 saveSlotSettings(options: RealmsWorldOptions): void;
 openTheWorld(join: boolean,screen: Screen): void;
 stateChanged(): void;
 getNewScreen(): RealmsConfigureWorldScreen;
}
class Static_RealmsConfigureWorldScreen {
static LOGGER: Logger;
static ON_ICON: Identifier;
static OFF_ICON: Identifier;
static EXPIRED_ICON: Identifier;
static EXPIRES_SOON_ICON: Identifier;
static WORLDS_TITLE: Text;
static CONFIGURE_REALM_TITLE: Text;
static EXPIRED_TEXT: Text;
static EXPIRES_SOON_TEXT: Text;
static EXPIRES_IN_A_DAY_TEXT: Text;
static OPEN_TEXT: Text;
static CLOSED_TEXT: Text;
static field_32121: number;
static field_32122: number;
}

//net.minecraft.client.realms.gui.screen.RealmsResetNormalWorldScreen
class RealmsResetNormalWorldScreen extends RealmsScreen{
 init(): void;
 close(): void;
 tick(): void;
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
}
class Static_RealmsResetNormalWorldScreen {
static RESET_SEED_TEXT: Text;
}

//net.minecraft.client.realms.gui.screen.RealmsParentalConsentScreen
class RealmsParentalConsentScreen extends RealmsScreen{
 init(): void;
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
 getNarratedTitle(): Text;
}
class Static_RealmsParentalConsentScreen {
static method_25172(button: ButtonWidget): void;
static method_25173(button: ButtonWidget): void;
static PRIVACY_INFO_TEXT: Text;
}

//net.minecraft.client.realms.gui.screen.RealmsSelectWorldTemplateScreen
class RealmsSelectWorldTemplateScreen extends RealmsScreen{
 init(): void;
 close(): void;
 tick(): void;
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
 mouseClicked(mouseX: number,mouseY: number,button: number): boolean;
 getNarratedTitle(): Text;
 setWarning(warning: Text[]): void;
}
class Static_RealmsSelectWorldTemplateScreen {
static method_25228(i: number): number;
static method_25229(realmsSelectWorldTemplateScreen: RealmsSelectWorldTemplateScreen): MinecraftClient;
static method_25241(realmsSelectWorldTemplateScreen: RealmsSelectWorldTemplateScreen): TextRenderer;
static method_25242(realmsSelectWorldTemplateScreen: RealmsSelectWorldTemplateScreen): TextRenderer;
static method_25240(realmsSelectWorldTemplateScreen: RealmsSelectWorldTemplateScreen): TextRenderer;
static method_25243(realmsSelectWorldTemplateScreen: RealmsSelectWorldTemplateScreen): TextRenderer;
static method_25239(realmsSelectWorldTemplateScreen: RealmsSelectWorldTemplateScreen): TextRenderer;
static method_25238(realmsSelectWorldTemplateScreen: RealmsSelectWorldTemplateScreen): TextRenderer;
static LOGGER: Logger;
static LINK_ICONS: Identifier;
static TRAILER_ICONS: Identifier;
static SLOT_FRAME: Identifier;
static INFO_TOOLTIP: Text;
static TRAILER_TOOLTIP: Text;
}

//net.minecraft.client.realms.gui.screen.RealmsInviteScreen
class RealmsInviteScreen extends RealmsScreen{
 init(): void;
 tick(): void;
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
 keyPressed(keyCode: number,scanCode: number,modifiers: number): boolean;
}
class Static_RealmsInviteScreen {
static method_52216(l: long,string: string): RealmsServer;
static method_52220(style: Style): Style;
static method_52219(style: Style): Style;
static method_52218(style: Style): Style;
static LOGGER: Logger;
static INVITE_PROFILE_NAME_TEXT: Text;
static INVITING_TEXT: Text;
static PLAYER_ERROR_TEXT: Text;
}

//net.minecraft.client.realms.gui.screen.RealmsSettingsScreen
class RealmsSettingsScreen extends RealmsScreen{
 init(): void;
 save(): void;
 tick(): void;
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
 keyPressed(keyCode: number,scanCode: number,modifiers: number): boolean;
}
class Static_RealmsSettingsScreen {
static TEXT_FIELD_WIDTH: number;
static WORLD_NAME_TEXT: Text;
static WORLD_DESCRIPTION_TEXT: Text;
}

//net.minecraft.client.realms.gui.screen.RealmsGenericErrorScreen
class RealmsGenericErrorScreen extends RealmsScreen{
 init(): void;
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
 getNarratedTitle(): Text;
}
class Static_RealmsGenericErrorScreen {
static getErrorMessages(title: Text,description: Text): RealmsGenericErrorScreen_ErrorMessages;
static getErrorMessages(exception: RealmsServiceException): RealmsGenericErrorScreen_ErrorMessages;
static getErrorMessages(description: Text): RealmsGenericErrorScreen_ErrorMessages;
}

//net.minecraft.client.realms.gui.screen.RealmsUploadScreen
class RealmsUploadScreen extends RealmsScreen{
 init(): void;
 tick(): void;
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
 keyPressed(keyCode: number,scanCode: number,modifiers: number): boolean;
}
class Static_RealmsUploadScreen {
static LOGGER: Logger;
static UPLOAD_LOCK: ReentrantLock;
static field_41776: number;
static field_41773: number;
static field_41774: number;
static field_41775: number;
static DOTS: String[];
static VERIFYING_TEXT: Text;
}

//net.minecraft.client.realms.gui.screen.RealmsSlotOptionsScreen
class RealmsSlotOptionsScreen extends RealmsScreen{
 init(): void;
 tick(): void;
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
 keyPressed(keyCode: number,scanCode: number,modifiers: number): boolean;
 getNarratedTitle(): Text;
}
class Static_RealmsSlotOptionsScreen {
static get(list: List,index: number,fallbackIndex: number): Object;
static indexOf(list: List,value: Object,fallbackIndex: number): number;
static field_32125: number;
static DIFFICULTIES: List;
static field_32126: number;
static GAME_MODES: List;
static EDIT_SLOT_NAME: Text;
static SPAWN_PROTECTION: Text;
static SPAWN_TOGGLE_TITLE: Text;
}

//net.minecraft.client.realms.gui.screen.DisconnectedRealmsScreen
class DisconnectedRealmsScreen extends RealmsScreen{
 init(): void;
 close(): void;
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
 getNarratedTitle(): Text;
}

//net.minecraft.client.realms.gui.screen.RealmsSelectFileToUploadScreen
class RealmsSelectFileToUploadScreen extends RealmsScreen{
 init(): void;
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
 keyPressed(keyCode: number,scanCode: number,modifiers: number): boolean;
 getNarratedTitle(): Text;
}
class Static_RealmsSelectFileToUploadScreen {
static getLastPlayed(summary: LevelSummary): string;
static method_25220(a: LevelSummary): boolean;
static method_48181(style: Style): Style;
static method_25218(i: number): number;
static getGameModeName(summary: LevelSummary): Text;
static method_30872(realmsSelectFileToUploadScreen: RealmsSelectFileToUploadScreen): TextRenderer;
static method_30871(realmsSelectFileToUploadScreen: RealmsSelectFileToUploadScreen): TextRenderer;
static method_25226(realmsSelectFileToUploadScreen: RealmsSelectFileToUploadScreen): TextRenderer;
static LOGGER: Logger;
static LOADING_ERROR_TEXT: Text;
static WORLD_LANG: Text;
static HARDCORE_TEXT: Text;
static CHEATS_TEXT: Text;
static DATE_FORMAT: DateFormat;
}

//net.minecraft.client.realms.gui.screen.RealmsBrokenWorldScreen
class RealmsBrokenWorldScreen extends RealmsScreen{
 init(): void;
 tick(): void;
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
 play(): void;
 keyPressed(keyCode: number,scanCode: number,modifiers: number): boolean;
 getNarratedTitle(): Text;
}
class Static_RealmsBrokenWorldScreen {
static LOGGER: Logger;
static field_32120: number;
}

//net.minecraft.client.realms.gui.screen.RealmsPendingInvitesScreen
class RealmsPendingInvitesScreen extends RealmsScreen{
 init(): void;
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
 keyPressed(keyCode: number,scanCode: number,modifiers: number): boolean;
}
class Static_RealmsPendingInvitesScreen {
static method_25174(realmsPendingInvitesScreen: RealmsPendingInvitesScreen): MinecraftClient;
static method_25178(realmsPendingInvitesScreen: RealmsPendingInvitesScreen): MinecraftClient;
static method_25181(realmsPendingInvitesScreen: RealmsPendingInvitesScreen): MinecraftClient;
static method_34490(realmsPendingInvitesScreen: RealmsPendingInvitesScreen): TextRenderer;
static method_25184(realmsPendingInvitesScreen: RealmsPendingInvitesScreen): TextRenderer;
static method_34488(realmsPendingInvitesScreen: RealmsPendingInvitesScreen): TextRenderer;
static LOGGER: Logger;
static ACCEPT_ICON: Identifier;
static REJECT_ICON: Identifier;
static NO_PENDING_TEXT: Text;
static ACCEPT_TEXT: Text;
static REJECT_TEXT: Text;
}

//net.minecraft.client.realms.gui.screen.RealmsResetWorldScreen
class RealmsResetWorldScreen extends RealmsScreen{
 init(): void;
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
 switchSlot(callback: Runnable): void;
 keyPressed(keyCode: number,scanCode: number,modifiers: number): boolean;
 setResetTitle(resetTitle: Text): void;
 setSlot(slot: number): void;
 getNarratedTitle(): Text;
 slot: number;
}
class Static_RealmsResetWorldScreen {
static method_25205(realmsResetWorldScreen: RealmsResetWorldScreen): MinecraftClient;
static LOGGER: Logger;
static SLOT_FRAME_TEXTURE: Identifier;
static UPLOAD_TEXTURE: Identifier;
static ADVENTURE_TEXTURE: Identifier;
static SURVIVAL_SPAWN_TEXTURE: Identifier;
static NEW_WORLD_TEXTURE: Identifier;
static EXPERIENCE_TEXTURE: Identifier;
static INSPIRATION_TEXTURE: Identifier;
}

//net.minecraft.client.realms.gui.screen.RealmsDownloadLatestWorldScreen
class RealmsDownloadLatestWorldScreen extends RealmsScreen{
 init(): void;
 tick(): void;
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
 keyPressed(keyCode: number,scanCode: number,modifiers: number): boolean;
}
class Static_RealmsDownloadLatestWorldScreen {
static LOGGER: Logger;
static DOWNLOAD_LOCK: ReentrantLock;
static field_41772: number;
static field_41769: number;
static field_41770: number;
static field_41771: number;
static DOTS: String[];
}

//net.minecraft.client.realms.gui.screen.RealmsLongConfirmationScreen
class RealmsLongConfirmationScreen extends RealmsScreen{
 init(): void;
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
 keyPressed(keyCode: number,scanCode: number,modifiers: number): boolean;
 getNarratedTitle(): Text;
}
class Static_RealmsLongConfirmationScreen {
static WARNING_TEXT: Text;
static INFO_TEXT: Text;
}

//net.minecraft.client.realms.gui.screen.RealmsMainScreen
class RealmsMainScreen extends RealmsScreen{
 init(): void;
 tick(): void;
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
 addPurchaseButtons(): void;
 addLowerButtons(): void;
 setCreatedTrial(createdTrial: boolean): void;
 charTyped(chr: char,modifiers: number): boolean;
 play(serverData: RealmsServer,parent: Screen): void;
 keyPressed(keyCode: number,scanCode: number,modifiers: number): boolean;
 mouseClicked(mouseX: number,mouseY: number,button: number): boolean;
 shouldShowPopup(): boolean;
 newScreen(): RealmsMainScreen;
 removeSelection(): void;
 addInvitesAndNewsButtons(): void;
}
class Static_RealmsMainScreen {
static request(request: RealmsMainScreen_Request,resultConsumer: Consumer): void;
static method_20841(): void;
static hasParentalConsent(): boolean;
static method_49281(realmsMainScreen: RealmsMainScreen,child: Element): void;
static method_49554(throwable: Throwable): Void;
static method_49552(request: RealmsMainScreen_Request,minecraftClient: MinecraftClient): Object;
static method_48178(button: ButtonWidget): void;
static method_49555(list: List,client: RealmsClient): Object;
static method_31172(realmsServer: RealmsServer,child: RealmsMainScreen_Entry): boolean;
static method_49558(uUID: UUID,client: RealmsClient): Object;
static method_20885(realmsMainScreen: RealmsMainScreen): MinecraftClient;
static method_36829(realmsMainScreen: RealmsMainScreen): MinecraftClient;
static method_36830(realmsMainScreen: RealmsMainScreen): MinecraftClient;
static method_36826(realmsMainScreen: RealmsMainScreen): MinecraftClient;
static method_36828(realmsMainScreen: RealmsMainScreen): MinecraftClient;
static method_36827(realmsMainScreen: RealmsMainScreen): MinecraftClient;
static method_24992(realmsMainScreen: RealmsMainScreen): MinecraftClient;
static method_20843(c: char,keyCombo: KeyCombo): void;
static method_36825(realmsMainScreen: RealmsMainScreen): MinecraftClient;
static method_49559(uUID: UUID,notificationId: RealmsNotification): boolean;
static method_24994(realmsMainScreen: RealmsMainScreen): MinecraftClient;
static method_24996(realmsMainScreen: RealmsMainScreen): MinecraftClient;
static method_20876(realmsMainScreen: RealmsMainScreen): MinecraftClient;
static method_23766(filename: Identifier): boolean;
static method_23764(id: Identifier): boolean;
static method_51233(realmsMainScreen: RealmsMainScreen): MinecraftClient;
static method_25000(realmsMainScreen: RealmsMainScreen): MinecraftClient;
static method_24998(realmsMainScreen: RealmsMainScreen): MinecraftClient;
static method_44254(realmsMainScreen: RealmsMainScreen): TextRenderer;
static method_49562(realmsMainScreen: RealmsMainScreen): TextRenderer;
static method_36832(realmsMainScreen: RealmsMainScreen): TextRenderer;
static method_36841(realmsMainScreen: RealmsMainScreen): TextRenderer;
static method_36842(realmsMainScreen: RealmsMainScreen): TextRenderer;
static method_49563(realmsMainScreen: RealmsMainScreen): TextRenderer;
static method_36834(realmsMainScreen: RealmsMainScreen): MinecraftClient;
static method_36835(realmsMainScreen: RealmsMainScreen): MinecraftClient;
static method_47389(realmsMainScreen: RealmsMainScreen,text: Text): void;
static method_36837(realmsMainScreen: RealmsMainScreen): TextRenderer;
static method_36839(realmsMainScreen: RealmsMainScreen): TextRenderer;
static method_36833(realmsMainScreen: RealmsMainScreen): MinecraftClient;
static method_51234(realmsMainScreen: RealmsMainScreen): TextRenderer;
static method_49549(realmsMainScreen: RealmsMainScreen): TextRenderer;
static method_36840(realmsMainScreen: RealmsMainScreen): TextRenderer;
static method_36820(realmsMainScreen: RealmsMainScreen): TextRenderer;
static method_49548(realmsMainScreen: RealmsMainScreen): TextRenderer;
static method_51232(realmsMainScreen: RealmsMainScreen): TextRenderer;
static loadImages(manager: ResourceManager): void;
static LOGGER: Logger;
static ON_ICON: Identifier;
static OFF_ICON: Identifier;
static EXPIRED_ICON: Identifier;
static EXPIRES_SOON_ICON: Identifier;
static INVITATION_ICON: Identifier;
static INVITE_ICON: Identifier;
static WORLD_ICON: Identifier;
static REALMS: Identifier;
static NEWS_ICON: Identifier;
static POPUP: Identifier;
static DARKEN: Identifier;
static CROSS_ICON: Identifier;
static TRIAL_ICON: Identifier;
static INFO_ICON: Identifier;
static TRIAL_MESSAGE_LINES: List;
static UNINITIALIZED_TEXT: Text;
static EXPIRED_LIST_TEXT: Text;
static EXPIRED_RENEW_TEXT: Text;
static EXPIRED_TRIAL_TEXT: Text;
static MINIGAME_TEXT: Text;
static POPUP_TEXT: Text;
static PLAY_TEXT: Text;
static LEAVE_TEXT: Text;
static CONFIGURE_TEXT: Text;
static EXPIRED_TEXT: Text;
static EXPIRES_SOON_TEXT: Text;
static EXPIRES_IN_A_DAY_TEXT: Text;
static OPEN_TEXT: Text;
static CLOSED_TEXT: Text;
static NEWS_TEXT: Text;
static UNINITIALIZED_BUTTON_NARRATION: Text;
static TRIAL_NARRATION: Text;
static field_42862: number;
static field_42863: number;
static field_42864: number;
static field_42865: number;
static field_44509: number;
static field_44510: number;
static field_44511: number;
static field_44512: number;
static field_44513: number;
static field_44514: number;
static IMAGES: List;
static overrideConfigure: boolean;
static lastScrollYPosition: number;
static hasParentalConsent: boolean;
static checkedParentalConsent: boolean;
static checkedClientCompatibility: boolean;
static realmsGenericErrorScreen: Screen;
static regionsPinged: boolean;
}

//net.minecraft.client.gui.screen.ingame.SignEditScreen
class SignEditScreen extends AbstractSignEditScreen{
}
class Static_SignEditScreen {
static BACKGROUND_SCALE: number;
static TEXT_SCALE_MULTIPLIER: number;
static TEXT_SCALE: Vector3f;
}

//net.minecraft.client.gui.screen.ingame.HangingSignEditScreen
class HangingSignEditScreen extends AbstractSignEditScreen{
}
class Static_HangingSignEditScreen {
static BACKGROUND_SCALE: number;
static TEXT_SCALE: Vector3f;
static field_40433: number;
static field_40434: number;
}

//net.minecraft.entity.ai.goal.FlyGoal
class FlyGoal extends WanderAroundFarGoal{
}

//net.minecraft.entity.ai.goal.DisableableFollowTargetGoal
class DisableableFollowTargetGoal extends ActiveTargetGoal{
 canStart(): boolean;
 setEnabled(enabled: boolean): void;
}

//net.minecraft.entity.ai.goal.UntamedActiveTargetGoal
class UntamedActiveTargetGoal extends ActiveTargetGoal{
 shouldContinue(): boolean;
 canStart(): boolean;
}

//net.minecraft.entity.ai.goal.RaidGoal
class RaidGoal extends ActiveTargetGoal{
 start(): void;
 getCooldown(): number;
 canStart(): boolean;
 decreaseCooldown(): void;
}
class Static_RaidGoal {
static MAX_COOLDOWN: number;
}

//net.minecraft.client.gui.screen.ingame.BeaconScreen$LevelTwoEffectButtonWidget
class BeaconScreen_LevelTwoEffectButtonWidget extends BeaconScreen_EffectButtonWidget{
 tick(level: number): void;
}

//net.minecraft.client.gui.screen.ingame.BeaconScreen$CancelButtonWidget
class BeaconScreen_CancelButtonWidget extends BeaconScreen_IconButtonWidget{
 tick(level: number): void;
 onPress(): void;
}

//net.minecraft.client.gui.screen.ingame.BeaconScreen$DoneButtonWidget
class BeaconScreen_DoneButtonWidget extends BeaconScreen_IconButtonWidget{
 tick(level: number): void;
 onPress(): void;
}

//net.minecraft.client.realms.gui.RealmsWorldSlotButton
class RealmsWorldSlotButton extends ButtonWidget{
 getState(): RealmsWorldSlotButton_State;
 tick(): void;
 renderButton(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
}
class Static_RealmsWorldSlotButton {
static getAction(server: RealmsServer,active: boolean,minigame: boolean): RealmsWorldSlotButton_Action;
static SLOT_FRAME: Identifier;
static EMPTY_FRAME: Identifier;
static CHECKMARK: Identifier;
static PANORAMA_0: Identifier;
static PANORAMA_2: Identifier;
static PANORAMA_3: Identifier;
static ACTIVE_TOOLTIP: Text;
static MINIGAME_TOOLTIP: Text;
static TOOLTIP: Text;
static MINIGAME_SLOT_NAME: Text;
}

//net.minecraft.client.realms.gui.screen.RealmsResetWorldScreen$FrameButton
class RealmsResetWorldScreen_FrameButton extends ButtonWidget{
 renderButton(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
}

//net.minecraft.client.gui.widget.PageTurnWidget
class PageTurnWidget extends ButtonWidget{
 renderButton(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
 playDownSound(soundManager: SoundManager): void;
}

//net.minecraft.client.realms.gui.screen.RealmsMainScreen$CrossButton
class RealmsMainScreen_CrossButton extends ButtonWidget{
 renderButton(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
}

//net.minecraft.client.gui.widget.LockButtonWidget
class LockButtonWidget extends ButtonWidget{
 isLocked(): boolean;
 setLocked(locked: boolean): void;
 renderButton(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
}

//net.minecraft.client.gui.widget.PressableTextWidget
class PressableTextWidget extends ButtonWidget{
 renderButton(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
}

//net.minecraft.client.gui.screen.ingame.MerchantScreen$WidgetButtonPage
class MerchantScreen_WidgetButtonPage extends ButtonWidget{
 getIndex(): number;
 renderTooltip(context: DrawContext,x: number,y: number): void;
}

//net.minecraft.client.gui.widget.IconButtonWidget
class IconButtonWidget extends ButtonWidget{
 renderButton(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
 drawMessage(context: DrawContext,textRenderer: TextRenderer,color: number): void;
}
class Static_IconButtonWidget {
static builder(message: Text,texture: Identifier,pressAction: ButtonWidget_PressAction): IconButtonWidget_Builder;
}

//net.minecraft.client.gui.widget.TexturedButtonWidget
class TexturedButtonWidget extends ButtonWidget{
 renderButton(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
}

//net.minecraft.client.realms.gui.screen.RealmsMainScreen$NewsButton
class RealmsMainScreen_NewsButton extends ButtonWidget{
 renderButton(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
}
class Static_RealmsMainScreen_NewsButton {
static method_25022(realmsMainScreen: RealmsMainScreen,button: ButtonWidget): void;
static field_44515: number;
}

//net.minecraft.client.gui.widget.NarratedMultilineTextWidget
class NarratedMultilineTextWidget extends MultilineTextWidget{
 renderButton(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
 playDownSound(soundManager: SoundManager): void;
}
class Static_NarratedMultilineTextWidget {
static FOCUSED_BORDER_COLOR: number;
static UNFOCUSED_BORDER_COLOR: number;
static BACKGROUND_COLOR: number;
static EXPANSION: number;
static BORDER_WIDTH: number;
}

//net.minecraft.client.option.SimpleOption$OptionSliderWidgetImpl
class SimpleOption_OptionSliderWidgetImpl extends OptionSliderWidget{
}

//net.minecraft.item.BannerItem
class BannerItem extends VerticallyAttachableBlockItem{
 appendTooltip(stack: ItemStack,world: World,tooltip: List,context: TooltipContext): void;
 getColor(): DyeColor;
}
class Static_BannerItem {
static method_43708(key: RegistryKey): string;
static method_43707(list: List,dyeColor: DyeColor,translationKey: string): void;
static appendBannerTooltip(stack: ItemStack,tooltip: List): void;
static TRANSLATION_KEY_PREFIX: string;
}

//net.minecraft.item.SignItem
class SignItem extends VerticallyAttachableBlockItem{
}

//net.minecraft.item.SkullItem
class SkullItem extends VerticallyAttachableBlockItem{
 getName(stack: ItemStack): Text;
 postProcessNbt(nbt: NbtCompound): void;
}
class Static_SkullItem {
static method_37231(nbtCompound: NbtCompound,profile: GameProfile): void;
static SKULL_OWNER_KEY: string;
}

//net.minecraft.item.LingeringPotionItem
class LingeringPotionItem extends ThrowablePotionItem{
 use(world: World,user: PlayerEntity,hand: Hand): TypedActionResult;
 appendTooltip(stack: ItemStack,world: World,tooltip: List,context: TooltipContext): void;
}

//net.minecraft.item.SplashPotionItem
class SplashPotionItem extends ThrowablePotionItem{
 use(world: World,user: PlayerEntity,hand: Hand): TypedActionResult;
}

//net.minecraft.block.WallPlayerSkullBlock
class WallPlayerSkullBlock extends WallSkullBlock{
 getDroppedStacks(state: BlockState,builder: LootContextParameterSet_Builder): List;
 onPlaced(world: World,pos: BlockPos,state: BlockState,placer: LivingEntity,itemStack: ItemStack): void;
}

//net.minecraft.block.WallWitherSkullBlock
class WallWitherSkullBlock extends WallSkullBlock{
 onPlaced(world: World,pos: BlockPos,state: BlockState,placer: LivingEntity,itemStack: ItemStack): void;
}

//net.minecraft.block.WallPiglinHeadBlock
class WallPiglinHeadBlock extends WallSkullBlock{
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
}
class Static_WallPiglinHeadBlock {
static SHAPES: Map;
}

//net.minecraft.block.PlayerSkullBlock
class PlayerSkullBlock extends SkullBlock{
 onPlaced(world: World,pos: BlockPos,state: BlockState,placer: LivingEntity,itemStack: ItemStack): void;
}

//net.minecraft.block.WitherSkullBlock
class WitherSkullBlock extends SkullBlock{
 onPlaced(world: World,pos: BlockPos,state: BlockState,placer: LivingEntity,itemStack: ItemStack): void;
}
class Static_WitherSkullBlock {
static method_51174(pos: CachedBlockPosition): boolean;
static method_24799(pos: CachedBlockPosition): boolean;
static method_51175(pos: CachedBlockPosition): boolean;
static method_24798(pos: CachedBlockPosition): boolean;
static getWitherDispenserPattern(): BlockPattern;
static getWitherBossPattern(): BlockPattern;
static onPlaced(world: World,pos: BlockPos,blockEntity: SkullBlockEntity): void;
static canDispense(world: World,pos: BlockPos,stack: ItemStack): boolean;
static witherBossPattern: BlockPattern;
static witherDispenserPattern: BlockPattern;
}

//net.minecraft.client.render.entity.model.QuadrupedEntityModel
class QuadrupedEntityModel extends AnimalModel{
 setAngles(entity: Entity,limbAngle: number,limbDistance: number,animationProgress: number,headYaw: number,headPitch: number): void;
}
class Static_QuadrupedEntityModel {
static getModelData(stanceWidth: number,dilation: Dilation): ModelData;
}

//net.minecraft.client.render.entity.model.ElytraEntityModel
class ElytraEntityModel extends AnimalModel{
 setAngles(livingEntity: LivingEntity,f: number,g: number,h: number,i: number,j: number): void;
 setAngles(entity: Entity,limbAngle: number,limbDistance: number,animationProgress: number,headYaw: number,headPitch: number): void;
}
class Static_ElytraEntityModel {
static getTexturedModelData(): TexturedModelData;
}

//net.minecraft.client.render.entity.model.HorseEntityModel
class HorseEntityModel extends AnimalModel{
 animateModel(abstractHorseEntity: AbstractHorseEntity,f: number,g: number,h: number): void;
 animateModel(entity: Entity,limbAngle: number,limbDistance: number,tickDelta: number): void;
 setAngles(entity: Entity,limbAngle: number,limbDistance: number,animationProgress: number,headYaw: number,headPitch: number): void;
 setAngles(abstractHorseEntity: AbstractHorseEntity,f: number,g: number,h: number,i: number,j: number): void;
 getHeadParts(): Iterable;
}
class Static_HorseEntityModel {
static getModelData(dilation: Dilation): ModelData;
static EATING_GRASS_ANIMATION_HEAD_BASE_PITCH: number;
static ANGRY_ANIMATION_FRONT_LEG_PITCH_MULTIPLIER: number;
static ANGRY_ANIMATION_BODY_PITCH_MULTIPLIER: number;
static HEAD_TAIL_BASE_PITCH: number;
static ANGRY_ANIMATION_HIND_LEG_PITCH_MULTIPLIER: number;
static HEAD_PARTS: string;
static LEFT_HIND_BABY_LEG: string;
static RIGHT_HIND_BABY_LEG: string;
static LEFT_FRONT_BABY_LEG: string;
static RIGHT_FRONT_BABY_LEG: string;
static SADDLE: string;
static LEFT_SADDLE_MOUTH: string;
static LEFT_SADDLE_LINE: string;
static RIGHT_SADDLE_MOUTH: string;
static RIGHT_SADDLE_LINE: string;
static HEAD_SADDLE: string;
static MOUTH_SADDLE_WRAP: string;
}

//net.minecraft.client.render.entity.model.FoxEntityModel
class FoxEntityModel extends AnimalModel{
 animateModel(foxEntity: FoxEntity,f: number,g: number,h: number): void;
 animateModel(entity: Entity,limbAngle: number,limbDistance: number,tickDelta: number): void;
 setAngles(foxEntity: FoxEntity,f: number,g: number,h: number,i: number,j: number): void;
 setAngles(entity: Entity,limbAngle: number,limbDistance: number,animationProgress: number,headYaw: number,headPitch: number): void;
 head: ModelPart;
}
class Static_FoxEntityModel {
static getTexturedModelData(): TexturedModelData;
static field_32477: number;
static HEAD_Y_PIVOT: number;
static LEG_Y_PIVOT: number;
}

//net.minecraft.client.render.entity.model.BeeEntityModel
class BeeEntityModel extends AnimalModel{
 animateModel(beeEntity: BeeEntity,f: number,g: number,h: number): void;
 animateModel(entity: Entity,limbAngle: number,limbDistance: number,tickDelta: number): void;
 setAngles(entity: Entity,limbAngle: number,limbDistance: number,animationProgress: number,headYaw: number,headPitch: number): void;
 setAngles(beeEntity: BeeEntity,f: number,g: number,h: number,i: number,j: number): void;
}
class Static_BeeEntityModel {
static getTexturedModelData(): TexturedModelData;
static BONE_BASE_Y_PIVOT: number;
static BONE: string;
static STINGER: string;
static LEFT_ANTENNA: string;
static RIGHT_ANTENNA: string;
static FRONT_LEGS: string;
static MIDDLE_LEGS: string;
static BACK_LEGS: string;
}

//net.minecraft.client.render.entity.model.HoglinEntityModel
class HoglinEntityModel extends AnimalModel{
 setAngles(mobEntity: MobEntity,f: number,g: number,h: number,i: number,j: number): void;
 setAngles(entity: Entity,limbAngle: number,limbDistance: number,animationProgress: number,headYaw: number,headPitch: number): void;
}
class Static_HoglinEntityModel {
static getTexturedModelData(): TexturedModelData;
static HEAD_PITCH_START: number;
static HEAD_PITCH_END: number;
}

//net.minecraft.client.render.entity.model.TintableAnimalModel
class TintableAnimalModel extends AnimalModel{
 render(matrices: MatrixStack,vertices: VertexConsumer,light: number,overlay: number,red: number,green: number,blue: number,alpha: number): void;
 setColorMultiplier(red: number,green: number,blue: number): void;
}

//net.minecraft.client.render.entity.model.TadpoleEntityModel
class TadpoleEntityModel extends AnimalModel{
 setAngles(tadpoleEntity: TadpoleEntity,f: number,g: number,h: number,i: number,j: number): void;
 setAngles(entity: Entity,limbAngle: number,limbDistance: number,animationProgress: number,headYaw: number,headPitch: number): void;
}
class Static_TadpoleEntityModel {
static getTexturedModelData(): TexturedModelData;
}

//net.minecraft.client.render.entity.model.OcelotEntityModel
class OcelotEntityModel extends AnimalModel{
 animateModel(entity: Entity,limbAngle: number,limbDistance: number,tickDelta: number): void;
 setAngles(entity: Entity,limbAngle: number,limbDistance: number,animationProgress: number,headYaw: number,headPitch: number): void;
}
class Static_OcelotEntityModel {
static getModelData(dilation: Dilation): ModelData;
static SNEAKING_ANIMATION_STATE: number;
static STANDING_ANIMATION_STATE: number;
static SPRINTING_ANIMATION_STATE: number;
static SITTING_ANIMATION_STATE: number;
static field_32527: number;
static BODY_SIZE_Y: number;
static field_32529: number;
static HEAD_PIVOT_Y: number;
static HEAD_PIVOT_Z: number;
static BODY_PIVOT_Y: number;
static BODY_PIVOT_Z: number;
static UPPER_TAIL_PIVOT_Y: number;
static UPPER_TAIL_PIVOT_Z: number;
static LOWER_TAIL_PIVOT_Y: number;
static LOWER_TAIL_PIVOT_Z: number;
static HIND_LEG_PIVOT_Y: number;
static HIND_LEG_PIVOT_Z: number;
static FRONT_LEG_PIVOT_Y: number;
static FRONT_LEG_PIVOT_Z: number;
static TAIL1: string;
static TAIL2: string;
}

//net.minecraft.client.render.entity.model.AxolotlEntityModel
class AxolotlEntityModel extends AnimalModel{
 setAngles(axolotlEntity: AxolotlEntity,f: number,g: number,h: number,i: number,j: number): void;
 setAngles(entity: Entity,limbAngle: number,limbDistance: number,animationProgress: number,headYaw: number,headPitch: number): void;
}
class Static_AxolotlEntityModel {
static getTexturedModelData(): TexturedModelData;
static MOVING_IN_WATER_LEG_PITCH: number;
}

//net.minecraft.client.render.entity.model.ChickenEntityModel
class ChickenEntityModel extends AnimalModel{
 setAngles(entity: Entity,limbAngle: number,limbDistance: number,animationProgress: number,headYaw: number,headPitch: number): void;
}
class Static_ChickenEntityModel {
static getTexturedModelData(): TexturedModelData;
static RED_THING: string;
}

//net.minecraft.client.render.entity.model.GuardianEntityModel
class GuardianEntityModel extends SinglePartEntityModel{
 setAngles(guardianEntity: GuardianEntity,f: number,g: number,h: number,i: number,j: number): void;
 setAngles(entity: Entity,limbAngle: number,limbDistance: number,animationProgress: number,headYaw: number,headPitch: number): void;
 getPart(): ModelPart;
}
class Static_GuardianEntityModel {
static getSpikePivotX(index: number,animationProgress: number,extension: number): number;
static getSpikeName(index: number): string;
static getSpikePivotZ(index: number,animationProgress: number,extension: number): number;
static getSpikePivotY(index: number,animationProgress: number,extension: number): number;
static getAngle(index: number,animationProgress: number,magnitude: number): number;
static getTexturedModelData(): TexturedModelData;
static SPIKE_PITCHES: number[];
static SPIKE_YAWS: number[];
static SPIKE_ROLLS: number[];
static SPIKE_PIVOTS_X: number[];
static SPIKE_PIVOTS_Y: number[];
static SPIKE_PIVOTS_Z: number[];
static EYE: string;
static TAIL0: string;
static TAIL1: string;
static TAIL2: string;
}

//net.minecraft.client.render.entity.model.MediumPufferfishEntityModel
class MediumPufferfishEntityModel extends SinglePartEntityModel{
 setAngles(entity: Entity,limbAngle: number,limbDistance: number,animationProgress: number,headYaw: number,headPitch: number): void;
 getPart(): ModelPart;
}
class Static_MediumPufferfishEntityModel {
static getTexturedModelData(): TexturedModelData;
}

//net.minecraft.client.render.entity.model.GhastEntityModel
class GhastEntityModel extends SinglePartEntityModel{
 setAngles(entity: Entity,limbAngle: number,limbDistance: number,animationProgress: number,headYaw: number,headPitch: number): void;
 getPart(): ModelPart;
}
class Static_GhastEntityModel {
static getTentacleName(index: number): string;
static getTexturedModelData(): TexturedModelData;
}

//net.minecraft.client.render.entity.model.LeashKnotEntityModel
class LeashKnotEntityModel extends SinglePartEntityModel{
 setAngles(entity: Entity,limbAngle: number,limbDistance: number,animationProgress: number,headYaw: number,headPitch: number): void;
 getPart(): ModelPart;
}
class Static_LeashKnotEntityModel {
static getTexturedModelData(): TexturedModelData;
static KNOT: string;
}

//net.minecraft.client.render.entity.model.SalmonEntityModel
class SalmonEntityModel extends SinglePartEntityModel{
 setAngles(entity: Entity,limbAngle: number,limbDistance: number,animationProgress: number,headYaw: number,headPitch: number): void;
 getPart(): ModelPart;
}
class Static_SalmonEntityModel {
static getTexturedModelData(): TexturedModelData;
static BODY_FRONT: string;
static BODY_BACK: string;
}

//net.minecraft.client.render.entity.model.SquidEntityModel
class SquidEntityModel extends SinglePartEntityModel{
 setAngles(entity: Entity,limbAngle: number,limbDistance: number,animationProgress: number,headYaw: number,headPitch: number): void;
 getPart(): ModelPart;
}
class Static_SquidEntityModel {
static method_32057(modelPart: ModelPart,index: number): ModelPart;
static getTentacleName(index: number): string;
static getTexturedModelData(): TexturedModelData;
}

//net.minecraft.client.render.entity.model.SinglePartEntityModelWithChildTransform
class SinglePartEntityModelWithChildTransform extends SinglePartEntityModel{
 render(matrices: MatrixStack,vertices: VertexConsumer,light: number,overlay: number,red: number,green: number,blue: number,alpha: number): void;
}

//net.minecraft.client.render.entity.model.CamelEntityModel
class CamelEntityModel extends SinglePartEntityModel{
 render(matrices: MatrixStack,vertices: VertexConsumer,light: number,overlay: number,red: number,green: number,blue: number,alpha: number): void;
 setAngles(entity: Entity,limbAngle: number,limbDistance: number,animationProgress: number,headYaw: number,headPitch: number): void;
 setAngles(camelEntity: CamelEntity,f: number,g: number,h: number,i: number,j: number): void;
 getPart(): ModelPart;
}
class Static_CamelEntityModel {
static getTexturedModelData(): TexturedModelData;
static LIMB_ANGLE_SCALE: number;
static LIMB_DISTANCE_SCALE: number;
static field_43083: number;
static field_43084: number;
static SADDLE: string;
static BRIDLE: string;
static REINS: string;
}

//net.minecraft.client.render.entity.model.SnowGolemEntityModel
class SnowGolemEntityModel extends SinglePartEntityModel{
 setAngles(entity: Entity,limbAngle: number,limbDistance: number,animationProgress: number,headYaw: number,headPitch: number): void;
 getPart(): ModelPart;
 getHead(): ModelPart;
}
class Static_SnowGolemEntityModel {
static getTexturedModelData(): TexturedModelData;
static UPPER_BODY: string;
}

//net.minecraft.client.render.entity.model.LlamaSpitEntityModel
class LlamaSpitEntityModel extends SinglePartEntityModel{
 setAngles(entity: Entity,limbAngle: number,limbDistance: number,animationProgress: number,headYaw: number,headPitch: number): void;
 getPart(): ModelPart;
}
class Static_LlamaSpitEntityModel {
static getTexturedModelData(): TexturedModelData;
static MAIN: string;
}

//net.minecraft.client.render.entity.model.CodEntityModel
class CodEntityModel extends SinglePartEntityModel{
 setAngles(entity: Entity,limbAngle: number,limbDistance: number,animationProgress: number,headYaw: number,headPitch: number): void;
 getPart(): ModelPart;
}
class Static_CodEntityModel {
static getTexturedModelData(): TexturedModelData;
}

//net.minecraft.client.render.entity.model.CreeperEntityModel
class CreeperEntityModel extends SinglePartEntityModel{
 setAngles(entity: Entity,limbAngle: number,limbDistance: number,animationProgress: number,headYaw: number,headPitch: number): void;
 getPart(): ModelPart;
}
class Static_CreeperEntityModel {
static getTexturedModelData(dilation: Dilation): TexturedModelData;
static HEAD_AND_BODY_Y_PIVOT: number;
}

//net.minecraft.client.render.entity.model.EndermiteEntityModel
class EndermiteEntityModel extends SinglePartEntityModel{
 setAngles(entity: Entity,limbAngle: number,limbDistance: number,animationProgress: number,headYaw: number,headPitch: number): void;
 getPart(): ModelPart;
}
class Static_EndermiteEntityModel {
static getSegmentName(index: number): string;
static getTexturedModelData(): TexturedModelData;
static BODY_SEGMENTS_COUNT: number;
static SEGMENT_DIMENSIONS: number[][];
static SEGMENT_UVS: number[][];
}

//net.minecraft.client.render.entity.model.WardenEntityModel
class WardenEntityModel extends SinglePartEntityModel{
 setAngles(entity: Entity,limbAngle: number,limbDistance: number,animationProgress: number,headYaw: number,headPitch: number): void;
 setAngles(wardenEntity: WardenEntity,f: number,g: number,h: number,i: number,j: number): void;
 getHeadAndLimbs(): List;
 getTendrils(): List;
 getBody(): List;
 getPart(): ModelPart;
 getBodyHeadAndLimbs(): List;
}
class Static_WardenEntityModel {
static getTexturedModelData(): TexturedModelData;
static field_38324: number;
static field_38325: number;
}

//net.minecraft.client.render.entity.model.TintableCompositeModel
class TintableCompositeModel extends SinglePartEntityModel{
 render(matrices: MatrixStack,vertices: VertexConsumer,light: number,overlay: number,red: number,green: number,blue: number,alpha: number): void;
 setColorMultiplier(red: number,green: number,blue: number): void;
}

//net.minecraft.client.render.entity.model.MinecartEntityModel
class MinecartEntityModel extends SinglePartEntityModel{
 setAngles(entity: Entity,limbAngle: number,limbDistance: number,animationProgress: number,headYaw: number,headPitch: number): void;
 getPart(): ModelPart;
}
class Static_MinecartEntityModel {
static getTexturedModelData(): TexturedModelData;
}

//net.minecraft.client.render.entity.model.ParrotEntityModel
class ParrotEntityModel extends SinglePartEntityModel{
 animateModel(parrotEntity: ParrotEntity,f: number,g: number,h: number): void;
 animateModel(entity: Entity,limbAngle: number,limbDistance: number,tickDelta: number): void;
 setAngles(entity: Entity,limbAngle: number,limbDistance: number,animationProgress: number,headYaw: number,headPitch: number): void;
 setAngles(parrotEntity: ParrotEntity,f: number,g: number,h: number,i: number,j: number): void;
 getPart(): ModelPart;
 poseOnShoulder(matrices: MatrixStack,vertexConsumer: VertexConsumer,light: number,overlay: number,limbAngle: number,limbDistance: number,headYaw: number,headPitch: number,danceAngle: number): void;
}
class Static_ParrotEntityModel {
static getTexturedModelData(): TexturedModelData;
static getPose(parrot: ParrotEntity): ParrotEntityModel_Pose;
static FEATHER: string;
}

//net.minecraft.client.render.entity.model.SpiderEntityModel
class SpiderEntityModel extends SinglePartEntityModel{
 setAngles(entity: Entity,limbAngle: number,limbDistance: number,animationProgress: number,headYaw: number,headPitch: number): void;
 getPart(): ModelPart;
}
class Static_SpiderEntityModel {
static getTexturedModelData(): TexturedModelData;
static BODY0: string;
static BODY1: string;
static RIGHT_MIDDLE_FRONT_LEG: string;
static LEFT_MIDDLE_FRONT_LEG: string;
static RIGHT_MIDDLE_HIND_LEG: string;
static LEFT_MIDDLE_HIND_LEG: string;
}

//net.minecraft.client.render.entity.model.WitherEntityModel
class WitherEntityModel extends SinglePartEntityModel{
 animateModel(entity: Entity,limbAngle: number,limbDistance: number,tickDelta: number): void;
 animateModel(witherEntity: WitherEntity,f: number,g: number,h: number): void;
 setAngles(entity: Entity,limbAngle: number,limbDistance: number,animationProgress: number,headYaw: number,headPitch: number): void;
 setAngles(witherEntity: WitherEntity,f: number,g: number,h: number,i: number,j: number): void;
 getPart(): ModelPart;
}
class Static_WitherEntityModel {
static rotateHead(entity: WitherEntity,head: ModelPart,sigma: number): void;
static getTexturedModelData(dilation: Dilation): TexturedModelData;
static RIBCAGE: string;
static CENTER_HEAD: string;
static RIGHT_HEAD: string;
static LEFT_HEAD: string;
static RIBCAGE_PITCH_OFFSET: number;
static TAIL_PITCH_OFFSET: number;
}

//net.minecraft.client.render.entity.model.BlazeEntityModel
class BlazeEntityModel extends SinglePartEntityModel{
 setAngles(entity: Entity,limbAngle: number,limbDistance: number,animationProgress: number,headYaw: number,headPitch: number): void;
 getPart(): ModelPart;
}
class Static_BlazeEntityModel {
static getRodName(index: number): string;
static method_31984(modelPart: ModelPart,index: number): ModelPart;
static getTexturedModelData(): TexturedModelData;
}

//net.minecraft.client.render.entity.model.SlimeEntityModel
class SlimeEntityModel extends SinglePartEntityModel{
 setAngles(entity: Entity,limbAngle: number,limbDistance: number,animationProgress: number,headYaw: number,headPitch: number): void;
 getPart(): ModelPart;
}
class Static_SlimeEntityModel {
static getInnerTexturedModelData(): TexturedModelData;
static getOuterTexturedModelData(): TexturedModelData;
}

//net.minecraft.client.render.entity.model.SmallPufferfishEntityModel
class SmallPufferfishEntityModel extends SinglePartEntityModel{
 setAngles(entity: Entity,limbAngle: number,limbDistance: number,animationProgress: number,headYaw: number,headPitch: number): void;
 getPart(): ModelPart;
}
class Static_SmallPufferfishEntityModel {
static getTexturedModelData(): TexturedModelData;
}

//net.minecraft.client.render.entity.model.StriderEntityModel
class StriderEntityModel extends SinglePartEntityModel{
 setAngles(entity: Entity,limbAngle: number,limbDistance: number,animationProgress: number,headYaw: number,headPitch: number): void;
 setAngles(striderEntity: StriderEntity,f: number,g: number,h: number,i: number,j: number): void;
 getPart(): ModelPart;
}
class Static_StriderEntityModel {
static getTexturedModelData(): TexturedModelData;
static RIGHT_BOTTOM_BRISTLE: string;
static RIGHT_MIDDLE_BRISTLE: string;
static RIGHT_TOP_BRISTLE: string;
static LEFT_TOP_BRISTLE: string;
static LEFT_MIDDLE_BRISTLE: string;
static LEFT_BOTTOM_BRISTLE: string;
}

//net.minecraft.client.render.entity.model.IronGolemEntityModel
class IronGolemEntityModel extends SinglePartEntityModel{
 animateModel(entity: Entity,limbAngle: number,limbDistance: number,tickDelta: number): void;
 animateModel(ironGolemEntity: IronGolemEntity,f: number,g: number,h: number): void;
 setAngles(entity: Entity,limbAngle: number,limbDistance: number,animationProgress: number,headYaw: number,headPitch: number): void;
 setAngles(ironGolemEntity: IronGolemEntity,f: number,g: number,h: number,i: number,j: number): void;
 getPart(): ModelPart;
 getRightArm(): ModelPart;
}
class Static_IronGolemEntityModel {
static getTexturedModelData(): TexturedModelData;
}

//net.minecraft.client.render.entity.model.PhantomEntityModel
class PhantomEntityModel extends SinglePartEntityModel{
 setAngles(phantomEntity: PhantomEntity,f: number,g: number,h: number,i: number,j: number): void;
 setAngles(entity: Entity,limbAngle: number,limbDistance: number,animationProgress: number,headYaw: number,headPitch: number): void;
 getPart(): ModelPart;
}
class Static_PhantomEntityModel {
static getTexturedModelData(): TexturedModelData;
static TAIL_BASE: string;
static TAIL_TIP: string;
}

//net.minecraft.client.render.entity.model.FrogEntityModel
class FrogEntityModel extends SinglePartEntityModel{
 setAngles(entity: Entity,limbAngle: number,limbDistance: number,animationProgress: number,headYaw: number,headPitch: number): void;
 setAngles(frogEntity: FrogEntity,f: number,g: number,h: number,i: number,j: number): void;
 getPart(): ModelPart;
}
class Static_FrogEntityModel {
static getTexturedModelData(): TexturedModelData;
static WALKING_LIMB_ANGLE_SCALE: number;
static SWIMMING_LIMB_ANGLE_SCALE: number;
static LIMB_DISTANCE_SCALE: number;
}

//net.minecraft.client.render.entity.model.MagmaCubeEntityModel
class MagmaCubeEntityModel extends SinglePartEntityModel{
 animateModel(entity: Entity,limbAngle: number,limbDistance: number,tickDelta: number): void;
 animateModel(slimeEntity: SlimeEntity,f: number,g: number,h: number): void;
 setAngles(slimeEntity: SlimeEntity,f: number,g: number,h: number,i: number,j: number): void;
 setAngles(entity: Entity,limbAngle: number,limbDistance: number,animationProgress: number,headYaw: number,headPitch: number): void;
 getPart(): ModelPart;
}
class Static_MagmaCubeEntityModel {
static getSliceName(index: number): string;
static method_32016(modelPart: ModelPart,index: number): ModelPart;
static getTexturedModelData(): TexturedModelData;
static SLICES_COUNT: number;
}

//net.minecraft.client.render.entity.model.LargePufferfishEntityModel
class LargePufferfishEntityModel extends SinglePartEntityModel{
 setAngles(entity: Entity,limbAngle: number,limbDistance: number,animationProgress: number,headYaw: number,headPitch: number): void;
 getPart(): ModelPart;
}
class Static_LargePufferfishEntityModel {
static getTexturedModelData(): TexturedModelData;
}

//net.minecraft.client.render.entity.model.BatEntityModel
class BatEntityModel extends SinglePartEntityModel{
 setAngles(batEntity: BatEntity,f: number,g: number,h: number,i: number,j: number): void;
 setAngles(entity: Entity,limbAngle: number,limbDistance: number,animationProgress: number,headYaw: number,headPitch: number): void;
 getPart(): ModelPart;
}
class Static_BatEntityModel {
static getTexturedModelData(): TexturedModelData;
}

//net.minecraft.client.render.entity.model.SilverfishEntityModel
class SilverfishEntityModel extends SinglePartEntityModel{
 setAngles(entity: Entity,limbAngle: number,limbDistance: number,animationProgress: number,headYaw: number,headPitch: number): void;
 getPart(): ModelPart;
}
class Static_SilverfishEntityModel {
static getLayerName(index: number): string;
static getSegmentName(index: number): string;
static method_32044(modelPart: ModelPart,index: number): ModelPart;
static method_32046(modelPart: ModelPart,index: number): ModelPart;
static getTexturedModelData(): TexturedModelData;
static BODY_PARTS_COUNT: number;
static SEGMENT_LOCATIONS: number[][];
static SEGMENT_SIZES: number[][];
}

//net.minecraft.client.render.entity.model.EvokerFangsEntityModel
class EvokerFangsEntityModel extends SinglePartEntityModel{
 setAngles(entity: Entity,limbAngle: number,limbDistance: number,animationProgress: number,headYaw: number,headPitch: number): void;
 getPart(): ModelPart;
}
class Static_EvokerFangsEntityModel {
static getTexturedModelData(): TexturedModelData;
static BASE: string;
static UPPER_JAW: string;
static LOWER_JAW: string;
}

//net.minecraft.client.render.entity.model.DolphinEntityModel
class DolphinEntityModel extends SinglePartEntityModel{
 setAngles(entity: Entity,limbAngle: number,limbDistance: number,animationProgress: number,headYaw: number,headPitch: number): void;
 getPart(): ModelPart;
}
class Static_DolphinEntityModel {
static getTexturedModelData(): TexturedModelData;
}

//net.minecraft.client.render.entity.model.RavagerEntityModel
class RavagerEntityModel extends SinglePartEntityModel{
 animateModel(ravagerEntity: RavagerEntity,f: number,g: number,h: number): void;
 animateModel(entity: Entity,limbAngle: number,limbDistance: number,tickDelta: number): void;
 setAngles(entity: Entity,limbAngle: number,limbDistance: number,animationProgress: number,headYaw: number,headPitch: number): void;
 setAngles(ravagerEntity: RavagerEntity,f: number,g: number,h: number,i: number,j: number): void;
 getPart(): ModelPart;
}
class Static_RavagerEntityModel {
static getTexturedModelData(): TexturedModelData;
}

//net.minecraft.client.render.entity.model.ShulkerBulletEntityModel
class ShulkerBulletEntityModel extends SinglePartEntityModel{
 setAngles(entity: Entity,limbAngle: number,limbDistance: number,animationProgress: number,headYaw: number,headPitch: number): void;
 getPart(): ModelPart;
}
class Static_ShulkerBulletEntityModel {
static getTexturedModelData(): TexturedModelData;
static MAIN: string;
}

//net.minecraft.client.render.entity.model.ShulkerEntityModel
class ShulkerEntityModel extends CompositeEntityModel{
 setAngles(entity: Entity,limbAngle: number,limbDistance: number,animationProgress: number,headYaw: number,headPitch: number): void;
 setAngles(shulkerEntity: ShulkerEntity,f: number,g: number,h: number,i: number,j: number): void;
 getLid(): ModelPart;
 getHead(): ModelPart;
 getParts(): Iterable;
}
class Static_ShulkerEntityModel {
static getTexturedModelData(): TexturedModelData;
static LID: string;
static BASE: string;
}

//net.minecraft.client.render.entity.model.RaftEntityModel
class RaftEntityModel extends CompositeEntityModel{
 setAngles(entity: Entity,limbAngle: number,limbDistance: number,animationProgress: number,headYaw: number,headPitch: number): void;
 setAngles(boatEntity: BoatEntity,f: number,g: number,h: number,i: number,j: number): void;
 getParts(): Iterable;
 getParts(): ImmutableList;
}
class Static_RaftEntityModel {
static getTexturedModelData(): TexturedModelData;
static setPaddleAngle(entity: BoatEntity,sigma: number,part: ModelPart,angle: number): void;
static addParts(modelPartData: ModelPartData): void;
static LEFT_PADDLE: string;
static RIGHT_PADDLE: string;
static BOTTOM: string;
}

//net.minecraft.client.gui.screen.ingame.CreativeInventoryScreen
class CreativeInventoryScreen extends AbstractInventoryScreen{
 removed(): void;
 resize(client: MinecraftClient,width: number,height: number): void;
 render(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
 charTyped(chr: char,modifiers: number): boolean;
 mouseScrolled(mouseX: number,mouseY: number,amount: number): boolean;
 getTooltipFromItem(stack: ItemStack): List;
 isInventoryTabSelected(): boolean;
 keyPressed(keyCode: number,scanCode: number,modifiers: number): boolean;
 keyReleased(keyCode: number,scanCode: number,modifiers: number): boolean;
 mouseReleased(mouseX: number,mouseY: number,button: number): boolean;
 mouseClicked(mouseX: number,mouseY: number,button: number): boolean;
 mouseDragged(mouseX: number,mouseY: number,button: number,deltaX: number,deltaY: number): boolean;
 handledScreenTick(): void;
}
class Static_CreativeInventoryScreen {
static method_15875(string: string,id: Identifier): boolean;
static method_15874(string: string,string2: string,id: Identifier): boolean;
static method_51455(itemStack: ItemStack,list: List,tagKey: TagKey): void;
static method_15873(predicate: Predicate,tag: TagKey): boolean;
static onHotbarKeyPress(client: MinecraftClient,index: number,restore: boolean,save: boolean): void;
static TEXTURE: Identifier;
static TAB_TEXTURE_PREFIX: string;
static CUSTOM_CREATIVE_LOCK_KEY: string;
static ROWS_COUNT: number;
static COLUMNS_COUNT: number;
static TAB_WIDTH: number;
static TAB_HEIGHT: number;
static SCROLLBAR_WIDTH: number;
static SCROLLBAR_HEIGHT: number;
static INVENTORY: SimpleInventory;
static DELETE_ITEM_SLOT_TEXT: Text;
static WHITE: number;
static selectedTab: ItemGroup;
}

//net.minecraft.world.gen.stateprovider.DualNoiseBlockStateProvider
class DualNoiseBlockStateProvider extends NoiseBlockStateProvider{
 get(random: Random,pos: BlockPos): BlockState;
}
class Static_DualNoiseBlockStateProvider {
static method_38437(instance: RecordCodecBuilder_Instance): App;
static method_38438(dualNoiseBlockStateProvider: DualNoiseBlockStateProvider): Range;
static method_38436(dualNoiseBlockStateProvider: DualNoiseBlockStateProvider): DoublePerlinNoiseSampler_NoiseParameters;
static method_38434(dualNoiseBlockStateProvider: DualNoiseBlockStateProvider): Float;
static DUAL_CODEC: Codec;
}

//net.minecraft.client.particle.CherryLeavesParticle
class CherryLeavesParticle extends SpriteBillboardParticle{
 getType(): ParticleTextureSheet;
 tick(): void;
}
class Static_CherryLeavesParticle {
static field_43372: number;
static field_43373: number;
static field_43366: number;
static field_43367: number;
static field_43368: number;
}

//net.minecraft.client.particle.WaterSuspendParticle
class WaterSuspendParticle extends SpriteBillboardParticle{
 getType(): ParticleTextureSheet;
}

//net.minecraft.client.particle.SpellParticle
class SpellParticle extends SpriteBillboardParticle{
 getType(): ParticleTextureSheet;
 tick(): void;
}
class Static_SpellParticle {
static RANDOM: Random;
}

//net.minecraft.client.particle.ExplosionLargeParticle
class ExplosionLargeParticle extends SpriteBillboardParticle{
 getType(): ParticleTextureSheet;
 tick(): void;
 getBrightness(tint: number): number;
}

//net.minecraft.client.particle.AnimatedParticle
class AnimatedParticle extends SpriteBillboardParticle{
 getType(): ParticleTextureSheet;
 setColor(rgbHex: number): void;
 tick(): void;
 getBrightness(tint: number): number;
 setTargetColor(rgbHex: number): void;
}

//net.minecraft.client.particle.VibrationParticle
class VibrationParticle extends SpriteBillboardParticle{
 getType(): ParticleTextureSheet;
 tick(): void;
 buildGeometry(vertexConsumer: VertexConsumer,camera: Camera,tickDelta: number): void;
 getBrightness(tint: number): number;
}
class Static_VibrationParticle {
static method_33079(f: number,g: number,h: number,rotationQuaternion: Quaternionf): void;
static method_33077(f: number,g: number,h: number,rotationQuaternion: Quaternionf): void;
}

//net.minecraft.client.particle.AscendingParticle
class AscendingParticle extends SpriteBillboardParticle{
 getType(): ParticleTextureSheet;
 getSize(tickDelta: number): number;
 tick(): void;
}

//net.minecraft.client.particle.BlockFallingDustParticle
class BlockFallingDustParticle extends SpriteBillboardParticle{
 getType(): ParticleTextureSheet;
 getSize(tickDelta: number): number;
 tick(): void;
}

//net.minecraft.client.particle.DragonBreathParticle
class DragonBreathParticle extends SpriteBillboardParticle{
 getType(): ParticleTextureSheet;
 getSize(tickDelta: number): number;
 tick(): void;
}
class Static_DragonBreathParticle {
static MIN_COLOR: number;
static MAX_COLOR: number;
static MIN_RED: number;
static MIN_GREEN: number;
static MIN_BLUE: number;
static MAX_RED: number;
static MAX_GREEN: number;
static MAX_BLUE: number;
}

//net.minecraft.client.particle.EnchantGlyphParticle
class EnchantGlyphParticle extends SpriteBillboardParticle{
 getType(): ParticleTextureSheet;
 move(dx: number,dy: number,dz: number): void;
 tick(): void;
 getBrightness(tint: number): number;
}

//net.minecraft.client.particle.LavaEmberParticle
class LavaEmberParticle extends SpriteBillboardParticle{
 getType(): ParticleTextureSheet;
 getSize(tickDelta: number): number;
 tick(): void;
 getBrightness(tint: number): number;
}

//net.minecraft.client.particle.BlockMarkerParticle
class BlockMarkerParticle extends SpriteBillboardParticle{
 getType(): ParticleTextureSheet;
 getSize(tickDelta: number): number;
}

//net.minecraft.client.particle.BubbleColumnUpParticle
class BubbleColumnUpParticle extends SpriteBillboardParticle{
 getType(): ParticleTextureSheet;
 tick(): void;
}

//net.minecraft.client.particle.CloudParticle
class CloudParticle extends SpriteBillboardParticle{
 getType(): ParticleTextureSheet;
 getSize(tickDelta: number): number;
 tick(): void;
}

//net.minecraft.client.particle.PortalParticle
class PortalParticle extends SpriteBillboardParticle{
 getType(): ParticleTextureSheet;
 getSize(tickDelta: number): number;
 move(dx: number,dy: number,dz: number): void;
 tick(): void;
 getBrightness(tint: number): number;
}

//net.minecraft.client.particle.AbstractSlowingParticle
class AbstractSlowingParticle extends SpriteBillboardParticle{
}

//net.minecraft.client.particle.AbstractDustParticle
class AbstractDustParticle extends SpriteBillboardParticle{
 getType(): ParticleTextureSheet;
 getSize(tickDelta: number): number;
 tick(): void;
}

//net.minecraft.client.particle.CampfireSmokeParticle
class CampfireSmokeParticle extends SpriteBillboardParticle{
 getType(): ParticleTextureSheet;
 tick(): void;
}

//net.minecraft.client.particle.ExplosionSmokeParticle
class ExplosionSmokeParticle extends SpriteBillboardParticle{
 getType(): ParticleTextureSheet;
 tick(): void;
}

//net.minecraft.client.particle.EmotionParticle
class EmotionParticle extends SpriteBillboardParticle{
 getType(): ParticleTextureSheet;
 getSize(tickDelta: number): number;
}

//net.minecraft.client.particle.NoteParticle
class NoteParticle extends SpriteBillboardParticle{
 getType(): ParticleTextureSheet;
 getSize(tickDelta: number): number;
}

//net.minecraft.client.particle.DamageParticle
class DamageParticle extends SpriteBillboardParticle{
 getType(): ParticleTextureSheet;
 getSize(tickDelta: number): number;
 tick(): void;
}

//net.minecraft.client.particle.FishingParticle
class FishingParticle extends SpriteBillboardParticle{
 getType(): ParticleTextureSheet;
 tick(): void;
}

//net.minecraft.client.particle.SculkChargePopParticle
class SculkChargePopParticle extends SpriteBillboardParticle{
 getType(): ParticleTextureSheet;
 tick(): void;
 getBrightness(tint: number): number;
}

//net.minecraft.client.particle.BlockLeakParticle
class BlockLeakParticle extends SpriteBillboardParticle{
 getType(): ParticleTextureSheet;
 tick(): void;
 getBrightness(tint: number): number;
}
class Static_BlockLeakParticle {
static createFallingLava(type: DefaultParticleType,world: ClientWorld,x: number,y: number,z: number,velocityX: number,velocityY: number,velocityZ: number): SpriteBillboardParticle;
static createFallingHoney(type: DefaultParticleType,world: ClientWorld,x: number,y: number,z: number,velocityX: number,velocityY: number,velocityZ: number): SpriteBillboardParticle;
static createLandingHoney(type: DefaultParticleType,world: ClientWorld,x: number,y: number,z: number,velocityX: number,velocityY: number,velocityZ: number): SpriteBillboardParticle;
static createFallingWater(type: DefaultParticleType,world: ClientWorld,x: number,y: number,z: number,velocityX: number,velocityY: number,velocityZ: number): SpriteBillboardParticle;
static createDrippingLava(type: DefaultParticleType,world: ClientWorld,x: number,y: number,z: number,velocityX: number,velocityY: number,velocityZ: number): SpriteBillboardParticle;
static createLandingLava(type: DefaultParticleType,world: ClientWorld,x: number,y: number,z: number,velocityX: number,velocityY: number,velocityZ: number): SpriteBillboardParticle;
static createDrippingWater(type: DefaultParticleType,world: ClientWorld,x: number,y: number,z: number,velocityX: number,velocityY: number,velocityZ: number): SpriteBillboardParticle;
static createDrippingHoney(type: DefaultParticleType,world: ClientWorld,x: number,y: number,z: number,velocityX: number,velocityY: number,velocityZ: number): SpriteBillboardParticle;
static createFallingSporeBlossom(type: DefaultParticleType,world: ClientWorld,x: number,y: number,z: number,velocityX: number,velocityY: number,velocityZ: number): SpriteBillboardParticle;
static createFallingObsidianTear(type: DefaultParticleType,world: ClientWorld,x: number,y: number,z: number,velocityX: number,velocityY: number,velocityZ: number): SpriteBillboardParticle;
static createDrippingDripstoneWater(type: DefaultParticleType,world: ClientWorld,x: number,y: number,z: number,velocityX: number,velocityY: number,velocityZ: number): SpriteBillboardParticle;
static createLandingObsidianTear(type: DefaultParticleType,world: ClientWorld,x: number,y: number,z: number,velocityX: number,velocityY: number,velocityZ: number): SpriteBillboardParticle;
static createFallingDripstoneLava(type: DefaultParticleType,world: ClientWorld,x: number,y: number,z: number,velocityX: number,velocityY: number,velocityZ: number): SpriteBillboardParticle;
static createDrippingDripstoneLava(type: DefaultParticleType,world: ClientWorld,x: number,y: number,z: number,velocityX: number,velocityY: number,velocityZ: number): SpriteBillboardParticle;
static createFallingDripstoneWater(type: DefaultParticleType,world: ClientWorld,x: number,y: number,z: number,velocityX: number,velocityY: number,velocityZ: number): SpriteBillboardParticle;
static createFallingNectar(type: DefaultParticleType,world: ClientWorld,x: number,y: number,z: number,velocityX: number,velocityY: number,velocityZ: number): SpriteBillboardParticle;
static createDrippingObsidianTear(type: DefaultParticleType,world: ClientWorld,x: number,y: number,z: number,velocityX: number,velocityY: number,velocityZ: number): SpriteBillboardParticle;
}

//net.minecraft.client.particle.CurrentDownParticle
class CurrentDownParticle extends SpriteBillboardParticle{
 getType(): ParticleTextureSheet;
 tick(): void;
}

//net.minecraft.client.particle.BlockDustParticle
class BlockDustParticle extends SpriteBillboardParticle{
 getType(): ParticleTextureSheet;
 getBrightness(tint: number): number;
}

//net.minecraft.client.particle.SnowflakeParticle
class SnowflakeParticle extends SpriteBillboardParticle{
 getType(): ParticleTextureSheet;
 tick(): void;
}

//net.minecraft.client.particle.ShriekParticle
class ShriekParticle extends SpriteBillboardParticle{
 getType(): ParticleTextureSheet;
 getSize(tickDelta: number): number;
 tick(): void;
 buildGeometry(vertexConsumer: VertexConsumer,camera: Camera,tickDelta: number): void;
 getBrightness(tint: number): number;
}
class Static_ShriekParticle {
static method_42586(quaternion: Quaternionf): void;
static method_42585(quaternion: Quaternionf): void;
static field_38334: Vector3f;
static field_38335: Vector3f;
static X_ROTATION: number;
}

//net.minecraft.client.particle.GlowParticle
class GlowParticle extends SpriteBillboardParticle{
 getType(): ParticleTextureSheet;
 tick(): void;
 getBrightness(tint: number): number;
}
class Static_GlowParticle {
static RANDOM: Random;
}

//net.minecraft.client.particle.SculkChargeParticle
class SculkChargeParticle extends SpriteBillboardParticle{
 getType(): ParticleTextureSheet;
 tick(): void;
 getBrightness(tint: number): number;
}

//net.minecraft.client.particle.CrackParticle
class CrackParticle extends SpriteBillboardParticle{
 getType(): ParticleTextureSheet;
}

//net.minecraft.client.particle.WaterBubbleParticle
class WaterBubbleParticle extends SpriteBillboardParticle{
 getType(): ParticleTextureSheet;
 tick(): void;
}

//net.minecraft.client.particle.FireworksSparkParticle$Flash
class FireworksSparkParticle_Flash extends SpriteBillboardParticle{
 getType(): ParticleTextureSheet;
 getSize(tickDelta: number): number;
 buildGeometry(vertexConsumer: VertexConsumer,camera: Camera,tickDelta: number): void;
}

//net.minecraft.client.particle.SweepAttackParticle
class SweepAttackParticle extends SpriteBillboardParticle{
 getType(): ParticleTextureSheet;
 tick(): void;
 getBrightness(tint: number): number;
}

//net.minecraft.client.particle.RainSplashParticle
class RainSplashParticle extends SpriteBillboardParticle{
 getType(): ParticleTextureSheet;
 tick(): void;
}

//net.minecraft.client.particle.SuspendParticle
class SuspendParticle extends SpriteBillboardParticle{
 getType(): ParticleTextureSheet;
 move(dx: number,dy: number,dz: number): void;
 tick(): void;
}

//net.minecraft.client.particle.BubblePopParticle
class BubblePopParticle extends SpriteBillboardParticle{
 getType(): ParticleTextureSheet;
 tick(): void;
}

//net.minecraft.client.render.entity.BeeEntityRenderer
class BeeEntityRenderer extends MobEntityRenderer{
 getTexture(beeEntity: BeeEntity): Identifier;
 getTexture(entity: Entity): Identifier;
}
class Static_BeeEntityRenderer {
static ANGRY_TEXTURE: Identifier;
static ANGRY_NECTAR_TEXTURE: Identifier;
static PASSIVE_TEXTURE: Identifier;
static NECTAR_TEXTURE: Identifier;
}

//net.minecraft.client.render.entity.MooshroomEntityRenderer
class MooshroomEntityRenderer extends MobEntityRenderer{
 getTexture(mooshroomEntity: MooshroomEntity): Identifier;
 getTexture(entity: Entity): Identifier;
}
class Static_MooshroomEntityRenderer {
static method_18657(map: HashMap): void;
static TEXTURES: Map;
}

//net.minecraft.client.render.entity.CowEntityRenderer
class CowEntityRenderer extends MobEntityRenderer{
 getTexture(cowEntity: CowEntity): Identifier;
 getTexture(entity: Entity): Identifier;
}
class Static_CowEntityRenderer {
static TEXTURE: Identifier;
}

//net.minecraft.client.render.entity.SilverfishEntityRenderer
class SilverfishEntityRenderer extends MobEntityRenderer{
 getTexture(entity: Entity): Identifier;
 getTexture(silverfishEntity: SilverfishEntity): Identifier;
}
class Static_SilverfishEntityRenderer {
static TEXTURE: Identifier;
}

//net.minecraft.client.render.entity.LlamaEntityRenderer
class LlamaEntityRenderer extends MobEntityRenderer{
 getTexture(llamaEntity: LlamaEntity): Identifier;
 getTexture(entity: Entity): Identifier;
}
class Static_LlamaEntityRenderer {
static CREAMY_TEXTURE: Identifier;
static WHITE_TEXTURE: Identifier;
static BROWN_TEXTURE: Identifier;
static GRAY_TEXTURE: Identifier;
}

//net.minecraft.client.render.entity.EndermiteEntityRenderer
class EndermiteEntityRenderer extends MobEntityRenderer{
 getTexture(entity: Entity): Identifier;
 getTexture(endermiteEntity: EndermiteEntity): Identifier;
}
class Static_EndermiteEntityRenderer {
static TEXTURE: Identifier;
}

//net.minecraft.client.render.entity.PandaEntityRenderer
class PandaEntityRenderer extends MobEntityRenderer{
 getTexture(pandaEntity: PandaEntity): Identifier;
 getTexture(entity: Entity): Identifier;
}
class Static_PandaEntityRenderer {
static method_17796(map: EnumMap): void;
static TEXTURES: Map;
}

//net.minecraft.client.render.entity.ParrotEntityRenderer
class ParrotEntityRenderer extends MobEntityRenderer{
 getTexture(entity: Entity): Identifier;
 getTexture(parrotEntity: ParrotEntity): Identifier;
 getAnimationProgress(parrotEntity: ParrotEntity,f: number): number;
 getAnimationProgress(entity: LivingEntity,tickDelta: number): number;
}
class Static_ParrotEntityRenderer {
static getTexture(variant: ParrotEntity_Variant): Identifier;
static RED_BLUE_TEXTURE: Identifier;
static BLUE_TEXTURE: Identifier;
static GREEN_TEXTURE: Identifier;
static YELLOW_TEXTURE: Identifier;
static GREY_TEXTURE: Identifier;
}

//net.minecraft.client.render.entity.TurtleEntityRenderer
class TurtleEntityRenderer extends MobEntityRenderer{
 render(entity: Entity,yaw: number,tickDelta: number,matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,light: number): void;
 render(turtleEntity: TurtleEntity,f: number,g: number,matrixStack: MatrixStack,vertexConsumerProvider: VertexConsumerProvider,i: number): void;
 render(mobEntity: MobEntity,f: number,g: number,matrixStack: MatrixStack,vertexConsumerProvider: VertexConsumerProvider,i: number): void;
 render(livingEntity: LivingEntity,f: number,g: number,matrixStack: MatrixStack,vertexConsumerProvider: VertexConsumerProvider,i: number): void;
 getTexture(turtleEntity: TurtleEntity): Identifier;
 getTexture(entity: Entity): Identifier;
}
class Static_TurtleEntityRenderer {
static TEXTURE: Identifier;
}

//net.minecraft.client.render.entity.WanderingTraderEntityRenderer
class WanderingTraderEntityRenderer extends MobEntityRenderer{
 getTexture(wanderingTraderEntity: WanderingTraderEntity): Identifier;
 getTexture(entity: Entity): Identifier;
}
class Static_WanderingTraderEntityRenderer {
static TEXTURE: Identifier;
}

//net.minecraft.client.render.entity.PufferfishEntityRenderer
class PufferfishEntityRenderer extends MobEntityRenderer{
 render(entity: Entity,yaw: number,tickDelta: number,matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,light: number): void;
 render(livingEntity: LivingEntity,f: number,g: number,matrixStack: MatrixStack,vertexConsumerProvider: VertexConsumerProvider,i: number): void;
 render(mobEntity: MobEntity,f: number,g: number,matrixStack: MatrixStack,vertexConsumerProvider: VertexConsumerProvider,i: number): void;
 render(pufferfishEntity: PufferfishEntity,f: number,g: number,matrixStack: MatrixStack,vertexConsumerProvider: VertexConsumerProvider,i: number): void;
 getTexture(entity: Entity): Identifier;
 getTexture(pufferfishEntity: PufferfishEntity): Identifier;
}
class Static_PufferfishEntityRenderer {
static TEXTURE: Identifier;
}

//net.minecraft.client.render.entity.SpiderEntityRenderer
class SpiderEntityRenderer extends MobEntityRenderer{
 getTexture(spiderEntity: SpiderEntity): Identifier;
 getTexture(entity: Entity): Identifier;
}
class Static_SpiderEntityRenderer {
static TEXTURE: Identifier;
}

//net.minecraft.client.render.entity.WardenEntityRenderer
class WardenEntityRenderer extends MobEntityRenderer{
 getTexture(wardenEntity: WardenEntity): Identifier;
 getTexture(entity: Entity): Identifier;
}
class Static_WardenEntityRenderer {
static method_42607(warden: WardenEntity,tickDelta: number,animationProgress: number): number;
static method_42611(warden: WardenEntity,tickDelta: number,animationProgress: number): number;
static method_42610(warden: WardenEntity,tickDelta: number,animationProgress: number): number;
static method_42609(warden: WardenEntity,tickDelta: number,animationProgress: number): number;
static method_42612(warden: WardenEntity,tickDelta: number,animationProgress: number): number;
static TEXTURE: Identifier;
static BIOLUMINESCENT_LAYER_TEXTURE: Identifier;
static HEART_TEXTURE: Identifier;
static PULSATING_SPOTS_1_TEXTURE: Identifier;
static PULSATING_SPOTS_2_TEXTURE: Identifier;
}

//net.minecraft.client.render.entity.PhantomEntityRenderer
class PhantomEntityRenderer extends MobEntityRenderer{
 getTexture(entity: Entity): Identifier;
 getTexture(phantomEntity: PhantomEntity): Identifier;
}
class Static_PhantomEntityRenderer {
static TEXTURE: Identifier;
}

//net.minecraft.client.render.entity.CatEntityRenderer
class CatEntityRenderer extends MobEntityRenderer{
 getTexture(entity: Entity): Identifier;
 getTexture(catEntity: CatEntity): Identifier;
}

//net.minecraft.client.render.entity.TadpoleEntityRenderer
class TadpoleEntityRenderer extends MobEntityRenderer{
 getTexture(tadpoleEntity: TadpoleEntity): Identifier;
 getTexture(entity: Entity): Identifier;
}
class Static_TadpoleEntityRenderer {
static TEXTURE: Identifier;
}

//net.minecraft.client.render.entity.SlimeEntityRenderer
class SlimeEntityRenderer extends MobEntityRenderer{
 render(entity: Entity,yaw: number,tickDelta: number,matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,light: number): void;
 render(livingEntity: LivingEntity,f: number,g: number,matrixStack: MatrixStack,vertexConsumerProvider: VertexConsumerProvider,i: number): void;
 render(mobEntity: MobEntity,f: number,g: number,matrixStack: MatrixStack,vertexConsumerProvider: VertexConsumerProvider,i: number): void;
 render(slimeEntity: SlimeEntity,f: number,g: number,matrixStack: MatrixStack,vertexConsumerProvider: VertexConsumerProvider,i: number): void;
 getTexture(entity: Entity): Identifier;
 getTexture(slimeEntity: SlimeEntity): Identifier;
}
class Static_SlimeEntityRenderer {
static TEXTURE: Identifier;
}

//net.minecraft.client.render.entity.ChickenEntityRenderer
class ChickenEntityRenderer extends MobEntityRenderer{
 getTexture(entity: Entity): Identifier;
 getTexture(chickenEntity: ChickenEntity): Identifier;
}
class Static_ChickenEntityRenderer {
static TEXTURE: Identifier;
}

//net.minecraft.client.render.entity.SnowGolemEntityRenderer
class SnowGolemEntityRenderer extends MobEntityRenderer{
 getTexture(snowGolemEntity: SnowGolemEntity): Identifier;
 getTexture(entity: Entity): Identifier;
}
class Static_SnowGolemEntityRenderer {
static TEXTURE: Identifier;
}

//net.minecraft.client.render.entity.CreeperEntityRenderer
class CreeperEntityRenderer extends MobEntityRenderer{
 getTexture(entity: Entity): Identifier;
 getTexture(creeperEntity: CreeperEntity): Identifier;
}
class Static_CreeperEntityRenderer {
static TEXTURE: Identifier;
}

//net.minecraft.client.render.entity.PolarBearEntityRenderer
class PolarBearEntityRenderer extends MobEntityRenderer{
 getTexture(polarBearEntity: PolarBearEntity): Identifier;
 getTexture(entity: Entity): Identifier;
}
class Static_PolarBearEntityRenderer {
static TEXTURE: Identifier;
}

//net.minecraft.client.render.entity.SquidEntityRenderer
class SquidEntityRenderer extends MobEntityRenderer{
 getTexture(entity: Entity): Identifier;
 getTexture(squidEntity: SquidEntity): Identifier;
}
class Static_SquidEntityRenderer {
static TEXTURE: Identifier;
}

//net.minecraft.client.render.entity.FrogEntityRenderer
class FrogEntityRenderer extends MobEntityRenderer{
 getTexture(frogEntity: FrogEntity): Identifier;
 getTexture(entity: Entity): Identifier;
}

//net.minecraft.client.render.entity.WitherEntityRenderer
class WitherEntityRenderer extends MobEntityRenderer{
 getTexture(entity: Entity): Identifier;
 getTexture(witherEntity: WitherEntity): Identifier;
}
class Static_WitherEntityRenderer {
static INVULNERABLE_TEXTURE: Identifier;
static TEXTURE: Identifier;
}

//net.minecraft.client.render.entity.FoxEntityRenderer
class FoxEntityRenderer extends MobEntityRenderer{
 getTexture(entity: Entity): Identifier;
 getTexture(foxEntity: FoxEntity): Identifier;
}
class Static_FoxEntityRenderer {
static TEXTURE: Identifier;
static SLEEPING_TEXTURE: Identifier;
static SNOW_TEXTURE: Identifier;
static SLEEPING_SNOW_TEXTURE: Identifier;
}

//net.minecraft.client.render.entity.HoglinEntityRenderer
class HoglinEntityRenderer extends MobEntityRenderer{
 getTexture(entity: Entity): Identifier;
 getTexture(hoglinEntity: HoglinEntity): Identifier;
}
class Static_HoglinEntityRenderer {
static TEXTURE: Identifier;
}

//net.minecraft.client.render.entity.CamelEntityRenderer
class CamelEntityRenderer extends MobEntityRenderer{
 getTexture(camelEntity: CamelEntity): Identifier;
 getTexture(entity: Entity): Identifier;
}
class Static_CamelEntityRenderer {
static TEXTURE: Identifier;
}

//net.minecraft.client.render.entity.GoatEntityRenderer
class GoatEntityRenderer extends MobEntityRenderer{
 getTexture(goatEntity: GoatEntity): Identifier;
 getTexture(entity: Entity): Identifier;
}
class Static_GoatEntityRenderer {
static TEXTURE: Identifier;
}

//net.minecraft.client.render.entity.ShulkerEntityRenderer
class ShulkerEntityRenderer extends MobEntityRenderer{
 getTexture(shulkerEntity: ShulkerEntity): Identifier;
 getTexture(entity: Entity): Identifier;
 shouldRender(entity: Entity,frustum: Frustum,x: number,y: number,z: number): boolean;
 shouldRender(shulkerEntity: ShulkerEntity,frustum: Frustum,d: number,e: number,f: number): boolean;
 shouldRender(mobEntity: MobEntity,frustum: Frustum,d: number,e: number,f: number): boolean;
 getPositionOffset(entity: Entity,tickDelta: number): Vec3d;
 getPositionOffset(shulkerEntity: ShulkerEntity,f: number): Vec3d;
}
class Static_ShulkerEntityRenderer {
static getTexture(shulkerColor: DyeColor): Identifier;
static method_33436(shulkerEntity: ShulkerEntity,frustum: Frustum,renderPositionOffset: Vec3d): boolean;
static method_22792(spriteId: SpriteIdentifier): Identifier;
static method_22791(i: number): Identifier[];
static TEXTURE: Identifier;
static COLORED_TEXTURES: Identifier[];
}

//net.minecraft.client.render.entity.IronGolemEntityRenderer
class IronGolemEntityRenderer extends MobEntityRenderer{
 getTexture(entity: Entity): Identifier;
 getTexture(ironGolemEntity: IronGolemEntity): Identifier;
}
class Static_IronGolemEntityRenderer {
static TEXTURE: Identifier;
}

//net.minecraft.client.render.entity.GiantEntityRenderer
class GiantEntityRenderer extends MobEntityRenderer{
 getTexture(giantEntity: GiantEntity): Identifier;
 getTexture(entity: Entity): Identifier;
}
class Static_GiantEntityRenderer {
static TEXTURE: Identifier;
}

//net.minecraft.client.render.entity.SalmonEntityRenderer
class SalmonEntityRenderer extends MobEntityRenderer{
 getTexture(entity: Entity): Identifier;
 getTexture(salmonEntity: SalmonEntity): Identifier;
}
class Static_SalmonEntityRenderer {
static TEXTURE: Identifier;
}

//net.minecraft.client.render.entity.GhastEntityRenderer
class GhastEntityRenderer extends MobEntityRenderer{
 getTexture(ghastEntity: GhastEntity): Identifier;
 getTexture(entity: Entity): Identifier;
}
class Static_GhastEntityRenderer {
static TEXTURE: Identifier;
static ANGRY_TEXTURE: Identifier;
}

//net.minecraft.client.render.entity.ZoglinEntityRenderer
class ZoglinEntityRenderer extends MobEntityRenderer{
 getTexture(zoglinEntity: ZoglinEntity): Identifier;
 getTexture(entity: Entity): Identifier;
}
class Static_ZoglinEntityRenderer {
static TEXTURE: Identifier;
}

//net.minecraft.client.render.entity.AxolotlEntityRenderer
class AxolotlEntityRenderer extends MobEntityRenderer{
 getTexture(axolotlEntity: AxolotlEntity): Identifier;
 getTexture(entity: Entity): Identifier;
}
class Static_AxolotlEntityRenderer {
static method_33307(variants: HashMap): void;
static TEXTURES: Map;
}

//net.minecraft.client.render.entity.BatEntityRenderer
class BatEntityRenderer extends MobEntityRenderer{
 getTexture(entity: Entity): Identifier;
 getTexture(batEntity: BatEntity): Identifier;
}
class Static_BatEntityRenderer {
static TEXTURE: Identifier;
}

//net.minecraft.client.render.entity.TropicalFishEntityRenderer
class TropicalFishEntityRenderer extends MobEntityRenderer{
 render(entity: Entity,yaw: number,tickDelta: number,matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,light: number): void;
 render(livingEntity: LivingEntity,f: number,g: number,matrixStack: MatrixStack,vertexConsumerProvider: VertexConsumerProvider,i: number): void;
 render(mobEntity: MobEntity,f: number,g: number,matrixStack: MatrixStack,vertexConsumerProvider: VertexConsumerProvider,i: number): void;
 render(tropicalFishEntity: TropicalFishEntity,f: number,g: number,matrixStack: MatrixStack,vertexConsumerProvider: VertexConsumerProvider,i: number): void;
 getTexture(entity: Entity): Identifier;
 getTexture(tropicalFishEntity: TropicalFishEntity): Identifier;
}
class Static_TropicalFishEntityRenderer {
static A_TEXTURE: Identifier;
static B_TEXTURE: Identifier;
}

//net.minecraft.client.render.entity.StriderEntityRenderer
class StriderEntityRenderer extends MobEntityRenderer{
 getTexture(entity: Entity): Identifier;
 getTexture(striderEntity: StriderEntity): Identifier;
}
class Static_StriderEntityRenderer {
static TEXTURE: Identifier;
static COLD_TEXTURE: Identifier;
}

//net.minecraft.client.render.entity.OcelotEntityRenderer
class OcelotEntityRenderer extends MobEntityRenderer{
 getTexture(ocelotEntity: OcelotEntity): Identifier;
 getTexture(entity: Entity): Identifier;
}
class Static_OcelotEntityRenderer {
static TEXTURE: Identifier;
}

//net.minecraft.client.render.entity.RavagerEntityRenderer
class RavagerEntityRenderer extends MobEntityRenderer{
 getTexture(ravagerEntity: RavagerEntity): Identifier;
 getTexture(entity: Entity): Identifier;
}
class Static_RavagerEntityRenderer {
static TEXTURE: Identifier;
}

//net.minecraft.client.render.entity.SheepEntityRenderer
class SheepEntityRenderer extends MobEntityRenderer{
 getTexture(sheepEntity: SheepEntity): Identifier;
 getTexture(entity: Entity): Identifier;
}
class Static_SheepEntityRenderer {
static TEXTURE: Identifier;
}

//net.minecraft.client.render.entity.BlazeEntityRenderer
class BlazeEntityRenderer extends MobEntityRenderer{
 getTexture(entity: Entity): Identifier;
 getTexture(blazeEntity: BlazeEntity): Identifier;
}
class Static_BlazeEntityRenderer {
static TEXTURE: Identifier;
}

//net.minecraft.client.render.entity.VillagerEntityRenderer
class VillagerEntityRenderer extends MobEntityRenderer{
 getTexture(villagerEntity: VillagerEntity): Identifier;
 getTexture(entity: Entity): Identifier;
}
class Static_VillagerEntityRenderer {
static TEXTURE: Identifier;
}

//net.minecraft.client.render.entity.AbstractHorseEntityRenderer
class AbstractHorseEntityRenderer extends MobEntityRenderer{
}

//net.minecraft.client.render.entity.PigEntityRenderer
class PigEntityRenderer extends MobEntityRenderer{
 getTexture(pigEntity: PigEntity): Identifier;
 getTexture(entity: Entity): Identifier;
}
class Static_PigEntityRenderer {
static TEXTURE: Identifier;
}

//net.minecraft.client.render.entity.MagmaCubeEntityRenderer
class MagmaCubeEntityRenderer extends MobEntityRenderer{
 render(entity: Entity,yaw: number,tickDelta: number,matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,light: number): void;
 render(livingEntity: LivingEntity,f: number,g: number,matrixStack: MatrixStack,vertexConsumerProvider: VertexConsumerProvider,i: number): void;
 render(magmaCubeEntity: MagmaCubeEntity,f: number,g: number,matrixStack: MatrixStack,vertexConsumerProvider: VertexConsumerProvider,i: number): void;
 render(mobEntity: MobEntity,f: number,g: number,matrixStack: MatrixStack,vertexConsumerProvider: VertexConsumerProvider,i: number): void;
 getTexture(magmaCubeEntity: MagmaCubeEntity): Identifier;
 getTexture(entity: Entity): Identifier;
}
class Static_MagmaCubeEntityRenderer {
static TEXTURE: Identifier;
}

//net.minecraft.client.render.entity.BipedEntityRenderer
class BipedEntityRenderer extends MobEntityRenderer{
}

//net.minecraft.client.render.entity.SnifferEntityRenderer
class SnifferEntityRenderer extends MobEntityRenderer{
 getTexture(snifferEntity: SnifferEntity): Identifier;
 getTexture(entity: Entity): Identifier;
}
class Static_SnifferEntityRenderer {
static TEXTURE: Identifier;
}

//net.minecraft.client.render.entity.GuardianEntityRenderer
class GuardianEntityRenderer extends MobEntityRenderer{
 render(entity: Entity,yaw: number,tickDelta: number,matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,light: number): void;
 render(livingEntity: LivingEntity,f: number,g: number,matrixStack: MatrixStack,vertexConsumerProvider: VertexConsumerProvider,i: number): void;
 render(mobEntity: MobEntity,f: number,g: number,matrixStack: MatrixStack,vertexConsumerProvider: VertexConsumerProvider,i: number): void;
 render(guardianEntity: GuardianEntity,f: number,g: number,matrixStack: MatrixStack,vertexConsumerProvider: VertexConsumerProvider,i: number): void;
 getTexture(entity: Entity): Identifier;
 getTexture(guardianEntity: GuardianEntity): Identifier;
 shouldRender(entity: Entity,frustum: Frustum,x: number,y: number,z: number): boolean;
 shouldRender(mobEntity: MobEntity,frustum: Frustum,d: number,e: number,f: number): boolean;
 shouldRender(guardianEntity: GuardianEntity,frustum: Frustum,d: number,e: number,f: number): boolean;
}
class Static_GuardianEntityRenderer {
static vertex(vertexConsumer: VertexConsumer,positionMatrix: Matrix4f,normalMatrix: Matrix3f,x: number,y: number,z: number,red: number,green: number,blue: number,u: number,v: number): void;
static TEXTURE: Identifier;
static EXPLOSION_BEAM_TEXTURE: Identifier;
static LAYER: RenderLayer;
}

//net.minecraft.client.render.entity.WolfEntityRenderer
class WolfEntityRenderer extends MobEntityRenderer{
 render(entity: Entity,yaw: number,tickDelta: number,matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,light: number): void;
 render(livingEntity: LivingEntity,f: number,g: number,matrixStack: MatrixStack,vertexConsumerProvider: VertexConsumerProvider,i: number): void;
 render(mobEntity: MobEntity,f: number,g: number,matrixStack: MatrixStack,vertexConsumerProvider: VertexConsumerProvider,i: number): void;
 render(wolfEntity: WolfEntity,f: number,g: number,matrixStack: MatrixStack,vertexConsumerProvider: VertexConsumerProvider,i: number): void;
 getTexture(entity: Entity): Identifier;
 getTexture(wolfEntity: WolfEntity): Identifier;
}
class Static_WolfEntityRenderer {
static WILD_TEXTURE: Identifier;
static TAMED_TEXTURE: Identifier;
static ANGRY_TEXTURE: Identifier;
}

//net.minecraft.client.render.entity.DolphinEntityRenderer
class DolphinEntityRenderer extends MobEntityRenderer{
 getTexture(dolphinEntity: DolphinEntity): Identifier;
 getTexture(entity: Entity): Identifier;
}
class Static_DolphinEntityRenderer {
static TEXTURE: Identifier;
}

//net.minecraft.client.render.entity.IllagerEntityRenderer
class IllagerEntityRenderer extends MobEntityRenderer{
}

//net.minecraft.client.render.entity.RabbitEntityRenderer
class RabbitEntityRenderer extends MobEntityRenderer{
 getTexture(rabbitEntity: RabbitEntity): Identifier;
 getTexture(entity: Entity): Identifier;
}
class Static_RabbitEntityRenderer {
static BROWN_TEXTURE: Identifier;
static WHITE_TEXTURE: Identifier;
static BLACK_TEXTURE: Identifier;
static GOLD_TEXTURE: Identifier;
static SALT_TEXTURE: Identifier;
static WHITE_SPLOTCHED_TEXTURE: Identifier;
static TOAST_TEXTURE: Identifier;
static CAERBANNOG_TEXTURE: Identifier;
}

//net.minecraft.client.render.entity.EndermanEntityRenderer
class EndermanEntityRenderer extends MobEntityRenderer{
 render(endermanEntity: EndermanEntity,f: number,g: number,matrixStack: MatrixStack,vertexConsumerProvider: VertexConsumerProvider,i: number): void;
 render(mobEntity: MobEntity,f: number,g: number,matrixStack: MatrixStack,vertexConsumerProvider: VertexConsumerProvider,i: number): void;
 render(entity: Entity,yaw: number,tickDelta: number,matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,light: number): void;
 render(livingEntity: LivingEntity,f: number,g: number,matrixStack: MatrixStack,vertexConsumerProvider: VertexConsumerProvider,i: number): void;
 getTexture(entity: Entity): Identifier;
 getTexture(endermanEntity: EndermanEntity): Identifier;
 getPositionOffset(entity: Entity,tickDelta: number): Vec3d;
 getPositionOffset(endermanEntity: EndermanEntity,f: number): Vec3d;
}
class Static_EndermanEntityRenderer {
static TEXTURE: Identifier;
}

//net.minecraft.client.render.entity.WitchEntityRenderer
class WitchEntityRenderer extends MobEntityRenderer{
 render(livingEntity: LivingEntity,f: number,g: number,matrixStack: MatrixStack,vertexConsumerProvider: VertexConsumerProvider,i: number): void;
 render(entity: Entity,yaw: number,tickDelta: number,matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,light: number): void;
 render(mobEntity: MobEntity,f: number,g: number,matrixStack: MatrixStack,vertexConsumerProvider: VertexConsumerProvider,i: number): void;
 render(witchEntity: WitchEntity,f: number,g: number,matrixStack: MatrixStack,vertexConsumerProvider: VertexConsumerProvider,i: number): void;
 getTexture(entity: Entity): Identifier;
 getTexture(witchEntity: WitchEntity): Identifier;
}
class Static_WitchEntityRenderer {
static TEXTURE: Identifier;
}

//net.minecraft.client.render.entity.CodEntityRenderer
class CodEntityRenderer extends MobEntityRenderer{
 getTexture(entity: Entity): Identifier;
 getTexture(codEntity: CodEntity): Identifier;
}
class Static_CodEntityRenderer {
static TEXTURE: Identifier;
}

//net.minecraft.client.render.entity.AllayEntityRenderer
class AllayEntityRenderer extends MobEntityRenderer{
 getTexture(entity: Entity): Identifier;
 getTexture(allayEntity: AllayEntity): Identifier;
}
class Static_AllayEntityRenderer {
static TEXTURE: Identifier;
}

//net.minecraft.client.render.entity.VexEntityRenderer
class VexEntityRenderer extends MobEntityRenderer{
 getTexture(entity: Entity): Identifier;
 getTexture(vexEntity: VexEntity): Identifier;
}
class Static_VexEntityRenderer {
static TEXTURE: Identifier;
static CHARGING_TEXTURE: Identifier;
}

//net.minecraft.data.server.tag.vanilla.VanillaItemTagProvider
class VanillaItemTagProvider extends ItemTagProvider{
}

//net.minecraft.test.TestContext$3


//net.minecraft.client.network.OtherClientPlayerEntity
class OtherClientPlayerEntity extends AbstractClientPlayerEntity{
 tick(): void;
 setVelocityClient(x: number,y: number,z: number): void;
 sendMessage(message: Text): void;
 damage(source: DamageSource,amount: number): boolean;
 shouldRender(distance: number): boolean;
 tickMovement(): void;
}

//net.minecraft.client.network.ClientPlayerEntity
class ClientPlayerEntity extends AbstractClientPlayerEntity{
 init(): void;
 move(movementType: MovementType,movement: Vec3d): void;
 tick(): void;
 heal(amount: number): void;
 getActiveHand(): Hand;
 isUsingItem(): boolean;
 isRiding(): boolean;
 openCommandBlockMinecartScreen(commandBlockExecutor: CommandBlockExecutor): void;
 getLeashPos(delta: number): Vec3d;
 getBodyYaw(): number;
 isMainPlayer(): boolean;
 startRiding(entity: Entity,force: boolean): boolean;
 updateHealth(health: number): void;
 handleStatus(status: byte): void;
 setServerBrand(serverBrand: string): void;
 closeHandledScreen(): void;
 showsDeathScreen(): boolean;
 getServerBrand(): string;
 setExperience(progress: number,total: number,level: number): void;
 closeScreen(): void;
 openEditSignScreen(sign: SignBlockEntity,front: boolean): void;
 requestRespawn(): void;
 onGameModeChanged(gameMode: GameMode): void;
 getMoodPercentage(): number;
 getUnderwaterVisibility(): number;
 isSneaking(): boolean;
 getRecipeBook(): ClientRecipeBook;
 onRecipeDisplayed(recipe: Recipe): void;
 sendMessage(message: Text): void;
 sendMessage(message: Text,overlay: boolean): void;
 shouldFilterText(): boolean;
 clearActiveItem(): void;
 dropSelectedItem(entireStack: boolean): boolean;
 swingHand(hand: Hand): void;
 getStatHandler(): StatHandler;
 damage(source: DamageSource,amount: number): boolean;
 getJumpingMount(): JumpingMount;
 onPickupSlotClick(cursorStack: ItemStack,slotStack: ItemStack,clickType: ClickType): void;
 getMountJumpStrength(): number;
 setShowsDeathScreen(showsDeathScreen: boolean): void;
 removeStatusEffectInternal(type: StatusEffect): StatusEffectInstance;
 shouldSpawnSprintingParticles(): boolean;
 playSound(sound: SoundEvent,volume: number,pitch: number): void;
 playSound(event: SoundEvent,category: SoundCategory,volume: number,pitch: number): void;
 getPitch(tickDelta: number): number;
 getYaw(tickDelta: number): number;
 canMoveVoluntarily(): boolean;
 isInSneakingPose(): boolean;
 isSubmergedInWater(): boolean;
 tickRiding(): void;
 dismountVehicle(): void;
 onTrackedDataSet(data: TrackedData): void;
 setCurrentHand(hand: Hand): void;
 openJigsawScreen(jigsaw: JigsawBlockEntity): void;
 isAutoJumpEnabled(): boolean;
 shouldSlowDown(): boolean;
 sendAbilitiesUpdate(): void;
 isHoldingOntoLadder(): boolean;
 shouldDisplaySoulSpeedEffects(): boolean;
 openCommandBlockScreen(commandBlock: CommandBlockBlockEntity): void;
 tickMovement(): void;
 tickNewAi(): void;
 useBook(book: ItemStack,hand: Hand): void;
 openStructureBlockScreen(structureBlock: StructureBlockBlockEntity): void;
 setClientPermissionLevel(clientPermissionLevel: number): void;
 addEnchantedHitParticles(target: Entity): void;
 openRidingInventory(): void;
 addCritParticles(target: Entity): void;
 networkHandler: ClientPlayNetworkHandler;
 input: Input;
 renderYaw: number;
 renderPitch: number;
 lastRenderYaw: number;
 lastRenderPitch: number;
 nauseaIntensity: number;
 prevNauseaIntensity: number;
}
class Static_ClientPlayerEntity {
static method_3139(shape: VoxelShape): Stream;
static LOGGER: Logger;
static field_32671: number;
static field_32672: number;
static field_32673: number;
static field_32674: number;
static field_32675: number;
static MAX_SOFT_COLLISION_RADIANS: number;
static field_38337: number;
}

//net.minecraft.client.gui.screen.world.EditGameRulesScreen$IntRuleWidget
class EditGameRulesScreen_IntRuleWidget extends EditGameRulesScreen_NamedRuleWidget{
 render(context: DrawContext,index: number,y: number,x: number,entryWidth: number,entryHeight: number,mouseX: number,mouseY: number,hovered: boolean,tickDelta: number): void;
}

//net.minecraft.client.gui.screen.world.EditGameRulesScreen$BooleanRuleWidget
class EditGameRulesScreen_BooleanRuleWidget extends EditGameRulesScreen_NamedRuleWidget{
 render(context: DrawContext,index: number,y: number,x: number,entryWidth: number,entryHeight: number,mouseX: number,mouseY: number,hovered: boolean,tickDelta: number): void;
}
class Static_EditGameRulesScreen_BooleanRuleWidget {
static method_32675(string: string,button: CyclingButtonWidget): MutableText;
static method_32674(booleanRule: GameRules_BooleanRule,button: CyclingButtonWidget,value: Boolean): void;
}

//net.minecraft.client.render.entity.model.DrownedEntityModel
class DrownedEntityModel extends ZombieEntityModel{
 animateModel(livingEntity: LivingEntity,f: number,g: number,h: number): void;
 animateModel(entity: Entity,limbAngle: number,limbDistance: number,tickDelta: number): void;
 animateModel(zombieEntity: ZombieEntity,f: number,g: number,h: number): void;
 setAngles(entity: Entity,limbAngle: number,limbDistance: number,animationProgress: number,headYaw: number,headPitch: number): void;
 setAngles(livingEntity: LivingEntity,f: number,g: number,h: number,i: number,j: number): void;
 setAngles(hostileEntity: HostileEntity,f: number,g: number,h: number,i: number,j: number): void;
 setAngles(zombieEntity: ZombieEntity,f: number,g: number,h: number,i: number,j: number): void;
}
class Static_DrownedEntityModel {
static getTexturedModelData(dilation: Dilation): TexturedModelData;
}

//net.minecraft.block.CoralWallFanBlock
class CoralWallFanBlock extends DeadCoralWallFanBlock{
 getStateForNeighborUpdate(state: BlockState,direction: Direction,neighborState: BlockState,world: WorldAccess,pos: BlockPos,neighborPos: BlockPos): BlockState;
 onBlockAdded(state: BlockState,world: World,pos: BlockPos,oldState: BlockState,notify: boolean): void;
 scheduledTick(state: BlockState,world: ServerWorld,pos: BlockPos,random: Random): void;
}

//net.minecraft.block.MyceliumBlock
class MyceliumBlock extends SpreadableBlock{
 randomDisplayTick(state: BlockState,world: World,pos: BlockPos,random: Random): void;
}

//net.minecraft.block.WallRedstoneTorchBlock
class WallRedstoneTorchBlock extends RedstoneTorchBlock{
 rotate(state: BlockState,rotation: BlockRotation): BlockState;
 getStateForNeighborUpdate(state: BlockState,direction: Direction,neighborState: BlockState,world: WorldAccess,pos: BlockPos,neighborPos: BlockPos): BlockState;
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 canPlaceAt(state: BlockState,world: WorldView,pos: BlockPos): boolean;
 randomDisplayTick(state: BlockState,world: World,pos: BlockPos,random: Random): void;
 mirror(state: BlockState,mirror: BlockMirror): BlockState;
 getWeakRedstonePower(state: BlockState,world: BlockView,pos: BlockPos,direction: Direction): number;
 getTranslationKey(): string;
 getPlacementState(ctx: ItemPlacementContext): BlockState;
}
class Static_WallRedstoneTorchBlock {
static FACING: DirectionProperty;
static LIT: BooleanProperty;
}

//net.minecraft.block.GrindstoneBlock
class GrindstoneBlock extends WallMountedBlock{
 rotate(state: BlockState,rotation: BlockRotation): BlockState;
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 canPlaceAt(state: BlockState,world: WorldView,pos: BlockPos): boolean;
 canPathfindThrough(state: BlockState,world: BlockView,pos: BlockPos,type: NavigationType): boolean;
 mirror(state: BlockState,mirror: BlockMirror): BlockState;
 createScreenHandlerFactory(state: BlockState,world: World,pos: BlockPos): NamedScreenHandlerFactory;
 onUse(state: BlockState,world: World,pos: BlockPos,player: PlayerEntity,hand: Hand,hit: BlockHitResult): ActionResult;
 getCollisionShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 getRenderType(state: BlockState): BlockRenderType;
}
class Static_GrindstoneBlock {
static method_17469(world: World,blockPos: BlockPos,syncId: number,inventory: PlayerInventory,player: PlayerEntity): ScreenHandler;
static WEST_FLOOR_LEG: VoxelShape;
static EAST_FLOOR_LEG: VoxelShape;
static WEST_FLOOR_HINGE: VoxelShape;
static EAST_FLOOR_HINGE: VoxelShape;
static WEST_FLOOR_SIDE: VoxelShape;
static EAST_FLOOR_SIDE: VoxelShape;
static Z_FLOOR_SIDES: VoxelShape;
static Z_FLOOR_SHAPE: VoxelShape;
static NORTH_FLOOR_LEG: VoxelShape;
static SOUTH_FLOOR_LEG: VoxelShape;
static NORTH_FLOOR_HINGE: VoxelShape;
static SOUTH_FLOOR_HINGE: VoxelShape;
static NORTH_FLOOR_SIDE: VoxelShape;
static SOUTH_FLOOR_SIDE: VoxelShape;
static X_FLOOR_SIDES: VoxelShape;
static X_FLOOR_SHAPE: VoxelShape;
static SOUTH_WALL_WEST_LEG: VoxelShape;
static SOUTH_WALL_EAST_LEG: VoxelShape;
static SOUTH_WALL_WEST_HINGE: VoxelShape;
static SOUTH_WALL_EAST_HINGE: VoxelShape;
static SOUTH_WALL_WEST_SIDE: VoxelShape;
static SOUTH_WALL_EAST_SIDE: VoxelShape;
static SOUTH_WALL_SIDES: VoxelShape;
static SOUTH_WALL_SHAPE: VoxelShape;
static NORTH_WALL_WEST_LEG: VoxelShape;
static NORTH_WALL_EAST_LEG: VoxelShape;
static NORTH_WALL_WEST_HINGE: VoxelShape;
static NORTH_WALL_EAST_HINGE: VoxelShape;
static NORTH_WALL_WEST_SIDE: VoxelShape;
static NORTH_WALL_EAST_SIDE: VoxelShape;
static NORTH_WALL_SIDES: VoxelShape;
static NORTH_WALL_SHAPE: VoxelShape;
static WEST_WALL_NORTH_LEG: VoxelShape;
static WEST_WALL_SOUTH_LEG: VoxelShape;
static WEST_WALL_NORTH_HINGE: VoxelShape;
static WEST_WALL_SOUTH_HINGE: VoxelShape;
static WEST_WALL_NORTH_SIDE: VoxelShape;
static WEST_WALL_SOUTH_SIDE: VoxelShape;
static WEST_WALL_SIDES: VoxelShape;
static WEST_WALL_SHAPE: VoxelShape;
static EAST_WALL_NORTH_LEG: VoxelShape;
static EAST_WALL_SOUTH_LEG: VoxelShape;
static EAST_WALL_NORTH_HINGE: VoxelShape;
static EAST_WALL_SOUTH_HINGE: VoxelShape;
static EAST_WALL_NORTH_SIDE: VoxelShape;
static EAST_WALL_SOUTH_SIDE: VoxelShape;
static EAST_WALL_SIDES: VoxelShape;
static EAST_WALL_SHAPE: VoxelShape;
static WEST_CEILING_LEG: VoxelShape;
static EAST_CEILING_LEG: VoxelShape;
static WEST_CEILING_HINGE: VoxelShape;
static EAST_CEILING_HINGE: VoxelShape;
static WEST_CEILING_SIDE: VoxelShape;
static EAST_CEILING_SIDE: VoxelShape;
static Z_CEILING_SIDES: VoxelShape;
static Z_CEILING_SHAPE: VoxelShape;
static NORTH_CEILING_LEG: VoxelShape;
static SOUTH_CEILING_LEG: VoxelShape;
static NORTH_CEILING_HINGE: VoxelShape;
static SOUTH_CEILING_HINGE: VoxelShape;
static NORTH_CEILING_SIDE: VoxelShape;
static SOUTH_CEILING_SIDE: VoxelShape;
static X_CEILING_SIDES: VoxelShape;
static X_CEILING_SHAPE: VoxelShape;
static TITLE: Text;
}

//net.minecraft.block.ButtonBlock
class ButtonBlock extends WallMountedBlock{
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 getStrongRedstonePower(state: BlockState,world: BlockView,pos: BlockPos,direction: Direction): number;
 emitsRedstonePower(state: BlockState): boolean;
 onStateReplaced(state: BlockState,world: World,pos: BlockPos,newState: BlockState,moved: boolean): void;
 onEntityCollision(state: BlockState,world: World,pos: BlockPos,entity: Entity): void;
 scheduledTick(state: BlockState,world: ServerWorld,pos: BlockPos,random: Random): void;
 getWeakRedstonePower(state: BlockState,world: BlockView,pos: BlockPos,direction: Direction): number;
 onUse(state: BlockState,world: World,pos: BlockPos,player: PlayerEntity,hand: Hand,hit: BlockHitResult): ActionResult;
 powerOn(state: BlockState,world: World,pos: BlockPos): void;
}
class Static_ButtonBlock {
static POWERED: BooleanProperty;
static field_31040: number;
static field_31041: number;
static field_31042: number;
static field_31043: number;
static CEILING_X_SHAPE: VoxelShape;
static CEILING_Z_SHAPE: VoxelShape;
static FLOOR_X_SHAPE: VoxelShape;
static FLOOR_Z_SHAPE: VoxelShape;
static NORTH_SHAPE: VoxelShape;
static SOUTH_SHAPE: VoxelShape;
static WEST_SHAPE: VoxelShape;
static EAST_SHAPE: VoxelShape;
static CEILING_X_PRESSED_SHAPE: VoxelShape;
static CEILING_Z_PRESSED_SHAPE: VoxelShape;
static FLOOR_X_PRESSED_SHAPE: VoxelShape;
static FLOOR_Z_PRESSED_SHAPE: VoxelShape;
static NORTH_PRESSED_SHAPE: VoxelShape;
static SOUTH_PRESSED_SHAPE: VoxelShape;
static WEST_PRESSED_SHAPE: VoxelShape;
static EAST_PRESSED_SHAPE: VoxelShape;
}

//net.minecraft.block.LeverBlock
class LeverBlock extends WallMountedBlock{
 getOutlineShape(state: BlockState,world: BlockView,pos: BlockPos,context: ShapeContext): VoxelShape;
 getStrongRedstonePower(state: BlockState,world: BlockView,pos: BlockPos,direction: Direction): number;
 randomDisplayTick(state: BlockState,world: World,pos: BlockPos,random: Random): void;
 emitsRedstonePower(state: BlockState): boolean;
 onStateReplaced(state: BlockState,world: World,pos: BlockPos,newState: BlockState,moved: boolean): void;
 getWeakRedstonePower(state: BlockState,world: BlockView,pos: BlockPos,direction: Direction): number;
 onUse(state: BlockState,world: World,pos: BlockPos,player: PlayerEntity,hand: Hand,hit: BlockHitResult): ActionResult;
 togglePower(state: BlockState,world: World,pos: BlockPos): BlockState;
}
class Static_LeverBlock {
static spawnParticles(state: BlockState,world: WorldAccess,pos: BlockPos,alpha: number): void;
static POWERED: BooleanProperty;
static field_31184: number;
static field_31185: number;
static field_31186: number;
static NORTH_WALL_SHAPE: VoxelShape;
static SOUTH_WALL_SHAPE: VoxelShape;
static WEST_WALL_SHAPE: VoxelShape;
static EAST_WALL_SHAPE: VoxelShape;
static FLOOR_Z_AXIS_SHAPE: VoxelShape;
static FLOOR_X_AXIS_SHAPE: VoxelShape;
static CEILING_Z_AXIS_SHAPE: VoxelShape;
static CEILING_X_AXIS_SHAPE: VoxelShape;
}

//net.minecraft.block.RepeaterBlock
class RepeaterBlock extends AbstractRedstoneGateBlock{
 isLocked(world: WorldView,pos: BlockPos,state: BlockState): boolean;
 getStateForNeighborUpdate(state: BlockState,direction: Direction,neighborState: BlockState,world: WorldAccess,pos: BlockPos,neighborPos: BlockPos): BlockState;
 randomDisplayTick(state: BlockState,world: World,pos: BlockPos,random: Random): void;
 onUse(state: BlockState,world: World,pos: BlockPos,player: PlayerEntity,hand: Hand,hit: BlockHitResult): ActionResult;
 getPlacementState(ctx: ItemPlacementContext): BlockState;
}
class Static_RepeaterBlock {
static LOCKED: BooleanProperty;
static DELAY: IntProperty;
}

//net.minecraft.block.FrostedIceBlock
class FrostedIceBlock extends IceBlock{
 scheduledTick(state: BlockState,world: ServerWorld,pos: BlockPos,random: Random): void;
 randomTick(state: BlockState,world: ServerWorld,pos: BlockPos,random: Random): void;
 neighborUpdate(state: BlockState,world: World,pos: BlockPos,sourceBlock: Block,sourcePos: BlockPos,notify: boolean): void;
 getPickStack(world: BlockView,pos: BlockPos,state: BlockState): ItemStack;
}
class Static_FrostedIceBlock {
static MAX_AGE: number;
static AGE: IntProperty;
static NEIGHBORS_CHECKED_ON_SCHEDULED_TICK: number;
static NEIGHBORS_CHECKED_ON_NEIGHBOR_UPDATE: number;
}

//net.minecraft.block.GlassBlock
class GlassBlock extends AbstractGlassBlock{
}

//net.minecraft.block.TintedGlassBlock
class TintedGlassBlock extends AbstractGlassBlock{
 isTransparent(state: BlockState,world: BlockView,pos: BlockPos): boolean;
 getOpacity(state: BlockState,world: BlockView,pos: BlockPos): number;
}

//net.minecraft.block.EndRodBlock
class EndRodBlock extends RodBlock{
 randomDisplayTick(state: BlockState,world: World,pos: BlockPos,random: Random): void;
 getPlacementState(ctx: ItemPlacementContext): BlockState;
}

//net.minecraft.block.PowderSnowCauldronBlock
class PowderSnowCauldronBlock extends LeveledCauldronBlock{
}

//net.minecraft.block.entity.DropperBlockEntity
class DropperBlockEntity extends DispenserBlockEntity{
}

//net.minecraft.client.realms.gui.screen.RealmsBackupScreen$BackupObjectSelectionList
class RealmsBackupScreen_BackupObjectSelectionList extends RealmsObjectSelectionList{
 addEntry(backup: Backup): void;
 getRowWidth(): number;
 setSelected(entry: EntryListWidget_Entry): void;
 setSelected(index: number): void;
 setSelected(backupObjectSelectionListEntry: RealmsBackupScreen_BackupObjectSelectionListEntry): void;
 selectInviteListItem(item: number): void;
 getMaxPosition(): number;
 getScrollbarPositionX(): number;
 renderBackground(context: DrawContext): void;
}

//net.minecraft.client.realms.gui.screen.RealmsPendingInvitesScreen$PendingInvitationSelectionList
class RealmsPendingInvitesScreen_PendingInvitationSelectionList extends RealmsObjectSelectionList{
 getRowWidth(): number;
 setSelected(entry: EntryListWidget_Entry): void;
 setSelected(index: number): void;
 setSelected(pendingInvitationSelectionListEntry: RealmsPendingInvitesScreen_PendingInvitationSelectionListEntry): void;
 removeAtIndex(index: number): void;
 selectInviteListItem(item: number): void;
 getMaxPosition(): number;
 renderBackground(context: DrawContext): void;
}

//net.minecraft.client.realms.gui.screen.RealmsMainScreen$RealmSelectionList
class RealmsMainScreen_RealmSelectionList extends RealmsObjectSelectionList{
 getRowWidth(): number;
 setSelected(entry: EntryListWidget_Entry): void;
 setSelected(entry: RealmsMainScreen_Entry): void;
 getMaxPosition(): number;
}

//net.minecraft.client.realms.gui.screen.RealmsPlayerScreen$InvitedObjectSelectionList
class RealmsPlayerScreen_InvitedObjectSelectionList extends RealmsObjectSelectionList{
 addEntry(playerInfo: PlayerInfo): void;
 getRowWidth(): number;
 setSelected(invitedObjectSelectionListEntry: RealmsPlayerScreen_InvitedObjectSelectionListEntry): void;
 setSelected(entry: EntryListWidget_Entry): void;
 setSelected(index: number): void;
 updateButtonStates(): void;
 selectInviteListItem(item: number): void;
 getMaxPosition(): number;
 getScrollbarPositionX(): number;
 renderBackground(context: DrawContext): void;
}

//net.minecraft.client.realms.gui.screen.RealmsSelectWorldTemplateScreen$WorldTemplateObjectSelectionList
class RealmsSelectWorldTemplateScreen_WorldTemplateObjectSelectionList extends RealmsObjectSelectionList{
 isEmpty(): boolean;
 addEntry(template: WorldTemplate): void;
 getItem(index: number): WorldTemplate;
 getRowWidth(): number;
 setSelected(worldTemplateObjectSelectionListEntry: RealmsSelectWorldTemplateScreen_WorldTemplateObjectSelectionListEntry): void;
 setSelected(entry: EntryListWidget_Entry): void;
 getValues(): List;
 mouseClicked(mouseX: number,mouseY: number,button: number): boolean;
 getMaxPosition(): number;
 renderBackground(context: DrawContext): void;
}
class Static_RealmsSelectWorldTemplateScreen_WorldTemplateObjectSelectionList {
static method_25250(child: RealmsSelectWorldTemplateScreen_WorldTemplateObjectSelectionListEntry): WorldTemplate;
}

//net.minecraft.client.realms.gui.screen.RealmsSelectFileToUploadScreen$WorldSelectionList
class RealmsSelectFileToUploadScreen_WorldSelectionList extends RealmsObjectSelectionList{
 addEntry(summary: LevelSummary): void;
 setSelected(entry: EntryListWidget_Entry): void;
 setSelected(worldListEntry: RealmsSelectFileToUploadScreen_WorldListEntry): void;
 getMaxPosition(): number;
 renderBackground(context: DrawContext): void;
}

//net.minecraft.client.gui.screen.option.OnlineOptionsScreen
class OnlineOptionsScreen extends SimpleOptionsScreen{
}
class Static_OnlineOptionsScreen {
static create(client: MinecraftClient,parent: Screen,gameOptions: GameOptions): OnlineOptionsScreen;
static method_47620(unit: Unit): void;
static method_47619(difficulty: Difficulty,optionText: Text,unit: Unit): Text;
static method_47622(world: ClientWorld): SimpleOption;
}

//net.minecraft.client.gui.screen.option.AccessibilityOptionsScreen
class AccessibilityOptionsScreen extends SimpleOptionsScreen{
}
class Static_AccessibilityOptionsScreen {
static getOptions(gameOptions: GameOptions): SimpleOption[];
}

//net.minecraft.client.gui.screen.option.ChatOptionsScreen
class ChatOptionsScreen extends SimpleOptionsScreen{
}

//net.minecraft.client.realms.gui.screen.RealmsMainScreen$CloseButton
class RealmsMainScreen_CloseButton extends RealmsMainScreen_CrossButton{
}
class Static_RealmsMainScreen_CloseButton {
static method_25021(realmsMainScreen: RealmsMainScreen,button: ButtonWidget): void;
}

//net.minecraft.client.realms.gui.screen.RealmsMainScreen$PendingInvitesButton
class RealmsMainScreen_PendingInvitesButton extends TexturedButtonWidget{
 updatePendingText(): void;
 renderButton(context: DrawContext,mouseX: number,mouseY: number,delta: number): void;
}
class Static_RealmsMainScreen_PendingInvitesButton {
static method_51236(realmsMainScreen: RealmsMainScreen,button: ButtonWidget): void;
static INVITES_TITLE: Text;
static NO_PENDING_TEXT: Tooltip;
static PENDING_TEXT: Tooltip;
static field_44519: number;
static field_44520: number;
static field_44521: number;
static field_44522: number;
static field_44523: number;
static field_44524: number;
}

//net.minecraft.client.gui.screen.multiplayer.SocialInteractionsPlayerListEntry$3


//net.minecraft.client.gui.screen.multiplayer.SocialInteractionsPlayerListEntry$2


//net.minecraft.client.gui.screen.multiplayer.SocialInteractionsPlayerListEntry$1


//net.minecraft.item.HangingSignItem
class HangingSignItem extends SignItem{
}

//net.minecraft.client.render.entity.model.PandaEntityModel
class PandaEntityModel extends QuadrupedEntityModel{
 animateModel(entity: Entity,limbAngle: number,limbDistance: number,tickDelta: number): void;
 animateModel(pandaEntity: PandaEntity,f: number,g: number,h: number): void;
 setAngles(entity: Entity,limbAngle: number,limbDistance: number,animationProgress: number,headYaw: number,headPitch: number): void;
 setAngles(pandaEntity: PandaEntity,f: number,g: number,h: number,i: number,j: number): void;
}
class Static_PandaEntityModel {
static getTexturedModelData(): TexturedModelData;
}

//net.minecraft.client.render.entity.model.PolarBearEntityModel
class PolarBearEntityModel extends QuadrupedEntityModel{
 setAngles(entity: Entity,limbAngle: number,limbDistance: number,animationProgress: number,headYaw: number,headPitch: number): void;
 setAngles(polarBearEntity: PolarBearEntity,f: number,g: number,h: number,i: number,j: number): void;
}
class Static_PolarBearEntityModel {
static getTexturedModelData(): TexturedModelData;
}

//net.minecraft.client.render.entity.model.SheepWoolEntityModel
class SheepWoolEntityModel extends QuadrupedEntityModel{
 animateModel(entity: Entity,limbAngle: number,limbDistance: number,tickDelta: number): void;
 animateModel(sheepEntity: SheepEntity,f: number,g: number,h: number): void;
 setAngles(entity: Entity,limbAngle: number,limbDistance: number,animationProgress: number,headYaw: number,headPitch: number): void;
 setAngles(sheepEntity: SheepEntity,f: number,g: number,h: number,i: number,j: number): void;
}
class Static_SheepWoolEntityModel {
static getTexturedModelData(): TexturedModelData;
}

//net.minecraft.client.render.entity.model.TurtleEntityModel
class TurtleEntityModel extends QuadrupedEntityModel{
 render(matrices: MatrixStack,vertices: VertexConsumer,light: number,overlay: number,red: number,green: number,blue: number,alpha: number): void;
 setAngles(entity: Entity,limbAngle: number,limbDistance: number,animationProgress: number,headYaw: number,headPitch: number): void;
 setAngles(turtleEntity: TurtleEntity,f: number,g: number,h: number,i: number,j: number): void;
}
class Static_TurtleEntityModel {
static getTexturedModelData(): TexturedModelData;
static EGG_BELLY: string;
}

//net.minecraft.client.render.entity.model.CowEntityModel
class CowEntityModel extends QuadrupedEntityModel{
 getHead(): ModelPart;
}
class Static_CowEntityModel {
static getTexturedModelData(): TexturedModelData;
}

//net.minecraft.client.render.entity.model.GoatEntityModel
class GoatEntityModel extends QuadrupedEntityModel{
 setAngles(entity: Entity,limbAngle: number,limbDistance: number,animationProgress: number,headYaw: number,headPitch: number): void;
 setAngles(goatEntity: GoatEntity,f: number,g: number,h: number,i: number,j: number): void;
}
class Static_GoatEntityModel {
static getTexturedModelData(): TexturedModelData;
}

//net.minecraft.client.render.entity.model.SheepEntityModel
class SheepEntityModel extends QuadrupedEntityModel{
 animateModel(entity: Entity,limbAngle: number,limbDistance: number,tickDelta: number): void;
 animateModel(sheepEntity: SheepEntity,f: number,g: number,h: number): void;
 setAngles(entity: Entity,limbAngle: number,limbDistance: number,animationProgress: number,headYaw: number,headPitch: number): void;
 setAngles(sheepEntity: SheepEntity,f: number,g: number,h: number,i: number,j: number): void;
}
class Static_SheepEntityModel {
static getTexturedModelData(): TexturedModelData;
}

//net.minecraft.client.render.entity.model.PigEntityModel
class PigEntityModel extends QuadrupedEntityModel{
}
class Static_PigEntityModel {
static getTexturedModelData(dilation: Dilation): TexturedModelData;
}

//net.minecraft.client.render.entity.model.DonkeyEntityModel
class DonkeyEntityModel extends HorseEntityModel{
 setAngles(entity: Entity,limbAngle: number,limbDistance: number,animationProgress: number,headYaw: number,headPitch: number): void;
 setAngles(abstractHorseEntity: AbstractHorseEntity,f: number,g: number,h: number,i: number,j: number): void;
 setAngles(abstractDonkeyEntity: AbstractDonkeyEntity,f: number,g: number,h: number,i: number,j: number): void;
}
class Static_DonkeyEntityModel {
static getTexturedModelData(): TexturedModelData;
}

//net.minecraft.client.render.entity.model.WolfEntityModel
class WolfEntityModel extends TintableAnimalModel{
 animateModel(entity: Entity,limbAngle: number,limbDistance: number,tickDelta: number): void;
 animateModel(wolfEntity: WolfEntity,f: number,g: number,h: number): void;
 setAngles(entity: Entity,limbAngle: number,limbDistance: number,animationProgress: number,headYaw: number,headPitch: number): void;
 setAngles(wolfEntity: WolfEntity,f: number,g: number,h: number,i: number,j: number): void;
}
class Static_WolfEntityModel {
static getTexturedModelData(): TexturedModelData;
static REAL_HEAD: string;
static UPPER_BODY: string;
static REAL_TAIL: string;
static field_32580: number;
}

//net.minecraft.client.render.entity.model.CatEntityModel
class CatEntityModel extends OcelotEntityModel{
 animateModel(entity: Entity,limbAngle: number,limbDistance: number,tickDelta: number): void;
 animateModel(catEntity: CatEntity,f: number,g: number,h: number): void;
 setAngles(entity: Entity,limbAngle: number,limbDistance: number,animationProgress: number,headYaw: number,headPitch: number): void;
 setAngles(catEntity: CatEntity,f: number,g: number,h: number,i: number,j: number): void;
}

//net.minecraft.client.render.entity.model.SnifferEntityModel
class SnifferEntityModel extends SinglePartEntityModelWithChildTransform{
 setAngles(entity: Entity,limbAngle: number,limbDistance: number,animationProgress: number,headYaw: number,headPitch: number): void;
 setAngles(snifferEntity: SnifferEntity,f: number,g: number,h: number,i: number,j: number): void;
 getPart(): ModelPart;
}
class Static_SnifferEntityModel {
static getTexturedModelData(): TexturedModelData;
static LIMB_ANGLE_SCALE: number;
static LIMB_DISTANCE_SCALE: number;
}

//net.minecraft.client.render.entity.model.SmallTropicalFishEntityModel
class SmallTropicalFishEntityModel extends TintableCompositeModel{
 setAngles(entity: Entity,limbAngle: number,limbDistance: number,animationProgress: number,headYaw: number,headPitch: number): void;
 getPart(): ModelPart;
}
class Static_SmallTropicalFishEntityModel {
static getTexturedModelData(dilation: Dilation): TexturedModelData;
}

//net.minecraft.client.render.entity.model.LargeTropicalFishEntityModel
class LargeTropicalFishEntityModel extends TintableCompositeModel{
 setAngles(entity: Entity,limbAngle: number,limbDistance: number,animationProgress: number,headYaw: number,headPitch: number): void;
 getPart(): ModelPart;
}
class Static_LargeTropicalFishEntityModel {
static getTexturedModelData(dilation: Dilation): TexturedModelData;
}

//net.minecraft.client.render.entity.model.ChestRaftEntityModel
class ChestRaftEntityModel extends RaftEntityModel{
}
class Static_ChestRaftEntityModel {
static getTexturedModelData(): TexturedModelData;
static CHEST_BOTTOM: string;
static CHEST_LID: string;
static CHEST_LOCK: string;
}

//net.minecraft.client.particle.WaterSuspendParticle$SporeBlossomAirFactory$1


//net.minecraft.client.particle.SonicBoomParticle
class SonicBoomParticle extends ExplosionLargeParticle{
}

//net.minecraft.client.particle.FireworksSparkParticle$Explosion
class FireworksSparkParticle_Explosion extends AnimatedParticle{
 tick(): void;
 buildGeometry(vertexConsumer: VertexConsumer,camera: Camera,tickDelta: number): void;
 setFlicker(flicker: boolean): void;
 setTrail(trail: boolean): void;
}

//net.minecraft.client.particle.EndRodParticle
class EndRodParticle extends AnimatedParticle{
 move(dx: number,dy: number,dz: number): void;
}

//net.minecraft.client.particle.SquidInkParticle
class SquidInkParticle extends AnimatedParticle{
 tick(): void;
}

//net.minecraft.client.particle.TotemParticle
class TotemParticle extends AnimatedParticle{
}

//net.minecraft.client.particle.FireSmokeParticle
class FireSmokeParticle extends AscendingParticle{
}

//net.minecraft.client.particle.WhiteAshParticle
class WhiteAshParticle extends AscendingParticle{
}
class Static_WhiteAshParticle {
static COLOR: number;
}

//net.minecraft.client.particle.AshParticle
class AshParticle extends AscendingParticle{
}

//net.minecraft.client.particle.ReversePortalParticle
class ReversePortalParticle extends PortalParticle{
 getSize(tickDelta: number): number;
 tick(): void;
}

//net.minecraft.client.particle.SoulParticle
class SoulParticle extends AbstractSlowingParticle{
 getType(): ParticleTextureSheet;
 tick(): void;
 getBrightness(tint: number): number;
}

//net.minecraft.client.particle.FlameParticle
class FlameParticle extends AbstractSlowingParticle{
 getType(): ParticleTextureSheet;
 getSize(tickDelta: number): number;
 move(dx: number,dy: number,dz: number): void;
 getBrightness(tint: number): number;
}

//net.minecraft.client.particle.RedDustParticle
class RedDustParticle extends AbstractDustParticle{
}

//net.minecraft.client.particle.DustColorTransitionParticle
class DustColorTransitionParticle extends AbstractDustParticle{
 buildGeometry(vertexConsumer: VertexConsumer,camera: Camera,tickDelta: number): void;
}

//net.minecraft.client.particle.SpitParticle
class SpitParticle extends ExplosionSmokeParticle{
}

//net.minecraft.client.particle.BlockLeakParticle$Falling
class BlockLeakParticle_Falling extends BlockLeakParticle{
}

//net.minecraft.client.particle.BlockLeakParticle$Dripping
class BlockLeakParticle_Dripping extends BlockLeakParticle{
}

//net.minecraft.client.particle.BlockLeakParticle$Landing
class BlockLeakParticle_Landing extends BlockLeakParticle{
}

//net.minecraft.client.particle.WaterSplashParticle
class WaterSplashParticle extends RainSplashParticle{
}

//net.minecraft.client.render.entity.CaveSpiderEntityRenderer
class CaveSpiderEntityRenderer extends SpiderEntityRenderer{
 getTexture(entity: Entity): Identifier;
 getTexture(spiderEntity: SpiderEntity): Identifier;
 getTexture(caveSpiderEntity: CaveSpiderEntity): Identifier;
}
class Static_CaveSpiderEntityRenderer {
static TEXTURE: Identifier;
static SCALE: number;
}

//net.minecraft.client.render.entity.GlowSquidEntityRenderer
class GlowSquidEntityRenderer extends SquidEntityRenderer{
 getTexture(squidEntity: SquidEntity): Identifier;
 getTexture(glowSquidEntity: GlowSquidEntity): Identifier;
 getTexture(entity: Entity): Identifier;
}
class Static_GlowSquidEntityRenderer {
static TEXTURE: Identifier;
}

//net.minecraft.client.render.entity.HorseEntityRenderer
class HorseEntityRenderer extends AbstractHorseEntityRenderer{
 getTexture(horseEntity: HorseEntity): Identifier;
 getTexture(entity: Entity): Identifier;
}
class Static_HorseEntityRenderer {
static method_27151(map: EnumMap): void;
static TEXTURES: Map;
}

//net.minecraft.client.render.entity.DonkeyEntityRenderer
class DonkeyEntityRenderer extends AbstractHorseEntityRenderer{
 getTexture(abstractDonkeyEntity: AbstractDonkeyEntity): Identifier;
 getTexture(entity: Entity): Identifier;
}
class Static_DonkeyEntityRenderer {
static TEXTURES: Map;
}

//net.minecraft.client.render.entity.ZombieHorseEntityRenderer
class ZombieHorseEntityRenderer extends AbstractHorseEntityRenderer{
 getTexture(abstractHorseEntity: AbstractHorseEntity): Identifier;
 getTexture(entity: Entity): Identifier;
}
class Static_ZombieHorseEntityRenderer {
static TEXTURES: Map;
}

//net.minecraft.client.render.entity.ZombieVillagerEntityRenderer
class ZombieVillagerEntityRenderer extends BipedEntityRenderer{
 getTexture(entity: Entity): Identifier;
 getTexture(zombieVillagerEntity: ZombieVillagerEntity): Identifier;
}
class Static_ZombieVillagerEntityRenderer {
static TEXTURE: Identifier;
}

//net.minecraft.client.render.entity.ZombieBaseEntityRenderer
class ZombieBaseEntityRenderer extends BipedEntityRenderer{
 getTexture(entity: Entity): Identifier;
 getTexture(zombieEntity: ZombieEntity): Identifier;
}
class Static_ZombieBaseEntityRenderer {
static TEXTURE: Identifier;
}

//net.minecraft.client.render.entity.SkeletonEntityRenderer
class SkeletonEntityRenderer extends BipedEntityRenderer{
 getTexture(entity: Entity): Identifier;
 getTexture(abstractSkeletonEntity: AbstractSkeletonEntity): Identifier;
}
class Static_SkeletonEntityRenderer {
static TEXTURE: Identifier;
}

//net.minecraft.client.render.entity.PiglinEntityRenderer
class PiglinEntityRenderer extends BipedEntityRenderer{
 getTexture(entity: Entity): Identifier;
 getTexture(mobEntity: MobEntity): Identifier;
}
class Static_PiglinEntityRenderer {
static getPiglinModel(modelLoader: EntityModelLoader,layer: EntityModelLayer,zombie: boolean): PiglinEntityModel;
static TEXTURES: Map;
static HORIZONTAL_SCALE: number;
}

//net.minecraft.client.render.entity.ElderGuardianEntityRenderer
class ElderGuardianEntityRenderer extends GuardianEntityRenderer{
 getTexture(guardianEntity: GuardianEntity): Identifier;
 getTexture(entity: Entity): Identifier;
}
class Static_ElderGuardianEntityRenderer {
static TEXTURE: Identifier;
}

//net.minecraft.client.render.entity.VindicatorEntityRenderer
class VindicatorEntityRenderer extends IllagerEntityRenderer{
 getTexture(vindicatorEntity: VindicatorEntity): Identifier;
 getTexture(entity: Entity): Identifier;
}
class Static_VindicatorEntityRenderer {
static TEXTURE: Identifier;
}

//net.minecraft.client.render.entity.EvokerEntityRenderer
class EvokerEntityRenderer extends IllagerEntityRenderer{
 getTexture(spellcastingIllagerEntity: SpellcastingIllagerEntity): Identifier;
 getTexture(entity: Entity): Identifier;
}
class Static_EvokerEntityRenderer {
static TEXTURE: Identifier;
}

//net.minecraft.client.render.entity.IllusionerEntityRenderer
class IllusionerEntityRenderer extends IllagerEntityRenderer{
 render(entity: Entity,yaw: number,tickDelta: number,matrices: MatrixStack,vertexConsumers: VertexConsumerProvider,light: number): void;
 render(livingEntity: LivingEntity,f: number,g: number,matrixStack: MatrixStack,vertexConsumerProvider: VertexConsumerProvider,i: number): void;
 render(mobEntity: MobEntity,f: number,g: number,matrixStack: MatrixStack,vertexConsumerProvider: VertexConsumerProvider,i: number): void;
 render(illusionerEntity: IllusionerEntity,f: number,g: number,matrixStack: MatrixStack,vertexConsumerProvider: VertexConsumerProvider,i: number): void;
 getTexture(entity: Entity): Identifier;
 getTexture(illusionerEntity: IllusionerEntity): Identifier;
}
class Static_IllusionerEntityRenderer {
static TEXTURE: Identifier;
}

//net.minecraft.client.render.entity.PillagerEntityRenderer
class PillagerEntityRenderer extends IllagerEntityRenderer{
 getTexture(pillagerEntity: PillagerEntity): Identifier;
 getTexture(entity: Entity): Identifier;
}
class Static_PillagerEntityRenderer {
static TEXTURE: Identifier;
}

//net.minecraft.client.particle.LargeFireSmokeParticle
class LargeFireSmokeParticle extends FireSmokeParticle{
}

//net.minecraft.client.particle.BlockLeakParticle$ContinuousFalling
class BlockLeakParticle_ContinuousFalling extends BlockLeakParticle_Falling{
}

//net.minecraft.client.particle.BlockLeakParticle$DrippingLava
class BlockLeakParticle_DrippingLava extends BlockLeakParticle_Dripping{
}

//net.minecraft.client.render.entity.ZombieEntityRenderer
class ZombieEntityRenderer extends ZombieBaseEntityRenderer{
}

//net.minecraft.client.render.entity.DrownedEntityRenderer
class DrownedEntityRenderer extends ZombieBaseEntityRenderer{
 getTexture(zombieEntity: ZombieEntity): Identifier;
}
class Static_DrownedEntityRenderer {
static TEXTURE: Identifier;
}

//net.minecraft.client.render.entity.StrayEntityRenderer
class StrayEntityRenderer extends SkeletonEntityRenderer{
 getTexture(abstractSkeletonEntity: AbstractSkeletonEntity): Identifier;
 getTexture(entity: Entity): Identifier;
}
class Static_StrayEntityRenderer {
static TEXTURE: Identifier;
}

//net.minecraft.client.render.entity.WitherSkeletonEntityRenderer
class WitherSkeletonEntityRenderer extends SkeletonEntityRenderer{
 getTexture(abstractSkeletonEntity: AbstractSkeletonEntity): Identifier;
 getTexture(entity: Entity): Identifier;
}
class Static_WitherSkeletonEntityRenderer {
static TEXTURE: Identifier;
}

//net.minecraft.client.particle.BlockLeakParticle$DripstoneLavaDrip
class BlockLeakParticle_DripstoneLavaDrip extends BlockLeakParticle_ContinuousFalling{
}

//net.minecraft.client.particle.BlockLeakParticle$FallingHoney
class BlockLeakParticle_FallingHoney extends BlockLeakParticle_ContinuousFalling{
}

//net.minecraft.client.render.entity.HuskEntityRenderer
class HuskEntityRenderer extends ZombieEntityRenderer{
 getTexture(zombieEntity: ZombieEntity): Identifier;
 getTexture(entity: Entity): Identifier;
}
class Static_HuskEntityRenderer {
static TEXTURE: Identifier;
}

//net.minecraft.block.enums.StructureBlockMode
enum StructureBlockMode {
  SAVE,
  LOAD,
  CORNER,
  DATA
}

//net.minecraft.client.sound.Sound$RegistrationType
enum Sound_RegistrationType {
  FILE,
  SOUND_EVENT
}

//net.minecraft.server.command.CloneCommand$Mode
enum CloneCommand_Mode {
  FORCE,
  MOVE,
  NORMAL
}

//net.minecraft.entity.vehicle.BoatEntity$Location
enum BoatEntity_Location {
  IN_WATER,
  UNDER_WATER,
  UNDER_FLOWING_WATER,
  ON_LAND,
  IN_AIR
}

//net.minecraft.network.packet.c2s.play.AdvancementTabC2SPacket$Action
enum AdvancementTabC2SPacket_Action {
  OPENED_TAB,
  CLOSED_SCREEN
}

//net.minecraft.item.ItemGroup$Row
enum ItemGroup_Row {
  TOP,
  BOTTOM
}

//net.minecraft.client.gui.widget.LockButtonWidget$IconLocation
enum LockButtonWidget_IconLocation {
  LOCKED,
  LOCKED_HOVER,
  LOCKED_DISABLED,
  UNLOCKED,
  UNLOCKED_HOVER,
  UNLOCKED_DISABLED
}

//net.minecraft.registry.entry.RegistryEntry$Type
enum RegistryEntry_Type {
  REFERENCE,
  DIRECT
}

//net.minecraft.client.input.CursorMovement
enum CursorMovement {
  ABSOLUTE,
  RELATIVE,
  END
}

//net.minecraft.advancement.AdvancementDisplays$Status
enum AdvancementDisplays_Status {
  SHOW,
  HIDE,
  NO_CHANGE
}

//net.minecraft.loot.function.CopyNameLootFunction$Source
enum CopyNameLootFunction_Source {
  THIS,
  KILLER,
  KILLER_PLAYER,
  BLOCK_ENTITY
}

//net.minecraft.client.render.FogShape
enum FogShape {
  SPHERE,
  CYLINDER
}

//net.minecraft.client.gl.VertexBuffer$Usage
enum VertexBuffer_Usage {
  STATIC,
  DYNAMIC
}

//net.minecraft.util.math.DirectionTransformation
enum DirectionTransformation {
  identity,
  rot_180_face_xy,
  rot_180_face_xz,
  rot_180_face_yz,
  rot_120_nnn,
  rot_120_nnp,
  rot_120_npn,
  rot_120_npp,
  rot_120_pnn,
  rot_120_pnp,
  rot_120_ppn,
  rot_120_ppp,
  rot_180_edge_xy_neg,
  rot_180_edge_xy_pos,
  rot_180_edge_xz_neg,
  rot_180_edge_xz_pos,
  rot_180_edge_yz_neg,
  rot_180_edge_yz_pos,
  rot_90_x_neg,
  rot_90_x_pos,
  rot_90_y_neg,
  rot_90_y_pos,
  rot_90_z_neg,
  rot_90_z_pos,
  inversion,
  invert_x,
  invert_y,
  invert_z,
  rot_60_ref_nnn,
  rot_60_ref_nnp,
  rot_60_ref_npn,
  rot_60_ref_npp,
  rot_60_ref_pnn,
  rot_60_ref_pnp,
  rot_60_ref_ppn,
  rot_60_ref_ppp,
  swap_xy,
  swap_yz,
  swap_xz,
  swap_neg_xy,
  swap_neg_yz,
  swap_neg_xz,
  rot_90_ref_x_neg,
  rot_90_ref_x_pos,
  rot_90_ref_y_neg,
  rot_90_ref_y_pos,
  rot_90_ref_z_neg,
  rot_90_ref_z_pos
}

//net.minecraft.entity.Entity$RemovalReason
enum Entity_RemovalReason {
  KILLED,
  DISCARDED,
  UNLOADED_TO_CHUNK,
  UNLOADED_WITH_PLAYER,
  CHANGED_DIMENSION
}

//net.minecraft.text.ClickEvent$Action
enum ClickEvent_Action {
  OPEN_URL,
  OPEN_FILE,
  RUN_COMMAND,
  SUGGEST_COMMAND,
  CHANGE_PAGE,
  COPY_TO_CLIPBOARD
}

//net.minecraft.entity.passive.SnifferEntity$State
enum SnifferEntity_State {
  IDLING,
  FEELING_HAPPY,
  SCENTING,
  SNIFFING,
  SEARCHING,
  DIGGING,
  RISING
}

//net.minecraft.entity.passive.ParrotEntity$Variant
enum ParrotEntity_Variant {
  RED_BLUE,
  BLUE,
  GREEN,
  YELLOW_BLUE,
  GRAY
}

//net.minecraft.block.enums.StairShape
enum StairShape {
  straight,
  inner_left,
  inner_right,
  outer_left,
  outer_right
}

//net.minecraft.recipe.book.RecipeCategory
enum RecipeCategory {
  BUILDING_BLOCKS,
  DECORATIONS,
  REDSTONE,
  TRANSPORTATION,
  TOOLS,
  COMBAT,
  FOOD,
  BREWING,
  MISC
}

//net.minecraft.nbt.scanner.NbtScanner$NestedResult
enum NbtScanner_NestedResult {
  ENTER,
  SKIP,
  BREAK,
  HALT
}

//net.minecraft.client.option.SimpleOption$DoubleSliderCallbacks
enum SimpleOption_DoubleSliderCallbacks {
  INSTANCE
}

//net.minecraft.entity.attribute.EntityAttributeModifier$Operation
enum EntityAttributeModifier_Operation {
  ADDITION,
  MULTIPLY_BASE,
  MULTIPLY_TOTAL
}

//net.minecraft.scoreboard.AbstractTeam$CollisionRule
enum AbstractTeam_CollisionRule {
  ALWAYS,
  NEVER,
  PUSH_OTHER_TEAMS,
  PUSH_OWN_TEAM
}

//net.minecraft.command.CommandSource$SuggestedIdType
enum CommandSource_SuggestedIdType {
  TAGS,
  ELEMENTS,
  ALL
}

//net.minecraft.entity.effect.StatusEffectCategory
enum StatusEffectCategory {
  BENEFICIAL,
  HARMFUL,
  NEUTRAL
}

//net.minecraft.client.tutorial.TutorialStep
enum TutorialStep {
  MOVEMENT,
  FIND_TREE,
  PUNCH_TREE,
  OPEN_INVENTORY,
  CRAFT_PLANKS,
  NONE
}

//net.minecraft.client.render.item.HeldItemRenderer$HandRenderType
enum HeldItemRenderer_HandRenderType {
  RENDER_BOTH_HANDS,
  RENDER_MAIN_HAND_ONLY,
  RENDER_OFF_HAND_ONLY
}

//net.minecraft.network.packet.s2c.play.TeamS2CPacket$Operation
enum TeamS2CPacket_Operation {
  ADD,
  REMOVE
}

//net.minecraft.entity.projectile.PersistentProjectileEntity$PickupPermission
enum PersistentProjectileEntity_PickupPermission {
  DISALLOWED,
  ALLOWED,
  CREATIVE_ONLY
}

//net.minecraft.block.enums.Instrument$Type
enum Instrument_Type {
  BASE_BLOCK,
  MOB_HEAD,
  CUSTOM
}

//net.minecraft.client.gui.navigation.GuiNavigationType
enum GuiNavigationType {
  NONE,
  MOUSE,
  KEYBOARD_ARROW,
  KEYBOARD_TAB
}

//net.minecraft.network.packet.c2s.play.ClientCommandC2SPacket$Mode
enum ClientCommandC2SPacket_Mode {
  PRESS_SHIFT_KEY,
  RELEASE_SHIFT_KEY,
  STOP_SLEEPING,
  START_SPRINTING,
  STOP_SPRINTING,
  START_RIDING_JUMP,
  STOP_RIDING_JUMP,
  OPEN_INVENTORY,
  START_FALL_FLYING
}

//net.minecraft.client.gui.Selectable$SelectionType
enum Selectable_SelectionType {
  NONE,
  HOVERED,
  FOCUSED
}

//net.minecraft.client.network.ServerInfo$ResourcePackPolicy
enum ServerInfo_ResourcePackPolicy {
  ENABLED,
  DISABLED,
  PROMPT
}

//net.minecraft.client.gui.navigation.NavigationAxis
enum NavigationAxis {
  HORIZONTAL,
  VERTICAL
}

//net.minecraft.entity.decoration.DisplayEntity$TextDisplayEntity$TextAlignment
enum DisplayEntity_TextDisplayEntity_TextAlignment {
  CENTER,
  LEFT,
  RIGHT
}

//net.minecraft.server.world.ServerEntityManager$Status
enum ServerEntityManager_Status {
  FRESH,
  PENDING,
  LOADED
}

//net.minecraft.network.packet.c2s.play.ClientStatusC2SPacket$Mode
enum ClientStatusC2SPacket_Mode {
  PERFORM_RESPAWN,
  REQUEST_STATS
}

//net.minecraft.util.Formatting
enum Formatting {
  $0,
  $1,
  $2,
  $3,
  $4,
  $5,
  $6,
  $7,
  $8,
  $9,
  $a,
  $b,
  $c,
  $d,
  $e,
  $f,
  $k,
  $l,
  $m,
  $n,
  $o,
  $r
}

//net.minecraft.registry.entry.RegistryEntry$Reference$Type
enum RegistryEntry_Reference_Type {
  STAND_ALONE,
  INTRUSIVE
}

//net.minecraft.network.NetworkSide
enum NetworkSide {
  SERVERBOUND,
  CLIENTBOUND
}

//net.minecraft.client.gui.screen.multiplayer.SocialInteractionsScreen$Tab
enum SocialInteractionsScreen_Tab {
  ALL,
  HIDDEN,
  BLOCKED
}

//net.minecraft.entity.ai.brain.task.FrogEatEntityTask$Phase
enum FrogEatEntityTask_Phase {
  MOVE_TO_TARGET,
  CATCH_ANIMATION,
  EAT_ANIMATION,
  DONE
}

//net.minecraft.block.enums.WallMountLocation
enum WallMountLocation {
  FLOOR,
  WALL,
  CEILING
}

//net.minecraft.util.math.Direction$AxisDirection
enum Direction_AxisDirection {
  Towards_positive,
  Towards_negative
}

//net.minecraft.entity.decoration.DisplayEntity$BillboardMode
enum DisplayEntity_BillboardMode {
  FIXED,
  VERTICAL,
  HORIZONTAL,
  CENTER
}

//net.minecraft.util.Arm
enum Arm {
  LEFT,
  RIGHT
}

//net.minecraft.util.math.Direction$Type
enum Direction_Type {
  HORIZONTAL,
  VERTICAL
}

//net.minecraft.block.AbstractBlock$OffsetType
enum AbstractBlock_OffsetType {
  NONE,
  XZ,
  XYZ
}

//net.minecraft.entity.passive.PandaEntity$Gene
enum PandaEntity_Gene {
  NORMAL,
  LAZY,
  WORRIED,
  PLAYFUL,
  BROWN,
  WEAK,
  AGGRESSIVE
}

//net.minecraft.client.render.block.BlockModelRenderer$Translation
enum BlockModelRenderer_Translation {
  DOWN,
  UP,
  NORTH,
  SOUTH,
  WEST,
  EAST
}

//net.minecraft.block.enums.RailShape
enum RailShape {
  north_south,
  east_west,
  ascending_east,
  ascending_west,
  ascending_north,
  ascending_south,
  south_east,
  south_west,
  north_west,
  north_east
}

//net.minecraft.client.texture.NativeImage$Format
enum NativeImage_Format {
  RGBA,
  RGB,
  LUMINANCE_ALPHA,
  LUMINANCE
}

//net.minecraft.data.client.BlockStateModelGenerator$TintType
enum BlockStateModelGenerator_TintType {
  TINTED,
  NOT_TINTED
}

//net.minecraft.entity.ai.brain.task.CompositeTask$Order
enum CompositeTask_Order {
  ORDERED,
  SHUFFLED
}

//net.minecraft.block.PressurePlateBlock$ActivationRule
enum PressurePlateBlock_ActivationRule {
  EVERYTHING,
  MOBS
}

//net.minecraft.data.DataOutput$OutputType
enum DataOutput_OutputType {
  DATA_PACK,
  RESOURCE_PACK,
  REPORTS
}

//net.minecraft.recipe.book.CookingRecipeCategory
enum CookingRecipeCategory {
  FOOD,
  BLOCKS,
  MISC
}

//net.minecraft.client.util.BanReason
enum BanReason {
  GENERIC_VIOLATION,
  FALSE_REPORTING,
  HATE_SPEECH,
  HATE_TERRORISM_NOTORIOUS_FIGURE,
  HARASSMENT_OR_BULLYING,
  DEFAMATION_IMPERSONATION_FALSE_INFORMATION,
  DRUGS,
  FRAUD,
  SPAM_OR_ADVERTISING,
  NUDITY_OR_PORNOGRAPHY,
  SEXUALLY_INAPPROPRIATE,
  EXTREME_VIOLENCE_OR_GORE,
  IMMINENT_HARM_TO_PERSON_OR_PROPERTY
}

//net.minecraft.village.raid.Raid$Status
enum Raid_Status {
  ONGOING,
  VICTORY,
  LOSS,
  STOPPED
}

//net.minecraft.recipe.book.CraftingRecipeCategory
enum CraftingRecipeCategory {
  BUILDING,
  REDSTONE,
  EQUIPMENT,
  MISC
}

//net.minecraft.client.render.ChunkBuilderMode
enum ChunkBuilderMode {
  NONE,
  PLAYER_AFFECTED,
  NEARBY
}

//net.minecraft.client.render.chunk.ChunkBuilder$Result
enum ChunkBuilder_Result {
  SUCCESSFUL,
  CANCELLED
}

//net.minecraft.entity.passive.TropicalFishEntity$Size
enum TropicalFishEntity_Size {
  SMALL,
  LARGE
}

//net.minecraft.item.map.MapIcon$Type
enum MapIcon_Type {
  PLAYER,
  FRAME,
  RED_MARKER,
  BLUE_MARKER,
  TARGET_X,
  TARGET_POINT,
  PLAYER_OFF_MAP,
  PLAYER_OFF_LIMITS,
  MANSION,
  MONUMENT,
  BANNER_WHITE,
  BANNER_ORANGE,
  BANNER_MAGENTA,
  BANNER_LIGHT_BLUE,
  BANNER_YELLOW,
  BANNER_LIME,
  BANNER_PINK,
  BANNER_GRAY,
  BANNER_LIGHT_GRAY,
  BANNER_CYAN,
  BANNER_PURPLE,
  BANNER_BLUE,
  BANNER_BROWN,
  BANNER_GREEN,
  BANNER_RED,
  BANNER_BLACK,
  RED_X
}

//net.minecraft.scoreboard.ServerScoreboard$UpdateMode
enum ServerScoreboard_UpdateMode {
  CHANGE,
  REMOVE
}

//net.minecraft.block.enums.Attachment
enum Attachment {
  FLOOR,
  CEILING,
  SINGLE_WALL,
  DOUBLE_WALL
}

//net.minecraft.world.event.listener.GameEventListener$TriggerOrder
enum GameEventListener_TriggerOrder {
  UNSPECIFIED,
  BY_DISTANCE
}

//net.minecraft.data.client.When$LogicalOperator
enum When_LogicalOperator {
  AND,
  OR
}

//net.minecraft.world.RaycastContext$FluidHandling
enum RaycastContext_FluidHandling {
  NONE,
  SOURCE_ONLY,
  ANY,
  WATER
}

//net.minecraft.client.render.model.json.JsonUnbakedModel$GuiLight
enum JsonUnbakedModel_GuiLight {
  FRONT,
  SIDE
}

//net.minecraft.network.packet.c2s.play.PlayerInteractEntityC2SPacket$InteractType
enum PlayerInteractEntityC2SPacket_InteractType {
  INTERACT,
  ATTACK,
  INTERACT_AT
}

//net.minecraft.client.toast.TutorialToast$Type
enum TutorialToast_Type {
  MOVEMENT_KEYS,
  MOUSE,
  TREE,
  RECIPE_BOOK,
  WOODEN_PLANKS,
  SOCIAL_INTERACTIONS,
  RIGHT_CLICK
}

//net.minecraft.resource.ResourcePackCompatibility
enum ResourcePackCompatibility {
  TOO_OLD,
  TOO_NEW,
  COMPATIBLE
}

//net.minecraft.client.option.AttackIndicator
enum AttackIndicator {
  OFF,
  CROSSHAIR,
  HOTBAR
}

//net.minecraft.network.packet.s2c.play.PlayerListS2CPacket$Action
enum PlayerListS2CPacket_Action {
  ADD_PLAYER,
  INITIALIZE_CHAT,
  UPDATE_GAME_MODE,
  UPDATE_LISTED,
  UPDATE_LATENCY,
  UPDATE_DISPLAY_NAME
}

//net.minecraft.network.packet.c2s.play.ResourcePackStatusC2SPacket$Status
enum ResourcePackStatusC2SPacket_Status {
  SUCCESSFULLY_LOADED,
  DECLINED,
  FAILED_DOWNLOAD,
  ACCEPTED
}

//net.minecraft.datafixer.fix.ChunkPalettedStorageFix$Facing$Direction
enum ChunkPalettedStorageFix_Facing_Direction {
  POSITIVE,
  NEGATIVE
}

//net.minecraft.world.explosion.Explosion$DestructionType
enum Explosion_DestructionType {
  KEEP,
  DESTROY,
  DESTROY_WITH_DECAY
}

//net.minecraft.entity.projectile.FishingBobberEntity$PositionType
enum FishingBobberEntity_PositionType {
  ABOVE_WATER,
  INSIDE_WATER,
  INVALID
}

//net.minecraft.client.util.telemetry.TelemetryEventProperty$GameMode
enum TelemetryEventProperty_GameMode {
  SURVIVAL,
  CREATIVE,
  ADVENTURE,
  SPECTATOR,
  HARDCORE
}

//net.minecraft.entity.damage.DamageScaling
enum DamageScaling {
  NEVER,
  WHEN_CAUSED_BY_LIVING_NON_PLAYER,
  ALWAYS
}

//net.minecraft.scoreboard.AbstractTeam$VisibilityRule
enum AbstractTeam_VisibilityRule {
  ALWAYS,
  NEVER,
  HIDE_FOR_OTHER_TEAMS,
  HIDE_FOR_OWN_TEAM
}

//net.minecraft.network.NetworkState
enum NetworkState {
  HANDSHAKING,
  PLAY,
  STATUS,
  LOGIN
}

//net.minecraft.client.sound.SoundInstance$AttenuationType
enum SoundInstance_AttenuationType {
  NONE,
  LINEAR
}

//net.minecraft.client.texture.NativeImage$InternalFormat
enum NativeImage_InternalFormat {
  RGBA,
  RGB,
  RG,
  RED
}

//net.minecraft.item.ArmorItem$Type
enum ArmorItem_Type {
  HELMET,
  CHESTPLATE,
  LEGGINGS,
  BOOTS
}

//net.minecraft.entity.ai.brain.task.CompositeTask$RunMode
enum CompositeTask_RunMode {
  RUN_ONE,
  TRY_ALL
}

//net.minecraft.server.command.AdvancementCommand$Operation
enum AdvancementCommand_Operation {
  GRANT,
  REVOKE
}

//net.minecraft.client.gui.tooltip.BundleTooltipComponent$Sprite
enum BundleTooltipComponent_Sprite {
  SLOT,
  BLOCKED_SLOT,
  BORDER_VERTICAL,
  BORDER_HORIZONTAL_TOP,
  BORDER_HORIZONTAL_BOTTOM,
  BORDER_CORNER_TOP,
  BORDER_CORNER_BOTTOM
}

//net.minecraft.util.BlockMirror
enum BlockMirror {
  NONE,
  LEFT_RIGHT,
  FRONT_BACK
}

//net.minecraft.entity.SpawnRestriction$Location
enum SpawnRestriction_Location {
  ON_GROUND,
  IN_WATER,
  NO_RESTRICTIONS,
  IN_LAVA
}

//net.minecraft.client.util.InputUtil$Type
enum InputUtil_Type {
  KEYSYM,
  SCANCODE,
  MOUSE
}

//net.minecraft.client.util.SelectionManager$SelectionType
enum SelectionManager_SelectionType {
  CHARACTER,
  WORD
}

//net.minecraft.client.render.VertexFormat$IndexType
enum VertexFormat_IndexType {
  SHORT,
  INT
}

//net.minecraft.block.enums.BedPart
enum BedPart {
  head,
  foot
}

//net.minecraft.loot.context.LootContext$EntityTarget
enum LootContext_EntityTarget {
  THIS,
  KILLER,
  DIRECT_KILLER,
  KILLER_PLAYER
}

//net.minecraft.world.biome.BiomeEffects$GrassColorModifier
enum BiomeEffects_GrassColorModifier {
  NONE,
  DARK_FOREST,
  SWAMP
}

//net.minecraft.network.packet.s2c.play.BossBarS2CPacket$Type
enum BossBarS2CPacket_Type {
  ADD,
  REMOVE,
  UPDATE_PROGRESS,
  UPDATE_NAME,
  UPDATE_STYLE,
  UPDATE_PROPERTIES
}

//net.minecraft.entity.mob.IllagerEntity$State
enum IllagerEntity_State {
  CROSSED,
  ATTACKING,
  SPELLCASTING,
  BOW_AND_ARROW,
  CROSSBOW_HOLD,
  CROSSBOW_CHARGE,
  CELEBRATING,
  NEUTRAL
}

//net.minecraft.client.render.model.json.ModelTransformationMode
enum ModelTransformationMode {
  NONE,
  THIRD_PERSON_LEFT_HAND,
  THIRD_PERSON_RIGHT_HAND,
  FIRST_PERSON_LEFT_HAND,
  FIRST_PERSON_RIGHT_HAND,
  HEAD,
  GUI,
  GROUND,
  FIXED
}

//net.minecraft.village.VillageGossipType
enum VillageGossipType {
  MAJOR_NEGATIVE,
  MINOR_NEGATIVE,
  MINOR_POSITIVE,
  MAJOR_POSITIVE,
  TRADING
}

//net.minecraft.datafixer.fix.ChunkPalettedStorageFix$Facing
enum ChunkPalettedStorageFix_Facing {
  DOWN,
  UP,
  NORTH,
  SOUTH,
  WEST,
  EAST
}

//net.minecraft.util.profiling.jfr.InstanceType
enum InstanceType {
  CLIENT,
  SERVER
}

//net.minecraft.client.option.NarratorMode
enum NarratorMode {
  OFF,
  ALL,
  CHAT,
  SYSTEM
}

//net.minecraft.client.option.CloudRenderMode
enum CloudRenderMode {
  OFF,
  FAST,
  FANCY
}

//net.minecraft.datafixer.fix.ChunkPalettedStorageFix$Facing$Axis
enum ChunkPalettedStorageFix_Facing_Axis {
  X,
  Y,
  Z
}

//net.minecraft.client.render.entity.model.BipedEntityModel$ArmPose
enum BipedEntityModel_ArmPose {
  EMPTY,
  ITEM,
  BLOCK,
  BOW_AND_ARROW,
  THROW_SPEAR,
  CROSSBOW_CHARGE,
  CROSSBOW_HOLD,
  SPYGLASS,
  TOOT_HORN,
  BRUSH
}

//net.minecraft.client.render.VertexFormatElement$ComponentType
enum VertexFormatElement_ComponentType {
  FLOAT,
  UBYTE,
  BYTE,
  USHORT,
  SHORT,
  UINT,
  INT
}

//net.minecraft.world.LightType
enum LightType {
  SKY,
  BLOCK
}

//net.minecraft.entity.ai.brain.MemoryModuleState
enum MemoryModuleState {
  VALUE_PRESENT,
  VALUE_ABSENT,
  REGISTERED
}

//net.minecraft.client.render.RenderLayer$OutlineMode
enum RenderLayer_OutlineMode {
  none,
  is_outline,
  affects_outline
}

//net.minecraft.util.function.ValueLists$OutOfBoundsHandling
enum ValueLists_OutOfBoundsHandling {
  ZERO,
  WRAP,
  CLAMP
}

//net.minecraft.util.math.random.ChunkRandom$RandomProvider
enum ChunkRandom_RandomProvider {
  LEGACY,
  XOROSHIRO
}

//net.minecraft.client.font.TextRenderer$TextLayerType
enum TextRenderer_TextLayerType {
  NORMAL,
  SEE_THROUGH,
  POLYGON_OFFSET
}

//net.minecraft.client.render.model.ModelRotation
enum ModelRotation {
  X0_Y0,
  X0_Y90,
  X0_Y180,
  X0_Y270,
  X90_Y0,
  X90_Y90,
  X90_Y180,
  X90_Y270,
  X180_Y0,
  X180_Y90,
  X180_Y180,
  X180_Y270,
  X270_Y0,
  X270_Y90,
  X270_Y180,
  X270_Y270
}

//net.minecraft.block.entity.StructureBlockBlockEntity$Action
enum StructureBlockBlockEntity_Action {
  UPDATE_DATA,
  SAVE_AREA,
  LOAD_AREA,
  SCAN_AREA
}

//net.minecraft.util.hit.HitResult$Type
enum HitResult_Type {
  MISS,
  BLOCK,
  ENTITY
}

//net.minecraft.world.EmptyBlockView
enum EmptyBlockView {
  INSTANCE
}

//net.minecraft.block.enums.Thickness
enum Thickness {
  tip_merge,
  tip,
  frustum,
  middle,
  base
}

//net.minecraft.entity.passive.RabbitEntity$RabbitType
enum RabbitEntity_RabbitType {
  BROWN,
  WHITE,
  BLACK,
  WHITE_SPLOTCHED,
  GOLD,
  SALT,
  EVIL
}

//net.minecraft.block.enums.WireConnection
enum WireConnection {
  up,
  side,
  none
}

//net.minecraft.entity.ai.goal.CrossbowAttackGoal$Stage
enum CrossbowAttackGoal_Stage {
  UNCHARGED,
  CHARGING,
  CHARGED,
  READY_TO_ATTACK
}

//net.minecraft.client.font.FontType
enum FontType {
  BITMAP,
  TTF,
  SPACE,
  UNIHEX,
  REFERENCE
}

//net.minecraft.world.biome.Biome$Precipitation
enum Biome_Precipitation {
  NONE,
  RAIN,
  SNOW
}

//net.minecraft.client.font.BuiltinEmptyGlyph
enum BuiltinEmptyGlyph {
  WHITE,
  MISSING
}

//net.minecraft.client.render.VertexFormatElement$Type
enum VertexFormatElement_Type {
  POSITION,
  NORMAL,
  COLOR,
  UV,
  PADDING,
  GENERIC
}

//net.minecraft.world.border.WorldBorderStage
enum WorldBorderStage {
  GROWING,
  SHRINKING,
  STATIONARY
}

//net.minecraft.entity.player.PlayerEntity$SleepFailureReason
enum PlayerEntity_SleepFailureReason {
  NOT_POSSIBLE_HERE,
  NOT_POSSIBLE_NOW,
  TOO_FAR_AWAY,
  OBSTRUCTED,
  OTHER_PROBLEM,
  NOT_SAFE
}

//net.minecraft.entity.mob.PiglinActivity
enum PiglinActivity {
  ATTACKING_WITH_MELEE_WEAPON,
  CROSSBOW_HOLD,
  CROSSBOW_CHARGE,
  ADMIRING_ITEM,
  DANCING,
  DEFAULT
}

//net.minecraft.client.report.log.ChatLogEntry$Type
enum ChatLogEntry_Type {
  PLAYER,
  SYSTEM
}

//net.minecraft.client.render.block.BlockModelRenderer$NeighborOrientation
enum BlockModelRenderer_NeighborOrientation {
  DOWN,
  UP,
  NORTH,
  SOUTH,
  WEST,
  EAST,
  FLIP_DOWN,
  FLIP_UP,
  FLIP_NORTH,
  FLIP_SOUTH,
  FLIP_WEST,
  FLIP_EAST
}

//net.minecraft.network.message.FilterMask$FilterStatus
enum FilterMask_FilterStatus {
  PASS_THROUGH,
  FULLY_FILTERED,
  PARTIALLY_FILTERED
}

//net.minecraft.block.DoubleBlockProperties$Type
enum DoubleBlockProperties_Type {
  SINGLE,
  FIRST,
  SECOND
}

//net.minecraft.world.chunk.WorldChunk$CreationType
enum WorldChunk_CreationType {
  IMMEDIATE,
  QUEUED,
  CHECK
}

//net.minecraft.util.Unit
enum Unit {
  INSTANCE
}

//net.minecraft.client.gl.ShaderStage$Type
enum ShaderStage_Type {
  VERTEX,
  FRAGMENT
}

//net.minecraft.world.World$ExplosionSourceType
enum World_ExplosionSourceType {
  NONE,
  BLOCK,
  MOB,
  TNT
}

//net.minecraft.client.report.AbuseReportReason
enum AbuseReportReason {
  HATE_SPEECH,
  TERRORISM_OR_VIOLENT_EXTREMISM,
  CHILD_SEXUAL_EXPLOITATION_OR_ABUSE,
  IMMINENT_HARM,
  NON_CONSENSUAL_INTIMATE_IMAGERY,
  HARASSMENT_OR_BULLYING,
  DEFAMATION_IMPERSONATION_FALSE_INFORMATION,
  SELF_HARM_OR_SUICIDE,
  ALCOHOL_TOBACCO_DRUGS
}

//net.minecraft.entity.MovementType
enum MovementType {
  SELF,
  PLAYER,
  PISTON,
  SHULKER_BOX,
  SHULKER
}

//net.minecraft.advancement.AdvancementFrame
enum AdvancementFrame {
  TASK,
  CHALLENGE,
  GOAL
}

//net.minecraft.util.profiler.SampleType
enum SampleType {
  PATH_FINDING,
  EVENT_LOOPS,
  MAIL_BOXES,
  TICK_LOOP,
  JVM,
  CHUNK_RENDERING,
  CHUNK_RENDERING_DISPATCHING,
  CPU,
  GPU
}

//net.minecraft.util.math.Direction
enum Direction {
  down,
  up,
  north,
  south,
  west,
  east
}

//net.minecraft.client.option.ParticlesMode
enum ParticlesMode {
  ALL,
  DECREASED,
  MINIMAL
}

//net.minecraft.server.command.ExperienceCommand$Component
enum ExperienceCommand_Component {
  POINTS,
  LEVELS
}

//net.minecraft.entity.passive.IronGolemEntity$Crack
enum IronGolemEntity_Crack {
  NONE,
  LOW,
  MEDIUM,
  HIGH
}

//net.minecraft.block.entity.CommandBlockBlockEntity$Type
enum CommandBlockBlockEntity_Type {
  SEQUENCE,
  AUTO,
  REDSTONE
}

//net.minecraft.enchantment.Enchantment$Rarity
enum Enchantment_Rarity {
  COMMON,
  UNCOMMON,
  RARE,
  VERY_RARE
}

//net.minecraft.world.GameRules$Category
enum GameRules_Category {
  PLAYER,
  MOBS,
  SPAWNING,
  DROPS,
  UPDATES,
  CHAT,
  MISC
}

//net.minecraft.client.sound.SoundEngine$RunMode
enum SoundEngine_RunMode {
  STATIC,
  STREAMING
}

//net.minecraft.entity.passive.TropicalFishEntity$Variety
enum TropicalFishEntity_Variety {
  KOB,
  SUNSTREAK,
  SNOOPER,
  DASHER,
  BRINELY,
  SPOTTY,
  FLOPPER,
  STRIPEY,
  GLITTER,
  BLOCKFISH,
  BETTY,
  CLAYFISH
}

//net.minecraft.world.StructureSpawns$BoundingBox
enum StructureSpawns_BoundingBox {
  PIECE,
  STRUCTURE
}

//net.minecraft.client.util.Icons
enum Icons {
  RELEASE,
  SNAPSHOT
}

//net.minecraft.util.math.Direction$Axis
enum Direction_Axis {
  x,
  y,
  z
}

//net.minecraft.block.enums.Tilt
enum Tilt {
  NONE,
  UNSTABLE,
  PARTIAL,
  FULL
}

//net.minecraft.world.storage.StorageIoWorker$Priority
enum StorageIoWorker_Priority {
  FOREGROUND,
  BACKGROUND,
  SHUTDOWN
}

//net.minecraft.util.BlockRotation
enum BlockRotation {
  NONE,
  CLOCKWISE_90,
  CLOCKWISE_180,
  COUNTERCLOCKWISE_90
}

//net.minecraft.item.ItemGroup$StackVisibility
enum ItemGroup_StackVisibility {
  PARENT_AND_SEARCH_TABS,
  PARENT_TAB_ONLY,
  SEARCH_TAB_ONLY
}

//net.minecraft.client.gui.screen.world.WorldCreator$Mode
enum WorldCreator_Mode {
  SURVIVAL,
  HARDCORE,
  CREATIVE,
  DEBUG
}

//net.minecraft.client.render.VertexFormat$DrawMode
enum VertexFormat_DrawMode {
  LINES,
  LINE_STRIP,
  DEBUG_LINES,
  DEBUG_LINE_STRIP,
  TRIANGLES,
  TRIANGLE_STRIP,
  TRIANGLE_FAN,
  QUADS
}

//net.minecraft.client.gui.screen.advancement.AdvancementObtainedStatus
enum AdvancementObtainedStatus {
  OBTAINED,
  UNOBTAINED
}

//net.minecraft.server.command.SetBlockCommand$Mode
enum SetBlockCommand_Mode {
  REPLACE,
  DESTROY
}

//net.minecraft.world.Heightmap$Purpose
enum Heightmap_Purpose {
  WORLDGEN,
  LIVE_WORLD,
  CLIENT
}

//net.minecraft.block.BlockRenderType
enum BlockRenderType {
  INVISIBLE,
  ENTITYBLOCK_ANIMATED,
  MODEL
}

//net.minecraft.client.option.Perspective
enum Perspective {
  FIRST_PERSON,
  THIRD_PERSON_BACK,
  THIRD_PERSON_FRONT
}

//net.minecraft.entity.damage.DeathMessageType
enum DeathMessageType {
  DEFAULT,
  FALL_VARIANTS,
  INTENTIONAL_GAME_DESIGN
}

//net.minecraft.server.network.ServerLoginNetworkHandler$State
enum ServerLoginNetworkHandler_State {
  HELLO,
  KEY,
  AUTHENTICATING,
  NEGOTIATING,
  READY_TO_ACCEPT,
  DELAY_ACCEPT,
  ACCEPTED
}

//net.minecraft.entity.projectile.FishingBobberEntity$State
enum FishingBobberEntity_State {
  FLYING,
  HOOKED_IN_ENTITY,
  BOBBING
}

//net.minecraft.entity.ai.pathing.NavigationType
enum NavigationType {
  LAND,
  WATER,
  AIR
}

//net.minecraft.world.Heightmap$Type
enum Heightmap_Type {
  WORLD_SURFACE_WG,
  WORLD_SURFACE,
  OCEAN_FLOOR_WG,
  OCEAN_FLOOR,
  MOTION_BLOCKING,
  MOTION_BLOCKING_NO_LEAVES
}

//net.minecraft.recipe.book.RecipeBookCategory
enum RecipeBookCategory {
  CRAFTING,
  FURNACE,
  BLAST_FURNACE,
  SMOKER
}

//net.minecraft.client.util.DefaultSkinHelper$Model
enum DefaultSkinHelper_Model {
  SLIM,
  WIDE
}

//net.minecraft.block.entity.BeehiveBlockEntity$BeeState
enum BeehiveBlockEntity_BeeState {
  HONEY_DELIVERED,
  BEE_RELEASED,
  EMERGENCY
}

//net.minecraft.enchantment.EnchantmentTarget
enum EnchantmentTarget {
  ARMOR,
  ARMOR_FEET,
  ARMOR_LEGS,
  ARMOR_CHEST,
  ARMOR_HEAD,
  WEAPON,
  DIGGER,
  FISHING_ROD,
  TRIDENT,
  BREAKABLE,
  BOW,
  WEARABLE,
  CROSSBOW,
  VANISHABLE
}

//net.minecraft.data.client.VariantSettings$Rotation
enum VariantSettings_Rotation {
  R0,
  R90,
  R180,
  R270
}

//net.minecraft.structure.StrongholdGenerator$Piece$EntranceType
enum StrongholdGenerator_Piece_EntranceType {
  OPENING,
  WOOD_DOOR,
  GRATES,
  IRON_DOOR
}

//net.minecraft.entity.SpawnGroup
enum SpawnGroup {
  MONSTER,
  CREATURE,
  AMBIENT,
  AXOLOTLS,
  UNDERGROUND_WATER_CREATURE,
  WATER_CREATURE,
  WATER_AMBIENT,
  MISC
}

//net.minecraft.world.biome.Biome$TemperatureModifier
enum Biome_TemperatureModifier {
  NONE,
  FROZEN
}

//net.minecraft.world.StructurePresence
enum StructurePresence {
  START_PRESENT,
  START_NOT_PRESENT,
  CHUNK_LOAD_NEEDED
}

//net.minecraft.client.network.message.MessageTrustStatus
enum MessageTrustStatus {
  SECURE,
  MODIFIED,
  NOT_SECURE
}

//net.minecraft.resource.ResourceType
enum ResourceType {
  CLIENT_RESOURCES,
  SERVER_DATA
}

//net.minecraft.entity.SpawnReason
enum SpawnReason {
  NATURAL,
  CHUNK_GENERATION,
  SPAWNER,
  STRUCTURE,
  BREEDING,
  MOB_SUMMONED,
  JOCKEY,
  EVENT,
  CONVERSION,
  REINFORCEMENT,
  TRIGGERED,
  BUCKET,
  SPAWN_EGG,
  COMMAND,
  DISPENSER,
  PATROL
}

//net.minecraft.client.gui.widget.AxisGridWidget$DisplayAxis
enum AxisGridWidget_DisplayAxis {
  HORIZONTAL,
  VERTICAL
}

//net.minecraft.entity.passive.LlamaEntity$Variant
enum LlamaEntity_Variant {
  CREAMY,
  WHITE,
  BROWN,
  GRAY
}

//net.minecraft.entity.passive.FoxEntity$Type
enum FoxEntity_Type {
  RED,
  SNOW
}

//net.minecraft.resource.ResourcePackProfile$InsertionPosition
enum ResourcePackProfile_InsertionPosition {
  TOP,
  BOTTOM
}

//net.minecraft.client.render.block.BlockModelRenderer$NeighborData
enum BlockModelRenderer_NeighborData {
  DOWN,
  UP,
  NORTH,
  SOUTH,
  WEST,
  EAST
}

//net.minecraft.item.ItemGroup$Type
enum ItemGroup_Type {
  CATEGORY,
  INVENTORY,
  HOTBAR,
  SEARCH
}

//net.minecraft.client.sound.SoundSystem$DeviceChangeStatus
enum SoundSystem_DeviceChangeStatus {
  ONGOING,
  CHANGE_DETECTED,
  NO_CHANGE
}

//net.minecraft.util.ClickType
enum ClickType {
  PRIMARY,
  SECONDARY
}

//net.minecraft.structure.RuinedPortalStructurePiece$VerticalPlacement
enum RuinedPortalStructurePiece_VerticalPlacement {
  ON_LAND_SURFACE,
  PARTLY_BURIED,
  ON_OCEAN_FLOOR,
  IN_MOUNTAIN,
  UNDERGROUND,
  IN_NETHER
}

//net.minecraft.entity.vehicle.AbstractMinecartEntity$Type
enum AbstractMinecartEntity_Type {
  RIDEABLE,
  CHEST,
  FURNACE,
  TNT,
  SPAWNER,
  HOPPER,
  COMMAND_BLOCK
}

//net.minecraft.entity.passive.HorseMarking
enum HorseMarking {
  NONE,
  WHITE,
  WHITE_FIELD,
  WHITE_DOTS,
  BLACK_DOTS
}

//net.minecraft.block.enums.ChestType
enum ChestType {
  SINGLE,
  LEFT,
  RIGHT
}

//net.minecraft.block.LichenGrower$GrowType
enum LichenGrower_GrowType {
  SAME_POSITION,
  SAME_PLANE,
  WRAP_AROUND
}

//net.minecraft.block.piston.PistonBehavior
enum PistonBehavior {
  NORMAL,
  DESTROY,
  BLOCK,
  IGNORE,
  PUSH_ONLY
}

//net.minecraft.util.ActionResult
enum ActionResult {
  SUCCESS,
  CONSUME,
  CONSUME_PARTIAL,
  PASS,
  FAIL
}


//net.minecraft.client.gui.screen.narration.NarrationPart
enum NarrationPart {
  TITLE,
  POSITION,
  HINT,
  USAGE
}

//net.minecraft.client.render.BackgroundRenderer$FogType
enum BackgroundRenderer_FogType {
  FOG_SKY,
  FOG_TERRAIN
}

//net.minecraft.client.render.DimensionEffects$SkyType
enum DimensionEffects_SkyType {
  NONE,
  NORMAL,
  END
}

//net.minecraft.block.enums.DoorHinge
enum DoorHinge {
  left,
  right
}

//net.minecraft.server.command.AdvancementCommand$Selection
enum AdvancementCommand_Selection {
  ONLY,
  THROUGH,
  FROM,
  UNTIL,
  EVERYTHING
}

//net.minecraft.entity.EquipmentSlot$Type
enum EquipmentSlot_Type {
  HAND,
  ARMOR
}

//net.minecraft.entity.EntityPose
enum EntityPose {
  STANDING,
  FALL_FLYING,
  SLEEPING,
  SWIMMING,
  SPIN_ATTACK,
  CROUCHING,
  LONG_JUMPING,
  DYING,
  CROAKING,
  USING_TONGUE,
  SITTING,
  ROARING,
  SNIFFING,
  EMERGING,
  DIGGING
}

//net.minecraft.world.poi.PointOfInterestStorage$OccupationStatus
enum PointOfInterestStorage_OccupationStatus {
  HAS_SPACE,
  IS_OCCUPIED,
  ANY
}

//net.minecraft.world.chunk.light.LightStorage$Status
enum LightStorage_Status {
  EMPTY,
  LIGHT_ONLY,
  LIGHT_AND_DATA
}

//net.minecraft.block.entity.ShulkerBoxBlockEntity$AnimationStage
enum ShulkerBoxBlockEntity_AnimationStage {
  CLOSED,
  OPENING,
  OPENED,
  CLOSING
}

//net.minecraft.client.MinecraftClient$ChatRestriction
//null

//net.minecraft.entity.boss.BossBar$Color
enum BossBar_Color {
  PINK,
  BLUE,
  RED,
  GREEN,
  YELLOW,
  PURPLE,
  WHITE
}

//net.minecraft.world.tick.TickPriority
enum TickPriority {
  EXTREMELY_HIGH,
  VERY_HIGH,
  HIGH,
  NORMAL,
  LOW,
  VERY_LOW,
  EXTREMELY_LOW
}

//net.minecraft.client.toast.SystemToast$Type
enum SystemToast_Type {
  TUTORIAL_HINT,
  NARRATOR_TOGGLE,
  WORLD_BACKUP,
  PACK_LOAD_FAILURE,
  WORLD_ACCESS_FAILURE,
  PACK_COPY_FAILURE,
  PERIODIC_NOTIFICATION,
  UNSECURE_SERVER_WARNING
}

//net.minecraft.client.util.telemetry.TelemetryEventProperty$ServerType
enum TelemetryEventProperty_ServerType {
  REALM,
  LOCAL,
  OTHER
}

//net.minecraft.client.gui.hud.MessageIndicator$Icon
enum MessageIndicator_Icon {
  CHAT_MODIFIED
}

//net.minecraft.util.math.VerticalSurfaceType
enum VerticalSurfaceType {
  CEILING,
  FLOOR
}

//net.minecraft.block.Oxidizable$OxidationLevel
enum Oxidizable_OxidationLevel {
  UNAFFECTED,
  EXPOSED,
  WEATHERED,
  OXIDIZED
}

//net.minecraft.enchantment.ProtectionEnchantment$Type
enum ProtectionEnchantment_Type {
  ALL,
  FIRE,
  FALL,
  EXPLOSION,
  PROJECTILE
}

//net.minecraft.util.ModStatus$Confidence
enum ModStatus_Confidence {
  PROBABLY_NOT,
  VERY_LIKELY,
  DEFINITELY
}

//net.minecraft.client.option.ChatVisibility
enum ChatVisibility {
  FULL,
  SYSTEM,
  HIDDEN
}

//net.minecraft.sound.SoundCategory
enum SoundCategory {
  MASTER,
  MUSIC,
  RECORDS,
  WEATHER,
  BLOCKS,
  HOSTILE,
  NEUTRAL,
  PLAYERS,
  AMBIENT,
  VOICE
}

//net.minecraft.item.FireworkRocketItem$Type
enum FireworkRocketItem_Type {
  SMALL_BALL,
  LARGE_BALL,
  STAR,
  CREEPER,
  BURST
}

//net.minecraft.world.Difficulty
enum Difficulty {
  PEACEFUL,
  EASY,
  NORMAL,
  HARD
}

//net.minecraft.resource.ResourceManager$Empty
enum ResourceManager_Empty {
  INSTANCE
}

//net.minecraft.client.gui.navigation.NavigationDirection
enum NavigationDirection {
  UP,
  DOWN,
  LEFT,
  RIGHT
}

//net.minecraft.client.render.model.json.ItemModelGenerator$Side
enum ItemModelGenerator_Side {
  UP,
  DOWN,
  LEFT,
  RIGHT
}

//net.minecraft.util.UseAction
enum UseAction {
  NONE,
  EAT,
  DRINK,
  BLOCK,
  BOW,
  SPEAR,
  CROSSBOW,
  SPYGLASS,
  TOOT_HORN,
  BRUSH
}

//net.minecraft.block.enums.DoubleBlockHalf
enum DoubleBlockHalf {
  upper,
  lower
}

//net.minecraft.block.enums.Instrument
//null

//net.minecraft.entity.Entity$MoveEffect
enum Entity_MoveEffect {
  NONE,
  SOUNDS,
  EVENTS,
  ALL
}

//net.minecraft.loot.function.CopyNbtLootFunction$Operator
enum CopyNbtLootFunction_Operator {
  REPLACE,
  APPEND,
  MERGE
}

//net.minecraft.world.entity.EntityTrackingStatus
enum EntityTrackingStatus {
  HIDDEN,
  TRACKED,
  TICKING
}

//net.minecraft.util.math.EightWayDirection
enum EightWayDirection {
  NORTH,
  NORTH_EAST,
  EAST,
  SOUTH_EAST,
  SOUTH,
  SOUTH_WEST,
  WEST,
  NORTH_WEST
}

//net.minecraft.scoreboard.ScoreboardCriterion$RenderType
enum ScoreboardCriterion_RenderType {
  INTEGER,
  HEARTS
}

//net.minecraft.datafixer.DataFixTypes
enum DataFixTypes {
  LEVEL,
  PLAYER,
  CHUNK,
  HOTBAR,
  OPTIONS,
  STRUCTURE,
  STATS,
  SAVED_DATA,
  ADVANCEMENTS,
  POI_CHUNK,
  WORLD_GEN_SETTINGS,
  ENTITY_CHUNK
}

//net.minecraft.client.render.entity.PlayerModelPart
enum PlayerModelPart {
  CAPE,
  JACKET,
  LEFT_SLEEVE,
  RIGHT_SLEEVE,
  LEFT_PANTS_LEG,
  RIGHT_PANTS_LEG,
  HAT
}

//net.minecraft.village.ZombieSiegeManager$State
enum ZombieSiegeManager_State {
  SIEGE_CAN_ACTIVATE,
  SIEGE_TONIGHT,
  SIEGE_DONE
}

//net.minecraft.entity.vehicle.BoatEntity$Type
//Could not initialize class net.minecraft.registry.Registries

//net.minecraft.block.enums.WallShape
enum WallShape {
  none,
  low,
  tall
}

//net.minecraft.block.enums.ComparatorMode
enum ComparatorMode {
  compare,
  subtract
}

//net.minecraft.entity.boss.dragon.EnderDragonSpawnState
enum EnderDragonSpawnState {
  START,
  PREPARING_TO_SUMMON_PILLARS,
  SUMMONING_PILLARS,
  SUMMONING_DRAGON,
  END
}

//net.minecraft.world.level.storage.LevelSummary$ConversionWarning
enum LevelSummary_ConversionWarning {
  NONE,
  DOWNGRADE,
  UPGRADE_TO_SNAPSHOT
}

//net.minecraft.server.world.ChunkLevelType
enum ChunkLevelType {
  INACCESSIBLE,
  FULL,
  BLOCK_TICKING,
  ENTITY_TICKING
}

//net.minecraft.world.chunk.UpgradeData$BuiltinLogic
//Could not initialize class net.minecraft.block.Blocks

//net.minecraft.entity.ai.brain.task.MultiTickTask$Status
enum MultiTickTask_Status {
  STOPPED,
  RUNNING
}

//net.minecraft.client.render.entity.feature.VillagerResourceMetadata$HatType
enum VillagerResourceMetadata_HatType {
  NONE,
  PARTIAL,
  FULL
}

//net.minecraft.client.gl.WindowFramebuffer$Attachment
enum WindowFramebuffer_Attachment {
  NONE,
  COLOR,
  DEPTH,
  COLOR_DEPTH
}

//net.minecraft.util.profiling.jfr.sample.GcHeapSummarySample$SummaryType
enum GcHeapSummarySample_SummaryType {
  BEFORE_GC,
  AFTER_GC
}

//net.minecraft.entity.EquipmentSlot
enum EquipmentSlot {
  MAINHAND,
  OFFHAND,
  FEET,
  LEGS,
  CHEST,
  HEAD
}

//net.minecraft.data.family.BlockFamily$Variant
enum BlockFamily_Variant {
  BUTTON,
  CHISELED,
  CRACKED,
  CUT,
  DOOR,
  CUSTOM_FENCE,
  FENCE,
  CUSTOM_FENCE_GATE,
  FENCE_GATE,
  MOSAIC,
  SIGN,
  SLAB,
  STAIRS,
  PRESSURE_PLATE,
  POLISHED,
  TRAPDOOR,
  WALL,
  WALL_SIGN
}

//net.minecraft.client.QuickPlayLogger$WorldType
enum QuickPlayLogger_WorldType {
  SINGLEPLAYER,
  MULTIPLAYER,
  REALMS
}

//net.minecraft.entity.mob.SpellcastingIllagerEntity$Spell
enum SpellcastingIllagerEntity_Spell {
  NONE,
  SUMMON_VEX,
  FANGS,
  WOLOLO,
  DISAPPEAR,
  BLINDNESS
}

//net.minecraft.entity.ai.goal.ChaseBoatState
enum ChaseBoatState {
  GO_TO_BOAT,
  GO_IN_BOAT_DIRECTION
}

//net.minecraft.entity.passive.HorseColor
enum HorseColor {
  WHITE,
  CREAMY,
  CHESTNUT,
  BROWN,
  BLACK,
  GRAY,
  DARK_BROWN
}

//net.minecraft.util.math.AxisTransformation
enum AxisTransformation {
  P123,
  P213,
  P132,
  P231,
  P312,
  P321
}

//net.minecraft.block.MapColor$Brightness
enum MapColor_Brightness {
  LOW,
  NORMAL,
  HIGH,
  LOWEST
}

//net.minecraft.network.packet.c2s.play.PlayerActionC2SPacket$Action
enum PlayerActionC2SPacket_Action {
  START_DESTROY_BLOCK,
  ABORT_DESTROY_BLOCK,
  STOP_DESTROY_BLOCK,
  DROP_ALL_ITEMS,
  DROP_ITEM,
  RELEASE_USE_ITEM,
  SWAP_ITEM_WITH_OFFHAND
}

//net.minecraft.entity.damage.DamageEffects
//Could not initialize class net.minecraft.sound.SoundEvents

//net.minecraft.server.command.CommandManager$RegistrationEnvironment
enum CommandManager_RegistrationEnvironment {
  ALL,
  DEDICATED,
  INTEGRATED
}

//net.minecraft.util.Rarity
enum Rarity {
  COMMON,
  UNCOMMON,
  RARE,
  EPIC
}

//net.minecraft.network.packet.s2c.play.UnlockRecipesS2CPacket$Action
enum UnlockRecipesS2CPacket_Action {
  INIT,
  ADD,
  REMOVE
}

//net.minecraft.block.entity.JigsawBlockEntity$Joint
enum JigsawBlockEntity_Joint {
  ROLLABLE,
  ALIGNED
}

//net.minecraft.block.enums.SlabType
enum SlabType {
  top,
  bottom,
  double
}

//net.minecraft.client.gui.hud.InGameHud$HeartType
enum InGameHud_HeartType {
  CONTAINER,
  NORMAL,
  POISIONED,
  WITHERED,
  ABSORBING,
  FROZEN
}

//net.minecraft.util.DyeColor
enum DyeColor {
  white,
  orange,
  magenta,
  light_blue,
  yellow,
  lime,
  pink,
  gray,
  light_gray,
  cyan,
  purple,
  blue,
  brown,
  green,
  red,
  black
}

//net.minecraft.util.function.LazyIterationConsumer$NextIteration
enum LazyIterationConsumer_NextIteration {
  CONTINUE,
  ABORT
}

//net.minecraft.client.render.model.CubeFace
enum CubeFace {
  DOWN,
  UP,
  NORTH,
  SOUTH,
  WEST,
  EAST
}

//net.minecraft.item.ToolMaterials
enum ToolMaterials {
  WOOD,
  STONE,
  IRON,
  DIAMOND,
  GOLD,
  NETHERITE
}

//net.minecraft.client.resource.ResourceReloadLogger$ReloadReason
enum ResourceReloadLogger_ReloadReason {
  INITIAL,
  MANUAL,
  UNKNOWN
}

//net.minecraft.text.Decoration$Parameter
enum Decoration_Parameter {
  SENDER,
  TARGET,
  CONTENT
}

//net.minecraft.server.world.ServerLightingProvider$Stage
enum ServerLightingProvider_Stage {
  PRE_UPDATE,
  POST_UPDATE
}

//net.minecraft.item.ItemStack$TooltipSection
enum ItemStack_TooltipSection {
  ENCHANTMENTS,
  MODIFIERS,
  UNBREAKABLE,
  CAN_DESTROY,
  CAN_PLACE,
  ADDITIONAL,
  DYE,
  UPGRADES
}

//net.minecraft.world.RaycastContext$ShapeType
enum RaycastContext_ShapeType {
  COLLIDER,
  OUTLINE,
  VISUAL,
  FALLDAMAGE_RESETTING
}

//net.minecraft.block.enums.BlockHalf
enum BlockHalf {
  top,
  bottom
}

//net.minecraft.util.Util$IdentityHashStrategy
enum Util_IdentityHashStrategy {
  INSTANCE
}

//net.minecraft.entity.ai.brain.task.CrossbowAttackTask$CrossbowState
enum CrossbowAttackTask_CrossbowState {
  UNCHARGED,
  CHARGING,
  CHARGED,
  READY_TO_ATTACK
}

//net.minecraft.nbt.scanner.NbtScanner$Result
enum NbtScanner_Result {
  CONTINUE,
  BREAK,
  HALT
}

//net.minecraft.structure.pool.StructurePool$Projection
enum StructurePool_Projection {
  TERRAIN_MATCHING,
  RIGID
}

//net.minecraft.entity.ai.control.MoveControl$State
enum MoveControl_State {
  WAIT,
  MOVE_TO,
  STRAFE,
  JUMPING
}

//net.minecraft.block.enums.BambooLeaves
enum BambooLeaves {
  none,
  small,
  large
}

//net.minecraft.entity.mob.PhantomEntity$PhantomMovementType
enum PhantomEntity_PhantomMovementType {
  CIRCLE,
  SWOOP
}

//net.minecraft.world.chunk.light.ChunkLightingView$Empty
enum ChunkLightingView_Empty {
  INSTANCE
}

//net.minecraft.network.packet.s2c.play.ChatSuggestionsS2CPacket$Action
enum ChatSuggestionsS2CPacket_Action {
  ADD,
  REMOVE,
  SET
}

//net.minecraft.world.GameMode
enum GameMode {
  SURVIVAL,
  CREATIVE,
  ADVENTURE,
  SPECTATOR
}

//net.minecraft.entity.boss.BossBar$Style
enum BossBar_Style {
  PROGRESS,
  NOTCHED_6,
  NOTCHED_10,
  NOTCHED_12,
  NOTCHED_20
}

//net.minecraft.client.option.GraphicsMode
enum GraphicsMode {
  fast,
  fancy,
  fabulous
}

//net.minecraft.util.Hand
enum Hand {
  MAIN_HAND,
  OFF_HAND
}

//net.minecraft.block.enums.PistonType
enum PistonType {
  normal,
  sticky
}

//net.minecraft.block.SideShapeType
//Could not initialize class net.minecraft.block.Block

//net.minecraft.util.Util$OperatingSystem
enum Util_OperatingSystem {
  LINUX,
  SOLARIS,
  WINDOWS,
  OSX,
  UNKNOWN
}

//net.minecraft.client.render.entity.model.ParrotEntityModel$Pose
enum ParrotEntityModel_Pose {
  FLYING,
  STANDING,
  SITTING,
  PARTY,
  ON_SHOULDER
}

//net.minecraft.command.CommandRegistryAccess$EntryListCreationPolicy
enum CommandRegistryAccess_EntryListCreationPolicy {
  CREATE_NEW,
  FAIL
}

//net.minecraft.entity.ai.pathing.PathNodeType
enum PathNodeType {
  BLOCKED,
  OPEN,
  WALKABLE,
  WALKABLE_DOOR,
  TRAPDOOR,
  POWDER_SNOW,
  DANGER_POWDER_SNOW,
  FENCE,
  LAVA,
  WATER,
  WATER_BORDER,
  RAIL,
  UNPASSABLE_RAIL,
  DANGER_FIRE,
  DAMAGE_FIRE,
  DANGER_OTHER,
  DAMAGE_OTHER,
  DOOR_OPEN,
  DOOR_WOOD_CLOSED,
  DOOR_IRON_CLOSED,
  BREACH,
  LEAVES,
  STICKY_HONEY,
  COCOA,
  DAMAGE_CAUTIOUS
}

//net.minecraft.entity.ai.goal.Goal$Control
enum Goal_Control {
  MOVE,
  LOOK,
  JUMP,
  TARGET
}

//net.minecraft.block.enums.SculkSensorPhase
enum SculkSensorPhase {
  inactive,
  active,
  cooldown
}

//net.minecraft.entity.passive.AxolotlEntity$Variant
enum AxolotlEntity_Variant {
  LUCY,
  WILD,
  GOLD,
  CYAN,
  BLUE
}

//net.minecraft.world.level.LevelProperties$SpecialProperty
enum LevelProperties_SpecialProperty {
  NONE,
  FLAT,
  DEBUG
}

//net.minecraft.command.argument.EntityAnchorArgumentType$EntityAnchor
enum EntityAnchorArgumentType_EntityAnchor {
  FEET,
  EYES
}

//net.minecraft.block.SkullBlock$Type
enum SkullBlock_Type {
  SKELETON,
  WITHER_SKELETON,
  PLAYER,
  ZOMBIE,
  CREEPER,
  PIGLIN,
  DRAGON
}

//net.minecraft.client.render.CameraSubmersionType
enum CameraSubmersionType {
  LAVA,
  WATER,
  POWDER_SNOW,
  NONE
}

//net.minecraft.world.chunk.ChunkStatus$ChunkType
enum ChunkStatus_ChunkType {
  PROTOCHUNK,
  LEVELCHUNK
}

//net.minecraft.util.math.AxisCycleDirection
enum AxisCycleDirection {
  NONE,
  FORWARD,
  BACKWARD
}

//net.minecraft.client.gui.screen.advancement.AdvancementTabType
enum AdvancementTabType {
  ABOVE,
  BELOW,
  LEFT,
  RIGHT
}

//net.minecraft.client.util.Session$AccountType
enum Session_AccountType {
  LEGACY,
  MOJANG,
  MSA
}

//net.minecraft.server.command.FillCommand$Mode
enum FillCommand_Mode {
  REPLACE,
  OUTLINE,
  HOLLOW,
  DESTROY
}

//net.minecraft.entity.mob.Angriness
//Could not initialize class net.minecraft.sound.SoundEvents

//net.minecraft.network.packet.s2c.play.PositionFlag
enum PositionFlag {
  X,
  Y,
  Z,
  Y_ROT,
  X_ROT
}

//net.minecraft.screen.slot.SlotActionType
enum SlotActionType {
  PICKUP,
  QUICK_MOVE,
  SWAP,
  CLONE,
  THROW,
  QUICK_CRAFT,
  PICKUP_ALL
}

//net.minecraft.block.enums.JigsawOrientation
enum JigsawOrientation {
  DOWN_EAST,
  DOWN_NORTH,
  DOWN_SOUTH,
  DOWN_WEST,
  UP_EAST,
  UP_NORTH,
  UP_SOUTH,
  UP_WEST,
  WEST_UP,
  EAST_UP,
  NORTH_UP,
  SOUTH_UP
}

//net.minecraft.entity.ai.brain.task.CompositeTask$RunMode$1


//net.minecraft.entity.ai.brain.task.CompositeTask$RunMode$2


//net.minecraft.server.command.AdvancementCommand$Operation$1


//net.minecraft.server.command.AdvancementCommand$Operation$2


//net.minecraft.world.biome.BiomeEffects$GrassColorModifier$1


//net.minecraft.world.biome.BiomeEffects$GrassColorModifier$2


//net.minecraft.world.biome.BiomeEffects$GrassColorModifier$3


//net.minecraft.util.math.Direction$Axis$3


//net.minecraft.util.math.Direction$Axis$2


//net.minecraft.util.math.Direction$Axis$1


//net.minecraft.enchantment.EnchantmentTarget$14


//net.minecraft.enchantment.EnchantmentTarget$4


//net.minecraft.enchantment.EnchantmentTarget$3


//net.minecraft.enchantment.EnchantmentTarget$2


//net.minecraft.enchantment.EnchantmentTarget$1


//net.minecraft.enchantment.EnchantmentTarget$13


//net.minecraft.enchantment.EnchantmentTarget$12


//net.minecraft.enchantment.EnchantmentTarget$11


//net.minecraft.enchantment.EnchantmentTarget$10


//net.minecraft.enchantment.EnchantmentTarget$9


//net.minecraft.enchantment.EnchantmentTarget$8


//net.minecraft.enchantment.EnchantmentTarget$7


//net.minecraft.enchantment.EnchantmentTarget$6


//net.minecraft.enchantment.EnchantmentTarget$5


//net.minecraft.world.biome.Biome$TemperatureModifier$2


//net.minecraft.world.biome.Biome$TemperatureModifier$1


//net.minecraft.block.LichenGrower$GrowType$2


//net.minecraft.block.LichenGrower$GrowType$1


//net.minecraft.block.LichenGrower$GrowType$3


//net.minecraft.client.MinecraftClient$ChatRestriction$1


//net.minecraft.client.MinecraftClient$ChatRestriction$2


//net.minecraft.client.MinecraftClient$ChatRestriction$3


//net.minecraft.client.MinecraftClient$ChatRestriction$4


//net.minecraft.loot.function.CopyNbtLootFunction$Operator$3


//net.minecraft.loot.function.CopyNbtLootFunction$Operator$1


//net.minecraft.loot.function.CopyNbtLootFunction$Operator$2


//net.minecraft.entity.boss.dragon.EnderDragonSpawnState$3


//net.minecraft.entity.boss.dragon.EnderDragonSpawnState$2


//net.minecraft.entity.boss.dragon.EnderDragonSpawnState$5


//net.minecraft.entity.boss.dragon.EnderDragonSpawnState$4


//net.minecraft.entity.boss.dragon.EnderDragonSpawnState$1


//net.minecraft.world.chunk.UpgradeData$BuiltinLogic$3


//net.minecraft.world.chunk.UpgradeData$BuiltinLogic$2


//net.minecraft.world.chunk.UpgradeData$BuiltinLogic$1


//net.minecraft.world.chunk.UpgradeData$BuiltinLogic$5


//net.minecraft.world.chunk.UpgradeData$BuiltinLogic$4


//net.minecraft.block.SideShapeType$2


//net.minecraft.block.SideShapeType$1


//net.minecraft.block.SideShapeType$3


//net.minecraft.util.Util$OperatingSystem$2


//net.minecraft.util.Util$OperatingSystem$1


//net.minecraft.util.math.AxisCycleDirection$1


//net.minecraft.util.math.AxisCycleDirection$2


//net.minecraft.util.math.AxisCycleDirection$3


